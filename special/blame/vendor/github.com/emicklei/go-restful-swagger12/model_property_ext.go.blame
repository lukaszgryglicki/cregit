0000000000000000000000000000000000000000;;	package swagger
9ef7dd5e7773cb823da17c71b97a468e6faf6712;Godeps/_workspace/src/github.com/emicklei/go-restful/swagger/model_property_ext.go[Godeps/_workspace/src/github.com/emicklei/go-restful/swagger/model_property_ext.go][vendor/github.com/emicklei/go-restful-swagger12/model_property_ext.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (prop *ModelProperty) setDescription(field reflect.StructField) {
0000000000000000000000000000000000000000;;		if tag := field.Tag.Get("description"); tag != "" {
0000000000000000000000000000000000000000;;			prop.Description = tag
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (prop *ModelProperty) setDefaultValue(field reflect.StructField) {
0000000000000000000000000000000000000000;;		if tag := field.Tag.Get("default"); tag != "" {
0000000000000000000000000000000000000000;;			prop.DefaultValue = Special(tag)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (prop *ModelProperty) setEnumValues(field reflect.StructField) {
0000000000000000000000000000000000000000;;		// We use | to separate the enum values.  This value is chosen
0000000000000000000000000000000000000000;;		// since its unlikely to be useful in actual enumeration values.
0000000000000000000000000000000000000000;;		if tag := field.Tag.Get("enum"); tag != "" {
0000000000000000000000000000000000000000;;			prop.Enum = strings.Split(tag, "|")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (prop *ModelProperty) setMaximum(field reflect.StructField) {
0000000000000000000000000000000000000000;;		if tag := field.Tag.Get("maximum"); tag != "" {
0000000000000000000000000000000000000000;;			prop.Maximum = tag
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (prop *ModelProperty) setType(field reflect.StructField) {
0000000000000000000000000000000000000000;;		if tag := field.Tag.Get("type"); tag != "" {
0000000000000000000000000000000000000000;;			// Check if the first two characters of the type tag are
0000000000000000000000000000000000000000;;			// intended to emulate slice/array behaviour.
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			// If type is intended to be a slice/array then add the
0000000000000000000000000000000000000000;;			// overriden type to the array item instead of the main property
0000000000000000000000000000000000000000;;			if len(tag) > 2 && tag[0:2] == "[]" {
0000000000000000000000000000000000000000;;				pType := "array"
0000000000000000000000000000000000000000;;				prop.Type = &pType
0000000000000000000000000000000000000000;;				prop.Items = new(Item)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				iType := tag[2:]
0000000000000000000000000000000000000000;;				prop.Items.Type = &iType
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			prop.Type = &tag
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (prop *ModelProperty) setMinimum(field reflect.StructField) {
0000000000000000000000000000000000000000;;		if tag := field.Tag.Get("minimum"); tag != "" {
0000000000000000000000000000000000000000;;			prop.Minimum = tag
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (prop *ModelProperty) setUniqueItems(field reflect.StructField) {
0000000000000000000000000000000000000000;;		tag := field.Tag.Get("unique")
0000000000000000000000000000000000000000;;		switch tag {
0000000000000000000000000000000000000000;;		case "true":
0000000000000000000000000000000000000000;;			v := true
0000000000000000000000000000000000000000;;			prop.UniqueItems = &v
0000000000000000000000000000000000000000;;		case "false":
0000000000000000000000000000000000000000;;			v := false
0000000000000000000000000000000000000000;;			prop.UniqueItems = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (prop *ModelProperty) setPropertyMetadata(field reflect.StructField) {
0000000000000000000000000000000000000000;;		prop.setDescription(field)
0000000000000000000000000000000000000000;;		prop.setEnumValues(field)
0000000000000000000000000000000000000000;;		prop.setMinimum(field)
0000000000000000000000000000000000000000;;		prop.setMaximum(field)
0000000000000000000000000000000000000000;;		prop.setUniqueItems(field)
0000000000000000000000000000000000000000;;		prop.setDefaultValue(field)
0000000000000000000000000000000000000000;;		prop.setType(field)
0000000000000000000000000000000000000000;;	}
