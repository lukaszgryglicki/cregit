0000000000000000000000000000000000000000;;	package restful
faffbe4b32b67a5323e317a6025ba76cb607b435;Godeps/_workspace/src/github.com/emicklei/go-restful/filter.go[Godeps/_workspace/src/github.com/emicklei/go-restful/filter.go][vendor/github.com/emicklei/go-restful/filter.go];	
0000000000000000000000000000000000000000;;	// Copyright 2013 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FilterChain is a request scoped object to process one or more filters before calling the target RouteFunction.
0000000000000000000000000000000000000000;;	type FilterChain struct {
0000000000000000000000000000000000000000;;		Filters []FilterFunction // ordered list of FilterFunction
0000000000000000000000000000000000000000;;		Index   int              // index into filters that is currently in progress
0000000000000000000000000000000000000000;;		Target  RouteFunction    // function to call after passing all filters
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProcessFilter passes the request,response pair through the next of Filters.
0000000000000000000000000000000000000000;;	// Each filter can decide to proceed to the next Filter or handle the Response itself.
0000000000000000000000000000000000000000;;	func (f *FilterChain) ProcessFilter(request *Request, response *Response) {
0000000000000000000000000000000000000000;;		if f.Index < len(f.Filters) {
0000000000000000000000000000000000000000;;			f.Index++
0000000000000000000000000000000000000000;;			f.Filters[f.Index-1](request, response, f)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			f.Target(request, response)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FilterFunction definitions must call ProcessFilter on the FilterChain to pass on the control and eventually call the RouteFunction
0000000000000000000000000000000000000000;;	type FilterFunction func(*Request, *Response, *FilterChain)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NoBrowserCacheFilter is a filter function to set HTTP headers that disable browser caching
0000000000000000000000000000000000000000;;	// See examples/restful-no-cache-filter.go for usage
0000000000000000000000000000000000000000;;	func NoBrowserCacheFilter(req *Request, resp *Response, chain *FilterChain) {
0000000000000000000000000000000000000000;;		resp.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate") // HTTP 1.1.
0000000000000000000000000000000000000000;;		resp.Header().Set("Pragma", "no-cache")                                   // HTTP 1.0.
0000000000000000000000000000000000000000;;		resp.Header().Set("Expires", "0")                                         // Proxies.
0000000000000000000000000000000000000000;;		chain.ProcessFilter(req, resp)
0000000000000000000000000000000000000000;;	}
