0000000000000000000000000000000000000000;;	package restful
faffbe4b32b67a5323e317a6025ba76cb607b435;Godeps/_workspace/src/github.com/emicklei/go-restful/web_service_container.go[Godeps/_workspace/src/github.com/emicklei/go-restful/web_service_container.go][vendor/github.com/emicklei/go-restful/web_service_container.go];	
0000000000000000000000000000000000000000;;	// Copyright 2013 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultContainer is a restful.Container that uses http.DefaultServeMux
0000000000000000000000000000000000000000;;	var DefaultContainer *Container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		DefaultContainer = NewContainer()
0000000000000000000000000000000000000000;;		DefaultContainer.ServeMux = http.DefaultServeMux
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If set the true then panics will not be caught to return HTTP 500.
0000000000000000000000000000000000000000;;	// In that case, Route functions are responsible for handling any error situation.
0000000000000000000000000000000000000000;;	// Default value is false = recover from panics. This has performance implications.
0000000000000000000000000000000000000000;;	// OBSOLETE ; use restful.DefaultContainer.DoNotRecover(true)
0000000000000000000000000000000000000000;;	var DoNotRecover = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add registers a new WebService add it to the DefaultContainer.
0000000000000000000000000000000000000000;;	func Add(service *WebService) {
0000000000000000000000000000000000000000;;		DefaultContainer.Add(service)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter appends a container FilterFunction from the DefaultContainer.
0000000000000000000000000000000000000000;;	// These are called before dispatching a http.Request to a WebService.
0000000000000000000000000000000000000000;;	func Filter(filter FilterFunction) {
0000000000000000000000000000000000000000;;		DefaultContainer.Filter(filter)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisteredWebServices returns the collections of WebServices from the DefaultContainer
0000000000000000000000000000000000000000;;	func RegisteredWebServices() []*WebService {
0000000000000000000000000000000000000000;;		return DefaultContainer.RegisteredWebServices()
0000000000000000000000000000000000000000;;	}
