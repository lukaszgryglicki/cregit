0000000000000000000000000000000000000000;;	package restful
faffbe4b32b67a5323e317a6025ba76cb607b435;Godeps/_workspace/src/github.com/emicklei/go-restful/route_builder.go[Godeps/_workspace/src/github.com/emicklei/go-restful/route_builder.go][vendor/github.com/emicklei/go-restful/route_builder.go];	
0000000000000000000000000000000000000000;;	// Copyright 2013 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful/log"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteBuilder is a helper to construct Routes.
0000000000000000000000000000000000000000;;	type RouteBuilder struct {
0000000000000000000000000000000000000000;;		rootPath    string
0000000000000000000000000000000000000000;;		currentPath string
0000000000000000000000000000000000000000;;		produces    []string
0000000000000000000000000000000000000000;;		consumes    []string
0000000000000000000000000000000000000000;;		httpMethod  string        // required
0000000000000000000000000000000000000000;;		function    RouteFunction // required
0000000000000000000000000000000000000000;;		filters     []FilterFunction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		typeNameHandleFunc TypeNameHandleFunction // required
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// documentation
0000000000000000000000000000000000000000;;		doc                     string
0000000000000000000000000000000000000000;;		notes                   string
0000000000000000000000000000000000000000;;		operation               string
0000000000000000000000000000000000000000;;		readSample, writeSample interface{}
0000000000000000000000000000000000000000;;		parameters              []*Parameter
0000000000000000000000000000000000000000;;		errorMap                map[int]ResponseError
0000000000000000000000000000000000000000;;		metadata                map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do evaluates each argument with the RouteBuilder itself.
0000000000000000000000000000000000000000;;	// This allows you to follow DRY principles without breaking the fluent programming style.
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	// 		ws.Route(ws.DELETE("/{name}").To(t.deletePerson).Do(Returns200, Returns500))
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//		func Returns500(b *RouteBuilder) {
0000000000000000000000000000000000000000;;	//			b.Returns(500, "Internal Server Error", restful.ServiceError{})
0000000000000000000000000000000000000000;;	//		}
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Do(oneArgBlocks ...func(*RouteBuilder)) *RouteBuilder {
0000000000000000000000000000000000000000;;		for _, each := range oneArgBlocks {
0000000000000000000000000000000000000000;;			each(b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To bind the route to a function.
0000000000000000000000000000000000000000;;	// If this route is matched with the incoming Http Request then call this function with the *Request,*Response pair. Required.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) To(function RouteFunction) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.function = function
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Method specifies what HTTP method to match. Required.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Method(method string) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.httpMethod = method
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Produces specifies what MIME types can be produced ; the matched one will appear in the Content-Type Http header.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Produces(mimeTypes ...string) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.produces = mimeTypes
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Consumes specifies what MIME types can be consumes ; the Accept Http header must matched any of these
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Consumes(mimeTypes ...string) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.consumes = mimeTypes
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Path specifies the relative (w.r.t WebService root path) URL path to match. Default is "/".
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Path(subPath string) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.currentPath = subPath
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Doc tells what this route is all about. Optional.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Doc(documentation string) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.doc = documentation
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A verbose explanation of the operation behavior. Optional.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Notes(notes string) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.notes = notes
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reads tells what resource type will be read from the request payload. Optional.
0000000000000000000000000000000000000000;;	// A parameter of type "body" is added ,required is set to true and the dataType is set to the qualified name of the sample's type.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Reads(sample interface{}) *RouteBuilder {
0000000000000000000000000000000000000000;;		fn := b.typeNameHandleFunc
0000000000000000000000000000000000000000;;		if fn == nil {
0000000000000000000000000000000000000000;;			fn = reflectTypeName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeAsName := fn(sample)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.readSample = sample
0000000000000000000000000000000000000000;;		bodyParameter := &Parameter{&ParameterData{Name: "body"}}
0000000000000000000000000000000000000000;;		bodyParameter.beBody()
0000000000000000000000000000000000000000;;		bodyParameter.Required(true)
0000000000000000000000000000000000000000;;		bodyParameter.DataType(typeAsName)
0000000000000000000000000000000000000000;;		b.Param(bodyParameter)
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParameterNamed returns a Parameter already known to the RouteBuilder. Returns nil if not.
0000000000000000000000000000000000000000;;	// Use this to modify or extend information for the Parameter (through its Data()).
0000000000000000000000000000000000000000;;	func (b RouteBuilder) ParameterNamed(name string) (p *Parameter) {
0000000000000000000000000000000000000000;;		for _, each := range b.parameters {
0000000000000000000000000000000000000000;;			if each.Data().Name == name {
0000000000000000000000000000000000000000;;				return each
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Writes tells what resource type will be written as the response payload. Optional.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Writes(sample interface{}) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.writeSample = sample
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Param allows you to document the parameters of the Route. It adds a new Parameter (does not check for duplicates).
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Param(parameter *Parameter) *RouteBuilder {
0000000000000000000000000000000000000000;;		if b.parameters == nil {
0000000000000000000000000000000000000000;;			b.parameters = []*Parameter{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.parameters = append(b.parameters, parameter)
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Operation allows you to document what the actual method/function call is of the Route.
0000000000000000000000000000000000000000;;	// Unless called, the operation name is derived from the RouteFunction set using To(..).
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Operation(name string) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.operation = name
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReturnsError is deprecated, use Returns instead.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) ReturnsError(code int, message string, model interface{}) *RouteBuilder {
0000000000000000000000000000000000000000;;		log.Print("ReturnsError is deprecated, use Returns instead.")
0000000000000000000000000000000000000000;;		return b.Returns(code, message, model)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns allows you to document what responses (errors or regular) can be expected.
0000000000000000000000000000000000000000;;	// The model parameter is optional ; either pass a struct instance or use nil if not applicable.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Returns(code int, message string, model interface{}) *RouteBuilder {
0000000000000000000000000000000000000000;;		err := ResponseError{
0000000000000000000000000000000000000000;;			Code:      code,
0000000000000000000000000000000000000000;;			Message:   message,
0000000000000000000000000000000000000000;;			Model:     model,
0000000000000000000000000000000000000000;;			IsDefault: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// lazy init because there is no NewRouteBuilder (yet)
0000000000000000000000000000000000000000;;		if b.errorMap == nil {
0000000000000000000000000000000000000000;;			b.errorMap = map[int]ResponseError{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.errorMap[code] = err
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultReturns is a special Returns call that sets the default of the response ; the code is zero.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) DefaultReturns(message string, model interface{}) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.Returns(0, message, model)
0000000000000000000000000000000000000000;;		// Modify the ResponseError just added/updated
0000000000000000000000000000000000000000;;		re := b.errorMap[0]
0000000000000000000000000000000000000000;;		// errorMap is initialized
0000000000000000000000000000000000000000;;		b.errorMap[0] = ResponseError{
0000000000000000000000000000000000000000;;			Code:      re.Code,
0000000000000000000000000000000000000000;;			Message:   re.Message,
0000000000000000000000000000000000000000;;			Model:     re.Model,
0000000000000000000000000000000000000000;;			IsDefault: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Metadata adds or updates a key=value pair to the metadata map.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Metadata(key string, value interface{}) *RouteBuilder {
0000000000000000000000000000000000000000;;		if b.metadata == nil {
0000000000000000000000000000000000000000;;			b.metadata = map[string]interface{}{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.metadata[key] = value
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResponseError represents a response; not necessarily an error.
0000000000000000000000000000000000000000;;	type ResponseError struct {
0000000000000000000000000000000000000000;;		Code      int
0000000000000000000000000000000000000000;;		Message   string
0000000000000000000000000000000000000000;;		Model     interface{}
0000000000000000000000000000000000000000;;		IsDefault bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) servicePath(path string) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.rootPath = path
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter appends a FilterFunction to the end of filters for this Route to build.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Filter(filter FilterFunction) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.filters = append(b.filters, filter)
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If no specific Route path then set to rootPath
0000000000000000000000000000000000000000;;	// If no specific Produces then set to rootProduces
0000000000000000000000000000000000000000;;	// If no specific Consumes then set to rootConsumes
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) copyDefaults(rootProduces, rootConsumes []string) {
0000000000000000000000000000000000000000;;		if len(b.produces) == 0 {
0000000000000000000000000000000000000000;;			b.produces = rootProduces
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(b.consumes) == 0 {
0000000000000000000000000000000000000000;;			b.consumes = rootConsumes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// typeNameHandler sets the function that will convert types to strings in the parameter
0000000000000000000000000000000000000000;;	// and model definitions.
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) typeNameHandler(handler TypeNameHandleFunction) *RouteBuilder {
0000000000000000000000000000000000000000;;		b.typeNameHandleFunc = handler
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Build creates a new Route using the specification details collected by the RouteBuilder
0000000000000000000000000000000000000000;;	func (b *RouteBuilder) Build() Route {
0000000000000000000000000000000000000000;;		pathExpr, err := newPathExpression(b.currentPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Printf("[restful] Invalid path:%s because:%v", b.currentPath, err)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if b.function == nil {
0000000000000000000000000000000000000000;;			log.Printf("[restful] No function specified for route:" + b.currentPath)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		operationName := b.operation
0000000000000000000000000000000000000000;;		if len(operationName) == 0 && b.function != nil {
0000000000000000000000000000000000000000;;			// extract from definition
0000000000000000000000000000000000000000;;			operationName = nameOfFunction(b.function)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		route := Route{
0000000000000000000000000000000000000000;;			Method:         b.httpMethod,
0000000000000000000000000000000000000000;;			Path:           concatPath(b.rootPath, b.currentPath),
0000000000000000000000000000000000000000;;			Produces:       b.produces,
0000000000000000000000000000000000000000;;			Consumes:       b.consumes,
0000000000000000000000000000000000000000;;			Function:       b.function,
0000000000000000000000000000000000000000;;			Filters:        b.filters,
0000000000000000000000000000000000000000;;			relativePath:   b.currentPath,
0000000000000000000000000000000000000000;;			pathExpr:       pathExpr,
0000000000000000000000000000000000000000;;			Doc:            b.doc,
0000000000000000000000000000000000000000;;			Notes:          b.notes,
0000000000000000000000000000000000000000;;			Operation:      operationName,
0000000000000000000000000000000000000000;;			ParameterDocs:  b.parameters,
0000000000000000000000000000000000000000;;			ResponseErrors: b.errorMap,
0000000000000000000000000000000000000000;;			ReadSample:     b.readSample,
0000000000000000000000000000000000000000;;			WriteSample:    b.writeSample,
0000000000000000000000000000000000000000;;			Metadata:       b.metadata}
0000000000000000000000000000000000000000;;		route.postBuild()
0000000000000000000000000000000000000000;;		return route
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func concatPath(path1, path2 string) string {
0000000000000000000000000000000000000000;;		return strings.TrimRight(path1, "/") + "/" + strings.TrimLeft(path2, "/")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var anonymousFuncCount int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// nameOfFunction returns the short name of the function f for documentation.
0000000000000000000000000000000000000000;;	// It uses a runtime feature for debugging ; its value may change for later Go versions.
0000000000000000000000000000000000000000;;	func nameOfFunction(f interface{}) string {
0000000000000000000000000000000000000000;;		fun := runtime.FuncForPC(reflect.ValueOf(f).Pointer())
0000000000000000000000000000000000000000;;		tokenized := strings.Split(fun.Name(), ".")
0000000000000000000000000000000000000000;;		last := tokenized[len(tokenized)-1]
0000000000000000000000000000000000000000;;		last = strings.TrimSuffix(last, ")·fm") // < Go 1.5
0000000000000000000000000000000000000000;;		last = strings.TrimSuffix(last, ")-fm") // Go 1.5
0000000000000000000000000000000000000000;;		last = strings.TrimSuffix(last, "·fm")  // < Go 1.5
0000000000000000000000000000000000000000;;		last = strings.TrimSuffix(last, "-fm")  // Go 1.5
0000000000000000000000000000000000000000;;		if last == "func1" {                    // this could mean conflicts in API docs
0000000000000000000000000000000000000000;;			val := atomic.AddInt32(&anonymousFuncCount, 1)
0000000000000000000000000000000000000000;;			last = "func" + fmt.Sprintf("%d", val)
0000000000000000000000000000000000000000;;			atomic.StoreInt32(&anonymousFuncCount, val)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return last
0000000000000000000000000000000000000000;;	}
