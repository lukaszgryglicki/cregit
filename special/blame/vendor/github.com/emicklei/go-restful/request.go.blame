0000000000000000000000000000000000000000;;	package restful
faffbe4b32b67a5323e317a6025ba76cb607b435;Godeps/_workspace/src/github.com/emicklei/go-restful/request.go[Godeps/_workspace/src/github.com/emicklei/go-restful/request.go][vendor/github.com/emicklei/go-restful/request.go];	
0000000000000000000000000000000000000000;;	// Copyright 2013 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"compress/zlib"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var defaultRequestContentType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Request is a wrapper for a http Request that provides convenience methods
0000000000000000000000000000000000000000;;	type Request struct {
0000000000000000000000000000000000000000;;		Request           *http.Request
0000000000000000000000000000000000000000;;		pathParameters    map[string]string
0000000000000000000000000000000000000000;;		attributes        map[string]interface{} // for storing request-scoped values
0000000000000000000000000000000000000000;;		selectedRoutePath string                 // root path + route path that matched the request, e.g. /meetings/{id}/attendees
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRequest(httpRequest *http.Request) *Request {
0000000000000000000000000000000000000000;;		return &Request{
0000000000000000000000000000000000000000;;			Request:        httpRequest,
0000000000000000000000000000000000000000;;			pathParameters: map[string]string{},
0000000000000000000000000000000000000000;;			attributes:     map[string]interface{}{},
0000000000000000000000000000000000000000;;		} // empty parameters, attributes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If ContentType is missing or */* is given then fall back to this type, otherwise
0000000000000000000000000000000000000000;;	// a "Unable to unmarshal content of type:" response is returned.
0000000000000000000000000000000000000000;;	// Valid values are restful.MIME_JSON and restful.MIME_XML
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	// 	restful.DefaultRequestContentType(restful.MIME_JSON)
0000000000000000000000000000000000000000;;	func DefaultRequestContentType(mime string) {
0000000000000000000000000000000000000000;;		defaultRequestContentType = mime
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathParameter accesses the Path parameter value by its name
0000000000000000000000000000000000000000;;	func (r *Request) PathParameter(name string) string {
0000000000000000000000000000000000000000;;		return r.pathParameters[name]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathParameters accesses the Path parameter values
0000000000000000000000000000000000000000;;	func (r *Request) PathParameters() map[string]string {
0000000000000000000000000000000000000000;;		return r.pathParameters
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryParameter returns the (first) Query parameter value by its name
0000000000000000000000000000000000000000;;	func (r *Request) QueryParameter(name string) string {
0000000000000000000000000000000000000000;;		return r.Request.FormValue(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BodyParameter parses the body of the request (once for typically a POST or a PUT) and returns the value of the given name or an error.
0000000000000000000000000000000000000000;;	func (r *Request) BodyParameter(name string) (string, error) {
0000000000000000000000000000000000000000;;		err := r.Request.ParseForm()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.Request.PostFormValue(name), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HeaderParameter returns the HTTP Header value of a Header name or empty if missing
0000000000000000000000000000000000000000;;	func (r *Request) HeaderParameter(name string) string {
0000000000000000000000000000000000000000;;		return r.Request.Header.Get(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadEntity checks the Accept header and reads the content into the entityPointer.
0000000000000000000000000000000000000000;;	func (r *Request) ReadEntity(entityPointer interface{}) (err error) {
0000000000000000000000000000000000000000;;		contentType := r.Request.Header.Get(HEADER_ContentType)
0000000000000000000000000000000000000000;;		contentEncoding := r.Request.Header.Get(HEADER_ContentEncoding)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// check if the request body needs decompression
0000000000000000000000000000000000000000;;		if ENCODING_GZIP == contentEncoding {
0000000000000000000000000000000000000000;;			gzipReader := currentCompressorProvider.AcquireGzipReader()
0000000000000000000000000000000000000000;;			defer currentCompressorProvider.ReleaseGzipReader(gzipReader)
0000000000000000000000000000000000000000;;			gzipReader.Reset(r.Request.Body)
0000000000000000000000000000000000000000;;			r.Request.Body = gzipReader
0000000000000000000000000000000000000000;;		} else if ENCODING_DEFLATE == contentEncoding {
0000000000000000000000000000000000000000;;			zlibReader, err := zlib.NewReader(r.Request.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			r.Request.Body = zlibReader
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// lookup the EntityReader, use defaultRequestContentType if needed and provided
0000000000000000000000000000000000000000;;		entityReader, ok := entityAccessRegistry.accessorAt(contentType)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			if len(defaultRequestContentType) != 0 {
0000000000000000000000000000000000000000;;				entityReader, ok = entityAccessRegistry.accessorAt(defaultRequestContentType)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return NewError(http.StatusBadRequest, "Unable to unmarshal content of type:"+contentType)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return entityReader.Read(r, entityPointer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute adds or replaces the attribute with the given value.
0000000000000000000000000000000000000000;;	func (r *Request) SetAttribute(name string, value interface{}) {
0000000000000000000000000000000000000000;;		r.attributes[name] = value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attribute returns the value associated to the given name. Returns nil if absent.
0000000000000000000000000000000000000000;;	func (r Request) Attribute(name string) interface{} {
0000000000000000000000000000000000000000;;		return r.attributes[name]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SelectedRoutePath root path + route path that matched the request, e.g. /meetings/{id}/attendees
0000000000000000000000000000000000000000;;	func (r Request) SelectedRoutePath() string {
0000000000000000000000000000000000000000;;		return r.selectedRoutePath
0000000000000000000000000000000000000000;;	}
