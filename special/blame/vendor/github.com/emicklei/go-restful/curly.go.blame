0000000000000000000000000000000000000000;;	package restful
faffbe4b32b67a5323e317a6025ba76cb607b435;Godeps/_workspace/src/github.com/emicklei/go-restful/curly.go[Godeps/_workspace/src/github.com/emicklei/go-restful/curly.go][vendor/github.com/emicklei/go-restful/curly.go];	
0000000000000000000000000000000000000000;;	// Copyright 2013 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CurlyRouter expects Routes with paths that contain zero or more parameters in curly brackets.
0000000000000000000000000000000000000000;;	type CurlyRouter struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SelectRoute is part of the Router interface and returns the best match
0000000000000000000000000000000000000000;;	// for the WebService and its Route for the given Request.
0000000000000000000000000000000000000000;;	func (c CurlyRouter) SelectRoute(
0000000000000000000000000000000000000000;;		webServices []*WebService,
0000000000000000000000000000000000000000;;		httpRequest *http.Request) (selectedService *WebService, selected *Route, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requestTokens := tokenizePath(httpRequest.URL.Path)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		detectedService := c.detectWebService(requestTokens, webServices)
0000000000000000000000000000000000000000;;		if detectedService == nil {
0000000000000000000000000000000000000000;;			if trace {
0000000000000000000000000000000000000000;;				traceLogger.Printf("no WebService was found to match URL path:%s\n", httpRequest.URL.Path)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, nil, NewError(http.StatusNotFound, "404: Page Not Found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		candidateRoutes := c.selectRoutes(detectedService, requestTokens)
0000000000000000000000000000000000000000;;		if len(candidateRoutes) == 0 {
0000000000000000000000000000000000000000;;			if trace {
0000000000000000000000000000000000000000;;				traceLogger.Printf("no Route in WebService with path %s was found to match URL path:%s\n", detectedService.rootPath, httpRequest.URL.Path)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return detectedService, nil, NewError(http.StatusNotFound, "404: Page Not Found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		selectedRoute, err := c.detectRoute(candidateRoutes, httpRequest)
0000000000000000000000000000000000000000;;		if selectedRoute == nil {
0000000000000000000000000000000000000000;;			return detectedService, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return detectedService, selectedRoute, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// selectRoutes return a collection of Route from a WebService that matches the path tokens from the request.
0000000000000000000000000000000000000000;;	func (c CurlyRouter) selectRoutes(ws *WebService, requestTokens []string) sortableCurlyRoutes {
0000000000000000000000000000000000000000;;		candidates := sortableCurlyRoutes{}
0000000000000000000000000000000000000000;;		for _, each := range ws.routes {
0000000000000000000000000000000000000000;;			matches, paramCount, staticCount := c.matchesRouteByPathTokens(each.pathParts, requestTokens)
0000000000000000000000000000000000000000;;			if matches {
0000000000000000000000000000000000000000;;				candidates.add(curlyRoute{each, paramCount, staticCount}) // TODO make sure Routes() return pointers?
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(sort.Reverse(candidates))
0000000000000000000000000000000000000000;;		return candidates
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// matchesRouteByPathTokens computes whether it matches, howmany parameters do match and what the number of static path elements are.
0000000000000000000000000000000000000000;;	func (c CurlyRouter) matchesRouteByPathTokens(routeTokens, requestTokens []string) (matches bool, paramCount int, staticCount int) {
0000000000000000000000000000000000000000;;		if len(routeTokens) < len(requestTokens) {
0000000000000000000000000000000000000000;;			// proceed in matching only if last routeToken is wildcard
0000000000000000000000000000000000000000;;			count := len(routeTokens)
0000000000000000000000000000000000000000;;			if count == 0 || !strings.HasSuffix(routeTokens[count-1], "*}") {
0000000000000000000000000000000000000000;;				return false, 0, 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// proceed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, routeToken := range routeTokens {
0000000000000000000000000000000000000000;;			if i == len(requestTokens) {
0000000000000000000000000000000000000000;;				// reached end of request path
0000000000000000000000000000000000000000;;				return false, 0, 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			requestToken := requestTokens[i]
0000000000000000000000000000000000000000;;			if strings.HasPrefix(routeToken, "{") {
0000000000000000000000000000000000000000;;				paramCount++
0000000000000000000000000000000000000000;;				if colon := strings.Index(routeToken, ":"); colon != -1 {
0000000000000000000000000000000000000000;;					// match by regex
0000000000000000000000000000000000000000;;					matchesToken, matchesRemainder := c.regularMatchesPathToken(routeToken, colon, requestToken)
0000000000000000000000000000000000000000;;					if !matchesToken {
0000000000000000000000000000000000000000;;						return false, 0, 0
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if matchesRemainder {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else { // no { prefix
0000000000000000000000000000000000000000;;				if requestToken != routeToken {
0000000000000000000000000000000000000000;;					return false, 0, 0
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				staticCount++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, paramCount, staticCount
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// regularMatchesPathToken tests whether the regular expression part of routeToken matches the requestToken or all remaining tokens
0000000000000000000000000000000000000000;;	// format routeToken is {someVar:someExpression}, e.g. {zipcode:[\d][\d][\d][\d][A-Z][A-Z]}
0000000000000000000000000000000000000000;;	func (c CurlyRouter) regularMatchesPathToken(routeToken string, colon int, requestToken string) (matchesToken bool, matchesRemainder bool) {
0000000000000000000000000000000000000000;;		regPart := routeToken[colon+1 : len(routeToken)-1]
0000000000000000000000000000000000000000;;		if regPart == "*" {
0000000000000000000000000000000000000000;;			if trace {
0000000000000000000000000000000000000000;;				traceLogger.Printf("wildcard parameter detected in route token %s that matches %s\n", routeToken, requestToken)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		matched, err := regexp.MatchString(regPart, requestToken)
0000000000000000000000000000000000000000;;		return (matched && err == nil), false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var jsr311Router = RouterJSR311{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// detectRoute selectes from a list of Route the first match by inspecting both the Accept and Content-Type
0000000000000000000000000000000000000000;;	// headers of the Request. See also RouterJSR311 in jsr311.go
0000000000000000000000000000000000000000;;	func (c CurlyRouter) detectRoute(candidateRoutes sortableCurlyRoutes, httpRequest *http.Request) (*Route, error) {
0000000000000000000000000000000000000000;;		// tracing is done inside detectRoute
0000000000000000000000000000000000000000;;		return jsr311Router.detectRoute(candidateRoutes.routes(), httpRequest)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// detectWebService returns the best matching webService given the list of path tokens.
0000000000000000000000000000000000000000;;	// see also computeWebserviceScore
0000000000000000000000000000000000000000;;	func (c CurlyRouter) detectWebService(requestTokens []string, webServices []*WebService) *WebService {
0000000000000000000000000000000000000000;;		var best *WebService
0000000000000000000000000000000000000000;;		score := -1
0000000000000000000000000000000000000000;;		for _, each := range webServices {
0000000000000000000000000000000000000000;;			matches, eachScore := c.computeWebserviceScore(requestTokens, each.pathExpr.tokens)
0000000000000000000000000000000000000000;;			if matches && (eachScore > score) {
0000000000000000000000000000000000000000;;				best = each
0000000000000000000000000000000000000000;;				score = eachScore
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return best
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// computeWebserviceScore returns whether tokens match and
0000000000000000000000000000000000000000;;	// the weighted score of the longest matching consecutive tokens from the beginning.
0000000000000000000000000000000000000000;;	func (c CurlyRouter) computeWebserviceScore(requestTokens []string, tokens []string) (bool, int) {
0000000000000000000000000000000000000000;;		if len(tokens) > len(requestTokens) {
0000000000000000000000000000000000000000;;			return false, 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		score := 0
0000000000000000000000000000000000000000;;		for i := 0; i < len(tokens); i++ {
0000000000000000000000000000000000000000;;			each := requestTokens[i]
0000000000000000000000000000000000000000;;			other := tokens[i]
0000000000000000000000000000000000000000;;			if len(each) == 0 && len(other) == 0 {
0000000000000000000000000000000000000000;;				score++
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(other) > 0 && strings.HasPrefix(other, "{") {
0000000000000000000000000000000000000000;;				// no empty match
0000000000000000000000000000000000000000;;				if len(each) == 0 {
0000000000000000000000000000000000000000;;					return false, score
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				score += 1
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// not a parameter
0000000000000000000000000000000000000000;;				if each != other {
0000000000000000000000000000000000000000;;					return false, score
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				score += (len(tokens) - i) * 10 //fuzzy
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, score
0000000000000000000000000000000000000000;;	}
