0000000000000000000000000000000000000000;;	package restful
99a62e6cc8d0504a0cf8f4ed1837e136da744673;Godeps/_workspace/src/github.com/emicklei/go-restful/compressors.go[Godeps/_workspace/src/github.com/emicklei/go-restful/compressors.go][vendor/github.com/emicklei/go-restful/compressors.go];	
0000000000000000000000000000000000000000;;	// Copyright 2015 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"compress/gzip"
0000000000000000000000000000000000000000;;		"compress/zlib"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CompressorProvider describes a component that can provider compressors for the std methods.
0000000000000000000000000000000000000000;;	type CompressorProvider interface {
0000000000000000000000000000000000000000;;		// Returns a *gzip.Writer which needs to be released later.
0000000000000000000000000000000000000000;;		// Before using it, call Reset().
0000000000000000000000000000000000000000;;		AcquireGzipWriter() *gzip.Writer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Releases an aqcuired *gzip.Writer.
0000000000000000000000000000000000000000;;		ReleaseGzipWriter(w *gzip.Writer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns a *gzip.Reader which needs to be released later.
0000000000000000000000000000000000000000;;		AcquireGzipReader() *gzip.Reader
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Releases an aqcuired *gzip.Reader.
0000000000000000000000000000000000000000;;		ReleaseGzipReader(w *gzip.Reader)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns a *zlib.Writer which needs to be released later.
0000000000000000000000000000000000000000;;		// Before using it, call Reset().
0000000000000000000000000000000000000000;;		AcquireZlibWriter() *zlib.Writer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Releases an aqcuired *zlib.Writer.
0000000000000000000000000000000000000000;;		ReleaseZlibWriter(w *zlib.Writer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultCompressorProvider is the actual provider of compressors (zlib or gzip).
0000000000000000000000000000000000000000;;	var currentCompressorProvider CompressorProvider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		currentCompressorProvider = NewSyncPoolCompessors()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CurrentCompressorProvider returns the current CompressorProvider.
0000000000000000000000000000000000000000;;	// It is initialized using a SyncPoolCompessors.
0000000000000000000000000000000000000000;;	func CurrentCompressorProvider() CompressorProvider {
0000000000000000000000000000000000000000;;		return currentCompressorProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CompressorProvider sets the actual provider of compressors (zlib or gzip).
0000000000000000000000000000000000000000;;	func SetCompressorProvider(p CompressorProvider) {
0000000000000000000000000000000000000000;;		if p == nil {
0000000000000000000000000000000000000000;;			panic("cannot set compressor provider to nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		currentCompressorProvider = p
0000000000000000000000000000000000000000;;	}
