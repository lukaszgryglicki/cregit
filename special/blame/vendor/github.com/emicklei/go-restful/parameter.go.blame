0000000000000000000000000000000000000000;;	package restful
faffbe4b32b67a5323e317a6025ba76cb607b435;Godeps/_workspace/src/github.com/emicklei/go-restful/parameter.go[Godeps/_workspace/src/github.com/emicklei/go-restful/parameter.go][vendor/github.com/emicklei/go-restful/parameter.go];	
0000000000000000000000000000000000000000;;	// Copyright 2013 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PathParameterKind = indicator of Request parameter type "path"
0000000000000000000000000000000000000000;;		PathParameterKind = iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// QueryParameterKind = indicator of Request parameter type "query"
0000000000000000000000000000000000000000;;		QueryParameterKind
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BodyParameterKind = indicator of Request parameter type "body"
0000000000000000000000000000000000000000;;		BodyParameterKind
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HeaderParameterKind = indicator of Request parameter type "header"
0000000000000000000000000000000000000000;;		HeaderParameterKind
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FormParameterKind = indicator of Request parameter type "form"
0000000000000000000000000000000000000000;;		FormParameterKind
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parameter is for documententing the parameter used in a Http Request
0000000000000000000000000000000000000000;;	// ParameterData kinds are Path,Query and Body
0000000000000000000000000000000000000000;;	type Parameter struct {
0000000000000000000000000000000000000000;;		data *ParameterData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParameterData represents the state of a Parameter.
0000000000000000000000000000000000000000;;	// It is made public to make it accessible to e.g. the Swagger package.
0000000000000000000000000000000000000000;;	type ParameterData struct {
0000000000000000000000000000000000000000;;		Name, Description, DataType, DataFormat string
0000000000000000000000000000000000000000;;		Kind                                    int
0000000000000000000000000000000000000000;;		Required                                bool
0000000000000000000000000000000000000000;;		AllowableValues                         map[string]string
0000000000000000000000000000000000000000;;		AllowMultiple                           bool
0000000000000000000000000000000000000000;;		DefaultValue                            string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Data returns the state of the Parameter
0000000000000000000000000000000000000000;;	func (p *Parameter) Data() ParameterData {
0000000000000000000000000000000000000000;;		return *p.data
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Kind returns the parameter type indicator (see const for valid values)
0000000000000000000000000000000000000000;;	func (p *Parameter) Kind() int {
0000000000000000000000000000000000000000;;		return p.data.Kind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Parameter) bePath() *Parameter {
0000000000000000000000000000000000000000;;		p.data.Kind = PathParameterKind
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (p *Parameter) beQuery() *Parameter {
0000000000000000000000000000000000000000;;		p.data.Kind = QueryParameterKind
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (p *Parameter) beBody() *Parameter {
0000000000000000000000000000000000000000;;		p.data.Kind = BodyParameterKind
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Parameter) beHeader() *Parameter {
0000000000000000000000000000000000000000;;		p.data.Kind = HeaderParameterKind
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Parameter) beForm() *Parameter {
0000000000000000000000000000000000000000;;		p.data.Kind = FormParameterKind
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Required sets the required field and returns the receiver
0000000000000000000000000000000000000000;;	func (p *Parameter) Required(required bool) *Parameter {
0000000000000000000000000000000000000000;;		p.data.Required = required
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowMultiple sets the allowMultiple field and returns the receiver
0000000000000000000000000000000000000000;;	func (p *Parameter) AllowMultiple(multiple bool) *Parameter {
0000000000000000000000000000000000000000;;		p.data.AllowMultiple = multiple
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowableValues sets the allowableValues field and returns the receiver
0000000000000000000000000000000000000000;;	func (p *Parameter) AllowableValues(values map[string]string) *Parameter {
0000000000000000000000000000000000000000;;		p.data.AllowableValues = values
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataType sets the dataType field and returns the receiver
0000000000000000000000000000000000000000;;	func (p *Parameter) DataType(typeName string) *Parameter {
0000000000000000000000000000000000000000;;		p.data.DataType = typeName
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataFormat sets the dataFormat field for Swagger UI
0000000000000000000000000000000000000000;;	func (p *Parameter) DataFormat(formatName string) *Parameter {
0000000000000000000000000000000000000000;;		p.data.DataFormat = formatName
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultValue sets the default value field and returns the receiver
0000000000000000000000000000000000000000;;	func (p *Parameter) DefaultValue(stringRepresentation string) *Parameter {
0000000000000000000000000000000000000000;;		p.data.DefaultValue = stringRepresentation
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Description sets the description value field and returns the receiver
0000000000000000000000000000000000000000;;	func (p *Parameter) Description(doc string) *Parameter {
0000000000000000000000000000000000000000;;		p.data.Description = doc
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
