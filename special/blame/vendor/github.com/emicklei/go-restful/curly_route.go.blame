0000000000000000000000000000000000000000;;	package restful
faffbe4b32b67a5323e317a6025ba76cb607b435;Godeps/_workspace/src/github.com/emicklei/go-restful/curly_route.go[Godeps/_workspace/src/github.com/emicklei/go-restful/curly_route.go][vendor/github.com/emicklei/go-restful/curly_route.go];	
0000000000000000000000000000000000000000;;	// Copyright 2013 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// curlyRoute exits for sorting Routes by the CurlyRouter based on number of parameters and number of static path elements.
0000000000000000000000000000000000000000;;	type curlyRoute struct {
0000000000000000000000000000000000000000;;		route       Route
0000000000000000000000000000000000000000;;		paramCount  int
0000000000000000000000000000000000000000;;		staticCount int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sortableCurlyRoutes []curlyRoute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *sortableCurlyRoutes) add(route curlyRoute) {
0000000000000000000000000000000000000000;;		*s = append(*s, route)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s sortableCurlyRoutes) routes() (routes []Route) {
0000000000000000000000000000000000000000;;		for _, each := range s {
0000000000000000000000000000000000000000;;			routes = append(routes, each.route) // TODO change return type
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return routes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s sortableCurlyRoutes) Len() int {
0000000000000000000000000000000000000000;;		return len(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (s sortableCurlyRoutes) Swap(i, j int) {
0000000000000000000000000000000000000000;;		s[i], s[j] = s[j], s[i]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (s sortableCurlyRoutes) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		ci := s[i]
0000000000000000000000000000000000000000;;		cj := s[j]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// primary key
0000000000000000000000000000000000000000;;		if ci.staticCount < cj.staticCount {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ci.staticCount > cj.staticCount {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// secundary key
0000000000000000000000000000000000000000;;		if ci.paramCount < cj.paramCount {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ci.paramCount > cj.paramCount {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ci.route.Path < cj.route.Path
0000000000000000000000000000000000000000;;	}
