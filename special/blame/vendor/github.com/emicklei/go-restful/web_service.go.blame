0000000000000000000000000000000000000000;;	package restful
faffbe4b32b67a5323e317a6025ba76cb607b435;Godeps/_workspace/src/github.com/emicklei/go-restful/web_service.go[Godeps/_workspace/src/github.com/emicklei/go-restful/web_service.go][vendor/github.com/emicklei/go-restful/web_service.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful/log"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copyright 2013 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WebService holds a collection of Route values that bind a Http Method + URL Path to a function.
0000000000000000000000000000000000000000;;	type WebService struct {
0000000000000000000000000000000000000000;;		rootPath       string
0000000000000000000000000000000000000000;;		pathExpr       *pathExpression // cached compilation of rootPath as RegExp
0000000000000000000000000000000000000000;;		routes         []Route
0000000000000000000000000000000000000000;;		produces       []string
0000000000000000000000000000000000000000;;		consumes       []string
0000000000000000000000000000000000000000;;		pathParameters []*Parameter
0000000000000000000000000000000000000000;;		filters        []FilterFunction
0000000000000000000000000000000000000000;;		documentation  string
0000000000000000000000000000000000000000;;		apiVersion     string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		typeNameHandleFunc TypeNameHandleFunction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dynamicRoutes bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// protects 'routes' if dynamic routes are enabled
0000000000000000000000000000000000000000;;		routesLock sync.RWMutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *WebService) SetDynamicRoutes(enable bool) {
0000000000000000000000000000000000000000;;		w.dynamicRoutes = enable
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TypeNameHandleFunction declares functions that can handle translating the name of a sample object
0000000000000000000000000000000000000000;;	// into the restful documentation for the service.
0000000000000000000000000000000000000000;;	type TypeNameHandleFunction func(sample interface{}) string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TypeNameHandler sets the function that will convert types to strings in the parameter
0000000000000000000000000000000000000000;;	// and model definitions. If not set, the web service will invoke
0000000000000000000000000000000000000000;;	// reflect.TypeOf(object).String().
0000000000000000000000000000000000000000;;	func (w *WebService) TypeNameHandler(handler TypeNameHandleFunction) *WebService {
0000000000000000000000000000000000000000;;		w.typeNameHandleFunc = handler
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// reflectTypeName is the default TypeNameHandleFunction and for a given object
0000000000000000000000000000000000000000;;	// returns the name that Go identifies it with (e.g. "string" or "v1.Object") via
0000000000000000000000000000000000000000;;	// the reflection API.
0000000000000000000000000000000000000000;;	func reflectTypeName(sample interface{}) string {
0000000000000000000000000000000000000000;;		return reflect.TypeOf(sample).String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// compilePathExpression ensures that the path is compiled into a RegEx for those routers that need it.
0000000000000000000000000000000000000000;;	func (w *WebService) compilePathExpression() {
0000000000000000000000000000000000000000;;		compiled, err := newPathExpression(w.rootPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Printf("[restful] invalid path:%s because:%v", w.rootPath, err)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.pathExpr = compiled
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApiVersion sets the API version for documentation purposes.
0000000000000000000000000000000000000000;;	func (w *WebService) ApiVersion(apiVersion string) *WebService {
0000000000000000000000000000000000000000;;		w.apiVersion = apiVersion
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Version returns the API version for documentation purposes.
0000000000000000000000000000000000000000;;	func (w *WebService) Version() string { return w.apiVersion }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Path specifies the root URL template path of the WebService.
0000000000000000000000000000000000000000;;	// All Routes will be relative to this path.
0000000000000000000000000000000000000000;;	func (w *WebService) Path(root string) *WebService {
0000000000000000000000000000000000000000;;		w.rootPath = root
0000000000000000000000000000000000000000;;		if len(w.rootPath) == 0 {
0000000000000000000000000000000000000000;;			w.rootPath = "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.compilePathExpression()
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Param adds a PathParameter to document parameters used in the root path.
0000000000000000000000000000000000000000;;	func (w *WebService) Param(parameter *Parameter) *WebService {
0000000000000000000000000000000000000000;;		if w.pathParameters == nil {
0000000000000000000000000000000000000000;;			w.pathParameters = []*Parameter{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.pathParameters = append(w.pathParameters, parameter)
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathParameter creates a new Parameter of kind Path for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as required with string as its DataType.
0000000000000000000000000000000000000000;;	func (w *WebService) PathParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		return PathParameter(name, description)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathParameter creates a new Parameter of kind Path for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as required with string as its DataType.
0000000000000000000000000000000000000000;;	func PathParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		p := &Parameter{&ParameterData{Name: name, Description: description, Required: true, DataType: "string"}}
0000000000000000000000000000000000000000;;		p.bePath()
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryParameter creates a new Parameter of kind Query for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as not required with string as its DataType.
0000000000000000000000000000000000000000;;	func (w *WebService) QueryParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		return QueryParameter(name, description)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryParameter creates a new Parameter of kind Query for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as not required with string as its DataType.
0000000000000000000000000000000000000000;;	func QueryParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		p := &Parameter{&ParameterData{Name: name, Description: description, Required: false, DataType: "string"}}
0000000000000000000000000000000000000000;;		p.beQuery()
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BodyParameter creates a new Parameter of kind Body for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as required without a DataType.
0000000000000000000000000000000000000000;;	func (w *WebService) BodyParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		return BodyParameter(name, description)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BodyParameter creates a new Parameter of kind Body for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as required without a DataType.
0000000000000000000000000000000000000000;;	func BodyParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		p := &Parameter{&ParameterData{Name: name, Description: description, Required: true}}
0000000000000000000000000000000000000000;;		p.beBody()
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HeaderParameter creates a new Parameter of kind (Http) Header for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as not required with string as its DataType.
0000000000000000000000000000000000000000;;	func (w *WebService) HeaderParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		return HeaderParameter(name, description)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HeaderParameter creates a new Parameter of kind (Http) Header for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as not required with string as its DataType.
0000000000000000000000000000000000000000;;	func HeaderParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		p := &Parameter{&ParameterData{Name: name, Description: description, Required: false, DataType: "string"}}
0000000000000000000000000000000000000000;;		p.beHeader()
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormParameter creates a new Parameter of kind Form (using application/x-www-form-urlencoded) for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as required with string as its DataType.
0000000000000000000000000000000000000000;;	func (w *WebService) FormParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		return FormParameter(name, description)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormParameter creates a new Parameter of kind Form (using application/x-www-form-urlencoded) for documentation purposes.
0000000000000000000000000000000000000000;;	// It is initialized as required with string as its DataType.
0000000000000000000000000000000000000000;;	func FormParameter(name, description string) *Parameter {
0000000000000000000000000000000000000000;;		p := &Parameter{&ParameterData{Name: name, Description: description, Required: false, DataType: "string"}}
0000000000000000000000000000000000000000;;		p.beForm()
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Route creates a new Route using the RouteBuilder and add to the ordered list of Routes.
0000000000000000000000000000000000000000;;	func (w *WebService) Route(builder *RouteBuilder) *WebService {
0000000000000000000000000000000000000000;;		w.routesLock.Lock()
0000000000000000000000000000000000000000;;		defer w.routesLock.Unlock()
0000000000000000000000000000000000000000;;		builder.copyDefaults(w.produces, w.consumes)
0000000000000000000000000000000000000000;;		w.routes = append(w.routes, builder.Build())
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveRoute removes the specified route, looks for something that matches 'path' and 'method'
0000000000000000000000000000000000000000;;	func (w *WebService) RemoveRoute(path, method string) error {
0000000000000000000000000000000000000000;;		if !w.dynamicRoutes {
0000000000000000000000000000000000000000;;			return errors.New("dynamic routes are not enabled.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.routesLock.Lock()
0000000000000000000000000000000000000000;;		defer w.routesLock.Unlock()
0000000000000000000000000000000000000000;;		newRoutes := make([]Route, (len(w.routes) - 1))
0000000000000000000000000000000000000000;;		current := 0
0000000000000000000000000000000000000000;;		for ix := range w.routes {
0000000000000000000000000000000000000000;;			if w.routes[ix].Method == method && w.routes[ix].Path == path {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			newRoutes[current] = w.routes[ix]
0000000000000000000000000000000000000000;;			current = current + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.routes = newRoutes
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Method creates a new RouteBuilder and initialize its http method
0000000000000000000000000000000000000000;;	func (w *WebService) Method(httpMethod string) *RouteBuilder {
0000000000000000000000000000000000000000;;		return new(RouteBuilder).typeNameHandler(w.typeNameHandleFunc).servicePath(w.rootPath).Method(httpMethod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Produces specifies that this WebService can produce one or more MIME types.
0000000000000000000000000000000000000000;;	// Http requests must have one of these values set for the Accept header.
0000000000000000000000000000000000000000;;	func (w *WebService) Produces(contentTypes ...string) *WebService {
0000000000000000000000000000000000000000;;		w.produces = contentTypes
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Consumes specifies that this WebService can consume one or more MIME types.
0000000000000000000000000000000000000000;;	// Http requests must have one of these values set for the Content-Type header.
0000000000000000000000000000000000000000;;	func (w *WebService) Consumes(accepts ...string) *WebService {
0000000000000000000000000000000000000000;;		w.consumes = accepts
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Routes returns the Routes associated with this WebService
0000000000000000000000000000000000000000;;	func (w *WebService) Routes() []Route {
0000000000000000000000000000000000000000;;		if !w.dynamicRoutes {
0000000000000000000000000000000000000000;;			return w.routes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Make a copy of the array to prevent concurrency problems
0000000000000000000000000000000000000000;;		w.routesLock.RLock()
0000000000000000000000000000000000000000;;		defer w.routesLock.RUnlock()
0000000000000000000000000000000000000000;;		result := make([]Route, len(w.routes))
0000000000000000000000000000000000000000;;		for ix := range w.routes {
0000000000000000000000000000000000000000;;			result[ix] = w.routes[ix]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RootPath returns the RootPath associated with this WebService. Default "/"
0000000000000000000000000000000000000000;;	func (w *WebService) RootPath() string {
0000000000000000000000000000000000000000;;		return w.rootPath
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathParameters return the path parameter names for (shared amoung its Routes)
0000000000000000000000000000000000000000;;	func (w *WebService) PathParameters() []*Parameter {
0000000000000000000000000000000000000000;;		return w.pathParameters
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter adds a filter function to the chain of filters applicable to all its Routes
0000000000000000000000000000000000000000;;	func (w *WebService) Filter(filter FilterFunction) *WebService {
0000000000000000000000000000000000000000;;		w.filters = append(w.filters, filter)
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Doc is used to set the documentation of this service.
0000000000000000000000000000000000000000;;	func (w *WebService) Doc(plainText string) *WebService {
0000000000000000000000000000000000000000;;		w.documentation = plainText
0000000000000000000000000000000000000000;;		return w
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Documentation returns it.
0000000000000000000000000000000000000000;;	func (w *WebService) Documentation() string {
0000000000000000000000000000000000000000;;		return w.documentation
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;		Convenience methods
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HEAD is a shortcut for .Method("HEAD").Path(subPath)
0000000000000000000000000000000000000000;;	func (w *WebService) HEAD(subPath string) *RouteBuilder {
0000000000000000000000000000000000000000;;		return new(RouteBuilder).typeNameHandler(w.typeNameHandleFunc).servicePath(w.rootPath).Method("HEAD").Path(subPath)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GET is a shortcut for .Method("GET").Path(subPath)
0000000000000000000000000000000000000000;;	func (w *WebService) GET(subPath string) *RouteBuilder {
0000000000000000000000000000000000000000;;		return new(RouteBuilder).typeNameHandler(w.typeNameHandleFunc).servicePath(w.rootPath).Method("GET").Path(subPath)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// POST is a shortcut for .Method("POST").Path(subPath)
0000000000000000000000000000000000000000;;	func (w *WebService) POST(subPath string) *RouteBuilder {
0000000000000000000000000000000000000000;;		return new(RouteBuilder).typeNameHandler(w.typeNameHandleFunc).servicePath(w.rootPath).Method("POST").Path(subPath)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PUT is a shortcut for .Method("PUT").Path(subPath)
0000000000000000000000000000000000000000;;	func (w *WebService) PUT(subPath string) *RouteBuilder {
0000000000000000000000000000000000000000;;		return new(RouteBuilder).typeNameHandler(w.typeNameHandleFunc).servicePath(w.rootPath).Method("PUT").Path(subPath)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PATCH is a shortcut for .Method("PATCH").Path(subPath)
0000000000000000000000000000000000000000;;	func (w *WebService) PATCH(subPath string) *RouteBuilder {
0000000000000000000000000000000000000000;;		return new(RouteBuilder).typeNameHandler(w.typeNameHandleFunc).servicePath(w.rootPath).Method("PATCH").Path(subPath)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DELETE is a shortcut for .Method("DELETE").Path(subPath)
0000000000000000000000000000000000000000;;	func (w *WebService) DELETE(subPath string) *RouteBuilder {
0000000000000000000000000000000000000000;;		return new(RouteBuilder).typeNameHandler(w.typeNameHandleFunc).servicePath(w.rootPath).Method("DELETE").Path(subPath)
0000000000000000000000000000000000000000;;	}
