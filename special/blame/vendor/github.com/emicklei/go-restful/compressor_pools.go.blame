0000000000000000000000000000000000000000;;	package restful
3c0bc70f9d5f12f5bc9709b9c96f13c1bce3efec;Godeps/_workspace/src/github.com/emicklei/go-restful/compressor_pools.go[Godeps/_workspace/src/github.com/emicklei/go-restful/compressor_pools.go][vendor/github.com/emicklei/go-restful/compressor_pools.go];	
0000000000000000000000000000000000000000;;	// Copyright 2015 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"compress/gzip"
0000000000000000000000000000000000000000;;		"compress/zlib"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SyncPoolCompessors is a CompressorProvider that use the standard sync.Pool.
0000000000000000000000000000000000000000;;	type SyncPoolCompessors struct {
0000000000000000000000000000000000000000;;		GzipWriterPool *sync.Pool
0000000000000000000000000000000000000000;;		GzipReaderPool *sync.Pool
0000000000000000000000000000000000000000;;		ZlibWriterPool *sync.Pool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSyncPoolCompessors returns a new ("empty") SyncPoolCompessors.
0000000000000000000000000000000000000000;;	func NewSyncPoolCompessors() *SyncPoolCompessors {
0000000000000000000000000000000000000000;;		return &SyncPoolCompessors{
0000000000000000000000000000000000000000;;			GzipWriterPool: &sync.Pool{
0000000000000000000000000000000000000000;;				New: func() interface{} { return newGzipWriter() },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			GzipReaderPool: &sync.Pool{
0000000000000000000000000000000000000000;;				New: func() interface{} { return newGzipReader() },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ZlibWriterPool: &sync.Pool{
0000000000000000000000000000000000000000;;				New: func() interface{} { return newZlibWriter() },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SyncPoolCompessors) AcquireGzipWriter() *gzip.Writer {
0000000000000000000000000000000000000000;;		return s.GzipWriterPool.Get().(*gzip.Writer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SyncPoolCompessors) ReleaseGzipWriter(w *gzip.Writer) {
0000000000000000000000000000000000000000;;		s.GzipWriterPool.Put(w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SyncPoolCompessors) AcquireGzipReader() *gzip.Reader {
0000000000000000000000000000000000000000;;		return s.GzipReaderPool.Get().(*gzip.Reader)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SyncPoolCompessors) ReleaseGzipReader(r *gzip.Reader) {
0000000000000000000000000000000000000000;;		s.GzipReaderPool.Put(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SyncPoolCompessors) AcquireZlibWriter() *zlib.Writer {
0000000000000000000000000000000000000000;;		return s.ZlibWriterPool.Get().(*zlib.Writer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SyncPoolCompessors) ReleaseZlibWriter(w *zlib.Writer) {
0000000000000000000000000000000000000000;;		s.ZlibWriterPool.Put(w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newGzipWriter() *gzip.Writer {
0000000000000000000000000000000000000000;;		// create with an empty bytes writer; it will be replaced before using the gzipWriter
0000000000000000000000000000000000000000;;		writer, err := gzip.NewWriterLevel(new(bytes.Buffer), gzip.BestSpeed)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newGzipReader() *gzip.Reader {
0000000000000000000000000000000000000000;;		// create with an empty reader (but with GZIP header); it will be replaced before using the gzipReader
0000000000000000000000000000000000000000;;		// we can safely use currentCompressProvider because it is set on package initialization.
0000000000000000000000000000000000000000;;		w := currentCompressorProvider.AcquireGzipWriter()
0000000000000000000000000000000000000000;;		defer currentCompressorProvider.ReleaseGzipWriter(w)
0000000000000000000000000000000000000000;;		b := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		w.Reset(b)
0000000000000000000000000000000000000000;;		w.Flush()
0000000000000000000000000000000000000000;;		w.Close()
0000000000000000000000000000000000000000;;		reader, err := gzip.NewReader(bytes.NewReader(b.Bytes()))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return reader
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newZlibWriter() *zlib.Writer {
0000000000000000000000000000000000000000;;		writer, err := zlib.NewWriterLevel(new(bytes.Buffer), gzip.BestSpeed)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return writer
0000000000000000000000000000000000000000;;	}
