0000000000000000000000000000000000000000;;	// This work is subject to the CC0 1.0 Universal (CC0 1.0) Public Domain Dedication
0000000000000000000000000000000000000000;;	// license. Its contents can be found at:
0000000000000000000000000000000000000000;;	// http://creativecommons.org/publicdomain/zero/1.0/
ecec4da416f813f03bad36da050c53fcd4444152;;	
0000000000000000000000000000000000000000;;	package bindata
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// writeDebug writes the debug code file.
0000000000000000000000000000000000000000;;	func writeDebug(w io.Writer, c *Config, toc []Asset) error {
0000000000000000000000000000000000000000;;		err := writeDebugHeader(w)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range toc {
0000000000000000000000000000000000000000;;			err = writeDebugAsset(w, c, &toc[i])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// writeDebugHeader writes output file headers.
0000000000000000000000000000000000000000;;	// This targets debug builds.
0000000000000000000000000000000000000000;;	func writeDebugHeader(w io.Writer) error {
0000000000000000000000000000000000000000;;		_, err := fmt.Fprintf(w, `import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// bindataRead reads the given file from disk. It returns an error on failure.
0000000000000000000000000000000000000000;;	func bindataRead(path, name string) ([]byte, error) {
0000000000000000000000000000000000000000;;		buf, err := ioutil.ReadFile(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Error reading asset %%s at %%s: %%v", name, path, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type asset struct {
0000000000000000000000000000000000000000;;		bytes []byte
0000000000000000000000000000000000000000;;		info  os.FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// writeDebugAsset write a debug entry for the given asset.
0000000000000000000000000000000000000000;;	// A debug entry is simply a function which reads the asset from
0000000000000000000000000000000000000000;;	// the original file (e.g.: from disk).
0000000000000000000000000000000000000000;;	func writeDebugAsset(w io.Writer, c *Config, asset *Asset) error {
0000000000000000000000000000000000000000;;		pathExpr := fmt.Sprintf("%q", asset.Path)
0000000000000000000000000000000000000000;;		if c.Dev {
0000000000000000000000000000000000000000;;			pathExpr = fmt.Sprintf("filepath.Join(rootDir, %q)", asset.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := fmt.Fprintf(w, `// %s reads file data from disk. It returns an error on failure.
0000000000000000000000000000000000000000;;	func %s() (*asset, error) {
0000000000000000000000000000000000000000;;		path := %s
0000000000000000000000000000000000000000;;		name := %q
0000000000000000000000000000000000000000;;		bytes, err := bindataRead(path, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fi, err := os.Stat(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Error reading asset info %%s at %%s: %%v", name, path, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a := &asset{bytes: bytes, info: fi}
0000000000000000000000000000000000000000;;		return a, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`, asset.Func, asset.Func, pathExpr, asset.Name)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
