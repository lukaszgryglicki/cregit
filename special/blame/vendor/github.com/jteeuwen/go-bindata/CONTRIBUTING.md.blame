0000000000000000000000000000000000000000;;	## Contribution guidelines.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	So you wish to contribute to this project? Fantastic!
0000000000000000000000000000000000000000;;	Here are a few guidelines to help you do this in a
0000000000000000000000000000000000000000;;	streamlined fashion.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Bug reports
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	When supplying a bug report, please consider the following guidelines.
0000000000000000000000000000000000000000;;	These serve to make it easier for us to address the issue and find a solution.
0000000000000000000000000000000000000000;;	Most of these are pretty self-evident, but sometimes it is still necessary
0000000000000000000000000000000000000000;;	to reiterate them.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Be clear in the way you express the problem. Use simple language and
0000000000000000000000000000000000000000;;	  just enough of it to clearly define the issue. Not everyone is a native
0000000000000000000000000000000000000000;;	  English speaker. And while most can handle themselves pretty well,
0000000000000000000000000000000000000000;;	  it helps to stay away from more esoteric vocabulary.
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  Be patient with non-native English speakers. If their bug reports
0000000000000000000000000000000000000000;;	  or comments are hard to understand, just ask for clarification.
0000000000000000000000000000000000000000;;	  Do not start guessing at their meaning, as this may just lead to
0000000000000000000000000000000000000000;;	  more confusion and misunderstandings.
0000000000000000000000000000000000000000;;	* Clearly define any information which is relevant to the problem.
0000000000000000000000000000000000000000;;	  This includes library versions, operating system and any other
0000000000000000000000000000000000000000;;	  external dependencies which may be needed.
0000000000000000000000000000000000000000;;	* Where applicable, provide a step-by-step listing of the way to
0000000000000000000000000000000000000000;;	  reproduce the problem. Make sure this is the simplest possible
0000000000000000000000000000000000000000;;	  way to do so. Omit any and all unneccesary steps, because they may
0000000000000000000000000000000000000000;;	  just complicate our understanding of the real problem.
0000000000000000000000000000000000000000;;	  If need be, create a whole new code project on your local machine,
0000000000000000000000000000000000000000;;	  which specifically tries to create the problem you are running into;
0000000000000000000000000000000000000000;;	  nothing more, nothing less.
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  Include this program in the bug report. It often suffices to paste
0000000000000000000000000000000000000000;;	  the code in a [Gist](https://gist.github.com) or on the
0000000000000000000000000000000000000000;;	  [Go playground](http://play.golang.org).
0000000000000000000000000000000000000000;;	* If possible, provide us with a listing of the steps you have already
0000000000000000000000000000000000000000;;	  undertaken to solve the problem. This can save us a great deal of
0000000000000000000000000000000000000000;;	  wasted time, trying out solutions you have already covered.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Pull requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Bug reports are great. Supplying fixes to bugs is even better.
0000000000000000000000000000000000000000;;	When submitting a pull request, the following guidelines are
0000000000000000000000000000000000000000;;	good to keep in mind:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* `go fmt`: **Always** run your code through `go fmt`, before
0000000000000000000000000000000000000000;;	  committing it. Code has to be readable by many different
0000000000000000000000000000000000000000;;	  people. And the only way this will be as painless as possible,
0000000000000000000000000000000000000000;;	  is if we all stick to the same code style.
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  Some of our projects may have automated build-servers hooked up
0000000000000000000000000000000000000000;;	  to commit hooks. These will vet any submitted code and determine
0000000000000000000000000000000000000000;;	  if it meets a set of properties. One of which is code formatting.
0000000000000000000000000000000000000000;;	  These servers will outright deny a submission which has not been
0000000000000000000000000000000000000000;;	  run through `go fmt`, even if the code itself is correct.
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  We try to maintain a zero-tolerance policy on this matter,
0000000000000000000000000000000000000000;;	  because consistently formatted code makes life a great deal
0000000000000000000000000000000000000000;;	  easier for everyone involved.
0000000000000000000000000000000000000000;;	* Commit log messages: When committing changes, do so often and
0000000000000000000000000000000000000000;;	  clearly -- Even if you have changed only 1 character in a code
0000000000000000000000000000000000000000;;	  comment. This means that commit log messages should clearly state
0000000000000000000000000000000000000000;;	  exactly what the change does and why. If it fixes a known issue,
0000000000000000000000000000000000000000;;	  then mention the issue number in the commit log. E.g.:
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  > Fixes return value for `foo/boo.Baz()` to be consistent with
0000000000000000000000000000000000000000;;	  > the rest of the API. This addresses issue #32
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  Do not pile a lot of unrelated changes into a single commit.
0000000000000000000000000000000000000000;;	  Pick and choose only those changes for a single commit, which are
0000000000000000000000000000000000000000;;	  directly related. We would much rather see a hundred commits
0000000000000000000000000000000000000000;;	  saying nothing but `"Runs go fmt"` in between any real fixes
0000000000000000000000000000000000000000;;	  than have these style changes embedded in those real fixes.
0000000000000000000000000000000000000000;;	  It creates a lot of noise when trying to review code.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
