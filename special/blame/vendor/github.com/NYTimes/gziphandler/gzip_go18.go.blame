0000000000000000000000000000000000000000;;	// +build go1.8
43b9462ca2f561c16e8a5871711e2a7273a39d24;;	
0000000000000000000000000000000000000000;;	package gziphandler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Push initiates an HTTP/2 server push.
0000000000000000000000000000000000000000;;	// Push returns ErrNotSupported if the client has disabled push or if push
0000000000000000000000000000000000000000;;	// is not supported on the underlying connection.
0000000000000000000000000000000000000000;;	func (w *GzipResponseWriter) Push(target string, opts *http.PushOptions) error {
0000000000000000000000000000000000000000;;		pusher, ok := w.ResponseWriter.(http.Pusher)
0000000000000000000000000000000000000000;;		if ok && pusher != nil {
0000000000000000000000000000000000000000;;			return pusher.Push(target, setAcceptEncodingForPushOptions(opts))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return http.ErrNotSupported
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setAcceptEncodingForPushOptions sets "Accept-Encoding" : "gzip" for PushOptions without overriding existing headers.
0000000000000000000000000000000000000000;;	func setAcceptEncodingForPushOptions(opts *http.PushOptions) *http.PushOptions {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = &http.PushOptions{
0000000000000000000000000000000000000000;;				Header: http.Header{
0000000000000000000000000000000000000000;;					acceptEncoding: []string{"gzip"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return opts
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.Header == nil {
0000000000000000000000000000000000000000;;			opts.Header = http.Header{
0000000000000000000000000000000000000000;;				acceptEncoding: []string{"gzip"},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return opts
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if encoding := opts.Header.Get(acceptEncoding); encoding == "" {
0000000000000000000000000000000000000000;;			opts.Header.Add(acceptEncoding, "gzip")
0000000000000000000000000000000000000000;;			return opts
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return opts
0000000000000000000000000000000000000000;;	}
