0000000000000000000000000000000000000000;;	Blackfriday [![Build Status](https://travis-ci.org/russross/blackfriday.svg?branch=master)](https://travis-ci.org/russross/blackfriday)
0000000000000000000000000000000000000000;;	===========
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Blackfriday is a [Markdown][1] processor implemented in [Go][2]. It
0000000000000000000000000000000000000000;;	is paranoid about its input (so you can safely feed it user-supplied
0000000000000000000000000000000000000000;;	data), it is fast, it supports common extensions (tables, smart
0000000000000000000000000000000000000000;;	punctuation substitutions, etc.), and it is safe for all utf-8
0000000000000000000000000000000000000000;;	(unicode) input.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	HTML output is currently supported, along with Smartypants
0000000000000000000000000000000000000000;;	extensions. An experimental LaTeX output engine is also included.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It started as a translation from C of [Sundown][3].
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Installation
0000000000000000000000000000000000000000;;	------------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Blackfriday is compatible with Go 1. If you are using an older
0000000000000000000000000000000000000000;;	release of Go, consider using v1.1 of blackfriday, which was based
0000000000000000000000000000000000000000;;	on the last stable release of Go prior to Go 1. You can find it as a
0000000000000000000000000000000000000000;;	tagged commit on github.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	With Go 1 and git installed:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get github.com/russross/blackfriday
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	will download, compile, and install the package into your `$GOPATH`
0000000000000000000000000000000000000000;;	directory hierarchy. Alternatively, you can achieve the same if you
0000000000000000000000000000000000000000;;	import it into a project:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    import "github.com/russross/blackfriday"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	and `go get` without parameters.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Usage
0000000000000000000000000000000000000000;;	-----
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For basic usage, it is as simple as getting your input into a byte
0000000000000000000000000000000000000000;;	slice and calling:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    output := blackfriday.MarkdownBasic(input)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This renders it with no extensions enabled. To get a more useful
0000000000000000000000000000000000000000;;	feature set, use this instead:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    output := blackfriday.MarkdownCommon(input)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Sanitize untrusted content
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Blackfriday itself does nothing to protect against malicious content. If you are
0000000000000000000000000000000000000000;;	dealing with user-supplied markdown, we recommend running blackfriday's output
0000000000000000000000000000000000000000;;	through HTML sanitizer such as
0000000000000000000000000000000000000000;;	[Bluemonday](https://github.com/microcosm-cc/bluemonday).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Here's an example of simple usage of blackfriday together with bluemonday:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	``` go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	    "github.com/microcosm-cc/bluemonday"
0000000000000000000000000000000000000000;;	    "github.com/russross/blackfriday"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ...
0000000000000000000000000000000000000000;;	unsafe := blackfriday.MarkdownCommon(input)
0000000000000000000000000000000000000000;;	html := bluemonday.UGCPolicy().SanitizeBytes(unsafe)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Custom options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you want to customize the set of options, first get a renderer
0000000000000000000000000000000000000000;;	(currently either the HTML or LaTeX output engines), then use it to
0000000000000000000000000000000000000000;;	call the more general `Markdown` function. For examples, see the
0000000000000000000000000000000000000000;;	implementations of `MarkdownBasic` and `MarkdownCommon` in
0000000000000000000000000000000000000000;;	`markdown.go`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can also check out `blackfriday-tool` for a more complete example
0000000000000000000000000000000000000000;;	of how to use it. Download and install it using:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get github.com/russross/blackfriday-tool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This is a simple command-line tool that allows you to process a
0000000000000000000000000000000000000000;;	markdown file using a standalone program.  You can also browse the
0000000000000000000000000000000000000000;;	source directly on github if you are just looking for some example
0000000000000000000000000000000000000000;;	code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* <http://github.com/russross/blackfriday-tool>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note that if you have not already done so, installing
0000000000000000000000000000000000000000;;	`blackfriday-tool` will be sufficient to download and install
0000000000000000000000000000000000000000;;	blackfriday in addition to the tool itself. The tool binary will be
0000000000000000000000000000000000000000;;	installed in `$GOPATH/bin`.  This is a statically-linked binary that
0000000000000000000000000000000000000000;;	can be copied to wherever you need it without worrying about
0000000000000000000000000000000000000000;;	dependencies and library versions.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Features
0000000000000000000000000000000000000000;;	--------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	All features of Sundown are supported, including:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Compatibility**. The Markdown v1.0.3 test suite passes with
0000000000000000000000000000000000000000;;	    the `--tidy` option.  Without `--tidy`, the differences are
0000000000000000000000000000000000000000;;	    mostly in whitespace and entity escaping, where blackfriday is
0000000000000000000000000000000000000000;;	    more consistent and cleaner.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Common extensions**, including table support, fenced code
0000000000000000000000000000000000000000;;	    blocks, autolinks, strikethroughs, non-strict emphasis, etc.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Safety**. Blackfriday is paranoid when parsing, making it safe
0000000000000000000000000000000000000000;;	    to feed untrusted user input without fear of bad things
0000000000000000000000000000000000000000;;	    happening. The test suite stress tests this and there are no
0000000000000000000000000000000000000000;;	    known inputs that make it crash.  If you find one, please let me
0000000000000000000000000000000000000000;;	    know and send me the input that does it.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    NOTE: "safety" in this context means *runtime safety only*. In order to
0000000000000000000000000000000000000000;;	    protect yourself agains JavaScript injection in untrusted content, see
0000000000000000000000000000000000000000;;	    [this example](https://github.com/russross/blackfriday#sanitize-untrusted-content).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Fast processing**. It is fast enough to render on-demand in
0000000000000000000000000000000000000000;;	    most web applications without having to cache the output.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Thread safety**. You can run multiple parsers in different
0000000000000000000000000000000000000000;;	    goroutines without ill effect. There is no dependence on global
0000000000000000000000000000000000000000;;	    shared state.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Minimal dependencies**. Blackfriday only depends on standard
0000000000000000000000000000000000000000;;	    library packages in Go. The source code is pretty
0000000000000000000000000000000000000000;;	    self-contained, so it is easy to add to any project, including
0000000000000000000000000000000000000000;;	    Google App Engine projects.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Standards compliant**. Output successfully validates using the
0000000000000000000000000000000000000000;;	    W3C validation tool for HTML 4.01 and XHTML 1.0 Transitional.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Extensions
0000000000000000000000000000000000000000;;	----------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In addition to the standard markdown syntax, this package
0000000000000000000000000000000000000000;;	implements the following extensions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Intra-word emphasis supression**. The `_` character is
0000000000000000000000000000000000000000;;	    commonly used inside words when discussing code, so having
0000000000000000000000000000000000000000;;	    markdown interpret it as an emphasis command is usually the
0000000000000000000000000000000000000000;;	    wrong thing. Blackfriday lets you treat all emphasis markers as
0000000000000000000000000000000000000000;;	    normal characters when they occur inside a word.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Tables**. Tables can be created by drawing them in the input
0000000000000000000000000000000000000000;;	    using a simple syntax:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    ```
0000000000000000000000000000000000000000;;	    Name    | Age
0000000000000000000000000000000000000000;;	    --------|------
0000000000000000000000000000000000000000;;	    Bob     | 27
0000000000000000000000000000000000000000;;	    Alice   | 23
0000000000000000000000000000000000000000;;	    ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Fenced code blocks**. In addition to the normal 4-space
0000000000000000000000000000000000000000;;	    indentation to mark code blocks, you can explicitly mark them
0000000000000000000000000000000000000000;;	    and supply a language (to make syntax highlighting simple). Just
0000000000000000000000000000000000000000;;	    mark it like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	        ``` go
0000000000000000000000000000000000000000;;	        func getTrue() bool {
0000000000000000000000000000000000000000;;	            return true
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	        ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    You can use 3 or more backticks to mark the beginning of the
0000000000000000000000000000000000000000;;	    block, and the same number to mark the end of the block.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Definition lists**. A simple definition list is made of a single-line
0000000000000000000000000000000000000000;;	    term followed by a colon and the definition for that term.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	        Cat
0000000000000000000000000000000000000000;;	        : Fluffy animal everyone likes
0000000000000000000000000000000000000000;;	        
0000000000000000000000000000000000000000;;	        Internet
0000000000000000000000000000000000000000;;	        : Vector of transmission for pictures of cats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    Terms must be separated from the previous definition by a blank line.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Footnotes**. A marker in the text that will become a superscript number;
0000000000000000000000000000000000000000;;	    a footnote definition that will be placed in a list of footnotes at the
0000000000000000000000000000000000000000;;	    end of the document. A footnote looks like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	        This is a footnote.[^1]
0000000000000000000000000000000000000000;;	        
0000000000000000000000000000000000000000;;	        [^1]: the footnote text.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Autolinking**. Blackfriday can find URLs that have not been
0000000000000000000000000000000000000000;;	    explicitly marked as links and turn them into links.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Strikethrough**. Use two tildes (`~~`) to mark text that
0000000000000000000000000000000000000000;;	    should be crossed out.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Hard line breaks**. With this extension enabled (it is off by
0000000000000000000000000000000000000000;;	    default in the `MarkdownBasic` and `MarkdownCommon` convenience
0000000000000000000000000000000000000000;;	    functions), newlines in the input translate into line breaks in
0000000000000000000000000000000000000000;;	    the output.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Smart quotes**. Smartypants-style punctuation substitution is
0000000000000000000000000000000000000000;;	    supported, turning normal double- and single-quote marks into
0000000000000000000000000000000000000000;;	    curly quotes, etc.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **LaTeX-style dash parsing** is an additional option, where `--`
0000000000000000000000000000000000000000;;	    is translated into `&ndash;`, and `---` is translated into
0000000000000000000000000000000000000000;;	    `&mdash;`. This differs from most smartypants processors, which
0000000000000000000000000000000000000000;;	    turn a single hyphen into an ndash and a double hyphen into an
0000000000000000000000000000000000000000;;	    mdash.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   **Smart fractions**, where anything that looks like a fraction
0000000000000000000000000000000000000000;;	    is translated into suitable HTML (instead of just a few special
0000000000000000000000000000000000000000;;	    cases like most smartypant processors). For example, `4/5`
0000000000000000000000000000000000000000;;	    becomes `<sup>4</sup>&frasl;<sub>5</sub>`, which renders as
0000000000000000000000000000000000000000;;	    <sup>4</sup>&frasl;<sub>5</sub>.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Other renderers
0000000000000000000000000000000000000000;;	---------------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Blackfriday is structured to allow alternative rendering engines. Here
0000000000000000000000000000000000000000;;	are a few of note:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   [github_flavored_markdown](https://godoc.org/github.com/shurcooL/github_flavored_markdown):
0000000000000000000000000000000000000000;;	    provides a GitHub Flavored Markdown renderer with fenced code block
0000000000000000000000000000000000000000;;	    highlighting, clickable header anchor links.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    It's not customizable, and its goal is to produce HTML output
0000000000000000000000000000000000000000;;	    equivalent to the [GitHub Markdown API endpoint](https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode),
0000000000000000000000000000000000000000;;	    except the rendering is performed locally.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   [markdownfmt](https://github.com/shurcooL/markdownfmt): like gofmt,
0000000000000000000000000000000000000000;;	    but for markdown.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   LaTeX output: renders output as LaTeX. This is currently part of the
0000000000000000000000000000000000000000;;	    main Blackfriday repository, but may be split into its own project
0000000000000000000000000000000000000000;;	    in the future. If you are interested in owning and maintaining the
0000000000000000000000000000000000000000;;	    LaTeX output component, please be in touch.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    It renders some basic documents, but is only experimental at this
0000000000000000000000000000000000000000;;	    point. In particular, it does not do any inline escaping, so input
0000000000000000000000000000000000000000;;	    that happens to look like LaTeX code will be passed through without
0000000000000000000000000000000000000000;;	    modification.
0000000000000000000000000000000000000000;;	    
0000000000000000000000000000000000000000;;	*   [Md2Vim](https://github.com/FooSoft/md2vim): transforms markdown files into vimdoc format.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Todo
0000000000000000000000000000000000000000;;	----
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*   More unit testing
0000000000000000000000000000000000000000;;	*   Improve unicode support. It does not understand all unicode
0000000000000000000000000000000000000000;;	    rules (about what constitutes a letter, a punctuation symbol,
0000000000000000000000000000000000000000;;	    etc.), so it may fail to detect word boundaries correctly in
0000000000000000000000000000000000000000;;	    some instances. It is safe on all utf-8 input.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	License
0000000000000000000000000000000000000000;;	-------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Blackfriday is distributed under the Simplified BSD License](LICENSE.txt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   [1]: http://daringfireball.net/projects/markdown/ "Markdown"
0000000000000000000000000000000000000000;;	   [2]: http://golang.org/ "Go Language"
0000000000000000000000000000000000000000;;	   [3]: https://github.com/vmg/sundown "Sundown"
