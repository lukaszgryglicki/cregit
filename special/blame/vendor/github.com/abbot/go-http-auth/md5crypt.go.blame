0000000000000000000000000000000000000000;;	package auth
ddb91896b60df07452d87846c6343678b1c48dde;Godeps/_workspace/src/github.com/abbot/go-http-auth/md5crypt.go[Godeps/_workspace/src/github.com/abbot/go-http-auth/md5crypt.go][vendor/github.com/abbot/go-http-auth/md5crypt.go];	
0000000000000000000000000000000000000000;;	import "crypto/md5"
0000000000000000000000000000000000000000;;	import "strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const itoa64 = "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var md5_crypt_swaps = [16]int{12, 6, 0, 13, 7, 1, 14, 8, 2, 15, 9, 3, 5, 10, 4, 11}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MD5Entry struct {
0000000000000000000000000000000000000000;;		Magic, Salt, Hash []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMD5Entry(e string) *MD5Entry {
0000000000000000000000000000000000000000;;		parts := strings.SplitN(e, "$", 4)
0000000000000000000000000000000000000000;;		if len(parts) != 4 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &MD5Entry{
0000000000000000000000000000000000000000;;			Magic: []byte("$" + parts[1] + "$"),
0000000000000000000000000000000000000000;;			Salt:  []byte(parts[2]),
0000000000000000000000000000000000000000;;			Hash:  []byte(parts[3]),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 MD5 password crypt implementation
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	func MD5Crypt(password, salt, magic []byte) []byte {
0000000000000000000000000000000000000000;;		d := md5.New()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.Write(password)
0000000000000000000000000000000000000000;;		d.Write(magic)
0000000000000000000000000000000000000000;;		d.Write(salt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d2 := md5.New()
0000000000000000000000000000000000000000;;		d2.Write(password)
0000000000000000000000000000000000000000;;		d2.Write(salt)
0000000000000000000000000000000000000000;;		d2.Write(password)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, mixin := 0, d2.Sum(nil); i < len(password); i++ {
0000000000000000000000000000000000000000;;			d.Write([]byte{mixin[i%16]})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := len(password); i != 0; i >>= 1 {
0000000000000000000000000000000000000000;;			if i&1 == 0 {
0000000000000000000000000000000000000000;;				d.Write([]byte{password[0]})
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				d.Write([]byte{0})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		final := d.Sum(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 1000; i++ {
0000000000000000000000000000000000000000;;			d2 := md5.New()
0000000000000000000000000000000000000000;;			if i&1 == 0 {
0000000000000000000000000000000000000000;;				d2.Write(final)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				d2.Write(password)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if i%3 != 0 {
0000000000000000000000000000000000000000;;				d2.Write(salt)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if i%7 != 0 {
0000000000000000000000000000000000000000;;				d2.Write(password)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if i&1 == 0 {
0000000000000000000000000000000000000000;;				d2.Write(password)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				d2.Write(final)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			final = d2.Sum(nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := make([]byte, 0, 22)
0000000000000000000000000000000000000000;;		v := uint(0)
0000000000000000000000000000000000000000;;		bits := uint(0)
0000000000000000000000000000000000000000;;		for _, i := range md5_crypt_swaps {
0000000000000000000000000000000000000000;;			v |= (uint(final[i]) << bits)
0000000000000000000000000000000000000000;;			for bits = bits + 8; bits > 6; bits -= 6 {
0000000000000000000000000000000000000000;;				result = append(result, itoa64[v&0x3f])
0000000000000000000000000000000000000000;;				v >>= 6
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result = append(result, itoa64[v&0x3f])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return append(append(append(magic, salt...), '$'), result...)
0000000000000000000000000000000000000000;;	}
