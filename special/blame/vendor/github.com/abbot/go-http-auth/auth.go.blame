0000000000000000000000000000000000000000;;	package auth
ddb91896b60df07452d87846c6343678b1c48dde;Godeps/_workspace/src/github.com/abbot/go-http-auth/auth.go[Godeps/_workspace/src/github.com/abbot/go-http-auth/auth.go][vendor/github.com/abbot/go-http-auth/auth.go];	
0000000000000000000000000000000000000000;;	import "net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* 
0000000000000000000000000000000000000000;;	 Request handlers must take AuthenticatedRequest instead of http.Request
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	type AuthenticatedRequest struct {
0000000000000000000000000000000000000000;;		http.Request
0000000000000000000000000000000000000000;;		/* 
0000000000000000000000000000000000000000;;		 Authenticated user name. Current API implies that Username is
0000000000000000000000000000000000000000;;		 never empty, which means that authentication is always done
0000000000000000000000000000000000000000;;		 before calling the request handler.
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;		Username string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 AuthenticatedHandlerFunc is like http.HandlerFunc, but takes
0000000000000000000000000000000000000000;;	 AuthenticatedRequest instead of http.Request
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	type AuthenticatedHandlerFunc func(http.ResponseWriter, *AuthenticatedRequest)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 Authenticator wraps an AuthenticatedHandlerFunc with
0000000000000000000000000000000000000000;;	 authentication-checking code.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 Typical Authenticator usage is something like:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   authenticator := SomeAuthenticator(...)
0000000000000000000000000000000000000000;;	   http.HandleFunc("/", authenticator(my_handler))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 Authenticator wrapper checks the user authentication and calls the
0000000000000000000000000000000000000000;;	 wrapped function only after authentication has succeeded. Otherwise,
0000000000000000000000000000000000000000;;	 it returns a handler which initiates the authentication procedure.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	type Authenticator func(AuthenticatedHandlerFunc) http.HandlerFunc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthenticatorInterface interface {
0000000000000000000000000000000000000000;;		Wrap(AuthenticatedHandlerFunc) http.HandlerFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func JustCheck(auth AuthenticatorInterface, wrapped http.HandlerFunc) http.HandlerFunc {
0000000000000000000000000000000000000000;;		return auth.Wrap(func(w http.ResponseWriter, ar *AuthenticatedRequest) {
0000000000000000000000000000000000000000;;			ar.Header.Set("X-Authenticated-Username", ar.Username)
0000000000000000000000000000000000000000;;			wrapped(w, &ar.Request)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
