0000000000000000000000000000000000000000;;	// Copyright (c) 2015 Dave Collins <dave@davec.name>
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Permission to use, copy, modify, and distribute this software for any
0000000000000000000000000000000000000000;;	// purpose with or without fee is hereby granted, provided that the above
0000000000000000000000000000000000000000;;	// copyright notice and this permission notice appear in all copies.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
0000000000000000000000000000000000000000;;	// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
0000000000000000000000000000000000000000;;	// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
0000000000000000000000000000000000000000;;	// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
0000000000000000000000000000000000000000;;	// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
0000000000000000000000000000000000000000;;	// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
0000000000000000000000000000000000000000;;	// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
6af08453350e05288507a4858e00b072d7113fde;Godeps/_workspace/src/github.com/davecgh/go-spew/spew/bypasssafe.go[Godeps/_workspace/src/github.com/davecgh/go-spew/spew/bypasssafe.go][vendor/github.com/davecgh/go-spew/spew/bypasssafe.go];	
0000000000000000000000000000000000000000;;	// NOTE: Due to the following build constraints, this file will only be compiled
0000000000000000000000000000000000000000;;	// when either the code is running on Google App Engine or "-tags disableunsafe"
0000000000000000000000000000000000000000;;	// is added to the go build command line.
0000000000000000000000000000000000000000;;	// +build appengine disableunsafe
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package spew
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// UnsafeDisabled is a build-time constant which specifies whether or
0000000000000000000000000000000000000000;;		// not access to the unsafe package is available.
0000000000000000000000000000000000000000;;		UnsafeDisabled = true
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// unsafeReflectValue typically converts the passed reflect.Value into a one
0000000000000000000000000000000000000000;;	// that bypasses the typical safety restrictions preventing access to
0000000000000000000000000000000000000000;;	// unaddressable and unexported data.  However, doing this relies on access to
0000000000000000000000000000000000000000;;	// the unsafe package.  This is a stub version which simply returns the passed
0000000000000000000000000000000000000000;;	// reflect.Value when the unsafe package is not available.
0000000000000000000000000000000000000000;;	func unsafeReflectValue(v reflect.Value) reflect.Value {
0000000000000000000000000000000000000000;;		return v
0000000000000000000000000000000000000000;;	}
