0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Copyright (c) 2013 Dave Collins <dave@davec.name>
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Permission to use, copy, modify, and distribute this software for any
0000000000000000000000000000000000000000;;	 * purpose with or without fee is hereby granted, provided that the above
0000000000000000000000000000000000000000;;	 * copyright notice and this permission notice appear in all copies.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
0000000000000000000000000000000000000000;;	 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
0000000000000000000000000000000000000000;;	 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
0000000000000000000000000000000000000000;;	 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
0000000000000000000000000000000000000000;;	 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
0000000000000000000000000000000000000000;;	 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
0000000000000000000000000000000000000000;;	 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
0000000000000000000000000000000000000000;;	 */
5187a61b412c69823a116353fb1601738e904060;Godeps/_workspace/src/github.com/davecgh/go-spew/spew/spew.go[Godeps/_workspace/src/github.com/davecgh/go-spew/spew/spew.go][vendor/github.com/davecgh/go-spew/spew/spew.go];	
0000000000000000000000000000000000000000;;	package spew
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Errorf is a wrapper for fmt.Errorf that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the formatted string as a value that satisfies error.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Errorf(format, spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Errorf(format string, a ...interface{}) (err error) {
0000000000000000000000000000000000000000;;		return fmt.Errorf(format, convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fprint is a wrapper for fmt.Fprint that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Fprint(w, spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Fprint(w io.Writer, a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Fprint(w, convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fprintf is a wrapper for fmt.Fprintf that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Fprintf(w, format, spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Fprintf(w, format, convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fprintln is a wrapper for fmt.Fprintln that treats each argument as if it
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Fprintln(w, spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Fprintln(w io.Writer, a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Fprintln(w, convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Print is a wrapper for fmt.Print that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Print(spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Print(a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Print(convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Printf is a wrapper for fmt.Printf that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Printf(format, spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Printf(format string, a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Printf(format, convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Println is a wrapper for fmt.Println that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Println(spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Println(a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Println(convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sprint is a wrapper for fmt.Sprint that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the resulting string.  See NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Sprint(spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Sprint(a ...interface{}) string {
0000000000000000000000000000000000000000;;		return fmt.Sprint(convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sprintf is a wrapper for fmt.Sprintf that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the resulting string.  See NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Sprintf(format, spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Sprintf(format string, a ...interface{}) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf(format, convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sprintln is a wrapper for fmt.Sprintln that treats each argument as if it
0000000000000000000000000000000000000000;;	// were passed with a default Formatter interface returned by NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the resulting string.  See NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Sprintln(spew.NewFormatter(a), spew.NewFormatter(b))
0000000000000000000000000000000000000000;;	func Sprintln(a ...interface{}) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintln(convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// convertArgs accepts a slice of arguments and returns a slice of the same
0000000000000000000000000000000000000000;;	// length with each argument converted to a default spew Formatter interface.
0000000000000000000000000000000000000000;;	func convertArgs(args []interface{}) (formatters []interface{}) {
0000000000000000000000000000000000000000;;		formatters = make([]interface{}, len(args))
0000000000000000000000000000000000000000;;		for index, arg := range args {
0000000000000000000000000000000000000000;;			formatters[index] = NewFormatter(arg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return formatters
0000000000000000000000000000000000000000;;	}
