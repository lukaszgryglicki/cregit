0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Copyright (c) 2013 Dave Collins <dave@davec.name>
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Permission to use, copy, modify, and distribute this software for any
0000000000000000000000000000000000000000;;	 * purpose with or without fee is hereby granted, provided that the above
0000000000000000000000000000000000000000;;	 * copyright notice and this permission notice appear in all copies.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
0000000000000000000000000000000000000000;;	 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
0000000000000000000000000000000000000000;;	 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
0000000000000000000000000000000000000000;;	 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
0000000000000000000000000000000000000000;;	 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
0000000000000000000000000000000000000000;;	 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
0000000000000000000000000000000000000000;;	 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
0000000000000000000000000000000000000000;;	 */
5187a61b412c69823a116353fb1601738e904060;Godeps/_workspace/src/github.com/davecgh/go-spew/spew/config.go[Godeps/_workspace/src/github.com/davecgh/go-spew/spew/config.go][vendor/github.com/davecgh/go-spew/spew/config.go];	
0000000000000000000000000000000000000000;;	package spew
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfigState houses the configuration options used by spew to format and
0000000000000000000000000000000000000000;;	// display values.  There is a global instance, Config, that is used to control
0000000000000000000000000000000000000000;;	// all top-level Formatter and Dump functionality.  Each ConfigState instance
0000000000000000000000000000000000000000;;	// provides methods equivalent to the top-level functions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The zero value for ConfigState provides no indentation.  You would typically
0000000000000000000000000000000000000000;;	// want to set it to a space or a tab.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Alternatively, you can use NewDefaultConfig to get a ConfigState instance
0000000000000000000000000000000000000000;;	// with default settings.  See the documentation of NewDefaultConfig for default
0000000000000000000000000000000000000000;;	// values.
0000000000000000000000000000000000000000;;	type ConfigState struct {
0000000000000000000000000000000000000000;;		// Indent specifies the string to use for each indentation level.  The
0000000000000000000000000000000000000000;;		// global config instance that all top-level functions use set this to a
0000000000000000000000000000000000000000;;		// single space by default.  If you would like more indentation, you might
0000000000000000000000000000000000000000;;		// set this to a tab with "\t" or perhaps two spaces with "  ".
0000000000000000000000000000000000000000;;		Indent string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MaxDepth controls the maximum number of levels to descend into nested
0000000000000000000000000000000000000000;;		// data structures.  The default, 0, means there is no limit.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NOTE: Circular data structures are properly detected, so it is not
0000000000000000000000000000000000000000;;		// necessary to set this value unless you specifically want to limit deeply
0000000000000000000000000000000000000000;;		// nested data structures.
0000000000000000000000000000000000000000;;		MaxDepth int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DisableMethods specifies whether or not error and Stringer interfaces are
0000000000000000000000000000000000000000;;		// invoked for types that implement them.
0000000000000000000000000000000000000000;;		DisableMethods bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DisablePointerMethods specifies whether or not to check for and invoke
0000000000000000000000000000000000000000;;		// error and Stringer interfaces on types which only accept a pointer
0000000000000000000000000000000000000000;;		// receiver when the current type is not a pointer.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NOTE: This might be an unsafe action since calling one of these methods
0000000000000000000000000000000000000000;;		// with a pointer receiver could technically mutate the value, however,
0000000000000000000000000000000000000000;;		// in practice, types which choose to satisify an error or Stringer
0000000000000000000000000000000000000000;;		// interface with a pointer receiver should not be mutating their state
0000000000000000000000000000000000000000;;		// inside these interface methods.  As a result, this option relies on
0000000000000000000000000000000000000000;;		// access to the unsafe package, so it will not have any effect when
0000000000000000000000000000000000000000;;		// running in environments without access to the unsafe package such as
0000000000000000000000000000000000000000;;		// Google App Engine or with the "disableunsafe" build tag specified.
0000000000000000000000000000000000000000;;		DisablePointerMethods bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ContinueOnMethod specifies whether or not recursion should continue once
0000000000000000000000000000000000000000;;		// a custom error or Stringer interface is invoked.  The default, false,
0000000000000000000000000000000000000000;;		// means it will print the results of invoking the custom error or Stringer
0000000000000000000000000000000000000000;;		// interface and return immediately instead of continuing to recurse into
0000000000000000000000000000000000000000;;		// the internals of the data type.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NOTE: This flag does not have any effect if method invocation is disabled
0000000000000000000000000000000000000000;;		// via the DisableMethods or DisablePointerMethods options.
0000000000000000000000000000000000000000;;		ContinueOnMethod bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SortKeys specifies map keys should be sorted before being printed. Use
0000000000000000000000000000000000000000;;		// this to have a more deterministic, diffable output.  Note that only
0000000000000000000000000000000000000000;;		// native types (bool, int, uint, floats, uintptr and string) and types
0000000000000000000000000000000000000000;;		// that support the error or Stringer interfaces (if methods are
0000000000000000000000000000000000000000;;		// enabled) are supported, with other types sorted according to the
0000000000000000000000000000000000000000;;		// reflect.Value.String() output which guarantees display stability.
0000000000000000000000000000000000000000;;		SortKeys bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SpewKeys specifies that, as a last resort attempt, map keys should
0000000000000000000000000000000000000000;;		// be spewed to strings and sorted by those strings.  This is only
0000000000000000000000000000000000000000;;		// considered if SortKeys is true.
0000000000000000000000000000000000000000;;		SpewKeys bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Config is the active configuration of the top-level functions.
0000000000000000000000000000000000000000;;	// The configuration can be changed by modifying the contents of spew.Config.
0000000000000000000000000000000000000000;;	var Config = ConfigState{Indent: " "}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Errorf is a wrapper for fmt.Errorf that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  It returns
0000000000000000000000000000000000000000;;	// the formatted string as a value that satisfies error.  See NewFormatter
0000000000000000000000000000000000000000;;	// for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Errorf(format, c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Errorf(format string, a ...interface{}) (err error) {
0000000000000000000000000000000000000000;;		return fmt.Errorf(format, c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fprint is a wrapper for fmt.Fprint that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  It returns
0000000000000000000000000000000000000000;;	// the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Fprint(w, c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Fprint(w io.Writer, a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Fprint(w, c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fprintf is a wrapper for fmt.Fprintf that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  It returns
0000000000000000000000000000000000000000;;	// the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Fprintf(w, format, c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Fprintf(w, format, c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fprintln is a wrapper for fmt.Fprintln that treats each argument as if it
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Fprintln(w, c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Fprintln(w io.Writer, a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Fprintln(w, c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Print is a wrapper for fmt.Print that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  It returns
0000000000000000000000000000000000000000;;	// the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Print(c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Print(a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Print(c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Printf is a wrapper for fmt.Printf that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  It returns
0000000000000000000000000000000000000000;;	// the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Printf(format, c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Printf(format string, a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Printf(format, c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Println is a wrapper for fmt.Println that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  It returns
0000000000000000000000000000000000000000;;	// the number of bytes written and any write error encountered.  See
0000000000000000000000000000000000000000;;	// NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Println(c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Println(a ...interface{}) (n int, err error) {
0000000000000000000000000000000000000000;;		return fmt.Println(c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sprint is a wrapper for fmt.Sprint that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  It returns
0000000000000000000000000000000000000000;;	// the resulting string.  See NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Sprint(c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Sprint(a ...interface{}) string {
0000000000000000000000000000000000000000;;		return fmt.Sprint(c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sprintf is a wrapper for fmt.Sprintf that treats each argument as if it were
0000000000000000000000000000000000000000;;	// passed with a Formatter interface returned by c.NewFormatter.  It returns
0000000000000000000000000000000000000000;;	// the resulting string.  See NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Sprintf(format, c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Sprintf(format string, a ...interface{}) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf(format, c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sprintln is a wrapper for fmt.Sprintln that treats each argument as if it
0000000000000000000000000000000000000000;;	// were passed with a Formatter interface returned by c.NewFormatter.  It
0000000000000000000000000000000000000000;;	// returns the resulting string.  See NewFormatter for formatting details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is shorthand for the following syntax:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	fmt.Sprintln(c.NewFormatter(a), c.NewFormatter(b))
0000000000000000000000000000000000000000;;	func (c *ConfigState) Sprintln(a ...interface{}) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintln(c.convertArgs(a)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	NewFormatter returns a custom formatter that satisfies the fmt.Formatter
0000000000000000000000000000000000000000;;	interface.  As a result, it integrates cleanly with standard fmt package
0000000000000000000000000000000000000000;;	printing functions.  The formatter is useful for inline printing of smaller data
0000000000000000000000000000000000000000;;	types similar to the standard %v format specifier.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The custom formatter only responds to the %v (most compact), %+v (adds pointer
0000000000000000000000000000000000000000;;	addresses), %#v (adds types), and %#+v (adds types and pointer addresses) verb
0000000000000000000000000000000000000000;;	combinations.  Any other verbs such as %x and %q will be sent to the the
0000000000000000000000000000000000000000;;	standard fmt package for formatting.  In addition, the custom formatter ignores
0000000000000000000000000000000000000000;;	the width and precision arguments (however they will still work on the format
0000000000000000000000000000000000000000;;	specifiers not handled by the custom formatter).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Typically this function shouldn't be called directly.  It is much easier to make
0000000000000000000000000000000000000000;;	use of the custom formatter by calling one of the convenience functions such as
0000000000000000000000000000000000000000;;	c.Printf, c.Println, or c.Printf.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	func (c *ConfigState) NewFormatter(v interface{}) fmt.Formatter {
0000000000000000000000000000000000000000;;		return newFormatter(c, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fdump formats and displays the passed arguments to io.Writer w.  It formats
0000000000000000000000000000000000000000;;	// exactly the same as Dump.
0000000000000000000000000000000000000000;;	func (c *ConfigState) Fdump(w io.Writer, a ...interface{}) {
0000000000000000000000000000000000000000;;		fdump(c, w, a...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Dump displays the passed parameters to standard out with newlines, customizable
0000000000000000000000000000000000000000;;	indentation, and additional debug information such as complete types and all
0000000000000000000000000000000000000000;;	pointer addresses used to indirect to the final value.  It provides the
0000000000000000000000000000000000000000;;	following features over the built-in printing facilities provided by the fmt
0000000000000000000000000000000000000000;;	package:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		* Pointers are dereferenced and followed
0000000000000000000000000000000000000000;;		* Circular data structures are detected and handled properly
0000000000000000000000000000000000000000;;		* Custom Stringer/error interfaces are optionally invoked, including
0000000000000000000000000000000000000000;;		  on unexported types
0000000000000000000000000000000000000000;;		* Custom types which only implement the Stringer/error interfaces via
0000000000000000000000000000000000000000;;		  a pointer receiver are optionally invoked when passing non-pointer
0000000000000000000000000000000000000000;;		  variables
0000000000000000000000000000000000000000;;		* Byte arrays and slices are dumped like the hexdump -C command which
0000000000000000000000000000000000000000;;		  includes offsets, byte values in hex, and ASCII output
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The configuration options are controlled by modifying the public members
0000000000000000000000000000000000000000;;	of c.  See ConfigState for options documentation.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	See Fdump if you would prefer dumping to an arbitrary io.Writer or Sdump to
0000000000000000000000000000000000000000;;	get the formatted result as a string.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	func (c *ConfigState) Dump(a ...interface{}) {
0000000000000000000000000000000000000000;;		fdump(c, os.Stdout, a...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sdump returns a string with the passed arguments formatted exactly the same
0000000000000000000000000000000000000000;;	// as Dump.
0000000000000000000000000000000000000000;;	func (c *ConfigState) Sdump(a ...interface{}) string {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		fdump(c, &buf, a...)
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// convertArgs accepts a slice of arguments and returns a slice of the same
0000000000000000000000000000000000000000;;	// length with each argument converted to a spew Formatter interface using
0000000000000000000000000000000000000000;;	// the ConfigState associated with s.
0000000000000000000000000000000000000000;;	func (c *ConfigState) convertArgs(args []interface{}) (formatters []interface{}) {
0000000000000000000000000000000000000000;;		formatters = make([]interface{}, len(args))
0000000000000000000000000000000000000000;;		for index, arg := range args {
0000000000000000000000000000000000000000;;			formatters[index] = newFormatter(c, arg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return formatters
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultConfig returns a ConfigState with the following default settings.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 	Indent: " "
0000000000000000000000000000000000000000;;	// 	MaxDepth: 0
0000000000000000000000000000000000000000;;	// 	DisableMethods: false
0000000000000000000000000000000000000000;;	// 	DisablePointerMethods: false
0000000000000000000000000000000000000000;;	// 	ContinueOnMethod: false
0000000000000000000000000000000000000000;;	// 	SortKeys: false
0000000000000000000000000000000000000000;;	func NewDefaultConfig() *ConfigState {
0000000000000000000000000000000000000000;;		return &ConfigState{Indent: " "}
0000000000000000000000000000000000000000;;	}
