0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
8bf96f60ebe71bf5a86b9d9176b6678b12f558f8;Godeps/_workspace/src/github.com/kardianos/osext/osext_windows.go[Godeps/_workspace/src/github.com/kardianos/osext/osext_windows.go][vendor/github.com/kardianos/osext/osext_windows.go];	
0000000000000000000000000000000000000000;;	package osext
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unicode/utf16"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		kernel                = syscall.MustLoadDLL("kernel32.dll")
0000000000000000000000000000000000000000;;		getModuleFileNameProc = kernel.MustFindProc("GetModuleFileNameW")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetModuleFileName() with hModule = NULL
0000000000000000000000000000000000000000;;	func executable() (exePath string, err error) {
0000000000000000000000000000000000000000;;		return getModuleFileName()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getModuleFileName() (string, error) {
0000000000000000000000000000000000000000;;		var n uint32
0000000000000000000000000000000000000000;;		b := make([]uint16, syscall.MAX_PATH)
0000000000000000000000000000000000000000;;		size := uint32(len(b))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r0, _, e1 := getModuleFileNameProc.Call(0, uintptr(unsafe.Pointer(&b[0])), uintptr(size))
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			return "", e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(utf16.Decode(b[0:n])), nil
0000000000000000000000000000000000000000;;	}
