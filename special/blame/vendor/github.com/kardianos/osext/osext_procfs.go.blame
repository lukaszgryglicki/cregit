0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
8bf96f60ebe71bf5a86b9d9176b6678b12f558f8;Godeps/_workspace/src/github.com/kardianos/osext/osext_procfs.go[Godeps/_workspace/src/github.com/kardianos/osext/osext_procfs.go][vendor/github.com/kardianos/osext/osext_procfs.go];	
0000000000000000000000000000000000000000;;	// +build linux netbsd openbsd solaris dragonfly
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package osext
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func executable() (string, error) {
0000000000000000000000000000000000000000;;		switch runtime.GOOS {
0000000000000000000000000000000000000000;;		case "linux":
0000000000000000000000000000000000000000;;			const deletedTag = " (deleted)"
0000000000000000000000000000000000000000;;			execpath, err := os.Readlink("/proc/self/exe")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return execpath, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			execpath = strings.TrimSuffix(execpath, deletedTag)
0000000000000000000000000000000000000000;;			execpath = strings.TrimPrefix(execpath, deletedTag)
0000000000000000000000000000000000000000;;			return execpath, nil
0000000000000000000000000000000000000000;;		case "netbsd":
0000000000000000000000000000000000000000;;			return os.Readlink("/proc/curproc/exe")
0000000000000000000000000000000000000000;;		case "openbsd", "dragonfly":
0000000000000000000000000000000000000000;;			return os.Readlink("/proc/curproc/file")
0000000000000000000000000000000000000000;;		case "solaris":
0000000000000000000000000000000000000000;;			return os.Readlink(fmt.Sprintf("/proc/%d/path/a.out", os.Getpid()))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", errors.New("ExecPath not implemented for " + runtime.GOOS)
0000000000000000000000000000000000000000;;	}
