0000000000000000000000000000000000000000;;	package vhd
bf119e8337b916a81932389e376d77629c43bfe3;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"encoding/hex"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"unicode/utf16"
0000000000000000000000000000000000000000;;		"unicode/utf8"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// https://groups.google.com/forum/#!msg/golang-nuts/d0nF_k4dSx4/rPGgfXv6QCoJ
0000000000000000000000000000000000000000;;	func uuidgen() string {
0000000000000000000000000000000000000000;;		b := uuidgenBytes()
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%x-%x-%x-%x-%x",
0000000000000000000000000000000000000000;;			b[0:4], b[4:6], b[6:8], b[8:10], b[10:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fmtField(name, value string) {
0000000000000000000000000000000000000000;;		fmt.Printf("%-25s%s\n", name+":", value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uuidgenBytes() []byte {
0000000000000000000000000000000000000000;;		f, err := os.Open("/dev/urandom")
0000000000000000000000000000000000000000;;		check(err)
0000000000000000000000000000000000000000;;		b := make([]byte, 16)
0000000000000000000000000000000000000000;;		f.Read(b)
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func check(e error) {
0000000000000000000000000000000000000000;;		if e != nil {
0000000000000000000000000000000000000000;;			panic(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func hexs(a []byte) string {
0000000000000000000000000000000000000000;;		return "0x" + hex.EncodeToString(a[:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uuid(a []byte) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%08x-%04x-%04x-%04x-%04x",
0000000000000000000000000000000000000000;;			a[:4],
0000000000000000000000000000000000000000;;			a[4:6],
0000000000000000000000000000000000000000;;			a[6:8],
0000000000000000000000000000000000000000;;			a[8:10],
0000000000000000000000000000000000000000;;			a[10:16])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uuidToBytes(uuid string) []byte {
0000000000000000000000000000000000000000;;		s := strings.Replace(uuid, "-", "", -1)
0000000000000000000000000000000000000000;;		h, err := hex.DecodeString(s)
0000000000000000000000000000000000000000;;		check(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;		utf16BytesToString converts UTF-16 encoded bytes, in big or
0000000000000000000000000000000000000000;;	 	little endian byte order, to a UTF-8 encoded string.
0000000000000000000000000000000000000000;;	 	http://stackoverflow.com/a/15794113
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	func utf16BytesToString(b []byte, o binary.ByteOrder) string {
0000000000000000000000000000000000000000;;		utf := make([]uint16, (len(b)+(2-1))/2)
0000000000000000000000000000000000000000;;		for i := 0; i+(2-1) < len(b); i += 2 {
0000000000000000000000000000000000000000;;			utf[i/2] = o.Uint16(b[i:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(b)/2 < len(utf) {
0000000000000000000000000000000000000000;;			utf[len(utf)-1] = utf8.RuneError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(utf16.Decode(utf))
0000000000000000000000000000000000000000;;	}
