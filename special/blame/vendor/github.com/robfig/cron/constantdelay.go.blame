0000000000000000000000000000000000000000;;	package cron
ea55b7c1ed132cbd99ded4ceb08387d7aff333ea;;	
0000000000000000000000000000000000000000;;	import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConstantDelaySchedule represents a simple recurring duty cycle, e.g. "Every 5 minutes".
0000000000000000000000000000000000000000;;	// It does not support jobs more frequent than once a second.
0000000000000000000000000000000000000000;;	type ConstantDelaySchedule struct {
0000000000000000000000000000000000000000;;		Delay time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Every returns a crontab Schedule that activates once every duration.
0000000000000000000000000000000000000000;;	// Delays of less than a second are not supported (will round up to 1 second).
0000000000000000000000000000000000000000;;	// Any fields less than a Second are truncated.
0000000000000000000000000000000000000000;;	func Every(duration time.Duration) ConstantDelaySchedule {
0000000000000000000000000000000000000000;;		if duration < time.Second {
0000000000000000000000000000000000000000;;			duration = time.Second
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ConstantDelaySchedule{
0000000000000000000000000000000000000000;;			Delay: duration - time.Duration(duration.Nanoseconds())%time.Second,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Next returns the next time this should be run.
0000000000000000000000000000000000000000;;	// This rounds so that the next activation time will be on the second.
0000000000000000000000000000000000000000;;	func (schedule ConstantDelaySchedule) Next(t time.Time) time.Time {
0000000000000000000000000000000000000000;;		return t.Add(schedule.Delay - time.Duration(t.Nanosecond())*time.Nanosecond)
0000000000000000000000000000000000000000;;	}
