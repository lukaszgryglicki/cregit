0000000000000000000000000000000000000000;;	package cron
ea55b7c1ed132cbd99ded4ceb08387d7aff333ea;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cron keeps track of any number of entries, invoking the associated func as
0000000000000000000000000000000000000000;;	// specified by the schedule. It may be started, stopped, and the entries may
0000000000000000000000000000000000000000;;	// be inspected while running.
0000000000000000000000000000000000000000;;	type Cron struct {
0000000000000000000000000000000000000000;;		entries  []*Entry
0000000000000000000000000000000000000000;;		stop     chan struct{}
0000000000000000000000000000000000000000;;		add      chan *Entry
0000000000000000000000000000000000000000;;		snapshot chan []*Entry
0000000000000000000000000000000000000000;;		running  bool
0000000000000000000000000000000000000000;;		ErrorLog *log.Logger
0000000000000000000000000000000000000000;;		location *time.Location
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Job is an interface for submitted cron jobs.
0000000000000000000000000000000000000000;;	type Job interface {
0000000000000000000000000000000000000000;;		Run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The Schedule describes a job's duty cycle.
0000000000000000000000000000000000000000;;	type Schedule interface {
0000000000000000000000000000000000000000;;		// Return the next activation time, later than the given time.
0000000000000000000000000000000000000000;;		// Next is invoked initially, and then each time the job is run.
0000000000000000000000000000000000000000;;		Next(time.Time) time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Entry consists of a schedule and the func to execute on that schedule.
0000000000000000000000000000000000000000;;	type Entry struct {
0000000000000000000000000000000000000000;;		// The schedule on which this job should be run.
0000000000000000000000000000000000000000;;		Schedule Schedule
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The next time the job will run. This is the zero time if Cron has not been
0000000000000000000000000000000000000000;;		// started or this entry's schedule is unsatisfiable
0000000000000000000000000000000000000000;;		Next time.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The last time this job was run. This is the zero time if the job has never
0000000000000000000000000000000000000000;;		// been run.
0000000000000000000000000000000000000000;;		Prev time.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Job to run.
0000000000000000000000000000000000000000;;		Job Job
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byTime is a wrapper for sorting the entry array by time
0000000000000000000000000000000000000000;;	// (with zero time at the end).
0000000000000000000000000000000000000000;;	type byTime []*Entry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s byTime) Len() int      { return len(s) }
0000000000000000000000000000000000000000;;	func (s byTime) Swap(i, j int) { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	func (s byTime) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		// Two zero times should return false.
0000000000000000000000000000000000000000;;		// Otherwise, zero is "greater" than any other time.
0000000000000000000000000000000000000000;;		// (To sort it at the end of the list.)
0000000000000000000000000000000000000000;;		if s[i].Next.IsZero() {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s[j].Next.IsZero() {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s[i].Next.Before(s[j].Next)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns a new Cron job runner, in the Local time zone.
0000000000000000000000000000000000000000;;	func New() *Cron {
0000000000000000000000000000000000000000;;		return NewWithLocation(time.Now().Location())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewWithLocation returns a new Cron job runner.
0000000000000000000000000000000000000000;;	func NewWithLocation(location *time.Location) *Cron {
0000000000000000000000000000000000000000;;		return &Cron{
0000000000000000000000000000000000000000;;			entries:  nil,
0000000000000000000000000000000000000000;;			add:      make(chan *Entry),
0000000000000000000000000000000000000000;;			stop:     make(chan struct{}),
0000000000000000000000000000000000000000;;			snapshot: make(chan []*Entry),
0000000000000000000000000000000000000000;;			running:  false,
0000000000000000000000000000000000000000;;			ErrorLog: nil,
0000000000000000000000000000000000000000;;			location: location,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A wrapper that turns a func() into a cron.Job
0000000000000000000000000000000000000000;;	type FuncJob func()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FuncJob) Run() { f() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddFunc adds a func to the Cron to be run on the given schedule.
0000000000000000000000000000000000000000;;	func (c *Cron) AddFunc(spec string, cmd func()) error {
0000000000000000000000000000000000000000;;		return c.AddJob(spec, FuncJob(cmd))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddJob adds a Job to the Cron to be run on the given schedule.
0000000000000000000000000000000000000000;;	func (c *Cron) AddJob(spec string, cmd Job) error {
0000000000000000000000000000000000000000;;		schedule, err := Parse(spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.Schedule(schedule, cmd)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Schedule adds a Job to the Cron to be run on the given schedule.
0000000000000000000000000000000000000000;;	func (c *Cron) Schedule(schedule Schedule, cmd Job) {
0000000000000000000000000000000000000000;;		entry := &Entry{
0000000000000000000000000000000000000000;;			Schedule: schedule,
0000000000000000000000000000000000000000;;			Job:      cmd,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !c.running {
0000000000000000000000000000000000000000;;			c.entries = append(c.entries, entry)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.add <- entry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Entries returns a snapshot of the cron entries.
0000000000000000000000000000000000000000;;	func (c *Cron) Entries() []*Entry {
0000000000000000000000000000000000000000;;		if c.running {
0000000000000000000000000000000000000000;;			c.snapshot <- nil
0000000000000000000000000000000000000000;;			x := <-c.snapshot
0000000000000000000000000000000000000000;;			return x
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.entrySnapshot()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Location gets the time zone location
0000000000000000000000000000000000000000;;	func (c *Cron) Location() *time.Location {
0000000000000000000000000000000000000000;;		return c.location
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Start the cron scheduler in its own go-routine, or no-op if already started.
0000000000000000000000000000000000000000;;	func (c *Cron) Start() {
0000000000000000000000000000000000000000;;		if c.running {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.running = true
0000000000000000000000000000000000000000;;		go c.run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run the cron scheduler, or no-op if already running.
0000000000000000000000000000000000000000;;	func (c *Cron) Run() {
0000000000000000000000000000000000000000;;		if c.running {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.running = true
0000000000000000000000000000000000000000;;		c.run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Cron) runWithRecovery(j Job) {
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if r := recover(); r != nil {
0000000000000000000000000000000000000000;;				const size = 64 << 10
0000000000000000000000000000000000000000;;				buf := make([]byte, size)
0000000000000000000000000000000000000000;;				buf = buf[:runtime.Stack(buf, false)]
0000000000000000000000000000000000000000;;				c.logf("cron: panic running job: %v\n%s", r, buf)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		j.Run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run the scheduler.. this is private just due to the need to synchronize
0000000000000000000000000000000000000000;;	// access to the 'running' state variable.
0000000000000000000000000000000000000000;;	func (c *Cron) run() {
0000000000000000000000000000000000000000;;		// Figure out the next activation times for each entry.
0000000000000000000000000000000000000000;;		now := time.Now().In(c.location)
0000000000000000000000000000000000000000;;		for _, entry := range c.entries {
0000000000000000000000000000000000000000;;			entry.Next = entry.Schedule.Next(now)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			// Determine the next entry to run.
0000000000000000000000000000000000000000;;			sort.Sort(byTime(c.entries))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var effective time.Time
0000000000000000000000000000000000000000;;			if len(c.entries) == 0 || c.entries[0].Next.IsZero() {
0000000000000000000000000000000000000000;;				// If there are no entries yet, just sleep - it still handles new entries
0000000000000000000000000000000000000000;;				// and stop requests.
0000000000000000000000000000000000000000;;				effective = now.AddDate(10, 0, 0)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				effective = c.entries[0].Next
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			timer := time.NewTimer(effective.Sub(now))
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case now = <-timer.C:
0000000000000000000000000000000000000000;;				now = now.In(c.location)
0000000000000000000000000000000000000000;;				// Run every entry whose next time was this effective time.
0000000000000000000000000000000000000000;;				for _, e := range c.entries {
0000000000000000000000000000000000000000;;					if e.Next != effective {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					go c.runWithRecovery(e.Job)
0000000000000000000000000000000000000000;;					e.Prev = e.Next
0000000000000000000000000000000000000000;;					e.Next = e.Schedule.Next(now)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case newEntry := <-c.add:
0000000000000000000000000000000000000000;;				c.entries = append(c.entries, newEntry)
0000000000000000000000000000000000000000;;				newEntry.Next = newEntry.Schedule.Next(time.Now().In(c.location))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case <-c.snapshot:
0000000000000000000000000000000000000000;;				c.snapshot <- c.entrySnapshot()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case <-c.stop:
0000000000000000000000000000000000000000;;				timer.Stop()
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// 'now' should be updated after newEntry and snapshot cases.
0000000000000000000000000000000000000000;;			now = time.Now().In(c.location)
0000000000000000000000000000000000000000;;			timer.Stop()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Logs an error to stderr or to the configured error log
0000000000000000000000000000000000000000;;	func (c *Cron) logf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		if c.ErrorLog != nil {
0000000000000000000000000000000000000000;;			c.ErrorLog.Printf(format, args...)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			log.Printf(format, args...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stop stops the cron scheduler if it is running; otherwise it does nothing.
0000000000000000000000000000000000000000;;	func (c *Cron) Stop() {
0000000000000000000000000000000000000000;;		if !c.running {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.stop <- struct{}{}
0000000000000000000000000000000000000000;;		c.running = false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// entrySnapshot returns a copy of the current cron entry list.
0000000000000000000000000000000000000000;;	func (c *Cron) entrySnapshot() []*Entry {
0000000000000000000000000000000000000000;;		entries := []*Entry{}
0000000000000000000000000000000000000000;;		for _, e := range c.entries {
0000000000000000000000000000000000000000;;			entries = append(entries, &Entry{
0000000000000000000000000000000000000000;;				Schedule: e.Schedule,
0000000000000000000000000000000000000000;;				Next:     e.Next,
0000000000000000000000000000000000000000;;				Prev:     e.Prev,
0000000000000000000000000000000000000000;;				Job:      e.Job,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return entries
0000000000000000000000000000000000000000;;	}
