0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package cron implements a cron spec parser and job runner.
ea55b7c1ed132cbd99ded4ceb08387d7aff333ea;;	
0000000000000000000000000000000000000000;;	Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Callers may register Funcs to be invoked on a given schedule.  Cron will run
0000000000000000000000000000000000000000;;	them in their own goroutines.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := cron.New()
0000000000000000000000000000000000000000;;		c.AddFunc("0 30 * * * *", func() { fmt.Println("Every hour on the half hour") })
0000000000000000000000000000000000000000;;		c.AddFunc("@hourly",      func() { fmt.Println("Every hour") })
0000000000000000000000000000000000000000;;		c.AddFunc("@every 1h30m", func() { fmt.Println("Every hour thirty") })
0000000000000000000000000000000000000000;;		c.Start()
0000000000000000000000000000000000000000;;		..
0000000000000000000000000000000000000000;;		// Funcs are invoked in their own goroutine, asynchronously.
0000000000000000000000000000000000000000;;		...
0000000000000000000000000000000000000000;;		// Funcs may also be added to a running Cron
0000000000000000000000000000000000000000;;		c.AddFunc("@daily", func() { fmt.Println("Every day") })
0000000000000000000000000000000000000000;;		..
0000000000000000000000000000000000000000;;		// Inspect the cron job entries' next and previous run times.
0000000000000000000000000000000000000000;;		inspect(c.Entries())
0000000000000000000000000000000000000000;;		..
0000000000000000000000000000000000000000;;		c.Stop()  // Stop the scheduler (does not stop any jobs already running).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CRON Expression Format
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A cron expression represents a set of times, using 6 space-separated fields.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Field name   | Mandatory? | Allowed values  | Allowed special characters
0000000000000000000000000000000000000000;;		----------   | ---------- | --------------  | --------------------------
0000000000000000000000000000000000000000;;		Seconds      | Yes        | 0-59            | * / , -
0000000000000000000000000000000000000000;;		Minutes      | Yes        | 0-59            | * / , -
0000000000000000000000000000000000000000;;		Hours        | Yes        | 0-23            | * / , -
0000000000000000000000000000000000000000;;		Day of month | Yes        | 1-31            | * / , - ?
0000000000000000000000000000000000000000;;		Month        | Yes        | 1-12 or JAN-DEC | * / , -
0000000000000000000000000000000000000000;;		Day of week  | Yes        | 0-6 or SUN-SAT  | * / , - ?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note: Month and Day-of-week field values are case insensitive.  "SUN", "Sun",
0000000000000000000000000000000000000000;;	and "sun" are equally accepted.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Special Characters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Asterisk ( * )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The asterisk indicates that the cron expression will match for all values of the
0000000000000000000000000000000000000000;;	field; e.g., using an asterisk in the 5th field (month) would indicate every
0000000000000000000000000000000000000000;;	month.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Slash ( / )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Slashes are used to describe increments of ranges. For example 3-59/15 in the
0000000000000000000000000000000000000000;;	1st field (minutes) would indicate the 3rd minute of the hour and every 15
0000000000000000000000000000000000000000;;	minutes thereafter. The form "*\/..." is equivalent to the form "first-last/...",
0000000000000000000000000000000000000000;;	that is, an increment over the largest possible range of the field.  The form
0000000000000000000000000000000000000000;;	"N/..." is accepted as meaning "N-MAX/...", that is, starting at N, use the
0000000000000000000000000000000000000000;;	increment until the end of that specific range.  It does not wrap around.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Comma ( , )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Commas are used to separate items of a list. For example, using "MON,WED,FRI" in
0000000000000000000000000000000000000000;;	the 5th field (day of week) would mean Mondays, Wednesdays and Fridays.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Hyphen ( - )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Hyphens are used to define ranges. For example, 9-17 would indicate every
0000000000000000000000000000000000000000;;	hour between 9am and 5pm inclusive.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Question mark ( ? )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Question mark may be used instead of '*' for leaving either day-of-month or
0000000000000000000000000000000000000000;;	day-of-week blank.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Predefined schedules
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You may use one of several pre-defined schedules in place of a cron expression.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entry                  | Description                                | Equivalent To
0000000000000000000000000000000000000000;;		-----                  | -----------                                | -------------
0000000000000000000000000000000000000000;;		@yearly (or @annually) | Run once a year, midnight, Jan. 1st        | 0 0 0 1 1 *
0000000000000000000000000000000000000000;;		@monthly               | Run once a month, midnight, first of month | 0 0 0 1 * *
0000000000000000000000000000000000000000;;		@weekly                | Run once a week, midnight on Sunday        | 0 0 0 * * 0
0000000000000000000000000000000000000000;;		@daily (or @midnight)  | Run once a day, midnight                   | 0 0 0 * * *
0000000000000000000000000000000000000000;;		@hourly                | Run once an hour, beginning of hour        | 0 0 * * * *
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Intervals
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You may also schedule a job to execute at fixed intervals.  This is supported by
0000000000000000000000000000000000000000;;	formatting the cron spec like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    @every <duration>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	where "duration" is a string accepted by time.ParseDuration
0000000000000000000000000000000000000000;;	(http://golang.org/pkg/time/#ParseDuration).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For example, "@every 1h30m10s" would indicate a schedule that activates every
0000000000000000000000000000000000000000;;	1 hour, 30 minutes, 10 seconds.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note: The interval does not take the job runtime into account.  For example,
0000000000000000000000000000000000000000;;	if a job takes 3 minutes to run, and it is scheduled to run every 5 minutes,
0000000000000000000000000000000000000000;;	it will have only 2 minutes of idle time between each run.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Time zones
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	All interpretation and scheduling is done in the machine's local time zone (as
0000000000000000000000000000000000000000;;	provided by the Go time package (http://www.golang.org/pkg/time).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Be aware that jobs scheduled during daylight-savings leap-ahead transitions will
0000000000000000000000000000000000000000;;	not be run!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Thread safety
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Since the Cron service runs concurrently with the calling code, some amount of
0000000000000000000000000000000000000000;;	care must be taken to ensure proper synchronization.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	All cron methods are designed to be correctly synchronized as long as the caller
0000000000000000000000000000000000000000;;	ensures that invocations have a clear happens-before ordering between them.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Implementation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Cron entries are stored in an array, sorted by their next activation time.  Cron
0000000000000000000000000000000000000000;;	sleeps until the next job is due to be run.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Upon waking:
0000000000000000000000000000000000000000;;	 - it runs each entry that is active on that second
0000000000000000000000000000000000000000;;	 - it calculates the next run times for the jobs that were run
0000000000000000000000000000000000000000;;	 - it re-sorts the array of entries by next activation time.
0000000000000000000000000000000000000000;;	 - it goes to sleep until the soonest job.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package cron
