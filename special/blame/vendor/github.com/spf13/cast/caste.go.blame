0000000000000000000000000000000000000000;;	// Copyright Â© 2014 Steve Francia <spf@spf13.com>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Use of this source code is governed by an MIT-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package cast
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"html/template"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jww "github.com/spf13/jwalterweatherman"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToTimeE casts an empty interface to time.Time.
0000000000000000000000000000000000000000;;	func ToTimeE(i interface{}) (tim time.Time, err error) {
0000000000000000000000000000000000000000;;		i = indirect(i)
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToTimeE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch s := i.(type) {
0000000000000000000000000000000000000000;;		case time.Time:
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			d, e := StringToDate(s)
0000000000000000000000000000000000000000;;			if e == nil {
0000000000000000000000000000000000000000;;				return d, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return time.Time{}, fmt.Errorf("Could not parse Date/Time format: %v\n", e)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return time.Time{}, fmt.Errorf("Unable to Cast %#v to Time\n", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToDurationE casts an empty interface to time.Duration.
0000000000000000000000000000000000000000;;	func ToDurationE(i interface{}) (d time.Duration, err error) {
0000000000000000000000000000000000000000;;		i = indirect(i)
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToDurationE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch s := i.(type) {
0000000000000000000000000000000000000000;;		case time.Duration:
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			d = time.Duration(s)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		case float64:
0000000000000000000000000000000000000000;;			d = time.Duration(s)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			d, err = time.ParseDuration(s)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Unable to Cast %#v to Duration\n", i)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToBoolE casts an empty interface to a bool.
0000000000000000000000000000000000000000;;	func ToBoolE(i interface{}) (bool, error) {
0000000000000000000000000000000000000000;;		i = indirect(i)
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToBoolE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch b := i.(type) {
0000000000000000000000000000000000000000;;		case bool:
0000000000000000000000000000000000000000;;			return b, nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		case int:
0000000000000000000000000000000000000000;;			if i.(int) != 0 {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return strconv.ParseBool(i.(string))
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("Unable to Cast %#v to bool", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToFloat64E casts an empty interface to a float64.
0000000000000000000000000000000000000000;;	func ToFloat64E(i interface{}) (float64, error) {
0000000000000000000000000000000000000000;;		i = indirect(i)
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToFloat64E called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch s := i.(type) {
0000000000000000000000000000000000000000;;		case float64:
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		case float32:
0000000000000000000000000000000000000000;;			return float64(s), nil
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			return float64(s), nil
0000000000000000000000000000000000000000;;		case int32:
0000000000000000000000000000000000000000;;			return float64(s), nil
0000000000000000000000000000000000000000;;		case int16:
0000000000000000000000000000000000000000;;			return float64(s), nil
0000000000000000000000000000000000000000;;		case int8:
0000000000000000000000000000000000000000;;			return float64(s), nil
0000000000000000000000000000000000000000;;		case int:
0000000000000000000000000000000000000000;;			return float64(s), nil
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			v, err := strconv.ParseFloat(s, 64)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return float64(v), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0.0, fmt.Errorf("Unable to Cast %#v to float", i)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return 0.0, fmt.Errorf("Unable to Cast %#v to float", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToInt64E casts an empty interface to an int64.
0000000000000000000000000000000000000000;;	func ToInt64E(i interface{}) (int64, error) {
0000000000000000000000000000000000000000;;		i = indirect(i)
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToInt64E called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch s := i.(type) {
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		case int:
0000000000000000000000000000000000000000;;			return int64(s), nil
0000000000000000000000000000000000000000;;		case int32:
0000000000000000000000000000000000000000;;			return int64(s), nil
0000000000000000000000000000000000000000;;		case int16:
0000000000000000000000000000000000000000;;			return int64(s), nil
0000000000000000000000000000000000000000;;		case int8:
0000000000000000000000000000000000000000;;			return int64(s), nil
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			v, err := strconv.ParseInt(s, 0, 0)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return v, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("Unable to Cast %#v to int64", i)
0000000000000000000000000000000000000000;;		case float64:
0000000000000000000000000000000000000000;;			return int64(s), nil
0000000000000000000000000000000000000000;;		case bool:
0000000000000000000000000000000000000000;;			if bool(s) {
0000000000000000000000000000000000000000;;				return int64(1), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return int64(0), nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return int64(0), nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return int64(0), fmt.Errorf("Unable to Cast %#v to int64", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToIntE casts an empty interface to an int.
0000000000000000000000000000000000000000;;	func ToIntE(i interface{}) (int, error) {
0000000000000000000000000000000000000000;;		i = indirect(i)
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToIntE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch s := i.(type) {
0000000000000000000000000000000000000000;;		case int:
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			return int(s), nil
0000000000000000000000000000000000000000;;		case int32:
0000000000000000000000000000000000000000;;			return int(s), nil
0000000000000000000000000000000000000000;;		case int16:
0000000000000000000000000000000000000000;;			return int(s), nil
0000000000000000000000000000000000000000;;		case int8:
0000000000000000000000000000000000000000;;			return int(s), nil
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			v, err := strconv.ParseInt(s, 0, 0)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return int(v), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("Unable to Cast %#v to int", i)
0000000000000000000000000000000000000000;;		case float64:
0000000000000000000000000000000000000000;;			return int(s), nil
0000000000000000000000000000000000000000;;		case bool:
0000000000000000000000000000000000000000;;			if bool(s) {
0000000000000000000000000000000000000000;;				return 1, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("Unable to Cast %#v to int", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// From html/template/content.go
0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// indirect returns the value, after dereferencing as many times
0000000000000000000000000000000000000000;;	// as necessary to reach the base type (or nil).
0000000000000000000000000000000000000000;;	func indirect(a interface{}) interface{} {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t := reflect.TypeOf(a); t.Kind() != reflect.Ptr {
0000000000000000000000000000000000000000;;			// Avoid creating a reflect.Value if it's not a pointer.
0000000000000000000000000000000000000000;;			return a
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v := reflect.ValueOf(a)
0000000000000000000000000000000000000000;;		for v.Kind() == reflect.Ptr && !v.IsNil() {
0000000000000000000000000000000000000000;;			v = v.Elem()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v.Interface()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// From html/template/content.go
0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// indirectToStringerOrError returns the value, after dereferencing as many times
0000000000000000000000000000000000000000;;	// as necessary to reach the base type (or nil) or an implementation of fmt.Stringer
0000000000000000000000000000000000000000;;	// or error,
0000000000000000000000000000000000000000;;	func indirectToStringerOrError(a interface{}) interface{} {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var errorType = reflect.TypeOf((*error)(nil)).Elem()
0000000000000000000000000000000000000000;;		var fmtStringerType = reflect.TypeOf((*fmt.Stringer)(nil)).Elem()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v := reflect.ValueOf(a)
0000000000000000000000000000000000000000;;		for !v.Type().Implements(fmtStringerType) && !v.Type().Implements(errorType) && v.Kind() == reflect.Ptr && !v.IsNil() {
0000000000000000000000000000000000000000;;			v = v.Elem()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v.Interface()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToStringE casts an empty interface to a string.
0000000000000000000000000000000000000000;;	func ToStringE(i interface{}) (string, error) {
0000000000000000000000000000000000000000;;		i = indirectToStringerOrError(i)
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToStringE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch s := i.(type) {
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		case bool:
0000000000000000000000000000000000000000;;			return strconv.FormatBool(s), nil
0000000000000000000000000000000000000000;;		case float64:
0000000000000000000000000000000000000000;;			return strconv.FormatFloat(i.(float64), 'f', -1, 64), nil
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			return strconv.FormatInt(i.(int64), 10), nil
0000000000000000000000000000000000000000;;		case int:
0000000000000000000000000000000000000000;;			return strconv.FormatInt(int64(i.(int)), 10), nil
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			return string(s), nil
0000000000000000000000000000000000000000;;		case template.HTML:
0000000000000000000000000000000000000000;;			return string(s), nil
0000000000000000000000000000000000000000;;		case template.URL:
0000000000000000000000000000000000000000;;			return string(s), nil
0000000000000000000000000000000000000000;;		case template.JS:
0000000000000000000000000000000000000000;;			return string(s), nil
0000000000000000000000000000000000000000;;		case template.CSS:
0000000000000000000000000000000000000000;;			return string(s), nil
0000000000000000000000000000000000000000;;		case template.HTMLAttr:
0000000000000000000000000000000000000000;;			return string(s), nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		case fmt.Stringer:
0000000000000000000000000000000000000000;;			return s.String(), nil
0000000000000000000000000000000000000000;;		case error:
0000000000000000000000000000000000000000;;			return s.Error(), nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Unable to Cast %#v to string", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToStringMapStringE casts an empty interface to a map[string]string.
0000000000000000000000000000000000000000;;	func ToStringMapStringE(i interface{}) (map[string]string, error) {
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToStringMapStringE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var m = map[string]string{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v := i.(type) {
0000000000000000000000000000000000000000;;		case map[string]string:
0000000000000000000000000000000000000000;;			return v, nil
0000000000000000000000000000000000000000;;		case map[string]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToString(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[interface{}]string:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToString(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[interface{}]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToString(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return m, fmt.Errorf("Unable to Cast %#v to map[string]string", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToStringMapStringSliceE casts an empty interface to a map[string][]string.
0000000000000000000000000000000000000000;;	func ToStringMapStringSliceE(i interface{}) (map[string][]string, error) {
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToStringMapStringSliceE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var m = map[string][]string{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v := i.(type) {
0000000000000000000000000000000000000000;;		case map[string][]string:
0000000000000000000000000000000000000000;;			return v, nil
0000000000000000000000000000000000000000;;		case map[string][]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToStringSlice(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[string]string:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = []string{val}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case map[string]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = []string{ToString(val)}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[interface{}][]string:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToStringSlice(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[interface{}]string:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToStringSlice(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[interface{}][]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToStringSlice(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[interface{}]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				key, err := ToStringE(k)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return m, fmt.Errorf("Unable to Cast %#v to map[string][]string", i)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				value, err := ToStringSliceE(val)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return m, fmt.Errorf("Unable to Cast %#v to map[string][]string", i)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				m[key] = value
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return m, fmt.Errorf("Unable to Cast %#v to map[string][]string", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToStringMapBoolE casts an empty interface to a map[string]bool.
0000000000000000000000000000000000000000;;	func ToStringMapBoolE(i interface{}) (map[string]bool, error) {
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToStringMapBoolE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var m = map[string]bool{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v := i.(type) {
0000000000000000000000000000000000000000;;		case map[interface{}]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToBool(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[string]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = ToBool(val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[string]bool:
0000000000000000000000000000000000000000;;			return v, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return m, fmt.Errorf("Unable to Cast %#v to map[string]bool", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToStringMapE casts an empty interface to a map[string]interface{}.
0000000000000000000000000000000000000000;;	func ToStringMapE(i interface{}) (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToStringMapE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var m = map[string]interface{}{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v := i.(type) {
0000000000000000000000000000000000000000;;		case map[interface{}]interface{}:
0000000000000000000000000000000000000000;;			for k, val := range v {
0000000000000000000000000000000000000000;;				m[ToString(k)] = val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return m, nil
0000000000000000000000000000000000000000;;		case map[string]interface{}:
0000000000000000000000000000000000000000;;			return v, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return m, fmt.Errorf("Unable to Cast %#v to map[string]interface{}", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToSliceE casts an empty interface to a []interface{}.
0000000000000000000000000000000000000000;;	func ToSliceE(i interface{}) ([]interface{}, error) {
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToSliceE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var s []interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v := i.(type) {
0000000000000000000000000000000000000000;;		case []interface{}:
0000000000000000000000000000000000000000;;			for _, u := range v {
0000000000000000000000000000000000000000;;				s = append(s, u)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		case []map[string]interface{}:
0000000000000000000000000000000000000000;;			for _, u := range v {
0000000000000000000000000000000000000000;;				s = append(s, u)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return s, fmt.Errorf("Unable to Cast %#v of type %v to []interface{}", i, reflect.TypeOf(i))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToStringSliceE casts an empty interface to a []string.
0000000000000000000000000000000000000000;;	func ToStringSliceE(i interface{}) ([]string, error) {
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToStringSliceE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var a []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v := i.(type) {
0000000000000000000000000000000000000000;;		case []interface{}:
0000000000000000000000000000000000000000;;			for _, u := range v {
0000000000000000000000000000000000000000;;				a = append(a, ToString(u))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return a, nil
0000000000000000000000000000000000000000;;		case []string:
0000000000000000000000000000000000000000;;			return v, nil
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return strings.Fields(v), nil
0000000000000000000000000000000000000000;;		case interface{}:
0000000000000000000000000000000000000000;;			str, err := ToStringE(v)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return a, fmt.Errorf("Unable to Cast %#v to []string", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return []string{str}, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return a, fmt.Errorf("Unable to Cast %#v to []string", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToIntSliceE casts an empty interface to a []int.
0000000000000000000000000000000000000000;;	func ToIntSliceE(i interface{}) ([]int, error) {
0000000000000000000000000000000000000000;;		jww.TRACE.Println("ToIntSliceE called on type:", reflect.TypeOf(i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if i == nil {
0000000000000000000000000000000000000000;;			return []int{}, fmt.Errorf("Unable to Cast %#v to []int", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v := i.(type) {
0000000000000000000000000000000000000000;;		case []int:
0000000000000000000000000000000000000000;;			return v, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kind := reflect.TypeOf(i).Kind()
0000000000000000000000000000000000000000;;		switch kind {
0000000000000000000000000000000000000000;;		case reflect.Slice, reflect.Array:
0000000000000000000000000000000000000000;;			s := reflect.ValueOf(i)
0000000000000000000000000000000000000000;;			a := make([]int, s.Len())
0000000000000000000000000000000000000000;;			for j := 0; j < s.Len(); j++ {
0000000000000000000000000000000000000000;;				val, err := ToIntE(s.Index(j).Interface())
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return []int{}, fmt.Errorf("Unable to Cast %#v to []int", i)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				a[j] = val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return a, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return []int{}, fmt.Errorf("Unable to Cast %#v to []int", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringToDate casts an empty interface to a time.Time.
0000000000000000000000000000000000000000;;	func StringToDate(s string) (time.Time, error) {
0000000000000000000000000000000000000000;;		return parseDateWith(s, []string{
0000000000000000000000000000000000000000;;			time.RFC3339,
0000000000000000000000000000000000000000;;			"2006-01-02T15:04:05", // iso8601 without timezone
0000000000000000000000000000000000000000;;			time.RFC1123Z,
0000000000000000000000000000000000000000;;			time.RFC1123,
0000000000000000000000000000000000000000;;			time.RFC822Z,
0000000000000000000000000000000000000000;;			time.RFC822,
0000000000000000000000000000000000000000;;			time.ANSIC,
0000000000000000000000000000000000000000;;			time.UnixDate,
0000000000000000000000000000000000000000;;			time.RubyDate,
0000000000000000000000000000000000000000;;			"2006-01-02 15:04:05Z07:00",
0000000000000000000000000000000000000000;;			"02 Jan 06 15:04 MST",
0000000000000000000000000000000000000000;;			"2006-01-02",
0000000000000000000000000000000000000000;;			"02 Jan 2006",
0000000000000000000000000000000000000000;;			"2006-01-02 15:04:05 -07:00",
0000000000000000000000000000000000000000;;			"2006-01-02 15:04:05 -0700",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseDateWith(s string, dates []string) (d time.Time, e error) {
0000000000000000000000000000000000000000;;		for _, dateType := range dates {
0000000000000000000000000000000000000000;;			if d, e = time.Parse(dateType, s); e == nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d, fmt.Errorf("Unable to parse date: %s", s)
0000000000000000000000000000000000000000;;	}
