0000000000000000000000000000000000000000;;	cast
0000000000000000000000000000000000000000;;	====
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Easy and safe casting from one type to another in Go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Don’t Panic! ... Cast
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## What is Cast?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Cast is a library to convert between different go types in a consistent and easy way.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Cast provides simple functions to easily convert a number to a string, an
0000000000000000000000000000000000000000;;	interface into a bool, etc. Cast does this intelligently when an obvious
0000000000000000000000000000000000000000;;	conversion is possible. It doesn’t make any attempts to guess what you meant,
0000000000000000000000000000000000000000;;	for example you can only convert a string to an int when it is a string
0000000000000000000000000000000000000000;;	representation of an int such as “8”. Cast was developed for use in
0000000000000000000000000000000000000000;;	[Hugo](http://hugo.spf13.com), a website engine which uses YAML, TOML or JSON
0000000000000000000000000000000000000000;;	for meta data.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Why use Cast?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	When working with dynamic data in Go you often need to cast or convert the data
0000000000000000000000000000000000000000;;	from one type into another. Cast goes beyond just using type assertion (though
0000000000000000000000000000000000000000;;	it uses that when possible) to provide a very straightforward and convenient
0000000000000000000000000000000000000000;;	library.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you are working with interfaces to handle things like dynamic content
0000000000000000000000000000000000000000;;	you’ll need an easy way to convert an interface into a given type. This
0000000000000000000000000000000000000000;;	is the library for you.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you are taking in data from YAML, TOML or JSON or other formats which lack
0000000000000000000000000000000000000000;;	full types, then Cast is the library for you.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Cast provides a handful of To_____ methods. These methods will always return
0000000000000000000000000000000000000000;;	the desired type. **If input is provided that will not convert to that type, the
0000000000000000000000000000000000000000;;	0 or nil value for that type will be returned**.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Cast also provides identical methods To_____E. These return the same result as
0000000000000000000000000000000000000000;;	the To_____ methods, plus an additional error which tells you if it successfully
0000000000000000000000000000000000000000;;	converted. Using these methods you can tell the difference between when the
0000000000000000000000000000000000000000;;	input matched the zero value or when the conversion failed and the zero value
0000000000000000000000000000000000000000;;	was returned.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The following examples are merely a sample of what is available. Please review
0000000000000000000000000000000000000000;;	the code for a complete set.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Example ‘ToString’:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cast.ToString("mayonegg")         // "mayonegg"
0000000000000000000000000000000000000000;;	    cast.ToString(8)                  // "8"
0000000000000000000000000000000000000000;;	    cast.ToString(8.31)               // "8.31"
0000000000000000000000000000000000000000;;	    cast.ToString([]byte("one time")) // "one time"
0000000000000000000000000000000000000000;;	    cast.ToString(nil)                // ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var foo interface{} = "one more time"
0000000000000000000000000000000000000000;;	    cast.ToString(foo)                // "one more time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Example ‘ToInt’:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cast.ToInt(8)                  // 8
0000000000000000000000000000000000000000;;	    cast.ToInt(8.31)               // 8
0000000000000000000000000000000000000000;;	    cast.ToInt("8")                // 8
0000000000000000000000000000000000000000;;	    cast.ToInt(true)               // 1
0000000000000000000000000000000000000000;;	    cast.ToInt(false)              // 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var eight interface{} = 8
0000000000000000000000000000000000000000;;	    cast.ToInt(eight)              // 8
0000000000000000000000000000000000000000;;	    cast.ToInt(nil)                // 0
0000000000000000000000000000000000000000;;	
