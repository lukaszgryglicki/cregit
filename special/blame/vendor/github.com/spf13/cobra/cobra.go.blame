0000000000000000000000000000000000000000;;	// Copyright Â© 2013 Steve Francia <spf@spf13.com>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/cobra/cobra.go[Godeps/_workspace/src/github.com/spf13/cobra/cobra.go][vendor/github.com/spf13/cobra/cobra.go];	
0000000000000000000000000000000000000000;;	// Commands similar to git, go tools and other modern CLI tools
0000000000000000000000000000000000000000;;	// inspired by go, go-Commander, gh and subcommand
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cobra
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"text/template"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var templateFuncs = template.FuncMap{
0000000000000000000000000000000000000000;;		"trim":               strings.TrimSpace,
0000000000000000000000000000000000000000;;		"trimRightSpace":     trimRightSpace,
0000000000000000000000000000000000000000;;		"appendIfNotPresent": appendIfNotPresent,
0000000000000000000000000000000000000000;;		"rpad":               rpad,
0000000000000000000000000000000000000000;;		"gt":                 Gt,
0000000000000000000000000000000000000000;;		"eq":                 Eq,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var initializers []func()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// automatic prefix matching can be a dangerous thing to automatically enable in CLI tools.
0000000000000000000000000000000000000000;;	// Set this to true to enable it
0000000000000000000000000000000000000000;;	var EnablePrefixMatching = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//EnableCommandSorting controls sorting of the slice of commands, which is turned on by default.
0000000000000000000000000000000000000000;;	//To disable sorting, set it to false.
0000000000000000000000000000000000000000;;	var EnableCommandSorting = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//AddTemplateFunc adds a template function that's available to Usage and Help
0000000000000000000000000000000000000000;;	//template generation.
0000000000000000000000000000000000000000;;	func AddTemplateFunc(name string, tmplFunc interface{}) {
0000000000000000000000000000000000000000;;		templateFuncs[name] = tmplFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//AddTemplateFuncs adds multiple template functions availalble to Usage and
0000000000000000000000000000000000000000;;	//Help template generation.
0000000000000000000000000000000000000000;;	func AddTemplateFuncs(tmplFuncs template.FuncMap) {
0000000000000000000000000000000000000000;;		for k, v := range tmplFuncs {
0000000000000000000000000000000000000000;;			templateFuncs[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//OnInitialize takes a series of func() arguments and appends them to a slice of func().
0000000000000000000000000000000000000000;;	func OnInitialize(y ...func()) {
0000000000000000000000000000000000000000;;		for _, x := range y {
0000000000000000000000000000000000000000;;			initializers = append(initializers, x)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//Gt takes two types and checks whether the first type is greater than the second. In case of types Arrays, Chans,
0000000000000000000000000000000000000000;;	//Maps and Slices, Gt will compare their lengths. Ints are compared directly while strings are first parsed as
0000000000000000000000000000000000000000;;	//ints and then compared.
0000000000000000000000000000000000000000;;	func Gt(a interface{}, b interface{}) bool {
0000000000000000000000000000000000000000;;		var left, right int64
0000000000000000000000000000000000000000;;		av := reflect.ValueOf(a)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch av.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Array, reflect.Chan, reflect.Map, reflect.Slice:
0000000000000000000000000000000000000000;;			left = int64(av.Len())
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			left = av.Int()
0000000000000000000000000000000000000000;;		case reflect.String:
0000000000000000000000000000000000000000;;			left, _ = strconv.ParseInt(av.String(), 10, 64)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bv := reflect.ValueOf(b)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch bv.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Array, reflect.Chan, reflect.Map, reflect.Slice:
0000000000000000000000000000000000000000;;			right = int64(bv.Len())
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			right = bv.Int()
0000000000000000000000000000000000000000;;		case reflect.String:
0000000000000000000000000000000000000000;;			right, _ = strconv.ParseInt(bv.String(), 10, 64)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return left > right
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//Eq takes two types and checks whether they are equal. Supported types are int and string. Unsupported types will panic.
0000000000000000000000000000000000000000;;	func Eq(a interface{}, b interface{}) bool {
0000000000000000000000000000000000000000;;		av := reflect.ValueOf(a)
0000000000000000000000000000000000000000;;		bv := reflect.ValueOf(b)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch av.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Array, reflect.Chan, reflect.Map, reflect.Slice:
0000000000000000000000000000000000000000;;			panic("Eq called on unsupported type")
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			return av.Int() == bv.Int()
0000000000000000000000000000000000000000;;		case reflect.String:
0000000000000000000000000000000000000000;;			return av.String() == bv.String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func trimRightSpace(s string) string {
0000000000000000000000000000000000000000;;		return strings.TrimRightFunc(s, unicode.IsSpace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// appendIfNotPresent will append stringToAppend to the end of s, but only if it's not yet present in s
0000000000000000000000000000000000000000;;	func appendIfNotPresent(s, stringToAppend string) string {
0000000000000000000000000000000000000000;;		if strings.Contains(s, stringToAppend) {
0000000000000000000000000000000000000000;;			return s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s + " " + stringToAppend
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//rpad adds padding to the right of a string
0000000000000000000000000000000000000000;;	func rpad(s string, padding int) string {
0000000000000000000000000000000000000000;;		template := fmt.Sprintf("%%-%ds", padding)
0000000000000000000000000000000000000000;;		return fmt.Sprintf(template, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// tmpl executes the given template text on data, writing the result to w.
0000000000000000000000000000000000000000;;	func tmpl(w io.Writer, text string, data interface{}) error {
0000000000000000000000000000000000000000;;		t := template.New("top")
0000000000000000000000000000000000000000;;		t.Funcs(templateFuncs)
0000000000000000000000000000000000000000;;		template.Must(t.Parse(text))
0000000000000000000000000000000000000000;;		return t.Execute(w, data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ld compares two strings and returns the levenshtein distance between them
0000000000000000000000000000000000000000;;	func ld(s, t string, ignoreCase bool) int {
0000000000000000000000000000000000000000;;		if ignoreCase {
0000000000000000000000000000000000000000;;			s = strings.ToLower(s)
0000000000000000000000000000000000000000;;			t = strings.ToLower(t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		d := make([][]int, len(s)+1)
0000000000000000000000000000000000000000;;		for i := range d {
0000000000000000000000000000000000000000;;			d[i] = make([]int, len(t)+1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range d {
0000000000000000000000000000000000000000;;			d[i][0] = i
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for j := range d[0] {
0000000000000000000000000000000000000000;;			d[0][j] = j
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for j := 1; j <= len(t); j++ {
0000000000000000000000000000000000000000;;			for i := 1; i <= len(s); i++ {
0000000000000000000000000000000000000000;;				if s[i-1] == t[j-1] {
0000000000000000000000000000000000000000;;					d[i][j] = d[i-1][j-1]
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					min := d[i-1][j]
0000000000000000000000000000000000000000;;					if d[i][j-1] < min {
0000000000000000000000000000000000000000;;						min = d[i][j-1]
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if d[i-1][j-1] < min {
0000000000000000000000000000000000000000;;						min = d[i-1][j-1]
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					d[i][j] = min + 1
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d[len(s)][len(t)]
0000000000000000000000000000000000000000;;	}
