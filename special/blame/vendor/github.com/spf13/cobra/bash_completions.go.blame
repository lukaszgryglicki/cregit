0000000000000000000000000000000000000000;;	package cobra
affdf614c33c923118140e05193f346bbd8037ea;Godeps/_workspace/src/github.com/spf13/cobra/bash_completions.go[Godeps/_workspace/src/github.com/spf13/cobra/bash_completions.go][vendor/github.com/spf13/cobra/bash_completions.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		BashCompFilenameExt     = "cobra_annotation_bash_completion_filename_extentions"
0000000000000000000000000000000000000000;;		BashCompCustom          = "cobra_annotation_bash_completion_custom"
0000000000000000000000000000000000000000;;		BashCompOneRequiredFlag = "cobra_annotation_bash_completion_one_required_flag"
0000000000000000000000000000000000000000;;		BashCompSubdirsInDir    = "cobra_annotation_bash_completion_subdirs_in_dir"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func preamble(out io.Writer, name string) error {
0000000000000000000000000000000000000000;;		_, err := fmt.Fprintf(out, "# bash completion for %-36s -*- shell-script -*-\n", name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = fmt.Fprint(out, `
0000000000000000000000000000000000000000;;	__debug()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    if [[ -n ${BASH_COMP_DEBUG_FILE} ]]; then
0000000000000000000000000000000000000000;;	        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
0000000000000000000000000000000000000000;;	# _init_completion. This is a very minimal version of that function.
0000000000000000000000000000000000000000;;	__my_init_completion()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    COMPREPLY=()
0000000000000000000000000000000000000000;;	    _get_comp_words_by_ref "$@" cur prev words cword
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	__index_of_word()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    local w word=$1
0000000000000000000000000000000000000000;;	    shift
0000000000000000000000000000000000000000;;	    index=0
0000000000000000000000000000000000000000;;	    for w in "$@"; do
0000000000000000000000000000000000000000;;	        [[ $w = "$word" ]] && return
0000000000000000000000000000000000000000;;	        index=$((index+1))
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    index=-1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	__contains_word()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    local w word=$1; shift
0000000000000000000000000000000000000000;;	    for w in "$@"; do
0000000000000000000000000000000000000000;;	        [[ $w = "$word" ]] && return
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	__handle_reply()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    __debug "${FUNCNAME[0]}"
0000000000000000000000000000000000000000;;	    case $cur in
0000000000000000000000000000000000000000;;	        -*)
0000000000000000000000000000000000000000;;	            if [[ $(type -t compopt) = "builtin" ]]; then
0000000000000000000000000000000000000000;;	                compopt -o nospace
0000000000000000000000000000000000000000;;	            fi
0000000000000000000000000000000000000000;;	            local allflags
0000000000000000000000000000000000000000;;	            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
0000000000000000000000000000000000000000;;	                allflags=("${must_have_one_flag[@]}")
0000000000000000000000000000000000000000;;	            else
0000000000000000000000000000000000000000;;	                allflags=("${flags[*]} ${two_word_flags[*]}")
0000000000000000000000000000000000000000;;	            fi
0000000000000000000000000000000000000000;;	            COMPREPLY=( $(compgen -W "${allflags[*]}" -- "$cur") )
0000000000000000000000000000000000000000;;	            if [[ $(type -t compopt) = "builtin" ]]; then
0000000000000000000000000000000000000000;;	                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
0000000000000000000000000000000000000000;;	            fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	            # complete after --flag=abc
0000000000000000000000000000000000000000;;	            if [[ $cur == *=* ]]; then
0000000000000000000000000000000000000000;;	                if [[ $(type -t compopt) = "builtin" ]]; then
0000000000000000000000000000000000000000;;	                    compopt +o nospace
0000000000000000000000000000000000000000;;	                fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	                local index flag
0000000000000000000000000000000000000000;;	                flag="${cur%%=*}"
0000000000000000000000000000000000000000;;	                __index_of_word "${flag}" "${flags_with_completion[@]}"
0000000000000000000000000000000000000000;;	                if [[ ${index} -ge 0 ]]; then
0000000000000000000000000000000000000000;;	                    COMPREPLY=()
0000000000000000000000000000000000000000;;	                    PREFIX=""
0000000000000000000000000000000000000000;;	                    cur="${cur#*=}"
0000000000000000000000000000000000000000;;	                    ${flags_completion[${index}]}
0000000000000000000000000000000000000000;;	                    if [ -n "${ZSH_VERSION}" ]; then
0000000000000000000000000000000000000000;;	                        # zfs completion needs --flag= prefix
0000000000000000000000000000000000000000;;	                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
0000000000000000000000000000000000000000;;	                    fi
0000000000000000000000000000000000000000;;	                fi
0000000000000000000000000000000000000000;;	            fi
0000000000000000000000000000000000000000;;	            return 0;
0000000000000000000000000000000000000000;;	            ;;
0000000000000000000000000000000000000000;;	    esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # check if we are handling a flag with special work handling
0000000000000000000000000000000000000000;;	    local index
0000000000000000000000000000000000000000;;	    __index_of_word "${prev}" "${flags_with_completion[@]}"
0000000000000000000000000000000000000000;;	    if [[ ${index} -ge 0 ]]; then
0000000000000000000000000000000000000000;;	        ${flags_completion[${index}]}
0000000000000000000000000000000000000000;;	        return
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # we are parsing a flag and don't have a special handler, no completion
0000000000000000000000000000000000000000;;	    if [[ ${cur} != "${words[cword]}" ]]; then
0000000000000000000000000000000000000000;;	        return
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    local completions
0000000000000000000000000000000000000000;;	    completions=("${commands[@]}")
0000000000000000000000000000000000000000;;	    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
0000000000000000000000000000000000000000;;	        completions=("${must_have_one_noun[@]}")
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
0000000000000000000000000000000000000000;;	        completions+=("${must_have_one_flag[@]}")
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    COMPREPLY=( $(compgen -W "${completions[*]}" -- "$cur") )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
0000000000000000000000000000000000000000;;	        COMPREPLY=( $(compgen -W "${noun_aliases[*]}" -- "$cur") )
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
0000000000000000000000000000000000000000;;	        declare -F __custom_func >/dev/null && __custom_func
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    __ltrim_colon_completions "$cur"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The arguments should be in the form "ext1|ext2|extn"
0000000000000000000000000000000000000000;;	__handle_filename_extension_flag()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    local ext="$1"
0000000000000000000000000000000000000000;;	    _filedir "@(${ext})"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	__handle_subdirs_in_dir_flag()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    local dir="$1"
0000000000000000000000000000000000000000;;	    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	__handle_flag()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    __debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # if a command required a flag, and we found it, unset must_have_one_flag()
0000000000000000000000000000000000000000;;	    local flagname=${words[c]}
0000000000000000000000000000000000000000;;	    local flagvalue
0000000000000000000000000000000000000000;;	    # if the word contained an =
0000000000000000000000000000000000000000;;	    if [[ ${words[c]} == *"="* ]]; then
0000000000000000000000000000000000000000;;	        flagvalue=${flagname#*=} # take in as flagvalue after the =
0000000000000000000000000000000000000000;;	        flagname=${flagname%%=*} # strip everything after the =
0000000000000000000000000000000000000000;;	        flagname="${flagname}=" # but put the = back
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    __debug "${FUNCNAME[0]}: looking for ${flagname}"
0000000000000000000000000000000000000000;;	    if __contains_word "${flagname}" "${must_have_one_flag[@]}"; then
0000000000000000000000000000000000000000;;	        must_have_one_flag=()
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # if you set a flag which only applies to this command, don't show subcommands
0000000000000000000000000000000000000000;;	    if __contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
0000000000000000000000000000000000000000;;	      commands=()
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # keep flag value with flagname as flaghash
0000000000000000000000000000000000000000;;	    if [ -n "${flagvalue}" ] ; then
0000000000000000000000000000000000000000;;	        flaghash[${flagname}]=${flagvalue}
0000000000000000000000000000000000000000;;	    elif [ -n "${words[ $((c+1)) ]}" ] ; then
0000000000000000000000000000000000000000;;	        flaghash[${flagname}]=${words[ $((c+1)) ]}
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	        flaghash[${flagname}]="true" # pad "true" for bool flag
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # skip the argument to a two word flag
0000000000000000000000000000000000000000;;	    if __contains_word "${words[c]}" "${two_word_flags[@]}"; then
0000000000000000000000000000000000000000;;	        c=$((c+1))
0000000000000000000000000000000000000000;;	        # if we are looking for a flags value, don't show commands
0000000000000000000000000000000000000000;;	        if [[ $c -eq $cword ]]; then
0000000000000000000000000000000000000000;;	            commands=()
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    c=$((c+1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	__handle_noun()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    __debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if __contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
0000000000000000000000000000000000000000;;	        must_have_one_noun=()
0000000000000000000000000000000000000000;;	    elif __contains_word "${words[c]}" "${noun_aliases[@]}"; then
0000000000000000000000000000000000000000;;	        must_have_one_noun=()
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    nouns+=("${words[c]}")
0000000000000000000000000000000000000000;;	    c=$((c+1))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	__handle_command()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    __debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    local next_command
0000000000000000000000000000000000000000;;	    if [[ -n ${last_command} ]]; then
0000000000000000000000000000000000000000;;	        next_command="_${last_command}_${words[c]//:/__}"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	        if [[ $c -eq 0 ]]; then
0000000000000000000000000000000000000000;;	            next_command="_$(basename "${words[c]//:/__}")"
0000000000000000000000000000000000000000;;	        else
0000000000000000000000000000000000000000;;	            next_command="_${words[c]//:/__}"
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    c=$((c+1))
0000000000000000000000000000000000000000;;	    __debug "${FUNCNAME[0]}: looking for ${next_command}"
0000000000000000000000000000000000000000;;	    declare -F $next_command >/dev/null && $next_command
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	__handle_word()
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    if [[ $c -ge $cword ]]; then
0000000000000000000000000000000000000000;;	        __handle_reply
0000000000000000000000000000000000000000;;	        return
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    __debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
0000000000000000000000000000000000000000;;	    if [[ "${words[c]}" == -* ]]; then
0000000000000000000000000000000000000000;;	        __handle_flag
0000000000000000000000000000000000000000;;	    elif __contains_word "${words[c]}" "${commands[@]}"; then
0000000000000000000000000000000000000000;;	        __handle_command
0000000000000000000000000000000000000000;;	    elif [[ $c -eq 0 ]] && __contains_word "$(basename "${words[c]}")" "${commands[@]}"; then
0000000000000000000000000000000000000000;;	        __handle_command
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	        __handle_noun
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    __handle_word
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func postscript(w io.Writer, name string) error {
0000000000000000000000000000000000000000;;		name = strings.Replace(name, ":", "__", -1)
0000000000000000000000000000000000000000;;		_, err := fmt.Fprintf(w, "__start_%s()\n", name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = fmt.Fprintf(w, `{
0000000000000000000000000000000000000000;;	    local cur prev words cword
0000000000000000000000000000000000000000;;	    declare -A flaghash 2>/dev/null || :
0000000000000000000000000000000000000000;;	    if declare -F _init_completion >/dev/null 2>&1; then
0000000000000000000000000000000000000000;;	        _init_completion -s || return
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	        __my_init_completion -n "=" || return
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    local c=0
0000000000000000000000000000000000000000;;	    local flags=()
0000000000000000000000000000000000000000;;	    local two_word_flags=()
0000000000000000000000000000000000000000;;	    local local_nonpersistent_flags=()
0000000000000000000000000000000000000000;;	    local flags_with_completion=()
0000000000000000000000000000000000000000;;	    local flags_completion=()
0000000000000000000000000000000000000000;;	    local commands=("%s")
0000000000000000000000000000000000000000;;	    local must_have_one_flag=()
0000000000000000000000000000000000000000;;	    local must_have_one_noun=()
0000000000000000000000000000000000000000;;	    local last_command
0000000000000000000000000000000000000000;;	    local nouns=()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    __handle_word
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = fmt.Fprintf(w, `if [[ $(type -t compopt) = "builtin" ]]; then
0000000000000000000000000000000000000000;;	    complete -o default -F __start_%s %s
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	    complete -o default -o nospace -F __start_%s %s
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`, name, name, name, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = fmt.Fprintf(w, "# ex: ts=4 sw=4 et filetype=sh\n")
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeCommands(cmd *Command, w io.Writer) error {
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "    commands=()\n"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range cmd.Commands() {
0000000000000000000000000000000000000000;;			if !c.IsAvailableCommand() || c == cmd.helpCommand {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "    commands+=(%q)\n", c.Name()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err := fmt.Fprintf(w, "\n")
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeFlagHandler(name string, annotations map[string][]string, w io.Writer) error {
0000000000000000000000000000000000000000;;		for key, value := range annotations {
0000000000000000000000000000000000000000;;			switch key {
0000000000000000000000000000000000000000;;			case BashCompFilenameExt:
0000000000000000000000000000000000000000;;				_, err := fmt.Fprintf(w, "    flags_with_completion+=(%q)\n", name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if len(value) > 0 {
0000000000000000000000000000000000000000;;					ext := "__handle_filename_extension_flag " + strings.Join(value, "|")
0000000000000000000000000000000000000000;;					_, err = fmt.Fprintf(w, "    flags_completion+=(%q)\n", ext)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					ext := "_filedir"
0000000000000000000000000000000000000000;;					_, err = fmt.Fprintf(w, "    flags_completion+=(%q)\n", ext)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case BashCompCustom:
0000000000000000000000000000000000000000;;				_, err := fmt.Fprintf(w, "    flags_with_completion+=(%q)\n", name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(value) > 0 {
0000000000000000000000000000000000000000;;					handlers := strings.Join(value, "; ")
0000000000000000000000000000000000000000;;					_, err = fmt.Fprintf(w, "    flags_completion+=(%q)\n", handlers)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					_, err = fmt.Fprintf(w, "    flags_completion+=(:)\n")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case BashCompSubdirsInDir:
0000000000000000000000000000000000000000;;				_, err := fmt.Fprintf(w, "    flags_with_completion+=(%q)\n", name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if len(value) == 1 {
0000000000000000000000000000000000000000;;					ext := "__handle_subdirs_in_dir_flag " + value[0]
0000000000000000000000000000000000000000;;					_, err = fmt.Fprintf(w, "    flags_completion+=(%q)\n", ext)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					ext := "_filedir -d"
0000000000000000000000000000000000000000;;					_, err = fmt.Fprintf(w, "    flags_completion+=(%q)\n", ext)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeShortFlag(flag *pflag.Flag, w io.Writer) error {
0000000000000000000000000000000000000000;;		b := (len(flag.NoOptDefVal) > 0)
0000000000000000000000000000000000000000;;		name := flag.Shorthand
0000000000000000000000000000000000000000;;		format := "    "
0000000000000000000000000000000000000000;;		if !b {
0000000000000000000000000000000000000000;;			format += "two_word_"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		format += "flags+=(\"-%s\")\n"
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, format, name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return writeFlagHandler("-"+name, flag.Annotations, w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeFlag(flag *pflag.Flag, w io.Writer) error {
0000000000000000000000000000000000000000;;		b := (len(flag.NoOptDefVal) > 0)
0000000000000000000000000000000000000000;;		name := flag.Name
0000000000000000000000000000000000000000;;		format := "    flags+=(\"--%s"
0000000000000000000000000000000000000000;;		if !b {
0000000000000000000000000000000000000000;;			format += "="
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		format += "\")\n"
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, format, name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return writeFlagHandler("--"+name, flag.Annotations, w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeLocalNonPersistentFlag(flag *pflag.Flag, w io.Writer) error {
0000000000000000000000000000000000000000;;		b := (len(flag.NoOptDefVal) > 0)
0000000000000000000000000000000000000000;;		name := flag.Name
0000000000000000000000000000000000000000;;		format := "    local_nonpersistent_flags+=(\"--%s"
0000000000000000000000000000000000000000;;		if !b {
0000000000000000000000000000000000000000;;			format += "="
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		format += "\")\n"
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, format, name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeFlags(cmd *Command, w io.Writer) error {
0000000000000000000000000000000000000000;;		_, err := fmt.Fprintf(w, `    flags=()
0000000000000000000000000000000000000000;;	    two_word_flags=()
0000000000000000000000000000000000000000;;	    local_nonpersistent_flags=()
0000000000000000000000000000000000000000;;	    flags_with_completion=()
0000000000000000000000000000000000000000;;	    flags_completion=()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		localNonPersistentFlags := cmd.LocalNonPersistentFlags()
0000000000000000000000000000000000000000;;		var visitErr error
0000000000000000000000000000000000000000;;		cmd.NonInheritedFlags().VisitAll(func(flag *pflag.Flag) {
0000000000000000000000000000000000000000;;			if err := writeFlag(flag, w); err != nil {
0000000000000000000000000000000000000000;;				visitErr = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(flag.Shorthand) > 0 {
0000000000000000000000000000000000000000;;				if err := writeShortFlag(flag, w); err != nil {
0000000000000000000000000000000000000000;;					visitErr = err
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if localNonPersistentFlags.Lookup(flag.Name) != nil {
0000000000000000000000000000000000000000;;				if err := writeLocalNonPersistentFlag(flag, w); err != nil {
0000000000000000000000000000000000000000;;					visitErr = err
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if visitErr != nil {
0000000000000000000000000000000000000000;;			return visitErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.InheritedFlags().VisitAll(func(flag *pflag.Flag) {
0000000000000000000000000000000000000000;;			if err := writeFlag(flag, w); err != nil {
0000000000000000000000000000000000000000;;				visitErr = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(flag.Shorthand) > 0 {
0000000000000000000000000000000000000000;;				if err := writeShortFlag(flag, w); err != nil {
0000000000000000000000000000000000000000;;					visitErr = err
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if visitErr != nil {
0000000000000000000000000000000000000000;;			return visitErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = fmt.Fprintf(w, "\n")
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeRequiredFlag(cmd *Command, w io.Writer) error {
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "    must_have_one_flag=()\n"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		flags := cmd.NonInheritedFlags()
0000000000000000000000000000000000000000;;		var visitErr error
0000000000000000000000000000000000000000;;		flags.VisitAll(func(flag *pflag.Flag) {
0000000000000000000000000000000000000000;;			for key := range flag.Annotations {
0000000000000000000000000000000000000000;;				switch key {
0000000000000000000000000000000000000000;;				case BashCompOneRequiredFlag:
0000000000000000000000000000000000000000;;					format := "    must_have_one_flag+=(\"--%s"
0000000000000000000000000000000000000000;;					b := (flag.Value.Type() == "bool")
0000000000000000000000000000000000000000;;					if !b {
0000000000000000000000000000000000000000;;						format += "="
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					format += "\")\n"
0000000000000000000000000000000000000000;;					if _, err := fmt.Fprintf(w, format, flag.Name); err != nil {
0000000000000000000000000000000000000000;;						visitErr = err
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if len(flag.Shorthand) > 0 {
0000000000000000000000000000000000000000;;						if _, err := fmt.Fprintf(w, "    must_have_one_flag+=(\"-%s\")\n", flag.Shorthand); err != nil {
0000000000000000000000000000000000000000;;							visitErr = err
0000000000000000000000000000000000000000;;							return
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return visitErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeRequiredNouns(cmd *Command, w io.Writer) error {
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "    must_have_one_noun=()\n"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(sort.StringSlice(cmd.ValidArgs))
0000000000000000000000000000000000000000;;		for _, value := range cmd.ValidArgs {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "    must_have_one_noun+=(%q)\n", value); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeArgAliases(cmd *Command, w io.Writer) error {
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "    noun_aliases=()\n"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(sort.StringSlice(cmd.ArgAliases))
0000000000000000000000000000000000000000;;		for _, value := range cmd.ArgAliases {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "    noun_aliases+=(%q)\n", value); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func gen(cmd *Command, w io.Writer) error {
0000000000000000000000000000000000000000;;		for _, c := range cmd.Commands() {
0000000000000000000000000000000000000000;;			if !c.IsAvailableCommand() || c == cmd.helpCommand {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := gen(c, w); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		commandName := cmd.CommandPath()
0000000000000000000000000000000000000000;;		commandName = strings.Replace(commandName, " ", "_", -1)
0000000000000000000000000000000000000000;;		commandName = strings.Replace(commandName, ":", "__", -1)
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "_%s()\n{\n", commandName); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "    last_command=%q\n", commandName); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := writeCommands(cmd, w); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := writeFlags(cmd, w); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := writeRequiredFlag(cmd, w); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := writeRequiredNouns(cmd, w); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := writeArgAliases(cmd, w); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "}\n\n"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cmd *Command) GenBashCompletion(w io.Writer) error {
0000000000000000000000000000000000000000;;		if err := preamble(w, cmd.Name()); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(cmd.BashCompletionFunction) > 0 {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "%s\n", cmd.BashCompletionFunction); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := gen(cmd, w); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return postscript(w, cmd.Name())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cmd *Command) GenBashCompletionFile(filename string) error {
0000000000000000000000000000000000000000;;		outFile, err := os.Create(filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer outFile.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd.GenBashCompletion(outFile)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkFlagRequired adds the BashCompOneRequiredFlag annotation to the named flag, if it exists.
0000000000000000000000000000000000000000;;	func (cmd *Command) MarkFlagRequired(name string) error {
0000000000000000000000000000000000000000;;		return MarkFlagRequired(cmd.Flags(), name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkPersistentFlagRequired adds the BashCompOneRequiredFlag annotation to the named persistent flag, if it exists.
0000000000000000000000000000000000000000;;	func (cmd *Command) MarkPersistentFlagRequired(name string) error {
0000000000000000000000000000000000000000;;		return MarkFlagRequired(cmd.PersistentFlags(), name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkFlagRequired adds the BashCompOneRequiredFlag annotation to the named flag in the flag set, if it exists.
0000000000000000000000000000000000000000;;	func MarkFlagRequired(flags *pflag.FlagSet, name string) error {
0000000000000000000000000000000000000000;;		return flags.SetAnnotation(name, BashCompOneRequiredFlag, []string{"true"})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkFlagFilename adds the BashCompFilenameExt annotation to the named flag, if it exists.
0000000000000000000000000000000000000000;;	// Generated bash autocompletion will select filenames for the flag, limiting to named extensions if provided.
0000000000000000000000000000000000000000;;	func (cmd *Command) MarkFlagFilename(name string, extensions ...string) error {
0000000000000000000000000000000000000000;;		return MarkFlagFilename(cmd.Flags(), name, extensions...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkFlagCustom adds the BashCompCustom annotation to the named flag, if it exists.
0000000000000000000000000000000000000000;;	// Generated bash autocompletion will call the bash function f for the flag.
0000000000000000000000000000000000000000;;	func (cmd *Command) MarkFlagCustom(name string, f string) error {
0000000000000000000000000000000000000000;;		return MarkFlagCustom(cmd.Flags(), name, f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkPersistentFlagFilename adds the BashCompFilenameExt annotation to the named persistent flag, if it exists.
0000000000000000000000000000000000000000;;	// Generated bash autocompletion will select filenames for the flag, limiting to named extensions if provided.
0000000000000000000000000000000000000000;;	func (cmd *Command) MarkPersistentFlagFilename(name string, extensions ...string) error {
0000000000000000000000000000000000000000;;		return MarkFlagFilename(cmd.PersistentFlags(), name, extensions...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkFlagFilename adds the BashCompFilenameExt annotation to the named flag in the flag set, if it exists.
0000000000000000000000000000000000000000;;	// Generated bash autocompletion will select filenames for the flag, limiting to named extensions if provided.
0000000000000000000000000000000000000000;;	func MarkFlagFilename(flags *pflag.FlagSet, name string, extensions ...string) error {
0000000000000000000000000000000000000000;;		return flags.SetAnnotation(name, BashCompFilenameExt, extensions)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarkFlagCustom adds the BashCompCustom annotation to the named flag in the flag set, if it exists.
0000000000000000000000000000000000000000;;	// Generated bash autocompletion will call the bash function f for the flag.
0000000000000000000000000000000000000000;;	func MarkFlagCustom(flags *pflag.FlagSet, name string, f string) error {
0000000000000000000000000000000000000000;;		return flags.SetAnnotation(name, BashCompCustom, []string{f})
0000000000000000000000000000000000000000;;	}
