0000000000000000000000000000000000000000;;	//Copyright 2015 Red Hat Inc. All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
affdf614c33c923118140e05193f346bbd8037ea;Godeps/_workspace/src/github.com/spf13/cobra/md_docs.go[Godeps/_workspace/src/github.com/spf13/cobra/md_docs.go][vendor/github.com/spf13/cobra/doc/md_docs.go];	
0000000000000000000000000000000000000000;;	package doc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printOptions(w io.Writer, cmd *cobra.Command, name string) error {
0000000000000000000000000000000000000000;;		flags := cmd.NonInheritedFlags()
0000000000000000000000000000000000000000;;		flags.SetOutput(w)
0000000000000000000000000000000000000000;;		if flags.HasFlags() {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "### Options\n\n```\n"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			flags.PrintDefaults()
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "```\n\n"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parentFlags := cmd.InheritedFlags()
0000000000000000000000000000000000000000;;		parentFlags.SetOutput(w)
0000000000000000000000000000000000000000;;		if parentFlags.HasFlags() {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "### Options inherited from parent commands\n\n```\n"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			parentFlags.PrintDefaults()
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "```\n\n"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GenMarkdown(cmd *cobra.Command, w io.Writer) error {
0000000000000000000000000000000000000000;;		return GenMarkdownCustom(cmd, w, func(s string) string { return s })
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GenMarkdownCustom(cmd *cobra.Command, w io.Writer, linkHandler func(string) string) error {
0000000000000000000000000000000000000000;;		name := cmd.CommandPath()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		short := cmd.Short
0000000000000000000000000000000000000000;;		long := cmd.Long
0000000000000000000000000000000000000000;;		if len(long) == 0 {
0000000000000000000000000000000000000000;;			long = short
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "## %s\n\n", name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "%s\n\n", short); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "### Synopsis\n\n"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprintf(w, "\n%s\n\n", long); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cmd.Runnable() {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "```\n%s\n```\n\n", cmd.UseLine()); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(cmd.Example) > 0 {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "### Examples\n\n"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "```\n%s\n```\n\n", cmd.Example); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := printOptions(w, cmd, name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hasSeeAlso(cmd) {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "### SEE ALSO\n"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if cmd.HasParent() {
0000000000000000000000000000000000000000;;				parent := cmd.Parent()
0000000000000000000000000000000000000000;;				pname := parent.CommandPath()
0000000000000000000000000000000000000000;;				link := pname + ".md"
0000000000000000000000000000000000000000;;				link = strings.Replace(link, " ", "_", -1)
0000000000000000000000000000000000000000;;				if _, err := fmt.Fprintf(w, "* [%s](%s)\t - %s\n", pname, linkHandler(link), parent.Short); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				cmd.VisitParents(func(c *cobra.Command) {
0000000000000000000000000000000000000000;;					if c.DisableAutoGenTag {
0000000000000000000000000000000000000000;;						cmd.DisableAutoGenTag = c.DisableAutoGenTag
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			children := cmd.Commands()
0000000000000000000000000000000000000000;;			sort.Sort(byName(children))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, child := range children {
0000000000000000000000000000000000000000;;				if !child.IsAvailableCommand() || child.IsHelpCommand() {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				cname := name + " " + child.Name()
0000000000000000000000000000000000000000;;				link := cname + ".md"
0000000000000000000000000000000000000000;;				link = strings.Replace(link, " ", "_", -1)
0000000000000000000000000000000000000000;;				if _, err := fmt.Fprintf(w, "* [%s](%s)\t - %s\n", cname, linkHandler(link), child.Short); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "\n"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !cmd.DisableAutoGenTag {
0000000000000000000000000000000000000000;;			if _, err := fmt.Fprintf(w, "###### Auto generated by spf13/cobra on %s\n", time.Now().Format("2-Jan-2006")); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GenMarkdownTree(cmd *cobra.Command, dir string) error {
0000000000000000000000000000000000000000;;		identity := func(s string) string { return s }
0000000000000000000000000000000000000000;;		emptyStr := func(s string) string { return "" }
0000000000000000000000000000000000000000;;		return GenMarkdownTreeCustom(cmd, dir, emptyStr, identity)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GenMarkdownTreeCustom(cmd *cobra.Command, dir string, filePrepender, linkHandler func(string) string) error {
0000000000000000000000000000000000000000;;		for _, c := range cmd.Commands() {
0000000000000000000000000000000000000000;;			if !c.IsAvailableCommand() || c.IsHelpCommand() {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := GenMarkdownTreeCustom(c, dir, filePrepender, linkHandler); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		basename := strings.Replace(cmd.CommandPath(), " ", "_", -1) + ".md"
0000000000000000000000000000000000000000;;		filename := filepath.Join(dir, basename)
0000000000000000000000000000000000000000;;		f, err := os.Create(filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := io.WriteString(f, filePrepender(filename)); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := GenMarkdownCustom(cmd, f, linkHandler); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
