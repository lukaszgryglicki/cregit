0000000000000000000000000000000000000000;;	# Generating Markdown Docs For Your Own cobra.Command
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Generating man pages from a cobra command is incredibly easy. An example is as follows:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra/doc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "test",
0000000000000000000000000000000000000000;;			Short: "my test program",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		doc.GenMarkdownTree(cmd, "/tmp")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	That will get you a Markdown document `/tmp/test.md`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Generate markdown docs for the entire command tree
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This program can actually generate docs for the kubectl command in the kubernetes project
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubectlcmd "k8s.io/kubernetes/pkg/kubectl/cmd"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra/doc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		cmd := kubectlcmd.NewKubectlCommand(cmdutil.NewFactory(nil), os.Stdin, ioutil.Discard, ioutil.Discard)
0000000000000000000000000000000000000000;;		doc.GenMarkdownTree(cmd, "./")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This will generate a whole series of files, one for each command in the tree, in the directory specified (in this case "./")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Generate markdown docs for a single command
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You may wish to have more control over the output, or only generate for a single command, instead of the entire command tree. If this is the case you may prefer to `GenMarkdown` instead of `GenMarkdownTree`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;		out := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		doc.GenMarkdown(cmd, out)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This will write the markdown doc for ONLY "cmd" into the out, buffer.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Customize the output
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Both `GenMarkdown` and `GenMarkdownTree` have alternate versions with callbacks to get some control of the output:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func GenMarkdownTreeCustom(cmd *Command, dir string, filePrepender, linkHandler func(string) string) error {
0000000000000000000000000000000000000000;;		//...
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func GenMarkdownCustom(cmd *Command, out *bytes.Buffer, linkHandler func(string) string) error {
0000000000000000000000000000000000000000;;		//...
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The `filePrepender` will prepend the return value given the full filepath to the rendered Markdown file. A common use case is to add front matter to use the generated documentation with [Hugo](http://gohugo.io/):
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	const fmTemplate = `---
0000000000000000000000000000000000000000;;	date: %s
0000000000000000000000000000000000000000;;	title: "%s"
0000000000000000000000000000000000000000;;	slug: %s
0000000000000000000000000000000000000000;;	url: %s
0000000000000000000000000000000000000000;;	---
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	filePrepender := func(filename string) string {
0000000000000000000000000000000000000000;;		now := time.Now().Format(time.RFC3339)
0000000000000000000000000000000000000000;;		name := filepath.Base(filename)
0000000000000000000000000000000000000000;;		base := strings.TrimSuffix(name, path.Ext(name))
0000000000000000000000000000000000000000;;		url := "/commands/" + strings.ToLower(base) + "/"
0000000000000000000000000000000000000000;;		return fmt.Sprintf(fmTemplate, now, strings.Replace(base, "_", " ", -1), base, url)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The `linkHandler` can be used to customize the rendered internal links to the commands, given a filename:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	linkHandler := func(name string) string {
0000000000000000000000000000000000000000;;		base := strings.TrimSuffix(name, path.Ext(name))
0000000000000000000000000000000000000000;;		return "/commands/" + strings.ToLower(base) + "/"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
