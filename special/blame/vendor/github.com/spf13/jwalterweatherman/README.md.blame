0000000000000000000000000000000000000000;;	jWalterWeatherman
0000000000000000000000000000000000000000;;	=================
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Seamless printing to the terminal (stdout) and logging to a io.Writer
0000000000000000000000000000000000000000;;	(file) that’s as easy to use as fmt.Println.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	![and_that__s_why_you_always_leave_a_note_by_jonnyetc-d57q7um](https://cloud.githubusercontent.com/assets/173412/11002937/ccd01654-847d-11e5-828e-12ebaf582eaf.jpg)
0000000000000000000000000000000000000000;;	Graphic by [JonnyEtc](http://jonnyetc.deviantart.com/art/And-That-s-Why-You-Always-Leave-a-Note-315311422)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	JWW is primarily a wrapper around the excellent standard log library. It
0000000000000000000000000000000000000000;;	provides a few advantages over using the standard log library alone.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. Ready to go out of the box. 
0000000000000000000000000000000000000000;;	2. One library for both printing to the terminal and logging (to files).
0000000000000000000000000000000000000000;;	3. Really easy to log to either a temp file or a file you specify.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	I really wanted a very straightforward library that could seamlessly do
0000000000000000000000000000000000000000;;	the following things.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. Replace all the println, printf, etc statements thought my code with
0000000000000000000000000000000000000000;;	   something more useful
0000000000000000000000000000000000000000;;	2. Allow the user to easily control what levels are printed to stdout
0000000000000000000000000000000000000000;;	3. Allow the user to easily control what levels are logged
0000000000000000000000000000000000000000;;	4. Provide an easy mechanism (like fmt.Println) to print info to the user
0000000000000000000000000000000000000000;;	   which can be easily logged as well 
0000000000000000000000000000000000000000;;	5. Due to 2 & 3 provide easy verbose mode for output and logs
0000000000000000000000000000000000000000;;	6. Not have any unnecessary initialization cruft. Just use it.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Step 1. Use it
0000000000000000000000000000000000000000;;	Put calls throughout your source based on type of feedback.
0000000000000000000000000000000000000000;;	No initialization or setup needs to happen. Just start calling things.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Available Loggers are:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 * TRACE
0000000000000000000000000000000000000000;;	 * DEBUG
0000000000000000000000000000000000000000;;	 * INFO
0000000000000000000000000000000000000000;;	 * WARN
0000000000000000000000000000000000000000;;	 * ERROR
0000000000000000000000000000000000000000;;	 * CRITICAL
0000000000000000000000000000000000000000;;	 * FATAL
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	These each are loggers based on the log standard library and follow the
0000000000000000000000000000000000000000;;	standard usage. Eg..
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	    import (
0000000000000000000000000000000000000000;;	        jww "github.com/spf13/jwalterweatherman"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    ...
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if err != nil {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	        // This is a pretty serious error and the user should know about
0000000000000000000000000000000000000000;;	        // it. It will be printed to the terminal as well as logged under the
0000000000000000000000000000000000000000;;	        // default thresholds.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	        jww.ERROR.Println(err)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if err2 != nil {
0000000000000000000000000000000000000000;;	        // This error isn’t going to materially change the behavior of the
0000000000000000000000000000000000000000;;	        // application, but it’s something that may not be what the user
0000000000000000000000000000000000000000;;	        // expects. Under the default thresholds, Warn will be logged, but
0000000000000000000000000000000000000000;;	        // not printed to the terminal. 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	        jww.WARN.Println(err2)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // Information that’s relevant to what’s happening, but not very
0000000000000000000000000000000000000000;;	    // important for the user. Under the default thresholds this will be
0000000000000000000000000000000000000000;;	    // discarded.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    jww.INFO.Printf("information %q", response)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	_Why 7 levels?_
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Maybe you think that 7 levels are too much for any application... and you
0000000000000000000000000000000000000000;;	are probably correct. Just because there are seven levels doesn’t mean
0000000000000000000000000000000000000000;;	that you should be using all 7 levels. Pick the right set for your needs.
0000000000000000000000000000000000000000;;	Remember they only have to mean something to your project.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Step 2. Optionally configure JWW
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Under the default thresholds :
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 * Debug, Trace & Info goto /dev/null
0000000000000000000000000000000000000000;;	 * Warn and above is logged (when a log file/io.Writer is provided)
0000000000000000000000000000000000000000;;	 * Error and above is printed to the terminal (stdout)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Changing the thresholds
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The threshold can be changed at any time, but will only affect calls that
0000000000000000000000000000000000000000;;	execute after the change was made.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This is very useful if your application has a verbose mode. Of course you
0000000000000000000000000000000000000000;;	can decide what verbose means to you or even have multiple levels of
0000000000000000000000000000000000000000;;	verbosity.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	    import (
0000000000000000000000000000000000000000;;	        jww "github.com/spf13/jwalterweatherman"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if Verbose {
0000000000000000000000000000000000000000;;	        jww.SetLogThreshold(jww.LevelTrace)
0000000000000000000000000000000000000000;;	        jww.SetStdoutThreshold(jww.LevelInfo)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note that JWW's own internal output uses log levels as well, so set the log
0000000000000000000000000000000000000000;;	level before making any other calls if you want to see what it's up to.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Using a temp log file
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	JWW conveniently creates a temporary file and sets the log Handle to
0000000000000000000000000000000000000000;;	a io.Writer created for it. You should call this early in your application
0000000000000000000000000000000000000000;;	initialization routine as it will only log calls made after it is executed. 
0000000000000000000000000000000000000000;;	When this option is used, the library will fmt.Println where to find the
0000000000000000000000000000000000000000;;	log file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	    import (
0000000000000000000000000000000000000000;;	        jww "github.com/spf13/jwalterweatherman"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    jww.UseTempLogFile("YourAppName") 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Setting a log file
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	JWW can log to any file you provide a path to (provided it’s writable).
0000000000000000000000000000000000000000;;	Will only append to this file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	    import (
0000000000000000000000000000000000000000;;	        jww "github.com/spf13/jwalterweatherman"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    jww.SetLogFile("/path/to/logfile") 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# More information
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This is an early release. I’ve been using it for a while and this is the
0000000000000000000000000000000000000000;;	third interface I’ve tried. I like this one pretty well, but no guarantees
0000000000000000000000000000000000000000;;	that it won’t change a bit.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	I wrote this for use in [hugo](http://hugo.spf13.com). If you are looking
0000000000000000000000000000000000000000;;	for a static website engine that’s super fast please checkout Hugo.
