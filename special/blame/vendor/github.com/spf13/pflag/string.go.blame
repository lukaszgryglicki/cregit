0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/string.go[Godeps/_workspace/src/github.com/spf13/pflag/string.go][vendor/github.com/spf13/pflag/string.go];	
0000000000000000000000000000000000000000;;	// -- string Value
0000000000000000000000000000000000000000;;	type stringValue string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStringValue(val string, p *string) *stringValue {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*stringValue)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *stringValue) Set(val string) error {
0000000000000000000000000000000000000000;;		*s = stringValue(val)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (s *stringValue) Type() string {
0000000000000000000000000000000000000000;;		return "string"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *stringValue) String() string { return string(*s) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringConv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		return sval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetString return the string value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetString(name string) (string, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "string", stringConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(string), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringVar defines a string flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a string variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) StringVar(p *string, name string, value string, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newStringValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringVarP is like StringVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) StringVarP(p *string, name, shorthand string, value string, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newStringValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringVar defines a string flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a string variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func StringVar(p *string, name string, value string, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newStringValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringVarP is like StringVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func StringVarP(p *string, name, shorthand string, value string, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newStringValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String defines a string flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a string variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) String(name string, value string, usage string) *string {
0000000000000000000000000000000000000000;;		p := new(string)
0000000000000000000000000000000000000000;;		f.StringVarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringP is like String, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) StringP(name, shorthand string, value string, usage string) *string {
0000000000000000000000000000000000000000;;		p := new(string)
0000000000000000000000000000000000000000;;		f.StringVarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String defines a string flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a string variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func String(name string, value string, usage string) *string {
0000000000000000000000000000000000000000;;		return CommandLine.StringP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringP is like String, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func StringP(name, shorthand string, value string, usage string) *string {
0000000000000000000000000000000000000000;;		return CommandLine.StringP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
