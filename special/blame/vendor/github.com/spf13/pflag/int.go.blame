0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/int.go[Godeps/_workspace/src/github.com/spf13/pflag/int.go][vendor/github.com/spf13/pflag/int.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- int Value
0000000000000000000000000000000000000000;;	type intValue int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIntValue(val int, p *int) *intValue {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*intValue)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *intValue) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseInt(s, 0, 64)
0000000000000000000000000000000000000000;;		*i = intValue(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *intValue) Type() string {
0000000000000000000000000000000000000000;;		return "int"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *intValue) String() string { return strconv.Itoa(int(*i)) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func intConv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		return strconv.Atoi(sval)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetInt return the int value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetInt(name string) (int, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "int", intConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(int), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntVar defines an int flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IntVar(p *int, name string, value int, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newIntValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntVarP is like IntVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IntVarP(p *int, name, shorthand string, value int, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newIntValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntVar defines an int flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func IntVar(p *int, name string, value int, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newIntValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntVarP is like IntVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func IntVarP(p *int, name, shorthand string, value int, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newIntValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int defines an int flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int(name string, value int, usage string) *int {
0000000000000000000000000000000000000000;;		p := new(int)
0000000000000000000000000000000000000000;;		f.IntVarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntP is like Int, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IntP(name, shorthand string, value int, usage string) *int {
0000000000000000000000000000000000000000;;		p := new(int)
0000000000000000000000000000000000000000;;		f.IntVarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int defines an int flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Int(name string, value int, usage string) *int {
0000000000000000000000000000000000000000;;		return CommandLine.IntP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntP is like Int, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func IntP(name, shorthand string, value int, usage string) *int {
0000000000000000000000000000000000000000;;		return CommandLine.IntP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
