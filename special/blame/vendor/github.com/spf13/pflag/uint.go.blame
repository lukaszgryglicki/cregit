0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/uint.go[Godeps/_workspace/src/github.com/spf13/pflag/uint.go][vendor/github.com/spf13/pflag/uint.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- uint Value
0000000000000000000000000000000000000000;;	type uintValue uint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newUintValue(val uint, p *uint) *uintValue {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*uintValue)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uintValue) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(s, 0, 64)
0000000000000000000000000000000000000000;;		*i = uintValue(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uintValue) Type() string {
0000000000000000000000000000000000000000;;		return "uint"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uintValue) String() string { return strconv.FormatUint(uint64(*i), 10) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uintConv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(sval, 0, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint(v), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetUint return the uint value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetUint(name string) (uint, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "uint", uintConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(uint), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintVar defines a uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) UintVar(p *uint, name string, value uint, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUintValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintVarP is like UintVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) UintVarP(p *uint, name, shorthand string, value uint, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUintValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintVar defines a uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint  variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func UintVar(p *uint, name string, value uint, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUintValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintVarP is like UintVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func UintVarP(p *uint, name, shorthand string, value uint, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUintValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint defines a uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint  variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint(name string, value uint, usage string) *uint {
0000000000000000000000000000000000000000;;		p := new(uint)
0000000000000000000000000000000000000000;;		f.UintVarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintP is like Uint, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) UintP(name, shorthand string, value uint, usage string) *uint {
0000000000000000000000000000000000000000;;		p := new(uint)
0000000000000000000000000000000000000000;;		f.UintVarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint defines a uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint  variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Uint(name string, value uint, usage string) *uint {
0000000000000000000000000000000000000000;;		return CommandLine.UintP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintP is like Uint, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func UintP(name, shorthand string, value uint, usage string) *uint {
0000000000000000000000000000000000000000;;		return CommandLine.UintP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
