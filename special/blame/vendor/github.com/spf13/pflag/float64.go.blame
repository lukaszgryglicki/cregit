0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/float64.go[Godeps/_workspace/src/github.com/spf13/pflag/float64.go][vendor/github.com/spf13/pflag/float64.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- float64 Value
0000000000000000000000000000000000000000;;	type float64Value float64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFloat64Value(val float64, p *float64) *float64Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*float64Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *float64Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseFloat(s, 64)
0000000000000000000000000000000000000000;;		*f = float64Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *float64Value) Type() string {
0000000000000000000000000000000000000000;;		return "float64"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *float64Value) String() string { return strconv.FormatFloat(float64(*f), 'g', -1, 64) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func float64Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		return strconv.ParseFloat(sval, 64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFloat64 return the float64 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetFloat64(name string) (float64, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "float64", float64Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(float64), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64Var defines a float64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a float64 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Float64Var(p *float64, name string, value float64, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newFloat64Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64VarP is like Float64Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Float64VarP(p *float64, name, shorthand string, value float64, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newFloat64Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64Var defines a float64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a float64 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Float64Var(p *float64, name string, value float64, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newFloat64Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64VarP is like Float64Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Float64VarP(p *float64, name, shorthand string, value float64, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newFloat64Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64 defines a float64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a float64 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Float64(name string, value float64, usage string) *float64 {
0000000000000000000000000000000000000000;;		p := new(float64)
0000000000000000000000000000000000000000;;		f.Float64VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64P is like Float64, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Float64P(name, shorthand string, value float64, usage string) *float64 {
0000000000000000000000000000000000000000;;		p := new(float64)
0000000000000000000000000000000000000000;;		f.Float64VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64 defines a float64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a float64 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Float64(name string, value float64, usage string) *float64 {
0000000000000000000000000000000000000000;;		return CommandLine.Float64P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64P is like Float64, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Float64P(name, shorthand string, value float64, usage string) *float64 {
0000000000000000000000000000000000000000;;		return CommandLine.Float64P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
