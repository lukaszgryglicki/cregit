0000000000000000000000000000000000000000;;	package pflag
7a97d9072bfd4e553f690bdd2a67c515984455da;Godeps/_workspace/src/github.com/spf13/pflag/count.go[Godeps/_workspace/src/github.com/spf13/pflag/count.go][vendor/github.com/spf13/pflag/count.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- count Value
0000000000000000000000000000000000000000;;	type countValue int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newCountValue(val int, p *int) *countValue {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*countValue)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *countValue) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseInt(s, 0, 64)
0000000000000000000000000000000000000000;;		// -1 means that no specific value was passed, so increment
0000000000000000000000000000000000000000;;		if v == -1 {
0000000000000000000000000000000000000000;;			*i = countValue(*i + 1)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			*i = countValue(v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *countValue) Type() string {
0000000000000000000000000000000000000000;;		return "count"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *countValue) String() string { return strconv.Itoa(int(*i)) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func countConv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		i, err := strconv.Atoi(sval)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return i, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCount return the int value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetCount(name string) (int, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "count", countConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(int), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CountVar defines a count flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	// A count flag will add 1 to its value evey time it is found on the command line
0000000000000000000000000000000000000000;;	func (f *FlagSet) CountVar(p *int, name string, usage string) {
0000000000000000000000000000000000000000;;		f.CountVarP(p, name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CountVarP is like CountVar only take a shorthand for the flag name.
0000000000000000000000000000000000000000;;	func (f *FlagSet) CountVarP(p *int, name, shorthand string, usage string) {
0000000000000000000000000000000000000000;;		flag := f.VarPF(newCountValue(0, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;		flag.NoOptDefVal = "-1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CountVar like CountVar only the flag is placed on the CommandLine instead of a given flag set
0000000000000000000000000000000000000000;;	func CountVar(p *int, name string, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.CountVar(p, name, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CountVarP is like CountVar only take a shorthand for the flag name.
0000000000000000000000000000000000000000;;	func CountVarP(p *int, name, shorthand string, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.CountVarP(p, name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Count defines a count flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	// A count flag will add 1 to its value evey time it is found on the command line
0000000000000000000000000000000000000000;;	func (f *FlagSet) Count(name string, usage string) *int {
0000000000000000000000000000000000000000;;		p := new(int)
0000000000000000000000000000000000000000;;		f.CountVarP(p, name, "", usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CountP is like Count only takes a shorthand for the flag name.
0000000000000000000000000000000000000000;;	func (f *FlagSet) CountP(name, shorthand string, usage string) *int {
0000000000000000000000000000000000000000;;		p := new(int)
0000000000000000000000000000000000000000;;		f.CountVarP(p, name, shorthand, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Count like Count only the flag is placed on the CommandLine isntead of a given flag set
0000000000000000000000000000000000000000;;	func Count(name string, usage string) *int {
0000000000000000000000000000000000000000;;		return CommandLine.CountP(name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CountP is like Count only takes a shorthand for the flag name.
0000000000000000000000000000000000000000;;	func CountP(name, shorthand string, usage string) *int {
0000000000000000000000000000000000000000;;		return CommandLine.CountP(name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
