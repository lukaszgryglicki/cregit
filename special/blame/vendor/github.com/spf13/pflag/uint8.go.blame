0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/uint8.go[Godeps/_workspace/src/github.com/spf13/pflag/uint8.go][vendor/github.com/spf13/pflag/uint8.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- uint8 Value
0000000000000000000000000000000000000000;;	type uint8Value uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newUint8Value(val uint8, p *uint8) *uint8Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*uint8Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint8Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(s, 0, 8)
0000000000000000000000000000000000000000;;		*i = uint8Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint8Value) Type() string {
0000000000000000000000000000000000000000;;		return "uint8"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint8Value) String() string { return strconv.FormatUint(uint64(*i), 10) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uint8Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(sval, 0, 8)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint8(v), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetUint8 return the uint8 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetUint8(name string) (uint8, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "uint8", uint8Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(uint8), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint8Var defines a uint8 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint8 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint8Var(p *uint8, name string, value uint8, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUint8Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint8VarP is like Uint8Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint8VarP(p *uint8, name, shorthand string, value uint8, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUint8Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint8Var defines a uint8 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint8 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Uint8Var(p *uint8, name string, value uint8, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUint8Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint8VarP is like Uint8Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Uint8VarP(p *uint8, name, shorthand string, value uint8, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUint8Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint8 defines a uint8 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint8 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint8(name string, value uint8, usage string) *uint8 {
0000000000000000000000000000000000000000;;		p := new(uint8)
0000000000000000000000000000000000000000;;		f.Uint8VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint8P is like Uint8, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint8P(name, shorthand string, value uint8, usage string) *uint8 {
0000000000000000000000000000000000000000;;		p := new(uint8)
0000000000000000000000000000000000000000;;		f.Uint8VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint8 defines a uint8 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint8 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Uint8(name string, value uint8, usage string) *uint8 {
0000000000000000000000000000000000000000;;		return CommandLine.Uint8P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint8P is like Uint8, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Uint8P(name, shorthand string, value uint8, usage string) *uint8 {
0000000000000000000000000000000000000000;;		return CommandLine.Uint8P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
