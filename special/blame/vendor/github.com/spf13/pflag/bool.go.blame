0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/bool.go[Godeps/_workspace/src/github.com/spf13/pflag/bool.go][vendor/github.com/spf13/pflag/bool.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// optional interface to indicate boolean flags that can be
0000000000000000000000000000000000000000;;	// supplied without "=value" text
0000000000000000000000000000000000000000;;	type boolFlag interface {
0000000000000000000000000000000000000000;;		Value
0000000000000000000000000000000000000000;;		IsBoolFlag() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- bool Value
0000000000000000000000000000000000000000;;	type boolValue bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBoolValue(val bool, p *bool) *boolValue {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*boolValue)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *boolValue) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseBool(s)
0000000000000000000000000000000000000000;;		*b = boolValue(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *boolValue) Type() string {
0000000000000000000000000000000000000000;;		return "bool"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *boolValue) String() string { return strconv.FormatBool(bool(*b)) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *boolValue) IsBoolFlag() bool { return true }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func boolConv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		return strconv.ParseBool(sval)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetBool return the bool value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetBool(name string) (bool, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "bool", boolConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(bool), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolVar defines a bool flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a bool variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) BoolVar(p *bool, name string, value bool, usage string) {
0000000000000000000000000000000000000000;;		f.BoolVarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolVarP is like BoolVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) BoolVarP(p *bool, name, shorthand string, value bool, usage string) {
0000000000000000000000000000000000000000;;		flag := f.VarPF(newBoolValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;		flag.NoOptDefVal = "true"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolVar defines a bool flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a bool variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func BoolVar(p *bool, name string, value bool, usage string) {
0000000000000000000000000000000000000000;;		BoolVarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolVarP is like BoolVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func BoolVarP(p *bool, name, shorthand string, value bool, usage string) {
0000000000000000000000000000000000000000;;		flag := CommandLine.VarPF(newBoolValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;		flag.NoOptDefVal = "true"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bool defines a bool flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a bool variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Bool(name string, value bool, usage string) *bool {
0000000000000000000000000000000000000000;;		return f.BoolP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolP is like Bool, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) BoolP(name, shorthand string, value bool, usage string) *bool {
0000000000000000000000000000000000000000;;		p := new(bool)
0000000000000000000000000000000000000000;;		f.BoolVarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bool defines a bool flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a bool variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Bool(name string, value bool, usage string) *bool {
0000000000000000000000000000000000000000;;		return BoolP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolP is like Bool, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func BoolP(name, shorthand string, value bool, usage string) *bool {
0000000000000000000000000000000000000000;;		b := CommandLine.BoolP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
