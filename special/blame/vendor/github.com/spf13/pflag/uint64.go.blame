0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/uint64.go[Godeps/_workspace/src/github.com/spf13/pflag/uint64.go][vendor/github.com/spf13/pflag/uint64.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- uint64 Value
0000000000000000000000000000000000000000;;	type uint64Value uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newUint64Value(val uint64, p *uint64) *uint64Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*uint64Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint64Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(s, 0, 64)
0000000000000000000000000000000000000000;;		*i = uint64Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint64Value) Type() string {
0000000000000000000000000000000000000000;;		return "uint64"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint64Value) String() string { return strconv.FormatUint(uint64(*i), 10) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uint64Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(sval, 0, 64)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint64(v), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetUint64 return the uint64 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetUint64(name string) (uint64, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "uint64", uint64Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(uint64), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64Var defines a uint64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint64 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint64Var(p *uint64, name string, value uint64, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUint64Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64VarP is like Uint64Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint64VarP(p *uint64, name, shorthand string, value uint64, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUint64Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64Var defines a uint64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint64 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Uint64Var(p *uint64, name string, value uint64, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUint64Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64VarP is like Uint64Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Uint64VarP(p *uint64, name, shorthand string, value uint64, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUint64Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64 defines a uint64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint64 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint64(name string, value uint64, usage string) *uint64 {
0000000000000000000000000000000000000000;;		p := new(uint64)
0000000000000000000000000000000000000000;;		f.Uint64VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64P is like Uint64, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint64P(name, shorthand string, value uint64, usage string) *uint64 {
0000000000000000000000000000000000000000;;		p := new(uint64)
0000000000000000000000000000000000000000;;		f.Uint64VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64 defines a uint64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint64 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Uint64(name string, value uint64, usage string) *uint64 {
0000000000000000000000000000000000000000;;		return CommandLine.Uint64P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64P is like Uint64, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Uint64P(name, shorthand string, value uint64, usage string) *uint64 {
0000000000000000000000000000000000000000;;		return CommandLine.Uint64P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
