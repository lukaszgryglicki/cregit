0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/int32.go[Godeps/_workspace/src/github.com/spf13/pflag/int32.go][vendor/github.com/spf13/pflag/int32.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- int32 Value
0000000000000000000000000000000000000000;;	type int32Value int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInt32Value(val int32, p *int32) *int32Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*int32Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int32Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseInt(s, 0, 32)
0000000000000000000000000000000000000000;;		*i = int32Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int32Value) Type() string {
0000000000000000000000000000000000000000;;		return "int32"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int32Value) String() string { return strconv.FormatInt(int64(*i), 10) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func int32Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseInt(sval, 0, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int32(v), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetInt32 return the int32 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetInt32(name string) (int32, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "int32", int32Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(int32), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32Var defines an int32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int32 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int32Var(p *int32, name string, value int32, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newInt32Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32VarP is like Int32Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int32VarP(p *int32, name, shorthand string, value int32, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newInt32Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32Var defines an int32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int32 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Int32Var(p *int32, name string, value int32, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newInt32Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32VarP is like Int32Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Int32VarP(p *int32, name, shorthand string, value int32, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newInt32Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32 defines an int32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int32 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int32(name string, value int32, usage string) *int32 {
0000000000000000000000000000000000000000;;		p := new(int32)
0000000000000000000000000000000000000000;;		f.Int32VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32P is like Int32, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int32P(name, shorthand string, value int32, usage string) *int32 {
0000000000000000000000000000000000000000;;		p := new(int32)
0000000000000000000000000000000000000000;;		f.Int32VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32 defines an int32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int32 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Int32(name string, value int32, usage string) *int32 {
0000000000000000000000000000000000000000;;		return CommandLine.Int32P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32P is like Int32, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Int32P(name, shorthand string, value int32, usage string) *int32 {
0000000000000000000000000000000000000000;;		return CommandLine.Int32P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
