0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/duration.go[Godeps/_workspace/src/github.com/spf13/pflag/duration.go][vendor/github.com/spf13/pflag/duration.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- time.Duration Value
0000000000000000000000000000000000000000;;	type durationValue time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDurationValue(val time.Duration, p *time.Duration) *durationValue {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*durationValue)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *durationValue) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := time.ParseDuration(s)
0000000000000000000000000000000000000000;;		*d = durationValue(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *durationValue) Type() string {
0000000000000000000000000000000000000000;;		return "duration"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *durationValue) String() string { return (*time.Duration)(d).String() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func durationConv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		return time.ParseDuration(sval)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetDuration return the duration value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetDuration(name string) (time.Duration, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "duration", durationConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(time.Duration), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DurationVar defines a time.Duration flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a time.Duration variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) DurationVar(p *time.Duration, name string, value time.Duration, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newDurationValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DurationVarP is like DurationVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) DurationVarP(p *time.Duration, name, shorthand string, value time.Duration, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newDurationValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DurationVar defines a time.Duration flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a time.Duration variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func DurationVar(p *time.Duration, name string, value time.Duration, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newDurationValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DurationVarP is like DurationVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func DurationVarP(p *time.Duration, name, shorthand string, value time.Duration, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newDurationValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Duration defines a time.Duration flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a time.Duration variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Duration(name string, value time.Duration, usage string) *time.Duration {
0000000000000000000000000000000000000000;;		p := new(time.Duration)
0000000000000000000000000000000000000000;;		f.DurationVarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DurationP is like Duration, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) DurationP(name, shorthand string, value time.Duration, usage string) *time.Duration {
0000000000000000000000000000000000000000;;		p := new(time.Duration)
0000000000000000000000000000000000000000;;		f.DurationVarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Duration defines a time.Duration flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a time.Duration variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Duration(name string, value time.Duration, usage string) *time.Duration {
0000000000000000000000000000000000000000;;		return CommandLine.DurationP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DurationP is like Duration, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func DurationP(name, shorthand string, value time.Duration, usage string) *time.Duration {
0000000000000000000000000000000000000000;;		return CommandLine.DurationP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
