0000000000000000000000000000000000000000;;	package pflag
7a97d9072bfd4e553f690bdd2a67c515984455da;Godeps/_workspace/src/github.com/spf13/pflag/ipnet.go[Godeps/_workspace/src/github.com/spf13/pflag/ipnet.go][vendor/github.com/spf13/pflag/ipnet.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNet adapts net.IPNet for use as a flag.
0000000000000000000000000000000000000000;;	type ipNetValue net.IPNet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ipnet ipNetValue) String() string {
0000000000000000000000000000000000000000;;		n := net.IPNet(ipnet)
0000000000000000000000000000000000000000;;		return n.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ipnet *ipNetValue) Set(value string) error {
0000000000000000000000000000000000000000;;		_, n, err := net.ParseCIDR(strings.TrimSpace(value))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*ipnet = ipNetValue(*n)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*ipNetValue) Type() string {
0000000000000000000000000000000000000000;;		return "ipNet"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIPNetValue(val net.IPNet, p *net.IPNet) *ipNetValue {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*ipNetValue)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ipNetConv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		_, n, err := net.ParseCIDR(strings.TrimSpace(sval))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return *n, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("invalid string being converted to IPNet: %s", sval)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetIPNet return the net.IPNet value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetIPNet(name string) (net.IPNet, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "ipNet", ipNetConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return net.IPNet{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(net.IPNet), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNetVar defines an net.IPNet flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an net.IPNet variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IPNetVar(p *net.IPNet, name string, value net.IPNet, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newIPNetValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNetVarP is like IPNetVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IPNetVarP(p *net.IPNet, name, shorthand string, value net.IPNet, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newIPNetValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNetVar defines an net.IPNet flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an net.IPNet variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func IPNetVar(p *net.IPNet, name string, value net.IPNet, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newIPNetValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNetVarP is like IPNetVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func IPNetVarP(p *net.IPNet, name, shorthand string, value net.IPNet, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newIPNetValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNet defines an net.IPNet flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an net.IPNet variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IPNet(name string, value net.IPNet, usage string) *net.IPNet {
0000000000000000000000000000000000000000;;		p := new(net.IPNet)
0000000000000000000000000000000000000000;;		f.IPNetVarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNetP is like IPNet, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IPNetP(name, shorthand string, value net.IPNet, usage string) *net.IPNet {
0000000000000000000000000000000000000000;;		p := new(net.IPNet)
0000000000000000000000000000000000000000;;		f.IPNetVarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNet defines an net.IPNet flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an net.IPNet variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func IPNet(name string, value net.IPNet, usage string) *net.IPNet {
0000000000000000000000000000000000000000;;		return CommandLine.IPNetP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPNetP is like IPNet, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func IPNetP(name, shorthand string, value net.IPNet, usage string) *net.IPNet {
0000000000000000000000000000000000000000;;		return CommandLine.IPNetP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
