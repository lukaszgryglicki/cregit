0000000000000000000000000000000000000000;;	package pflag
7a97d9072bfd4e553f690bdd2a67c515984455da;Godeps/_workspace/src/github.com/spf13/pflag/int_slice.go[Godeps/_workspace/src/github.com/spf13/pflag/int_slice.go][vendor/github.com/spf13/pflag/int_slice.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- intSlice Value
0000000000000000000000000000000000000000;;	type intSliceValue struct {
0000000000000000000000000000000000000000;;		value   *[]int
0000000000000000000000000000000000000000;;		changed bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIntSliceValue(val []int, p *[]int) *intSliceValue {
0000000000000000000000000000000000000000;;		isv := new(intSliceValue)
0000000000000000000000000000000000000000;;		isv.value = p
0000000000000000000000000000000000000000;;		*isv.value = val
0000000000000000000000000000000000000000;;		return isv
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *intSliceValue) Set(val string) error {
0000000000000000000000000000000000000000;;		ss := strings.Split(val, ",")
0000000000000000000000000000000000000000;;		out := make([]int, len(ss))
0000000000000000000000000000000000000000;;		for i, d := range ss {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			out[i], err = strconv.Atoi(d)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.changed {
0000000000000000000000000000000000000000;;			*s.value = out
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			*s.value = append(*s.value, out...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.changed = true
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *intSliceValue) Type() string {
0000000000000000000000000000000000000000;;		return "intSlice"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *intSliceValue) String() string {
0000000000000000000000000000000000000000;;		out := make([]string, len(*s.value))
0000000000000000000000000000000000000000;;		for i, d := range *s.value {
0000000000000000000000000000000000000000;;			out[i] = fmt.Sprintf("%d", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "[" + strings.Join(out, ",") + "]"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func intSliceConv(val string) (interface{}, error) {
0000000000000000000000000000000000000000;;		val = strings.Trim(val, "[]")
0000000000000000000000000000000000000000;;		// Empty string would cause a slice with one (empty) entry
0000000000000000000000000000000000000000;;		if len(val) == 0 {
0000000000000000000000000000000000000000;;			return []int{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss := strings.Split(val, ",")
0000000000000000000000000000000000000000;;		out := make([]int, len(ss))
0000000000000000000000000000000000000000;;		for i, d := range ss {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			out[i], err = strconv.Atoi(d)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetIntSlice return the []int value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetIntSlice(name string) ([]int, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "intSlice", intSliceConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []int{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.([]int), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSliceVar defines a intSlice flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a []int variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IntSliceVar(p *[]int, name string, value []int, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newIntSliceValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSliceVarP is like IntSliceVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IntSliceVarP(p *[]int, name, shorthand string, value []int, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newIntSliceValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSliceVar defines a int[] flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a int[] variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func IntSliceVar(p *[]int, name string, value []int, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newIntSliceValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSliceVarP is like IntSliceVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func IntSliceVarP(p *[]int, name, shorthand string, value []int, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newIntSliceValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSlice defines a []int flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a []int variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IntSlice(name string, value []int, usage string) *[]int {
0000000000000000000000000000000000000000;;		p := []int{}
0000000000000000000000000000000000000000;;		f.IntSliceVarP(&p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return &p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSliceP is like IntSlice, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IntSliceP(name, shorthand string, value []int, usage string) *[]int {
0000000000000000000000000000000000000000;;		p := []int{}
0000000000000000000000000000000000000000;;		f.IntSliceVarP(&p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return &p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSlice defines a []int flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a []int variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func IntSlice(name string, value []int, usage string) *[]int {
0000000000000000000000000000000000000000;;		return CommandLine.IntSliceP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSliceP is like IntSlice, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func IntSliceP(name, shorthand string, value []int, usage string) *[]int {
0000000000000000000000000000000000000000;;		return CommandLine.IntSliceP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
