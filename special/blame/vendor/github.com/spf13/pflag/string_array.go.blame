0000000000000000000000000000000000000000;;	package pflag
2b72b7d90c29164ed62c746d5cc346cd7f653be0;;	
0000000000000000000000000000000000000000;;	// -- stringArray Value
0000000000000000000000000000000000000000;;	type stringArrayValue struct {
0000000000000000000000000000000000000000;;		value   *[]string
0000000000000000000000000000000000000000;;		changed bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStringArrayValue(val []string, p *[]string) *stringArrayValue {
0000000000000000000000000000000000000000;;		ssv := new(stringArrayValue)
0000000000000000000000000000000000000000;;		ssv.value = p
0000000000000000000000000000000000000000;;		*ssv.value = val
0000000000000000000000000000000000000000;;		return ssv
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *stringArrayValue) Set(val string) error {
0000000000000000000000000000000000000000;;		if !s.changed {
0000000000000000000000000000000000000000;;			*s.value = []string{val}
0000000000000000000000000000000000000000;;			s.changed = true
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			*s.value = append(*s.value, val)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *stringArrayValue) Type() string {
0000000000000000000000000000000000000000;;		return "stringArray"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *stringArrayValue) String() string {
0000000000000000000000000000000000000000;;		str, _ := writeAsCSV(*s.value)
0000000000000000000000000000000000000000;;		return "[" + str + "]"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringArrayConv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		sval = sval[1 : len(sval)-1]
0000000000000000000000000000000000000000;;		// An empty string would cause a array with one (empty) string
0000000000000000000000000000000000000000;;		if len(sval) == 0 {
0000000000000000000000000000000000000000;;			return []string{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return readAsCSV(sval)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetStringArray return the []string value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetStringArray(name string) ([]string, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "stringArray", stringArrayConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []string{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.([]string), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringArrayVar defines a string flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a []string variable in which to store the values of the multiple flags.
0000000000000000000000000000000000000000;;	// The value of each argument will not try to be separated by comma
0000000000000000000000000000000000000000;;	func (f *FlagSet) StringArrayVar(p *[]string, name string, value []string, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newStringArrayValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringArrayVarP is like StringArrayVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) StringArrayVarP(p *[]string, name, shorthand string, value []string, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newStringArrayValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringArrayVar defines a string flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a []string variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	// The value of each argument will not try to be separated by comma
0000000000000000000000000000000000000000;;	func StringArrayVar(p *[]string, name string, value []string, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newStringArrayValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringArrayVarP is like StringArrayVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func StringArrayVarP(p *[]string, name, shorthand string, value []string, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newStringArrayValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringArray defines a string flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a []string variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	// The value of each argument will not try to be separated by comma
0000000000000000000000000000000000000000;;	func (f *FlagSet) StringArray(name string, value []string, usage string) *[]string {
0000000000000000000000000000000000000000;;		p := []string{}
0000000000000000000000000000000000000000;;		f.StringArrayVarP(&p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return &p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringArrayP is like StringArray, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) StringArrayP(name, shorthand string, value []string, usage string) *[]string {
0000000000000000000000000000000000000000;;		p := []string{}
0000000000000000000000000000000000000000;;		f.StringArrayVarP(&p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return &p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringArray defines a string flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a []string variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	// The value of each argument will not try to be separated by comma
0000000000000000000000000000000000000000;;	func StringArray(name string, value []string, usage string) *[]string {
0000000000000000000000000000000000000000;;		return CommandLine.StringArrayP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringArrayP is like StringArray, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func StringArrayP(name, shorthand string, value []string, usage string) *[]string {
0000000000000000000000000000000000000000;;		return CommandLine.StringArrayP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
