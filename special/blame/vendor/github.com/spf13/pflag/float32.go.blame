0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/float32.go[Godeps/_workspace/src/github.com/spf13/pflag/float32.go][vendor/github.com/spf13/pflag/float32.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- float32 Value
0000000000000000000000000000000000000000;;	type float32Value float32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFloat32Value(val float32, p *float32) *float32Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*float32Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *float32Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseFloat(s, 32)
0000000000000000000000000000000000000000;;		*f = float32Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *float32Value) Type() string {
0000000000000000000000000000000000000000;;		return "float32"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *float32Value) String() string { return strconv.FormatFloat(float64(*f), 'g', -1, 32) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func float32Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseFloat(sval, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return float32(v), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFloat32 return the float32 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetFloat32(name string) (float32, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "float32", float32Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(float32), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32Var defines a float32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a float32 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Float32Var(p *float32, name string, value float32, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newFloat32Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32VarP is like Float32Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Float32VarP(p *float32, name, shorthand string, value float32, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newFloat32Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32Var defines a float32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a float32 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Float32Var(p *float32, name string, value float32, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newFloat32Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32VarP is like Float32Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Float32VarP(p *float32, name, shorthand string, value float32, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newFloat32Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32 defines a float32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a float32 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Float32(name string, value float32, usage string) *float32 {
0000000000000000000000000000000000000000;;		p := new(float32)
0000000000000000000000000000000000000000;;		f.Float32VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32P is like Float32, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Float32P(name, shorthand string, value float32, usage string) *float32 {
0000000000000000000000000000000000000000;;		p := new(float32)
0000000000000000000000000000000000000000;;		f.Float32VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32 defines a float32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a float32 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Float32(name string, value float32, usage string) *float32 {
0000000000000000000000000000000000000000;;		return CommandLine.Float32P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32P is like Float32, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Float32P(name, shorthand string, value float32, usage string) *float32 {
0000000000000000000000000000000000000000;;		return CommandLine.Float32P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
