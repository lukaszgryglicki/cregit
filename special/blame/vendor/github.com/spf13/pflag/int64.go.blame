0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/int64.go[Godeps/_workspace/src/github.com/spf13/pflag/int64.go][vendor/github.com/spf13/pflag/int64.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- int64 Value
0000000000000000000000000000000000000000;;	type int64Value int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInt64Value(val int64, p *int64) *int64Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*int64Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int64Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseInt(s, 0, 64)
0000000000000000000000000000000000000000;;		*i = int64Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int64Value) Type() string {
0000000000000000000000000000000000000000;;		return "int64"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int64Value) String() string { return strconv.FormatInt(int64(*i), 10) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func int64Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		return strconv.ParseInt(sval, 0, 64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetInt64 return the int64 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetInt64(name string) (int64, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "int64", int64Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(int64), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64Var defines an int64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int64 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int64Var(p *int64, name string, value int64, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newInt64Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64VarP is like Int64Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int64VarP(p *int64, name, shorthand string, value int64, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newInt64Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64Var defines an int64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int64 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Int64Var(p *int64, name string, value int64, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newInt64Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64VarP is like Int64Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Int64VarP(p *int64, name, shorthand string, value int64, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newInt64Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64 defines an int64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int64 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int64(name string, value int64, usage string) *int64 {
0000000000000000000000000000000000000000;;		p := new(int64)
0000000000000000000000000000000000000000;;		f.Int64VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64P is like Int64, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int64P(name, shorthand string, value int64, usage string) *int64 {
0000000000000000000000000000000000000000;;		p := new(int64)
0000000000000000000000000000000000000000;;		f.Int64VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64 defines an int64 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int64 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Int64(name string, value int64, usage string) *int64 {
0000000000000000000000000000000000000000;;		return CommandLine.Int64P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64P is like Int64, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Int64P(name, shorthand string, value int64, usage string) *int64 {
0000000000000000000000000000000000000000;;		return CommandLine.Int64P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
