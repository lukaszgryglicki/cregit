0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/uint16.go[Godeps/_workspace/src/github.com/spf13/pflag/uint16.go][vendor/github.com/spf13/pflag/uint16.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- uint16 value
0000000000000000000000000000000000000000;;	type uint16Value uint16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newUint16Value(val uint16, p *uint16) *uint16Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*uint16Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint16Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(s, 0, 16)
0000000000000000000000000000000000000000;;		*i = uint16Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint16Value) Type() string {
0000000000000000000000000000000000000000;;		return "uint16"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint16Value) String() string { return strconv.FormatUint(uint64(*i), 10) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uint16Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(sval, 0, 16)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint16(v), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetUint16 return the uint16 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetUint16(name string) (uint16, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "uint16", uint16Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(uint16), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint16Var defines a uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint16Var(p *uint16, name string, value uint16, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUint16Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint16VarP is like Uint16Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint16VarP(p *uint16, name, shorthand string, value uint16, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUint16Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint16Var defines a uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint  variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Uint16Var(p *uint16, name string, value uint16, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUint16Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint16VarP is like Uint16Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Uint16VarP(p *uint16, name, shorthand string, value uint16, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUint16Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint16 defines a uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint  variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint16(name string, value uint16, usage string) *uint16 {
0000000000000000000000000000000000000000;;		p := new(uint16)
0000000000000000000000000000000000000000;;		f.Uint16VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint16P is like Uint16, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint16P(name, shorthand string, value uint16, usage string) *uint16 {
0000000000000000000000000000000000000000;;		p := new(uint16)
0000000000000000000000000000000000000000;;		f.Uint16VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint16 defines a uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint  variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Uint16(name string, value uint16, usage string) *uint16 {
0000000000000000000000000000000000000000;;		return CommandLine.Uint16P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint16P is like Uint16, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Uint16P(name, shorthand string, value uint16, usage string) *uint16 {
0000000000000000000000000000000000000000;;		return CommandLine.Uint16P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
