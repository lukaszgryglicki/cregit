0000000000000000000000000000000000000000;;	package pflag
937aedc1ba701ed4ffc2a1bf689b91ab13bf9c0e;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- uintSlice Value
0000000000000000000000000000000000000000;;	type uintSliceValue struct {
0000000000000000000000000000000000000000;;		value   *[]uint
0000000000000000000000000000000000000000;;		changed bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newUintSliceValue(val []uint, p *[]uint) *uintSliceValue {
0000000000000000000000000000000000000000;;		uisv := new(uintSliceValue)
0000000000000000000000000000000000000000;;		uisv.value = p
0000000000000000000000000000000000000000;;		*uisv.value = val
0000000000000000000000000000000000000000;;		return uisv
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *uintSliceValue) Set(val string) error {
0000000000000000000000000000000000000000;;		ss := strings.Split(val, ",")
0000000000000000000000000000000000000000;;		out := make([]uint, len(ss))
0000000000000000000000000000000000000000;;		for i, d := range ss {
0000000000000000000000000000000000000000;;			u, err := strconv.ParseUint(d, 10, 0)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out[i] = uint(u)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.changed {
0000000000000000000000000000000000000000;;			*s.value = out
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			*s.value = append(*s.value, out...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.changed = true
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *uintSliceValue) Type() string {
0000000000000000000000000000000000000000;;		return "uintSlice"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *uintSliceValue) String() string {
0000000000000000000000000000000000000000;;		out := make([]string, len(*s.value))
0000000000000000000000000000000000000000;;		for i, d := range *s.value {
0000000000000000000000000000000000000000;;			out[i] = fmt.Sprintf("%d", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "[" + strings.Join(out, ",") + "]"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uintSliceConv(val string) (interface{}, error) {
0000000000000000000000000000000000000000;;		val = strings.Trim(val, "[]")
0000000000000000000000000000000000000000;;		// Empty string would cause a slice with one (empty) entry
0000000000000000000000000000000000000000;;		if len(val) == 0 {
0000000000000000000000000000000000000000;;			return []uint{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss := strings.Split(val, ",")
0000000000000000000000000000000000000000;;		out := make([]uint, len(ss))
0000000000000000000000000000000000000000;;		for i, d := range ss {
0000000000000000000000000000000000000000;;			u, err := strconv.ParseUint(d, 10, 0)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out[i] = uint(u)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetUintSlice returns the []uint value of a flag with the given name.
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetUintSlice(name string) ([]uint, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "uintSlice", uintSliceConv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []uint{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.([]uint), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSliceVar defines a uintSlice flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a []uint variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) UintSliceVar(p *[]uint, name string, value []uint, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUintSliceValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSliceVarP is like UintSliceVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) UintSliceVarP(p *[]uint, name, shorthand string, value []uint, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUintSliceValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSliceVar defines a uint[] flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint[] variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func UintSliceVar(p *[]uint, name string, value []uint, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUintSliceValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSliceVarP is like the UintSliceVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func UintSliceVarP(p *[]uint, name, shorthand string, value []uint, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUintSliceValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSlice defines a []uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a []uint variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) UintSlice(name string, value []uint, usage string) *[]uint {
0000000000000000000000000000000000000000;;		p := []uint{}
0000000000000000000000000000000000000000;;		f.UintSliceVarP(&p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return &p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSliceP is like UintSlice, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) UintSliceP(name, shorthand string, value []uint, usage string) *[]uint {
0000000000000000000000000000000000000000;;		p := []uint{}
0000000000000000000000000000000000000000;;		f.UintSliceVarP(&p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return &p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSlice defines a []uint flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a []uint variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func UintSlice(name string, value []uint, usage string) *[]uint {
0000000000000000000000000000000000000000;;		return CommandLine.UintSliceP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSliceP is like UintSlice, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func UintSliceP(name, shorthand string, value []uint, usage string) *[]uint {
0000000000000000000000000000000000000000;;		return CommandLine.UintSliceP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
