0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/uint32.go[Godeps/_workspace/src/github.com/spf13/pflag/uint32.go][vendor/github.com/spf13/pflag/uint32.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- uint32 value
0000000000000000000000000000000000000000;;	type uint32Value uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newUint32Value(val uint32, p *uint32) *uint32Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*uint32Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint32Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(s, 0, 32)
0000000000000000000000000000000000000000;;		*i = uint32Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint32Value) Type() string {
0000000000000000000000000000000000000000;;		return "uint32"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *uint32Value) String() string { return strconv.FormatUint(uint64(*i), 10) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func uint32Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseUint(sval, 0, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint32(v), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetUint32 return the uint32 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetUint32(name string) (uint32, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "uint32", uint32Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(uint32), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32Var defines a uint32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint32 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint32Var(p *uint32, name string, value uint32, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUint32Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32VarP is like Uint32Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint32VarP(p *uint32, name, shorthand string, value uint32, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newUint32Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32Var defines a uint32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to a uint32  variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Uint32Var(p *uint32, name string, value uint32, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUint32Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32VarP is like Uint32Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Uint32VarP(p *uint32, name, shorthand string, value uint32, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newUint32Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32 defines a uint32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint32  variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint32(name string, value uint32, usage string) *uint32 {
0000000000000000000000000000000000000000;;		p := new(uint32)
0000000000000000000000000000000000000000;;		f.Uint32VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32P is like Uint32, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Uint32P(name, shorthand string, value uint32, usage string) *uint32 {
0000000000000000000000000000000000000000;;		p := new(uint32)
0000000000000000000000000000000000000000;;		f.Uint32VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32 defines a uint32 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of a uint32  variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Uint32(name string, value uint32, usage string) *uint32 {
0000000000000000000000000000000000000000;;		return CommandLine.Uint32P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32P is like Uint32, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Uint32P(name, shorthand string, value uint32, usage string) *uint32 {
0000000000000000000000000000000000000000;;		return CommandLine.Uint32P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
