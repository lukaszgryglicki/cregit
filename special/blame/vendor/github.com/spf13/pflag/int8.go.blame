0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/int8.go[Godeps/_workspace/src/github.com/spf13/pflag/int8.go][vendor/github.com/spf13/pflag/int8.go];	
0000000000000000000000000000000000000000;;	import "strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- int8 Value
0000000000000000000000000000000000000000;;	type int8Value int8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInt8Value(val int8, p *int8) *int8Value {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*int8Value)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int8Value) Set(s string) error {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseInt(s, 0, 8)
0000000000000000000000000000000000000000;;		*i = int8Value(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int8Value) Type() string {
0000000000000000000000000000000000000000;;		return "int8"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *int8Value) String() string { return strconv.FormatInt(int64(*i), 10) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func int8Conv(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.ParseInt(sval, 0, 8)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int8(v), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetInt8 return the int8 value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetInt8(name string) (int8, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "int8", int8Conv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(int8), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int8Var defines an int8 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int8 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int8Var(p *int8, name string, value int8, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newInt8Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int8VarP is like Int8Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int8VarP(p *int8, name, shorthand string, value int8, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newInt8Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int8Var defines an int8 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an int8 variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func Int8Var(p *int8, name string, value int8, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newInt8Value(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int8VarP is like Int8Var, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Int8VarP(p *int8, name, shorthand string, value int8, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newInt8Value(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int8 defines an int8 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int8 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int8(name string, value int8, usage string) *int8 {
0000000000000000000000000000000000000000;;		p := new(int8)
0000000000000000000000000000000000000000;;		f.Int8VarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int8P is like Int8, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) Int8P(name, shorthand string, value int8, usage string) *int8 {
0000000000000000000000000000000000000000;;		p := new(int8)
0000000000000000000000000000000000000000;;		f.Int8VarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int8 defines an int8 flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an int8 variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func Int8(name string, value int8, usage string) *int8 {
0000000000000000000000000000000000000000;;		return CommandLine.Int8P(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int8P is like Int8, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func Int8P(name, shorthand string, value int8, usage string) *int8 {
0000000000000000000000000000000000000000;;		return CommandLine.Int8P(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
