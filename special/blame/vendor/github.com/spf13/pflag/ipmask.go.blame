0000000000000000000000000000000000000000;;	package pflag
0e1ba9a8116c18bfa1975dc7ebd4f015c258b467;Godeps/_workspace/src/github.com/spf13/pflag/ipmask.go[Godeps/_workspace/src/github.com/spf13/pflag/ipmask.go][vendor/github.com/spf13/pflag/ipmask.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// -- net.IPMask value
0000000000000000000000000000000000000000;;	type ipMaskValue net.IPMask
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIPMaskValue(val net.IPMask, p *net.IPMask) *ipMaskValue {
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return (*ipMaskValue)(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *ipMaskValue) String() string { return net.IPMask(*i).String() }
0000000000000000000000000000000000000000;;	func (i *ipMaskValue) Set(s string) error {
0000000000000000000000000000000000000000;;		ip := ParseIPv4Mask(s)
0000000000000000000000000000000000000000;;		if ip == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to parse IP mask: %q", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*i = ipMaskValue(ip)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *ipMaskValue) Type() string {
0000000000000000000000000000000000000000;;		return "ipMask"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseIPv4Mask written in IP form (e.g. 255.255.255.0).
0000000000000000000000000000000000000000;;	// This function should really belong to the net package.
0000000000000000000000000000000000000000;;	func ParseIPv4Mask(s string) net.IPMask {
0000000000000000000000000000000000000000;;		mask := net.ParseIP(s)
0000000000000000000000000000000000000000;;		if mask == nil {
0000000000000000000000000000000000000000;;			if len(s) != 8 {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// net.IPMask.String() actually outputs things like ffffff00
0000000000000000000000000000000000000000;;			// so write a horrible parser for that as well  :-(
0000000000000000000000000000000000000000;;			m := []int{}
0000000000000000000000000000000000000000;;			for i := 0; i < 4; i++ {
0000000000000000000000000000000000000000;;				b := "0x" + s[2*i:2*i+2]
0000000000000000000000000000000000000000;;				d, err := strconv.ParseInt(b, 0, 0)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				m = append(m, int(d))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s := fmt.Sprintf("%d.%d.%d.%d", m[0], m[1], m[2], m[3])
0000000000000000000000000000000000000000;;			mask = net.ParseIP(s)
0000000000000000000000000000000000000000;;			if mask == nil {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return net.IPv4Mask(mask[12], mask[13], mask[14], mask[15])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseIPv4Mask(sval string) (interface{}, error) {
0000000000000000000000000000000000000000;;		mask := ParseIPv4Mask(sval)
0000000000000000000000000000000000000000;;		if mask == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unable to parse %s as net.IPMask", sval)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return mask, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetIPv4Mask return the net.IPv4Mask value of a flag with the given name
0000000000000000000000000000000000000000;;	func (f *FlagSet) GetIPv4Mask(name string) (net.IPMask, error) {
0000000000000000000000000000000000000000;;		val, err := f.getFlagType(name, "ipMask", parseIPv4Mask)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return val.(net.IPMask), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPMaskVar defines an net.IPMask flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an net.IPMask variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IPMaskVar(p *net.IPMask, name string, value net.IPMask, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newIPMaskValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPMaskVarP is like IPMaskVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IPMaskVarP(p *net.IPMask, name, shorthand string, value net.IPMask, usage string) {
0000000000000000000000000000000000000000;;		f.VarP(newIPMaskValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPMaskVar defines an net.IPMask flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The argument p points to an net.IPMask variable in which to store the value of the flag.
0000000000000000000000000000000000000000;;	func IPMaskVar(p *net.IPMask, name string, value net.IPMask, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newIPMaskValue(value, p), name, "", usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPMaskVarP is like IPMaskVar, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func IPMaskVarP(p *net.IPMask, name, shorthand string, value net.IPMask, usage string) {
0000000000000000000000000000000000000000;;		CommandLine.VarP(newIPMaskValue(value, p), name, shorthand, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPMask defines an net.IPMask flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an net.IPMask variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IPMask(name string, value net.IPMask, usage string) *net.IPMask {
0000000000000000000000000000000000000000;;		p := new(net.IPMask)
0000000000000000000000000000000000000000;;		f.IPMaskVarP(p, name, "", value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPMaskP is like IPMask, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func (f *FlagSet) IPMaskP(name, shorthand string, value net.IPMask, usage string) *net.IPMask {
0000000000000000000000000000000000000000;;		p := new(net.IPMask)
0000000000000000000000000000000000000000;;		f.IPMaskVarP(p, name, shorthand, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPMask defines an net.IPMask flag with specified name, default value, and usage string.
0000000000000000000000000000000000000000;;	// The return value is the address of an net.IPMask variable that stores the value of the flag.
0000000000000000000000000000000000000000;;	func IPMask(name string, value net.IPMask, usage string) *net.IPMask {
0000000000000000000000000000000000000000;;		return CommandLine.IPMaskP(name, "", value, usage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPMaskP is like IP, but accepts a shorthand letter that can be used after a single dash.
0000000000000000000000000000000000000000;;	func IPMaskP(name, shorthand string, value net.IPMask, usage string) *net.IPMask {
0000000000000000000000000000000000000000;;		return CommandLine.IPMaskP(name, shorthand, value, usage)
0000000000000000000000000000000000000000;;	}
