0000000000000000000000000000000000000000;;	package afero
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The RegexpFs filters files (not directories) by regular expression. Only
0000000000000000000000000000000000000000;;	// files matching the given regexp will be allowed, all others get a ENOENT error (
0000000000000000000000000000000000000000;;	// "No such file or directory").
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	type RegexpFs struct {
0000000000000000000000000000000000000000;;		re     *regexp.Regexp
0000000000000000000000000000000000000000;;		source Fs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRegexpFs(source Fs, re *regexp.Regexp) Fs {
0000000000000000000000000000000000000000;;		return &RegexpFs{source: source, re: re}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegexpFile struct {
0000000000000000000000000000000000000000;;		f  File
0000000000000000000000000000000000000000;;		re *regexp.Regexp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) matchesName(name string) error {
0000000000000000000000000000000000000000;;		if r.re == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.re.MatchString(name) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return syscall.ENOENT
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) dirOrMatches(name string) error {
0000000000000000000000000000000000000000;;		dir, err := IsDir(r.source, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dir {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.matchesName(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Chtimes(name string, a, m time.Time) error {
0000000000000000000000000000000000000000;;		if err := r.dirOrMatches(name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.Chtimes(name, a, m)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Chmod(name string, mode os.FileMode) error {
0000000000000000000000000000000000000000;;		if err := r.dirOrMatches(name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.Chmod(name, mode)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Name() string {
0000000000000000000000000000000000000000;;		return "RegexpFs"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Stat(name string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		if err := r.dirOrMatches(name); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.Stat(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Rename(oldname, newname string) error {
0000000000000000000000000000000000000000;;		dir, err := IsDir(r.source, oldname)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dir {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := r.matchesName(oldname); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := r.matchesName(newname); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.Rename(oldname, newname)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) RemoveAll(p string) error {
0000000000000000000000000000000000000000;;		dir, err := IsDir(r.source, p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !dir {
0000000000000000000000000000000000000000;;			if err := r.matchesName(p); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.RemoveAll(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Remove(name string) error {
0000000000000000000000000000000000000000;;		if err := r.dirOrMatches(name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.Remove(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) OpenFile(name string, flag int, perm os.FileMode) (File, error) {
0000000000000000000000000000000000000000;;		if err := r.dirOrMatches(name); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.OpenFile(name, flag, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Open(name string) (File, error) {
0000000000000000000000000000000000000000;;		dir, err := IsDir(r.source, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !dir {
0000000000000000000000000000000000000000;;			if err := r.matchesName(name); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f, err := r.source.Open(name)
0000000000000000000000000000000000000000;;		return &RegexpFile{f: f, re: r.re}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Mkdir(n string, p os.FileMode) error {
0000000000000000000000000000000000000000;;		return r.source.Mkdir(n, p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) MkdirAll(n string, p os.FileMode) error {
0000000000000000000000000000000000000000;;		return r.source.MkdirAll(n, p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RegexpFs) Create(name string) (File, error) {
0000000000000000000000000000000000000000;;		if err := r.matchesName(name); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.Create(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Close() error {
0000000000000000000000000000000000000000;;		return f.f.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Read(s []byte) (int, error) {
0000000000000000000000000000000000000000;;		return f.f.Read(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) ReadAt(s []byte, o int64) (int, error) {
0000000000000000000000000000000000000000;;		return f.f.ReadAt(s, o)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Seek(o int64, w int) (int64, error) {
0000000000000000000000000000000000000000;;		return f.f.Seek(o, w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Write(s []byte) (int, error) {
0000000000000000000000000000000000000000;;		return f.f.Write(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) WriteAt(s []byte, o int64) (int, error) {
0000000000000000000000000000000000000000;;		return f.f.WriteAt(s, o)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Name() string {
0000000000000000000000000000000000000000;;		return f.f.Name()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Readdir(c int) (fi []os.FileInfo, err error) {
0000000000000000000000000000000000000000;;		var rfi []os.FileInfo
0000000000000000000000000000000000000000;;		rfi, err = f.f.Readdir(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, i := range rfi {
0000000000000000000000000000000000000000;;			if i.IsDir() || f.re.MatchString(i.Name()) {
0000000000000000000000000000000000000000;;				fi = append(fi, i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fi, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Readdirnames(c int) (n []string, err error) {
0000000000000000000000000000000000000000;;		fi, err := f.Readdir(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range fi {
0000000000000000000000000000000000000000;;			n = append(n, s.Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return n, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Stat() (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return f.f.Stat()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Sync() error {
0000000000000000000000000000000000000000;;		return f.f.Sync()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) Truncate(s int64) error {
0000000000000000000000000000000000000000;;		return f.f.Truncate(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *RegexpFile) WriteString(s string) (int, error) {
0000000000000000000000000000000000000000;;		return f.f.WriteString(s)
0000000000000000000000000000000000000000;;	}
