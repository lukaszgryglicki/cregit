0000000000000000000000000000000000000000;;	// Copyright Â© 2015 Steve Francia <spf@spf13.com>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package mem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "sort"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DirMap map[string]*FileData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m DirMap) Len() int           { return len(m) }
0000000000000000000000000000000000000000;;	func (m DirMap) Add(f *FileData)    { m[f.name] = f }
0000000000000000000000000000000000000000;;	func (m DirMap) Remove(f *FileData) { delete(m, f.name) }
0000000000000000000000000000000000000000;;	func (m DirMap) Files() (files []*FileData) {
0000000000000000000000000000000000000000;;		for _, f := range m {
0000000000000000000000000000000000000000;;			files = append(files, f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(filesSorter(files))
0000000000000000000000000000000000000000;;		return files
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// implement sort.Interface for []*FileData
0000000000000000000000000000000000000000;;	type filesSorter []*FileData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s filesSorter) Len() int           { return len(s) }
0000000000000000000000000000000000000000;;	func (s filesSorter) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	func (s filesSorter) Less(i, j int) bool { return s[i].name < s[j].name }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m DirMap) Names() (names []string) {
0000000000000000000000000000000000000000;;		for x := range m {
0000000000000000000000000000000000000000;;			names = append(names, x)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return names
0000000000000000000000000000000000000000;;	}
