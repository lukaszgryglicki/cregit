0000000000000000000000000000000000000000;;	// Copyright Â© 2014 Steve Francia <spf@spf13.com>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package afero
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type httpDir struct {
0000000000000000000000000000000000000000;;		basePath string
0000000000000000000000000000000000000000;;		fs       HttpFs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d httpDir) Open(name string) (http.File, error) {
0000000000000000000000000000000000000000;;		if filepath.Separator != '/' && strings.IndexRune(name, filepath.Separator) >= 0 ||
0000000000000000000000000000000000000000;;			strings.Contains(name, "\x00") {
0000000000000000000000000000000000000000;;			return nil, errors.New("http: invalid character in file path")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dir := string(d.basePath)
0000000000000000000000000000000000000000;;		if dir == "" {
0000000000000000000000000000000000000000;;			dir = "."
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, err := d.fs.Open(filepath.Join(dir, filepath.FromSlash(path.Clean("/"+name))))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpFs struct {
0000000000000000000000000000000000000000;;		source Fs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHttpFs(source Fs) *HttpFs {
0000000000000000000000000000000000000000;;		return &HttpFs{source: source}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Dir(s string) *httpDir {
0000000000000000000000000000000000000000;;		return &httpDir{basePath: s, fs: h}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Name() string { return "h HttpFs" }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Create(name string) (File, error) {
0000000000000000000000000000000000000000;;		return h.source.Create(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Chmod(name string, mode os.FileMode) error {
0000000000000000000000000000000000000000;;		return h.source.Chmod(name, mode)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Chtimes(name string, atime time.Time, mtime time.Time) error {
0000000000000000000000000000000000000000;;		return h.source.Chtimes(name, atime, mtime)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Mkdir(name string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		return h.source.Mkdir(name, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) MkdirAll(path string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		return h.source.MkdirAll(path, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Open(name string) (http.File, error) {
0000000000000000000000000000000000000000;;		f, err := h.source.Open(name)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			if httpfile, ok := f.(http.File); ok {
0000000000000000000000000000000000000000;;				return httpfile, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) OpenFile(name string, flag int, perm os.FileMode) (File, error) {
0000000000000000000000000000000000000000;;		return h.source.OpenFile(name, flag, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Remove(name string) error {
0000000000000000000000000000000000000000;;		return h.source.Remove(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) RemoveAll(path string) error {
0000000000000000000000000000000000000000;;		return h.source.RemoveAll(path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Rename(oldname, newname string) error {
0000000000000000000000000000000000000000;;		return h.source.Rename(oldname, newname)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HttpFs) Stat(name string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return h.source.Stat(name)
0000000000000000000000000000000000000000;;	}
