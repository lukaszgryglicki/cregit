0000000000000000000000000000000000000000;;	// Copyright Â© 2015 Jerry Jacobs <jerry.jacobs@xor-gate.org>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package afero
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/afero/sftp"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/pkg/sftp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SftpFs is a Fs implementation that uses functions provided by the sftp package.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For details in any method, check the documentation of the sftp package
0000000000000000000000000000000000000000;;	// (github.com/pkg/sftp).
0000000000000000000000000000000000000000;;	type SftpFs struct{
0000000000000000000000000000000000000000;;		SftpClient  *sftp.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Name() string { return "SftpFs" }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Create(name string) (File, error) {
0000000000000000000000000000000000000000;;		f, err := sftpfs.FileCreate(s.SftpClient, name)
0000000000000000000000000000000000000000;;		return f, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Mkdir(name string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		err := s.SftpClient.Mkdir(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.SftpClient.Chmod(name, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) MkdirAll(path string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		// Fast path: if we can tell whether path is a directory or file, stop with success or error.
0000000000000000000000000000000000000000;;		dir, err := s.Stat(path)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			if dir.IsDir() {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Slow path: make sure parent exists and then call Mkdir for path.
0000000000000000000000000000000000000000;;		i := len(path)
0000000000000000000000000000000000000000;;		for i > 0 && os.IsPathSeparator(path[i-1]) { // Skip trailing path separator.
0000000000000000000000000000000000000000;;			i--
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		j := i
0000000000000000000000000000000000000000;;		for j > 0 && !os.IsPathSeparator(path[j-1]) { // Scan backward over element.
0000000000000000000000000000000000000000;;			j--
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if j > 1 {
0000000000000000000000000000000000000000;;			// Create parent
0000000000000000000000000000000000000000;;			err = s.MkdirAll(path[0:j-1], perm)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parent now exists; invoke Mkdir and use its result.
0000000000000000000000000000000000000000;;		err = s.Mkdir(path, perm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Handle arguments like "foo/." by
0000000000000000000000000000000000000000;;			// double-checking that directory doesn't exist.
0000000000000000000000000000000000000000;;			dir, err1 := s.Lstat(path)
0000000000000000000000000000000000000000;;			if err1 == nil && dir.IsDir() {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Open(name string) (File, error) {
0000000000000000000000000000000000000000;;		f, err := sftpfs.FileOpen(s.SftpClient, name)
0000000000000000000000000000000000000000;;		return f, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) OpenFile(name string, flag int, perm os.FileMode) (File, error) {
0000000000000000000000000000000000000000;;		return nil,nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Remove(name string) error {
0000000000000000000000000000000000000000;;		return s.SftpClient.Remove(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) RemoveAll(path string) error {
0000000000000000000000000000000000000000;;		// TODO have a look at os.RemoveAll
0000000000000000000000000000000000000000;;		// https://github.com/golang/go/blob/master/src/os/path.go#L66
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Rename(oldname, newname string) error {
0000000000000000000000000000000000000000;;		return s.SftpClient.Rename(oldname, newname)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Stat(name string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return s.SftpClient.Stat(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Lstat(p string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return s.SftpClient.Lstat(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Chmod(name string, mode os.FileMode) error {
0000000000000000000000000000000000000000;;		return s.SftpClient.Chmod(name, mode)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s SftpFs) Chtimes(name string, atime time.Time, mtime time.Time) error {
0000000000000000000000000000000000000000;;		return s.SftpClient.Chtimes(name, atime, mtime)
0000000000000000000000000000000000000000;;	}
