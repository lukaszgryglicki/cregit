0000000000000000000000000000000000000000;;	package afero
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadOnlyFs struct {
0000000000000000000000000000000000000000;;		source Fs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewReadOnlyFs(source Fs) Fs {
0000000000000000000000000000000000000000;;		return &ReadOnlyFs{source: source}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) ReadDir(name string) ([]os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return ReadDir(r.source, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Chtimes(n string, a, m time.Time) error {
0000000000000000000000000000000000000000;;		return syscall.EPERM
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Chmod(n string, m os.FileMode) error {
0000000000000000000000000000000000000000;;		return syscall.EPERM
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Name() string {
0000000000000000000000000000000000000000;;		return "ReadOnlyFilter"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Stat(name string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return r.source.Stat(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Rename(o, n string) error {
0000000000000000000000000000000000000000;;		return syscall.EPERM
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) RemoveAll(p string) error {
0000000000000000000000000000000000000000;;		return syscall.EPERM
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Remove(n string) error {
0000000000000000000000000000000000000000;;		return syscall.EPERM
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) OpenFile(name string, flag int, perm os.FileMode) (File, error) {
0000000000000000000000000000000000000000;;		if flag&(os.O_WRONLY|syscall.O_RDWR|os.O_APPEND|os.O_CREATE|os.O_TRUNC) != 0 {
0000000000000000000000000000000000000000;;			return nil, syscall.EPERM
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.source.OpenFile(name, flag, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Open(n string) (File, error) {
0000000000000000000000000000000000000000;;		return r.source.Open(n)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Mkdir(n string, p os.FileMode) error {
0000000000000000000000000000000000000000;;		return syscall.EPERM
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) MkdirAll(n string, p os.FileMode) error {
0000000000000000000000000000000000000000;;		return syscall.EPERM
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ReadOnlyFs) Create(n string) (File, error) {
0000000000000000000000000000000000000000;;		return nil, syscall.EPERM
0000000000000000000000000000000000000000;;	}
