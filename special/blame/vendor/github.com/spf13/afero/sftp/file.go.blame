0000000000000000000000000000000000000000;;	// Copyright Â© 2015 Jerry Jacobs <jerry.jacobs@xor-gate.org>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package sftpfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"github.com/pkg/sftp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type File struct {
0000000000000000000000000000000000000000;;		fd *sftp.File
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FileOpen(s *sftp.Client, name string) (*File, error) {
0000000000000000000000000000000000000000;;		fd, err := s.Open(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &File{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &File{fd: fd}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FileCreate(s *sftp.Client, name string) (*File, error) {
0000000000000000000000000000000000000000;;		fd, err := s.Create(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &File{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &File{fd: fd}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) Close() error {
0000000000000000000000000000000000000000;;		return f.fd.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) Name() string {
0000000000000000000000000000000000000000;;		return f.fd.Name()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) Stat() (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return f.fd.Stat()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) Sync() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) Truncate(size int64) error {
0000000000000000000000000000000000000000;;		return f.fd.Truncate(size)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) Read(b []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		return f.fd.Read(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO
0000000000000000000000000000000000000000;;	func (f *File) ReadAt(b []byte, off int64) (n int, err error) {
0000000000000000000000000000000000000000;;		return 0,nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO
0000000000000000000000000000000000000000;;	func (f *File) Readdir(count int) (res []os.FileInfo, err error) {
0000000000000000000000000000000000000000;;		return nil,nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO
0000000000000000000000000000000000000000;;	func (f *File) Readdirnames(n int) (names []string, err error) {
0000000000000000000000000000000000000000;;		return nil,nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) Seek(offset int64, whence int) (int64, error) {
0000000000000000000000000000000000000000;;		return f.fd.Seek(offset, whence)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) Write(b []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		return f.fd.Write(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO
0000000000000000000000000000000000000000;;	func (f *File) WriteAt(b []byte, off int64) (n int, err error) {
0000000000000000000000000000000000000000;;		return 0,nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *File) WriteString(s string) (ret int, err error) {
0000000000000000000000000000000000000000;;		return f.fd.Write([]byte(s))
0000000000000000000000000000000000000000;;	}
