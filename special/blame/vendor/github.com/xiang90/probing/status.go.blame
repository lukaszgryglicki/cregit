0000000000000000000000000000000000000000;;	package probing
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/xiang90/probing/status.go[Godeps/_workspace/src/github.com/xiang90/probing/status.go][vendor/github.com/xiang90/probing/status.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// weight factor
0000000000000000000000000000000000000000;;		α = 0.125
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Status interface {
0000000000000000000000000000000000000000;;		Total() int64
0000000000000000000000000000000000000000;;		Loss() int64
0000000000000000000000000000000000000000;;		Health() bool
0000000000000000000000000000000000000000;;		Err() error
0000000000000000000000000000000000000000;;		// Estimated smoothed round trip time
0000000000000000000000000000000000000000;;		SRTT() time.Duration
0000000000000000000000000000000000000000;;		// Estimated clock difference
0000000000000000000000000000000000000000;;		ClockDiff() time.Duration
0000000000000000000000000000000000000000;;		StopNotify() <-chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type status struct {
0000000000000000000000000000000000000000;;		mu        sync.Mutex
0000000000000000000000000000000000000000;;		srtt      time.Duration
0000000000000000000000000000000000000000;;		total     int64
0000000000000000000000000000000000000000;;		loss      int64
0000000000000000000000000000000000000000;;		health    bool
0000000000000000000000000000000000000000;;		err       error
0000000000000000000000000000000000000000;;		clockdiff time.Duration
0000000000000000000000000000000000000000;;		stopC     chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SRTT = (1-α) * SRTT + α * RTT
0000000000000000000000000000000000000000;;	func (s *status) SRTT() time.Duration {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;		return s.srtt
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) Total() int64 {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;		return s.total
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) Loss() int64 {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;		return s.loss
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) Health() bool {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;		return s.health
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) Err() error {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;		return s.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) ClockDiff() time.Duration {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;		return s.clockdiff
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) StopNotify() <-chan struct{} {
0000000000000000000000000000000000000000;;		return s.stopC
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) record(rtt time.Duration, when time.Time) {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.total += 1
0000000000000000000000000000000000000000;;		s.health = true
0000000000000000000000000000000000000000;;		s.srtt = time.Duration((1-α)*float64(s.srtt) + α*float64(rtt))
0000000000000000000000000000000000000000;;		s.clockdiff = time.Now().Sub(when) - s.srtt/2
0000000000000000000000000000000000000000;;		s.err = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) recordFailure(err error) {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.total++
0000000000000000000000000000000000000000;;		s.health = false
0000000000000000000000000000000000000000;;		s.loss += 1
0000000000000000000000000000000000000000;;		s.err = err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *status) reset() {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.srtt = 0
0000000000000000000000000000000000000000;;		s.total = 0
0000000000000000000000000000000000000000;;		s.loss = 0
0000000000000000000000000000000000000000;;		s.health = false
0000000000000000000000000000000000000000;;		s.clockdiff = 0
0000000000000000000000000000000000000000;;		s.err = nil
0000000000000000000000000000000000000000;;	}
