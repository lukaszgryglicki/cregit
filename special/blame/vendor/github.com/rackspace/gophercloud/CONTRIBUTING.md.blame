0000000000000000000000000000000000000000;;	# Contributing to gophercloud
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- [Getting started](#getting-started)
0000000000000000000000000000000000000000;;	- [Tests](#tests)
0000000000000000000000000000000000000000;;	- [Style guide](#basic-style-guide)
0000000000000000000000000000000000000000;;	- [5 ways to get involved](#5-ways-to-get-involved)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Setting up your git workspace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	As a contributor you will need to setup your workspace in a slightly different
0000000000000000000000000000000000000000;;	way than just downloading it. Here are the basic installation instructions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. Configure your `$GOPATH` and run `go get` as described in the main
0000000000000000000000000000000000000000;;	[README](/README.md#how-to-install) but add `-tags "fixtures acceptance"` to
0000000000000000000000000000000000000000;;	get dependencies for unit and acceptance tests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	2. Move into the directory that houses your local repository:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```bash
0000000000000000000000000000000000000000;;	   cd ${GOPATH}/src/github.com/rackspace/gophercloud
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	3. Fork the `rackspace/gophercloud` repository and update your remote refs. You
0000000000000000000000000000000000000000;;	will need to rename the `origin` remote branch to `upstream`, and add your
0000000000000000000000000000000000000000;;	fork as `origin` instead:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```bash
0000000000000000000000000000000000000000;;	   git remote rename origin upstream
0000000000000000000000000000000000000000;;	   git remote add origin git@github.com/<my_username>/gophercloud
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	4. Checkout the latest development branch:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```bash
0000000000000000000000000000000000000000;;	   git checkout master
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	5. If you're working on something (discussed more in detail below), you will
0000000000000000000000000000000000000000;;	need to checkout a new feature branch:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```bash
0000000000000000000000000000000000000000;;	   git checkout -b my-new-feature
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Another thing to bear in mind is that you will need to add a few extra
0000000000000000000000000000000000000000;;	environment variables for acceptance tests - this is documented in our
0000000000000000000000000000000000000000;;	[acceptance tests readme](/acceptance).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	When working on a new or existing feature, testing will be the backbone of your
0000000000000000000000000000000000000000;;	work since it helps uncover and prevent regressions in the codebase. There are
0000000000000000000000000000000000000000;;	two types of test we use in gophercloud: unit tests and acceptance tests, which
0000000000000000000000000000000000000000;;	are both described below.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Unit tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unit tests are the fine-grained tests that establish and ensure the behaviour
0000000000000000000000000000000000000000;;	of individual units of functionality. We usually test on an
0000000000000000000000000000000000000000;;	operation-by-operation basis (an operation typically being an API action) with
0000000000000000000000000000000000000000;;	the use of mocking to set up explicit expectations. Each operation will set up
0000000000000000000000000000000000000000;;	its HTTP response expectation, and then test how the system responds when fed
0000000000000000000000000000000000000000;;	this controlled, pre-determined input.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To make life easier, we've introduced a bunch of test helpers to simplify the
0000000000000000000000000000000000000000;;	process of testing expectations with assertions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	  "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/testhelper"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSomething(t *testing.T) {
0000000000000000000000000000000000000000;;	  result, err := Operation()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  testhelper.AssertEquals(t, "foo", result.Bar)
0000000000000000000000000000000000000000;;	  testhelper.AssertNoErr(t, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSomethingElse(t *testing.T) {
0000000000000000000000000000000000000000;;	  testhelper.CheckEquals(t, "expected", "actual")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`AssertEquals` and `AssertNoErr` will throw a fatal error if a value does not
0000000000000000000000000000000000000000;;	match an expected value or if an error has been declared, respectively. You can
0000000000000000000000000000000000000000;;	also use `CheckEquals` and `CheckNoErr` for the same purpose; the only difference
0000000000000000000000000000000000000000;;	being that `t.Errorf` is raised rather than `t.Fatalf`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Here is a truncated example of mocked HTTP responses:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		th "github.com/rackspace/gophercloud/testhelper"
0000000000000000000000000000000000000000;;		fake "github.com/rackspace/gophercloud/testhelper/client"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		// Setup the HTTP request multiplexer and server
0000000000000000000000000000000000000000;;		th.SetupHTTP()
0000000000000000000000000000000000000000;;		defer th.TeardownHTTP()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/networks/d32019d3-bc6e-4319-9c1d-6722fc136a22", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			// Test we're using the correct HTTP method
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Test we're setting the auth token
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", fake.TokenID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Set the appropriate headers for our mocked response
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Set the HTTP body
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    "network": {
0000000000000000000000000000000000000000;;	        "status": "ACTIVE",
0000000000000000000000000000000000000000;;	        "name": "private-network",
0000000000000000000000000000000000000000;;	        "admin_state_up": true,
0000000000000000000000000000000000000000;;	        "tenant_id": "4fd44f30292945e481c7b8a0c8908869",
0000000000000000000000000000000000000000;;	        "shared": true,
0000000000000000000000000000000000000000;;	        "id": "d32019d3-bc6e-4319-9c1d-6722fc136a22"
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;				`)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Call our API operation
0000000000000000000000000000000000000000;;		network, err := Get(fake.ServiceClient(), "d32019d3-bc6e-4319-9c1d-6722fc136a22").Extract()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert no errors and equality
0000000000000000000000000000000000000000;;		th.AssertNoErr(t, err)
0000000000000000000000000000000000000000;;		th.AssertEquals(t, n.Status, "ACTIVE")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Acceptance tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	As we've already mentioned, unit tests have a very narrow and confined focus -
0000000000000000000000000000000000000000;;	they test small units of behaviour. Acceptance tests on the other hand have a
0000000000000000000000000000000000000000;;	far larger scope: they are fully functional tests that test the entire API of a
0000000000000000000000000000000000000000;;	service in one fell swoop. They don't care about unit isolation or mocking
0000000000000000000000000000000000000000;;	expectations, they instead do a full run-through and consequently test how the
0000000000000000000000000000000000000000;;	entire system _integrates_ together. When an API satisfies expectations, it
0000000000000000000000000000000000000000;;	proves by default that the requirements for a contract have been met.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Please be aware that acceptance tests will hit a live API - and may incur
0000000000000000000000000000000000000000;;	service charges from your provider. Although most tests handle their own
0000000000000000000000000000000000000000;;	teardown procedures, it is always worth manually checking that resources are
0000000000000000000000000000000000000000;;	deleted after the test suite finishes.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Running tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To run all tests:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```bash
0000000000000000000000000000000000000000;;	go test -tags fixtures ./...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To run all tests with verbose output:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```bash
0000000000000000000000000000000000000000;;	go test -v -tags fixtures ./...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To run tests that match certain [build tags]():
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```bash
0000000000000000000000000000000000000000;;	go test -tags "fixtures foo bar" ./...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To run tests for a particular sub-package:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```bash
0000000000000000000000000000000000000000;;	cd ./path/to/package && go test -tags fixtures .
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Basic style guide
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	We follow the standard formatting recommendations and language idioms set out
0000000000000000000000000000000000000000;;	in the [Effective Go](https://golang.org/doc/effective_go.html) guide. It's
0000000000000000000000000000000000000000;;	definitely worth reading - but the relevant sections are
0000000000000000000000000000000000000000;;	[formatting](https://golang.org/doc/effective_go.html#formatting)
0000000000000000000000000000000000000000;;	and [names](https://golang.org/doc/effective_go.html#names).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## 5 ways to get involved
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	There are five main ways you can get involved in our open-source project, and
0000000000000000000000000000000000000000;;	each is described briefly below. Once you've made up your mind and decided on
0000000000000000000000000000000000000000;;	your fix, you will need to follow the same basic steps that all submissions are
0000000000000000000000000000000000000000;;	required to adhere to:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. [fork](https://help.github.com/articles/fork-a-repo/) the `rackspace/gophercloud` repository
0000000000000000000000000000000000000000;;	2. checkout a [new branch](https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches)
0000000000000000000000000000000000000000;;	3. submit your branch as a [pull request](https://help.github.com/articles/creating-a-pull-request/)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### 1. Providing feedback
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	On of the easiest ways to get readily involved in our project is to let us know
0000000000000000000000000000000000000000;;	about your experiences using our SDK. Feedback like this is incredibly useful
0000000000000000000000000000000000000000;;	to us, because it allows us to refine and change features based on what our
0000000000000000000000000000000000000000;;	users want and expect of us. There are a bunch of ways to get in contact! You
0000000000000000000000000000000000000000;;	can [ping us](https://developer.rackspace.com/support/) via e-mail, talk to us on irc
0000000000000000000000000000000000000000;;	(#rackspace-dev on freenode), [tweet us](https://twitter.com/rackspace), or
0000000000000000000000000000000000000000;;	submit an issue on our [bug tracker](/issues). Things you might like to tell us
0000000000000000000000000000000000000000;;	are:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* how easy was it to start using our SDK?
0000000000000000000000000000000000000000;;	* did it meet your expectations? If not, why not?
0000000000000000000000000000000000000000;;	* did our documentation help or hinder you?
0000000000000000000000000000000000000000;;	* what could we improve in general?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### 2. Fixing bugs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you want to start fixing open bugs, we'd really appreciate that! Bug fixing
0000000000000000000000000000000000000000;;	is central to any project. The best way to get started is by heading to our
0000000000000000000000000000000000000000;;	[bug tracker](https://github.com/rackspace/gophercloud/issues) and finding open
0000000000000000000000000000000000000000;;	bugs that you think nobody is working on. It might be useful to comment on the
0000000000000000000000000000000000000000;;	thread to see the current state of the issue and if anybody has made any
0000000000000000000000000000000000000000;;	breakthroughs on it so far.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### 3. Improving documentation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	We have three forms of documentation:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* short README documents that briefly introduce a topic
0000000000000000000000000000000000000000;;	* reference documentation on [godoc.org](http://godoc.org) that is automatically
0000000000000000000000000000000000000000;;	generated from source code comments
0000000000000000000000000000000000000000;;	* user documentation on our [homepage](http://gophercloud.io) that includes
0000000000000000000000000000000000000000;;	getting started guides, installation guides and code samples
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you feel that a certain section could be improved - whether it's to clarify
0000000000000000000000000000000000000000;;	ambiguity, correct a technical mistake, or to fix a grammatical error - please
0000000000000000000000000000000000000000;;	feel entitled to do so! We welcome doc pull requests with the same childlike
0000000000000000000000000000000000000000;;	enthusiasm as any other contribution!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### 4. Optimizing existing features
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you would like to improve or optimize an existing feature, please be aware
0000000000000000000000000000000000000000;;	that we adhere to [semantic versioning](http://semver.org) - which means that
0000000000000000000000000000000000000000;;	we cannot introduce breaking changes to the API without a major version change
0000000000000000000000000000000000000000;;	(v1.x -> v2.x). Making that leap is a big step, so we encourage contributors to
0000000000000000000000000000000000000000;;	refactor rather than rewrite. Running tests will prevent regression and avoid
0000000000000000000000000000000000000000;;	the possibility of breaking somebody's current implementation.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Another tip is to keep the focus of your work as small as possible - try not to
0000000000000000000000000000000000000000;;	introduce a change that affects lots and lots of files because it introduces
0000000000000000000000000000000000000000;;	added risk and increases the cognitive load on the reviewers checking your
0000000000000000000000000000000000000000;;	work. Change-sets which are easily understood and will not negatively impact
0000000000000000000000000000000000000000;;	users are more likely to be integrated quickly.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Lastly, if you're seeking to optimize a particular operation, you should try to
0000000000000000000000000000000000000000;;	demonstrate a negative performance impact - perhaps using go's inbuilt
0000000000000000000000000000000000000000;;	[benchmark capabilities](http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### 5. Working on a new feature
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you've found something we've left out, definitely feel free to start work on
0000000000000000000000000000000000000000;;	introducing that feature. It's always useful to open an issue or submit a pull
0000000000000000000000000000000000000000;;	request early on to indicate your intent to a core contributor - this enables
0000000000000000000000000000000000000000;;	quick/early feedback and can help steer you in the right direction by avoiding
0000000000000000000000000000000000000000;;	known issues. It might also help you avoid losing time implementing something
0000000000000000000000000000000000000000;;	that might not ever work. One tip is to prefix your Pull Request issue title
0000000000000000000000000000000000000000;;	with [wip] - then people know it's a work in progress.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You must ensure that all of your work is well tested - both in terms of unit
0000000000000000000000000000000000000000;;	and acceptance tests. Untested code will not be merged because it introduces
0000000000000000000000000000000000000000;;	too much of a risk to end-users.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Happy hacking!
