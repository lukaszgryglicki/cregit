0000000000000000000000000000000000000000;;	package testhelper
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/testhelper/http_responses.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/testhelper/http_responses.go][vendor/github.com/rackspace/gophercloud/testhelper/http_responses.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// Mux is a multiplexer that can be used to register handlers.
0000000000000000000000000000000000000000;;		Mux *http.ServeMux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Server is an in-memory HTTP server for testing.
0000000000000000000000000000000000000000;;		Server *httptest.Server
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetupHTTP prepares the Mux and Server.
0000000000000000000000000000000000000000;;	func SetupHTTP() {
0000000000000000000000000000000000000000;;		Mux = http.NewServeMux()
0000000000000000000000000000000000000000;;		Server = httptest.NewServer(Mux)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TeardownHTTP releases HTTP-related resources.
0000000000000000000000000000000000000000;;	func TeardownHTTP() {
0000000000000000000000000000000000000000;;		Server.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Endpoint returns a fake endpoint that will actually target the Mux.
0000000000000000000000000000000000000000;;	func Endpoint() string {
0000000000000000000000000000000000000000;;		return Server.URL + "/"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestFormValues ensures that all the URL parameters given to the http.Request are the same as values.
0000000000000000000000000000000000000000;;	func TestFormValues(t *testing.T, r *http.Request, values map[string]string) {
0000000000000000000000000000000000000000;;		want := url.Values{}
0000000000000000000000000000000000000000;;		for k, v := range values {
0000000000000000000000000000000000000000;;			want.Add(k, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.ParseForm()
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(want, r.Form) {
0000000000000000000000000000000000000000;;			t.Errorf("Request parameters = %v, want %v", r.Form, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestMethod checks that the Request has the expected method (e.g. GET, POST).
0000000000000000000000000000000000000000;;	func TestMethod(t *testing.T, r *http.Request, expected string) {
0000000000000000000000000000000000000000;;		if expected != r.Method {
0000000000000000000000000000000000000000;;			t.Errorf("Request method = %v, expected %v", r.Method, expected)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestHeader checks that the header on the http.Request matches the expected value.
0000000000000000000000000000000000000000;;	func TestHeader(t *testing.T, r *http.Request, header string, expected string) {
0000000000000000000000000000000000000000;;		if actual := r.Header.Get(header); expected != actual {
0000000000000000000000000000000000000000;;			t.Errorf("Header %s = %s, expected %s", header, actual, expected)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestBody verifies that the request body matches an expected body.
0000000000000000000000000000000000000000;;	func TestBody(t *testing.T, r *http.Request, expected string) {
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to read body: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		str := string(b)
0000000000000000000000000000000000000000;;		if expected != str {
0000000000000000000000000000000000000000;;			t.Errorf("Body = %s, expected %s", str, expected)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestJSONRequest verifies that the JSON payload of a request matches an expected structure, without asserting things about
0000000000000000000000000000000000000000;;	// whitespace or ordering.
0000000000000000000000000000000000000000;;	func TestJSONRequest(t *testing.T, r *http.Request, expected string) {
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to read request body: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var actualJSON interface{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(b, &actualJSON)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to parse request body as JSON: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CheckJSONEquals(t, expected, actualJSON)
0000000000000000000000000000000000000000;;	}
