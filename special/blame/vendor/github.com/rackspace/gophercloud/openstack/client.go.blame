0000000000000000000000000000000000000000;;	package openstack
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/client.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/client.go][vendor/github.com/rackspace/gophercloud/openstack/client.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		tokens2 "github.com/rackspace/gophercloud/openstack/identity/v2/tokens"
0000000000000000000000000000000000000000;;		tokens3 "github.com/rackspace/gophercloud/openstack/identity/v3/tokens"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/openstack/utils"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		v20 = "v2.0"
0000000000000000000000000000000000000000;;		v30 = "v3.0"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClient prepares an unauthenticated ProviderClient instance.
0000000000000000000000000000000000000000;;	// Most users will probably prefer using the AuthenticatedClient function instead.
0000000000000000000000000000000000000000;;	// This is useful if you wish to explicitly control the version of the identity service that's used for authentication explicitly,
0000000000000000000000000000000000000000;;	// for example.
0000000000000000000000000000000000000000;;	func NewClient(endpoint string) (*gophercloud.ProviderClient, error) {
0000000000000000000000000000000000000000;;		u, err := url.Parse(endpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u.RawQuery, u.Fragment = "", ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Base is url with path
0000000000000000000000000000000000000000;;		endpoint = gophercloud.NormalizeURL(endpoint)
0000000000000000000000000000000000000000;;		base := gophercloud.NormalizeURL(u.String())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		path := u.Path
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(path, "/") {
0000000000000000000000000000000000000000;;			path = path + "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parts := strings.Split(path[0:len(path)-1], "/")
0000000000000000000000000000000000000000;;		for index, version := range parts {
0000000000000000000000000000000000000000;;			if 2 <= len(version) && len(version) <= 4 && strings.HasPrefix(version, "v") {
0000000000000000000000000000000000000000;;				_, err := strconv.ParseFloat(version[1:], 64)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					// post version suffixes in path are not supported
0000000000000000000000000000000000000000;;					// version must be on the last index
0000000000000000000000000000000000000000;;					if index < len(parts)-1 {
0000000000000000000000000000000000000000;;						return nil, fmt.Errorf("Path suffixes (after version) are not supported.")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					switch version {
0000000000000000000000000000000000000000;;					case "v2.0", "v3":
0000000000000000000000000000000000000000;;						// valid version found, strip from base
0000000000000000000000000000000000000000;;						return &gophercloud.ProviderClient{
0000000000000000000000000000000000000000;;							IdentityBase:     base[0 : len(base)-len(version)-1],
0000000000000000000000000000000000000000;;							IdentityEndpoint: endpoint,
0000000000000000000000000000000000000000;;						}, nil
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						return nil, fmt.Errorf("Invalid identity endpoint version %v. Supported versions: v2.0, v3", version)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ProviderClient{
0000000000000000000000000000000000000000;;			IdentityBase:     base,
0000000000000000000000000000000000000000;;			IdentityEndpoint: "",
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatedClient logs in to an OpenStack cloud found at the identity endpoint specified by options, acquires a token, and
0000000000000000000000000000000000000000;;	// returns a Client instance that's ready to operate.
0000000000000000000000000000000000000000;;	// It first queries the root identity endpoint to determine which versions of the identity service are supported, then chooses
0000000000000000000000000000000000000000;;	// the most recent identity service available to proceed.
0000000000000000000000000000000000000000;;	func AuthenticatedClient(options gophercloud.AuthOptions) (*gophercloud.ProviderClient, error) {
0000000000000000000000000000000000000000;;		client, err := NewClient(options.IdentityEndpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = Authenticate(client, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authenticate or re-authenticate against the most recent identity service supported at the provided endpoint.
0000000000000000000000000000000000000000;;	func Authenticate(client *gophercloud.ProviderClient, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		versions := []*utils.Version{
0000000000000000000000000000000000000000;;			{ID: v20, Priority: 20, Suffix: "/v2.0/"},
0000000000000000000000000000000000000000;;			{ID: v30, Priority: 30, Suffix: "/v3/"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		chosen, endpoint, err := utils.ChooseVersion(client, versions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch chosen.ID {
0000000000000000000000000000000000000000;;		case v20:
0000000000000000000000000000000000000000;;			return v2auth(client, endpoint, options)
0000000000000000000000000000000000000000;;		case v30:
0000000000000000000000000000000000000000;;			return v3auth(client, endpoint, options)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// The switch statement must be out of date from the versions list.
0000000000000000000000000000000000000000;;			return fmt.Errorf("Unrecognized identity version: %s", chosen.ID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateV2 explicitly authenticates against the identity v2 endpoint.
0000000000000000000000000000000000000000;;	func AuthenticateV2(client *gophercloud.ProviderClient, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		return v2auth(client, "", options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func v2auth(client *gophercloud.ProviderClient, endpoint string, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		v2Client := NewIdentityV2(client)
0000000000000000000000000000000000000000;;		if endpoint != "" {
0000000000000000000000000000000000000000;;			v2Client.Endpoint = endpoint
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := tokens2.Create(v2Client, tokens2.AuthOptions{AuthOptions: options})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		token, err := result.ExtractToken()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		catalog, err := result.ExtractServiceCatalog()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.AllowReauth {
0000000000000000000000000000000000000000;;			client.ReauthFunc = func() error {
0000000000000000000000000000000000000000;;				client.TokenID = ""
0000000000000000000000000000000000000000;;				return v2auth(client, endpoint, options)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.TokenID = token.ID
0000000000000000000000000000000000000000;;		client.EndpointLocator = func(opts gophercloud.EndpointOpts) (string, error) {
0000000000000000000000000000000000000000;;			return V2EndpointURL(catalog, opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateV3 explicitly authenticates against the identity v3 service.
0000000000000000000000000000000000000000;;	func AuthenticateV3(client *gophercloud.ProviderClient, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		return v3auth(client, "", options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func v3auth(client *gophercloud.ProviderClient, endpoint string, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		// Override the generated service endpoint with the one returned by the version endpoint.
0000000000000000000000000000000000000000;;		v3Client := NewIdentityV3(client)
0000000000000000000000000000000000000000;;		if endpoint != "" {
0000000000000000000000000000000000000000;;			v3Client.Endpoint = endpoint
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// copy the auth options to a local variable that we can change. `options`
0000000000000000000000000000000000000000;;		// needs to stay as-is for reauth purposes
0000000000000000000000000000000000000000;;		v3Options := options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var scope *tokens3.Scope
0000000000000000000000000000000000000000;;		if options.TenantID != "" {
0000000000000000000000000000000000000000;;			scope = &tokens3.Scope{
0000000000000000000000000000000000000000;;				ProjectID: options.TenantID,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v3Options.TenantID = ""
0000000000000000000000000000000000000000;;			v3Options.TenantName = ""
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if options.TenantName != "" {
0000000000000000000000000000000000000000;;				scope = &tokens3.Scope{
0000000000000000000000000000000000000000;;					ProjectName: options.TenantName,
0000000000000000000000000000000000000000;;					DomainID:    options.DomainID,
0000000000000000000000000000000000000000;;					DomainName:  options.DomainName,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				v3Options.TenantName = ""
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := tokens3.Create(v3Client, tokens3.AuthOptions{AuthOptions: v3Options}, scope)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		token, err := result.ExtractToken()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		catalog, err := result.ExtractServiceCatalog()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client.TokenID = token.ID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.AllowReauth {
0000000000000000000000000000000000000000;;			client.ReauthFunc = func() error {
0000000000000000000000000000000000000000;;				client.TokenID = ""
0000000000000000000000000000000000000000;;				return v3auth(client, endpoint, options)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.EndpointLocator = func(opts gophercloud.EndpointOpts) (string, error) {
0000000000000000000000000000000000000000;;			return V3EndpointURL(catalog, opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIdentityV2 creates a ServiceClient that may be used to interact with the v2 identity service.
0000000000000000000000000000000000000000;;	func NewIdentityV2(client *gophercloud.ProviderClient) *gophercloud.ServiceClient {
0000000000000000000000000000000000000000;;		v2Endpoint := client.IdentityBase + "v2.0/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{
0000000000000000000000000000000000000000;;			ProviderClient: client,
0000000000000000000000000000000000000000;;			Endpoint:       v2Endpoint,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIdentityV3 creates a ServiceClient that may be used to access the v3 identity service.
0000000000000000000000000000000000000000;;	func NewIdentityV3(client *gophercloud.ProviderClient) *gophercloud.ServiceClient {
0000000000000000000000000000000000000000;;		v3Endpoint := client.IdentityBase + "v3/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{
0000000000000000000000000000000000000000;;			ProviderClient: client,
0000000000000000000000000000000000000000;;			Endpoint:       v3Endpoint,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewIdentityAdminV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("identity")
0000000000000000000000000000000000000000;;		eo.Availability = gophercloud.AvailabilityAdmin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Force using v2 API
0000000000000000000000000000000000000000;;		if strings.Contains(url, "/v3") {
0000000000000000000000000000000000000000;;			url = strings.Replace(url, "/v3", "/v2.0", -1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewIdentityAdminV3(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("identity")
0000000000000000000000000000000000000000;;		eo.Availability = gophercloud.AvailabilityAdmin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Force using v3 API
0000000000000000000000000000000000000000;;		if strings.Contains(url, "/v2.0") {
0000000000000000000000000000000000000000;;			url = strings.Replace(url, "/v2.0", "/v3", -1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewObjectStorageV1 creates a ServiceClient that may be used with the v1 object storage package.
0000000000000000000000000000000000000000;;	func NewObjectStorageV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("object-store")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewComputeV2 creates a ServiceClient that may be used with the v2 compute package.
0000000000000000000000000000000000000000;;	func NewComputeV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("compute")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNetworkV2 creates a ServiceClient that may be used with the v2 network package.
0000000000000000000000000000000000000000;;	func NewNetworkV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("network")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{
0000000000000000000000000000000000000000;;			ProviderClient: client,
0000000000000000000000000000000000000000;;			Endpoint:       url,
0000000000000000000000000000000000000000;;			ResourceBase:   url + "v2.0/",
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBlockStorageV1 creates a ServiceClient that may be used to access the v1 block storage service.
0000000000000000000000000000000000000000;;	func NewBlockStorageV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("volume")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBlockStorageV2 creates a ServiceClient that may be used to access the v2 block storage service.
0000000000000000000000000000000000000000;;	func NewBlockStorageV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("volumev2")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCDNV1 creates a ServiceClient that may be used to access the OpenStack v1
0000000000000000000000000000000000000000;;	// CDN service.
0000000000000000000000000000000000000000;;	func NewCDNV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("cdn")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewOrchestrationV1 creates a ServiceClient that may be used to access the v1 orchestration service.
0000000000000000000000000000000000000000;;	func NewOrchestrationV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("orchestration")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDBV1 creates a ServiceClient that may be used to access the v1 DB service.
0000000000000000000000000000000000000000;;	func NewDBV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("database")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewImageServiceV2 creates a ServiceClient that may be used to access the v2 image service.
0000000000000000000000000000000000000000;;	func NewImageServiceV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("image")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client,
0000000000000000000000000000000000000000;;			Endpoint:     url,
0000000000000000000000000000000000000000;;			ResourceBase: url + "v2/"}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTelemetryV2 creates a ServiceClient that may be used to access the v2 telemetry service.
0000000000000000000000000000000000000000;;	func NewTelemetryV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("metering")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
