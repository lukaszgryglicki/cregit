0000000000000000000000000000000000000000;;	package volumes
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes/requests.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes/requests.go][vendor/github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes/requests.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// Create request.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVolumeCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts contains options for creating a Volume. This object is passed to
0000000000000000000000000000000000000000;;	// the volumes.Create function. For more information about these parameters,
0000000000000000000000000000000000000000;;	// see the Volume object.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Availability string
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Metadata map[string]string
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// REQUIRED
0000000000000000000000000000000000000000;;		Size int
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		SnapshotID, SourceVolID, ImageID string
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		VolumeType string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVolumeCreateMap assembles a request body based on the contents of a
0000000000000000000000000000000000000000;;	// CreateOpts.
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToVolumeCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		v := make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.Size == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Required CreateOpts field 'Size' not set.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v["size"] = opts.Size
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.Availability != "" {
0000000000000000000000000000000000000000;;			v["availability_zone"] = opts.Availability
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.Description != "" {
0000000000000000000000000000000000000000;;			v["display_description"] = opts.Description
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.ImageID != "" {
0000000000000000000000000000000000000000;;			v["imageRef"] = opts.ImageID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.Metadata != nil {
0000000000000000000000000000000000000000;;			v["metadata"] = opts.Metadata
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.Name != "" {
0000000000000000000000000000000000000000;;			v["display_name"] = opts.Name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.SourceVolID != "" {
0000000000000000000000000000000000000000;;			v["source_volid"] = opts.SourceVolID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.SnapshotID != "" {
0000000000000000000000000000000000000000;;			v["snapshot_id"] = opts.SnapshotID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.VolumeType != "" {
0000000000000000000000000000000000000000;;			v["volume_type"] = opts.VolumeType
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return map[string]interface{}{"volume": v}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create will create a new Volume based on the values in CreateOpts. To extract
0000000000000000000000000000000000000000;;	// the Volume object from the response, call the Extract method on the
0000000000000000000000000000000000000000;;	// CreateResult.
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, opts CreateOptsBuilder) CreateResult {
0000000000000000000000000000000000000000;;		var res CreateResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqBody, err := opts.ToVolumeCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			res.Err = err
0000000000000000000000000000000000000000;;			return res
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, res.Err = client.Post(createURL(client), reqBody, &res.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 201},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will delete the existing Volume with the provided ID.
0000000000000000000000000000000000000000;;	func Delete(client *gophercloud.ServiceClient, id string) DeleteResult {
0000000000000000000000000000000000000000;;		var res DeleteResult
0000000000000000000000000000000000000000;;		_, res.Err = client.Delete(deleteURL(client, id), nil)
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the Volume with the provided ID. To extract the Volume object
0000000000000000000000000000000000000000;;	// from the response, call the Extract method on the GetResult.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, id string) GetResult {
0000000000000000000000000000000000000000;;		var res GetResult
0000000000000000000000000000000000000000;;		_, res.Err = client.Get(getURL(client, id), &res.Body, nil)
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the List
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVolumeListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts holds options for listing Volumes. It is passed to the volumes.List
0000000000000000000000000000000000000000;;	// function.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		// admin-only option. Set it to true to see all tenant volumes.
0000000000000000000000000000000000000000;;		AllTenants bool `q:"all_tenants"`
0000000000000000000000000000000000000000;;		// List only volumes that contain Metadata.
0000000000000000000000000000000000000000;;		Metadata map[string]string `q:"metadata"`
0000000000000000000000000000000000000000;;		// List only volumes that have Name as the display name.
0000000000000000000000000000000000000000;;		Name string `q:"name"`
0000000000000000000000000000000000000000;;		// List only volumes that have a status of Status.
0000000000000000000000000000000000000000;;		Status string `q:"status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVolumeListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToVolumeListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return q.String(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns Volumes optionally limited by the conditions provided in ListOpts.
0000000000000000000000000000000000000000;;	func List(client *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listURL(client)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToVolumeListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		createPage := func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return ListResult{pagination.SinglePageBase(r)}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, url, createPage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// Update request.
0000000000000000000000000000000000000000;;	type UpdateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVolumeUpdateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contain options for updating an existing Volume. This object is passed
0000000000000000000000000000000000000000;;	// to the volumes.Update function. For more information about the parameters, see
0000000000000000000000000000000000000000;;	// the Volume object.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Metadata map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVolumeUpdateMap assembles a request body based on the contents of an
0000000000000000000000000000000000000000;;	// UpdateOpts.
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToVolumeUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		v := make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.Description != "" {
0000000000000000000000000000000000000000;;			v["display_description"] = opts.Description
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.Metadata != nil {
0000000000000000000000000000000000000000;;			v["metadata"] = opts.Metadata
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.Name != "" {
0000000000000000000000000000000000000000;;			v["display_name"] = opts.Name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return map[string]interface{}{"volume": v}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update will update the Volume with provided information. To extract the updated
0000000000000000000000000000000000000000;;	// Volume from the response, call the Extract method on the UpdateResult.
0000000000000000000000000000000000000000;;	func Update(client *gophercloud.ServiceClient, id string, opts UpdateOptsBuilder) UpdateResult {
0000000000000000000000000000000000000000;;		var res UpdateResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqBody, err := opts.ToVolumeUpdateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			res.Err = err
0000000000000000000000000000000000000000;;			return res
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, res.Err = client.Put(updateURL(client, id), reqBody, &res.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convienience function that returns a server's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		volumeCount := 0
0000000000000000000000000000000000000000;;		volumeID := ""
0000000000000000000000000000000000000000;;		if name == "" {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("A volume name must be provided.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pager := List(client, nil)
0000000000000000000000000000000000000000;;		pager.EachPage(func(page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;			volumeList, err := ExtractVolumes(page)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, s := range volumeList {
0000000000000000000000000000000000000000;;				if s.Name == name {
0000000000000000000000000000000000000000;;					volumeCount++
0000000000000000000000000000000000000000;;					volumeID = s.ID
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch volumeCount {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Unable to find volume: %s", name)
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return volumeID, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Found %d volumes matching %s", volumeCount, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
