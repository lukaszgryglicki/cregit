0000000000000000000000000000000000000000;;	package volumes
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes/results.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes/results.go][vendor/github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes/results.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/mitchellh/mapstructure"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Volume contains all the information associated with an OpenStack Volume.
0000000000000000000000000000000000000000;;	type Volume struct {
0000000000000000000000000000000000000000;;		// Current status of the volume.
0000000000000000000000000000000000000000;;		Status string `mapstructure:"status"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Human-readable display name for the volume.
0000000000000000000000000000000000000000;;		Name string `mapstructure:"display_name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Instances onto which the volume is attached.
0000000000000000000000000000000000000000;;		Attachments []map[string]interface{} `mapstructure:"attachments"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This parameter is no longer used.
0000000000000000000000000000000000000000;;		AvailabilityZone string `mapstructure:"availability_zone"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this is a bootable volume.
0000000000000000000000000000000000000000;;		Bootable string `mapstructure:"bootable"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date when this volume was created.
0000000000000000000000000000000000000000;;		CreatedAt string `mapstructure:"created_at"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Human-readable description for the volume.
0000000000000000000000000000000000000000;;		Description string `mapstructure:"display_description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of volume to create, either SATA or SSD.
0000000000000000000000000000000000000000;;		VolumeType string `mapstructure:"volume_type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the snapshot from which the volume was created
0000000000000000000000000000000000000000;;		SnapshotID string `mapstructure:"snapshot_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of another block storage volume from which the current volume was created
0000000000000000000000000000000000000000;;		SourceVolID string `mapstructure:"source_volid"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Arbitrary key-value pairs defined by the user.
0000000000000000000000000000000000000000;;		Metadata map[string]string `mapstructure:"metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique identifier for the volume.
0000000000000000000000000000000000000000;;		ID string `mapstructure:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Size of the volume in GB.
0000000000000000000000000000000000000000;;		Size int `mapstructure:"size"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult contains the response body and error from a Create request.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult contains the response body and error from a Get request.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResult contains the response body and error from a Delete request.
0000000000000000000000000000000000000000;;	type DeleteResult struct {
0000000000000000000000000000000000000000;;		gophercloud.ErrResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResult is a pagination.pager that is returned from a call to the List function.
0000000000000000000000000000000000000000;;	type ListResult struct {
0000000000000000000000000000000000000000;;		pagination.SinglePageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty returns true if a ListResult contains no Volumes.
0000000000000000000000000000000000000000;;	func (r ListResult) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		volumes, err := ExtractVolumes(r)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return true, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(volumes) == 0, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractVolumes extracts and returns Volumes. It is used while iterating over a volumes.List call.
0000000000000000000000000000000000000000;;	func ExtractVolumes(page pagination.Page) ([]Volume, error) {
0000000000000000000000000000000000000000;;		var response struct {
0000000000000000000000000000000000000000;;			Volumes []Volume `json:"volumes"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(page.(ListResult).Body, &response)
0000000000000000000000000000000000000000;;		return response.Volumes, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult contains the response body and error from an Update request.
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract will get the Volume object out of the commonResult object.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Volume, error) {
0000000000000000000000000000000000000000;;		if r.Err != nil {
0000000000000000000000000000000000000000;;			return nil, r.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var res struct {
0000000000000000000000000000000000000000;;			Volume *Volume `json:"volume"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(r.Body, &res)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Volume, err
0000000000000000000000000000000000000000;;	}
