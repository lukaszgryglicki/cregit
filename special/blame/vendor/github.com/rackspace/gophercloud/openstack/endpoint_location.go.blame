0000000000000000000000000000000000000000;;	package openstack
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/endpoint_location.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/endpoint_location.go][vendor/github.com/rackspace/gophercloud/openstack/endpoint_location.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		tokens2 "github.com/rackspace/gophercloud/openstack/identity/v2/tokens"
0000000000000000000000000000000000000000;;		tokens3 "github.com/rackspace/gophercloud/openstack/identity/v3/tokens"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// V2EndpointURL discovers the endpoint URL for a specific service from a ServiceCatalog acquired
0000000000000000000000000000000000000000;;	// during the v2 identity service. The specified EndpointOpts are used to identify a unique,
0000000000000000000000000000000000000000;;	// unambiguous endpoint to return. It's an error both when multiple endpoints match the provided
0000000000000000000000000000000000000000;;	// criteria and when none do. The minimum that can be specified is a Type, but you will also often
0000000000000000000000000000000000000000;;	// need to specify a Name and/or a Region depending on what's available on your OpenStack
0000000000000000000000000000000000000000;;	// deployment.
0000000000000000000000000000000000000000;;	func V2EndpointURL(catalog *tokens2.ServiceCatalog, opts gophercloud.EndpointOpts) (string, error) {
0000000000000000000000000000000000000000;;		// Extract Endpoints from the catalog entries that match the requested Type, Name if provided, and Region if provided.
0000000000000000000000000000000000000000;;		var endpoints = make([]tokens2.Endpoint, 0, 1)
0000000000000000000000000000000000000000;;		for _, entry := range catalog.Entries {
0000000000000000000000000000000000000000;;			if (entry.Type == opts.Type) && (opts.Name == "" || entry.Name == opts.Name) {
0000000000000000000000000000000000000000;;				for _, endpoint := range entry.Endpoints {
0000000000000000000000000000000000000000;;					if opts.Region == "" || endpoint.Region == opts.Region {
0000000000000000000000000000000000000000;;						endpoints = append(endpoints, endpoint)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Report an error if the options were ambiguous.
0000000000000000000000000000000000000000;;		if len(endpoints) > 1 {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Discovered %d matching endpoints: %#v", len(endpoints), endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Extract the appropriate URL from the matching Endpoint.
0000000000000000000000000000000000000000;;		for _, endpoint := range endpoints {
0000000000000000000000000000000000000000;;			switch opts.Availability {
0000000000000000000000000000000000000000;;			case gophercloud.AvailabilityPublic:
0000000000000000000000000000000000000000;;				return gophercloud.NormalizeURL(endpoint.PublicURL), nil
0000000000000000000000000000000000000000;;			case gophercloud.AvailabilityInternal:
0000000000000000000000000000000000000000;;				return gophercloud.NormalizeURL(endpoint.InternalURL), nil
0000000000000000000000000000000000000000;;			case gophercloud.AvailabilityAdmin:
0000000000000000000000000000000000000000;;				return gophercloud.NormalizeURL(endpoint.AdminURL), nil
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("Unexpected availability in endpoint query: %s", opts.Availability)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Report an error if there were no matching endpoints.
0000000000000000000000000000000000000000;;		return "", gophercloud.ErrEndpointNotFound
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// V3EndpointURL discovers the endpoint URL for a specific service from a Catalog acquired
0000000000000000000000000000000000000000;;	// during the v3 identity service. The specified EndpointOpts are used to identify a unique,
0000000000000000000000000000000000000000;;	// unambiguous endpoint to return. It's an error both when multiple endpoints match the provided
0000000000000000000000000000000000000000;;	// criteria and when none do. The minimum that can be specified is a Type, but you will also often
0000000000000000000000000000000000000000;;	// need to specify a Name and/or a Region depending on what's available on your OpenStack
0000000000000000000000000000000000000000;;	// deployment.
0000000000000000000000000000000000000000;;	func V3EndpointURL(catalog *tokens3.ServiceCatalog, opts gophercloud.EndpointOpts) (string, error) {
0000000000000000000000000000000000000000;;		// Extract Endpoints from the catalog entries that match the requested Type, Interface,
0000000000000000000000000000000000000000;;		// Name if provided, and Region if provided.
0000000000000000000000000000000000000000;;		var endpoints = make([]tokens3.Endpoint, 0, 1)
0000000000000000000000000000000000000000;;		for _, entry := range catalog.Entries {
0000000000000000000000000000000000000000;;			if (entry.Type == opts.Type) && (opts.Name == "" || entry.Name == opts.Name) {
0000000000000000000000000000000000000000;;				for _, endpoint := range entry.Endpoints {
0000000000000000000000000000000000000000;;					if opts.Availability != gophercloud.AvailabilityAdmin &&
0000000000000000000000000000000000000000;;						opts.Availability != gophercloud.AvailabilityPublic &&
0000000000000000000000000000000000000000;;						opts.Availability != gophercloud.AvailabilityInternal {
0000000000000000000000000000000000000000;;						return "", fmt.Errorf("Unexpected availability in endpoint query: %s", opts.Availability)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if (opts.Availability == gophercloud.Availability(endpoint.Interface)) &&
0000000000000000000000000000000000000000;;						(opts.Region == "" || endpoint.Region == opts.Region) {
0000000000000000000000000000000000000000;;						endpoints = append(endpoints, endpoint)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Report an error if the options were ambiguous.
0000000000000000000000000000000000000000;;		if len(endpoints) > 1 {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Discovered %d matching endpoints: %#v", len(endpoints), endpoints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Extract the URL from the matching Endpoint.
0000000000000000000000000000000000000000;;		for _, endpoint := range endpoints {
0000000000000000000000000000000000000000;;			return gophercloud.NormalizeURL(endpoint.URL), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Report an error if there were no matching endpoints.
0000000000000000000000000000000000000000;;		return "", gophercloud.ErrEndpointNotFound
0000000000000000000000000000000000000000;;	}
