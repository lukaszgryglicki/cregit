0000000000000000000000000000000000000000;;	package tokens
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v2/tokens/requests.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v2/tokens/requests.go][vendor/github.com/rackspace/gophercloud/openstack/identity/v2/tokens/requests.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptionsBuilder describes any argument that may be passed to the Create call.
0000000000000000000000000000000000000000;;	type AuthOptionsBuilder interface {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ToTokenCreateMap assembles the Create request body, returning an error if parameters are
0000000000000000000000000000000000000000;;		// missing or inconsistent.
0000000000000000000000000000000000000000;;		ToTokenCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptions wraps a gophercloud AuthOptions in order to adhere to the AuthOptionsBuilder
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type AuthOptions struct {
0000000000000000000000000000000000000000;;		gophercloud.AuthOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WrapOptions embeds a root AuthOptions struct in a package-specific one.
0000000000000000000000000000000000000000;;	func WrapOptions(original gophercloud.AuthOptions) AuthOptions {
0000000000000000000000000000000000000000;;		return AuthOptions{AuthOptions: original}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToTokenCreateMap converts AuthOptions into nested maps that can be serialized into a JSON
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	func (auth AuthOptions) ToTokenCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		// Error out if an unsupported auth option is present.
0000000000000000000000000000000000000000;;		if auth.UserID != "" {
0000000000000000000000000000000000000000;;			return nil, ErrUserIDProvided
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if auth.APIKey != "" {
0000000000000000000000000000000000000000;;			return nil, ErrAPIKeyProvided
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if auth.DomainID != "" {
0000000000000000000000000000000000000000;;			return nil, ErrDomainIDProvided
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if auth.DomainName != "" {
0000000000000000000000000000000000000000;;			return nil, ErrDomainNameProvided
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Populate the request map.
0000000000000000000000000000000000000000;;		authMap := make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if auth.Username != "" {
0000000000000000000000000000000000000000;;			if auth.Password != "" {
0000000000000000000000000000000000000000;;				authMap["passwordCredentials"] = map[string]interface{}{
0000000000000000000000000000000000000000;;					"username": auth.Username,
0000000000000000000000000000000000000000;;					"password": auth.Password,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return nil, ErrPasswordRequired
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if auth.TokenID != "" {
0000000000000000000000000000000000000000;;			authMap["token"] = map[string]interface{}{
0000000000000000000000000000000000000000;;				"id": auth.TokenID,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("You must provide either username/password or tenantID/token values.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if auth.TenantID != "" {
0000000000000000000000000000000000000000;;			authMap["tenantId"] = auth.TenantID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if auth.TenantName != "" {
0000000000000000000000000000000000000000;;			authMap["tenantName"] = auth.TenantName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return map[string]interface{}{"auth": authMap}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create authenticates to the identity service and attempts to acquire a Token.
0000000000000000000000000000000000000000;;	// If successful, the CreateResult
0000000000000000000000000000000000000000;;	// Generally, rather than interact with this call directly, end users should call openstack.AuthenticatedClient(),
0000000000000000000000000000000000000000;;	// which abstracts all of the gory details about navigating service catalogs and such.
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, auth AuthOptionsBuilder) CreateResult {
0000000000000000000000000000000000000000;;		request, err := auth.ToTokenCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return CreateResult{gophercloud.Result{Err: err}}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var result CreateResult
0000000000000000000000000000000000000000;;		_, result.Err = client.Post(CreateURL(client), request, &result.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 203},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validates and retrieves information for user's token.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, token string) GetResult {
0000000000000000000000000000000000000000;;		var result GetResult
0000000000000000000000000000000000000000;;		_, result.Err = client.Get(GetURL(client, token), &result.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 203},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
