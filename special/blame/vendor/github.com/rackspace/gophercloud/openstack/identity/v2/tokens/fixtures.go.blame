0000000000000000000000000000000000000000;;	// +build fixtures
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v2/tokens/fixtures.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v2/tokens/fixtures.go][vendor/github.com/rackspace/gophercloud/openstack/identity/v2/tokens/fixtures.go];	
0000000000000000000000000000000000000000;;	package tokens
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/openstack/identity/v2/tenants"
0000000000000000000000000000000000000000;;		th "github.com/rackspace/gophercloud/testhelper"
0000000000000000000000000000000000000000;;		thclient "github.com/rackspace/gophercloud/testhelper/client"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpectedToken is the token that should be parsed from TokenCreationResponse.
0000000000000000000000000000000000000000;;	var ExpectedToken = &Token{
0000000000000000000000000000000000000000;;		ID:        "aaaabbbbccccdddd",
0000000000000000000000000000000000000000;;		ExpiresAt: time.Date(2014, time.January, 31, 15, 30, 58, 0, time.UTC),
0000000000000000000000000000000000000000;;		Tenant: tenants.Tenant{
0000000000000000000000000000000000000000;;			ID:          "fc394f2ab2df4114bde39905f800dc57",
0000000000000000000000000000000000000000;;			Name:        "test",
0000000000000000000000000000000000000000;;			Description: "There are many tenants. This one is yours.",
0000000000000000000000000000000000000000;;			Enabled:     true,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpectedServiceCatalog is the service catalog that should be parsed from TokenCreationResponse.
0000000000000000000000000000000000000000;;	var ExpectedServiceCatalog = &ServiceCatalog{
0000000000000000000000000000000000000000;;		Entries: []CatalogEntry{
0000000000000000000000000000000000000000;;			CatalogEntry{
0000000000000000000000000000000000000000;;				Name: "inscrutablewalrus",
0000000000000000000000000000000000000000;;				Type: "something",
0000000000000000000000000000000000000000;;				Endpoints: []Endpoint{
0000000000000000000000000000000000000000;;					Endpoint{
0000000000000000000000000000000000000000;;						PublicURL: "http://something0:1234/v2/",
0000000000000000000000000000000000000000;;						Region:    "region0",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Endpoint{
0000000000000000000000000000000000000000;;						PublicURL: "http://something1:1234/v2/",
0000000000000000000000000000000000000000;;						Region:    "region1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			CatalogEntry{
0000000000000000000000000000000000000000;;				Name: "arbitrarypenguin",
0000000000000000000000000000000000000000;;				Type: "else",
0000000000000000000000000000000000000000;;				Endpoints: []Endpoint{
0000000000000000000000000000000000000000;;					Endpoint{
0000000000000000000000000000000000000000;;						PublicURL: "http://else0:4321/v3/",
0000000000000000000000000000000000000000;;						Region:    "region0",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpectedUser is the token that should be parsed from TokenGetResponse.
0000000000000000000000000000000000000000;;	var ExpectedUser = &User{
0000000000000000000000000000000000000000;;		ID:       "a530fefc3d594c4ba2693a4ecd6be74e",
0000000000000000000000000000000000000000;;		Name:     "apiserver",
0000000000000000000000000000000000000000;;		Roles:    []Role{{"member"}, {"service"}},
0000000000000000000000000000000000000000;;		UserName: "apiserver",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenCreationResponse is a JSON response that contains ExpectedToken and ExpectedServiceCatalog.
0000000000000000000000000000000000000000;;	const TokenCreationResponse = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"access": {
0000000000000000000000000000000000000000;;			"token": {
0000000000000000000000000000000000000000;;				"issued_at": "2014-01-30T15:30:58.000000Z",
0000000000000000000000000000000000000000;;				"expires": "2014-01-31T15:30:58Z",
0000000000000000000000000000000000000000;;				"id": "aaaabbbbccccdddd",
0000000000000000000000000000000000000000;;				"tenant": {
0000000000000000000000000000000000000000;;					"description": "There are many tenants. This one is yours.",
0000000000000000000000000000000000000000;;					"enabled": true,
0000000000000000000000000000000000000000;;					"id": "fc394f2ab2df4114bde39905f800dc57",
0000000000000000000000000000000000000000;;					"name": "test"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"serviceCatalog": [
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					"endpoints": [
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"publicURL": "http://something0:1234/v2/",
0000000000000000000000000000000000000000;;							"region": "region0"
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"publicURL": "http://something1:1234/v2/",
0000000000000000000000000000000000000000;;							"region": "region1"
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					],
0000000000000000000000000000000000000000;;					"type": "something",
0000000000000000000000000000000000000000;;					"name": "inscrutablewalrus"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					"endpoints": [
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"publicURL": "http://else0:4321/v3/",
0000000000000000000000000000000000000000;;							"region": "region0"
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					],
0000000000000000000000000000000000000000;;					"type": "else",
0000000000000000000000000000000000000000;;					"name": "arbitrarypenguin"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenGetResponse is a JSON response that contains ExpectedToken and ExpectedUser.
0000000000000000000000000000000000000000;;	const TokenGetResponse = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    "access": {
0000000000000000000000000000000000000000;;			"token": {
0000000000000000000000000000000000000000;;				"issued_at": "2014-01-30T15:30:58.000000Z",
0000000000000000000000000000000000000000;;				"expires": "2014-01-31T15:30:58Z",
0000000000000000000000000000000000000000;;				"id": "aaaabbbbccccdddd",
0000000000000000000000000000000000000000;;				"tenant": {
0000000000000000000000000000000000000000;;					"description": "There are many tenants. This one is yours.",
0000000000000000000000000000000000000000;;					"enabled": true,
0000000000000000000000000000000000000000;;					"id": "fc394f2ab2df4114bde39905f800dc57",
0000000000000000000000000000000000000000;;					"name": "test"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	        "serviceCatalog": [], 
0000000000000000000000000000000000000000;;			"user": {
0000000000000000000000000000000000000000;;	            "id": "a530fefc3d594c4ba2693a4ecd6be74e", 
0000000000000000000000000000000000000000;;	            "name": "apiserver", 
0000000000000000000000000000000000000000;;	            "roles": [
0000000000000000000000000000000000000000;;	                {
0000000000000000000000000000000000000000;;	                    "name": "member"
0000000000000000000000000000000000000000;;	                }, 
0000000000000000000000000000000000000000;;	                {
0000000000000000000000000000000000000000;;	                    "name": "service"
0000000000000000000000000000000000000000;;	                }
0000000000000000000000000000000000000000;;	            ], 
0000000000000000000000000000000000000000;;	            "roles_links": [], 
0000000000000000000000000000000000000000;;	            "username": "apiserver"
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	}`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleTokenPost expects a POST against a /tokens handler, ensures that the request body has been
0000000000000000000000000000000000000000;;	// constructed properly given certain auth options, and returns the result.
0000000000000000000000000000000000000000;;	func HandleTokenPost(t *testing.T, requestJSON string) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/tokens", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Content-Type", "application/json")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Accept", "application/json")
0000000000000000000000000000000000000000;;			if requestJSON != "" {
0000000000000000000000000000000000000000;;				th.TestJSONRequest(t, r, requestJSON)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, TokenCreationResponse)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleTokenGet expects a Get against a /tokens handler, ensures that the request body has been
0000000000000000000000000000000000000000;;	// constructed properly given certain auth options, and returns the result.
0000000000000000000000000000000000000000;;	func HandleTokenGet(t *testing.T, token string) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/tokens/"+token, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Accept", "application/json")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", thclient.TokenID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, TokenGetResponse)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsSuccessful ensures that a CreateResult was successful and contains the correct token and
0000000000000000000000000000000000000000;;	// service catalog.
0000000000000000000000000000000000000000;;	func IsSuccessful(t *testing.T, result CreateResult) {
0000000000000000000000000000000000000000;;		token, err := result.ExtractToken()
0000000000000000000000000000000000000000;;		th.AssertNoErr(t, err)
0000000000000000000000000000000000000000;;		th.CheckDeepEquals(t, ExpectedToken, token)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serviceCatalog, err := result.ExtractServiceCatalog()
0000000000000000000000000000000000000000;;		th.AssertNoErr(t, err)
0000000000000000000000000000000000000000;;		th.CheckDeepEquals(t, ExpectedServiceCatalog, serviceCatalog)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetIsSuccessful ensures that a GetResult was successful and contains the correct token and
0000000000000000000000000000000000000000;;	// User Info.
0000000000000000000000000000000000000000;;	func GetIsSuccessful(t *testing.T, result GetResult) {
0000000000000000000000000000000000000000;;		token, err := result.ExtractToken()
0000000000000000000000000000000000000000;;		th.AssertNoErr(t, err)
0000000000000000000000000000000000000000;;		th.CheckDeepEquals(t, ExpectedToken, token)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		user, err := result.ExtractUser()
0000000000000000000000000000000000000000;;		th.AssertNoErr(t, err)
0000000000000000000000000000000000000000;;		th.CheckDeepEquals(t, ExpectedUser, user)
0000000000000000000000000000000000000000;;	}
