0000000000000000000000000000000000000000;;	package tokens
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v3/tokens/results.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v3/tokens/results.go][vendor/github.com/rackspace/gophercloud/openstack/identity/v3/tokens/results.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/mitchellh/mapstructure"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Endpoint represents a single API endpoint offered by a service.
0000000000000000000000000000000000000000;;	// It matches either a public, internal or admin URL.
0000000000000000000000000000000000000000;;	// If supported, it contains a region specifier, again if provided.
0000000000000000000000000000000000000000;;	// The significance of the Region field will depend upon your provider.
0000000000000000000000000000000000000000;;	type Endpoint struct {
0000000000000000000000000000000000000000;;		ID        string `mapstructure:"id"`
0000000000000000000000000000000000000000;;		Region    string `mapstructure:"region"`
0000000000000000000000000000000000000000;;		Interface string `mapstructure:"interface"`
0000000000000000000000000000000000000000;;		URL       string `mapstructure:"url"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CatalogEntry provides a type-safe interface to an Identity API V3 service catalog listing.
0000000000000000000000000000000000000000;;	// Each class of service, such as cloud DNS or block storage services, could have multiple
0000000000000000000000000000000000000000;;	// CatalogEntry representing it (one by interface type, e.g public, admin or internal).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: when looking for the desired service, try, whenever possible, to key off the type field.
0000000000000000000000000000000000000000;;	// Otherwise, you'll tie the representation of the service to a specific provider.
0000000000000000000000000000000000000000;;	type CatalogEntry struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Service ID
0000000000000000000000000000000000000000;;		ID string `mapstructure:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name will contain the provider-specified name for the service.
0000000000000000000000000000000000000000;;		Name string `mapstructure:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type will contain a type string if OpenStack defines a type for the service.
0000000000000000000000000000000000000000;;		// Otherwise, for provider-specific services, the provider may assign their own type strings.
0000000000000000000000000000000000000000;;		Type string `mapstructure:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Endpoints will let the caller iterate over all the different endpoints that may exist for
0000000000000000000000000000000000000000;;		// the service.
0000000000000000000000000000000000000000;;		Endpoints []Endpoint `mapstructure:"endpoints"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceCatalog provides a view into the service catalog from a previous, successful authentication.
0000000000000000000000000000000000000000;;	type ServiceCatalog struct {
0000000000000000000000000000000000000000;;		Entries []CatalogEntry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// commonResult is the deferred result of a Create or a Get call.
0000000000000000000000000000000000000000;;	type commonResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract is a shortcut for ExtractToken.
0000000000000000000000000000000000000000;;	// This function is deprecated and still present for backward compatibility.
0000000000000000000000000000000000000000;;	func (r commonResult) Extract() (*Token, error) {
0000000000000000000000000000000000000000;;		return r.ExtractToken()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractToken interprets a commonResult as a Token.
0000000000000000000000000000000000000000;;	func (r commonResult) ExtractToken() (*Token, error) {
0000000000000000000000000000000000000000;;		if r.Err != nil {
0000000000000000000000000000000000000000;;			return nil, r.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response struct {
0000000000000000000000000000000000000000;;			Token struct {
0000000000000000000000000000000000000000;;				ExpiresAt string `mapstructure:"expires_at"`
0000000000000000000000000000000000000000;;			} `mapstructure:"token"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var token Token
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parse the token itself from the stored headers.
0000000000000000000000000000000000000000;;		token.ID = r.Header.Get("X-Subject-Token")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(r.Body, &response)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Attempt to parse the timestamp.
0000000000000000000000000000000000000000;;		token.ExpiresAt, err = time.Parse(gophercloud.RFC3339Milli, response.Token.ExpiresAt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &token, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractServiceCatalog returns the ServiceCatalog that was generated along with the user's Token.
0000000000000000000000000000000000000000;;	func (result CreateResult) ExtractServiceCatalog() (*ServiceCatalog, error) {
0000000000000000000000000000000000000000;;		if result.Err != nil {
0000000000000000000000000000000000000000;;			return nil, result.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response struct {
0000000000000000000000000000000000000000;;			Token struct {
0000000000000000000000000000000000000000;;				Entries []CatalogEntry `mapstructure:"catalog"`
0000000000000000000000000000000000000000;;			} `mapstructure:"token"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(result.Body, &response)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &ServiceCatalog{Entries: response.Token.Entries}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult defers the interpretation of a created token.
0000000000000000000000000000000000000000;;	// Use ExtractToken() to interpret it as a Token, or ExtractServiceCatalog() to interpret it as a service catalog.
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createErr quickly creates a CreateResult that reports an error.
0000000000000000000000000000000000000000;;	func createErr(err error) CreateResult {
0000000000000000000000000000000000000000;;		return CreateResult{
0000000000000000000000000000000000000000;;			commonResult: commonResult{Result: gophercloud.Result{Err: err}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult is the deferred response from a Get call.
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RevokeResult is the deferred response from a Revoke call.
0000000000000000000000000000000000000000;;	type RevokeResult struct {
0000000000000000000000000000000000000000;;		commonResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Token is a string that grants a user access to a controlled set of services in an OpenStack provider.
0000000000000000000000000000000000000000;;	// Each Token is valid for a set length of time.
0000000000000000000000000000000000000000;;	type Token struct {
0000000000000000000000000000000000000000;;		// ID is the issued token.
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExpiresAt is the timestamp at which this token will no longer be accepted.
0000000000000000000000000000000000000000;;		ExpiresAt time.Time
0000000000000000000000000000000000000000;;	}
