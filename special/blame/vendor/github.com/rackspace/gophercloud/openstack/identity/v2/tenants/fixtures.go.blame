0000000000000000000000000000000000000000;;	// +build fixtures
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v2/tenants/fixtures.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v2/tenants/fixtures.go][vendor/github.com/rackspace/gophercloud/openstack/identity/v2/tenants/fixtures.go];	
0000000000000000000000000000000000000000;;	package tenants
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		th "github.com/rackspace/gophercloud/testhelper"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/testhelper/client"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOutput provides a single page of Tenant results.
0000000000000000000000000000000000000000;;	const ListOutput = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"tenants": [
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"id": "1234",
0000000000000000000000000000000000000000;;				"name": "Red Team",
0000000000000000000000000000000000000000;;				"description": "The team that is red",
0000000000000000000000000000000000000000;;				"enabled": true
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"id": "9876",
0000000000000000000000000000000000000000;;				"name": "Blue Team",
0000000000000000000000000000000000000000;;				"description": "The team that is blue",
0000000000000000000000000000000000000000;;				"enabled": false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RedTeam is a Tenant fixture.
0000000000000000000000000000000000000000;;	var RedTeam = Tenant{
0000000000000000000000000000000000000000;;		ID:          "1234",
0000000000000000000000000000000000000000;;		Name:        "Red Team",
0000000000000000000000000000000000000000;;		Description: "The team that is red",
0000000000000000000000000000000000000000;;		Enabled:     true,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlueTeam is a Tenant fixture.
0000000000000000000000000000000000000000;;	var BlueTeam = Tenant{
0000000000000000000000000000000000000000;;		ID:          "9876",
0000000000000000000000000000000000000000;;		Name:        "Blue Team",
0000000000000000000000000000000000000000;;		Description: "The team that is blue",
0000000000000000000000000000000000000000;;		Enabled:     false,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpectedTenantSlice is the slice of tenants expected to be returned from ListOutput.
0000000000000000000000000000000000000000;;	var ExpectedTenantSlice = []Tenant{RedTeam, BlueTeam}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleListTenantsSuccessfully creates an HTTP handler at `/tenants` on the test handler mux that
0000000000000000000000000000000000000000;;	// responds with a list of two tenants.
0000000000000000000000000000000000000000;;	func HandleListTenantsSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/tenants", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Accept", "application/json")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, ListOutput)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
