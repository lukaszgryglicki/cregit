0000000000000000000000000000000000000000;;	package tenants
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v2/tenants/results.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/identity/v2/tenants/results.go][vendor/github.com/rackspace/gophercloud/openstack/identity/v2/tenants/results.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/mitchellh/mapstructure"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Tenant is a grouping of users in the identity service.
0000000000000000000000000000000000000000;;	type Tenant struct {
0000000000000000000000000000000000000000;;		// ID is a unique identifier for this tenant.
0000000000000000000000000000000000000000;;		ID string `mapstructure:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name is a friendlier user-facing name for this tenant.
0000000000000000000000000000000000000000;;		Name string `mapstructure:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description is a human-readable explanation of this Tenant's purpose.
0000000000000000000000000000000000000000;;		Description string `mapstructure:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Enabled indicates whether or not a tenant is active.
0000000000000000000000000000000000000000;;		Enabled bool `mapstructure:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TenantPage is a single page of Tenant results.
0000000000000000000000000000000000000000;;	type TenantPage struct {
0000000000000000000000000000000000000000;;		pagination.LinkedPageBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsEmpty determines whether or not a page of Tenants contains any results.
0000000000000000000000000000000000000000;;	func (page TenantPage) IsEmpty() (bool, error) {
0000000000000000000000000000000000000000;;		tenants, err := ExtractTenants(page)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(tenants) == 0, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextPageURL extracts the "next" link from the tenants_links section of the result.
0000000000000000000000000000000000000000;;	func (page TenantPage) NextPageURL() (string, error) {
0000000000000000000000000000000000000000;;		type resp struct {
0000000000000000000000000000000000000000;;			Links []gophercloud.Link `mapstructure:"tenants_links"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r resp
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(page.Body, &r)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return gophercloud.ExtractNextURL(r.Links)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractTenants returns a slice of Tenants contained in a single page of results.
0000000000000000000000000000000000000000;;	func ExtractTenants(page pagination.Page) ([]Tenant, error) {
0000000000000000000000000000000000000000;;		casted := page.(TenantPage).Body
0000000000000000000000000000000000000000;;		var response struct {
0000000000000000000000000000000000000000;;			Tenants []Tenant `mapstructure:"tenants"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(casted, &response)
0000000000000000000000000000000000000000;;		return response.Tenants, err
0000000000000000000000000000000000000000;;	}
