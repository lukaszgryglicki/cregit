0000000000000000000000000000000000000000;;	package images
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/images/requests.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/images/requests.go][vendor/github.com/rackspace/gophercloud/openstack/compute/v2/images/requests.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// List request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToImageListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts contain options for limiting the number of Images returned from a call to ListDetail.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		// When the image last changed status (in date-time format).
0000000000000000000000000000000000000000;;		ChangesSince string `q:"changes-since"`
0000000000000000000000000000000000000000;;		// The number of Images to return.
0000000000000000000000000000000000000000;;		Limit int `q:"limit"`
0000000000000000000000000000000000000000;;		// UUID of the Image at which to set a marker.
0000000000000000000000000000000000000000;;		Marker string `q:"marker"`
0000000000000000000000000000000000000000;;		// The name of the Image.
0000000000000000000000000000000000000000;;		Name string `q:"name"`
0000000000000000000000000000000000000000;;		// The name of the Server (in URL format).
0000000000000000000000000000000000000000;;		Server string `q:"server"`
0000000000000000000000000000000000000000;;		// The current status of the Image.
0000000000000000000000000000000000000000;;		Status string `q:"status"`
0000000000000000000000000000000000000000;;		// The value of the type of image (e.g. BASE, SERVER, ALL)
0000000000000000000000000000000000000000;;		Type string `q:"type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToImageListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToImageListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return q.String(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListDetail enumerates the available images.
0000000000000000000000000000000000000000;;	func ListDetail(client *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listDetailURL(client)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToImageListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createPage := func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return ImagePage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, url, createPage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get acquires additional detail about a specific image by ID.
0000000000000000000000000000000000000000;;	// Use ExtractImage() to interpret the result as an openstack Image.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, id string) GetResult {
0000000000000000000000000000000000000000;;		var result GetResult
0000000000000000000000000000000000000000;;		_, result.Err = client.Get(getURL(client, id), &result.Body, nil)
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete deletes the specified image ID.
0000000000000000000000000000000000000000;;	func Delete(client *gophercloud.ServiceClient, id string) DeleteResult {
0000000000000000000000000000000000000000;;		var result DeleteResult
0000000000000000000000000000000000000000;;		_, result.Err = client.Delete(deleteURL(client, id), nil)
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convienience function that returns an image's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		imageCount := 0
0000000000000000000000000000000000000000;;		imageID := ""
0000000000000000000000000000000000000000;;		if name == "" {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("An image name must be provided.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pager := ListDetail(client, &ListOpts{
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		pager.EachPage(func(page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;			imageList, err := ExtractImages(page)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, i := range imageList {
0000000000000000000000000000000000000000;;				if i.Name == name {
0000000000000000000000000000000000000000;;					imageCount++
0000000000000000000000000000000000000000;;					imageID = i.ID
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch imageCount {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Unable to find image: %s", name)
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return imageID, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Found %d images matching %s", imageCount, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
