0000000000000000000000000000000000000000;;	package diskconfig
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/diskconfig/results.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/diskconfig/results.go][vendor/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/diskconfig/results.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/mitchellh/mapstructure"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func commonExtract(result gophercloud.Result) (*DiskConfig, error) {
0000000000000000000000000000000000000000;;		var resp struct {
0000000000000000000000000000000000000000;;			Server struct {
0000000000000000000000000000000000000000;;				DiskConfig string `mapstructure:"OS-DCF:diskConfig"`
0000000000000000000000000000000000000000;;			} `mapstructure:"server"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(result.Body, &resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := DiskConfig(resp.Server.DiskConfig)
0000000000000000000000000000000000000000;;		return &config, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractGet returns the disk configuration from a servers.Get call.
0000000000000000000000000000000000000000;;	func ExtractGet(result servers.GetResult) (*DiskConfig, error) {
0000000000000000000000000000000000000000;;		return commonExtract(result.Result)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractUpdate returns the disk configuration from a servers.Update call.
0000000000000000000000000000000000000000;;	func ExtractUpdate(result servers.UpdateResult) (*DiskConfig, error) {
0000000000000000000000000000000000000000;;		return commonExtract(result.Result)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractRebuild returns the disk configuration from a servers.Rebuild call.
0000000000000000000000000000000000000000;;	func ExtractRebuild(result servers.RebuildResult) (*DiskConfig, error) {
0000000000000000000000000000000000000000;;		return commonExtract(result.Result)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractDiskConfig returns the DiskConfig setting for a specific server acquired from an
0000000000000000000000000000000000000000;;	// servers.ExtractServers call, while iterating through a Pager.
0000000000000000000000000000000000000000;;	func ExtractDiskConfig(page pagination.Page, index int) (*DiskConfig, error) {
0000000000000000000000000000000000000000;;		casted := page.(servers.ServerPage).Body
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		type server struct {
0000000000000000000000000000000000000000;;			DiskConfig string `mapstructure:"OS-DCF:diskConfig"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var response struct {
0000000000000000000000000000000000000000;;			Servers []server `mapstructure:"servers"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(casted, &response)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := DiskConfig(response.Servers[index].DiskConfig)
0000000000000000000000000000000000000000;;		return &config, nil
0000000000000000000000000000000000000000;;	}
