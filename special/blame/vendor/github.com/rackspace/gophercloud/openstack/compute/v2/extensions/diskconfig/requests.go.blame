0000000000000000000000000000000000000000;;	package diskconfig
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/diskconfig/requests.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/diskconfig/requests.go][vendor/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/diskconfig/requests.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DiskConfig represents one of the two possible settings for the DiskConfig option when creating,
0000000000000000000000000000000000000000;;	// rebuilding, or resizing servers: Auto or Manual.
0000000000000000000000000000000000000000;;	type DiskConfig string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Auto builds a server with a single partition the size of the target flavor disk and
0000000000000000000000000000000000000000;;		// automatically adjusts the filesystem to fit the entire partition. Auto may only be used with
0000000000000000000000000000000000000000;;		// images and servers that use a single EXT3 partition.
0000000000000000000000000000000000000000;;		Auto DiskConfig = "AUTO"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Manual builds a server using whatever partition scheme and filesystem are present in the source
0000000000000000000000000000000000000000;;		// image. If the target flavor disk is larger, the remaining space is left unpartitioned. This
0000000000000000000000000000000000000000;;		// enables images to have non-EXT3 filesystems, multiple partitions, and so on, and enables you
0000000000000000000000000000000000000000;;		// to manage the disk configuration. It also results in slightly shorter boot times.
0000000000000000000000000000000000000000;;		Manual DiskConfig = "MANUAL"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrInvalidDiskConfig is returned if an invalid string is specified for a DiskConfig option.
0000000000000000000000000000000000000000;;	var ErrInvalidDiskConfig = errors.New("DiskConfig must be either diskconfig.Auto or diskconfig.Manual.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate ensures that a DiskConfig contains an appropriate value.
0000000000000000000000000000000000000000;;	func (config DiskConfig) validate() error {
0000000000000000000000000000000000000000;;		switch config {
0000000000000000000000000000000000000000;;		case Auto, Manual:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return ErrInvalidDiskConfig
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsExt adds a DiskConfig option to the base CreateOpts.
0000000000000000000000000000000000000000;;	type CreateOptsExt struct {
0000000000000000000000000000000000000000;;		servers.CreateOptsBuilder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DiskConfig [optional] controls how the created server's disk is partitioned.
0000000000000000000000000000000000000000;;		DiskConfig DiskConfig `json:"OS-DCF:diskConfig,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerCreateMap adds the diskconfig option to the base server creation options.
0000000000000000000000000000000000000000;;	func (opts CreateOptsExt) ToServerCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		base, err := opts.CreateOptsBuilder.ToServerCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if string(opts.DiskConfig) == "" {
0000000000000000000000000000000000000000;;			return base, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverMap := base["server"].(map[string]interface{})
0000000000000000000000000000000000000000;;		serverMap["OS-DCF:diskConfig"] = string(opts.DiskConfig)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return base, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RebuildOptsExt adds a DiskConfig option to the base RebuildOpts.
0000000000000000000000000000000000000000;;	type RebuildOptsExt struct {
0000000000000000000000000000000000000000;;		servers.RebuildOptsBuilder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DiskConfig [optional] controls how the rebuilt server's disk is partitioned.
0000000000000000000000000000000000000000;;		DiskConfig DiskConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerRebuildMap adds the diskconfig option to the base server rebuild options.
0000000000000000000000000000000000000000;;	func (opts RebuildOptsExt) ToServerRebuildMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		err := opts.DiskConfig.validate()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		base, err := opts.RebuildOptsBuilder.ToServerRebuildMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverMap := base["rebuild"].(map[string]interface{})
0000000000000000000000000000000000000000;;		serverMap["OS-DCF:diskConfig"] = string(opts.DiskConfig)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return base, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResizeOptsExt adds a DiskConfig option to the base server resize options.
0000000000000000000000000000000000000000;;	type ResizeOptsExt struct {
0000000000000000000000000000000000000000;;		servers.ResizeOptsBuilder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DiskConfig [optional] controls how the resized server's disk is partitioned.
0000000000000000000000000000000000000000;;		DiskConfig DiskConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerResizeMap adds the diskconfig option to the base server creation options.
0000000000000000000000000000000000000000;;	func (opts ResizeOptsExt) ToServerResizeMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		err := opts.DiskConfig.validate()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		base, err := opts.ResizeOptsBuilder.ToServerResizeMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverMap := base["resize"].(map[string]interface{})
0000000000000000000000000000000000000000;;		serverMap["OS-DCF:diskConfig"] = string(opts.DiskConfig)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return base, nil
0000000000000000000000000000000000000000;;	}
