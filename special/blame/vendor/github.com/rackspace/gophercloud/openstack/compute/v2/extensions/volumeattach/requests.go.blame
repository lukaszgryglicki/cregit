0000000000000000000000000000000000000000;;	package volumeattach
29d303a5b91a03bab17e3e45b8b2f287a1481935;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/volumeattach/requests.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/volumeattach/requests.go][vendor/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/volumeattach/requests.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a Pager that allows you to iterate over a collection of VolumeAttachments.
0000000000000000000000000000000000000000;;	func List(client *gophercloud.ServiceClient, serverId string) pagination.Pager {
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, listURL(client, serverId), func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return VolumeAttachmentsPage{pagination.SinglePageBase(r)}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsBuilder describes struct types that can be accepted by the Create call. Notable, the
0000000000000000000000000000000000000000;;	// CreateOpts struct in this package does.
0000000000000000000000000000000000000000;;	type CreateOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToVolumeAttachmentCreateMap() (map[string]interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOpts specifies volume attachment creation or import parameters.
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		// Device is the device that the volume will attach to the instance as. Omit for "auto"
0000000000000000000000000000000000000000;;		Device string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeID is the ID of the volume to attach to the instance
0000000000000000000000000000000000000000;;		VolumeID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVolumeAttachmentCreateMap constructs a request body from CreateOpts.
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToVolumeAttachmentCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		if opts.VolumeID == "" {
0000000000000000000000000000000000000000;;			return nil, errors.New("Missing field required for volume attachment creation: VolumeID")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeAttachment := make(map[string]interface{})
0000000000000000000000000000000000000000;;		volumeAttachment["volumeId"] = opts.VolumeID
0000000000000000000000000000000000000000;;		if opts.Device != "" {
0000000000000000000000000000000000000000;;			volumeAttachment["device"] = opts.Device
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return map[string]interface{}{"volumeAttachment": volumeAttachment}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create requests the creation of a new volume attachment on the server
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, serverId string, opts CreateOptsBuilder) CreateResult {
0000000000000000000000000000000000000000;;		var res CreateResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqBody, err := opts.ToVolumeAttachmentCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			res.Err = err
0000000000000000000000000000000000000000;;			return res
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, res.Err = client.Post(createURL(client, serverId), reqBody, &res.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns public data about a previously created VolumeAttachment.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, serverId, aId string) GetResult {
0000000000000000000000000000000000000000;;		var res GetResult
0000000000000000000000000000000000000000;;		_, res.Err = client.Get(getURL(client, serverId, aId), &res.Body, nil)
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete requests the deletion of a previous stored VolumeAttachment from the server.
0000000000000000000000000000000000000000;;	func Delete(client *gophercloud.ServiceClient, serverId, aId string) DeleteResult {
0000000000000000000000000000000000000000;;		var res DeleteResult
0000000000000000000000000000000000000000;;		_, res.Err = client.Delete(deleteURL(client, serverId, aId), nil)
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
