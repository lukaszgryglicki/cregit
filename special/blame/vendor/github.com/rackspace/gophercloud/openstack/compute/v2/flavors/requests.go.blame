0000000000000000000000000000000000000000;;	package flavors
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/flavors/requests.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/flavors/requests.go][vendor/github.com/rackspace/gophercloud/openstack/compute/v2/flavors/requests.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOptsBuilder allows extensions to add additional parameters to the
0000000000000000000000000000000000000000;;	// List request.
0000000000000000000000000000000000000000;;	type ListOptsBuilder interface {
0000000000000000000000000000000000000000;;		ToFlavorListQuery() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOpts helps control the results returned by the List() function.
0000000000000000000000000000000000000000;;	// For example, a flavor with a minDisk field of 10 will not be returned if you specify MinDisk set to 20.
0000000000000000000000000000000000000000;;	// Typically, software will use the last ID of the previous call to List to set the Marker for the current call.
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ChangesSince, if provided, instructs List to return only those things which have changed since the timestamp provided.
0000000000000000000000000000000000000000;;		ChangesSince string `q:"changes-since"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MinDisk and MinRAM, if provided, elides flavors which do not meet your criteria.
0000000000000000000000000000000000000000;;		MinDisk int `q:"minDisk"`
0000000000000000000000000000000000000000;;		MinRAM  int `q:"minRam"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Marker and Limit control paging.
0000000000000000000000000000000000000000;;		// Marker instructs List where to start listing from.
0000000000000000000000000000000000000000;;		Marker string `q:"marker"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Limit instructs List to refrain from sending excessively large lists of flavors.
0000000000000000000000000000000000000000;;		Limit int `q:"limit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToFlavorListQuery formats a ListOpts into a query string.
0000000000000000000000000000000000000000;;	func (opts ListOpts) ToFlavorListQuery() (string, error) {
0000000000000000000000000000000000000000;;		q, err := gophercloud.BuildQueryString(opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return q.String(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListDetail instructs OpenStack to provide a list of flavors.
0000000000000000000000000000000000000000;;	// You may provide criteria by which List curtails its results for easier processing.
0000000000000000000000000000000000000000;;	// See ListOpts for more details.
0000000000000000000000000000000000000000;;	func ListDetail(client *gophercloud.ServiceClient, opts ListOptsBuilder) pagination.Pager {
0000000000000000000000000000000000000000;;		url := listURL(client)
0000000000000000000000000000000000000000;;		if opts != nil {
0000000000000000000000000000000000000000;;			query, err := opts.ToFlavorListQuery()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return pagination.Pager{Err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			url += query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		createPage := func(r pagination.PageResult) pagination.Page {
0000000000000000000000000000000000000000;;			return FlavorPage{pagination.LinkedPageBase{PageResult: r}}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pagination.NewPager(client, url, createPage)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get instructs OpenStack to provide details on a single flavor, identified by its ID.
0000000000000000000000000000000000000000;;	// Use ExtractFlavor to convert its result into a Flavor.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, id string) GetResult {
0000000000000000000000000000000000000000;;		var res GetResult
0000000000000000000000000000000000000000;;		_, res.Err = client.Get(getURL(client, id), &res.Body, nil)
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromName is a convienience function that returns a flavor's ID given its name.
0000000000000000000000000000000000000000;;	func IDFromName(client *gophercloud.ServiceClient, name string) (string, error) {
0000000000000000000000000000000000000000;;		flavorCount := 0
0000000000000000000000000000000000000000;;		flavorID := ""
0000000000000000000000000000000000000000;;		if name == "" {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("A flavor name must be provided.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pager := ListDetail(client, nil)
0000000000000000000000000000000000000000;;		pager.EachPage(func(page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;			flavorList, err := ExtractFlavors(page)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, f := range flavorList {
0000000000000000000000000000000000000000;;				if f.Name == name {
0000000000000000000000000000000000000000;;					flavorCount++
0000000000000000000000000000000000000000;;					flavorID = f.ID
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch flavorCount {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Unable to find flavor: %s", name)
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			return flavorID, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Found %d flavors matching %s", flavorCount, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
