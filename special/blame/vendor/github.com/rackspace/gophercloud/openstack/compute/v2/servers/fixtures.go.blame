0000000000000000000000000000000000000000;;	// +build fixtures
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/servers/fixtures.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/servers/fixtures.go][vendor/github.com/rackspace/gophercloud/openstack/compute/v2/servers/fixtures.go];	
0000000000000000000000000000000000000000;;	package servers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		th "github.com/rackspace/gophercloud/testhelper"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/testhelper/client"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerListBody contains the canned body of a servers.List response.
0000000000000000000000000000000000000000;;	const ServerListBody = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"servers": [
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"status": "ACTIVE",
0000000000000000000000000000000000000000;;				"updated": "2014-09-25T13:10:10Z",
0000000000000000000000000000000000000000;;				"hostId": "29d3c8c896a45aa4c34e52247875d7fefc3d94bbcc9f622b5d204362",
0000000000000000000000000000000000000000;;				"OS-EXT-SRV-ATTR:host": "devstack",
0000000000000000000000000000000000000000;;				"addresses": {
0000000000000000000000000000000000000000;;					"private": [
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"OS-EXT-IPS-MAC:mac_addr": "fa:16:3e:7c:1b:2b",
0000000000000000000000000000000000000000;;							"version": 4,
0000000000000000000000000000000000000000;;							"addr": "10.0.0.32",
0000000000000000000000000000000000000000;;							"OS-EXT-IPS:type": "fixed"
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"links": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/v2/fcad67a6189847c4aecfa3c81a05783b/servers/ef079b0c-e610-4dfb-b1aa-b49f07ac48e5",
0000000000000000000000000000000000000000;;						"rel": "self"
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/servers/ef079b0c-e610-4dfb-b1aa-b49f07ac48e5",
0000000000000000000000000000000000000000;;						"rel": "bookmark"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				],
0000000000000000000000000000000000000000;;				"key_name": null,
0000000000000000000000000000000000000000;;				"image": {
0000000000000000000000000000000000000000;;					"id": "f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;					"links": [
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/images/f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;							"rel": "bookmark"
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"OS-EXT-STS:task_state": null,
0000000000000000000000000000000000000000;;				"OS-EXT-STS:vm_state": "active",
0000000000000000000000000000000000000000;;				"OS-EXT-SRV-ATTR:instance_name": "instance-0000001e",
0000000000000000000000000000000000000000;;				"OS-SRV-USG:launched_at": "2014-09-25T13:10:10.000000",
0000000000000000000000000000000000000000;;				"OS-EXT-SRV-ATTR:hypervisor_hostname": "devstack",
0000000000000000000000000000000000000000;;				"flavor": {
0000000000000000000000000000000000000000;;					"id": "1",
0000000000000000000000000000000000000000;;					"links": [
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/flavors/1",
0000000000000000000000000000000000000000;;							"rel": "bookmark"
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"id": "ef079b0c-e610-4dfb-b1aa-b49f07ac48e5",
0000000000000000000000000000000000000000;;				"security_groups": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"name": "default"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				],
0000000000000000000000000000000000000000;;				"OS-SRV-USG:terminated_at": null,
0000000000000000000000000000000000000000;;				"OS-EXT-AZ:availability_zone": "nova",
0000000000000000000000000000000000000000;;				"user_id": "9349aff8be7545ac9d2f1d00999a23cd",
0000000000000000000000000000000000000000;;				"name": "herp",
0000000000000000000000000000000000000000;;				"created": "2014-09-25T13:10:02Z",
0000000000000000000000000000000000000000;;				"tenant_id": "fcad67a6189847c4aecfa3c81a05783b",
0000000000000000000000000000000000000000;;				"OS-DCF:diskConfig": "MANUAL",
0000000000000000000000000000000000000000;;				"os-extended-volumes:volumes_attached": [],
0000000000000000000000000000000000000000;;				"accessIPv4": "",
0000000000000000000000000000000000000000;;				"accessIPv6": "",
0000000000000000000000000000000000000000;;				"progress": 0,
0000000000000000000000000000000000000000;;				"OS-EXT-STS:power_state": 1,
0000000000000000000000000000000000000000;;				"config_drive": "",
0000000000000000000000000000000000000000;;				"metadata": {}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"status": "ACTIVE",
0000000000000000000000000000000000000000;;				"updated": "2014-09-25T13:04:49Z",
0000000000000000000000000000000000000000;;				"hostId": "29d3c8c896a45aa4c34e52247875d7fefc3d94bbcc9f622b5d204362",
0000000000000000000000000000000000000000;;				"OS-EXT-SRV-ATTR:host": "devstack",
0000000000000000000000000000000000000000;;				"addresses": {
0000000000000000000000000000000000000000;;					"private": [
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"OS-EXT-IPS-MAC:mac_addr": "fa:16:3e:9e:89:be",
0000000000000000000000000000000000000000;;							"version": 4,
0000000000000000000000000000000000000000;;							"addr": "10.0.0.31",
0000000000000000000000000000000000000000;;							"OS-EXT-IPS:type": "fixed"
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"links": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/v2/fcad67a6189847c4aecfa3c81a05783b/servers/9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;						"rel": "self"
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/servers/9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;						"rel": "bookmark"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				],
0000000000000000000000000000000000000000;;				"key_name": null,
0000000000000000000000000000000000000000;;				"image": {
0000000000000000000000000000000000000000;;					"id": "f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;					"links": [
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/images/f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;							"rel": "bookmark"
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"OS-EXT-STS:task_state": null,
0000000000000000000000000000000000000000;;				"OS-EXT-STS:vm_state": "active",
0000000000000000000000000000000000000000;;				"OS-EXT-SRV-ATTR:instance_name": "instance-0000001d",
0000000000000000000000000000000000000000;;				"OS-SRV-USG:launched_at": "2014-09-25T13:04:49.000000",
0000000000000000000000000000000000000000;;				"OS-EXT-SRV-ATTR:hypervisor_hostname": "devstack",
0000000000000000000000000000000000000000;;				"flavor": {
0000000000000000000000000000000000000000;;					"id": "1",
0000000000000000000000000000000000000000;;					"links": [
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/flavors/1",
0000000000000000000000000000000000000000;;							"rel": "bookmark"
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					]
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"id": "9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;				"security_groups": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"name": "default"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				],
0000000000000000000000000000000000000000;;				"OS-SRV-USG:terminated_at": null,
0000000000000000000000000000000000000000;;				"OS-EXT-AZ:availability_zone": "nova",
0000000000000000000000000000000000000000;;				"user_id": "9349aff8be7545ac9d2f1d00999a23cd",
0000000000000000000000000000000000000000;;				"name": "derp",
0000000000000000000000000000000000000000;;				"created": "2014-09-25T13:04:41Z",
0000000000000000000000000000000000000000;;				"tenant_id": "fcad67a6189847c4aecfa3c81a05783b",
0000000000000000000000000000000000000000;;				"OS-DCF:diskConfig": "MANUAL",
0000000000000000000000000000000000000000;;				"os-extended-volumes:volumes_attached": [],
0000000000000000000000000000000000000000;;				"accessIPv4": "",
0000000000000000000000000000000000000000;;				"accessIPv6": "",
0000000000000000000000000000000000000000;;				"progress": 0,
0000000000000000000000000000000000000000;;				"OS-EXT-STS:power_state": 1,
0000000000000000000000000000000000000000;;				"config_drive": "",
0000000000000000000000000000000000000000;;				"metadata": {}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SingleServerBody is the canned body of a Get request on an existing server.
0000000000000000000000000000000000000000;;	const SingleServerBody = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		"server": {
0000000000000000000000000000000000000000;;			"status": "ACTIVE",
0000000000000000000000000000000000000000;;			"updated": "2014-09-25T13:04:49Z",
0000000000000000000000000000000000000000;;			"hostId": "29d3c8c896a45aa4c34e52247875d7fefc3d94bbcc9f622b5d204362",
0000000000000000000000000000000000000000;;			"OS-EXT-SRV-ATTR:host": "devstack",
0000000000000000000000000000000000000000;;			"addresses": {
0000000000000000000000000000000000000000;;				"private": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"OS-EXT-IPS-MAC:mac_addr": "fa:16:3e:9e:89:be",
0000000000000000000000000000000000000000;;						"version": 4,
0000000000000000000000000000000000000000;;						"addr": "10.0.0.31",
0000000000000000000000000000000000000000;;						"OS-EXT-IPS:type": "fixed"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"links": [
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					"href": "http://104.130.131.164:8774/v2/fcad67a6189847c4aecfa3c81a05783b/servers/9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;					"rel": "self"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/servers/9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;					"rel": "bookmark"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			],
0000000000000000000000000000000000000000;;			"key_name": null,
0000000000000000000000000000000000000000;;			"image": {
0000000000000000000000000000000000000000;;				"id": "f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;				"links": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/images/f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;						"rel": "bookmark"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"OS-EXT-STS:task_state": null,
0000000000000000000000000000000000000000;;			"OS-EXT-STS:vm_state": "active",
0000000000000000000000000000000000000000;;			"OS-EXT-SRV-ATTR:instance_name": "instance-0000001d",
0000000000000000000000000000000000000000;;			"OS-SRV-USG:launched_at": "2014-09-25T13:04:49.000000",
0000000000000000000000000000000000000000;;			"OS-EXT-SRV-ATTR:hypervisor_hostname": "devstack",
0000000000000000000000000000000000000000;;			"flavor": {
0000000000000000000000000000000000000000;;				"id": "1",
0000000000000000000000000000000000000000;;				"links": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/flavors/1",
0000000000000000000000000000000000000000;;						"rel": "bookmark"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"id": "9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;			"security_groups": [
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					"name": "default"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			],
0000000000000000000000000000000000000000;;			"OS-SRV-USG:terminated_at": null,
0000000000000000000000000000000000000000;;			"OS-EXT-AZ:availability_zone": "nova",
0000000000000000000000000000000000000000;;			"user_id": "9349aff8be7545ac9d2f1d00999a23cd",
0000000000000000000000000000000000000000;;			"name": "derp",
0000000000000000000000000000000000000000;;			"created": "2014-09-25T13:04:41Z",
0000000000000000000000000000000000000000;;			"tenant_id": "fcad67a6189847c4aecfa3c81a05783b",
0000000000000000000000000000000000000000;;			"OS-DCF:diskConfig": "MANUAL",
0000000000000000000000000000000000000000;;			"os-extended-volumes:volumes_attached": [],
0000000000000000000000000000000000000000;;			"accessIPv4": "",
0000000000000000000000000000000000000000;;			"accessIPv6": "",
0000000000000000000000000000000000000000;;			"progress": 0,
0000000000000000000000000000000000000000;;			"OS-EXT-STS:power_state": 1,
0000000000000000000000000000000000000000;;			"config_drive": "",
0000000000000000000000000000000000000000;;			"metadata": {}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const ServerPasswordBody = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    "password": "xlozO3wLCBRWAa2yDjCCVx8vwNPypxnypmRYDa/zErlQ+EzPe1S/Gz6nfmC52mOlOSCRuUOmG7kqqgejPof6M7bOezS387zjq4LSvvwp28zUknzy4YzfFGhnHAdai3TxUJ26pfQCYrq8UTzmKF2Bq8ioSEtVVzM0A96pDh8W2i7BOz6MdoiVyiev/I1K2LsuipfxSJR7Wdke4zNXJjHHP2RfYsVbZ/k9ANu+Nz4iIH8/7Cacud/pphH7EjrY6a4RZNrjQskrhKYed0YERpotyjYk1eDtRe72GrSiXteqCM4biaQ5w3ruS+AcX//PXk3uJ5kC7d67fPXaVz4WaQRYMg=="
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ServerHerp is a Server struct that should correspond to the first result in ServerListBody.
0000000000000000000000000000000000000000;;		ServerHerp = Server{
0000000000000000000000000000000000000000;;			Status:  "ACTIVE",
0000000000000000000000000000000000000000;;			Updated: "2014-09-25T13:10:10Z",
0000000000000000000000000000000000000000;;			HostID:  "29d3c8c896a45aa4c34e52247875d7fefc3d94bbcc9f622b5d204362",
0000000000000000000000000000000000000000;;			Addresses: map[string]interface{}{
0000000000000000000000000000000000000000;;				"private": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"OS-EXT-IPS-MAC:mac_addr": "fa:16:3e:7c:1b:2b",
0000000000000000000000000000000000000000;;						"version":                 float64(4),
0000000000000000000000000000000000000000;;						"addr":                    "10.0.0.32",
0000000000000000000000000000000000000000;;						"OS-EXT-IPS:type":         "fixed",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Links: []interface{}{
0000000000000000000000000000000000000000;;				map[string]interface{}{
0000000000000000000000000000000000000000;;					"href": "http://104.130.131.164:8774/v2/fcad67a6189847c4aecfa3c81a05783b/servers/ef079b0c-e610-4dfb-b1aa-b49f07ac48e5",
0000000000000000000000000000000000000000;;					"rel":  "self",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				map[string]interface{}{
0000000000000000000000000000000000000000;;					"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/servers/ef079b0c-e610-4dfb-b1aa-b49f07ac48e5",
0000000000000000000000000000000000000000;;					"rel":  "bookmark",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Image: map[string]interface{}{
0000000000000000000000000000000000000000;;				"id": "f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;				"links": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/images/f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;						"rel":  "bookmark",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Flavor: map[string]interface{}{
0000000000000000000000000000000000000000;;				"id": "1",
0000000000000000000000000000000000000000;;				"links": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/flavors/1",
0000000000000000000000000000000000000000;;						"rel":  "bookmark",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ID:       "ef079b0c-e610-4dfb-b1aa-b49f07ac48e5",
0000000000000000000000000000000000000000;;			UserID:   "9349aff8be7545ac9d2f1d00999a23cd",
0000000000000000000000000000000000000000;;			Name:     "herp",
0000000000000000000000000000000000000000;;			Created:  "2014-09-25T13:10:02Z",
0000000000000000000000000000000000000000;;			TenantID: "fcad67a6189847c4aecfa3c81a05783b",
0000000000000000000000000000000000000000;;			Metadata: map[string]interface{}{},
0000000000000000000000000000000000000000;;			SecurityGroups: []map[string]interface{}{
0000000000000000000000000000000000000000;;				map[string]interface{}{
0000000000000000000000000000000000000000;;					"name": "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerDerp is a Server struct that should correspond to the second server in ServerListBody.
0000000000000000000000000000000000000000;;		ServerDerp = Server{
0000000000000000000000000000000000000000;;			Status:  "ACTIVE",
0000000000000000000000000000000000000000;;			Updated: "2014-09-25T13:04:49Z",
0000000000000000000000000000000000000000;;			HostID:  "29d3c8c896a45aa4c34e52247875d7fefc3d94bbcc9f622b5d204362",
0000000000000000000000000000000000000000;;			Addresses: map[string]interface{}{
0000000000000000000000000000000000000000;;				"private": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"OS-EXT-IPS-MAC:mac_addr": "fa:16:3e:9e:89:be",
0000000000000000000000000000000000000000;;						"version":                 float64(4),
0000000000000000000000000000000000000000;;						"addr":                    "10.0.0.31",
0000000000000000000000000000000000000000;;						"OS-EXT-IPS:type":         "fixed",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Links: []interface{}{
0000000000000000000000000000000000000000;;				map[string]interface{}{
0000000000000000000000000000000000000000;;					"href": "http://104.130.131.164:8774/v2/fcad67a6189847c4aecfa3c81a05783b/servers/9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;					"rel":  "self",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				map[string]interface{}{
0000000000000000000000000000000000000000;;					"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/servers/9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;					"rel":  "bookmark",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Image: map[string]interface{}{
0000000000000000000000000000000000000000;;				"id": "f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;				"links": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/images/f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;						"rel":  "bookmark",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Flavor: map[string]interface{}{
0000000000000000000000000000000000000000;;				"id": "1",
0000000000000000000000000000000000000000;;				"links": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"href": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/flavors/1",
0000000000000000000000000000000000000000;;						"rel":  "bookmark",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ID:       "9e5476bd-a4ec-4653-93d6-72c93aa682ba",
0000000000000000000000000000000000000000;;			UserID:   "9349aff8be7545ac9d2f1d00999a23cd",
0000000000000000000000000000000000000000;;			Name:     "derp",
0000000000000000000000000000000000000000;;			Created:  "2014-09-25T13:04:41Z",
0000000000000000000000000000000000000000;;			TenantID: "fcad67a6189847c4aecfa3c81a05783b",
0000000000000000000000000000000000000000;;			Metadata: map[string]interface{}{},
0000000000000000000000000000000000000000;;			SecurityGroups: []map[string]interface{}{
0000000000000000000000000000000000000000;;				map[string]interface{}{
0000000000000000000000000000000000000000;;					"name": "default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleServerCreationSuccessfully sets up the test server to respond to a server creation request
0000000000000000000000000000000000000000;;	// with a given response.
0000000000000000000000000000000000000000;;	func HandleServerCreationSuccessfully(t *testing.T, response string) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{
0000000000000000000000000000000000000000;;				"server": {
0000000000000000000000000000000000000000;;					"name": "derp",
0000000000000000000000000000000000000000;;					"imageRef": "f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;					"flavorRef": "1"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusAccepted)
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, response)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleServerListSuccessfully sets up the test server to respond to a server List request.
0000000000000000000000000000000000000000;;	func HandleServerListSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/detail", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			r.ParseForm()
0000000000000000000000000000000000000000;;			marker := r.Form.Get("marker")
0000000000000000000000000000000000000000;;			switch marker {
0000000000000000000000000000000000000000;;			case "":
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, ServerListBody)
0000000000000000000000000000000000000000;;			case "9e5476bd-a4ec-4653-93d6-72c93aa682ba":
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, `{ "servers": [] }`)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				t.Fatalf("/servers/detail invoked with unexpected marker=[%s]", marker)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleServerDeletionSuccessfully sets up the test server to respond to a server deletion request.
0000000000000000000000000000000000000000;;	func HandleServerDeletionSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/asdfasdfasdf", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "DELETE")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusNoContent)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleServerForceDeletionSuccessfully sets up the test server to respond to a server force deletion
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	func HandleServerForceDeletionSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/asdfasdfasdf/action", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{ "forceDelete": "" }`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusAccepted)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleServerGetSuccessfully sets up the test server to respond to a server Get request.
0000000000000000000000000000000000000000;;	func HandleServerGetSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Accept", "application/json")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, SingleServerBody)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleServerUpdateSuccessfully sets up the test server to respond to a server Update request.
0000000000000000000000000000000000000000;;	func HandleServerUpdateSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "PUT")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Accept", "application/json")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Content-Type", "application/json")
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{ "server": { "name": "new-name" } }`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, SingleServerBody)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleAdminPasswordChangeSuccessfully sets up the test server to respond to a server password
0000000000000000000000000000000000000000;;	// change request.
0000000000000000000000000000000000000000;;	func HandleAdminPasswordChangeSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/action", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{ "changePassword": { "adminPass": "new-password" } }`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusAccepted)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleRebootSuccessfully sets up the test server to respond to a reboot request with success.
0000000000000000000000000000000000000000;;	func HandleRebootSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/action", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{ "reboot": { "type": "SOFT" } }`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusAccepted)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleRebuildSuccessfully sets up the test server to respond to a rebuild request with success.
0000000000000000000000000000000000000000;;	func HandleRebuildSuccessfully(t *testing.T, response string) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/action", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					"rebuild": {
0000000000000000000000000000000000000000;;						"name": "new-name",
0000000000000000000000000000000000000000;;						"adminPass": "swordfish",
0000000000000000000000000000000000000000;;						"imageRef": "http://104.130.131.164:8774/fcad67a6189847c4aecfa3c81a05783b/images/f90f6034-2570-4974-8351-6b49732ef2eb",
0000000000000000000000000000000000000000;;						"accessIPv4": "1.2.3.4"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusAccepted)
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, response)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleServerRescueSuccessfully sets up the test server to respond to a server Rescue request.
0000000000000000000000000000000000000000;;	func HandleServerRescueSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/action", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{ "rescue": { "adminPass": "1234567890" } }`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write([]byte(`{ "adminPass": "1234567890" }`))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleMetadatumGetSuccessfully sets up the test server to respond to a metadatum Get request.
0000000000000000000000000000000000000000;;	func HandleMetadatumGetSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/metadata/foo", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Accept", "application/json")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.Write([]byte(`{ "meta": {"foo":"bar"}}`))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleMetadatumCreateSuccessfully sets up the test server to respond to a metadatum Create request.
0000000000000000000000000000000000000000;;	func HandleMetadatumCreateSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/metadata/foo", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "PUT")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{
0000000000000000000000000000000000000000;;				"meta": {
0000000000000000000000000000000000000000;;					"foo": "bar"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.Write([]byte(`{ "meta": {"foo":"bar"}}`))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleMetadatumDeleteSuccessfully sets up the test server to respond to a metadatum Delete request.
0000000000000000000000000000000000000000;;	func HandleMetadatumDeleteSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/metadata/foo", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "DELETE")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusNoContent)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleMetadataGetSuccessfully sets up the test server to respond to a metadata Get request.
0000000000000000000000000000000000000000;;	func HandleMetadataGetSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/metadata", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Accept", "application/json")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write([]byte(`{ "metadata": {"foo":"bar", "this":"that"}}`))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleMetadataResetSuccessfully sets up the test server to respond to a metadata Create request.
0000000000000000000000000000000000000000;;	func HandleMetadataResetSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/metadata", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "PUT")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{
0000000000000000000000000000000000000000;;					"metadata": {
0000000000000000000000000000000000000000;;						"foo": "bar",
0000000000000000000000000000000000000000;;						"this": "that"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.Write([]byte(`{ "metadata": {"foo":"bar", "this":"that"}}`))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleMetadataUpdateSuccessfully sets up the test server to respond to a metadata Update request.
0000000000000000000000000000000000000000;;	func HandleMetadataUpdateSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/metadata", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestJSONRequest(t, r, `{
0000000000000000000000000000000000000000;;					"metadata": {
0000000000000000000000000000000000000000;;						"foo": "baz",
0000000000000000000000000000000000000000;;						"this": "those"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.Write([]byte(`{ "metadata": {"foo":"baz", "this":"those"}}`))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAddressesExpected represents an expected repsonse from a ListAddresses request.
0000000000000000000000000000000000000000;;	var ListAddressesExpected = map[string][]Address{
0000000000000000000000000000000000000000;;		"public": []Address{
0000000000000000000000000000000000000000;;			Address{
0000000000000000000000000000000000000000;;				Version: 4,
0000000000000000000000000000000000000000;;				Address: "80.56.136.39",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Address{
0000000000000000000000000000000000000000;;				Version: 6,
0000000000000000000000000000000000000000;;				Address: "2001:4800:790e:510:be76:4eff:fe04:82a8",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		"private": []Address{
0000000000000000000000000000000000000000;;			Address{
0000000000000000000000000000000000000000;;				Version: 4,
0000000000000000000000000000000000000000;;				Address: "10.880.3.154",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleAddressListSuccessfully sets up the test server to respond to a ListAddresses request.
0000000000000000000000000000000000000000;;	func HandleAddressListSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/asdfasdfasdf/ips", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, `{
0000000000000000000000000000000000000000;;				"addresses": {
0000000000000000000000000000000000000000;;					"public": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"version": 4,
0000000000000000000000000000000000000000;;						"addr": "50.56.176.35"
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"version": 6,
0000000000000000000000000000000000000000;;						"addr": "2001:4800:780e:510:be76:4eff:fe04:84a8"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					],
0000000000000000000000000000000000000000;;					"private": [
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"version": 4,
0000000000000000000000000000000000000000;;						"addr": "10.180.3.155"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					]
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}`)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListNetworkAddressesExpected represents an expected repsonse from a ListAddressesByNetwork request.
0000000000000000000000000000000000000000;;	var ListNetworkAddressesExpected = []Address{
0000000000000000000000000000000000000000;;		Address{
0000000000000000000000000000000000000000;;			Version: 4,
0000000000000000000000000000000000000000;;			Address: "50.56.176.35",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		Address{
0000000000000000000000000000000000000000;;			Version: 6,
0000000000000000000000000000000000000000;;			Address: "2001:4800:780e:510:be76:4eff:fe04:84a8",
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleNetworkAddressListSuccessfully sets up the test server to respond to a ListAddressesByNetwork request.
0000000000000000000000000000000000000000;;	func HandleNetworkAddressListSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/asdfasdfasdf/ips/public", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.Header().Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, `{
0000000000000000000000000000000000000000;;				"public": [
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					"version": 4,
0000000000000000000000000000000000000000;;					"addr": "50.56.176.35"
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						"version": 6,
0000000000000000000000000000000000000000;;						"addr": "2001:4800:780e:510:be76:4eff:fe04:84a8"
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				]
0000000000000000000000000000000000000000;;				}`)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleCreateServerImageSuccessfully sets up the test server to respond to a TestCreateServerImage request.
0000000000000000000000000000000000000000;;	func HandleCreateServerImageSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/serverimage/action", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "POST")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			w.Header().Add("Location", "https://0.0.0.0/images/xxxx-xxxxx-xxxxx-xxxx")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusAccepted)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandlePasswordGetSuccessfully sets up the test server to respond to a password Get request.
0000000000000000000000000000000000000000;;	func HandlePasswordGetSuccessfully(t *testing.T) {
0000000000000000000000000000000000000000;;		th.Mux.HandleFunc("/servers/1234asdf/os-server-password", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			th.TestMethod(t, r, "GET")
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "X-Auth-Token", client.TokenID)
0000000000000000000000000000000000000000;;			th.TestHeader(t, r, "Accept", "application/json")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, ServerPasswordBody)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
