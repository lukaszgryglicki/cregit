0000000000000000000000000000000000000000;;	package bootfromvolume
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/bootfromvolume/requests.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/bootfromvolume/requests.go][vendor/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/bootfromvolume/requests.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SourceType represents the type of medium being used to create the volume.
0000000000000000000000000000000000000000;;	type SourceType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Volume   SourceType = "volume"
0000000000000000000000000000000000000000;;		Snapshot SourceType = "snapshot"
0000000000000000000000000000000000000000;;		Image    SourceType = "image"
0000000000000000000000000000000000000000;;		Blank    SourceType = "blank"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlockDevice is a structure with options for booting a server instance
0000000000000000000000000000000000000000;;	// from a volume. The volume may be created from an image, snapshot, or another
0000000000000000000000000000000000000000;;	// volume.
0000000000000000000000000000000000000000;;	type BlockDevice struct {
0000000000000000000000000000000000000000;;		// BootIndex [optional] is the boot index. It defaults to 0.
0000000000000000000000000000000000000000;;		BootIndex int `json:"boot_index"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DeleteOnTermination [optional] specifies whether or not to delete the attached volume
0000000000000000000000000000000000000000;;		// when the server is deleted. Defaults to `false`.
0000000000000000000000000000000000000000;;		DeleteOnTermination bool `json:"delete_on_termination"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DestinationType [optional] is the type that gets created. Possible values are "volume"
0000000000000000000000000000000000000000;;		// and "local".
0000000000000000000000000000000000000000;;		DestinationType string `json:"destination_type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GuestFormat [optional] specifies the format of the block device.
0000000000000000000000000000000000000000;;		GuestFormat string `json:"guest_format"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SourceType [required] must be one of: "volume", "snapshot", "image".
0000000000000000000000000000000000000000;;		SourceType SourceType `json:"source_type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UUID [required] is the unique identifier for the volume, snapshot, or image (see above)
0000000000000000000000000000000000000000;;		UUID string `json:"uuid"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeSize [optional] is the size of the volume to create (in gigabytes).
0000000000000000000000000000000000000000;;		VolumeSize int `json:"volume_size"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOptsExt is a structure that extends the server `CreateOpts` structure
0000000000000000000000000000000000000000;;	// by allowing for a block device mapping.
0000000000000000000000000000000000000000;;	type CreateOptsExt struct {
0000000000000000000000000000000000000000;;		servers.CreateOptsBuilder
0000000000000000000000000000000000000000;;		BlockDevice []BlockDevice `json:"block_device_mapping_v2,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToServerCreateMap adds the block device mapping option to the base server
0000000000000000000000000000000000000000;;	// creation options.
0000000000000000000000000000000000000000;;	func (opts CreateOptsExt) ToServerCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		base, err := opts.CreateOptsBuilder.ToServerCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(opts.BlockDevice) == 0 {
0000000000000000000000000000000000000000;;			return nil, errors.New("Required fields UUID and SourceType not set.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverMap := base["server"].(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		blockDevice := make([]map[string]interface{}, len(opts.BlockDevice))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, bd := range opts.BlockDevice {
0000000000000000000000000000000000000000;;			if string(bd.SourceType) == "" {
0000000000000000000000000000000000000000;;				return nil, errors.New("SourceType must be one of: volume, image, snapshot.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			blockDevice[i] = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			blockDevice[i]["source_type"] = bd.SourceType
0000000000000000000000000000000000000000;;			blockDevice[i]["boot_index"] = strconv.Itoa(bd.BootIndex)
0000000000000000000000000000000000000000;;			blockDevice[i]["delete_on_termination"] = strconv.FormatBool(bd.DeleteOnTermination)
0000000000000000000000000000000000000000;;			if bd.VolumeSize > 0 {
0000000000000000000000000000000000000000;;				blockDevice[i]["volume_size"] = strconv.Itoa(bd.VolumeSize)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if bd.UUID != "" {
0000000000000000000000000000000000000000;;				blockDevice[i]["uuid"] = bd.UUID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if bd.DestinationType != "" {
0000000000000000000000000000000000000000;;				blockDevice[i]["destination_type"] = bd.DestinationType
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if bd.GuestFormat != "" {
0000000000000000000000000000000000000000;;				blockDevice[i]["guest_format"] = bd.GuestFormat
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		serverMap["block_device_mapping_v2"] = blockDevice
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return base, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create requests the creation of a server from the given block device mapping.
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, opts servers.CreateOptsBuilder) servers.CreateResult {
0000000000000000000000000000000000000000;;		var res servers.CreateResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqBody, err := opts.ToServerCreateMap()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			res.Err = err
0000000000000000000000000000000000000000;;			return res
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delete imageName and flavorName that come from ToServerCreateMap().
0000000000000000000000000000000000000000;;		// As of Liberty, Boot From Volume is failing if they are passed.
0000000000000000000000000000000000000000;;		delete(reqBody["server"].(map[string]interface{}), "imageName")
0000000000000000000000000000000000000000;;		delete(reqBody["server"].(map[string]interface{}), "flavorName")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, res.Err = client.Post(createURL(client), reqBody, &res.Body, &gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			OkCodes: []int{200, 202},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
