0000000000000000000000000000000000000000;;	package openstack
5ee9c53e7b694ff752a75066a2192058fc5b79ef;Godeps/_workspace/src/github.com/rackspace/gophercloud/osutil/auth.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/osutil/auth.go][vendor/github.com/rackspace/gophercloud/openstack/auth_env.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var nilOptions = gophercloud.AuthOptions{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrNoAuthUrl, ErrNoUsername, and ErrNoPassword errors indicate of the required OS_AUTH_URL, OS_USERNAME, or OS_PASSWORD
0000000000000000000000000000000000000000;;	// environment variables, respectively, remain undefined.  See the AuthOptions() function for more details.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNoAuthURL  = fmt.Errorf("Environment variable OS_AUTH_URL needs to be set.")
0000000000000000000000000000000000000000;;		ErrNoUsername = fmt.Errorf("Environment variable OS_USERNAME, OS_USERID, or OS_TOKEN needs to be set.")
0000000000000000000000000000000000000000;;		ErrNoPassword = fmt.Errorf("Environment variable OS_PASSWORD or OS_TOKEN needs to be set.")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptionsFromEnv fills out an AuthOptions structure from the environment
0000000000000000000000000000000000000000;;	// variables: OS_AUTH_URL, OS_USERNAME, OS_USERID, OS_PASSWORD, OS_TENANT_ID,
0000000000000000000000000000000000000000;;	// OS_TENANT_NAME, OS_DOMAIN_ID, OS_DOMAIN_NAME, OS_TOKEN.  It checks that
0000000000000000000000000000000000000000;;	// (1) OS_AUTH_URL is set, (2) OS_USERNAME, OS_USERID, or OS_TOKEN is set,
0000000000000000000000000000000000000000;;	// (3) OS_PASSWORD or OS_TOKEN is set.
0000000000000000000000000000000000000000;;	func AuthOptionsFromEnv() (gophercloud.AuthOptions, error) {
0000000000000000000000000000000000000000;;		authURL := os.Getenv("OS_AUTH_URL")
0000000000000000000000000000000000000000;;		username := os.Getenv("OS_USERNAME")
0000000000000000000000000000000000000000;;		userID := os.Getenv("OS_USERID")
0000000000000000000000000000000000000000;;		password := os.Getenv("OS_PASSWORD")
0000000000000000000000000000000000000000;;		tenantID := os.Getenv("OS_TENANT_ID")
0000000000000000000000000000000000000000;;		tenantName := os.Getenv("OS_TENANT_NAME")
0000000000000000000000000000000000000000;;		domainID := os.Getenv("OS_DOMAIN_ID")
0000000000000000000000000000000000000000;;		domainName := os.Getenv("OS_DOMAIN_NAME")
0000000000000000000000000000000000000000;;		tokenID := os.Getenv("OS_TOKEN")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if authURL == "" {
0000000000000000000000000000000000000000;;			return nilOptions, ErrNoAuthURL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if username == "" && userID == "" && tokenID == "" {
0000000000000000000000000000000000000000;;			return nilOptions, ErrNoUsername
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if password == "" && tokenID == "" {
0000000000000000000000000000000000000000;;			return nilOptions, ErrNoPassword
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ao := gophercloud.AuthOptions{
0000000000000000000000000000000000000000;;			IdentityEndpoint: authURL,
0000000000000000000000000000000000000000;;			UserID:           userID,
0000000000000000000000000000000000000000;;			Username:         username,
0000000000000000000000000000000000000000;;			Password:         password,
0000000000000000000000000000000000000000;;			TenantID:         tenantID,
0000000000000000000000000000000000000000;;			TenantName:       tenantName,
0000000000000000000000000000000000000000;;			DomainID:         domainID,
0000000000000000000000000000000000000000;;			DomainName:       domainName,
0000000000000000000000000000000000000000;;			TokenID:          tokenID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ao, nil
0000000000000000000000000000000000000000;;	}
