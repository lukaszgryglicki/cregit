0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package gophercloud provides a multi-vendor interface to OpenStack-compatible
0000000000000000000000000000000000000000;;	clouds. The library has a three-level hierarchy: providers, services, and
0000000000000000000000000000000000000000;;	resources.
6e2653a484377c9b7931f70d0197def098cf9ae1;Godeps/_workspace/src/github.com/rackspace/gophercloud/doc.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/doc.go][vendor/github.com/rackspace/gophercloud/doc.go];	
0000000000000000000000000000000000000000;;	Provider structs represent the service providers that offer and manage a
0000000000000000000000000000000000000000;;	collection of services. Examples of providers include: OpenStack, Rackspace,
0000000000000000000000000000000000000000;;	HP. These are defined like so:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  opts := gophercloud.AuthOptions{
0000000000000000000000000000000000000000;;	    IdentityEndpoint: "https://my-openstack.com:5000/v2.0",
0000000000000000000000000000000000000000;;	    Username: "{username}",
0000000000000000000000000000000000000000;;	    Password: "{password}",
0000000000000000000000000000000000000000;;	    TenantID: "{tenant_id}",
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  provider, err := openstack.AuthenticatedClient(opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Service structs are specific to a provider and handle all of the logic and
0000000000000000000000000000000000000000;;	operations for a particular OpenStack service. Examples of services include:
0000000000000000000000000000000000000000;;	Compute, Object Storage, Block Storage. In order to define one, you need to
0000000000000000000000000000000000000000;;	pass in the parent provider, like so:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  opts := gophercloud.EndpointOpts{Region: "RegionOne"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  client := openstack.NewComputeV2(provider, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Resource structs are the domain models that services make use of in order
0000000000000000000000000000000000000000;;	to work with and represent the state of API resources:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  server, err := servers.Get(client, "{serverId}").Extract()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Intermediate Result structs are returned for API operations, which allow
0000000000000000000000000000000000000000;;	generic access to the HTTP headers, response body, and any errors associated
0000000000000000000000000000000000000000;;	with the network transaction. To turn a result into a usable resource struct,
0000000000000000000000000000000000000000;;	you must call the Extract method which is chained to the response, or an
0000000000000000000000000000000000000000;;	Extract function from an applicable extension:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  result := servers.Get(client, "{serverId}")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  // Attempt to extract the disk configuration from the OS-DCF disk config
0000000000000000000000000000000000000000;;	  // extension:
0000000000000000000000000000000000000000;;	  config, err := diskconfig.ExtractGet(result)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	All requests that enumerate a collection return a Pager struct that is used to
0000000000000000000000000000000000000000;;	iterate through the results one page at a time. Use the EachPage method on that
0000000000000000000000000000000000000000;;	Pager to handle each successive Page in a closure, then use the appropriate
0000000000000000000000000000000000000000;;	extraction method from that request's package to interpret that Page as a slice
0000000000000000000000000000000000000000;;	of results:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  err := servers.List(client, nil).EachPage(func (page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;	    s, err := servers.ExtractServers(page)
0000000000000000000000000000000000000000;;	    if err != nil {
0000000000000000000000000000000000000000;;	      return false, err
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // Handle the []servers.Server slice.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // Return "false" or an error to prematurely stop fetching new pages.
0000000000000000000000000000000000000000;;	    return true, nil
0000000000000000000000000000000000000000;;	  })
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This top-level package contains utility functions and data types that are used
0000000000000000000000000000000000000000;;	throughout the provider and service packages. Of particular note for end users
0000000000000000000000000000000000000000;;	are the AuthOptions and EndpointOpts structs.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package gophercloud
