0000000000000000000000000000000000000000;;	package gophercloud
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/provider_client.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/provider_client.go][vendor/github.com/rackspace/gophercloud/provider_client.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultUserAgent is the default User-Agent string set in the request header.
0000000000000000000000000000000000000000;;	const DefaultUserAgent = "gophercloud/1.0.0"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UserAgent represents a User-Agent header.
0000000000000000000000000000000000000000;;	type UserAgent struct {
0000000000000000000000000000000000000000;;		// prepend is the slice of User-Agent strings to prepend to DefaultUserAgent.
0000000000000000000000000000000000000000;;		// All the strings to prepend are accumulated and prepended in the Join method.
0000000000000000000000000000000000000000;;		prepend []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Prepend prepends a user-defined string to the default User-Agent string. Users
0000000000000000000000000000000000000000;;	// may pass in one or more strings to prepend.
0000000000000000000000000000000000000000;;	func (ua *UserAgent) Prepend(s ...string) {
0000000000000000000000000000000000000000;;		ua.prepend = append(s, ua.prepend...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Join concatenates all the user-defined User-Agend strings with the default
0000000000000000000000000000000000000000;;	// Gophercloud User-Agent string.
0000000000000000000000000000000000000000;;	func (ua *UserAgent) Join() string {
0000000000000000000000000000000000000000;;		uaSlice := append(ua.prepend, DefaultUserAgent)
0000000000000000000000000000000000000000;;		return strings.Join(uaSlice, " ")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProviderClient stores details that are required to interact with any
0000000000000000000000000000000000000000;;	// services within a specific provider's API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generally, you acquire a ProviderClient by calling the NewClient method in
0000000000000000000000000000000000000000;;	// the appropriate provider's child package, providing whatever authentication
0000000000000000000000000000000000000000;;	// credentials are required.
0000000000000000000000000000000000000000;;	type ProviderClient struct {
0000000000000000000000000000000000000000;;		// IdentityBase is the base URL used for a particular provider's identity
0000000000000000000000000000000000000000;;		// service - it will be used when issuing authenticatation requests. It
0000000000000000000000000000000000000000;;		// should point to the root resource of the identity service, not a specific
0000000000000000000000000000000000000000;;		// identity version.
0000000000000000000000000000000000000000;;		IdentityBase string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IdentityEndpoint is the identity endpoint. This may be a specific version
0000000000000000000000000000000000000000;;		// of the identity service. If this is the case, this endpoint is used rather
0000000000000000000000000000000000000000;;		// than querying versions first.
0000000000000000000000000000000000000000;;		IdentityEndpoint string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TokenID is the ID of the most recently issued valid token.
0000000000000000000000000000000000000000;;		TokenID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EndpointLocator describes how this provider discovers the endpoints for
0000000000000000000000000000000000000000;;		// its constituent services.
0000000000000000000000000000000000000000;;		EndpointLocator EndpointLocator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HTTPClient allows users to interject arbitrary http, https, or other transit behaviors.
0000000000000000000000000000000000000000;;		HTTPClient http.Client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserAgent represents the User-Agent header in the HTTP request.
0000000000000000000000000000000000000000;;		UserAgent UserAgent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReauthFunc is the function used to re-authenticate the user if the request
0000000000000000000000000000000000000000;;		// fails with a 401 HTTP response code. This a needed because there may be multiple
0000000000000000000000000000000000000000;;		// authentication functions for different Identity service versions.
0000000000000000000000000000000000000000;;		ReauthFunc func() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatedHeaders returns a map of HTTP headers that are common for all
0000000000000000000000000000000000000000;;	// authenticated service requests.
0000000000000000000000000000000000000000;;	func (client *ProviderClient) AuthenticatedHeaders() map[string]string {
0000000000000000000000000000000000000000;;		if client.TokenID == "" {
0000000000000000000000000000000000000000;;			return map[string]string{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return map[string]string{"X-Auth-Token": client.TokenID}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestOpts customizes the behavior of the provider.Request() method.
0000000000000000000000000000000000000000;;	type RequestOpts struct {
0000000000000000000000000000000000000000;;		// JSONBody, if provided, will be encoded as JSON and used as the body of the HTTP request. The
0000000000000000000000000000000000000000;;		// content type of the request will default to "application/json" unless overridden by MoreHeaders.
0000000000000000000000000000000000000000;;		// It's an error to specify both a JSONBody and a RawBody.
0000000000000000000000000000000000000000;;		JSONBody interface{}
0000000000000000000000000000000000000000;;		// RawBody contains an io.ReadSeeker that will be consumed by the request directly. No content-type
0000000000000000000000000000000000000000;;		// will be set unless one is provided explicitly by MoreHeaders.
0000000000000000000000000000000000000000;;		RawBody io.ReadSeeker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// JSONResponse, if provided, will be populated with the contents of the response body parsed as
0000000000000000000000000000000000000000;;		// JSON.
0000000000000000000000000000000000000000;;		JSONResponse interface{}
0000000000000000000000000000000000000000;;		// OkCodes contains a list of numeric HTTP status codes that should be interpreted as success. If
0000000000000000000000000000000000000000;;		// the response has a different code, an error will be returned.
0000000000000000000000000000000000000000;;		OkCodes []int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MoreHeaders specifies additional HTTP headers to be provide on the request. If a header is
0000000000000000000000000000000000000000;;		// provided with a blank value (""), that header will be *omitted* instead: use this to suppress
0000000000000000000000000000000000000000;;		// the default Accept header or an inferred Content-Type, for example.
0000000000000000000000000000000000000000;;		MoreHeaders map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts *RequestOpts) setBody(body interface{}) {
0000000000000000000000000000000000000000;;		if v, ok := (body).(io.ReadSeeker); ok {
0000000000000000000000000000000000000000;;			opts.RawBody = v
0000000000000000000000000000000000000000;;		} else if body != nil {
0000000000000000000000000000000000000000;;			opts.JSONBody = body
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnexpectedResponseCodeError is returned by the Request method when a response code other than
0000000000000000000000000000000000000000;;	// those listed in OkCodes is encountered.
0000000000000000000000000000000000000000;;	type UnexpectedResponseCodeError struct {
0000000000000000000000000000000000000000;;		URL      string
0000000000000000000000000000000000000000;;		Method   string
0000000000000000000000000000000000000000;;		Expected []int
0000000000000000000000000000000000000000;;		Actual   int
0000000000000000000000000000000000000000;;		Body     []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (err *UnexpectedResponseCodeError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf(
0000000000000000000000000000000000000000;;			"Expected HTTP response code %v when accessing [%s %s], but got %d instead\n%s",
0000000000000000000000000000000000000000;;			err.Expected, err.Method, err.URL, err.Actual, err.Body,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var applicationJSON = "application/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Request performs an HTTP request using the ProviderClient's current HTTPClient. An authentication
0000000000000000000000000000000000000000;;	// header will automatically be provided.
0000000000000000000000000000000000000000;;	func (client *ProviderClient) Request(method, url string, options RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		var body io.ReadSeeker
0000000000000000000000000000000000000000;;		var contentType *string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Derive the content body by either encoding an arbitrary object as JSON, or by taking a provided
0000000000000000000000000000000000000000;;		// io.ReadSeeker as-is. Default the content-type to application/json.
0000000000000000000000000000000000000000;;		if options.JSONBody != nil {
0000000000000000000000000000000000000000;;			if options.RawBody != nil {
0000000000000000000000000000000000000000;;				panic("Please provide only one of JSONBody or RawBody to gophercloud.Request().")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			rendered, err := json.Marshal(options.JSONBody)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			body = bytes.NewReader(rendered)
0000000000000000000000000000000000000000;;			contentType = &applicationJSON
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.RawBody != nil {
0000000000000000000000000000000000000000;;			body = options.RawBody
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Construct the http.Request.
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, url, body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Populate the request headers. Apply options.MoreHeaders last, to give the caller the chance to
0000000000000000000000000000000000000000;;		// modify or omit any header.
0000000000000000000000000000000000000000;;		if contentType != nil {
0000000000000000000000000000000000000000;;			req.Header.Set("Content-Type", *contentType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Accept", applicationJSON)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range client.AuthenticatedHeaders() {
0000000000000000000000000000000000000000;;			req.Header.Add(k, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set the User-Agent header
0000000000000000000000000000000000000000;;		req.Header.Set("User-Agent", client.UserAgent.Join())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.MoreHeaders != nil {
0000000000000000000000000000000000000000;;			for k, v := range options.MoreHeaders {
0000000000000000000000000000000000000000;;				if v != "" {
0000000000000000000000000000000000000000;;					req.Header.Set(k, v)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					req.Header.Del(k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set connection parameter to close the connection immediately when we've got the response
0000000000000000000000000000000000000000;;		req.Close = true
0000000000000000000000000000000000000000;;		
0000000000000000000000000000000000000000;;		// Issue the request.
0000000000000000000000000000000000000000;;		resp, err := client.HTTPClient.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.StatusCode == http.StatusUnauthorized {
0000000000000000000000000000000000000000;;			if client.ReauthFunc != nil {
0000000000000000000000000000000000000000;;				err = client.ReauthFunc()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Error trying to re-authenticate: %s", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if options.RawBody != nil {
0000000000000000000000000000000000000000;;					options.RawBody.Seek(0, 0)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				resp.Body.Close()
0000000000000000000000000000000000000000;;				resp, err = client.Request(method, url, options)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Successfully re-authenticated, but got error executing request: %s", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return resp, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Allow default OkCodes if none explicitly set
0000000000000000000000000000000000000000;;		if options.OkCodes == nil {
0000000000000000000000000000000000000000;;			options.OkCodes = defaultOkCodes(method)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validate the HTTP response status.
0000000000000000000000000000000000000000;;		var ok bool
0000000000000000000000000000000000000000;;		for _, code := range options.OkCodes {
0000000000000000000000000000000000000000;;			if resp.StatusCode == code {
0000000000000000000000000000000000000000;;				ok = true
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			body, _ := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;			resp.Body.Close()
0000000000000000000000000000000000000000;;			return resp, &UnexpectedResponseCodeError{
0000000000000000000000000000000000000000;;				URL:      url,
0000000000000000000000000000000000000000;;				Method:   method,
0000000000000000000000000000000000000000;;				Expected: options.OkCodes,
0000000000000000000000000000000000000000;;				Actual:   resp.StatusCode,
0000000000000000000000000000000000000000;;				Body:     body,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parse the response body as JSON, if requested to do so.
0000000000000000000000000000000000000000;;		if options.JSONResponse != nil {
0000000000000000000000000000000000000000;;			defer resp.Body.Close()
0000000000000000000000000000000000000000;;			if err := json.NewDecoder(resp.Body).Decode(options.JSONResponse); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultOkCodes(method string) []int {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case method == "GET":
0000000000000000000000000000000000000000;;			return []int{200}
0000000000000000000000000000000000000000;;		case method == "POST":
0000000000000000000000000000000000000000;;			return []int{201, 202}
0000000000000000000000000000000000000000;;		case method == "PUT":
0000000000000000000000000000000000000000;;			return []int{201, 202}
0000000000000000000000000000000000000000;;		case method == "PATCH":
0000000000000000000000000000000000000000;;			return []int{200, 204}
0000000000000000000000000000000000000000;;		case method == "DELETE":
0000000000000000000000000000000000000000;;			return []int{202, 204}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return []int{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *ProviderClient) Get(url string, JSONResponse *interface{}, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = &RequestOpts{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if JSONResponse != nil {
0000000000000000000000000000000000000000;;			opts.JSONResponse = JSONResponse
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client.Request("GET", url, *opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *ProviderClient) Post(url string, body interface{}, JSONResponse *interface{}, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = &RequestOpts{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		opts.setBody(body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if JSONResponse != nil {
0000000000000000000000000000000000000000;;			opts.JSONResponse = JSONResponse
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client.Request("POST", url, *opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *ProviderClient) Put(url string, body interface{}, JSONResponse *interface{}, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = &RequestOpts{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		opts.setBody(body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if JSONResponse != nil {
0000000000000000000000000000000000000000;;			opts.JSONResponse = JSONResponse
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client.Request("PUT", url, *opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *ProviderClient) Patch(url string, JSONBody interface{}, JSONResponse *interface{}, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = &RequestOpts{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if v, ok := (JSONBody).(io.ReadSeeker); ok {
0000000000000000000000000000000000000000;;			opts.RawBody = v
0000000000000000000000000000000000000000;;		} else if JSONBody != nil {
0000000000000000000000000000000000000000;;			opts.JSONBody = JSONBody
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if JSONResponse != nil {
0000000000000000000000000000000000000000;;			opts.JSONResponse = JSONResponse
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client.Request("PATCH", url, *opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *ProviderClient) Delete(url string, opts *RequestOpts) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			opts = &RequestOpts{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client.Request("DELETE", url, *opts)
0000000000000000000000000000000000000000;;	}
