0000000000000000000000000000000000000000;;	package gophercloud
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/service_client.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/service_client.go][vendor/github.com/rackspace/gophercloud/service_client.go];	
0000000000000000000000000000000000000000;;	import "strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceClient stores details required to interact with a specific service API implemented by a provider.
0000000000000000000000000000000000000000;;	// Generally, you'll acquire these by calling the appropriate `New` method on a ProviderClient.
0000000000000000000000000000000000000000;;	type ServiceClient struct {
0000000000000000000000000000000000000000;;		// ProviderClient is a reference to the provider that implements this service.
0000000000000000000000000000000000000000;;		*ProviderClient
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Endpoint is the base URL of the service's API, acquired from a service catalog.
0000000000000000000000000000000000000000;;		// It MUST end with a /.
0000000000000000000000000000000000000000;;		Endpoint string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceBase is the base URL shared by the resources within a service's API. It should include
0000000000000000000000000000000000000000;;		// the API version and, like Endpoint, MUST end with a / if set. If not set, the Endpoint is used
0000000000000000000000000000000000000000;;		// as-is, instead.
0000000000000000000000000000000000000000;;		ResourceBase string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceBaseURL returns the base URL of any resources used by this service. It MUST end with a /.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) ResourceBaseURL() string {
0000000000000000000000000000000000000000;;		if client.ResourceBase != "" {
0000000000000000000000000000000000000000;;			return client.ResourceBase
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client.Endpoint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceURL constructs a URL for a resource belonging to this provider.
0000000000000000000000000000000000000000;;	func (client *ServiceClient) ServiceURL(parts ...string) string {
0000000000000000000000000000000000000000;;		return client.ResourceBaseURL() + strings.Join(parts, "/")
0000000000000000000000000000000000000000;;	}
