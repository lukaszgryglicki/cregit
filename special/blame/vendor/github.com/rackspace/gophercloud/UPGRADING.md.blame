0000000000000000000000000000000000000000;;	# Upgrading to v1.0.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	With the arrival of this new major version increment, the unfortunate news is
0000000000000000000000000000000000000000;;	that breaking changes have been introduced to existing services. The API
0000000000000000000000000000000000000000;;	has been completely rewritten from the ground up to make the library more
0000000000000000000000000000000000000000;;	extensible, maintainable and easy-to-use.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Below we've compiled upgrade instructions for the various services that
0000000000000000000000000000000000000000;;	existed before. If you have a specific issue that is not addressed below,
0000000000000000000000000000000000000000;;	please [submit an issue](/issues/new) or
0000000000000000000000000000000000000000;;	[e-mail our support team](https://developer.rackspace.com/support/).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* [Authentication](#authentication)
0000000000000000000000000000000000000000;;	* [Servers](#servers)
0000000000000000000000000000000000000000;;	  * [List servers](#list-servers)
0000000000000000000000000000000000000000;;	  * [Get server details](#get-server-details)
0000000000000000000000000000000000000000;;	  * [Create server](#create-server)
0000000000000000000000000000000000000000;;	  * [Resize server](#resize-server)
0000000000000000000000000000000000000000;;	  * [Reboot server](#reboot-server)
0000000000000000000000000000000000000000;;	  * [Update server](#update-server)
0000000000000000000000000000000000000000;;	  * [Rebuild server](#rebuild-server)
0000000000000000000000000000000000000000;;	  * [Change admin password](#change-admin-password)
0000000000000000000000000000000000000000;;	  * [Delete server](#delete-server)
0000000000000000000000000000000000000000;;	  * [Rescue server](#rescue-server)
0000000000000000000000000000000000000000;;	* [Images and flavors](#images-and-flavors)
0000000000000000000000000000000000000000;;	  * [List images](#list-images)
0000000000000000000000000000000000000000;;	  * [List flavors](#list-flavors)
0000000000000000000000000000000000000000;;	  * [Create/delete image](#createdelete-image)
0000000000000000000000000000000000000000;;	* [Other](#other)
0000000000000000000000000000000000000000;;	  * [List keypairs](#list-keypairs)
0000000000000000000000000000000000000000;;	  * [Create/delete keypair](#createdelete-keypair)
0000000000000000000000000000000000000000;;	  * [List IP addresses](#list-ip-addresses)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Authentication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	One of the major differences that this release introduces is the level of
0000000000000000000000000000000000000000;;	sub-packaging to differentiate between services and providers. You now have
0000000000000000000000000000000000000000;;	the option of authenticating with OpenStack and other providers (like Rackspace).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To authenticate with a vanilla OpenStack installation, you can either specify
0000000000000000000000000000000000000000;;	your credentials like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/openstack"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	opts := gophercloud.AuthOptions{
0000000000000000000000000000000000000000;;	  IdentityEndpoint: "https://my-openstack.com:5000/v2.0",
0000000000000000000000000000000000000000;;	  Username: "{username}",
0000000000000000000000000000000000000000;;	  Password: "{password}",
0000000000000000000000000000000000000000;;	  TenantID: "{tenant_id}",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Or have them pulled in through environment variables, like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	opts, err := openstack.AuthOptionsFromEnv()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once you have your `AuthOptions` struct, you pass it in to get back a `Provider`,
0000000000000000000000000000000000000000;;	like so:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	provider, err := openstack.AuthenticatedClient(opts)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This provider is the top-level structure that all services are created from.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Servers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Before you can interact with the Compute API, you need to retrieve a
0000000000000000000000000000000000000000;;	`gophercloud.ServiceClient`. To do this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	// Define your region, etc.
0000000000000000000000000000000000000000;;	opts := gophercloud.EndpointOpts{Region: "RegionOne"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	client, err := openstack.NewComputeV2(provider, opts)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## List servers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	All operations that involve API collections (servers, flavors, images) now use
0000000000000000000000000000000000000000;;	the `pagination.Pager` interface. This interface represents paginated entities
0000000000000000000000000000000000000000;;	that can be iterated over.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once you have a Pager, you can then pass a callback function into its `EachPage`
0000000000000000000000000000000000000000;;	method, and this will allow you to traverse over the collection and execute
0000000000000000000000000000000000000000;;	arbitrary functionality. So, an example with list servers:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	  "fmt"
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We have the option of filtering the server list. If we want the full
0000000000000000000000000000000000000000;;	// collection, leave it as an empty struct or nil
0000000000000000000000000000000000000000;;	opts := servers.ListOpts{Name: "server_1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve a pager (i.e. a paginated collection)
0000000000000000000000000000000000000000;;	pager := servers.List(client, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define an anonymous function to be executed on each page's iteration
0000000000000000000000000000000000000000;;	err := pager.EachPage(func(page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;	  serverList, err := servers.ExtractServers(page)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  // `s' will be a servers.Server struct
0000000000000000000000000000000000000000;;	  for _, s := range serverList {
0000000000000000000000000000000000000000;;	    fmt.Printf("We have a server. ID=%s, Name=%s", s.ID, s.Name)
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Get server details
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get the HTTP result
0000000000000000000000000000000000000000;;	response := servers.Get(client, "server_id")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract a Server struct from the response
0000000000000000000000000000000000000000;;	server, err := response.Extract()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Create server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define our options
0000000000000000000000000000000000000000;;	opts := servers.CreateOpts{
0000000000000000000000000000000000000000;;	  Name: "new_server",
0000000000000000000000000000000000000000;;	  FlavorRef: "flavorID",
0000000000000000000000000000000000000000;;	  ImageRef: "imageID",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get our response
0000000000000000000000000000000000000000;;	response := servers.Create(client, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract
0000000000000000000000000000000000000000;;	server, err := response.Extract()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Change admin password
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	result := servers.ChangeAdminPassword(client, "server_id", "newPassword_&123")
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Resize server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	result := servers.Resize(client, "server_id", "new_flavor_id")
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Reboot server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You have a choice of two reboot methods: servers.SoftReboot or servers.HardReboot
0000000000000000000000000000000000000000;;	result := servers.Reboot(client, "server_id", servers.SoftReboot)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Update server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	opts := servers.UpdateOpts{Name: "new_name"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	server, err := servers.Update(client, "server_id", opts).Extract()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Rebuild server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You have the option of specifying additional options
0000000000000000000000000000000000000000;;	opts := RebuildOpts{
0000000000000000000000000000000000000000;;	  Name:      "new_name",
0000000000000000000000000000000000000000;;	  AdminPass: "admin_password",
0000000000000000000000000000000000000000;;	  ImageID:   "image_id",
0000000000000000000000000000000000000000;;	  Metadata:  map[string]string{"owner": "me"},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	result := servers.Rebuild(client, "server_id", opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You can extract a servers.Server struct from the HTTP response
0000000000000000000000000000000000000000;;	server, err := result.Extract()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Delete server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	response := servers.Delete(client, "server_id")
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Rescue server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The server rescue extension for Compute is not currently supported.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Images and flavors
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## List images
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	As with listing servers (see above), you first retrieve a Pager, and then pass
0000000000000000000000000000000000000000;;	in a callback over each page:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/openstack/compute/v2/images"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We have the option of filtering the image list. If we want the full
0000000000000000000000000000000000000000;;	// collection, leave it as an empty struct
0000000000000000000000000000000000000000;;	opts := images.ListOpts{ChangesSince: "2014-01-01T01:02:03Z", Name: "Ubuntu 12.04"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve a pager (i.e. a paginated collection)
0000000000000000000000000000000000000000;;	pager := images.List(client, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define an anonymous function to be executed on each page's iteration
0000000000000000000000000000000000000000;;	err := pager.EachPage(func(page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;	  imageList, err := images.ExtractImages(page)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for _, i := range imageList {
0000000000000000000000000000000000000000;;	    // "i" will be an images.Image
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## List flavors
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/openstack/compute/v2/flavors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We have the option of filtering the flavor list. If we want the full
0000000000000000000000000000000000000000;;	// collection, leave it as an empty struct
0000000000000000000000000000000000000000;;	opts := flavors.ListOpts{ChangesSince: "2014-01-01T01:02:03Z", MinRAM: 4}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve a pager (i.e. a paginated collection)
0000000000000000000000000000000000000000;;	pager := flavors.List(client, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define an anonymous function to be executed on each page's iteration
0000000000000000000000000000000000000000;;	err := pager.EachPage(func(page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;	  flavorList, err := networks.ExtractFlavors(page)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for _, f := range flavorList {
0000000000000000000000000000000000000000;;	    // "f" will be a flavors.Flavor
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Create/delete image
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Image management has been shifted to Glance, but unfortunately this service is
0000000000000000000000000000000000000000;;	not supported as of yet. You can, however, list Compute images like so:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/images"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve a pager (i.e. a paginated collection)
0000000000000000000000000000000000000000;;	pager := images.List(client, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define an anonymous function to be executed on each page's iteration
0000000000000000000000000000000000000000;;	err := pager.EachPage(func(page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;	  imageList, err := images.ExtractImages(page)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for _, i := range imageList {
0000000000000000000000000000000000000000;;	    // "i" will be an images.Image
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Other
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## List keypairs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/extensions/keypairs"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve a pager (i.e. a paginated collection)
0000000000000000000000000000000000000000;;	pager := keypairs.List(client, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define an anonymous function to be executed on each page's iteration
0000000000000000000000000000000000000000;;	err := pager.EachPage(func(page pagination.Page) (bool, error) {
0000000000000000000000000000000000000000;;	  keyList, err := keypairs.ExtractKeyPairs(page)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for _, k := range keyList {
0000000000000000000000000000000000000000;;	    // "k" will be a keypairs.KeyPair
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Create/delete keypairs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To create a new keypair, you need to specify its name and, optionally, a
0000000000000000000000000000000000000000;;	pregenerated OpenSSH-formatted public key.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/extensions/keypairs"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	opts := keypairs.CreateOpts{
0000000000000000000000000000000000000000;;	  Name: "new_key",
0000000000000000000000000000000000000000;;	  PublicKey: "...",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	response := keypairs.Create(client, opts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	key, err := response.Extract()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To delete an existing keypair:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	response := keypairs.Delete(client, "keypair_id")
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## List IP addresses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This operation is not currently supported.
