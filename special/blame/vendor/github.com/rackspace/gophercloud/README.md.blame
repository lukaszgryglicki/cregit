0000000000000000000000000000000000000000;;	# Gophercloud: an OpenStack SDK for Go
0000000000000000000000000000000000000000;;	[![Build Status](https://travis-ci.org/rackspace/gophercloud.svg?branch=master)](https://travis-ci.org/rackspace/gophercloud) [![Coverage Status](https://coveralls.io/repos/rackspace/gophercloud/badge.png)](https://coveralls.io/r/rackspace/gophercloud)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Gophercloud is a flexible SDK that allows you to consume and work with OpenStack
0000000000000000000000000000000000000000;;	clouds in a simple and idiomatic way using golang. Many services are supported,
0000000000000000000000000000000000000000;;	including Compute, Block Storage, Object Storage, Networking, and Identity.
0000000000000000000000000000000000000000;;	Each service API is backed with getting started guides, code samples, reference
0000000000000000000000000000000000000000;;	documentation, unit tests and acceptance tests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Useful links
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* [Gophercloud homepage](http://gophercloud.io)
0000000000000000000000000000000000000000;;	* [Reference documentation](http://godoc.org/github.com/rackspace/gophercloud)
0000000000000000000000000000000000000000;;	* [Getting started guides](http://gophercloud.io/docs)
0000000000000000000000000000000000000000;;	* [Effective Go](https://golang.org/doc/effective_go.html)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## How to install
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Before installing, you need to ensure that your [GOPATH environment variable](https://golang.org/doc/code.html#GOPATH)
0000000000000000000000000000000000000000;;	is pointing to an appropriate directory where you want to install Gophercloud:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```bash
0000000000000000000000000000000000000000;;	mkdir $HOME/go
0000000000000000000000000000000000000000;;	export GOPATH=$HOME/go
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To protect yourself against changes in your dependencies, we highly recommend choosing a
0000000000000000000000000000000000000000;;	[dependency management solution](https://github.com/golang/go/wiki/PackageManagementTools) for
0000000000000000000000000000000000000000;;	your projects, such as [godep](https://github.com/tools/godep). Once this is set up, you can install
0000000000000000000000000000000000000000;;	Gophercloud as a dependency like so:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```bash
0000000000000000000000000000000000000000;;	go get github.com/rackspace/gophercloud
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Edit your code to import relevant packages from "github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	godep save ./...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This will install all the source files you need into a `Godeps/_workspace` directory, which is
0000000000000000000000000000000000000000;;	referenceable from your own source files when you use the `godep go` command.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Getting started
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Because you'll be hitting an API, you will need to retrieve your OpenStack
0000000000000000000000000000000000000000;;	credentials and either store them as environment variables or in your local Go
0000000000000000000000000000000000000000;;	files. The first method is recommended because it decouples credential
0000000000000000000000000000000000000000;;	information from source code, allowing you to push the latter to your version
0000000000000000000000000000000000000000;;	control system without any security risk.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You will need to retrieve the following:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* username
0000000000000000000000000000000000000000;;	* password
0000000000000000000000000000000000000000;;	* tenant name or tenant ID
0000000000000000000000000000000000000000;;	* a valid Keystone identity URL
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For users that have the OpenStack dashboard installed, there's a shortcut. If
0000000000000000000000000000000000000000;;	you visit the `project/access_and_security` path in Horizon and click on the
0000000000000000000000000000000000000000;;	"Download OpenStack RC File" button at the top right hand corner, you will
0000000000000000000000000000000000000000;;	download a bash file that exports all of your access details to environment
0000000000000000000000000000000000000000;;	variables. To execute the file, run `source admin-openrc.sh` and you will be
0000000000000000000000000000000000000000;;	prompted for your password.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Authentication
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once you have access to your credentials, you can begin plugging them into
0000000000000000000000000000000000000000;;	Gophercloud. The next step is authentication, and this is handled by a base
0000000000000000000000000000000000000000;;	"Provider" struct. To get one, you can either pass in your credentials
0000000000000000000000000000000000000000;;	explicitly, or tell Gophercloud to use environment variables:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/openstack"
0000000000000000000000000000000000000000;;	  "github.com/rackspace/gophercloud/openstack/utils"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Option 1: Pass in the values yourself
0000000000000000000000000000000000000000;;	opts := gophercloud.AuthOptions{
0000000000000000000000000000000000000000;;	  IdentityEndpoint: "https://my-openstack.com:5000/v2.0",
0000000000000000000000000000000000000000;;	  Username: "{username}",
0000000000000000000000000000000000000000;;	  Password: "{password}",
0000000000000000000000000000000000000000;;	  TenantID: "{tenant_id}",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Option 2: Use a utility function to retrieve all your environment variables
0000000000000000000000000000000000000000;;	opts, err := openstack.AuthOptionsFromEnv()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once you have the `opts` variable, you can pass it in and get back a
0000000000000000000000000000000000000000;;	`ProviderClient` struct:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	provider, err := openstack.AuthenticatedClient(opts)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The `ProviderClient` is the top-level client that all of your OpenStack services
0000000000000000000000000000000000000000;;	derive from. The provider contains all of the authentication details that allow
0000000000000000000000000000000000000000;;	your Go code to access the API - such as the base URL and token ID.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Provision a server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once we have a base Provider, we inject it as a dependency into each OpenStack
0000000000000000000000000000000000000000;;	service. In order to work with the Compute API, we need a Compute service
0000000000000000000000000000000000000000;;	client; which can be created like so:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	client, err := openstack.NewComputeV2(provider, gophercloud.EndpointOpts{
0000000000000000000000000000000000000000;;	  Region: os.Getenv("OS_REGION_NAME"),
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	We then use this `client` for any Compute API operation we want. In our case,
0000000000000000000000000000000000000000;;	we want to provision a new server - so we invoke the `Create` method and pass
0000000000000000000000000000000000000000;;	in the flavor ID (hardware specification) and image ID (operating system) we're
0000000000000000000000000000000000000000;;	interested in:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/rackspace/gophercloud/openstack/compute/v2/servers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	server, err := servers.Create(client, servers.CreateOpts{
0000000000000000000000000000000000000000;;	  Name:      "My new server!",
0000000000000000000000000000000000000000;;	  FlavorRef: "flavor_id",
0000000000000000000000000000000000000000;;	  ImageRef:  "image_id",
0000000000000000000000000000000000000000;;	}).Extract()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you are unsure about what images and flavors are, you can read our [Compute
0000000000000000000000000000000000000000;;	Getting Started guide](http://gophercloud.io/docs/compute). The above code
0000000000000000000000000000000000000000;;	sample creates a new server with the parameters, and embodies the new resource
0000000000000000000000000000000000000000;;	in the `server` variable (a
0000000000000000000000000000000000000000;;	[`servers.Server`](http://godoc.org/github.com/rackspace/gophercloud) struct).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Next steps
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Cool! You've handled authentication, got your `ProviderClient` and provisioned
0000000000000000000000000000000000000000;;	a new server. You're now ready to use more OpenStack services.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* [Getting started with Compute](http://gophercloud.io/docs/compute)
0000000000000000000000000000000000000000;;	* [Getting started with Object Storage](http://gophercloud.io/docs/object-storage)
0000000000000000000000000000000000000000;;	* [Getting started with Networking](http://gophercloud.io/docs/networking)
0000000000000000000000000000000000000000;;	* [Getting started with Block Storage](http://gophercloud.io/docs/block-storage)
0000000000000000000000000000000000000000;;	* [Getting started with Identity](http://gophercloud.io/docs/identity)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contributing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Engaging the community and lowering barriers for contributors is something we
0000000000000000000000000000000000000000;;	care a lot about. For this reason, we've taken the time to write a [contributing
0000000000000000000000000000000000000000;;	guide](./CONTRIBUTING.md) for folks interested in getting involved in our project.
0000000000000000000000000000000000000000;;	If you're not sure how you can get involved, feel free to submit an issue or
0000000000000000000000000000000000000000;;	[contact us](https://developer.rackspace.com/support/). You don't need to be a
0000000000000000000000000000000000000000;;	Go expert - all members of the community are welcome!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Help and feedback
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you're struggling with something or have spotted a potential bug, feel free
0000000000000000000000000000000000000000;;	to submit an issue to our [bug tracker](/issues) or [contact us directly](https://developer.rackspace.com/support/).
