0000000000000000000000000000000000000000;;	package pagination
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/pagination/http.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/pagination/http.go][vendor/github.com/rackspace/gophercloud/pagination/http.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageResult stores the HTTP response that returned the current page of results.
0000000000000000000000000000000000000000;;	type PageResult struct {
0000000000000000000000000000000000000000;;		gophercloud.Result
0000000000000000000000000000000000000000;;		url.URL
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageResultFrom parses an HTTP response as JSON and returns a PageResult containing the
0000000000000000000000000000000000000000;;	// results, interpreting it as JSON if the content type indicates.
0000000000000000000000000000000000000000;;	func PageResultFrom(resp *http.Response) (PageResult, error) {
0000000000000000000000000000000000000000;;		var parsedBody interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		rawBody, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return PageResult{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if strings.HasPrefix(resp.Header.Get("Content-Type"), "application/json") {
0000000000000000000000000000000000000000;;			err = json.Unmarshal(rawBody, &parsedBody)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return PageResult{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			parsedBody = rawBody
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return PageResultFromParsed(resp, parsedBody), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageResultFromParsed constructs a PageResult from an HTTP response that has already had its
0000000000000000000000000000000000000000;;	// body parsed as JSON (and closed).
0000000000000000000000000000000000000000;;	func PageResultFromParsed(resp *http.Response, body interface{}) PageResult {
0000000000000000000000000000000000000000;;		return PageResult{
0000000000000000000000000000000000000000;;			Result: gophercloud.Result{
0000000000000000000000000000000000000000;;				Body:   body,
0000000000000000000000000000000000000000;;				Header: resp.Header,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			URL: *resp.Request.URL,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Request performs an HTTP request and extracts the http.Response from the result.
0000000000000000000000000000000000000000;;	func Request(client *gophercloud.ServiceClient, headers map[string]string, url string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return client.Request("GET", url, gophercloud.RequestOpts{
0000000000000000000000000000000000000000;;			MoreHeaders: headers,
0000000000000000000000000000000000000000;;			OkCodes:     []int{200, 204},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
