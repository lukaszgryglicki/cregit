0000000000000000000000000000000000000000;;	package gophercloud
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/endpoint_search.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/endpoint_search.go][vendor/github.com/rackspace/gophercloud/endpoint_search.go];	
0000000000000000000000000000000000000000;;	import "errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrServiceNotFound is returned when no service in a service catalog matches
0000000000000000000000000000000000000000;;		// the provided EndpointOpts. This is generally returned by provider service
0000000000000000000000000000000000000000;;		// factory methods like "NewComputeV2()" and can mean that a service is not
0000000000000000000000000000000000000000;;		// enabled for your account.
0000000000000000000000000000000000000000;;		ErrServiceNotFound = errors.New("No suitable service could be found in the service catalog.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrEndpointNotFound is returned when no available endpoints match the
0000000000000000000000000000000000000000;;		// provided EndpointOpts. This is also generally returned by provider service
0000000000000000000000000000000000000000;;		// factory methods, and usually indicates that a region was specified
0000000000000000000000000000000000000000;;		// incorrectly.
0000000000000000000000000000000000000000;;		ErrEndpointNotFound = errors.New("No suitable endpoint could be found in the service catalog.")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Availability indicates to whom a specific service endpoint is accessible:
0000000000000000000000000000000000000000;;	// the internet at large, internal networks only, or only to administrators.
0000000000000000000000000000000000000000;;	// Different identity services use different terminology for these. Identity v2
0000000000000000000000000000000000000000;;	// lists them as different kinds of URLs within the service catalog ("adminURL",
0000000000000000000000000000000000000000;;	// "internalURL", and "publicURL"), while v3 lists them as "Interfaces" in an
0000000000000000000000000000000000000000;;	// endpoint's response.
0000000000000000000000000000000000000000;;	type Availability string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AvailabilityAdmin indicates that an endpoint is only available to
0000000000000000000000000000000000000000;;		// administrators.
0000000000000000000000000000000000000000;;		AvailabilityAdmin Availability = "admin"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AvailabilityPublic indicates that an endpoint is available to everyone on
0000000000000000000000000000000000000000;;		// the internet.
0000000000000000000000000000000000000000;;		AvailabilityPublic Availability = "public"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AvailabilityInternal indicates that an endpoint is only available within
0000000000000000000000000000000000000000;;		// the cluster's internal network.
0000000000000000000000000000000000000000;;		AvailabilityInternal Availability = "internal"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EndpointOpts specifies search criteria used by queries against an
0000000000000000000000000000000000000000;;	// OpenStack service catalog. The options must contain enough information to
0000000000000000000000000000000000000000;;	// unambiguously identify one, and only one, endpoint within the catalog.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Usually, these are passed to service client factory functions in a provider
0000000000000000000000000000000000000000;;	// package, like "rackspace.NewComputeV2()".
0000000000000000000000000000000000000000;;	type EndpointOpts struct {
0000000000000000000000000000000000000000;;		// Type [required] is the service type for the client (e.g., "compute",
0000000000000000000000000000000000000000;;		// "object-store"). Generally, this will be supplied by the service client
0000000000000000000000000000000000000000;;		// function, but a user-given value will be honored if provided.
0000000000000000000000000000000000000000;;		Type string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name [optional] is the service name for the client (e.g., "nova") as it
0000000000000000000000000000000000000000;;		// appears in the service catalog. Services can have the same Type but a
0000000000000000000000000000000000000000;;		// different Name, which is why both Type and Name are sometimes needed.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Region [required] is the geographic region in which the endpoint resides,
0000000000000000000000000000000000000000;;		// generally specifying which datacenter should house your resources.
0000000000000000000000000000000000000000;;		// Required only for services that span multiple regions.
0000000000000000000000000000000000000000;;		Region string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Availability [optional] is the visibility of the endpoint to be returned.
0000000000000000000000000000000000000000;;		// Valid types include the constants AvailabilityPublic, AvailabilityInternal,
0000000000000000000000000000000000000000;;		// or AvailabilityAdmin from this package.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Availability is not required, and defaults to AvailabilityPublic. Not all
0000000000000000000000000000000000000000;;		// providers or services offer all Availability options.
0000000000000000000000000000000000000000;;		Availability Availability
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	EndpointLocator is an internal function to be used by provider implementations.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It provides an implementation that locates a single endpoint from a service
0000000000000000000000000000000000000000;;	catalog for a specific ProviderClient based on user-provided EndpointOpts. The
0000000000000000000000000000000000000000;;	provider then uses it to discover related ServiceClients.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	type EndpointLocator func(EndpointOpts) (string, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplyDefaults is an internal method to be used by provider implementations.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It sets EndpointOpts fields if not already set, including a default type.
0000000000000000000000000000000000000000;;	// Currently, EndpointOpts.Availability defaults to the public endpoint.
0000000000000000000000000000000000000000;;	func (eo *EndpointOpts) ApplyDefaults(t string) {
0000000000000000000000000000000000000000;;		if eo.Type == "" {
0000000000000000000000000000000000000000;;			eo.Type = t
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if eo.Availability == "" {
0000000000000000000000000000000000000000;;			eo.Availability = AvailabilityPublic
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
