0000000000000000000000000000000000000000;;	package volumes
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/blockstorage/v1/volumes/results.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/blockstorage/v1/volumes/results.go][vendor/github.com/rackspace/gophercloud/rackspace/blockstorage/v1/volumes/results.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		os "github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/mitchellh/mapstructure"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Volume wraps an Openstack volume
0000000000000000000000000000000000000000;;	type Volume os.Volume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResult represents the result of a create operation
0000000000000000000000000000000000000000;;	type CreateResult struct {
0000000000000000000000000000000000000000;;		os.CreateResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResult represents the result of a get operation
0000000000000000000000000000000000000000;;	type GetResult struct {
0000000000000000000000000000000000000000;;		os.GetResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResult represents the result of an update operation
0000000000000000000000000000000000000000;;	type UpdateResult struct {
0000000000000000000000000000000000000000;;		os.UpdateResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func commonExtract(resp interface{}, err error) (*Volume, error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var respStruct struct {
0000000000000000000000000000000000000000;;			Volume *Volume `json:"volume"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = mapstructure.Decode(resp, &respStruct)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return respStruct.Volume, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract will get the Volume object out of the GetResult object.
0000000000000000000000000000000000000000;;	func (r GetResult) Extract() (*Volume, error) {
0000000000000000000000000000000000000000;;		return commonExtract(r.Body, r.Err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract will get the Volume object out of the CreateResult object.
0000000000000000000000000000000000000000;;	func (r CreateResult) Extract() (*Volume, error) {
0000000000000000000000000000000000000000;;		return commonExtract(r.Body, r.Err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract will get the Volume object out of the UpdateResult object.
0000000000000000000000000000000000000000;;	func (r UpdateResult) Extract() (*Volume, error) {
0000000000000000000000000000000000000000;;		return commonExtract(r.Body, r.Err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractVolumes extracts and returns Volumes. It is used while iterating over a volumes.List call.
0000000000000000000000000000000000000000;;	func ExtractVolumes(page pagination.Page) ([]Volume, error) {
0000000000000000000000000000000000000000;;		var response struct {
0000000000000000000000000000000000000000;;			Volumes []Volume `json:"volumes"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := mapstructure.Decode(page.(os.ListResult).Body, &response)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return response.Volumes, err
0000000000000000000000000000000000000000;;	}
