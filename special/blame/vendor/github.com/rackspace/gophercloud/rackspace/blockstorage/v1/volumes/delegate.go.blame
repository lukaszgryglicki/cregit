0000000000000000000000000000000000000000;;	package volumes
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/blockstorage/v1/volumes/delegate.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/blockstorage/v1/volumes/delegate.go][vendor/github.com/rackspace/gophercloud/rackspace/blockstorage/v1/volumes/delegate.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		os "github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/pagination"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateOpts struct {
0000000000000000000000000000000000000000;;		os.CreateOpts
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (opts CreateOpts) ToVolumeCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		if opts.Size < 75 || opts.Size > 1024 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Size field must be between 75 and 1024")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return opts.CreateOpts.ToVolumeCreateMap()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create will create a new Volume based on the values in CreateOpts. To extract
0000000000000000000000000000000000000000;;	// the Volume object from the response, call the Extract method on the
0000000000000000000000000000000000000000;;	// CreateResult.
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, opts os.CreateOptsBuilder) CreateResult {
0000000000000000000000000000000000000000;;		return CreateResult{os.Create(client, opts)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete will delete the existing Volume with the provided ID.
0000000000000000000000000000000000000000;;	func Delete(client *gophercloud.ServiceClient, id string) os.DeleteResult {
0000000000000000000000000000000000000000;;		return os.Delete(client, id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the Volume with the provided ID. To extract the Volume object
0000000000000000000000000000000000000000;;	// from the response, call the Extract method on the GetResult.
0000000000000000000000000000000000000000;;	func Get(client *gophercloud.ServiceClient, id string) GetResult {
0000000000000000000000000000000000000000;;		return GetResult{os.Get(client, id)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns volumes optionally limited by the conditions provided in ListOpts.
0000000000000000000000000000000000000000;;	func List(client *gophercloud.ServiceClient) pagination.Pager {
0000000000000000000000000000000000000000;;		return os.List(client, os.ListOpts{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateOpts contain options for updating an existing Volume. This object is passed
0000000000000000000000000000000000000000;;	// to the volumes.Update function. For more information about the parameters, see
0000000000000000000000000000000000000000;;	// the Volume object.
0000000000000000000000000000000000000000;;	type UpdateOpts struct {
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// OPTIONAL
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToVolumeUpdateMap assembles a request body based on the contents of an
0000000000000000000000000000000000000000;;	// UpdateOpts.
0000000000000000000000000000000000000000;;	func (opts UpdateOpts) ToVolumeUpdateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		v := make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.Description != "" {
0000000000000000000000000000000000000000;;			v["display_description"] = opts.Description
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if opts.Name != "" {
0000000000000000000000000000000000000000;;			v["display_name"] = opts.Name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return map[string]interface{}{"volume": v}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update will update the Volume with provided information. To extract the updated
0000000000000000000000000000000000000000;;	// Volume from the response, call the Extract method on the UpdateResult.
0000000000000000000000000000000000000000;;	func Update(client *gophercloud.ServiceClient, id string, opts os.UpdateOptsBuilder) UpdateResult {
0000000000000000000000000000000000000000;;		return UpdateResult{os.Update(client, id, opts)}
0000000000000000000000000000000000000000;;	}
