0000000000000000000000000000000000000000;;	package rackspace
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/auth_env.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/auth_env.go][vendor/github.com/rackspace/gophercloud/rackspace/auth_env.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var nilOptions = gophercloud.AuthOptions{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrNoAuthUrl, ErrNoUsername, and ErrNoPassword errors indicate of the
0000000000000000000000000000000000000000;;	// required RS_AUTH_URL, RS_USERNAME, or RS_PASSWORD environment variables,
0000000000000000000000000000000000000000;;	// respectively, remain undefined.  See the AuthOptions() function for more details.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNoAuthURL  = fmt.Errorf("Environment variable RS_AUTH_URL or OS_AUTH_URL need to be set.")
0000000000000000000000000000000000000000;;		ErrNoUsername = fmt.Errorf("Environment variable RS_USERNAME or OS_USERNAME need to be set.")
0000000000000000000000000000000000000000;;		ErrNoPassword = fmt.Errorf("Environment variable RS_API_KEY or RS_PASSWORD needs to be set.")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func prefixedEnv(base string) string {
0000000000000000000000000000000000000000;;		value := os.Getenv("RS_" + base)
0000000000000000000000000000000000000000;;		if value == "" {
0000000000000000000000000000000000000000;;			value = os.Getenv("OS_" + base)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptionsFromEnv fills out an identity.AuthOptions structure with the
0000000000000000000000000000000000000000;;	// settings found on the various Rackspace RS_* environment variables.
0000000000000000000000000000000000000000;;	func AuthOptionsFromEnv() (gophercloud.AuthOptions, error) {
0000000000000000000000000000000000000000;;		authURL := prefixedEnv("AUTH_URL")
0000000000000000000000000000000000000000;;		username := prefixedEnv("USERNAME")
0000000000000000000000000000000000000000;;		password := prefixedEnv("PASSWORD")
0000000000000000000000000000000000000000;;		apiKey := prefixedEnv("API_KEY")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if authURL == "" {
0000000000000000000000000000000000000000;;			return nilOptions, ErrNoAuthURL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if username == "" {
0000000000000000000000000000000000000000;;			return nilOptions, ErrNoUsername
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if password == "" && apiKey == "" {
0000000000000000000000000000000000000000;;			return nilOptions, ErrNoPassword
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ao := gophercloud.AuthOptions{
0000000000000000000000000000000000000000;;			IdentityEndpoint: authURL,
0000000000000000000000000000000000000000;;			Username:         username,
0000000000000000000000000000000000000000;;			Password:         password,
0000000000000000000000000000000000000000;;			APIKey:           apiKey,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ao, nil
0000000000000000000000000000000000000000;;	}
