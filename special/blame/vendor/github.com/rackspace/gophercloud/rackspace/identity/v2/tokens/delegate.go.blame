0000000000000000000000000000000000000000;;	package tokens
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/identity/v2/tokens/delegate.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/identity/v2/tokens/delegate.go][vendor/github.com/rackspace/gophercloud/rackspace/identity/v2/tokens/delegate.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		os "github.com/rackspace/gophercloud/openstack/identity/v2/tokens"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrPasswordProvided is returned if both a password and an API key are provided to Create.
0000000000000000000000000000000000000000;;		ErrPasswordProvided = errors.New("Please provide either a password or an API key.")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthOptions wraps the OpenStack AuthOptions struct to be able to customize the request body
0000000000000000000000000000000000000000;;	// when API key authentication is used.
0000000000000000000000000000000000000000;;	type AuthOptions struct {
0000000000000000000000000000000000000000;;		os.AuthOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WrapOptions embeds a root AuthOptions struct in a package-specific one.
0000000000000000000000000000000000000000;;	func WrapOptions(original gophercloud.AuthOptions) AuthOptions {
0000000000000000000000000000000000000000;;		return AuthOptions{AuthOptions: os.WrapOptions(original)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToTokenCreateMap serializes an AuthOptions into a request body. If an API key is provided, it
0000000000000000000000000000000000000000;;	// will be used, otherwise
0000000000000000000000000000000000000000;;	func (auth AuthOptions) ToTokenCreateMap() (map[string]interface{}, error) {
0000000000000000000000000000000000000000;;		if auth.APIKey == "" {
0000000000000000000000000000000000000000;;			return auth.AuthOptions.ToTokenCreateMap()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify that other required attributes are present.
0000000000000000000000000000000000000000;;		if auth.Username == "" {
0000000000000000000000000000000000000000;;			return nil, os.ErrUsernameRequired
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authMap := make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authMap["RAX-KSKEY:apiKeyCredentials"] = map[string]interface{}{
0000000000000000000000000000000000000000;;			"username": auth.Username,
0000000000000000000000000000000000000000;;			"apiKey":   auth.APIKey,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if auth.TenantID != "" {
0000000000000000000000000000000000000000;;			authMap["tenantId"] = auth.TenantID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if auth.TenantName != "" {
0000000000000000000000000000000000000000;;			authMap["tenantName"] = auth.TenantName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return map[string]interface{}{"auth": authMap}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create authenticates to Rackspace's identity service and attempts to acquire a Token. Rather
0000000000000000000000000000000000000000;;	// than interact with this service directly, users should generally call
0000000000000000000000000000000000000000;;	// rackspace.AuthenticatedClient().
0000000000000000000000000000000000000000;;	func Create(client *gophercloud.ServiceClient, auth AuthOptions) os.CreateResult {
0000000000000000000000000000000000000000;;		return os.Create(client, auth)
0000000000000000000000000000000000000000;;	}
