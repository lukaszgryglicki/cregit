0000000000000000000000000000000000000000;;	package rackspace
54f55c92d2241cbee62ced42c2bb584275ee6601;Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/client.go[Godeps/_workspace/src/github.com/rackspace/gophercloud/rackspace/client.go][vendor/github.com/rackspace/gophercloud/rackspace/client.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud"
0000000000000000000000000000000000000000;;		os "github.com/rackspace/gophercloud/openstack"
0000000000000000000000000000000000000000;;		"github.com/rackspace/gophercloud/openstack/utils"
0000000000000000000000000000000000000000;;		tokens2 "github.com/rackspace/gophercloud/rackspace/identity/v2/tokens"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RackspaceUSIdentity is an identity endpoint located in the United States.
0000000000000000000000000000000000000000;;		RackspaceUSIdentity = "https://identity.api.rackspacecloud.com/v2.0/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RackspaceUKIdentity is an identity endpoint located in the UK.
0000000000000000000000000000000000000000;;		RackspaceUKIdentity = "https://lon.identity.api.rackspacecloud.com/v2.0/"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		v20 = "v2.0"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClient creates a client that's prepared to communicate with the Rackspace API, but is not
0000000000000000000000000000000000000000;;	// yet authenticated. Most users will probably prefer using the AuthenticatedClient function
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Provide the base URL of the identity endpoint you wish to authenticate against as "endpoint".
0000000000000000000000000000000000000000;;	// Often, this will be either RackspaceUSIdentity or RackspaceUKIdentity.
0000000000000000000000000000000000000000;;	func NewClient(endpoint string) (*gophercloud.ProviderClient, error) {
0000000000000000000000000000000000000000;;		if endpoint == "" {
0000000000000000000000000000000000000000;;			return os.NewClient(RackspaceUSIdentity)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return os.NewClient(endpoint)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatedClient logs in to Rackspace with the provided credentials and constructs a
0000000000000000000000000000000000000000;;	// ProviderClient that's ready to operate.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the provided AuthOptions does not specify an explicit IdentityEndpoint, it will default to
0000000000000000000000000000000000000000;;	// the canonical, production Rackspace US identity endpoint.
0000000000000000000000000000000000000000;;	func AuthenticatedClient(options gophercloud.AuthOptions) (*gophercloud.ProviderClient, error) {
0000000000000000000000000000000000000000;;		client, err := NewClient(options.IdentityEndpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = Authenticate(client, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authenticate or re-authenticate against the most recent identity service supported at the
0000000000000000000000000000000000000000;;	// provided endpoint.
0000000000000000000000000000000000000000;;	func Authenticate(client *gophercloud.ProviderClient, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		versions := []*utils.Version{
0000000000000000000000000000000000000000;;			&utils.Version{ID: v20, Priority: 20, Suffix: "/v2.0/"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		chosen, endpoint, err := utils.ChooseVersion(client, versions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch chosen.ID {
0000000000000000000000000000000000000000;;		case v20:
0000000000000000000000000000000000000000;;			return v2auth(client, endpoint, options)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// The switch statement must be out of date from the versions list.
0000000000000000000000000000000000000000;;			return fmt.Errorf("Unrecognized identity version: %s", chosen.ID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateV2 explicitly authenticates with v2 of the identity service.
0000000000000000000000000000000000000000;;	func AuthenticateV2(client *gophercloud.ProviderClient, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		return v2auth(client, "", options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func v2auth(client *gophercloud.ProviderClient, endpoint string, options gophercloud.AuthOptions) error {
0000000000000000000000000000000000000000;;		v2Client := NewIdentityV2(client)
0000000000000000000000000000000000000000;;		if endpoint != "" {
0000000000000000000000000000000000000000;;			v2Client.Endpoint = endpoint
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := tokens2.Create(v2Client, tokens2.WrapOptions(options))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		token, err := result.ExtractToken()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		catalog, err := result.ExtractServiceCatalog()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.AllowReauth {
0000000000000000000000000000000000000000;;			client.ReauthFunc = func() error {
0000000000000000000000000000000000000000;;				return AuthenticateV2(client, options)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client.TokenID = token.ID
0000000000000000000000000000000000000000;;		client.EndpointLocator = func(opts gophercloud.EndpointOpts) (string, error) {
0000000000000000000000000000000000000000;;			return os.V2EndpointURL(catalog, opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIdentityV2 creates a ServiceClient that may be used to access the v2 identity service.
0000000000000000000000000000000000000000;;	func NewIdentityV2(client *gophercloud.ProviderClient) *gophercloud.ServiceClient {
0000000000000000000000000000000000000000;;		v2Endpoint := client.IdentityBase + "v2.0/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{
0000000000000000000000000000000000000000;;			ProviderClient: client,
0000000000000000000000000000000000000000;;			Endpoint:       v2Endpoint,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewComputeV2 creates a ServiceClient that may be used to access the v2 compute service.
0000000000000000000000000000000000000000;;	func NewComputeV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("compute")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{
0000000000000000000000000000000000000000;;			ProviderClient: client,
0000000000000000000000000000000000000000;;			Endpoint:       url,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewObjectCDNV1 creates a ServiceClient that may be used with the Rackspace v1 CDN.
0000000000000000000000000000000000000000;;	func NewObjectCDNV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("rax:object-cdn")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewObjectStorageV1 creates a ServiceClient that may be used with the Rackspace v1 object storage package.
0000000000000000000000000000000000000000;;	func NewObjectStorageV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		return os.NewObjectStorageV1(client, eo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBlockStorageV1 creates a ServiceClient that can be used to access the
0000000000000000000000000000000000000000;;	// Rackspace Cloud Block Storage v1 API.
0000000000000000000000000000000000000000;;	func NewBlockStorageV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("volume")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewLBV1 creates a ServiceClient that can be used to access the Rackspace
0000000000000000000000000000000000000000;;	// Cloud Load Balancer v1 API.
0000000000000000000000000000000000000000;;	func NewLBV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("rax:load-balancer")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNetworkV2 creates a ServiceClient that can be used to access the Rackspace
0000000000000000000000000000000000000000;;	// Networking v2 API.
0000000000000000000000000000000000000000;;	func NewNetworkV2(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("network")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCDNV1 creates a ServiceClient that may be used to access the Rackspace v1
0000000000000000000000000000000000000000;;	// CDN service.
0000000000000000000000000000000000000000;;	func NewCDNV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("rax:cdn")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewOrchestrationV1 creates a ServiceClient that may be used to access the v1 orchestration service.
0000000000000000000000000000000000000000;;	func NewOrchestrationV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("orchestration")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRackConnectV3 creates a ServiceClient that may be used to access the v3 RackConnect service.
0000000000000000000000000000000000000000;;	func NewRackConnectV3(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("rax:rackconnect")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDBV1 creates a ServiceClient that may be used to access the v1 DB service.
0000000000000000000000000000000000000000;;	func NewDBV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("rax:database")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAutoScaleV1 creates a ServiceClient that may be used to access the v1 Auto Scale service.
0000000000000000000000000000000000000000;;	func NewAutoScaleV1(client *gophercloud.ProviderClient, eo gophercloud.EndpointOpts) (*gophercloud.ServiceClient, error) {
0000000000000000000000000000000000000000;;		eo.ApplyDefaults("rax:autoscale")
0000000000000000000000000000000000000000;;		url, err := client.EndpointLocator(eo)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &gophercloud.ServiceClient{ProviderClient: client, Endpoint: url}, nil
0000000000000000000000000000000000000000;;	}
