0000000000000000000000000000000000000000;;	package flocker
52aca6320194613121f2976fe3fd02df58abf14d;Godeps/_workspace/src/github.com/ClusterHQ/flocker-go/util.go[Godeps/_workspace/src/github.com/ClusterHQ/flocker-go/util.go][vendor/github.com/clusterhq/flocker-go/util.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newTLSClient returns a new TLS http client
0000000000000000000000000000000000000000;;	func newTLSClient(caCertPath, keyPath, certPath string) (*http.Client, error) {
0000000000000000000000000000000000000000;;		// Client certificate
0000000000000000000000000000000000000000;;		cert, err := tls.LoadX509KeyPair(certPath, keyPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CA certificate
0000000000000000000000000000000000000000;;		caCert, err := ioutil.ReadFile(caCertPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		caCertPool := x509.NewCertPool()
0000000000000000000000000000000000000000;;		caCertPool.AppendCertsFromPEM(caCert)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tlsConfig := &tls.Config{
0000000000000000000000000000000000000000;;			Certificates: []tls.Certificate{cert},
0000000000000000000000000000000000000000;;			RootCAs:      caCertPool,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tlsConfig.BuildNameToCertificate()
0000000000000000000000000000000000000000;;		transport := &http.Transport{TLSClientConfig: tlsConfig}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &http.Client{Transport: transport}, nil
0000000000000000000000000000000000000000;;	}
