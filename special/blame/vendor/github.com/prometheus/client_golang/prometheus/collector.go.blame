0000000000000000000000000000000000000000;;	// Copyright 2014 The Prometheus Authors
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
877581fa542c3af74aa2ed7addf6c8f7c20680ee;Godeps/_workspace/src/github.com/prometheus/client_golang/prometheus/collector.go[Godeps/_workspace/src/github.com/prometheus/client_golang/prometheus/collector.go][vendor/github.com/prometheus/client_golang/prometheus/collector.go];	
0000000000000000000000000000000000000000;;	package prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Collector is the interface implemented by anything that can be used by
0000000000000000000000000000000000000000;;	// Prometheus to collect metrics. A Collector has to be registered for
0000000000000000000000000000000000000000;;	// collection. See Registerer.Register.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The stock metrics provided by this package (Gauge, Counter, Summary,
0000000000000000000000000000000000000000;;	// Histogram, Untyped) are also Collectors (which only ever collect one metric,
0000000000000000000000000000000000000000;;	// namely itself). An implementer of Collector may, however, collect multiple
0000000000000000000000000000000000000000;;	// metrics in a coordinated fashion and/or create metrics on the fly. Examples
0000000000000000000000000000000000000000;;	// for collectors already implemented in this library are the metric vectors
0000000000000000000000000000000000000000;;	// (i.e. collection of multiple instances of the same Metric but with different
0000000000000000000000000000000000000000;;	// label values) like GaugeVec or SummaryVec, and the ExpvarCollector.
0000000000000000000000000000000000000000;;	type Collector interface {
0000000000000000000000000000000000000000;;		// Describe sends the super-set of all possible descriptors of metrics
0000000000000000000000000000000000000000;;		// collected by this Collector to the provided channel and returns once
0000000000000000000000000000000000000000;;		// the last descriptor has been sent. The sent descriptors fulfill the
0000000000000000000000000000000000000000;;		// consistency and uniqueness requirements described in the Desc
0000000000000000000000000000000000000000;;		// documentation. (It is valid if one and the same Collector sends
0000000000000000000000000000000000000000;;		// duplicate descriptors. Those duplicates are simply ignored. However,
0000000000000000000000000000000000000000;;		// two different Collectors must not send duplicate descriptors.) This
0000000000000000000000000000000000000000;;		// method idempotently sends the same descriptors throughout the
0000000000000000000000000000000000000000;;		// lifetime of the Collector. If a Collector encounters an error while
0000000000000000000000000000000000000000;;		// executing this method, it must send an invalid descriptor (created
0000000000000000000000000000000000000000;;		// with NewInvalidDesc) to signal the error to the registry.
0000000000000000000000000000000000000000;;		Describe(chan<- *Desc)
0000000000000000000000000000000000000000;;		// Collect is called by the Prometheus registry when collecting
0000000000000000000000000000000000000000;;		// metrics. The implementation sends each collected metric via the
0000000000000000000000000000000000000000;;		// provided channel and returns once the last metric has been sent. The
0000000000000000000000000000000000000000;;		// descriptor of each sent metric is one of those returned by
0000000000000000000000000000000000000000;;		// Describe. Returned metrics that share the same descriptor must differ
0000000000000000000000000000000000000000;;		// in their variable label values. This method may be called
0000000000000000000000000000000000000000;;		// concurrently and must therefore be implemented in a concurrency safe
0000000000000000000000000000000000000000;;		// way. Blocking occurs at the expense of total performance of rendering
0000000000000000000000000000000000000000;;		// all registered metrics. Ideally, Collector implementations support
0000000000000000000000000000000000000000;;		// concurrent readers.
0000000000000000000000000000000000000000;;		Collect(chan<- Metric)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// selfCollector implements Collector for a single Metric so that the Metric
0000000000000000000000000000000000000000;;	// collects itself. Add it as an anonymous field to a struct that implements
0000000000000000000000000000000000000000;;	// Metric, and call init with the Metric itself as an argument.
0000000000000000000000000000000000000000;;	type selfCollector struct {
0000000000000000000000000000000000000000;;		self Metric
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// init provides the selfCollector with a reference to the metric it is supposed
0000000000000000000000000000000000000000;;	// to collect. It is usually called within the factory function to create a
0000000000000000000000000000000000000000;;	// metric. See example.
0000000000000000000000000000000000000000;;	func (c *selfCollector) init(self Metric) {
0000000000000000000000000000000000000000;;		c.self = self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describe implements Collector.
0000000000000000000000000000000000000000;;	func (c *selfCollector) Describe(ch chan<- *Desc) {
0000000000000000000000000000000000000000;;		ch <- c.self.Desc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Collect implements Collector.
0000000000000000000000000000000000000000;;	func (c *selfCollector) Collect(ch chan<- Metric) {
0000000000000000000000000000000000000000;;		ch <- c.self
0000000000000000000000000000000000000000;;	}
