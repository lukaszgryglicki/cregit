0000000000000000000000000000000000000000;;	// Copyright 2017 The Prometheus Authors
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
13e1e7cd1550dcd956d3e82fe798021f5812b15e;;	
0000000000000000000000000000000000000000;;	package prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Observer is the interface that wraps the Observe method, which is used by
0000000000000000000000000000000000000000;;	// Histogram and Summary to add observations.
0000000000000000000000000000000000000000;;	type Observer interface {
0000000000000000000000000000000000000000;;		Observe(float64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The ObserverFunc type is an adapter to allow the use of ordinary
0000000000000000000000000000000000000000;;	// functions as Observers. If f is a function with the appropriate
0000000000000000000000000000000000000000;;	// signature, ObserverFunc(f) is an Observer that calls f.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This adapter is usually used in connection with the Timer type, and there are
0000000000000000000000000000000000000000;;	// two general use cases:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The most common one is to use a Gauge as the Observer for a Timer.
0000000000000000000000000000000000000000;;	// See the "Gauge" Timer example.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The more advanced use case is to create a function that dynamically decides
0000000000000000000000000000000000000000;;	// which Observer to use for observing the duration. See the "Complex" Timer
0000000000000000000000000000000000000000;;	// example.
0000000000000000000000000000000000000000;;	type ObserverFunc func(float64)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Observe calls f(value). It implements Observer.
0000000000000000000000000000000000000000;;	func (f ObserverFunc) Observe(value float64) {
0000000000000000000000000000000000000000;;		f(value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObserverVec is an interface implemented by `HistogramVec` and `SummaryVec`.
0000000000000000000000000000000000000000;;	type ObserverVec interface {
0000000000000000000000000000000000000000;;		GetMetricWith(Labels) (Observer, error)
0000000000000000000000000000000000000000;;		GetMetricWithLabelValues(lvs ...string) (Observer, error)
0000000000000000000000000000000000000000;;		With(Labels) Observer
0000000000000000000000000000000000000000;;		WithLabelValues(...string) Observer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Collector
0000000000000000000000000000000000000000;;	}
