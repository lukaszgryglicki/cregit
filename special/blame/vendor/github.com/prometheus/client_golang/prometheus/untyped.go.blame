0000000000000000000000000000000000000000;;	// Copyright 2014 The Prometheus Authors
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
877581fa542c3af74aa2ed7addf6c8f7c20680ee;Godeps/_workspace/src/github.com/prometheus/client_golang/prometheus/untyped.go[Godeps/_workspace/src/github.com/prometheus/client_golang/prometheus/untyped.go][vendor/github.com/prometheus/client_golang/prometheus/untyped.go];	
0000000000000000000000000000000000000000;;	package prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Untyped is a Metric that represents a single numerical value that can
0000000000000000000000000000000000000000;;	// arbitrarily go up and down.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An Untyped metric works the same as a Gauge. The only difference is that to
0000000000000000000000000000000000000000;;	// no type information is implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To create Untyped instances, use NewUntyped.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deprecated: The Untyped type is deprecated because it doesn't make sense in
0000000000000000000000000000000000000000;;	// direct instrumentation. If you need to mirror an external metric of unknown
0000000000000000000000000000000000000000;;	// type (usually while writing exporters), Use MustNewConstMetric to create an
0000000000000000000000000000000000000000;;	// untyped metric instance on the fly.
0000000000000000000000000000000000000000;;	type Untyped interface {
0000000000000000000000000000000000000000;;		Metric
0000000000000000000000000000000000000000;;		Collector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set sets the Untyped metric to an arbitrary value.
0000000000000000000000000000000000000000;;		Set(float64)
0000000000000000000000000000000000000000;;		// Inc increments the Untyped metric by 1.
0000000000000000000000000000000000000000;;		Inc()
0000000000000000000000000000000000000000;;		// Dec decrements the Untyped metric by 1.
0000000000000000000000000000000000000000;;		Dec()
0000000000000000000000000000000000000000;;		// Add adds the given value to the Untyped metric. (The value can be
0000000000000000000000000000000000000000;;		// negative, resulting in a decrease.)
0000000000000000000000000000000000000000;;		Add(float64)
0000000000000000000000000000000000000000;;		// Sub subtracts the given value from the Untyped metric. (The value can
0000000000000000000000000000000000000000;;		// be negative, resulting in an increase.)
0000000000000000000000000000000000000000;;		Sub(float64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UntypedOpts is an alias for Opts. See there for doc comments.
0000000000000000000000000000000000000000;;	type UntypedOpts Opts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUntyped creates a new Untyped metric from the provided UntypedOpts.
0000000000000000000000000000000000000000;;	func NewUntyped(opts UntypedOpts) Untyped {
0000000000000000000000000000000000000000;;		return newValue(NewDesc(
0000000000000000000000000000000000000000;;			BuildFQName(opts.Namespace, opts.Subsystem, opts.Name),
0000000000000000000000000000000000000000;;			opts.Help,
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;			opts.ConstLabels,
0000000000000000000000000000000000000000;;		), UntypedValue, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UntypedVec is a Collector that bundles a set of Untyped metrics that all
0000000000000000000000000000000000000000;;	// share the same Desc, but have different values for their variable
0000000000000000000000000000000000000000;;	// labels. This is used if you want to count the same thing partitioned by
0000000000000000000000000000000000000000;;	// various dimensions. Create instances with NewUntypedVec.
0000000000000000000000000000000000000000;;	type UntypedVec struct {
0000000000000000000000000000000000000000;;		*MetricVec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUntypedVec creates a new UntypedVec based on the provided UntypedOpts and
0000000000000000000000000000000000000000;;	// partitioned by the given label names. At least one label name must be
0000000000000000000000000000000000000000;;	// provided.
0000000000000000000000000000000000000000;;	func NewUntypedVec(opts UntypedOpts, labelNames []string) *UntypedVec {
0000000000000000000000000000000000000000;;		desc := NewDesc(
0000000000000000000000000000000000000000;;			BuildFQName(opts.Namespace, opts.Subsystem, opts.Name),
0000000000000000000000000000000000000000;;			opts.Help,
0000000000000000000000000000000000000000;;			labelNames,
0000000000000000000000000000000000000000;;			opts.ConstLabels,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return &UntypedVec{
0000000000000000000000000000000000000000;;			MetricVec: newMetricVec(desc, func(lvs ...string) Metric {
0000000000000000000000000000000000000000;;				return newValue(desc, UntypedValue, 0, lvs...)
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMetricWithLabelValues replaces the method of the same name in
0000000000000000000000000000000000000000;;	// MetricVec. The difference is that this method returns an Untyped and not a
0000000000000000000000000000000000000000;;	// Metric so that no type conversion is required.
0000000000000000000000000000000000000000;;	func (m *UntypedVec) GetMetricWithLabelValues(lvs ...string) (Untyped, error) {
0000000000000000000000000000000000000000;;		metric, err := m.MetricVec.GetMetricWithLabelValues(lvs...)
0000000000000000000000000000000000000000;;		if metric != nil {
0000000000000000000000000000000000000000;;			return metric.(Untyped), err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMetricWith replaces the method of the same name in MetricVec. The
0000000000000000000000000000000000000000;;	// difference is that this method returns an Untyped and not a Metric so that no
0000000000000000000000000000000000000000;;	// type conversion is required.
0000000000000000000000000000000000000000;;	func (m *UntypedVec) GetMetricWith(labels Labels) (Untyped, error) {
0000000000000000000000000000000000000000;;		metric, err := m.MetricVec.GetMetricWith(labels)
0000000000000000000000000000000000000000;;		if metric != nil {
0000000000000000000000000000000000000000;;			return metric.(Untyped), err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLabelValues works as GetMetricWithLabelValues, but panics where
0000000000000000000000000000000000000000;;	// GetMetricWithLabelValues would have returned an error. By not returning an
0000000000000000000000000000000000000000;;	// error, WithLabelValues allows shortcuts like
0000000000000000000000000000000000000000;;	//     myVec.WithLabelValues("404", "GET").Add(42)
0000000000000000000000000000000000000000;;	func (m *UntypedVec) WithLabelValues(lvs ...string) Untyped {
0000000000000000000000000000000000000000;;		return m.MetricVec.WithLabelValues(lvs...).(Untyped)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// With works as GetMetricWith, but panics where GetMetricWithLabels would have
0000000000000000000000000000000000000000;;	// returned an error. By not returning an error, With allows shortcuts like
0000000000000000000000000000000000000000;;	//     myVec.With(Labels{"code": "404", "method": "GET"}).Add(42)
0000000000000000000000000000000000000000;;	func (m *UntypedVec) With(labels Labels) Untyped {
0000000000000000000000000000000000000000;;		return m.MetricVec.With(labels).(Untyped)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UntypedFunc is an Untyped whose value is determined at collect time by
0000000000000000000000000000000000000000;;	// calling a provided function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To create UntypedFunc instances, use NewUntypedFunc.
0000000000000000000000000000000000000000;;	type UntypedFunc interface {
0000000000000000000000000000000000000000;;		Metric
0000000000000000000000000000000000000000;;		Collector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUntypedFunc creates a new UntypedFunc based on the provided
0000000000000000000000000000000000000000;;	// UntypedOpts. The value reported is determined by calling the given function
0000000000000000000000000000000000000000;;	// from within the Write method. Take into account that metric collection may
0000000000000000000000000000000000000000;;	// happen concurrently. If that results in concurrent calls to Write, like in
0000000000000000000000000000000000000000;;	// the case where an UntypedFunc is directly registered with Prometheus, the
0000000000000000000000000000000000000000;;	// provided function must be concurrency-safe.
0000000000000000000000000000000000000000;;	func NewUntypedFunc(opts UntypedOpts, function func() float64) UntypedFunc {
0000000000000000000000000000000000000000;;		return newValueFunc(NewDesc(
0000000000000000000000000000000000000000;;			BuildFQName(opts.Namespace, opts.Subsystem, opts.Name),
0000000000000000000000000000000000000000;;			opts.Help,
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;			opts.ConstLabels,
0000000000000000000000000000000000000000;;		), UntypedValue, function)
0000000000000000000000000000000000000000;;	}
