0000000000000000000000000000000000000000;;	package prometheus
877581fa542c3af74aa2ed7addf6c8f7c20680ee;Godeps/_workspace/src/github.com/prometheus/client_golang/prometheus/go_collector.go[Godeps/_workspace/src/github.com/prometheus/client_golang/prometheus/go_collector.go][vendor/github.com/prometheus/client_golang/prometheus/go_collector.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"runtime/debug"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type goCollector struct {
0000000000000000000000000000000000000000;;		goroutinesDesc *Desc
0000000000000000000000000000000000000000;;		threadsDesc    *Desc
0000000000000000000000000000000000000000;;		gcDesc         *Desc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// metrics to describe and collect
0000000000000000000000000000000000000000;;		metrics memStatsMetrics
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewGoCollector returns a collector which exports metrics about the current
0000000000000000000000000000000000000000;;	// go process.
0000000000000000000000000000000000000000;;	func NewGoCollector() Collector {
0000000000000000000000000000000000000000;;		return &goCollector{
0000000000000000000000000000000000000000;;			goroutinesDesc: NewDesc(
0000000000000000000000000000000000000000;;				"go_goroutines",
0000000000000000000000000000000000000000;;				"Number of goroutines that currently exist.",
0000000000000000000000000000000000000000;;				nil, nil),
0000000000000000000000000000000000000000;;			threadsDesc: NewDesc(
0000000000000000000000000000000000000000;;				"go_threads",
0000000000000000000000000000000000000000;;				"Number of OS threads created",
0000000000000000000000000000000000000000;;				nil, nil),
0000000000000000000000000000000000000000;;			gcDesc: NewDesc(
0000000000000000000000000000000000000000;;				"go_gc_duration_seconds",
0000000000000000000000000000000000000000;;				"A summary of the GC invocation durations.",
0000000000000000000000000000000000000000;;				nil, nil),
0000000000000000000000000000000000000000;;			metrics: memStatsMetrics{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("alloc_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes allocated and still in use.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.Alloc) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("alloc_bytes_total"),
0000000000000000000000000000000000000000;;						"Total number of bytes allocated, even if freed.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.TotalAlloc) },
0000000000000000000000000000000000000000;;					valType: CounterValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("sys_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes obtained from system.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.Sys) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("lookups_total"),
0000000000000000000000000000000000000000;;						"Total number of pointer lookups.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.Lookups) },
0000000000000000000000000000000000000000;;					valType: CounterValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("mallocs_total"),
0000000000000000000000000000000000000000;;						"Total number of mallocs.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.Mallocs) },
0000000000000000000000000000000000000000;;					valType: CounterValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("frees_total"),
0000000000000000000000000000000000000000;;						"Total number of frees.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.Frees) },
0000000000000000000000000000000000000000;;					valType: CounterValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("heap_alloc_bytes"),
0000000000000000000000000000000000000000;;						"Number of heap bytes allocated and still in use.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.HeapAlloc) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("heap_sys_bytes"),
0000000000000000000000000000000000000000;;						"Number of heap bytes obtained from system.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.HeapSys) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("heap_idle_bytes"),
0000000000000000000000000000000000000000;;						"Number of heap bytes waiting to be used.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.HeapIdle) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("heap_inuse_bytes"),
0000000000000000000000000000000000000000;;						"Number of heap bytes that are in use.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.HeapInuse) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("heap_released_bytes"),
0000000000000000000000000000000000000000;;						"Number of heap bytes released to OS.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.HeapReleased) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("heap_objects"),
0000000000000000000000000000000000000000;;						"Number of allocated objects.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.HeapObjects) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("stack_inuse_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes in use by the stack allocator.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.StackInuse) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("stack_sys_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes obtained from system for stack allocator.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.StackSys) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("mspan_inuse_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes in use by mspan structures.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.MSpanInuse) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("mspan_sys_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes used for mspan structures obtained from system.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.MSpanSys) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("mcache_inuse_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes in use by mcache structures.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.MCacheInuse) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("mcache_sys_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes used for mcache structures obtained from system.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.MCacheSys) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("buck_hash_sys_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes used by the profiling bucket hash table.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.BuckHashSys) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("gc_sys_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes used for garbage collection system metadata.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.GCSys) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("other_sys_bytes"),
0000000000000000000000000000000000000000;;						"Number of bytes used for other system allocations.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.OtherSys) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("next_gc_bytes"),
0000000000000000000000000000000000000000;;						"Number of heap bytes when next garbage collection will take place.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.NextGC) },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("last_gc_time_seconds"),
0000000000000000000000000000000000000000;;						"Number of seconds since 1970 of last garbage collection.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return float64(ms.LastGC) / 1e9 },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					desc: NewDesc(
0000000000000000000000000000000000000000;;						memstatNamespace("gc_cpu_fraction"),
0000000000000000000000000000000000000000;;						"The fraction of this program's available CPU time used by the GC since the program started.",
0000000000000000000000000000000000000000;;						nil, nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					eval:    func(ms *runtime.MemStats) float64 { return ms.GCCPUFraction },
0000000000000000000000000000000000000000;;					valType: GaugeValue,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func memstatNamespace(s string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("go_memstats_%s", s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describe returns all descriptions of the collector.
0000000000000000000000000000000000000000;;	func (c *goCollector) Describe(ch chan<- *Desc) {
0000000000000000000000000000000000000000;;		ch <- c.goroutinesDesc
0000000000000000000000000000000000000000;;		ch <- c.threadsDesc
0000000000000000000000000000000000000000;;		ch <- c.gcDesc
0000000000000000000000000000000000000000;;		for _, i := range c.metrics {
0000000000000000000000000000000000000000;;			ch <- i.desc
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Collect returns the current state of all metrics of the collector.
0000000000000000000000000000000000000000;;	func (c *goCollector) Collect(ch chan<- Metric) {
0000000000000000000000000000000000000000;;		ch <- MustNewConstMetric(c.goroutinesDesc, GaugeValue, float64(runtime.NumGoroutine()))
0000000000000000000000000000000000000000;;		n, _ := runtime.ThreadCreateProfile(nil)
0000000000000000000000000000000000000000;;		ch <- MustNewConstMetric(c.threadsDesc, GaugeValue, float64(n))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var stats debug.GCStats
0000000000000000000000000000000000000000;;		stats.PauseQuantiles = make([]time.Duration, 5)
0000000000000000000000000000000000000000;;		debug.ReadGCStats(&stats)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		quantiles := make(map[float64]float64)
0000000000000000000000000000000000000000;;		for idx, pq := range stats.PauseQuantiles[1:] {
0000000000000000000000000000000000000000;;			quantiles[float64(idx+1)/float64(len(stats.PauseQuantiles)-1)] = pq.Seconds()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		quantiles[0.0] = stats.PauseQuantiles[0].Seconds()
0000000000000000000000000000000000000000;;		ch <- MustNewConstSummary(c.gcDesc, uint64(stats.NumGC), float64(stats.PauseTotal.Seconds()), quantiles)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ms := &runtime.MemStats{}
0000000000000000000000000000000000000000;;		runtime.ReadMemStats(ms)
0000000000000000000000000000000000000000;;		for _, i := range c.metrics {
0000000000000000000000000000000000000000;;			ch <- MustNewConstMetric(i.desc, i.valType, i.eval(ms))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// memStatsMetrics provide description, value, and value type for memstat metrics.
0000000000000000000000000000000000000000;;	type memStatsMetrics []struct {
0000000000000000000000000000000000000000;;		desc    *Desc
0000000000000000000000000000000000000000;;		eval    func(*runtime.MemStats) float64
0000000000000000000000000000000000000000;;		valType ValueType
0000000000000000000000000000000000000000;;	}
