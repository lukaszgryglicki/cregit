0000000000000000000000000000000000000000;;	package procfs
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"encoding/hex"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPVSStats holds IPVS statistics, as exposed by the kernel in `/proc/net/ip_vs_stats`.
0000000000000000000000000000000000000000;;	type IPVSStats struct {
0000000000000000000000000000000000000000;;		// Total count of connections.
0000000000000000000000000000000000000000;;		Connections uint64
0000000000000000000000000000000000000000;;		// Total incoming packages processed.
0000000000000000000000000000000000000000;;		IncomingPackets uint64
0000000000000000000000000000000000000000;;		// Total outgoing packages processed.
0000000000000000000000000000000000000000;;		OutgoingPackets uint64
0000000000000000000000000000000000000000;;		// Total incoming traffic.
0000000000000000000000000000000000000000;;		IncomingBytes uint64
0000000000000000000000000000000000000000;;		// Total outgoing traffic.
0000000000000000000000000000000000000000;;		OutgoingBytes uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPVSBackendStatus holds current metrics of one virtual / real address pair.
0000000000000000000000000000000000000000;;	type IPVSBackendStatus struct {
0000000000000000000000000000000000000000;;		// The local (virtual) IP address.
0000000000000000000000000000000000000000;;		LocalAddress net.IP
0000000000000000000000000000000000000000;;		// The local (virtual) port.
0000000000000000000000000000000000000000;;		LocalPort uint16
0000000000000000000000000000000000000000;;		// The local firewall mark
0000000000000000000000000000000000000000;;		LocalMark string
0000000000000000000000000000000000000000;;		// The transport protocol (TCP, UDP).
0000000000000000000000000000000000000000;;		Proto string
0000000000000000000000000000000000000000;;		// The remote (real) IP address.
0000000000000000000000000000000000000000;;		RemoteAddress net.IP
0000000000000000000000000000000000000000;;		// The remote (real) port.
0000000000000000000000000000000000000000;;		RemotePort uint16
0000000000000000000000000000000000000000;;		// The current number of active connections for this virtual/real address pair.
0000000000000000000000000000000000000000;;		ActiveConn uint64
0000000000000000000000000000000000000000;;		// The current number of inactive connections for this virtual/real address pair.
0000000000000000000000000000000000000000;;		InactConn uint64
0000000000000000000000000000000000000000;;		// The current weight of this virtual/real address pair.
0000000000000000000000000000000000000000;;		Weight uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIPVSStats reads the IPVS statistics.
0000000000000000000000000000000000000000;;	func NewIPVSStats() (IPVSStats, error) {
0000000000000000000000000000000000000000;;		fs, err := NewFS(DefaultMountPoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return IPVSStats{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fs.NewIPVSStats()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIPVSStats reads the IPVS statistics from the specified `proc` filesystem.
0000000000000000000000000000000000000000;;	func (fs FS) NewIPVSStats() (IPVSStats, error) {
0000000000000000000000000000000000000000;;		file, err := os.Open(fs.Path("net/ip_vs_stats"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return IPVSStats{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return parseIPVSStats(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseIPVSStats performs the actual parsing of `ip_vs_stats`.
0000000000000000000000000000000000000000;;	func parseIPVSStats(file io.Reader) (IPVSStats, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			statContent []byte
0000000000000000000000000000000000000000;;			statLines   []string
0000000000000000000000000000000000000000;;			statFields  []string
0000000000000000000000000000000000000000;;			stats       IPVSStats
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statContent, err := ioutil.ReadAll(file)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return IPVSStats{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statLines = strings.SplitN(string(statContent), "\n", 4)
0000000000000000000000000000000000000000;;		if len(statLines) != 4 {
0000000000000000000000000000000000000000;;			return IPVSStats{}, errors.New("ip_vs_stats corrupt: too short")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statFields = strings.Fields(statLines[2])
0000000000000000000000000000000000000000;;		if len(statFields) != 5 {
0000000000000000000000000000000000000000;;			return IPVSStats{}, errors.New("ip_vs_stats corrupt: unexpected number of fields")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stats.Connections, err = strconv.ParseUint(statFields[0], 16, 64)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return IPVSStats{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.IncomingPackets, err = strconv.ParseUint(statFields[1], 16, 64)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return IPVSStats{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.OutgoingPackets, err = strconv.ParseUint(statFields[2], 16, 64)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return IPVSStats{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.IncomingBytes, err = strconv.ParseUint(statFields[3], 16, 64)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return IPVSStats{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats.OutgoingBytes, err = strconv.ParseUint(statFields[4], 16, 64)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return IPVSStats{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return stats, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIPVSBackendStatus reads and returns the status of all (virtual,real) server pairs.
0000000000000000000000000000000000000000;;	func NewIPVSBackendStatus() ([]IPVSBackendStatus, error) {
0000000000000000000000000000000000000000;;		fs, err := NewFS(DefaultMountPoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []IPVSBackendStatus{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fs.NewIPVSBackendStatus()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIPVSBackendStatus reads and returns the status of all (virtual,real) server pairs from the specified `proc` filesystem.
0000000000000000000000000000000000000000;;	func (fs FS) NewIPVSBackendStatus() ([]IPVSBackendStatus, error) {
0000000000000000000000000000000000000000;;		file, err := os.Open(fs.Path("net/ip_vs"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return parseIPVSBackendStatus(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseIPVSBackendStatus(file io.Reader) ([]IPVSBackendStatus, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			status       []IPVSBackendStatus
0000000000000000000000000000000000000000;;			scanner      = bufio.NewScanner(file)
0000000000000000000000000000000000000000;;			proto        string
0000000000000000000000000000000000000000;;			localMark    string
0000000000000000000000000000000000000000;;			localAddress net.IP
0000000000000000000000000000000000000000;;			localPort    uint16
0000000000000000000000000000000000000000;;			err          error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for scanner.Scan() {
0000000000000000000000000000000000000000;;			fields := strings.Fields(string(scanner.Text()))
0000000000000000000000000000000000000000;;			if len(fields) == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case fields[0] == "IP" || fields[0] == "Prot" || fields[1] == "RemoteAddress:Port":
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case fields[0] == "TCP" || fields[0] == "UDP":
0000000000000000000000000000000000000000;;				if len(fields) < 2 {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				proto = fields[0]
0000000000000000000000000000000000000000;;				localMark = ""
0000000000000000000000000000000000000000;;				localAddress, localPort, err = parseIPPort(fields[1])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case fields[0] == "FWM":
0000000000000000000000000000000000000000;;				if len(fields) < 2 {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				proto = fields[0]
0000000000000000000000000000000000000000;;				localMark = fields[1]
0000000000000000000000000000000000000000;;				localAddress = nil
0000000000000000000000000000000000000000;;				localPort = 0
0000000000000000000000000000000000000000;;			case fields[0] == "->":
0000000000000000000000000000000000000000;;				if len(fields) < 6 {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				remoteAddress, remotePort, err := parseIPPort(fields[1])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				weight, err := strconv.ParseUint(fields[3], 10, 64)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				activeConn, err := strconv.ParseUint(fields[4], 10, 64)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				inactConn, err := strconv.ParseUint(fields[5], 10, 64)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				status = append(status, IPVSBackendStatus{
0000000000000000000000000000000000000000;;					LocalAddress:  localAddress,
0000000000000000000000000000000000000000;;					LocalPort:     localPort,
0000000000000000000000000000000000000000;;					LocalMark:     localMark,
0000000000000000000000000000000000000000;;					RemoteAddress: remoteAddress,
0000000000000000000000000000000000000000;;					RemotePort:    remotePort,
0000000000000000000000000000000000000000;;					Proto:         proto,
0000000000000000000000000000000000000000;;					Weight:        weight,
0000000000000000000000000000000000000000;;					ActiveConn:    activeConn,
0000000000000000000000000000000000000000;;					InactConn:     inactConn,
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return status, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseIPPort(s string) (net.IP, uint16, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			ip  net.IP
0000000000000000000000000000000000000000;;			err error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch len(s) {
0000000000000000000000000000000000000000;;		case 13:
0000000000000000000000000000000000000000;;			ip, err = hex.DecodeString(s[0:8])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, 0, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case 46:
0000000000000000000000000000000000000000;;			ip = net.ParseIP(s[1:40])
0000000000000000000000000000000000000000;;			if ip == nil {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("invalid IPv6 address: %s", s[1:40])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, 0, fmt.Errorf("unexpected IP:Port: %s", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		portString := s[len(s)-4:]
0000000000000000000000000000000000000000;;		if len(portString) != 4 {
0000000000000000000000000000000000000000;;			return nil, 0, fmt.Errorf("unexpected port string format: %s", portString)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		port, err := strconv.ParseUint(portString, 16, 16)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ip, uint16(port), nil
0000000000000000000000000000000000000000;;	}
