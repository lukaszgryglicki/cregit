0000000000000000000000000000000000000000;;	package procfs
877581fa542c3af74aa2ed7addf6c8f7c20680ee;Godeps/_workspace/src/github.com/prometheus/procfs/fs.go[Godeps/_workspace/src/github.com/prometheus/procfs/fs.go][vendor/github.com/prometheus/procfs/fs.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/procfs/xfs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FS represents the pseudo-filesystem proc, which provides an interface to
0000000000000000000000000000000000000000;;	// kernel data structures.
0000000000000000000000000000000000000000;;	type FS string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultMountPoint is the common mount point of the proc filesystem.
0000000000000000000000000000000000000000;;	const DefaultMountPoint = "/proc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFS returns a new FS mounted under the given mountPoint. It will error
0000000000000000000000000000000000000000;;	// if the mount point can't be read.
0000000000000000000000000000000000000000;;	func NewFS(mountPoint string) (FS, error) {
0000000000000000000000000000000000000000;;		info, err := os.Stat(mountPoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("could not read %s: %s", mountPoint, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !info.IsDir() {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("mount point %s is not a directory", mountPoint)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return FS(mountPoint), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Path returns the path of the given subsystem relative to the procfs root.
0000000000000000000000000000000000000000;;	func (fs FS) Path(p ...string) string {
0000000000000000000000000000000000000000;;		return path.Join(append([]string{string(fs)}, p...)...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XFSStats retrieves XFS filesystem runtime statistics.
0000000000000000000000000000000000000000;;	func (fs FS) XFSStats() (*xfs.Stats, error) {
0000000000000000000000000000000000000000;;		f, err := os.Open(fs.Path("fs/xfs/stat"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return xfs.ParseStats(f)
0000000000000000000000000000000000000000;;	}
