0000000000000000000000000000000000000000;;	// Copyright 2017 The Prometheus Authors
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
13e1e7cd1550dcd956d3e82fe798021f5812b15e;;	
0000000000000000000000000000000000000000;;	package xfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseStats parses a Stats from an input io.Reader, using the format
0000000000000000000000000000000000000000;;	// found in /proc/fs/xfs/stat.
0000000000000000000000000000000000000000;;	func ParseStats(r io.Reader) (*Stats, error) {
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			// Fields parsed into stats structures.
0000000000000000000000000000000000000000;;			fieldExtentAlloc = "extent_alloc"
0000000000000000000000000000000000000000;;			fieldAbt         = "abt"
0000000000000000000000000000000000000000;;			fieldBlkMap      = "blk_map"
0000000000000000000000000000000000000000;;			fieldBmbt        = "bmbt"
0000000000000000000000000000000000000000;;			fieldDir         = "dir"
0000000000000000000000000000000000000000;;			fieldTrans       = "trans"
0000000000000000000000000000000000000000;;			fieldIg          = "ig"
0000000000000000000000000000000000000000;;			fieldLog         = "log"
0000000000000000000000000000000000000000;;			fieldRw          = "rw"
0000000000000000000000000000000000000000;;			fieldAttr        = "attr"
0000000000000000000000000000000000000000;;			fieldIcluster    = "icluster"
0000000000000000000000000000000000000000;;			fieldVnodes      = "vnodes"
0000000000000000000000000000000000000000;;			fieldBuf         = "buf"
0000000000000000000000000000000000000000;;			fieldXpc         = "xpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Unimplemented at this time due to lack of documentation.
0000000000000000000000000000000000000000;;			fieldPushAil = "push_ail"
0000000000000000000000000000000000000000;;			fieldXstrat  = "xstrat"
0000000000000000000000000000000000000000;;			fieldAbtb2   = "abtb2"
0000000000000000000000000000000000000000;;			fieldAbtc2   = "abtc2"
0000000000000000000000000000000000000000;;			fieldBmbt2   = "bmbt2"
0000000000000000000000000000000000000000;;			fieldIbt2    = "ibt2"
0000000000000000000000000000000000000000;;			fieldFibt2   = "fibt2"
0000000000000000000000000000000000000000;;			fieldQm      = "qm"
0000000000000000000000000000000000000000;;			fieldDebug   = "debug"
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var xfss Stats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := bufio.NewScanner(r)
0000000000000000000000000000000000000000;;		for s.Scan() {
0000000000000000000000000000000000000000;;			// Expect at least a string label and a single integer value, ex:
0000000000000000000000000000000000000000;;			//   - abt 0
0000000000000000000000000000000000000000;;			//   - rw 1 2
0000000000000000000000000000000000000000;;			ss := strings.Fields(string(s.Bytes()))
0000000000000000000000000000000000000000;;			if len(ss) < 2 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			label := ss[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Extended precision counters are uint64 values.
0000000000000000000000000000000000000000;;			if label == fieldXpc {
0000000000000000000000000000000000000000;;				us, err := parseUint64s(ss[1:])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				xfss.ExtendedPrecision, err = extendedPrecisionStats(us)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// All other counters are uint32 values.
0000000000000000000000000000000000000000;;			us, err := parseUint32s(ss[1:])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch label {
0000000000000000000000000000000000000000;;			case fieldExtentAlloc:
0000000000000000000000000000000000000000;;				xfss.ExtentAllocation, err = extentAllocationStats(us)
0000000000000000000000000000000000000000;;			case fieldAbt:
0000000000000000000000000000000000000000;;				xfss.AllocationBTree, err = btreeStats(us)
0000000000000000000000000000000000000000;;			case fieldBlkMap:
0000000000000000000000000000000000000000;;				xfss.BlockMapping, err = blockMappingStats(us)
0000000000000000000000000000000000000000;;			case fieldBmbt:
0000000000000000000000000000000000000000;;				xfss.BlockMapBTree, err = btreeStats(us)
0000000000000000000000000000000000000000;;			case fieldDir:
0000000000000000000000000000000000000000;;				xfss.DirectoryOperation, err = directoryOperationStats(us)
0000000000000000000000000000000000000000;;			case fieldTrans:
0000000000000000000000000000000000000000;;				xfss.Transaction, err = transactionStats(us)
0000000000000000000000000000000000000000;;			case fieldIg:
0000000000000000000000000000000000000000;;				xfss.InodeOperation, err = inodeOperationStats(us)
0000000000000000000000000000000000000000;;			case fieldLog:
0000000000000000000000000000000000000000;;				xfss.LogOperation, err = logOperationStats(us)
0000000000000000000000000000000000000000;;			case fieldRw:
0000000000000000000000000000000000000000;;				xfss.ReadWrite, err = readWriteStats(us)
0000000000000000000000000000000000000000;;			case fieldAttr:
0000000000000000000000000000000000000000;;				xfss.AttributeOperation, err = attributeOperationStats(us)
0000000000000000000000000000000000000000;;			case fieldIcluster:
0000000000000000000000000000000000000000;;				xfss.InodeClustering, err = inodeClusteringStats(us)
0000000000000000000000000000000000000000;;			case fieldVnodes:
0000000000000000000000000000000000000000;;				xfss.Vnode, err = vnodeStats(us)
0000000000000000000000000000000000000000;;			case fieldBuf:
0000000000000000000000000000000000000000;;				xfss.Buffer, err = bufferStats(us)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &xfss, s.Err()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// extentAllocationStats builds an ExtentAllocationStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func extentAllocationStats(us []uint32) (ExtentAllocationStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 4 {
0000000000000000000000000000000000000000;;			return ExtentAllocationStats{}, fmt.Errorf("incorrect number of values for XFS extent allocation stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ExtentAllocationStats{
0000000000000000000000000000000000000000;;			ExtentsAllocated: us[0],
0000000000000000000000000000000000000000;;			BlocksAllocated:  us[1],
0000000000000000000000000000000000000000;;			ExtentsFreed:     us[2],
0000000000000000000000000000000000000000;;			BlocksFreed:      us[3],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// btreeStats builds a BTreeStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func btreeStats(us []uint32) (BTreeStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 4 {
0000000000000000000000000000000000000000;;			return BTreeStats{}, fmt.Errorf("incorrect number of values for XFS btree stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return BTreeStats{
0000000000000000000000000000000000000000;;			Lookups:         us[0],
0000000000000000000000000000000000000000;;			Compares:        us[1],
0000000000000000000000000000000000000000;;			RecordsInserted: us[2],
0000000000000000000000000000000000000000;;			RecordsDeleted:  us[3],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlockMappingStat builds a BlockMappingStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func blockMappingStats(us []uint32) (BlockMappingStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 7 {
0000000000000000000000000000000000000000;;			return BlockMappingStats{}, fmt.Errorf("incorrect number of values for XFS block mapping stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return BlockMappingStats{
0000000000000000000000000000000000000000;;			Reads:                us[0],
0000000000000000000000000000000000000000;;			Writes:               us[1],
0000000000000000000000000000000000000000;;			Unmaps:               us[2],
0000000000000000000000000000000000000000;;			ExtentListInsertions: us[3],
0000000000000000000000000000000000000000;;			ExtentListDeletions:  us[4],
0000000000000000000000000000000000000000;;			ExtentListLookups:    us[5],
0000000000000000000000000000000000000000;;			ExtentListCompares:   us[6],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DirectoryOperationStats builds a DirectoryOperationStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func directoryOperationStats(us []uint32) (DirectoryOperationStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 4 {
0000000000000000000000000000000000000000;;			return DirectoryOperationStats{}, fmt.Errorf("incorrect number of values for XFS directory operation stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return DirectoryOperationStats{
0000000000000000000000000000000000000000;;			Lookups:  us[0],
0000000000000000000000000000000000000000;;			Creates:  us[1],
0000000000000000000000000000000000000000;;			Removes:  us[2],
0000000000000000000000000000000000000000;;			Getdents: us[3],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TransactionStats builds a TransactionStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func transactionStats(us []uint32) (TransactionStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 3 {
0000000000000000000000000000000000000000;;			return TransactionStats{}, fmt.Errorf("incorrect number of values for XFS transaction stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return TransactionStats{
0000000000000000000000000000000000000000;;			Sync:  us[0],
0000000000000000000000000000000000000000;;			Async: us[1],
0000000000000000000000000000000000000000;;			Empty: us[2],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InodeOperationStats builds an InodeOperationStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func inodeOperationStats(us []uint32) (InodeOperationStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 7 {
0000000000000000000000000000000000000000;;			return InodeOperationStats{}, fmt.Errorf("incorrect number of values for XFS inode operation stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return InodeOperationStats{
0000000000000000000000000000000000000000;;			Attempts:        us[0],
0000000000000000000000000000000000000000;;			Found:           us[1],
0000000000000000000000000000000000000000;;			Recycle:         us[2],
0000000000000000000000000000000000000000;;			Missed:          us[3],
0000000000000000000000000000000000000000;;			Duplicate:       us[4],
0000000000000000000000000000000000000000;;			Reclaims:        us[5],
0000000000000000000000000000000000000000;;			AttributeChange: us[6],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogOperationStats builds a LogOperationStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func logOperationStats(us []uint32) (LogOperationStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 5 {
0000000000000000000000000000000000000000;;			return LogOperationStats{}, fmt.Errorf("incorrect number of values for XFS log operation stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return LogOperationStats{
0000000000000000000000000000000000000000;;			Writes:            us[0],
0000000000000000000000000000000000000000;;			Blocks:            us[1],
0000000000000000000000000000000000000000;;			NoInternalBuffers: us[2],
0000000000000000000000000000000000000000;;			Force:             us[3],
0000000000000000000000000000000000000000;;			ForceSleep:        us[4],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadWriteStats builds a ReadWriteStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func readWriteStats(us []uint32) (ReadWriteStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 2 {
0000000000000000000000000000000000000000;;			return ReadWriteStats{}, fmt.Errorf("incorrect number of values for XFS read write stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ReadWriteStats{
0000000000000000000000000000000000000000;;			Read:  us[0],
0000000000000000000000000000000000000000;;			Write: us[1],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttributeOperationStats builds an AttributeOperationStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func attributeOperationStats(us []uint32) (AttributeOperationStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 4 {
0000000000000000000000000000000000000000;;			return AttributeOperationStats{}, fmt.Errorf("incorrect number of values for XFS attribute operation stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return AttributeOperationStats{
0000000000000000000000000000000000000000;;			Get:    us[0],
0000000000000000000000000000000000000000;;			Set:    us[1],
0000000000000000000000000000000000000000;;			Remove: us[2],
0000000000000000000000000000000000000000;;			List:   us[3],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InodeClusteringStats builds an InodeClusteringStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func inodeClusteringStats(us []uint32) (InodeClusteringStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 3 {
0000000000000000000000000000000000000000;;			return InodeClusteringStats{}, fmt.Errorf("incorrect number of values for XFS inode clustering stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return InodeClusteringStats{
0000000000000000000000000000000000000000;;			Iflush:     us[0],
0000000000000000000000000000000000000000;;			Flush:      us[1],
0000000000000000000000000000000000000000;;			FlushInode: us[2],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VnodeStats builds a VnodeStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func vnodeStats(us []uint32) (VnodeStats, error) {
0000000000000000000000000000000000000000;;		// The attribute "Free" appears to not be available on older XFS
0000000000000000000000000000000000000000;;		// stats versions.  Therefore, 7 or 8 elements may appear in
0000000000000000000000000000000000000000;;		// this slice.
0000000000000000000000000000000000000000;;		l := len(us)
0000000000000000000000000000000000000000;;		if l != 7 && l != 8 {
0000000000000000000000000000000000000000;;			return VnodeStats{}, fmt.Errorf("incorrect number of values for XFS vnode stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := VnodeStats{
0000000000000000000000000000000000000000;;			Active:   us[0],
0000000000000000000000000000000000000000;;			Allocate: us[1],
0000000000000000000000000000000000000000;;			Get:      us[2],
0000000000000000000000000000000000000000;;			Hold:     us[3],
0000000000000000000000000000000000000000;;			Release:  us[4],
0000000000000000000000000000000000000000;;			Reclaim:  us[5],
0000000000000000000000000000000000000000;;			Remove:   us[6],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Skip adding free, unless it is present. The zero value will
0000000000000000000000000000000000000000;;		// be used in place of an actual count.
0000000000000000000000000000000000000000;;		if l == 7 {
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Free = us[7]
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BufferStats builds a BufferStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func bufferStats(us []uint32) (BufferStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 9 {
0000000000000000000000000000000000000000;;			return BufferStats{}, fmt.Errorf("incorrect number of values for XFS buffer stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return BufferStats{
0000000000000000000000000000000000000000;;			Get:             us[0],
0000000000000000000000000000000000000000;;			Create:          us[1],
0000000000000000000000000000000000000000;;			GetLocked:       us[2],
0000000000000000000000000000000000000000;;			GetLockedWaited: us[3],
0000000000000000000000000000000000000000;;			BusyLocked:      us[4],
0000000000000000000000000000000000000000;;			MissLocked:      us[5],
0000000000000000000000000000000000000000;;			PageRetries:     us[6],
0000000000000000000000000000000000000000;;			PageFound:       us[7],
0000000000000000000000000000000000000000;;			GetRead:         us[8],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtendedPrecisionStats builds an ExtendedPrecisionStats from a slice of uint32s.
0000000000000000000000000000000000000000;;	func extendedPrecisionStats(us []uint64) (ExtendedPrecisionStats, error) {
0000000000000000000000000000000000000000;;		if l := len(us); l != 3 {
0000000000000000000000000000000000000000;;			return ExtendedPrecisionStats{}, fmt.Errorf("incorrect number of values for XFS extended precision stats: %d", l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ExtendedPrecisionStats{
0000000000000000000000000000000000000000;;			FlushBytes: us[0],
0000000000000000000000000000000000000000;;			WriteBytes: us[1],
0000000000000000000000000000000000000000;;			ReadBytes:  us[2],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseUint32s parses a slice of strings into a slice of uint32s.
0000000000000000000000000000000000000000;;	func parseUint32s(ss []string) ([]uint32, error) {
0000000000000000000000000000000000000000;;		us := make([]uint32, 0, len(ss))
0000000000000000000000000000000000000000;;		for _, s := range ss {
0000000000000000000000000000000000000000;;			u, err := strconv.ParseUint(s, 10, 32)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			us = append(us, uint32(u))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return us, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseUint64s parses a slice of strings into a slice of uint64s.
0000000000000000000000000000000000000000;;	func parseUint64s(ss []string) ([]uint64, error) {
0000000000000000000000000000000000000000;;		us := make([]uint64, 0, len(ss))
0000000000000000000000000000000000000000;;		for _, s := range ss {
0000000000000000000000000000000000000000;;			u, err := strconv.ParseUint(s, 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			us = append(us, u)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return us, nil
0000000000000000000000000000000000000000;;	}
