0000000000000000000000000000000000000000;;	package procfs
877581fa542c3af74aa2ed7addf6c8f7c20680ee;Godeps/_workspace/src/github.com/prometheus/procfs/stat.go[Godeps/_workspace/src/github.com/prometheus/procfs/stat.go][vendor/github.com/prometheus/procfs/stat.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stat represents kernel/system statistics.
0000000000000000000000000000000000000000;;	type Stat struct {
0000000000000000000000000000000000000000;;		// Boot time in seconds since the Epoch.
0000000000000000000000000000000000000000;;		BootTime int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewStat returns kernel/system statistics read from /proc/stat.
0000000000000000000000000000000000000000;;	func NewStat() (Stat, error) {
0000000000000000000000000000000000000000;;		fs, err := NewFS(DefaultMountPoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Stat{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fs.NewStat()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewStat returns an information about current kernel/system statistics.
0000000000000000000000000000000000000000;;	func (fs FS) NewStat() (Stat, error) {
0000000000000000000000000000000000000000;;		f, err := os.Open(fs.Path("stat"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Stat{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := bufio.NewScanner(f)
0000000000000000000000000000000000000000;;		for s.Scan() {
0000000000000000000000000000000000000000;;			line := s.Text()
0000000000000000000000000000000000000000;;			if !strings.HasPrefix(line, "btime") {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fields := strings.Fields(line)
0000000000000000000000000000000000000000;;			if len(fields) != 2 {
0000000000000000000000000000000000000000;;				return Stat{}, fmt.Errorf("couldn't parse %s line %s", f.Name(), line)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			i, err := strconv.ParseInt(fields[1], 10, 32)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return Stat{}, fmt.Errorf("couldn't parse %s: %s", fields[1], err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return Stat{BootTime: i}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Err(); err != nil {
0000000000000000000000000000000000000000;;			return Stat{}, fmt.Errorf("couldn't parse %s: %s", f.Name(), err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Stat{}, fmt.Errorf("couldn't parse %s, missing btime", f.Name())
0000000000000000000000000000000000000000;;	}
