0000000000000000000000000000000000000000;;	// Copyright 2017 The Prometheus Authors
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
13e1e7cd1550dcd956d3e82fe798021f5812b15e;;	
0000000000000000000000000000000000000000;;	package procfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A BuddyInfo is the details parsed from /proc/buddyinfo.
0000000000000000000000000000000000000000;;	// The data is comprised of an array of free fragments of each size.
0000000000000000000000000000000000000000;;	// The sizes are 2^n*PAGE_SIZE, where n is the array index.
0000000000000000000000000000000000000000;;	type BuddyInfo struct {
0000000000000000000000000000000000000000;;		Node  string
0000000000000000000000000000000000000000;;		Zone  string
0000000000000000000000000000000000000000;;		Sizes []float64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBuddyInfo reads the buddyinfo statistics.
0000000000000000000000000000000000000000;;	func NewBuddyInfo() ([]BuddyInfo, error) {
0000000000000000000000000000000000000000;;		fs, err := NewFS(DefaultMountPoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fs.NewBuddyInfo()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBuddyInfo reads the buddyinfo statistics from the specified `proc` filesystem.
0000000000000000000000000000000000000000;;	func (fs FS) NewBuddyInfo() ([]BuddyInfo, error) {
0000000000000000000000000000000000000000;;		file, err := os.Open(fs.Path("buddyinfo"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return parseBuddyInfo(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseBuddyInfo(r io.Reader) ([]BuddyInfo, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			buddyInfo   = []BuddyInfo{}
0000000000000000000000000000000000000000;;			scanner     = bufio.NewScanner(r)
0000000000000000000000000000000000000000;;			bucketCount = -1
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for scanner.Scan() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			line := scanner.Text()
0000000000000000000000000000000000000000;;			parts := strings.Fields(string(line))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(parts) < 4 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid number of fields when parsing buddyinfo")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			node := strings.TrimRight(parts[1], ",")
0000000000000000000000000000000000000000;;			zone := strings.TrimRight(parts[3], ",")
0000000000000000000000000000000000000000;;			arraySize := len(parts[4:])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if bucketCount == -1 {
0000000000000000000000000000000000000000;;				bucketCount = arraySize
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if bucketCount != arraySize {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("mismatch in number of buddyinfo buckets, previous count %d, new count %d", bucketCount, arraySize)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sizes := make([]float64, arraySize)
0000000000000000000000000000000000000000;;			for i := 0; i < arraySize; i++ {
0000000000000000000000000000000000000000;;				sizes[i], err = strconv.ParseFloat(parts[i+4], 64)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("invalid value in buddyinfo: %s", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			buddyInfo = append(buddyInfo, BuddyInfo{node, zone, sizes})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return buddyInfo, scanner.Err()
0000000000000000000000000000000000000000;;	}
