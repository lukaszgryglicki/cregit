0000000000000000000000000000000000000000;;	package procfs
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProcIO models the content of /proc/<pid>/io.
0000000000000000000000000000000000000000;;	type ProcIO struct {
0000000000000000000000000000000000000000;;		// Chars read.
0000000000000000000000000000000000000000;;		RChar uint64
0000000000000000000000000000000000000000;;		// Chars written.
0000000000000000000000000000000000000000;;		WChar uint64
0000000000000000000000000000000000000000;;		// Read syscalls.
0000000000000000000000000000000000000000;;		SyscR uint64
0000000000000000000000000000000000000000;;		// Write syscalls.
0000000000000000000000000000000000000000;;		SyscW uint64
0000000000000000000000000000000000000000;;		// Bytes read.
0000000000000000000000000000000000000000;;		ReadBytes uint64
0000000000000000000000000000000000000000;;		// Bytes written.
0000000000000000000000000000000000000000;;		WriteBytes uint64
0000000000000000000000000000000000000000;;		// Bytes written, but taking into account truncation. See
0000000000000000000000000000000000000000;;		// Documentation/filesystems/proc.txt in the kernel sources for
0000000000000000000000000000000000000000;;		// detailed explanation.
0000000000000000000000000000000000000000;;		CancelledWriteBytes int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewIO creates a new ProcIO instance from a given Proc instance.
0000000000000000000000000000000000000000;;	func (p Proc) NewIO() (ProcIO, error) {
0000000000000000000000000000000000000000;;		pio := ProcIO{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, err := os.Open(p.path("io"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pio, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(f)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pio, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ioFormat := "rchar: %d\nwchar: %d\nsyscr: %d\nsyscw: %d\n" +
0000000000000000000000000000000000000000;;			"read_bytes: %d\nwrite_bytes: %d\n" +
0000000000000000000000000000000000000000;;			"cancelled_write_bytes: %d\n"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = fmt.Sscanf(string(data), ioFormat, &pio.RChar, &pio.WChar, &pio.SyscR,
0000000000000000000000000000000000000000;;			&pio.SyscW, &pio.ReadBytes, &pio.WriteBytes, &pio.CancelledWriteBytes)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pio, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pio, nil
0000000000000000000000000000000000000000;;	}
