0000000000000000000000000000000000000000;;	// Copyright 2017 Prometheus Team
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
13e1e7cd1550dcd956d3e82fe798021f5812b15e;;	
0000000000000000000000000000000000000000;;	package procfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XfrmStat models the contents of /proc/net/xfrm_stat.
0000000000000000000000000000000000000000;;	type XfrmStat struct {
0000000000000000000000000000000000000000;;		// All errors which are not matched by other
0000000000000000000000000000000000000000;;		XfrmInError int
0000000000000000000000000000000000000000;;		// No buffer is left
0000000000000000000000000000000000000000;;		XfrmInBufferError int
0000000000000000000000000000000000000000;;		// Header Error
0000000000000000000000000000000000000000;;		XfrmInHdrError int
0000000000000000000000000000000000000000;;		// No state found
0000000000000000000000000000000000000000;;		// i.e. either inbound SPI, address, or IPSEC protocol at SA is wrong
0000000000000000000000000000000000000000;;		XfrmInNoStates int
0000000000000000000000000000000000000000;;		// Transformation protocol specific error
0000000000000000000000000000000000000000;;		// e.g. SA Key is wrong
0000000000000000000000000000000000000000;;		XfrmInStateProtoError int
0000000000000000000000000000000000000000;;		// Transformation mode specific error
0000000000000000000000000000000000000000;;		XfrmInStateModeError int
0000000000000000000000000000000000000000;;		// Sequence error
0000000000000000000000000000000000000000;;		// e.g. sequence number is out of window
0000000000000000000000000000000000000000;;		XfrmInStateSeqError int
0000000000000000000000000000000000000000;;		// State is expired
0000000000000000000000000000000000000000;;		XfrmInStateExpired int
0000000000000000000000000000000000000000;;		// State has mismatch option
0000000000000000000000000000000000000000;;		// e.g. UDP encapsulation type is mismatched
0000000000000000000000000000000000000000;;		XfrmInStateMismatch int
0000000000000000000000000000000000000000;;		// State is invalid
0000000000000000000000000000000000000000;;		XfrmInStateInvalid int
0000000000000000000000000000000000000000;;		// No matching template for states
0000000000000000000000000000000000000000;;		// e.g. Inbound SAs are correct but SP rule is wrong
0000000000000000000000000000000000000000;;		XfrmInTmplMismatch int
0000000000000000000000000000000000000000;;		// No policy is found for states
0000000000000000000000000000000000000000;;		// e.g. Inbound SAs are correct but no SP is found
0000000000000000000000000000000000000000;;		XfrmInNoPols int
0000000000000000000000000000000000000000;;		// Policy discards
0000000000000000000000000000000000000000;;		XfrmInPolBlock int
0000000000000000000000000000000000000000;;		// Policy error
0000000000000000000000000000000000000000;;		XfrmInPolError int
0000000000000000000000000000000000000000;;		// All errors which are not matched by others
0000000000000000000000000000000000000000;;		XfrmOutError int
0000000000000000000000000000000000000000;;		// Bundle generation error
0000000000000000000000000000000000000000;;		XfrmOutBundleGenError int
0000000000000000000000000000000000000000;;		// Bundle check error
0000000000000000000000000000000000000000;;		XfrmOutBundleCheckError int
0000000000000000000000000000000000000000;;		// No state was found
0000000000000000000000000000000000000000;;		XfrmOutNoStates int
0000000000000000000000000000000000000000;;		// Transformation protocol specific error
0000000000000000000000000000000000000000;;		XfrmOutStateProtoError int
0000000000000000000000000000000000000000;;		// Transportation mode specific error
0000000000000000000000000000000000000000;;		XfrmOutStateModeError int
0000000000000000000000000000000000000000;;		// Sequence error
0000000000000000000000000000000000000000;;		// i.e sequence number overflow
0000000000000000000000000000000000000000;;		XfrmOutStateSeqError int
0000000000000000000000000000000000000000;;		// State is expired
0000000000000000000000000000000000000000;;		XfrmOutStateExpired int
0000000000000000000000000000000000000000;;		// Policy discads
0000000000000000000000000000000000000000;;		XfrmOutPolBlock int
0000000000000000000000000000000000000000;;		// Policy is dead
0000000000000000000000000000000000000000;;		XfrmOutPolDead int
0000000000000000000000000000000000000000;;		// Policy Error
0000000000000000000000000000000000000000;;		XfrmOutPolError     int
0000000000000000000000000000000000000000;;		XfrmFwdHdrError     int
0000000000000000000000000000000000000000;;		XfrmOutStateInvalid int
0000000000000000000000000000000000000000;;		XfrmAcquireError    int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewXfrmStat reads the xfrm_stat statistics.
0000000000000000000000000000000000000000;;	func NewXfrmStat() (XfrmStat, error) {
0000000000000000000000000000000000000000;;		fs, err := NewFS(DefaultMountPoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return XfrmStat{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fs.NewXfrmStat()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewXfrmStat reads the xfrm_stat statistics from the 'proc' filesystem.
0000000000000000000000000000000000000000;;	func (fs FS) NewXfrmStat() (XfrmStat, error) {
0000000000000000000000000000000000000000;;		file, err := os.Open(fs.Path("net/xfrm_stat"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return XfrmStat{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			x = XfrmStat{}
0000000000000000000000000000000000000000;;			s = bufio.NewScanner(file)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for s.Scan() {
0000000000000000000000000000000000000000;;			fields := strings.Fields(s.Text())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(fields) != 2 {
0000000000000000000000000000000000000000;;				return XfrmStat{}, fmt.Errorf(
0000000000000000000000000000000000000000;;					"couldnt parse %s line %s", file.Name(), s.Text())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			name := fields[0]
0000000000000000000000000000000000000000;;			value, err := strconv.Atoi(fields[1])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return XfrmStat{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch name {
0000000000000000000000000000000000000000;;			case "XfrmInError":
0000000000000000000000000000000000000000;;				x.XfrmInError = value
0000000000000000000000000000000000000000;;			case "XfrmInBufferError":
0000000000000000000000000000000000000000;;				x.XfrmInBufferError = value
0000000000000000000000000000000000000000;;			case "XfrmInHdrError":
0000000000000000000000000000000000000000;;				x.XfrmInHdrError = value
0000000000000000000000000000000000000000;;			case "XfrmInNoStates":
0000000000000000000000000000000000000000;;				x.XfrmInNoStates = value
0000000000000000000000000000000000000000;;			case "XfrmInStateProtoError":
0000000000000000000000000000000000000000;;				x.XfrmInStateProtoError = value
0000000000000000000000000000000000000000;;			case "XfrmInStateModeError":
0000000000000000000000000000000000000000;;				x.XfrmInStateModeError = value
0000000000000000000000000000000000000000;;			case "XfrmInStateSeqError":
0000000000000000000000000000000000000000;;				x.XfrmInStateSeqError = value
0000000000000000000000000000000000000000;;			case "XfrmInStateExpired":
0000000000000000000000000000000000000000;;				x.XfrmInStateExpired = value
0000000000000000000000000000000000000000;;			case "XfrmInStateInvalid":
0000000000000000000000000000000000000000;;				x.XfrmInStateInvalid = value
0000000000000000000000000000000000000000;;			case "XfrmInTmplMismatch":
0000000000000000000000000000000000000000;;				x.XfrmInTmplMismatch = value
0000000000000000000000000000000000000000;;			case "XfrmInNoPols":
0000000000000000000000000000000000000000;;				x.XfrmInNoPols = value
0000000000000000000000000000000000000000;;			case "XfrmInPolBlock":
0000000000000000000000000000000000000000;;				x.XfrmInPolBlock = value
0000000000000000000000000000000000000000;;			case "XfrmInPolError":
0000000000000000000000000000000000000000;;				x.XfrmInPolError = value
0000000000000000000000000000000000000000;;			case "XfrmOutError":
0000000000000000000000000000000000000000;;				x.XfrmOutError = value
0000000000000000000000000000000000000000;;			case "XfrmInStateMismatch":
0000000000000000000000000000000000000000;;				x.XfrmInStateMismatch = value
0000000000000000000000000000000000000000;;			case "XfrmOutBundleGenError":
0000000000000000000000000000000000000000;;				x.XfrmOutBundleGenError = value
0000000000000000000000000000000000000000;;			case "XfrmOutBundleCheckError":
0000000000000000000000000000000000000000;;				x.XfrmOutBundleCheckError = value
0000000000000000000000000000000000000000;;			case "XfrmOutNoStates":
0000000000000000000000000000000000000000;;				x.XfrmOutNoStates = value
0000000000000000000000000000000000000000;;			case "XfrmOutStateProtoError":
0000000000000000000000000000000000000000;;				x.XfrmOutStateProtoError = value
0000000000000000000000000000000000000000;;			case "XfrmOutStateModeError":
0000000000000000000000000000000000000000;;				x.XfrmOutStateModeError = value
0000000000000000000000000000000000000000;;			case "XfrmOutStateSeqError":
0000000000000000000000000000000000000000;;				x.XfrmOutStateSeqError = value
0000000000000000000000000000000000000000;;			case "XfrmOutStateExpired":
0000000000000000000000000000000000000000;;				x.XfrmOutStateExpired = value
0000000000000000000000000000000000000000;;			case "XfrmOutPolBlock":
0000000000000000000000000000000000000000;;				x.XfrmOutPolBlock = value
0000000000000000000000000000000000000000;;			case "XfrmOutPolDead":
0000000000000000000000000000000000000000;;				x.XfrmOutPolDead = value
0000000000000000000000000000000000000000;;			case "XfrmOutPolError":
0000000000000000000000000000000000000000;;				x.XfrmOutPolError = value
0000000000000000000000000000000000000000;;			case "XfrmFwdHdrError":
0000000000000000000000000000000000000000;;				x.XfrmFwdHdrError = value
0000000000000000000000000000000000000000;;			case "XfrmOutStateInvalid":
0000000000000000000000000000000000000000;;				x.XfrmOutStateInvalid = value
0000000000000000000000000000000000000000;;			case "XfrmAcquireError":
0000000000000000000000000000000000000000;;				x.XfrmAcquireError = value
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return x, s.Err()
0000000000000000000000000000000000000000;;	}
