0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package swag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// GOPATHKey represents the env key for gopath
0000000000000000000000000000000000000000;;		GOPATHKey = "GOPATH"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindInSearchPath finds a package in a provided lists of paths
0000000000000000000000000000000000000000;;	func FindInSearchPath(searchPath, pkg string) string {
0000000000000000000000000000000000000000;;		pathsList := filepath.SplitList(searchPath)
0000000000000000000000000000000000000000;;		for _, path := range pathsList {
0000000000000000000000000000000000000000;;			if evaluatedPath, err := filepath.EvalSymlinks(filepath.Join(path, "src", pkg)); err == nil {
0000000000000000000000000000000000000000;;				if _, err := os.Stat(evaluatedPath); err == nil {
0000000000000000000000000000000000000000;;					return evaluatedPath
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindInGoSearchPath finds a package in the $GOPATH:$GOROOT
0000000000000000000000000000000000000000;;	func FindInGoSearchPath(pkg string) string {
0000000000000000000000000000000000000000;;		return FindInSearchPath(FullGoSearchPath(), pkg)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FullGoSearchPath gets the search paths for finding packages
0000000000000000000000000000000000000000;;	func FullGoSearchPath() string {
0000000000000000000000000000000000000000;;		allPaths := os.Getenv(GOPATHKey)
0000000000000000000000000000000000000000;;		if allPaths != "" {
0000000000000000000000000000000000000000;;			allPaths = strings.Join([]string{allPaths, runtime.GOROOT()}, ":")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			allPaths = runtime.GOROOT()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return allPaths
0000000000000000000000000000000000000000;;	}
