0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package swag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// same as ECMA Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxJSONFloat = float64(1<<53 - 1)  // 9007199254740991.0 	 	 2^53 - 1
0000000000000000000000000000000000000000;;		minJSONFloat = -float64(1<<53 - 1) //-9007199254740991.0	-2^53 - 1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsFloat64AJSONInteger allow for integers [-2^53, 2^53-1] inclusive
0000000000000000000000000000000000000000;;	func IsFloat64AJSONInteger(f float64) bool {
0000000000000000000000000000000000000000;;		if math.IsNaN(f) || math.IsInf(f, 0) || f < minJSONFloat || f > maxJSONFloat {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f == float64(int64(f)) || f == float64(uint64(f))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var evaluatesAsTrue = map[string]struct{}{
0000000000000000000000000000000000000000;;		"true":     struct{}{},
0000000000000000000000000000000000000000;;		"1":        struct{}{},
0000000000000000000000000000000000000000;;		"yes":      struct{}{},
0000000000000000000000000000000000000000;;		"ok":       struct{}{},
0000000000000000000000000000000000000000;;		"y":        struct{}{},
0000000000000000000000000000000000000000;;		"on":       struct{}{},
0000000000000000000000000000000000000000;;		"selected": struct{}{},
0000000000000000000000000000000000000000;;		"checked":  struct{}{},
0000000000000000000000000000000000000000;;		"t":        struct{}{},
0000000000000000000000000000000000000000;;		"enabled":  struct{}{},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertBool turn a string into a boolean
0000000000000000000000000000000000000000;;	func ConvertBool(str string) (bool, error) {
0000000000000000000000000000000000000000;;		_, ok := evaluatesAsTrue[strings.ToLower(str)]
0000000000000000000000000000000000000000;;		return ok, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertFloat32 turn a string into a float32
0000000000000000000000000000000000000000;;	func ConvertFloat32(str string) (float32, error) {
0000000000000000000000000000000000000000;;		f, err := strconv.ParseFloat(str, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return float32(f), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertFloat64 turn a string into a float64
0000000000000000000000000000000000000000;;	func ConvertFloat64(str string) (float64, error) {
0000000000000000000000000000000000000000;;		return strconv.ParseFloat(str, 64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertInt8 turn a string into int8 boolean
0000000000000000000000000000000000000000;;	func ConvertInt8(str string) (int8, error) {
0000000000000000000000000000000000000000;;		i, err := strconv.ParseInt(str, 10, 8)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int8(i), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertInt16 turn a string into a int16
0000000000000000000000000000000000000000;;	func ConvertInt16(str string) (int16, error) {
0000000000000000000000000000000000000000;;		i, err := strconv.ParseInt(str, 10, 16)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int16(i), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertInt32 turn a string into a int32
0000000000000000000000000000000000000000;;	func ConvertInt32(str string) (int32, error) {
0000000000000000000000000000000000000000;;		i, err := strconv.ParseInt(str, 10, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int32(i), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertInt64 turn a string into a int64
0000000000000000000000000000000000000000;;	func ConvertInt64(str string) (int64, error) {
0000000000000000000000000000000000000000;;		return strconv.ParseInt(str, 10, 64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertUint8 turn a string into a uint8
0000000000000000000000000000000000000000;;	func ConvertUint8(str string) (uint8, error) {
0000000000000000000000000000000000000000;;		i, err := strconv.ParseUint(str, 10, 8)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint8(i), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertUint16 turn a string into a uint16
0000000000000000000000000000000000000000;;	func ConvertUint16(str string) (uint16, error) {
0000000000000000000000000000000000000000;;		i, err := strconv.ParseUint(str, 10, 16)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint16(i), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertUint32 turn a string into a uint32
0000000000000000000000000000000000000000;;	func ConvertUint32(str string) (uint32, error) {
0000000000000000000000000000000000000000;;		i, err := strconv.ParseUint(str, 10, 32)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uint32(i), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertUint64 turn a string into a uint64
0000000000000000000000000000000000000000;;	func ConvertUint64(str string) (uint64, error) {
0000000000000000000000000000000000000000;;		return strconv.ParseUint(str, 10, 64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatBool turns a boolean into a string
0000000000000000000000000000000000000000;;	func FormatBool(value bool) string {
0000000000000000000000000000000000000000;;		return strconv.FormatBool(value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatFloat32 turns a float32 into a string
0000000000000000000000000000000000000000;;	func FormatFloat32(value float32) string {
0000000000000000000000000000000000000000;;		return strconv.FormatFloat(float64(value), 'f', -1, 32)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatFloat64 turns a float64 into a string
0000000000000000000000000000000000000000;;	func FormatFloat64(value float64) string {
0000000000000000000000000000000000000000;;		return strconv.FormatFloat(value, 'f', -1, 64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatInt8 turns an int8 into a string
0000000000000000000000000000000000000000;;	func FormatInt8(value int8) string {
0000000000000000000000000000000000000000;;		return strconv.FormatInt(int64(value), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatInt16 turns an int16 into a string
0000000000000000000000000000000000000000;;	func FormatInt16(value int16) string {
0000000000000000000000000000000000000000;;		return strconv.FormatInt(int64(value), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatInt32 turns an int32 into a string
0000000000000000000000000000000000000000;;	func FormatInt32(value int32) string {
0000000000000000000000000000000000000000;;		return strconv.FormatInt(int64(value), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatInt64 turns an int64 into a string
0000000000000000000000000000000000000000;;	func FormatInt64(value int64) string {
0000000000000000000000000000000000000000;;		return strconv.FormatInt(value, 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatUint8 turns an uint8 into a string
0000000000000000000000000000000000000000;;	func FormatUint8(value uint8) string {
0000000000000000000000000000000000000000;;		return strconv.FormatUint(uint64(value), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatUint16 turns an uint16 into a string
0000000000000000000000000000000000000000;;	func FormatUint16(value uint16) string {
0000000000000000000000000000000000000000;;		return strconv.FormatUint(uint64(value), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatUint32 turns an uint32 into a string
0000000000000000000000000000000000000000;;	func FormatUint32(value uint32) string {
0000000000000000000000000000000000000000;;		return strconv.FormatUint(uint64(value), 10)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormatUint64 turns an uint64 into a string
0000000000000000000000000000000000000000;;	func FormatUint64(value uint64) string {
0000000000000000000000000000000000000000;;		return strconv.FormatUint(value, 10)
0000000000000000000000000000000000000000;;	}
