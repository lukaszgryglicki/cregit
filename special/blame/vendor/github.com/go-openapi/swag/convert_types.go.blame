0000000000000000000000000000000000000000;;	package swag
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was taken from the aws go sdk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns a pointer to of the string value passed in.
0000000000000000000000000000000000000000;;	func String(v string) *string {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringValue returns the value of the string pointer passed in or
0000000000000000000000000000000000000000;;	// "" if the pointer is nil.
0000000000000000000000000000000000000000;;	func StringValue(v *string) string {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringSlice converts a slice of string values into a slice of
0000000000000000000000000000000000000000;;	// string pointers
0000000000000000000000000000000000000000;;	func StringSlice(src []string) []*string {
0000000000000000000000000000000000000000;;		dst := make([]*string, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringValueSlice converts a slice of string pointers into a slice of
0000000000000000000000000000000000000000;;	// string values
0000000000000000000000000000000000000000;;	func StringValueSlice(src []*string) []string {
0000000000000000000000000000000000000000;;		dst := make([]string, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringMap converts a string map of string values into a string
0000000000000000000000000000000000000000;;	// map of string pointers
0000000000000000000000000000000000000000;;	func StringMap(src map[string]string) map[string]*string {
0000000000000000000000000000000000000000;;		dst := make(map[string]*string)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringValueMap converts a string map of string pointers into a string
0000000000000000000000000000000000000000;;	// map of string values
0000000000000000000000000000000000000000;;	func StringValueMap(src map[string]*string) map[string]string {
0000000000000000000000000000000000000000;;		dst := make(map[string]string)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bool returns a pointer to of the bool value passed in.
0000000000000000000000000000000000000000;;	func Bool(v bool) *bool {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolValue returns the value of the bool pointer passed in or
0000000000000000000000000000000000000000;;	// false if the pointer is nil.
0000000000000000000000000000000000000000;;	func BoolValue(v *bool) bool {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolSlice converts a slice of bool values into a slice of
0000000000000000000000000000000000000000;;	// bool pointers
0000000000000000000000000000000000000000;;	func BoolSlice(src []bool) []*bool {
0000000000000000000000000000000000000000;;		dst := make([]*bool, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolValueSlice converts a slice of bool pointers into a slice of
0000000000000000000000000000000000000000;;	// bool values
0000000000000000000000000000000000000000;;	func BoolValueSlice(src []*bool) []bool {
0000000000000000000000000000000000000000;;		dst := make([]bool, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolMap converts a string map of bool values into a string
0000000000000000000000000000000000000000;;	// map of bool pointers
0000000000000000000000000000000000000000;;	func BoolMap(src map[string]bool) map[string]*bool {
0000000000000000000000000000000000000000;;		dst := make(map[string]*bool)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolValueMap converts a string map of bool pointers into a string
0000000000000000000000000000000000000000;;	// map of bool values
0000000000000000000000000000000000000000;;	func BoolValueMap(src map[string]*bool) map[string]bool {
0000000000000000000000000000000000000000;;		dst := make(map[string]bool)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int returns a pointer to of the int value passed in.
0000000000000000000000000000000000000000;;	func Int(v int) *int {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntValue returns the value of the int pointer passed in or
0000000000000000000000000000000000000000;;	// 0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func IntValue(v *int) int {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntSlice converts a slice of int values into a slice of
0000000000000000000000000000000000000000;;	// int pointers
0000000000000000000000000000000000000000;;	func IntSlice(src []int) []*int {
0000000000000000000000000000000000000000;;		dst := make([]*int, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntValueSlice converts a slice of int pointers into a slice of
0000000000000000000000000000000000000000;;	// int values
0000000000000000000000000000000000000000;;	func IntValueSlice(src []*int) []int {
0000000000000000000000000000000000000000;;		dst := make([]int, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntMap converts a string map of int values into a string
0000000000000000000000000000000000000000;;	// map of int pointers
0000000000000000000000000000000000000000;;	func IntMap(src map[string]int) map[string]*int {
0000000000000000000000000000000000000000;;		dst := make(map[string]*int)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntValueMap converts a string map of int pointers into a string
0000000000000000000000000000000000000000;;	// map of int values
0000000000000000000000000000000000000000;;	func IntValueMap(src map[string]*int) map[string]int {
0000000000000000000000000000000000000000;;		dst := make(map[string]int)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32 returns a pointer to of the int64 value passed in.
0000000000000000000000000000000000000000;;	func Int32(v int32) *int32 {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32Value returns the value of the int64 pointer passed in or
0000000000000000000000000000000000000000;;	// 0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func Int32Value(v *int32) int32 {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32Slice converts a slice of int64 values into a slice of
0000000000000000000000000000000000000000;;	// int32 pointers
0000000000000000000000000000000000000000;;	func Int32Slice(src []int32) []*int32 {
0000000000000000000000000000000000000000;;		dst := make([]*int32, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32ValueSlice converts a slice of int32 pointers into a slice of
0000000000000000000000000000000000000000;;	// int32 values
0000000000000000000000000000000000000000;;	func Int32ValueSlice(src []*int32) []int32 {
0000000000000000000000000000000000000000;;		dst := make([]int32, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32Map converts a string map of int32 values into a string
0000000000000000000000000000000000000000;;	// map of int32 pointers
0000000000000000000000000000000000000000;;	func Int32Map(src map[string]int32) map[string]*int32 {
0000000000000000000000000000000000000000;;		dst := make(map[string]*int32)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32ValueMap converts a string map of int32 pointers into a string
0000000000000000000000000000000000000000;;	// map of int32 values
0000000000000000000000000000000000000000;;	func Int32ValueMap(src map[string]*int32) map[string]int32 {
0000000000000000000000000000000000000000;;		dst := make(map[string]int32)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64 returns a pointer to of the int64 value passed in.
0000000000000000000000000000000000000000;;	func Int64(v int64) *int64 {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64Value returns the value of the int64 pointer passed in or
0000000000000000000000000000000000000000;;	// 0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func Int64Value(v *int64) int64 {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64Slice converts a slice of int64 values into a slice of
0000000000000000000000000000000000000000;;	// int64 pointers
0000000000000000000000000000000000000000;;	func Int64Slice(src []int64) []*int64 {
0000000000000000000000000000000000000000;;		dst := make([]*int64, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64ValueSlice converts a slice of int64 pointers into a slice of
0000000000000000000000000000000000000000;;	// int64 values
0000000000000000000000000000000000000000;;	func Int64ValueSlice(src []*int64) []int64 {
0000000000000000000000000000000000000000;;		dst := make([]int64, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64Map converts a string map of int64 values into a string
0000000000000000000000000000000000000000;;	// map of int64 pointers
0000000000000000000000000000000000000000;;	func Int64Map(src map[string]int64) map[string]*int64 {
0000000000000000000000000000000000000000;;		dst := make(map[string]*int64)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64ValueMap converts a string map of int64 pointers into a string
0000000000000000000000000000000000000000;;	// map of int64 values
0000000000000000000000000000000000000000;;	func Int64ValueMap(src map[string]*int64) map[string]int64 {
0000000000000000000000000000000000000000;;		dst := make(map[string]int64)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint returns a pouinter to of the uint value passed in.
0000000000000000000000000000000000000000;;	func Uint(v uint) *uint {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintValue returns the value of the uint pouinter passed in or
0000000000000000000000000000000000000000;;	// 0 if the pouinter is nil.
0000000000000000000000000000000000000000;;	func UintValue(v *uint) uint {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintSlice converts a slice of uint values uinto a slice of
0000000000000000000000000000000000000000;;	// uint pouinters
0000000000000000000000000000000000000000;;	func UintSlice(src []uint) []*uint {
0000000000000000000000000000000000000000;;		dst := make([]*uint, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintValueSlice converts a slice of uint pouinters uinto a slice of
0000000000000000000000000000000000000000;;	// uint values
0000000000000000000000000000000000000000;;	func UintValueSlice(src []*uint) []uint {
0000000000000000000000000000000000000000;;		dst := make([]uint, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintMap converts a string map of uint values uinto a string
0000000000000000000000000000000000000000;;	// map of uint pouinters
0000000000000000000000000000000000000000;;	func UintMap(src map[string]uint) map[string]*uint {
0000000000000000000000000000000000000000;;		dst := make(map[string]*uint)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UintValueMap converts a string map of uint pouinters uinto a string
0000000000000000000000000000000000000000;;	// map of uint values
0000000000000000000000000000000000000000;;	func UintValueMap(src map[string]*uint) map[string]uint {
0000000000000000000000000000000000000000;;		dst := make(map[string]uint)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32 returns a pouinter to of the uint64 value passed in.
0000000000000000000000000000000000000000;;	func Uint32(v uint32) *uint32 {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32Value returns the value of the uint64 pouinter passed in or
0000000000000000000000000000000000000000;;	// 0 if the pouinter is nil.
0000000000000000000000000000000000000000;;	func Uint32Value(v *uint32) uint32 {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32Slice converts a slice of uint64 values uinto a slice of
0000000000000000000000000000000000000000;;	// uint32 pouinters
0000000000000000000000000000000000000000;;	func Uint32Slice(src []uint32) []*uint32 {
0000000000000000000000000000000000000000;;		dst := make([]*uint32, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32ValueSlice converts a slice of uint32 pouinters uinto a slice of
0000000000000000000000000000000000000000;;	// uint32 values
0000000000000000000000000000000000000000;;	func Uint32ValueSlice(src []*uint32) []uint32 {
0000000000000000000000000000000000000000;;		dst := make([]uint32, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32Map converts a string map of uint32 values uinto a string
0000000000000000000000000000000000000000;;	// map of uint32 pouinters
0000000000000000000000000000000000000000;;	func Uint32Map(src map[string]uint32) map[string]*uint32 {
0000000000000000000000000000000000000000;;		dst := make(map[string]*uint32)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32ValueMap converts a string map of uint32 pouinters uinto a string
0000000000000000000000000000000000000000;;	// map of uint32 values
0000000000000000000000000000000000000000;;	func Uint32ValueMap(src map[string]*uint32) map[string]uint32 {
0000000000000000000000000000000000000000;;		dst := make(map[string]uint32)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64 returns a pouinter to of the uint64 value passed in.
0000000000000000000000000000000000000000;;	func Uint64(v uint64) *uint64 {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64Value returns the value of the uint64 pouinter passed in or
0000000000000000000000000000000000000000;;	// 0 if the pouinter is nil.
0000000000000000000000000000000000000000;;	func Uint64Value(v *uint64) uint64 {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64Slice converts a slice of uint64 values uinto a slice of
0000000000000000000000000000000000000000;;	// uint64 pouinters
0000000000000000000000000000000000000000;;	func Uint64Slice(src []uint64) []*uint64 {
0000000000000000000000000000000000000000;;		dst := make([]*uint64, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64ValueSlice converts a slice of uint64 pouinters uinto a slice of
0000000000000000000000000000000000000000;;	// uint64 values
0000000000000000000000000000000000000000;;	func Uint64ValueSlice(src []*uint64) []uint64 {
0000000000000000000000000000000000000000;;		dst := make([]uint64, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64Map converts a string map of uint64 values uinto a string
0000000000000000000000000000000000000000;;	// map of uint64 pouinters
0000000000000000000000000000000000000000;;	func Uint64Map(src map[string]uint64) map[string]*uint64 {
0000000000000000000000000000000000000000;;		dst := make(map[string]*uint64)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64ValueMap converts a string map of uint64 pouinters uinto a string
0000000000000000000000000000000000000000;;	// map of uint64 values
0000000000000000000000000000000000000000;;	func Uint64ValueMap(src map[string]*uint64) map[string]uint64 {
0000000000000000000000000000000000000000;;		dst := make(map[string]uint64)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64 returns a pointer to of the float64 value passed in.
0000000000000000000000000000000000000000;;	func Float64(v float64) *float64 {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64Value returns the value of the float64 pointer passed in or
0000000000000000000000000000000000000000;;	// 0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func Float64Value(v *float64) float64 {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64Slice converts a slice of float64 values into a slice of
0000000000000000000000000000000000000000;;	// float64 pointers
0000000000000000000000000000000000000000;;	func Float64Slice(src []float64) []*float64 {
0000000000000000000000000000000000000000;;		dst := make([]*float64, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64ValueSlice converts a slice of float64 pointers into a slice of
0000000000000000000000000000000000000000;;	// float64 values
0000000000000000000000000000000000000000;;	func Float64ValueSlice(src []*float64) []float64 {
0000000000000000000000000000000000000000;;		dst := make([]float64, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64Map converts a string map of float64 values into a string
0000000000000000000000000000000000000000;;	// map of float64 pointers
0000000000000000000000000000000000000000;;	func Float64Map(src map[string]float64) map[string]*float64 {
0000000000000000000000000000000000000000;;		dst := make(map[string]*float64)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64ValueMap converts a string map of float64 pointers into a string
0000000000000000000000000000000000000000;;	// map of float64 values
0000000000000000000000000000000000000000;;	func Float64ValueMap(src map[string]*float64) map[string]float64 {
0000000000000000000000000000000000000000;;		dst := make(map[string]float64)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Time returns a pointer to of the time.Time value passed in.
0000000000000000000000000000000000000000;;	func Time(v time.Time) *time.Time {
0000000000000000000000000000000000000000;;		return &v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeValue returns the value of the time.Time pointer passed in or
0000000000000000000000000000000000000000;;	// time.Time{} if the pointer is nil.
0000000000000000000000000000000000000000;;	func TimeValue(v *time.Time) time.Time {
0000000000000000000000000000000000000000;;		if v != nil {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return time.Time{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeSlice converts a slice of time.Time values into a slice of
0000000000000000000000000000000000000000;;	// time.Time pointers
0000000000000000000000000000000000000000;;	func TimeSlice(src []time.Time) []*time.Time {
0000000000000000000000000000000000000000;;		dst := make([]*time.Time, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			dst[i] = &(src[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeValueSlice converts a slice of time.Time pointers into a slice of
0000000000000000000000000000000000000000;;	// time.Time values
0000000000000000000000000000000000000000;;	func TimeValueSlice(src []*time.Time) []time.Time {
0000000000000000000000000000000000000000;;		dst := make([]time.Time, len(src))
0000000000000000000000000000000000000000;;		for i := 0; i < len(src); i++ {
0000000000000000000000000000000000000000;;			if src[i] != nil {
0000000000000000000000000000000000000000;;				dst[i] = *(src[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeMap converts a string map of time.Time values into a string
0000000000000000000000000000000000000000;;	// map of time.Time pointers
0000000000000000000000000000000000000000;;	func TimeMap(src map[string]time.Time) map[string]*time.Time {
0000000000000000000000000000000000000000;;		dst := make(map[string]*time.Time)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			v := val
0000000000000000000000000000000000000000;;			dst[k] = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeValueMap converts a string map of time.Time pointers into a string
0000000000000000000000000000000000000000;;	// map of time.Time values
0000000000000000000000000000000000000000;;	func TimeValueMap(src map[string]*time.Time) map[string]time.Time {
0000000000000000000000000000000000000000;;		dst := make(map[string]time.Time)
0000000000000000000000000000000000000000;;		for k, val := range src {
0000000000000000000000000000000000000000;;			if val != nil {
0000000000000000000000000000000000000000;;				dst[k] = *val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dst
0000000000000000000000000000000000000000;;	}
