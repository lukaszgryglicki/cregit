0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package validate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "github.com/go-openapi/errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Result represents a validation result
0000000000000000000000000000000000000000;;	type Result struct {
0000000000000000000000000000000000000000;;		Errors     []error
0000000000000000000000000000000000000000;;		MatchCount int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Merge merges this result with the other one, preserving match counts etc
0000000000000000000000000000000000000000;;	func (r *Result) Merge(other *Result) *Result {
0000000000000000000000000000000000000000;;		if other == nil {
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.AddErrors(other.Errors...)
0000000000000000000000000000000000000000;;		r.MatchCount += other.MatchCount
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddErrors adds errors to this validation result
0000000000000000000000000000000000000000;;	func (r *Result) AddErrors(errors ...error) {
0000000000000000000000000000000000000000;;		r.Errors = append(r.Errors, errors...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsValid returns true when this result is valid
0000000000000000000000000000000000000000;;	func (r *Result) IsValid() bool {
0000000000000000000000000000000000000000;;		return len(r.Errors) == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HasErrors returns true when this result is invalid
0000000000000000000000000000000000000000;;	func (r *Result) HasErrors() bool {
0000000000000000000000000000000000000000;;		return !r.IsValid()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Inc increments the match count
0000000000000000000000000000000000000000;;	func (r *Result) Inc() {
0000000000000000000000000000000000000000;;		r.MatchCount++
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsError renders this result as an error interface
0000000000000000000000000000000000000000;;	func (r *Result) AsError() error {
0000000000000000000000000000000000000000;;		if r.IsValid() {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors.CompositeValidationError(r.Errors...)
0000000000000000000000000000000000000000;;	}
