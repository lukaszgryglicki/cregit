0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package strfmt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"database/sql/driver"
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/asaskevich/govalidator"
0000000000000000000000000000000000000000;;		"github.com/mailru/easyjson/jlexer"
0000000000000000000000000000000000000000;;		"github.com/mailru/easyjson/jwriter"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HostnamePattern http://json-schema.org/latest/json-schema-validation.html#anchor114
0000000000000000000000000000000000000000;;		//  A string instance is valid against this attribute if it is a valid
0000000000000000000000000000000000000000;;		//  representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034].
0000000000000000000000000000000000000000;;		//  http://tools.ietf.org/html/rfc1034#section-3.5
0000000000000000000000000000000000000000;;		//  <digit> ::= any one of the ten digits 0 through 9
0000000000000000000000000000000000000000;;		//  var digit = /[0-9]/;
0000000000000000000000000000000000000000;;		//  <letter> ::= any one of the 52 alphabetic characters A through Z in upper case and a through z in lower case
0000000000000000000000000000000000000000;;		//  var letter = /[a-zA-Z]/;
0000000000000000000000000000000000000000;;		//  <let-dig> ::= <letter> | <digit>
0000000000000000000000000000000000000000;;		//  var letDig = /[0-9a-zA-Z]/;
0000000000000000000000000000000000000000;;		//  <let-dig-hyp> ::= <let-dig> | "-"
0000000000000000000000000000000000000000;;		//  var letDigHyp = /[-0-9a-zA-Z]/;
0000000000000000000000000000000000000000;;		//  <ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str>
0000000000000000000000000000000000000000;;		//  var ldhStr = /[-0-9a-zA-Z]+/;
0000000000000000000000000000000000000000;;		//  <label> ::= <letter> [ [ <ldh-str> ] <let-dig> ]
0000000000000000000000000000000000000000;;		//  var label = /[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?/;
0000000000000000000000000000000000000000;;		//  <subdomain> ::= <label> | <subdomain> "." <label>
0000000000000000000000000000000000000000;;		//  var subdomain = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/;
0000000000000000000000000000000000000000;;		//  <domain> ::= <subdomain> | " "
0000000000000000000000000000000000000000;;		HostnamePattern = `^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$`
0000000000000000000000000000000000000000;;		// UUIDPattern Regex for UUID that allows uppercase
0000000000000000000000000000000000000000;;		UUIDPattern = `(?i)^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`
0000000000000000000000000000000000000000;;		// UUID3Pattern Regex for UUID3 that allows uppercase
0000000000000000000000000000000000000000;;		UUID3Pattern = `(?i)^[0-9a-f]{8}-[0-9a-f]{4}-3[0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$`
0000000000000000000000000000000000000000;;		// UUID4Pattern Regex for UUID4 that allows uppercase
0000000000000000000000000000000000000000;;		UUID4Pattern = `(?i)^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$`
0000000000000000000000000000000000000000;;		// UUID5Pattern Regex for UUID5 that allows uppercase
0000000000000000000000000000000000000000;;		UUID5Pattern = `(?i)^[0-9a-f]{8}-[0-9a-f]{4}-5[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		rxHostname = regexp.MustCompile(HostnamePattern)
0000000000000000000000000000000000000000;;		rxUUID     = regexp.MustCompile(UUIDPattern)
0000000000000000000000000000000000000000;;		rxUUID3    = regexp.MustCompile(UUID3Pattern)
0000000000000000000000000000000000000000;;		rxUUID4    = regexp.MustCompile(UUID4Pattern)
0000000000000000000000000000000000000000;;		rxUUID5    = regexp.MustCompile(UUID5Pattern)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsStrictURI returns true when the string is an absolute URI
0000000000000000000000000000000000000000;;	func IsStrictURI(str string) bool {
0000000000000000000000000000000000000000;;		_, err := url.ParseRequestURI(str)
0000000000000000000000000000000000000000;;		return err == nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsHostname returns true when the string is a valid hostname
0000000000000000000000000000000000000000;;	func IsHostname(str string) bool {
0000000000000000000000000000000000000000;;		if !rxHostname.MatchString(str) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the sum of all label octets and label lengths is limited to 255.
0000000000000000000000000000000000000000;;		if len(str) > 255 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Each node has a label, which is zero to 63 octets in length
0000000000000000000000000000000000000000;;		parts := strings.Split(str, ".")
0000000000000000000000000000000000000000;;		valid := true
0000000000000000000000000000000000000000;;		for _, p := range parts {
0000000000000000000000000000000000000000;;			if len(p) > 63 {
0000000000000000000000000000000000000000;;				valid = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return valid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUUID returns true is the string matches a UUID, upper case is allowed
0000000000000000000000000000000000000000;;	func IsUUID(str string) bool {
0000000000000000000000000000000000000000;;		return rxUUID.MatchString(str)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUUID3 returns true is the string matches a UUID, upper case is allowed
0000000000000000000000000000000000000000;;	func IsUUID3(str string) bool {
0000000000000000000000000000000000000000;;		return rxUUID3.MatchString(str)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUUID4 returns true is the string matches a UUID, upper case is allowed
0000000000000000000000000000000000000000;;	func IsUUID4(str string) bool {
0000000000000000000000000000000000000000;;		return rxUUID4.MatchString(str)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUUID5 returns true is the string matches a UUID, upper case is allowed
0000000000000000000000000000000000000000;;	func IsUUID5(str string) bool {
0000000000000000000000000000000000000000;;		return rxUUID5.MatchString(str)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		u := URI("")
0000000000000000000000000000000000000000;;		Default.Add("uri", &u, IsStrictURI)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		eml := Email("")
0000000000000000000000000000000000000000;;		Default.Add("email", &eml, govalidator.IsEmail)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hn := Hostname("")
0000000000000000000000000000000000000000;;		Default.Add("hostname", &hn, IsHostname)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ip4 := IPv4("")
0000000000000000000000000000000000000000;;		Default.Add("ipv4", &ip4, govalidator.IsIPv4)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ip6 := IPv6("")
0000000000000000000000000000000000000000;;		Default.Add("ipv6", &ip6, govalidator.IsIPv6)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mac := MAC("")
0000000000000000000000000000000000000000;;		Default.Add("mac", &mac, govalidator.IsMAC)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uid := UUID("")
0000000000000000000000000000000000000000;;		Default.Add("uuid", &uid, IsUUID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uid3 := UUID3("")
0000000000000000000000000000000000000000;;		Default.Add("uuid3", &uid3, IsUUID3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uid4 := UUID4("")
0000000000000000000000000000000000000000;;		Default.Add("uuid4", &uid4, IsUUID4)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uid5 := UUID5("")
0000000000000000000000000000000000000000;;		Default.Add("uuid5", &uid5, IsUUID5)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		isbn := ISBN("")
0000000000000000000000000000000000000000;;		Default.Add("isbn", &isbn, func(str string) bool { return govalidator.IsISBN10(str) || govalidator.IsISBN13(str) })
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		isbn10 := ISBN10("")
0000000000000000000000000000000000000000;;		Default.Add("isbn10", &isbn10, govalidator.IsISBN10)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		isbn13 := ISBN13("")
0000000000000000000000000000000000000000;;		Default.Add("isbn13", &isbn13, govalidator.IsISBN13)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cc := CreditCard("")
0000000000000000000000000000000000000000;;		Default.Add("creditcard", &cc, govalidator.IsCreditCard)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ssn := SSN("")
0000000000000000000000000000000000000000;;		Default.Add("ssn", &ssn, govalidator.IsSSN)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hc := HexColor("")
0000000000000000000000000000000000000000;;		Default.Add("hexcolor", &hc, govalidator.IsHexcolor)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rc := RGBColor("")
0000000000000000000000000000000000000000;;		Default.Add("rgbcolor", &rc, govalidator.IsRGBcolor)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b64 := Base64([]byte(nil))
0000000000000000000000000000000000000000;;		Default.Add("byte", &b64, govalidator.IsBase64)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pw := Password("")
0000000000000000000000000000000000000000;;		Default.Add("password", &pw, func(_ string) bool { return true })
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var formatCheckers = map[string]Validator{
0000000000000000000000000000000000000000;;		"byte": govalidator.IsBase64,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Base64 represents a base64 encoded string
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt byte
0000000000000000000000000000000000000000;;	type Base64 []byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (b Base64) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		enc := base64.URLEncoding
0000000000000000000000000000000000000000;;		src := []byte(b)
0000000000000000000000000000000000000000;;		buf := make([]byte, enc.EncodedLen(len(src)))
0000000000000000000000000000000000000000;;		enc.Encode(buf, src)
0000000000000000000000000000000000000000;;		return buf, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (b *Base64) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		enc := base64.URLEncoding
0000000000000000000000000000000000000000;;		dbuf := make([]byte, enc.DecodedLen(len(data)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		n, err := enc.Decode(dbuf, data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		*b = dbuf[:n]
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (b *Base64) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*b = Base64(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*b = Base64(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.Base64 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (b Base64) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(b)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b Base64) String() string {
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b Base64) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		b.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b Base64) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(base64.StdEncoding.EncodeToString([]byte(b)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *Base64) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		b.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *Base64) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			enc := base64.StdEncoding
0000000000000000000000000000000000000000;;			dbuf := make([]byte, enc.DecodedLen(len(data)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			n, err := enc.Decode(dbuf, []byte(data))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				in.AddError(err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			*b = dbuf[:n]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// URI represents the uri string format as specified by the json schema spec
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt uri
0000000000000000000000000000000000000000;;	type URI string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u URI) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *URI) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = URI(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *URI) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = URI(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = URI(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.URI from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u URI) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u URI) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u URI) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u URI) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *URI) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *URI) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = URI(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Email represents the email string format as specified by the json schema spec
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt email
0000000000000000000000000000000000000000;;	type Email string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (e Email) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(e)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (e *Email) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*e = Email(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (e *Email) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*e = Email(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*e = Email(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.Email from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (e Email) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(e)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Email) String() string {
0000000000000000000000000000000000000000;;		return string(e)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Email) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		e.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Email) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(e))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Email) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		e.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Email) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*e = Email(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Hostname represents the hostname string format as specified by the json schema spec
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt hostname
0000000000000000000000000000000000000000;;	type Hostname string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (h Hostname) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(h)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (h *Hostname) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*h = Hostname(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (h *Hostname) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*h = Hostname(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*h = Hostname(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.Hostname from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (h Hostname) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(h)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h Hostname) String() string {
0000000000000000000000000000000000000000;;		return string(h)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h Hostname) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		h.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h Hostname) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(h))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *Hostname) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		h.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *Hostname) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*h = Hostname(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPv4 represents an IP v4 address
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt ipv4
0000000000000000000000000000000000000000;;	type IPv4 string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u IPv4) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *IPv4) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = IPv4(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *IPv4) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = IPv4(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = IPv4(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.IPv4 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u IPv4) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u IPv4) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u IPv4) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u IPv4) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *IPv4) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *IPv4) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = IPv4(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPv6 represents an IP v6 address
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt ipv6
0000000000000000000000000000000000000000;;	type IPv6 string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u IPv6) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *IPv6) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = IPv6(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *IPv6) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = IPv6(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = IPv6(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.IPv6 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u IPv6) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u IPv6) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u IPv6) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u IPv6) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *IPv6) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *IPv6) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = IPv6(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MAC represents a 48 bit MAC address
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt mac
0000000000000000000000000000000000000000;;	type MAC string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u MAC) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *MAC) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = MAC(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *MAC) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = MAC(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = MAC(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.IPv4 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u MAC) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u MAC) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u MAC) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u MAC) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *MAC) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *MAC) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = MAC(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UUID represents a uuid string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt uuid
0000000000000000000000000000000000000000;;	type UUID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u UUID) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *UUID) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = UUID(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *UUID) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = UUID(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = UUID(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.UUID from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u UUID) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = UUID(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UUID3 represents a uuid3 string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt uuid3
0000000000000000000000000000000000000000;;	type UUID3 string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u UUID3) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *UUID3) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = UUID3(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *UUID3) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = UUID3(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = UUID3(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.UUID3 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u UUID3) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID3) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID3) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID3) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID3) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID3) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = UUID3(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UUID4 represents a uuid4 string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt uuid4
0000000000000000000000000000000000000000;;	type UUID4 string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u UUID4) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *UUID4) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = UUID4(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *UUID4) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = UUID4(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = UUID4(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.UUID4 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u UUID4) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID4) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID4) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID4) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID4) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID4) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = UUID4(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UUID5 represents a uuid5 string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt uuid5
0000000000000000000000000000000000000000;;	type UUID5 string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u UUID5) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *UUID5) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = UUID5(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *UUID5) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = UUID5(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = UUID5(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.UUID5 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u UUID5) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID5) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID5) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID5) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID5) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID5) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = UUID5(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ISBN represents an isbn string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt isbn
0000000000000000000000000000000000000000;;	type ISBN string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u ISBN) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *ISBN) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = ISBN(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *ISBN) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = ISBN(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = ISBN(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.ISBN from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u ISBN) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *ISBN) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *ISBN) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = ISBN(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ISBN10 represents an isbn 10 string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt isbn10
0000000000000000000000000000000000000000;;	type ISBN10 string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u ISBN10) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *ISBN10) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = ISBN10(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *ISBN10) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = ISBN10(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = ISBN10(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.ISBN10 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u ISBN10) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN10) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN10) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN10) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *ISBN10) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *ISBN10) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = ISBN10(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ISBN13 represents an isbn 13 string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt isbn13
0000000000000000000000000000000000000000;;	type ISBN13 string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u ISBN13) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *ISBN13) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = ISBN13(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *ISBN13) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = ISBN13(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = ISBN13(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.ISBN13 from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u ISBN13) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN13) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN13) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u ISBN13) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *ISBN13) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *ISBN13) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = ISBN13(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreditCard represents a credit card string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt creditcard
0000000000000000000000000000000000000000;;	type CreditCard string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u CreditCard) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *CreditCard) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = CreditCard(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *CreditCard) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = CreditCard(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = CreditCard(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.CreditCard from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u CreditCard) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u CreditCard) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u CreditCard) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u CreditCard) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *CreditCard) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *CreditCard) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = CreditCard(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SSN represents a social security string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt ssn
0000000000000000000000000000000000000000;;	type SSN string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (u SSN) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (u *SSN) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*u = SSN(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (u *SSN) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*u = SSN(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*u = SSN(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.SSN from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (u SSN) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(u)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u SSN) String() string {
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u SSN) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		u.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u SSN) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(u))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *SSN) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		u.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *SSN) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*u = SSN(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HexColor represents a hex color string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt hexcolor
0000000000000000000000000000000000000000;;	type HexColor string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (h HexColor) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(h)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (h *HexColor) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*h = HexColor(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (h *HexColor) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*h = HexColor(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*h = HexColor(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.HexColor from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (h HexColor) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(h)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HexColor) String() string {
0000000000000000000000000000000000000000;;		return string(h)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HexColor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		h.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HexColor) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(h))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *HexColor) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		h.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *HexColor) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*h = HexColor(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RGBColor represents a RGB color string format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt rgbcolor
0000000000000000000000000000000000000000;;	type RGBColor string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (r RGBColor) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(r)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (r *RGBColor) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*r = RGBColor(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (r *RGBColor) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*r = RGBColor(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*r = RGBColor(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.RGBColor from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (r RGBColor) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(r)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r RGBColor) String() string {
0000000000000000000000000000000000000000;;		return string(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r RGBColor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		r.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r RGBColor) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(r))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RGBColor) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		r.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RGBColor) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*r = RGBColor(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Password represents a password.
0000000000000000000000000000000000000000;;	// This has no validations and is mainly used as a marker for UI components.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt password
0000000000000000000000000000000000000000;;	type Password string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText turns this instance into text
0000000000000000000000000000000000000000;;	func (r Password) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(string(r)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText hydrates this instance from text
0000000000000000000000000000000000000000;;	func (r *Password) UnmarshalText(data []byte) error { // validation is performed later on
0000000000000000000000000000000000000000;;		*r = Password(string(data))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan read a value from a database driver
0000000000000000000000000000000000000000;;	func (r *Password) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			*r = Password(string(v))
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			*r = Password(v)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.Password from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts a value to a database driver value
0000000000000000000000000000000000000000;;	func (r Password) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(string(r)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r Password) String() string {
0000000000000000000000000000000000000000;;		return string(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r Password) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		r.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r Password) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(string(r))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Password) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		r.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Password) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			*r = Password(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
