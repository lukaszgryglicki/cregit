0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package strfmt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"database/sql/driver"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/mailru/easyjson/jlexer"
0000000000000000000000000000000000000000;;		"github.com/mailru/easyjson/jwriter"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		dt := DateTime{}
0000000000000000000000000000000000000000;;		Default.Add("datetime", &dt, IsDateTime)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsDateTime returns true when the string is a valid date-time
0000000000000000000000000000000000000000;;	func IsDateTime(str string) bool {
0000000000000000000000000000000000000000;;		if len(str) < 4 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := strings.Split(strings.ToLower(str), "t")
0000000000000000000000000000000000000000;;		if len(s) < 2 || !IsDate(s[0]) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matches := rxDateTime.FindAllStringSubmatch(s[1], -1)
0000000000000000000000000000000000000000;;		if len(matches) == 0 || len(matches[0]) == 0 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := matches[0]
0000000000000000000000000000000000000000;;		res := m[1] <= "23" && m[2] <= "59" && m[3] <= "59"
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RFC3339Millis represents a ISO8601 format to millis instead of to nanos
0000000000000000000000000000000000000000;;		RFC3339Millis = "2006-01-02T15:04:05.000Z07:00"
0000000000000000000000000000000000000000;;		// DateTimePattern pattern to match for the date-time format from http://tools.ietf.org/html/rfc3339#section-5.6
0000000000000000000000000000000000000000;;		DateTimePattern = `^([0-9]{2}):([0-9]{2}):([0-9]{2})(.[0-9]+)?(z|([+-][0-9]{2}:[0-9]{2}))$`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		dateTimeFormats = []string{RFC3339Millis, time.RFC3339, time.RFC3339Nano}
0000000000000000000000000000000000000000;;		rxDateTime      = regexp.MustCompile(DateTimePattern)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseDateTime parses a string that represents an ISO8601 time or a unix epoch
0000000000000000000000000000000000000000;;	func ParseDateTime(data string) (DateTime, error) {
0000000000000000000000000000000000000000;;		if data == "" {
0000000000000000000000000000000000000000;;			return NewDateTime(), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var lastError error
0000000000000000000000000000000000000000;;		for _, layout := range dateTimeFormats {
0000000000000000000000000000000000000000;;			dd, err := time.Parse(layout, data)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				lastError = err
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			lastError = nil
0000000000000000000000000000000000000000;;			return DateTime(dd), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return DateTime{}, lastError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DateTime is a time but it serializes to ISO8601 format with millis
0000000000000000000000000000000000000000;;	// It knows how to read 3 different variations of a RFC3339 date time.
0000000000000000000000000000000000000000;;	// Most API's we encounter want either millisecond or second precision times. This just tries to make it worry-free.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt date-time
0000000000000000000000000000000000000000;;	type DateTime time.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDateTime is a representation of zero value for DateTime type
0000000000000000000000000000000000000000;;	func NewDateTime() DateTime {
0000000000000000000000000000000000000000;;		return DateTime(time.Unix(0, 0).UTC())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t DateTime) String() string {
0000000000000000000000000000000000000000;;		return time.Time(t).Format(RFC3339Millis)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText implements the text marshaller interface
0000000000000000000000000000000000000000;;	func (t DateTime) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(t.String()), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText implements the text unmarshaller interface
0000000000000000000000000000000000000000;;	func (t *DateTime) UnmarshalText(text []byte) error {
0000000000000000000000000000000000000000;;		tt, err := ParseDateTime(string(text))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*t = tt
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan scans a DateTime value from database driver type.
0000000000000000000000000000000000000000;;	func (t *DateTime) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		// TODO: case int64: and case float64: ?
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			return t.UnmarshalText(v)
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return t.UnmarshalText([]byte(v))
0000000000000000000000000000000000000000;;		case time.Time:
0000000000000000000000000000000000000000;;			*t = DateTime(v)
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			*t = DateTime{}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.DateTime from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts DateTime to a primitive value ready to written to a database.
0000000000000000000000000000000000000000;;	func (t DateTime) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(t), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t DateTime) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		t.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t DateTime) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(time.Time(t).Format(RFC3339Millis))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *DateTime) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		t.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *DateTime) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			tt, err := ParseDateTime(data)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				in.AddError(err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*t = tt
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
