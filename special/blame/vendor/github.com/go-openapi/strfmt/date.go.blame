0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package strfmt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"database/sql/driver"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/mailru/easyjson/jlexer"
0000000000000000000000000000000000000000;;		"github.com/mailru/easyjson/jwriter"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		d := Date{}
0000000000000000000000000000000000000000;;		Default.Add("date", &d, IsDate)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsDate returns true when the string is a valid date
0000000000000000000000000000000000000000;;	func IsDate(str string) bool {
0000000000000000000000000000000000000000;;		matches := rxDate.FindAllStringSubmatch(str, -1)
0000000000000000000000000000000000000000;;		if len(matches) == 0 || len(matches[0]) == 0 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := matches[0]
0000000000000000000000000000000000000000;;		return !(m[2] < "01" || m[2] > "12" || m[3] < "01" || m[3] > "31")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RFC3339FullDate represents a full-date as specified by RFC3339
0000000000000000000000000000000000000000;;		// See: http://goo.gl/xXOvVd
0000000000000000000000000000000000000000;;		RFC3339FullDate = "2006-01-02"
0000000000000000000000000000000000000000;;		// DatePattern pattern to match for the date format from http://tools.ietf.org/html/rfc3339#section-5.6
0000000000000000000000000000000000000000;;		DatePattern = `^([0-9]{4})-([0-9]{2})-([0-9]{2})`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		rxDate = regexp.MustCompile(DatePattern)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Date represents a date from the API
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// swagger:strfmt date
0000000000000000000000000000000000000000;;	type Date time.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String converts this date into a string
0000000000000000000000000000000000000000;;	func (d Date) String() string {
0000000000000000000000000000000000000000;;		return time.Time(d).Format(RFC3339FullDate)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText parses a text representation into a date type
0000000000000000000000000000000000000000;;	func (d *Date) UnmarshalText(text []byte) error {
0000000000000000000000000000000000000000;;		if len(text) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dd, err := time.Parse(RFC3339FullDate, string(text))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*d = Date(dd)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText serializes this date type to string
0000000000000000000000000000000000000000;;	func (d Date) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(d.String()), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scan scans a Date value from database driver type.
0000000000000000000000000000000000000000;;	func (d *Date) Scan(raw interface{}) error {
0000000000000000000000000000000000000000;;		switch v := raw.(type) {
0000000000000000000000000000000000000000;;		case []byte:
0000000000000000000000000000000000000000;;			return d.UnmarshalText(v)
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return d.UnmarshalText([]byte(v))
0000000000000000000000000000000000000000;;		case time.Time:
0000000000000000000000000000000000000000;;			*d = Date(v)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			*d = Date{}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot sql.Scan() strfmt.Date from: %#v", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value converts Date to a primitive value ready to written to a database.
0000000000000000000000000000000000000000;;	func (d Date) Value() (driver.Value, error) {
0000000000000000000000000000000000000000;;		return driver.Value(d), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t Date) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var w jwriter.Writer
0000000000000000000000000000000000000000;;		t.MarshalEasyJSON(&w)
0000000000000000000000000000000000000000;;		return w.BuildBytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t Date) MarshalEasyJSON(w *jwriter.Writer) {
0000000000000000000000000000000000000000;;		w.String(time.Time(t).Format(RFC3339FullDate))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Date) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		l := jlexer.Lexer{Data: data}
0000000000000000000000000000000000000000;;		t.UnmarshalEasyJSON(&l)
0000000000000000000000000000000000000000;;		return l.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Date) UnmarshalEasyJSON(in *jlexer.Lexer) {
0000000000000000000000000000000000000000;;		if data := in.String(); in.Ok() {
0000000000000000000000000000000000000000;;			tt, err := time.Parse(RFC3339FullDate, data)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				in.AddError(err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*t = Date(tt)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
