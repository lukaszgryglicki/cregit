0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CanHaveBody returns true if this method can have a body
0000000000000000000000000000000000000000;;	func CanHaveBody(method string) bool {
0000000000000000000000000000000000000000;;		mn := strings.ToUpper(method)
0000000000000000000000000000000000000000;;		return mn == "POST" || mn == "PUT" || mn == "PATCH" || mn == "DELETE"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsSafe returns true if this is a request with a safe method
0000000000000000000000000000000000000000;;	func IsSafe(r *http.Request) bool {
0000000000000000000000000000000000000000;;		mn := strings.ToUpper(r.Method)
0000000000000000000000000000000000000000;;		return mn == "GET" || mn == "HEAD"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowsBody returns true if the request allows for a body
0000000000000000000000000000000000000000;;	func AllowsBody(r *http.Request) bool {
0000000000000000000000000000000000000000;;		mn := strings.ToUpper(r.Method)
0000000000000000000000000000000000000000;;		return mn != "HEAD"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HasBody returns true if this method needs a content-type
0000000000000000000000000000000000000000;;	func HasBody(r *http.Request) bool {
0000000000000000000000000000000000000000;;		return len(r.TransferEncoding) > 0 || r.ContentLength > 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONRequest creates a new http request with json headers set
0000000000000000000000000000000000000000;;	func JSONRequest(method, urlStr string, body io.Reader) (*http.Request, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, urlStr, body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Add(HeaderContentType, JSONMime)
0000000000000000000000000000000000000000;;		req.Header.Add(HeaderAccept, JSONMime)
0000000000000000000000000000000000000000;;		return req, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gettable for things with a method GetOK(string) (data string, hasKey bool, hasValue bool)
0000000000000000000000000000000000000000;;	type Gettable interface {
0000000000000000000000000000000000000000;;		GetOK(string) ([]string, bool, bool)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadSingleValue reads a single value from the source
0000000000000000000000000000000000000000;;	func ReadSingleValue(values Gettable, name string) string {
0000000000000000000000000000000000000000;;		vv, _, hv := values.GetOK(name)
0000000000000000000000000000000000000000;;		if hv {
0000000000000000000000000000000000000000;;			return vv[len(vv)-1]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadCollectionValue reads a collection value from a string data source
0000000000000000000000000000000000000000;;	func ReadCollectionValue(values Gettable, name, collectionFormat string) []string {
0000000000000000000000000000000000000000;;		v := ReadSingleValue(values, name)
0000000000000000000000000000000000000000;;		return swag.SplitByFormat(v, collectionFormat)
0000000000000000000000000000000000000000;;	}
