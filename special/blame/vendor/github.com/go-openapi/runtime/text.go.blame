0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TextConsumer creates a new text consumer
0000000000000000000000000000000000000000;;	func TextConsumer() Consumer {
0000000000000000000000000000000000000000;;		return ConsumerFunc(func(reader io.Reader, data interface{}) error {
0000000000000000000000000000000000000000;;			buf := new(bytes.Buffer)
0000000000000000000000000000000000000000;;			_, err := buf.ReadFrom(reader)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b := buf.Bytes()
0000000000000000000000000000000000000000;;			*(data.(*string)) = *(*string)(unsafe.Pointer(&b))
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TextProducer creates a new text producer
0000000000000000000000000000000000000000;;	func TextProducer() Producer {
0000000000000000000000000000000000000000;;		return ProducerFunc(func(writer io.Writer, data interface{}) error {
0000000000000000000000000000000000000000;;			var buf *bytes.Buffer
0000000000000000000000000000000000000000;;			switch tped := data.(type) {
0000000000000000000000000000000000000000;;			case *string:
0000000000000000000000000000000000000000;;				buf = bytes.NewBufferString(swag.StringValue(tped))
0000000000000000000000000000000000000000;;			case string:
0000000000000000000000000000000000000000;;				buf = bytes.NewBufferString(tped)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, err := buf.WriteTo(writer)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
