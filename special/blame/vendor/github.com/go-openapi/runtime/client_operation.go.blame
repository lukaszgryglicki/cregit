0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClientOperation represents the context for a swagger operation to be submitted to the transport
0000000000000000000000000000000000000000;;	type ClientOperation struct {
0000000000000000000000000000000000000000;;		ID                 string
0000000000000000000000000000000000000000;;		Method             string
0000000000000000000000000000000000000000;;		PathPattern        string
0000000000000000000000000000000000000000;;		ProducesMediaTypes []string
0000000000000000000000000000000000000000;;		ConsumesMediaTypes []string
0000000000000000000000000000000000000000;;		Schemes            []string
0000000000000000000000000000000000000000;;		AuthInfo           ClientAuthInfoWriter
0000000000000000000000000000000000000000;;		Params             ClientRequestWriter
0000000000000000000000000000000000000000;;		Reader             ClientResponseReader
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A ClientTransport implementor knows how to submit Request objects to some destination
0000000000000000000000000000000000000000;;	type ClientTransport interface {
0000000000000000000000000000000000000000;;		//Submit(string, RequestWriter, ResponseReader, AuthInfoWriter) (interface{}, error)
0000000000000000000000000000000000000000;;		Submit(*ClientOperation) (interface{}, error)
0000000000000000000000000000000000000000;;	}
