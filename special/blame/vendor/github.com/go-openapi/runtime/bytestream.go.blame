0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByteStreamConsumer creates a consmer for byte streams, takes a writer and reads from the provided reader
0000000000000000000000000000000000000000;;	func ByteStreamConsumer() Consumer {
0000000000000000000000000000000000000000;;		return ConsumerFunc(func(r io.Reader, v interface{}) error {
0000000000000000000000000000000000000000;;			wrtr, ok := v.(io.Writer)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return errors.New("ByteStreamConsumer can only deal with io.Writer")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, err := io.Copy(wrtr, r)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByteStreamProducer creates a producer for byte streams, takes a reader, writes to a writer (essentially a pipe)
0000000000000000000000000000000000000000;;	func ByteStreamProducer() Producer {
0000000000000000000000000000000000000000;;		return ProducerFunc(func(w io.Writer, v interface{}) error {
0000000000000000000000000000000000000000;;			rdr, ok := v.(io.Reader)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return errors.New("ByteStreamProducer can only deal with io.Reader")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, err := io.Copy(w, rdr)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
