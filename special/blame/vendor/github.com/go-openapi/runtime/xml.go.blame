0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XMLConsumer creates a new XML consumer
0000000000000000000000000000000000000000;;	func XMLConsumer() Consumer {
0000000000000000000000000000000000000000;;		return ConsumerFunc(func(reader io.Reader, data interface{}) error {
0000000000000000000000000000000000000000;;			dec := xml.NewDecoder(reader)
0000000000000000000000000000000000000000;;			return dec.Decode(data)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XMLProducer creates a new XML producer
0000000000000000000000000000000000000000;;	func XMLProducer() Producer {
0000000000000000000000000000000000000000;;		return ProducerFunc(func(writer io.Writer, data interface{}) error {
0000000000000000000000000000000000000000;;			enc := xml.NewEncoder(writer)
0000000000000000000000000000000000000000;;			return enc.Encode(data)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
