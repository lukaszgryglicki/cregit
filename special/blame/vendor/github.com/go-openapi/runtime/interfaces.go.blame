0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"mime/multipart"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/strfmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// File represents an uploaded file.
0000000000000000000000000000000000000000;;	type File struct {
0000000000000000000000000000000000000000;;		Data   multipart.File
0000000000000000000000000000000000000000;;		Header *multipart.FileHeader
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperationHandlerFunc an adapter for a function to the OperationHandler interface
0000000000000000000000000000000000000000;;	type OperationHandlerFunc func(interface{}) (interface{}, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handle implements the operation handler interface
0000000000000000000000000000000000000000;;	func (s OperationHandlerFunc) Handle(data interface{}) (interface{}, error) {
0000000000000000000000000000000000000000;;		return s(data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperationHandler a handler for a swagger operation
0000000000000000000000000000000000000000;;	type OperationHandler interface {
0000000000000000000000000000000000000000;;		Handle(interface{}) (interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConsumerFunc represents a function that can be used as a consumer
0000000000000000000000000000000000000000;;	type ConsumerFunc func(io.Reader, interface{}) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Consume consumes the reader into the data parameter
0000000000000000000000000000000000000000;;	func (fn ConsumerFunc) Consume(reader io.Reader, data interface{}) error {
0000000000000000000000000000000000000000;;		return fn(reader, data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Consumer implementations know how to bind the values on the provided interface to
0000000000000000000000000000000000000000;;	// data provided by the request body
0000000000000000000000000000000000000000;;	type Consumer interface {
0000000000000000000000000000000000000000;;		// Consume performs the binding of request values
0000000000000000000000000000000000000000;;		Consume(io.Reader, interface{}) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProducerFunc represents a function that can be used as a producer
0000000000000000000000000000000000000000;;	type ProducerFunc func(io.Writer, interface{}) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Produce produces the response for the provided data
0000000000000000000000000000000000000000;;	func (f ProducerFunc) Produce(writer io.Writer, data interface{}) error {
0000000000000000000000000000000000000000;;		return f(writer, data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Producer implementations know how to turn the provided interface into a valid
0000000000000000000000000000000000000000;;	// HTTP response
0000000000000000000000000000000000000000;;	type Producer interface {
0000000000000000000000000000000000000000;;		// Produce writes to the http response
0000000000000000000000000000000000000000;;		Produce(io.Writer, interface{}) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatorFunc turns a function into an authenticator
0000000000000000000000000000000000000000;;	type AuthenticatorFunc func(interface{}) (bool, interface{}, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authenticate authenticates the request with the provided data
0000000000000000000000000000000000000000;;	func (f AuthenticatorFunc) Authenticate(params interface{}) (bool, interface{}, error) {
0000000000000000000000000000000000000000;;		return f(params)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authenticator represents an authentication strategy
0000000000000000000000000000000000000000;;	// implementations of Authenticator know how to authenticate the
0000000000000000000000000000000000000000;;	// request data and translate that into a valid principal object or an error
0000000000000000000000000000000000000000;;	type Authenticator interface {
0000000000000000000000000000000000000000;;		Authenticate(interface{}) (bool, interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validatable types implementing this interface allow customizing their validation
0000000000000000000000000000000000000000;;	// this will be used instead of the reflective valditation based on the spec document.
0000000000000000000000000000000000000000;;	// the implementations are assumed to have been generated by the swagger tool so they should
0000000000000000000000000000000000000000;;	// contain all the validations obtained from the spec
0000000000000000000000000000000000000000;;	type Validatable interface {
0000000000000000000000000000000000000000;;		Validate(strfmt.Registry) error
0000000000000000000000000000000000000000;;	}
