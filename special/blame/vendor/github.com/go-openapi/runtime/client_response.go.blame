0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A ClientResponse represents a client response
0000000000000000000000000000000000000000;;	// This bridges between responses obtained from different transports
0000000000000000000000000000000000000000;;	type ClientResponse interface {
0000000000000000000000000000000000000000;;		Code() int
0000000000000000000000000000000000000000;;		Message() string
0000000000000000000000000000000000000000;;		GetHeader(string) string
0000000000000000000000000000000000000000;;		Body() io.ReadCloser
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A ClientResponseReaderFunc turns a function into a ClientResponseReader interface implementation
0000000000000000000000000000000000000000;;	type ClientResponseReaderFunc func(ClientResponse, Consumer) (interface{}, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadResponse reads the response
0000000000000000000000000000000000000000;;	func (read ClientResponseReaderFunc) ReadResponse(resp ClientResponse, consumer Consumer) (interface{}, error) {
0000000000000000000000000000000000000000;;		return read(resp, consumer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A ClientResponseReader is an interface for things want to read a response.
0000000000000000000000000000000000000000;;	// An application of this is to create structs from response values
0000000000000000000000000000000000000000;;	type ClientResponseReader interface {
0000000000000000000000000000000000000000;;		ReadResponse(ClientResponse, Consumer) (interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAPIError creates a new API error
0000000000000000000000000000000000000000;;	func NewAPIError(opName string, payload interface{}, code int) *APIError {
0000000000000000000000000000000000000000;;		return &APIError{
0000000000000000000000000000000000000000;;			OperationName: opName,
0000000000000000000000000000000000000000;;			Response:      payload,
0000000000000000000000000000000000000000;;			Code:          code,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIError wraps an error model and captures the status code
0000000000000000000000000000000000000000;;	type APIError struct {
0000000000000000000000000000000000000000;;		OperationName string
0000000000000000000000000000000000000000;;		Response      interface{}
0000000000000000000000000000000000000000;;		Code          int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *APIError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
0000000000000000000000000000000000000000;;	}
