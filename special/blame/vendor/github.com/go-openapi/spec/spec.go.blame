0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//go:generate go-bindata -pkg=spec -prefix=./schemas -ignore=.*\.md ./schemas/...
0000000000000000000000000000000000000000;;	//go:generate perl -pi -e s,Json,JSON,g bindata.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SwaggerSchemaURL the url for the swagger 2.0 schema to validate specs
0000000000000000000000000000000000000000;;		SwaggerSchemaURL = "http://swagger.io/v2/schema.json#"
0000000000000000000000000000000000000000;;		// JSONSchemaURL the url for the json schema schema
0000000000000000000000000000000000000000;;		JSONSchemaURL = "http://json-schema.org/draft-04/schema#"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		jsonSchema    = MustLoadJSONSchemaDraft04()
0000000000000000000000000000000000000000;;		swaggerSchema = MustLoadSwagger20Schema()
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MustLoadJSONSchemaDraft04 panics when Swagger20Schema returns an error
0000000000000000000000000000000000000000;;	func MustLoadJSONSchemaDraft04() *Schema {
0000000000000000000000000000000000000000;;		d, e := JSONSchemaDraft04()
0000000000000000000000000000000000000000;;		if e != nil {
0000000000000000000000000000000000000000;;			panic(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONSchemaDraft04 loads the json schema document for json shema draft04
0000000000000000000000000000000000000000;;	func JSONSchemaDraft04() (*Schema, error) {
0000000000000000000000000000000000000000;;		b, err := Asset("jsonschema-draft-04.json")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		schema := new(Schema)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(b, schema); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return schema, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MustLoadSwagger20Schema panics when Swagger20Schema returns an error
0000000000000000000000000000000000000000;;	func MustLoadSwagger20Schema() *Schema {
0000000000000000000000000000000000000000;;		d, e := Swagger20Schema()
0000000000000000000000000000000000000000;;		if e != nil {
0000000000000000000000000000000000000000;;			panic(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Swagger20Schema loads the swagger 2.0 schema from the embedded assets
0000000000000000000000000000000000000000;;	func Swagger20Schema() (*Schema, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b, err := Asset("v2/schema.json")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		schema := new(Schema)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(b, schema); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return schema, nil
0000000000000000000000000000000000000000;;	}
