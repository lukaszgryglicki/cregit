0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Responses is a container for the expected responses of an operation.
0000000000000000000000000000000000000000;;	// The container maps a HTTP response code to the expected response.
0000000000000000000000000000000000000000;;	// It is not expected from the documentation to necessarily cover all possible HTTP response codes,
0000000000000000000000000000000000000000;;	// since they may not be known in advance. However, it is expected from the documentation to cover
0000000000000000000000000000000000000000;;	// a successful operation response and any known errors.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The `default` can be used a default response object for all HTTP codes that are not covered
0000000000000000000000000000000000000000;;	// individually by the specification.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The `Responses Object` MUST contain at least one response code, and it SHOULD be the response
0000000000000000000000000000000000000000;;	// for a successful operation call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#responsesObject
0000000000000000000000000000000000000000;;	type Responses struct {
0000000000000000000000000000000000000000;;		VendorExtensible
0000000000000000000000000000000000000000;;		ResponsesProps
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONLookup implements an interface to customize json pointer lookup
0000000000000000000000000000000000000000;;	func (r Responses) JSONLookup(token string) (interface{}, error) {
0000000000000000000000000000000000000000;;		if token == "default" {
0000000000000000000000000000000000000000;;			return r.Default, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ex, ok := r.Extensions[token]; ok {
0000000000000000000000000000000000000000;;			return &ex, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if i, err := strconv.Atoi(token); err == nil {
0000000000000000000000000000000000000000;;			if scr, ok := r.StatusCodeResponses[i]; ok {
0000000000000000000000000000000000000000;;				return &scr, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("object has no field %q", token)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON hydrates this items instance with the data from JSON
0000000000000000000000000000000000000000;;	func (r *Responses) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &r.ResponsesProps); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &r.VendorExtensible); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if reflect.DeepEqual(ResponsesProps{}, r.ResponsesProps) {
0000000000000000000000000000000000000000;;			r.ResponsesProps = ResponsesProps{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON converts this items object to JSON
0000000000000000000000000000000000000000;;	func (r Responses) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b1, err := json.Marshal(r.ResponsesProps)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b2, err := json.Marshal(r.VendorExtensible)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		concated := swag.ConcatJSON(b1, b2)
0000000000000000000000000000000000000000;;		return concated, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResponsesProps struct {
0000000000000000000000000000000000000000;;		Default             *Response
0000000000000000000000000000000000000000;;		StatusCodeResponses map[int]Response
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r ResponsesProps) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		toser := map[string]Response{}
0000000000000000000000000000000000000000;;		if r.Default != nil {
0000000000000000000000000000000000000000;;			toser["default"] = *r.Default
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range r.StatusCodeResponses {
0000000000000000000000000000000000000000;;			toser[strconv.Itoa(k)] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(toser)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ResponsesProps) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var res map[string]Response
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &res); err != nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, ok := res["default"]; ok {
0000000000000000000000000000000000000000;;			r.Default = &v
0000000000000000000000000000000000000000;;			delete(res, "default")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range res {
0000000000000000000000000000000000000000;;			if nk, err := strconv.Atoi(k); err == nil {
0000000000000000000000000000000000000000;;				if r.StatusCodeResponses == nil {
0000000000000000000000000000000000000000;;					r.StatusCodeResponses = map[int]Response{}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				r.StatusCodeResponses[nk] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
