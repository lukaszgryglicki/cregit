0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/jsonpointer"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryParam creates a query parameter
0000000000000000000000000000000000000000;;	func QueryParam(name string) *Parameter {
0000000000000000000000000000000000000000;;		return &Parameter{ParamProps: ParamProps{Name: name, In: "query"}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HeaderParam creates a header parameter, this is always required by default
0000000000000000000000000000000000000000;;	func HeaderParam(name string) *Parameter {
0000000000000000000000000000000000000000;;		return &Parameter{ParamProps: ParamProps{Name: name, In: "header", Required: true}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathParam creates a path parameter, this is always required
0000000000000000000000000000000000000000;;	func PathParam(name string) *Parameter {
0000000000000000000000000000000000000000;;		return &Parameter{ParamProps: ParamProps{Name: name, In: "path", Required: true}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BodyParam creates a body parameter
0000000000000000000000000000000000000000;;	func BodyParam(name string, schema *Schema) *Parameter {
0000000000000000000000000000000000000000;;		return &Parameter{ParamProps: ParamProps{Name: name, In: "body", Schema: schema}, SimpleSchema: SimpleSchema{Type: "object"}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FormDataParam creates a body parameter
0000000000000000000000000000000000000000;;	func FormDataParam(name string) *Parameter {
0000000000000000000000000000000000000000;;		return &Parameter{ParamProps: ParamProps{Name: name, In: "formData"}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FileParam creates a body parameter
0000000000000000000000000000000000000000;;	func FileParam(name string) *Parameter {
0000000000000000000000000000000000000000;;		return &Parameter{ParamProps: ParamProps{Name: name, In: "formData"}, SimpleSchema: SimpleSchema{Type: "file"}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SimpleArrayParam creates a param for a simple array (string, int, date etc)
0000000000000000000000000000000000000000;;	func SimpleArrayParam(name, tpe, fmt string) *Parameter {
0000000000000000000000000000000000000000;;		return &Parameter{ParamProps: ParamProps{Name: name}, SimpleSchema: SimpleSchema{Type: "array", CollectionFormat: "csv", Items: &Items{SimpleSchema: SimpleSchema{Type: "string", Format: fmt}}}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParamRef creates a parameter that's a json reference
0000000000000000000000000000000000000000;;	func ParamRef(uri string) *Parameter {
0000000000000000000000000000000000000000;;		p := new(Parameter)
0000000000000000000000000000000000000000;;		p.Ref = MustCreateRef(uri)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ParamProps struct {
0000000000000000000000000000000000000000;;		Description     string  `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Name            string  `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		In              string  `json:"in,omitempty"`
0000000000000000000000000000000000000000;;		Required        bool    `json:"required,omitempty"`
0000000000000000000000000000000000000000;;		Schema          *Schema `json:"schema,omitempty"`          // when in == "body"
0000000000000000000000000000000000000000;;		AllowEmptyValue bool    `json:"allowEmptyValue,omitempty"` // when in == "query" || "formData"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parameter a unique parameter is defined by a combination of a [name](#parameterName) and [location](#parameterIn).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// There are five possible parameter types.
0000000000000000000000000000000000000000;;	// * Path - Used together with [Path Templating](#pathTemplating), where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API. For example, in `/items/{itemId}`, the path parameter is `itemId`.
0000000000000000000000000000000000000000;;	// * Query - Parameters that are appended to the URL. For example, in `/items?id=###`, the query parameter is `id`.
0000000000000000000000000000000000000000;;	// * Header - Custom headers that are expected as part of the request.
0000000000000000000000000000000000000000;;	// * Body - The payload that's appended to the HTTP request. Since there can only be one payload, there can only be *one* body parameter. The name of the body parameter has no effect on the parameter itself and is used for documentation purposes only. Since Form parameters are also in the payload, body and form parameters cannot exist together for the same operation.
0000000000000000000000000000000000000000;;	// * Form - Used to describe the payload of an HTTP request when either `application/x-www-form-urlencoded` or `multipart/form-data` are used as the content type of the request (in Swagger's definition, the [`consumes`](#operationConsumes) property of an operation). This is the only parameter type that can be used to send files, thus supporting the `file` type. Since form parameters are sent in the payload, they cannot be declared together with a body parameter for the same operation. Form parameters have a different format based on the content-type used (for further details, consult http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4):
0000000000000000000000000000000000000000;;	//   * `application/x-www-form-urlencoded` - Similar to the format of Query parameters but as a payload. For example, `foo=1&bar=swagger` - both `foo` and `bar` are form parameters. This is normally used for simple parameters that are being transferred.
0000000000000000000000000000000000000000;;	//   * `multipart/form-data` - each parameter takes a section in the payload with an internal header. For example, for the header `Content-Disposition: form-data; name="submit-name"` the name of the parameter is `submit-name`. This type of form parameters is more commonly used for file transfers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#parameterObject
0000000000000000000000000000000000000000;;	type Parameter struct {
0000000000000000000000000000000000000000;;		Refable
0000000000000000000000000000000000000000;;		CommonValidations
0000000000000000000000000000000000000000;;		SimpleSchema
0000000000000000000000000000000000000000;;		VendorExtensible
0000000000000000000000000000000000000000;;		ParamProps
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONLookup look up a value by the json property name
0000000000000000000000000000000000000000;;	func (p Parameter) JSONLookup(token string) (interface{}, error) {
0000000000000000000000000000000000000000;;		if ex, ok := p.Extensions[token]; ok {
0000000000000000000000000000000000000000;;			return &ex, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if token == "$ref" {
0000000000000000000000000000000000000000;;			return &p.Ref, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, _, err := jsonpointer.GetForToken(p.CommonValidations, token)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r != nil {
0000000000000000000000000000000000000000;;			return r, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, _, err = jsonpointer.GetForToken(p.SimpleSchema, token)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r != nil {
0000000000000000000000000000000000000000;;			return r, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, _, err = jsonpointer.GetForToken(p.ParamProps, token)
0000000000000000000000000000000000000000;;		return r, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDescription a fluent builder method for the description of the parameter
0000000000000000000000000000000000000000;;	func (p *Parameter) WithDescription(description string) *Parameter {
0000000000000000000000000000000000000000;;		p.Description = description
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Named a fluent builder method to override the name of the parameter
0000000000000000000000000000000000000000;;	func (p *Parameter) Named(name string) *Parameter {
0000000000000000000000000000000000000000;;		p.Name = name
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLocation a fluent builder method to override the location of the parameter
0000000000000000000000000000000000000000;;	func (p *Parameter) WithLocation(in string) *Parameter {
0000000000000000000000000000000000000000;;		p.In = in
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Typed a fluent builder method for the type of the parameter value
0000000000000000000000000000000000000000;;	func (p *Parameter) Typed(tpe, format string) *Parameter {
0000000000000000000000000000000000000000;;		p.Type = tpe
0000000000000000000000000000000000000000;;		p.Format = format
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CollectionOf a fluent builder method for an array parameter
0000000000000000000000000000000000000000;;	func (p *Parameter) CollectionOf(items *Items, format string) *Parameter {
0000000000000000000000000000000000000000;;		p.Type = "array"
0000000000000000000000000000000000000000;;		p.Items = items
0000000000000000000000000000000000000000;;		p.CollectionFormat = format
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDefault sets the default value on this parameter
0000000000000000000000000000000000000000;;	func (p *Parameter) WithDefault(defaultValue interface{}) *Parameter {
0000000000000000000000000000000000000000;;		p.AsOptional() // with default implies optional
0000000000000000000000000000000000000000;;		p.Default = defaultValue
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowsEmptyValues flags this parameter as being ok with empty values
0000000000000000000000000000000000000000;;	func (p *Parameter) AllowsEmptyValues() *Parameter {
0000000000000000000000000000000000000000;;		p.AllowEmptyValue = true
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NoEmptyValues flags this parameter as not liking empty values
0000000000000000000000000000000000000000;;	func (p *Parameter) NoEmptyValues() *Parameter {
0000000000000000000000000000000000000000;;		p.AllowEmptyValue = false
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsOptional flags this parameter as optional
0000000000000000000000000000000000000000;;	func (p *Parameter) AsOptional() *Parameter {
0000000000000000000000000000000000000000;;		p.Required = false
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsRequired flags this parameter as required
0000000000000000000000000000000000000000;;	func (p *Parameter) AsRequired() *Parameter {
0000000000000000000000000000000000000000;;		if p.Default != nil { // with a default required makes no sense
0000000000000000000000000000000000000000;;			return p
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.Required = true
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxLength sets a max length value
0000000000000000000000000000000000000000;;	func (p *Parameter) WithMaxLength(max int64) *Parameter {
0000000000000000000000000000000000000000;;		p.MaxLength = &max
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinLength sets a min length value
0000000000000000000000000000000000000000;;	func (p *Parameter) WithMinLength(min int64) *Parameter {
0000000000000000000000000000000000000000;;		p.MinLength = &min
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPattern sets a pattern value
0000000000000000000000000000000000000000;;	func (p *Parameter) WithPattern(pattern string) *Parameter {
0000000000000000000000000000000000000000;;		p.Pattern = pattern
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMultipleOf sets a multiple of value
0000000000000000000000000000000000000000;;	func (p *Parameter) WithMultipleOf(number float64) *Parameter {
0000000000000000000000000000000000000000;;		p.MultipleOf = &number
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaximum sets a maximum number value
0000000000000000000000000000000000000000;;	func (p *Parameter) WithMaximum(max float64, exclusive bool) *Parameter {
0000000000000000000000000000000000000000;;		p.Maximum = &max
0000000000000000000000000000000000000000;;		p.ExclusiveMaximum = exclusive
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinimum sets a minimum number value
0000000000000000000000000000000000000000;;	func (p *Parameter) WithMinimum(min float64, exclusive bool) *Parameter {
0000000000000000000000000000000000000000;;		p.Minimum = &min
0000000000000000000000000000000000000000;;		p.ExclusiveMinimum = exclusive
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithEnum sets a the enum values (replace)
0000000000000000000000000000000000000000;;	func (p *Parameter) WithEnum(values ...interface{}) *Parameter {
0000000000000000000000000000000000000000;;		p.Enum = append([]interface{}{}, values...)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxItems sets the max items
0000000000000000000000000000000000000000;;	func (p *Parameter) WithMaxItems(size int64) *Parameter {
0000000000000000000000000000000000000000;;		p.MaxItems = &size
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinItems sets the min items
0000000000000000000000000000000000000000;;	func (p *Parameter) WithMinItems(size int64) *Parameter {
0000000000000000000000000000000000000000;;		p.MinItems = &size
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UniqueValues dictates that this array can only have unique items
0000000000000000000000000000000000000000;;	func (p *Parameter) UniqueValues() *Parameter {
0000000000000000000000000000000000000000;;		p.UniqueItems = true
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowDuplicates this array can have duplicates
0000000000000000000000000000000000000000;;	func (p *Parameter) AllowDuplicates() *Parameter {
0000000000000000000000000000000000000000;;		p.UniqueItems = false
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON hydrates this items instance with the data from JSON
0000000000000000000000000000000000000000;;	func (p *Parameter) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &p.CommonValidations); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &p.Refable); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &p.SimpleSchema); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &p.VendorExtensible); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &p.ParamProps); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON converts this items object to JSON
0000000000000000000000000000000000000000;;	func (p Parameter) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b1, err := json.Marshal(p.CommonValidations)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b2, err := json.Marshal(p.SimpleSchema)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b3, err := json.Marshal(p.Refable)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b4, err := json.Marshal(p.VendorExtensible)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b5, err := json.Marshal(p.ParamProps)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return swag.ConcatJSON(b3, b1, b2, b4, b5), nil
0000000000000000000000000000000000000000;;	}
