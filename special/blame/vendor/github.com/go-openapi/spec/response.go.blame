0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResponseProps properties specific to a response
0000000000000000000000000000000000000000;;	type ResponseProps struct {
0000000000000000000000000000000000000000;;		Description string                 `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Schema      *Schema                `json:"schema,omitempty"`
0000000000000000000000000000000000000000;;		Headers     map[string]Header      `json:"headers,omitempty"`
0000000000000000000000000000000000000000;;		Examples    map[string]interface{} `json:"examples,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Response describes a single response from an API Operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#responseObject
0000000000000000000000000000000000000000;;	type Response struct {
0000000000000000000000000000000000000000;;		Refable
0000000000000000000000000000000000000000;;		ResponseProps
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON hydrates this items instance with the data from JSON
0000000000000000000000000000000000000000;;	func (r *Response) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &r.ResponseProps); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &r.Refable); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON converts this items object to JSON
0000000000000000000000000000000000000000;;	func (r Response) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b1, err := json.Marshal(r.ResponseProps)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b2, err := json.Marshal(r.Refable)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return swag.ConcatJSON(b1, b2), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewResponse creates a new response instance
0000000000000000000000000000000000000000;;	func NewResponse() *Response {
0000000000000000000000000000000000000000;;		return new(Response)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResponseRef creates a response as a json reference
0000000000000000000000000000000000000000;;	func ResponseRef(url string) *Response {
0000000000000000000000000000000000000000;;		resp := NewResponse()
0000000000000000000000000000000000000000;;		resp.Ref = MustCreateRef(url)
0000000000000000000000000000000000000000;;		return resp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDescription sets the description on this response, allows for chaining
0000000000000000000000000000000000000000;;	func (r *Response) WithDescription(description string) *Response {
0000000000000000000000000000000000000000;;		r.Description = description
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithSchema sets the schema on this response, allows for chaining.
0000000000000000000000000000000000000000;;	// Passing a nil argument removes the schema from this response
0000000000000000000000000000000000000000;;	func (r *Response) WithSchema(schema *Schema) *Response {
0000000000000000000000000000000000000000;;		r.Schema = schema
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddHeader adds a header to this response
0000000000000000000000000000000000000000;;	func (r *Response) AddHeader(name string, header *Header) *Response {
0000000000000000000000000000000000000000;;		if header == nil {
0000000000000000000000000000000000000000;;			return r.RemoveHeader(name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.Headers == nil {
0000000000000000000000000000000000000000;;			r.Headers = make(map[string]Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.Headers[name] = *header
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveHeader removes a header from this response
0000000000000000000000000000000000000000;;	func (r *Response) RemoveHeader(name string) *Response {
0000000000000000000000000000000000000000;;		delete(r.Headers, name)
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddExample adds an example to this response
0000000000000000000000000000000000000000;;	func (r *Response) AddExample(mediaType string, example interface{}) *Response {
0000000000000000000000000000000000000000;;		if r.Examples == nil {
0000000000000000000000000000000000000000;;			r.Examples = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.Examples[mediaType] = example
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
