0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/jsonpointer"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OperationProps struct {
0000000000000000000000000000000000000000;;		Description  string                 `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Consumes     []string               `json:"consumes,omitempty"`
0000000000000000000000000000000000000000;;		Produces     []string               `json:"produces,omitempty"`
0000000000000000000000000000000000000000;;		Schemes      []string               `json:"schemes,omitempty"` // the scheme, when present must be from [http, https, ws, wss]
0000000000000000000000000000000000000000;;		Tags         []string               `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Summary      string                 `json:"summary,omitempty"`
0000000000000000000000000000000000000000;;		ExternalDocs *ExternalDocumentation `json:"externalDocs,omitempty"`
0000000000000000000000000000000000000000;;		ID           string                 `json:"operationId,omitempty"`
0000000000000000000000000000000000000000;;		Deprecated   bool                   `json:"deprecated,omitempty"`
0000000000000000000000000000000000000000;;		Security     []map[string][]string  `json:"security,omitempty"`
0000000000000000000000000000000000000000;;		Parameters   []Parameter            `json:"parameters,omitempty"`
0000000000000000000000000000000000000000;;		Responses    *Responses             `json:"responses,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Operation describes a single API operation on a path.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#operationObject
0000000000000000000000000000000000000000;;	type Operation struct {
0000000000000000000000000000000000000000;;		VendorExtensible
0000000000000000000000000000000000000000;;		OperationProps
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SuccessResponse gets a success response model
0000000000000000000000000000000000000000;;	func (o *Operation) SuccessResponse() (*Response, int, bool) {
0000000000000000000000000000000000000000;;		if o.Responses == nil {
0000000000000000000000000000000000000000;;			return nil, 0, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range o.Responses.StatusCodeResponses {
0000000000000000000000000000000000000000;;			if k/100 == 2 {
0000000000000000000000000000000000000000;;				return &v, k, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return o.Responses.Default, 0, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONLookup look up a value by the json property name
0000000000000000000000000000000000000000;;	func (o Operation) JSONLookup(token string) (interface{}, error) {
0000000000000000000000000000000000000000;;		if ex, ok := o.Extensions[token]; ok {
0000000000000000000000000000000000000000;;			return &ex, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, _, err := jsonpointer.GetForToken(o.OperationProps, token)
0000000000000000000000000000000000000000;;		return r, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON hydrates this items instance with the data from JSON
0000000000000000000000000000000000000000;;	func (o *Operation) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &o.OperationProps); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &o.VendorExtensible); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON converts this items object to JSON
0000000000000000000000000000000000000000;;	func (o Operation) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b1, err := json.Marshal(o.OperationProps)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b2, err := json.Marshal(o.VendorExtensible)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		concated := swag.ConcatJSON(b1, b2)
0000000000000000000000000000000000000000;;		return concated, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewOperation creates a new operation instance.
0000000000000000000000000000000000000000;;	// It expects an ID as parameter but not passing an ID is also valid.
0000000000000000000000000000000000000000;;	func NewOperation(id string) *Operation {
0000000000000000000000000000000000000000;;		op := new(Operation)
0000000000000000000000000000000000000000;;		op.ID = id
0000000000000000000000000000000000000000;;		return op
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithID sets the ID property on this operation, allows for chaining.
0000000000000000000000000000000000000000;;	func (o *Operation) WithID(id string) *Operation {
0000000000000000000000000000000000000000;;		o.ID = id
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDescription sets the description on this operation, allows for chaining
0000000000000000000000000000000000000000;;	func (o *Operation) WithDescription(description string) *Operation {
0000000000000000000000000000000000000000;;		o.Description = description
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithSummary sets the summary on this operation, allows for chaining
0000000000000000000000000000000000000000;;	func (o *Operation) WithSummary(summary string) *Operation {
0000000000000000000000000000000000000000;;		o.Summary = summary
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithExternalDocs sets/removes the external docs for/from this operation.
0000000000000000000000000000000000000000;;	// When you pass empty strings as params the external documents will be removed.
0000000000000000000000000000000000000000;;	// When you pass non-empty string as one value then those values will be used on the external docs object.
0000000000000000000000000000000000000000;;	// So when you pass a non-empty description, you should also pass the url and vice versa.
0000000000000000000000000000000000000000;;	func (o *Operation) WithExternalDocs(description, url string) *Operation {
0000000000000000000000000000000000000000;;		if description == "" && url == "" {
0000000000000000000000000000000000000000;;			o.ExternalDocs = nil
0000000000000000000000000000000000000000;;			return o
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if o.ExternalDocs == nil {
0000000000000000000000000000000000000000;;			o.ExternalDocs = &ExternalDocumentation{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.ExternalDocs.Description = description
0000000000000000000000000000000000000000;;		o.ExternalDocs.URL = url
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deprecate marks the operation as deprecated
0000000000000000000000000000000000000000;;	func (o *Operation) Deprecate() *Operation {
0000000000000000000000000000000000000000;;		o.Deprecated = true
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Undeprecate marks the operation as not deprected
0000000000000000000000000000000000000000;;	func (o *Operation) Undeprecate() *Operation {
0000000000000000000000000000000000000000;;		o.Deprecated = false
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithConsumes adds media types for incoming body values
0000000000000000000000000000000000000000;;	func (o *Operation) WithConsumes(mediaTypes ...string) *Operation {
0000000000000000000000000000000000000000;;		o.Consumes = append(o.Consumes, mediaTypes...)
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithProduces adds media types for outgoing body values
0000000000000000000000000000000000000000;;	func (o *Operation) WithProduces(mediaTypes ...string) *Operation {
0000000000000000000000000000000000000000;;		o.Produces = append(o.Produces, mediaTypes...)
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithTags adds tags for this operation
0000000000000000000000000000000000000000;;	func (o *Operation) WithTags(tags ...string) *Operation {
0000000000000000000000000000000000000000;;		o.Tags = append(o.Tags, tags...)
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddParam adds a parameter to this operation, when a parameter for that location
0000000000000000000000000000000000000000;;	// and with that name already exists it will be replaced
0000000000000000000000000000000000000000;;	func (o *Operation) AddParam(param *Parameter) *Operation {
0000000000000000000000000000000000000000;;		if param == nil {
0000000000000000000000000000000000000000;;			return o
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, p := range o.Parameters {
0000000000000000000000000000000000000000;;			if p.Name == param.Name && p.In == param.In {
0000000000000000000000000000000000000000;;				params := append(o.Parameters[:i], *param)
0000000000000000000000000000000000000000;;				params = append(params, o.Parameters[i+1:]...)
0000000000000000000000000000000000000000;;				o.Parameters = params
0000000000000000000000000000000000000000;;				return o
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.Parameters = append(o.Parameters, *param)
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveParam removes a parameter from the operation
0000000000000000000000000000000000000000;;	func (o *Operation) RemoveParam(name, in string) *Operation {
0000000000000000000000000000000000000000;;		for i, p := range o.Parameters {
0000000000000000000000000000000000000000;;			if p.Name == name && p.In == name {
0000000000000000000000000000000000000000;;				o.Parameters = append(o.Parameters[:i], o.Parameters[i+1:]...)
0000000000000000000000000000000000000000;;				return o
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecuredWith adds a security scope to this operation.
0000000000000000000000000000000000000000;;	func (o *Operation) SecuredWith(name string, scopes ...string) *Operation {
0000000000000000000000000000000000000000;;		o.Security = append(o.Security, map[string][]string{name: scopes})
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDefaultResponse adds a default response to the operation.
0000000000000000000000000000000000000000;;	// Passing a nil value will remove the response
0000000000000000000000000000000000000000;;	func (o *Operation) WithDefaultResponse(response *Response) *Operation {
0000000000000000000000000000000000000000;;		return o.RespondsWith(0, response)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RespondsWith adds a status code response to the operation.
0000000000000000000000000000000000000000;;	// When the code is 0 the value of the response will be used as default response value.
0000000000000000000000000000000000000000;;	// When the value of the response is nil it will be removed from the operation
0000000000000000000000000000000000000000;;	func (o *Operation) RespondsWith(code int, response *Response) *Operation {
0000000000000000000000000000000000000000;;		if o.Responses == nil {
0000000000000000000000000000000000000000;;			o.Responses = new(Responses)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if code == 0 {
0000000000000000000000000000000000000000;;			o.Responses.Default = response
0000000000000000000000000000000000000000;;			return o
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response == nil {
0000000000000000000000000000000000000000;;			delete(o.Responses.StatusCodeResponses, code)
0000000000000000000000000000000000000000;;			return o
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.Responses.StatusCodeResponses == nil {
0000000000000000000000000000000000000000;;			o.Responses.StatusCodeResponses = make(map[int]Response)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.Responses.StatusCodeResponses[code] = *response
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
