0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Paths holds the relative paths to the individual endpoints.
0000000000000000000000000000000000000000;;	// The path is appended to the [`basePath`](http://goo.gl/8us55a#swaggerBasePath) in order
0000000000000000000000000000000000000000;;	// to construct the full URL.
0000000000000000000000000000000000000000;;	// The Paths may be empty, due to [ACL constraints](http://goo.gl/8us55a#securityFiltering).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#pathsObject
0000000000000000000000000000000000000000;;	type Paths struct {
0000000000000000000000000000000000000000;;		VendorExtensible
0000000000000000000000000000000000000000;;		Paths map[string]PathItem `json:"-"` // custom serializer to flatten this, each entry must start with "/"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONLookup look up a value by the json property name
0000000000000000000000000000000000000000;;	func (p Paths) JSONLookup(token string) (interface{}, error) {
0000000000000000000000000000000000000000;;		if pi, ok := p.Paths[token]; ok {
0000000000000000000000000000000000000000;;			return &pi, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ex, ok := p.Extensions[token]; ok {
0000000000000000000000000000000000000000;;			return &ex, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("object has no field %q", token)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON hydrates this items instance with the data from JSON
0000000000000000000000000000000000000000;;	func (p *Paths) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var res map[string]json.RawMessage
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &res); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range res {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(strings.ToLower(k), "x-") {
0000000000000000000000000000000000000000;;				if p.Extensions == nil {
0000000000000000000000000000000000000000;;					p.Extensions = make(map[string]interface{})
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				var d interface{}
0000000000000000000000000000000000000000;;				if err := json.Unmarshal(v, &d); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Extensions[k] = d
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strings.HasPrefix(k, "/") {
0000000000000000000000000000000000000000;;				if p.Paths == nil {
0000000000000000000000000000000000000000;;					p.Paths = make(map[string]PathItem)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				var pi PathItem
0000000000000000000000000000000000000000;;				if err := json.Unmarshal(v, &pi); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.Paths[k] = pi
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON converts this items object to JSON
0000000000000000000000000000000000000000;;	func (p Paths) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b1, err := json.Marshal(p.VendorExtensible)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pths := make(map[string]PathItem)
0000000000000000000000000000000000000000;;		for k, v := range p.Paths {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(k, "/") {
0000000000000000000000000000000000000000;;				pths[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b2, err := json.Marshal(pths)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		concated := swag.ConcatJSON(b1, b2)
0000000000000000000000000000000000000000;;		return concated, nil
0000000000000000000000000000000000000000;;	}
