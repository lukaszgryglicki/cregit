0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SimpleSchema struct {
0000000000000000000000000000000000000000;;		Type             string      `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Format           string      `json:"format,omitempty"`
0000000000000000000000000000000000000000;;		Items            *Items      `json:"items,omitempty"`
0000000000000000000000000000000000000000;;		CollectionFormat string      `json:"collectionFormat,omitempty"`
0000000000000000000000000000000000000000;;		Default          interface{} `json:"default,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SimpleSchema) TypeName() string {
0000000000000000000000000000000000000000;;		if s.Format != "" {
0000000000000000000000000000000000000000;;			return s.Format
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.Type
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SimpleSchema) ItemsTypeName() string {
0000000000000000000000000000000000000000;;		if s.Items == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.Items.TypeName()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CommonValidations struct {
0000000000000000000000000000000000000000;;		Maximum          *float64      `json:"maximum,omitempty"`
0000000000000000000000000000000000000000;;		ExclusiveMaximum bool          `json:"exclusiveMaximum,omitempty"`
0000000000000000000000000000000000000000;;		Minimum          *float64      `json:"minimum,omitempty"`
0000000000000000000000000000000000000000;;		ExclusiveMinimum bool          `json:"exclusiveMinimum,omitempty"`
0000000000000000000000000000000000000000;;		MaxLength        *int64        `json:"maxLength,omitempty"`
0000000000000000000000000000000000000000;;		MinLength        *int64        `json:"minLength,omitempty"`
0000000000000000000000000000000000000000;;		Pattern          string        `json:"pattern,omitempty"`
0000000000000000000000000000000000000000;;		MaxItems         *int64        `json:"maxItems,omitempty"`
0000000000000000000000000000000000000000;;		MinItems         *int64        `json:"minItems,omitempty"`
0000000000000000000000000000000000000000;;		UniqueItems      bool          `json:"uniqueItems,omitempty"`
0000000000000000000000000000000000000000;;		MultipleOf       *float64      `json:"multipleOf,omitempty"`
0000000000000000000000000000000000000000;;		Enum             []interface{} `json:"enum,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Items a limited subset of JSON-Schema's items object.
0000000000000000000000000000000000000000;;	// It is used by parameter definitions that are not located in "body".
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#items-object-
0000000000000000000000000000000000000000;;	type Items struct {
0000000000000000000000000000000000000000;;		Refable
0000000000000000000000000000000000000000;;		CommonValidations
0000000000000000000000000000000000000000;;		SimpleSchema
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewItems creates a new instance of items
0000000000000000000000000000000000000000;;	func NewItems() *Items {
0000000000000000000000000000000000000000;;		return &Items{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Typed a fluent builder method for the type of item
0000000000000000000000000000000000000000;;	func (i *Items) Typed(tpe, format string) *Items {
0000000000000000000000000000000000000000;;		i.Type = tpe
0000000000000000000000000000000000000000;;		i.Format = format
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CollectionOf a fluent builder method for an array item
0000000000000000000000000000000000000000;;	func (i *Items) CollectionOf(items *Items, format string) *Items {
0000000000000000000000000000000000000000;;		i.Type = "array"
0000000000000000000000000000000000000000;;		i.Items = items
0000000000000000000000000000000000000000;;		i.CollectionFormat = format
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDefault sets the default value on this item
0000000000000000000000000000000000000000;;	func (i *Items) WithDefault(defaultValue interface{}) *Items {
0000000000000000000000000000000000000000;;		i.Default = defaultValue
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxLength sets a max length value
0000000000000000000000000000000000000000;;	func (i *Items) WithMaxLength(max int64) *Items {
0000000000000000000000000000000000000000;;		i.MaxLength = &max
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinLength sets a min length value
0000000000000000000000000000000000000000;;	func (i *Items) WithMinLength(min int64) *Items {
0000000000000000000000000000000000000000;;		i.MinLength = &min
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPattern sets a pattern value
0000000000000000000000000000000000000000;;	func (i *Items) WithPattern(pattern string) *Items {
0000000000000000000000000000000000000000;;		i.Pattern = pattern
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMultipleOf sets a multiple of value
0000000000000000000000000000000000000000;;	func (i *Items) WithMultipleOf(number float64) *Items {
0000000000000000000000000000000000000000;;		i.MultipleOf = &number
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaximum sets a maximum number value
0000000000000000000000000000000000000000;;	func (i *Items) WithMaximum(max float64, exclusive bool) *Items {
0000000000000000000000000000000000000000;;		i.Maximum = &max
0000000000000000000000000000000000000000;;		i.ExclusiveMaximum = exclusive
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinimum sets a minimum number value
0000000000000000000000000000000000000000;;	func (i *Items) WithMinimum(min float64, exclusive bool) *Items {
0000000000000000000000000000000000000000;;		i.Minimum = &min
0000000000000000000000000000000000000000;;		i.ExclusiveMinimum = exclusive
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithEnum sets a the enum values (replace)
0000000000000000000000000000000000000000;;	func (i *Items) WithEnum(values ...interface{}) *Items {
0000000000000000000000000000000000000000;;		i.Enum = append([]interface{}{}, values...)
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxItems sets the max items
0000000000000000000000000000000000000000;;	func (i *Items) WithMaxItems(size int64) *Items {
0000000000000000000000000000000000000000;;		i.MaxItems = &size
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinItems sets the min items
0000000000000000000000000000000000000000;;	func (i *Items) WithMinItems(size int64) *Items {
0000000000000000000000000000000000000000;;		i.MinItems = &size
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UniqueValues dictates that this array can only have unique items
0000000000000000000000000000000000000000;;	func (i *Items) UniqueValues() *Items {
0000000000000000000000000000000000000000;;		i.UniqueItems = true
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowDuplicates this array can have duplicates
0000000000000000000000000000000000000000;;	func (i *Items) AllowDuplicates() *Items {
0000000000000000000000000000000000000000;;		i.UniqueItems = false
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON hydrates this items instance with the data from JSON
0000000000000000000000000000000000000000;;	func (i *Items) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var validations CommonValidations
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &validations); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var ref Refable
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &ref); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var simpleSchema SimpleSchema
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &simpleSchema); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		i.Refable = ref
0000000000000000000000000000000000000000;;		i.CommonValidations = validations
0000000000000000000000000000000000000000;;		i.SimpleSchema = simpleSchema
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON converts this items object to JSON
0000000000000000000000000000000000000000;;	func (i Items) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b1, err := json.Marshal(i.CommonValidations)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b2, err := json.Marshal(i.SimpleSchema)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b3, err := json.Marshal(i.Refable)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return swag.ConcatJSON(b3, b1, b2), nil
0000000000000000000000000000000000000000;;	}
