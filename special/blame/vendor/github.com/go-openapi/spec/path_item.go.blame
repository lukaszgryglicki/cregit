0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/jsonpointer"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// pathItemProps the path item specific properties
0000000000000000000000000000000000000000;;	type PathItemProps struct {
0000000000000000000000000000000000000000;;		Get        *Operation  `json:"get,omitempty"`
0000000000000000000000000000000000000000;;		Put        *Operation  `json:"put,omitempty"`
0000000000000000000000000000000000000000;;		Post       *Operation  `json:"post,omitempty"`
0000000000000000000000000000000000000000;;		Delete     *Operation  `json:"delete,omitempty"`
0000000000000000000000000000000000000000;;		Options    *Operation  `json:"options,omitempty"`
0000000000000000000000000000000000000000;;		Head       *Operation  `json:"head,omitempty"`
0000000000000000000000000000000000000000;;		Patch      *Operation  `json:"patch,omitempty"`
0000000000000000000000000000000000000000;;		Parameters []Parameter `json:"parameters,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathItem describes the operations available on a single path.
0000000000000000000000000000000000000000;;	// A Path Item may be empty, due to [ACL constraints](http://goo.gl/8us55a#securityFiltering).
0000000000000000000000000000000000000000;;	// The path itself is still exposed to the documentation viewer but they will
0000000000000000000000000000000000000000;;	// not know which operations and parameters are available.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#pathItemObject
0000000000000000000000000000000000000000;;	type PathItem struct {
0000000000000000000000000000000000000000;;		Refable
0000000000000000000000000000000000000000;;		VendorExtensible
0000000000000000000000000000000000000000;;		PathItemProps
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONLookup look up a value by the json property name
0000000000000000000000000000000000000000;;	func (p PathItem) JSONLookup(token string) (interface{}, error) {
0000000000000000000000000000000000000000;;		if ex, ok := p.Extensions[token]; ok {
0000000000000000000000000000000000000000;;			return &ex, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if token == "$ref" {
0000000000000000000000000000000000000000;;			return &p.Ref, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, _, err := jsonpointer.GetForToken(p.PathItemProps, token)
0000000000000000000000000000000000000000;;		return r, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON hydrates this items instance with the data from JSON
0000000000000000000000000000000000000000;;	func (p *PathItem) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &p.Refable); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &p.VendorExtensible); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &p.PathItemProps); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON converts this items object to JSON
0000000000000000000000000000000000000000;;	func (p PathItem) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b3, err := json.Marshal(p.Refable)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b4, err := json.Marshal(p.VendorExtensible)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b5, err := json.Marshal(p.PathItemProps)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		concated := swag.ConcatJSON(b3, b4, b5)
0000000000000000000000000000000000000000;;		return concated, nil
0000000000000000000000000000000000000000;;	}
