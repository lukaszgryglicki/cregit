0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HeaderProps struct {
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header describes a header for a response of the API
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#headerObject
0000000000000000000000000000000000000000;;	type Header struct {
0000000000000000000000000000000000000000;;		CommonValidations
0000000000000000000000000000000000000000;;		SimpleSchema
0000000000000000000000000000000000000000;;		HeaderProps
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResponseHeader creates a new header instance for use in a response
0000000000000000000000000000000000000000;;	func ResponseHeader() *Header {
0000000000000000000000000000000000000000;;		return new(Header)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDescription sets the description on this response, allows for chaining
0000000000000000000000000000000000000000;;	func (h *Header) WithDescription(description string) *Header {
0000000000000000000000000000000000000000;;		h.Description = description
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Typed a fluent builder method for the type of parameter
0000000000000000000000000000000000000000;;	func (h *Header) Typed(tpe, format string) *Header {
0000000000000000000000000000000000000000;;		h.Type = tpe
0000000000000000000000000000000000000000;;		h.Format = format
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CollectionOf a fluent builder method for an array item
0000000000000000000000000000000000000000;;	func (h *Header) CollectionOf(items *Items, format string) *Header {
0000000000000000000000000000000000000000;;		h.Type = "array"
0000000000000000000000000000000000000000;;		h.Items = items
0000000000000000000000000000000000000000;;		h.CollectionFormat = format
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDefault sets the default value on this item
0000000000000000000000000000000000000000;;	func (h *Header) WithDefault(defaultValue interface{}) *Header {
0000000000000000000000000000000000000000;;		h.Default = defaultValue
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxLength sets a max length value
0000000000000000000000000000000000000000;;	func (h *Header) WithMaxLength(max int64) *Header {
0000000000000000000000000000000000000000;;		h.MaxLength = &max
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinLength sets a min length value
0000000000000000000000000000000000000000;;	func (h *Header) WithMinLength(min int64) *Header {
0000000000000000000000000000000000000000;;		h.MinLength = &min
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPattern sets a pattern value
0000000000000000000000000000000000000000;;	func (h *Header) WithPattern(pattern string) *Header {
0000000000000000000000000000000000000000;;		h.Pattern = pattern
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMultipleOf sets a multiple of value
0000000000000000000000000000000000000000;;	func (h *Header) WithMultipleOf(number float64) *Header {
0000000000000000000000000000000000000000;;		h.MultipleOf = &number
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaximum sets a maximum number value
0000000000000000000000000000000000000000;;	func (h *Header) WithMaximum(max float64, exclusive bool) *Header {
0000000000000000000000000000000000000000;;		h.Maximum = &max
0000000000000000000000000000000000000000;;		h.ExclusiveMaximum = exclusive
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinimum sets a minimum number value
0000000000000000000000000000000000000000;;	func (h *Header) WithMinimum(min float64, exclusive bool) *Header {
0000000000000000000000000000000000000000;;		h.Minimum = &min
0000000000000000000000000000000000000000;;		h.ExclusiveMinimum = exclusive
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithEnum sets a the enum values (replace)
0000000000000000000000000000000000000000;;	func (h *Header) WithEnum(values ...interface{}) *Header {
0000000000000000000000000000000000000000;;		h.Enum = append([]interface{}{}, values...)
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxItems sets the max items
0000000000000000000000000000000000000000;;	func (h *Header) WithMaxItems(size int64) *Header {
0000000000000000000000000000000000000000;;		h.MaxItems = &size
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinItems sets the min items
0000000000000000000000000000000000000000;;	func (h *Header) WithMinItems(size int64) *Header {
0000000000000000000000000000000000000000;;		h.MinItems = &size
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UniqueValues dictates that this array can only have unique items
0000000000000000000000000000000000000000;;	func (h *Header) UniqueValues() *Header {
0000000000000000000000000000000000000000;;		h.UniqueItems = true
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowDuplicates this array can have duplicates
0000000000000000000000000000000000000000;;	func (h *Header) AllowDuplicates() *Header {
0000000000000000000000000000000000000000;;		h.UniqueItems = false
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON marshal this to JSON
0000000000000000000000000000000000000000;;	func (h Header) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b1, err := json.Marshal(h.CommonValidations)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b2, err := json.Marshal(h.SimpleSchema)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b3, err := json.Marshal(h.HeaderProps)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return swag.ConcatJSON(b1, b2, b3), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON marshal this from JSON
0000000000000000000000000000000000000000;;	func (h *Header) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &h.CommonValidations); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &h.SimpleSchema); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &h.HeaderProps); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
