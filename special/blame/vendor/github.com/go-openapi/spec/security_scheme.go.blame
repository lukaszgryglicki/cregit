0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/jsonpointer"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/swag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		basic       = "basic"
0000000000000000000000000000000000000000;;		apiKey      = "apiKey"
0000000000000000000000000000000000000000;;		oauth2      = "oauth2"
0000000000000000000000000000000000000000;;		implicit    = "implicit"
0000000000000000000000000000000000000000;;		password    = "password"
0000000000000000000000000000000000000000;;		application = "application"
0000000000000000000000000000000000000000;;		accessCode  = "accessCode"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BasicAuth creates a basic auth security scheme
0000000000000000000000000000000000000000;;	func BasicAuth() *SecurityScheme {
0000000000000000000000000000000000000000;;		return &SecurityScheme{SecuritySchemeProps: SecuritySchemeProps{Type: basic}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIKeyAuth creates an api key auth security scheme
0000000000000000000000000000000000000000;;	func APIKeyAuth(fieldName, valueSource string) *SecurityScheme {
0000000000000000000000000000000000000000;;		return &SecurityScheme{SecuritySchemeProps: SecuritySchemeProps{Type: apiKey, Name: fieldName, In: valueSource}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2Implicit creates an implicit flow oauth2 security scheme
0000000000000000000000000000000000000000;;	func OAuth2Implicit(authorizationURL string) *SecurityScheme {
0000000000000000000000000000000000000000;;		return &SecurityScheme{SecuritySchemeProps: SecuritySchemeProps{
0000000000000000000000000000000000000000;;			Type:             oauth2,
0000000000000000000000000000000000000000;;			Flow:             implicit,
0000000000000000000000000000000000000000;;			AuthorizationURL: authorizationURL,
0000000000000000000000000000000000000000;;		}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2Password creates a password flow oauth2 security scheme
0000000000000000000000000000000000000000;;	func OAuth2Password(tokenURL string) *SecurityScheme {
0000000000000000000000000000000000000000;;		return &SecurityScheme{SecuritySchemeProps: SecuritySchemeProps{
0000000000000000000000000000000000000000;;			Type:     oauth2,
0000000000000000000000000000000000000000;;			Flow:     password,
0000000000000000000000000000000000000000;;			TokenURL: tokenURL,
0000000000000000000000000000000000000000;;		}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2Application creates an application flow oauth2 security scheme
0000000000000000000000000000000000000000;;	func OAuth2Application(tokenURL string) *SecurityScheme {
0000000000000000000000000000000000000000;;		return &SecurityScheme{SecuritySchemeProps: SecuritySchemeProps{
0000000000000000000000000000000000000000;;			Type:     oauth2,
0000000000000000000000000000000000000000;;			Flow:     application,
0000000000000000000000000000000000000000;;			TokenURL: tokenURL,
0000000000000000000000000000000000000000;;		}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2AccessToken creates an access token flow oauth2 security scheme
0000000000000000000000000000000000000000;;	func OAuth2AccessToken(authorizationURL, tokenURL string) *SecurityScheme {
0000000000000000000000000000000000000000;;		return &SecurityScheme{SecuritySchemeProps: SecuritySchemeProps{
0000000000000000000000000000000000000000;;			Type:             oauth2,
0000000000000000000000000000000000000000;;			Flow:             accessCode,
0000000000000000000000000000000000000000;;			AuthorizationURL: authorizationURL,
0000000000000000000000000000000000000000;;			TokenURL:         tokenURL,
0000000000000000000000000000000000000000;;		}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecuritySchemeProps struct {
0000000000000000000000000000000000000000;;		Description      string            `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Type             string            `json:"type"`
0000000000000000000000000000000000000000;;		Name             string            `json:"name,omitempty"`             // api key
0000000000000000000000000000000000000000;;		In               string            `json:"in,omitempty"`               // api key
0000000000000000000000000000000000000000;;		Flow             string            `json:"flow,omitempty"`             // oauth2
0000000000000000000000000000000000000000;;		AuthorizationURL string            `json:"authorizationUrl,omitempty"` // oauth2
0000000000000000000000000000000000000000;;		TokenURL         string            `json:"tokenUrl,omitempty"`         // oauth2
0000000000000000000000000000000000000000;;		Scopes           map[string]string `json:"scopes,omitempty"`           // oauth2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddScope adds a scope to this security scheme
0000000000000000000000000000000000000000;;	func (s *SecuritySchemeProps) AddScope(scope, description string) {
0000000000000000000000000000000000000000;;		if s.Scopes == nil {
0000000000000000000000000000000000000000;;			s.Scopes = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Scopes[scope] = description
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityScheme allows the definition of a security scheme that can be used by the operations.
0000000000000000000000000000000000000000;;	// Supported schemes are basic authentication, an API key (either as a header or as a query parameter)
0000000000000000000000000000000000000000;;	// and OAuth2's common flows (implicit, password, application and access code).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#securitySchemeObject
0000000000000000000000000000000000000000;;	type SecurityScheme struct {
0000000000000000000000000000000000000000;;		VendorExtensible
0000000000000000000000000000000000000000;;		SecuritySchemeProps
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONLookup implements an interface to customize json pointer lookup
0000000000000000000000000000000000000000;;	func (s SecurityScheme) JSONLookup(token string) (interface{}, error) {
0000000000000000000000000000000000000000;;		if ex, ok := s.Extensions[token]; ok {
0000000000000000000000000000000000000000;;			return &ex, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, _, err := jsonpointer.GetForToken(s.SecuritySchemeProps, token)
0000000000000000000000000000000000000000;;		return r, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON marshal this to JSON
0000000000000000000000000000000000000000;;	func (s SecurityScheme) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		b1, err := json.Marshal(s.SecuritySchemeProps)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b2, err := json.Marshal(s.VendorExtensible)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return swag.ConcatJSON(b1, b2), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON marshal this from JSON
0000000000000000000000000000000000000000;;	func (s *SecurityScheme) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s.SecuritySchemeProps); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s.VendorExtensible); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
