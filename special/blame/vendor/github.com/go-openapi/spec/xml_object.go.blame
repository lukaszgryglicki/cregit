0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package spec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XMLObject a metadata object that allows for more fine-tuned XML model definitions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information: http://goo.gl/8us55a#xmlObject
0000000000000000000000000000000000000000;;	type XMLObject struct {
0000000000000000000000000000000000000000;;		Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace,omitempty"`
0000000000000000000000000000000000000000;;		Prefix    string `json:"prefix,omitempty"`
0000000000000000000000000000000000000000;;		Attribute bool   `json:"attribute,omitempty"`
0000000000000000000000000000000000000000;;		Wrapped   bool   `json:"wrapped,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithName sets the xml name for the object
0000000000000000000000000000000000000000;;	func (x *XMLObject) WithName(name string) *XMLObject {
0000000000000000000000000000000000000000;;		x.Name = name
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithNamespace sets the xml namespace for the object
0000000000000000000000000000000000000000;;	func (x *XMLObject) WithNamespace(namespace string) *XMLObject {
0000000000000000000000000000000000000000;;		x.Namespace = namespace
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPrefix sets the xml prefix for the object
0000000000000000000000000000000000000000;;	func (x *XMLObject) WithPrefix(prefix string) *XMLObject {
0000000000000000000000000000000000000000;;		x.Prefix = prefix
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsAttribute flags this object as xml attribute
0000000000000000000000000000000000000000;;	func (x *XMLObject) AsAttribute() *XMLObject {
0000000000000000000000000000000000000000;;		x.Attribute = true
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsElement flags this object as an xml node
0000000000000000000000000000000000000000;;	func (x *XMLObject) AsElement() *XMLObject {
0000000000000000000000000000000000000000;;		x.Attribute = false
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsWrapped flags this object as wrapped, this is mostly useful for array types
0000000000000000000000000000000000000000;;	func (x *XMLObject) AsWrapped() *XMLObject {
0000000000000000000000000000000000000000;;		x.Wrapped = true
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsUnwrapped flags this object as an xml node
0000000000000000000000000000000000000000;;	func (x *XMLObject) AsUnwrapped() *XMLObject {
0000000000000000000000000000000000000000;;		x.Wrapped = false
0000000000000000000000000000000000000000;;		return x
0000000000000000000000000000000000000000;;	}
