0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package errors
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validation represents a failure of a precondition
0000000000000000000000000000000000000000;;	type Validation struct {
0000000000000000000000000000000000000000;;		code    int32
0000000000000000000000000000000000000000;;		Name    string
0000000000000000000000000000000000000000;;		In      string
0000000000000000000000000000000000000000;;		Value   interface{}
0000000000000000000000000000000000000000;;		message string
0000000000000000000000000000000000000000;;		Values  []interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Validation) Error() string {
0000000000000000000000000000000000000000;;		return e.message
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Code the error code
0000000000000000000000000000000000000000;;	func (e *Validation) Code() int32 {
0000000000000000000000000000000000000000;;		return e.code
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		contentTypeFail    = `unsupported media type %q, only %v are allowed`
0000000000000000000000000000000000000000;;		responseFormatFail = `unsupported media type requested, only %v are available`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InvalidContentType error for an invalid content type
0000000000000000000000000000000000000000;;	func InvalidContentType(value string, allowed []string) *Validation {
0000000000000000000000000000000000000000;;		var values []interface{}
0000000000000000000000000000000000000000;;		for _, v := range allowed {
0000000000000000000000000000000000000000;;			values = append(values, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &Validation{
0000000000000000000000000000000000000000;;			code:    http.StatusUnsupportedMediaType,
0000000000000000000000000000000000000000;;			Name:    "Content-Type",
0000000000000000000000000000000000000000;;			In:      "header",
0000000000000000000000000000000000000000;;			Value:   value,
0000000000000000000000000000000000000000;;			Values:  values,
0000000000000000000000000000000000000000;;			message: fmt.Sprintf(contentTypeFail, value, allowed),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InvalidResponseFormat error for an unacceptable response format request
0000000000000000000000000000000000000000;;	func InvalidResponseFormat(value string, allowed []string) *Validation {
0000000000000000000000000000000000000000;;		var values []interface{}
0000000000000000000000000000000000000000;;		for _, v := range allowed {
0000000000000000000000000000000000000000;;			values = append(values, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &Validation{
0000000000000000000000000000000000000000;;			code:    http.StatusNotAcceptable,
0000000000000000000000000000000000000000;;			Name:    "Accept",
0000000000000000000000000000000000000000;;			In:      "header",
0000000000000000000000000000000000000000;;			Value:   value,
0000000000000000000000000000000000000000;;			Values:  values,
0000000000000000000000000000000000000000;;			message: fmt.Sprintf(responseFormatFail, allowed),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
