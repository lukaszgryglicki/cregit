0000000000000000000000000000000000000000;;	// Copyright 2015 go-swagger maintainers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package errors
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIVerificationFailed is an error that contains all the missing info for a mismatched section
0000000000000000000000000000000000000000;;	// between the api registrations and the api spec
0000000000000000000000000000000000000000;;	type APIVerificationFailed struct {
0000000000000000000000000000000000000000;;		Section              string
0000000000000000000000000000000000000000;;		MissingSpecification []string
0000000000000000000000000000000000000000;;		MissingRegistration  []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (v *APIVerificationFailed) Error() string {
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hasRegMissing := len(v.MissingRegistration) > 0
0000000000000000000000000000000000000000;;		hasSpecMissing := len(v.MissingSpecification) > 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if hasRegMissing {
0000000000000000000000000000000000000000;;			buf.WriteString(fmt.Sprintf("missing [%s] %s registrations", strings.Join(v.MissingRegistration, ", "), v.Section))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if hasRegMissing && hasSpecMissing {
0000000000000000000000000000000000000000;;			buf.WriteString("\n")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if hasSpecMissing {
0000000000000000000000000000000000000000;;			buf.WriteString(fmt.Sprintf("missing from spec file [%s] %s", strings.Join(v.MissingSpecification, ", "), v.Section))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
