0000000000000000000000000000000000000000;;	// Package log implements a wrapper around the Go standard library's
0000000000000000000000000000000000000000;;	// logging package. Clients should set the current log level; only
0000000000000000000000000000000000000000;;	// messages below that level will actually be logged. For example, if
0000000000000000000000000000000000000000;;	// Level is set to LevelWarning, only log messages at the Warning,
0000000000000000000000000000000000000000;;	// Error, and Critical levels will be logged.
0000000000000000000000000000000000000000;;	package log
4719f97477417ada91b80cafeecea0dd05c6fdd6;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The following constants represent logging levels in increasing levels of seriousness.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// LevelDebug is the log level for Debug statements.
0000000000000000000000000000000000000000;;		LevelDebug = iota
0000000000000000000000000000000000000000;;		// LevelInfo is the log level for Info statements.
0000000000000000000000000000000000000000;;		LevelInfo
0000000000000000000000000000000000000000;;		// LevelWarning is the log level for Warning statements.
0000000000000000000000000000000000000000;;		LevelWarning
0000000000000000000000000000000000000000;;		// LevelError is the log level for Error statements.
0000000000000000000000000000000000000000;;		LevelError
0000000000000000000000000000000000000000;;		// LevelCritical is the log level for Critical statements.
0000000000000000000000000000000000000000;;		LevelCritical
0000000000000000000000000000000000000000;;		// LevelFatal is the log level for Fatal statements.
0000000000000000000000000000000000000000;;		LevelFatal
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var levelPrefix = [...]string{
0000000000000000000000000000000000000000;;		LevelDebug:    "DEBUG",
0000000000000000000000000000000000000000;;		LevelInfo:     "INFO",
0000000000000000000000000000000000000000;;		LevelWarning:  "WARNING",
0000000000000000000000000000000000000000;;		LevelError:    "ERROR",
0000000000000000000000000000000000000000;;		LevelCritical: "CRITICAL",
0000000000000000000000000000000000000000;;		LevelFatal:    "FATAL",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Level stores the current logging level.
0000000000000000000000000000000000000000;;	var Level = LevelInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SyslogWriter specifies the necessary methods for an alternate output
0000000000000000000000000000000000000000;;	// destination passed in via SetLogger.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// SyslogWriter is satisfied by *syslog.Writer.
0000000000000000000000000000000000000000;;	type SyslogWriter interface {
0000000000000000000000000000000000000000;;		Debug(string) error
0000000000000000000000000000000000000000;;		Info(string) error
0000000000000000000000000000000000000000;;		Warning(string) error
0000000000000000000000000000000000000000;;		Err(string) error
0000000000000000000000000000000000000000;;		Crit(string) error
0000000000000000000000000000000000000000;;		Emerg(string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// syslogWriter stores the SetLogger() parameter.
0000000000000000000000000000000000000000;;	var syslogWriter SyslogWriter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLogger sets the output used for output by this package.
0000000000000000000000000000000000000000;;	// A *syslog.Writer is a good choice for the logger parameter.
0000000000000000000000000000000000000000;;	// Call with a nil parameter to revert to default behavior.
0000000000000000000000000000000000000000;;	func SetLogger(logger SyslogWriter) {
0000000000000000000000000000000000000000;;		syslogWriter = logger
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// Only define loglevel flag once.
0000000000000000000000000000000000000000;;		if flag.Lookup("loglevel") == nil {
0000000000000000000000000000000000000000;;			flag.IntVar(&Level, "loglevel", LevelInfo, "Log level (0 = DEBUG, 5 = FATAL)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func print(l int, msg string) {
0000000000000000000000000000000000000000;;		if l >= Level {
0000000000000000000000000000000000000000;;			if syslogWriter != nil {
0000000000000000000000000000000000000000;;				var err error
0000000000000000000000000000000000000000;;				switch l {
0000000000000000000000000000000000000000;;				case LevelDebug:
0000000000000000000000000000000000000000;;					err = syslogWriter.Debug(msg)
0000000000000000000000000000000000000000;;				case LevelInfo:
0000000000000000000000000000000000000000;;					err = syslogWriter.Info(msg)
0000000000000000000000000000000000000000;;				case LevelWarning:
0000000000000000000000000000000000000000;;					err = syslogWriter.Warning(msg)
0000000000000000000000000000000000000000;;				case LevelError:
0000000000000000000000000000000000000000;;					err = syslogWriter.Err(msg)
0000000000000000000000000000000000000000;;				case LevelCritical:
0000000000000000000000000000000000000000;;					err = syslogWriter.Crit(msg)
0000000000000000000000000000000000000000;;				case LevelFatal:
0000000000000000000000000000000000000000;;					err = syslogWriter.Emerg(msg)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					log.Printf("Unable to write syslog: %v for msg: %s\n", err, msg)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				log.Printf("[%s] %s", levelPrefix[l], msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func outputf(l int, format string, v []interface{}) {
0000000000000000000000000000000000000000;;		print(l, fmt.Sprintf(format, v...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func output(l int, v []interface{}) {
0000000000000000000000000000000000000000;;		print(l, fmt.Sprint(v...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fatalf logs a formatted message at the "fatal" level and then exits. The
0000000000000000000000000000000000000000;;	// arguments are handled in the same manner as fmt.Printf.
0000000000000000000000000000000000000000;;	func Fatalf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		outputf(LevelFatal, format, v)
0000000000000000000000000000000000000000;;		os.Exit(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fatal logs its arguments at the "fatal" level and then exits.
0000000000000000000000000000000000000000;;	func Fatal(v ...interface{}) {
0000000000000000000000000000000000000000;;		output(LevelFatal, v)
0000000000000000000000000000000000000000;;		os.Exit(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Criticalf logs a formatted message at the "critical" level. The
0000000000000000000000000000000000000000;;	// arguments are handled in the same manner as fmt.Printf.
0000000000000000000000000000000000000000;;	func Criticalf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		outputf(LevelCritical, format, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Critical logs its arguments at the "critical" level.
0000000000000000000000000000000000000000;;	func Critical(v ...interface{}) {
0000000000000000000000000000000000000000;;		output(LevelCritical, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Errorf logs a formatted message at the "error" level. The arguments
0000000000000000000000000000000000000000;;	// are handled in the same manner as fmt.Printf.
0000000000000000000000000000000000000000;;	func Errorf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		outputf(LevelError, format, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error logs its arguments at the "error" level.
0000000000000000000000000000000000000000;;	func Error(v ...interface{}) {
0000000000000000000000000000000000000000;;		output(LevelError, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Warningf logs a formatted message at the "warning" level. The
0000000000000000000000000000000000000000;;	// arguments are handled in the same manner as fmt.Printf.
0000000000000000000000000000000000000000;;	func Warningf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		outputf(LevelWarning, format, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Warning logs its arguments at the "warning" level.
0000000000000000000000000000000000000000;;	func Warning(v ...interface{}) {
0000000000000000000000000000000000000000;;		output(LevelWarning, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Infof logs a formatted message at the "info" level. The arguments
0000000000000000000000000000000000000000;;	// are handled in the same manner as fmt.Printf.
0000000000000000000000000000000000000000;;	func Infof(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		outputf(LevelInfo, format, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Info logs its arguments at the "info" level.
0000000000000000000000000000000000000000;;	func Info(v ...interface{}) {
0000000000000000000000000000000000000000;;		output(LevelInfo, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Debugf logs a formatted message at the "debug" level. The arguments
0000000000000000000000000000000000000000;;	// are handled in the same manner as fmt.Printf.
0000000000000000000000000000000000000000;;	func Debugf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		outputf(LevelDebug, format, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Debug logs its arguments at the "debug" level.
0000000000000000000000000000000000000000;;	func Debug(v ...interface{}) {
0000000000000000000000000000000000000000;;		output(LevelDebug, v)
0000000000000000000000000000000000000000;;	}
