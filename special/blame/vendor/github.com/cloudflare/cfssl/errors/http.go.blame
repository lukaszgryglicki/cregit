0000000000000000000000000000000000000000;;	package errors
4719f97477417ada91b80cafeecea0dd05c6fdd6;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPError is an augmented error with a HTTP status code.
0000000000000000000000000000000000000000;;	type HTTPError struct {
0000000000000000000000000000000000000000;;		StatusCode int
0000000000000000000000000000000000000000;;		error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error implements the error interface.
0000000000000000000000000000000000000000;;	func (e *HTTPError) Error() string {
0000000000000000000000000000000000000000;;		return e.error.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMethodNotAllowed returns an appropriate error in the case that
0000000000000000000000000000000000000000;;	// an HTTP client uses an invalid method (i.e. a GET in place of a POST)
0000000000000000000000000000000000000000;;	// on an API endpoint.
0000000000000000000000000000000000000000;;	func NewMethodNotAllowed(method string) *HTTPError {
0000000000000000000000000000000000000000;;		return &HTTPError{http.StatusMethodNotAllowed, errors.New(`Method is not allowed:"` + method + `"`)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBadRequest creates a HttpError with the given error and error code 400.
0000000000000000000000000000000000000000;;	func NewBadRequest(err error) *HTTPError {
0000000000000000000000000000000000000000;;		return &HTTPError{http.StatusBadRequest, err}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBadRequestString returns a HttpError with the supplied message
0000000000000000000000000000000000000000;;	// and error code 400.
0000000000000000000000000000000000000000;;	func NewBadRequestString(s string) *HTTPError {
0000000000000000000000000000000000000000;;		return NewBadRequest(errors.New(s))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBadRequestMissingParameter returns a 400 HttpError as a required
0000000000000000000000000000000000000000;;	// parameter is missing in the HTTP request.
0000000000000000000000000000000000000000;;	func NewBadRequestMissingParameter(s string) *HTTPError {
0000000000000000000000000000000000000000;;		return NewBadRequestString(`Missing parameter "` + s + `"`)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBadRequestUnwantedParameter returns a 400 HttpError as a unnecessary
0000000000000000000000000000000000000000;;	// parameter is present in the HTTP request.
0000000000000000000000000000000000000000;;	func NewBadRequestUnwantedParameter(s string) *HTTPError {
0000000000000000000000000000000000000000;;		return NewBadRequestString(`Unwanted parameter "` + s + `"`)
0000000000000000000000000000000000000000;;	}
