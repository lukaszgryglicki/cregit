0000000000000000000000000000000000000000;;	# certdb usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Using a database enables additional functionality for existing commands when a
0000000000000000000000000000000000000000;;	db config is provided:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 - `sign` and `gencert` add a certificate to the certdb after signing it
0000000000000000000000000000000000000000;;	 - `serve` enables database functionality for the sign and revoke endpoints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A database is required for the following:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 - `revoke` marks certificates revoked in the database with an optional reason
0000000000000000000000000000000000000000;;	 - `ocsprefresh` refreshes the table of cached OCSP responses
0000000000000000000000000000000000000000;;	 - `ocspdump` outputs cached OCSP responses in a concatenated base64-encoded format
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Setup/Migration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This directory stores [goose](https://bitbucket.org/liamstask/goose/) db migration scripts for various DB backends.
0000000000000000000000000000000000000000;;	Currently supported:
0000000000000000000000000000000000000000;;	 - SQLite in sqlite
0000000000000000000000000000000000000000;;	 - PostgreSQL in pg
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Get goose
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get https://bitbucket.org/liamstask/goose/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Use goose to start and terminate a SQLite DB
0000000000000000000000000000000000000000;;	To start a SQLite DB using goose:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    goose -path $GOPATH/src/github.com/cloudflare/cfssl/certdb/sqlite up'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To tear down a SQLite DB using goose
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    goose -path $GOPATH/src/github.com/cloudflare/cfssl/certdb/sqlite down
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Use goose to start and terminate a PostgreSQL DB
0000000000000000000000000000000000000000;;	To start a PostgreSQL using goose:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    goose -path $GOPATH/src/github.com/cloudflare/cfssl/certdb/pg up
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To tear down a PostgreSQL DB using goose
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    goose -path $GOPATH/src/github.com/cloudflare/cfssl/certdb/pg down
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note: the administration of PostgreSQL DB is not included. We assume
0000000000000000000000000000000000000000;;	the databases being connected to are already created and access control
0000000000000000000000000000000000000000;;	are properly handled.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## CFSSL Configuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Several cfssl commands take a -db-config flag. Create a file with a
0000000000000000000000000000000000000000;;	JSON dictionary:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    {"driver":"sqlite3","data_source":"certs.db"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	or
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    {"driver":"postgres","data_source":"postgres://user:password@host/db"}
0000000000000000000000000000000000000000;;	
