0000000000000000000000000000000000000000;;	// Copyright 2016 CNI authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
b470e88e0f5adf62765f30d82b8bad5206a3b19d;;	
0000000000000000000000000000000000000000;;	package invoke
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawExec struct {
0000000000000000000000000000000000000000;;		Stderr io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *RawExec) ExecPlugin(pluginPath string, stdinData []byte, environ []string) ([]byte, error) {
0000000000000000000000000000000000000000;;		stdout := &bytes.Buffer{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := exec.Cmd{
0000000000000000000000000000000000000000;;			Env:    environ,
0000000000000000000000000000000000000000;;			Path:   pluginPath,
0000000000000000000000000000000000000000;;			Args:   []string{pluginPath},
0000000000000000000000000000000000000000;;			Stdin:  bytes.NewBuffer(stdinData),
0000000000000000000000000000000000000000;;			Stdout: stdout,
0000000000000000000000000000000000000000;;			Stderr: e.Stderr,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := c.Run(); err != nil {
0000000000000000000000000000000000000000;;			return nil, pluginErr(err, stdout.Bytes())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return stdout.Bytes(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pluginErr(err error, output []byte) error {
0000000000000000000000000000000000000000;;		if _, ok := err.(*exec.ExitError); ok {
0000000000000000000000000000000000000000;;			emsg := types.Error{}
0000000000000000000000000000000000000000;;			if perr := json.Unmarshal(output, &emsg); perr != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("netplugin failed but error parsing its diagnostic message %q: %v", string(output), perr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			details := ""
0000000000000000000000000000000000000000;;			if emsg.Details != "" {
0000000000000000000000000000000000000000;;				details = fmt.Sprintf("; %v", emsg.Details)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return fmt.Errorf("%v%v", emsg.Msg, details)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
