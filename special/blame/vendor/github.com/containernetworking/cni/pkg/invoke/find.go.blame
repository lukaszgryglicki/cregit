0000000000000000000000000000000000000000;;	// Copyright 2015 CNI authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
350b88069342129c4911863376c2eff9fa6f8b94;Godeps/_workspace/src/github.com/appc/cni/pkg/invoke/find.go[Godeps/_workspace/src/github.com/appc/cni/pkg/invoke/find.go][vendor/github.com/containernetworking/cni/pkg/invoke/find.go];	
0000000000000000000000000000000000000000;;	package invoke
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindInPath returns the full path of the plugin by searching in the provided path
0000000000000000000000000000000000000000;;	func FindInPath(plugin string, paths []string) (string, error) {
0000000000000000000000000000000000000000;;		if plugin == "" {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("no plugin name provided")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(paths) == 0 {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("no paths provided")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, path := range paths {
0000000000000000000000000000000000000000;;			for _, fe := range ExecutableFileExtensions {
0000000000000000000000000000000000000000;;				fullpath := filepath.Join(path, plugin) + fe
0000000000000000000000000000000000000000;;				if fi, err := os.Stat(fullpath); err == nil && fi.Mode().IsRegular() {
0000000000000000000000000000000000000000;;					return fullpath, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("failed to find plugin %q in path %s", plugin, paths)
0000000000000000000000000000000000000000;;	}
