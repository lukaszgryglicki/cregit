0000000000000000000000000000000000000000;;	// Copyright 2016 CNI authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
350b88069342129c4911863376c2eff9fa6f8b94;Godeps/_workspace/src/github.com/appc/cni/pkg/types/args.go[Godeps/_workspace/src/github.com/appc/cni/pkg/types/args.go][vendor/github.com/containernetworking/cni/pkg/invoke/delegate.go];	
0000000000000000000000000000000000000000;;	package invoke
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DelegateAdd(delegatePlugin string, netconf []byte) (types.Result, error) {
0000000000000000000000000000000000000000;;		if os.Getenv("CNI_COMMAND") != "ADD" {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("CNI_COMMAND is not ADD")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		paths := filepath.SplitList(os.Getenv("CNI_PATH"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pluginPath, err := FindInPath(delegatePlugin, paths)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ExecPluginWithResult(pluginPath, netconf, ArgsFromEnv())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DelegateDel(delegatePlugin string, netconf []byte) error {
0000000000000000000000000000000000000000;;		if os.Getenv("CNI_COMMAND") != "DEL" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("CNI_COMMAND is not DEL")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		paths := filepath.SplitList(os.Getenv("CNI_PATH"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pluginPath, err := FindInPath(delegatePlugin, paths)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ExecPluginWithoutResult(pluginPath, netconf, ArgsFromEnv())
0000000000000000000000000000000000000000;;	}
