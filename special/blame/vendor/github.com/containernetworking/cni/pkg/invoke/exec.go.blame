0000000000000000000000000000000000000000;;	// Copyright 2015 CNI authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
350b88069342129c4911863376c2eff9fa6f8b94;Godeps/_workspace/src/github.com/appc/cni/pkg/invoke/exec.go[Godeps/_workspace/src/github.com/appc/cni/pkg/invoke/exec.go][vendor/github.com/containernetworking/cni/pkg/invoke/exec.go];	
0000000000000000000000000000000000000000;;	package invoke
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/pkg/version"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExecPluginWithResult(pluginPath string, netconf []byte, args CNIArgs) (types.Result, error) {
0000000000000000000000000000000000000000;;		return defaultPluginExec.WithResult(pluginPath, netconf, args)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExecPluginWithoutResult(pluginPath string, netconf []byte, args CNIArgs) error {
0000000000000000000000000000000000000000;;		return defaultPluginExec.WithoutResult(pluginPath, netconf, args)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetVersionInfo(pluginPath string) (version.PluginInfo, error) {
0000000000000000000000000000000000000000;;		return defaultPluginExec.GetVersionInfo(pluginPath)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var defaultPluginExec = &PluginExec{
0000000000000000000000000000000000000000;;		RawExec:        &RawExec{Stderr: os.Stderr},
0000000000000000000000000000000000000000;;		VersionDecoder: &version.PluginDecoder{},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PluginExec struct {
0000000000000000000000000000000000000000;;		RawExec interface {
0000000000000000000000000000000000000000;;			ExecPlugin(pluginPath string, stdinData []byte, environ []string) ([]byte, error)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		VersionDecoder interface {
0000000000000000000000000000000000000000;;			Decode(jsonBytes []byte) (version.PluginInfo, error)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *PluginExec) WithResult(pluginPath string, netconf []byte, args CNIArgs) (types.Result, error) {
0000000000000000000000000000000000000000;;		stdoutBytes, err := e.RawExec.ExecPlugin(pluginPath, netconf, args.AsEnv())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Plugin must return result in same version as specified in netconf
0000000000000000000000000000000000000000;;		versionDecoder := &version.ConfigDecoder{}
0000000000000000000000000000000000000000;;		confVersion, err := versionDecoder.Decode(netconf)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return version.NewResult(confVersion, stdoutBytes)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *PluginExec) WithoutResult(pluginPath string, netconf []byte, args CNIArgs) error {
0000000000000000000000000000000000000000;;		_, err := e.RawExec.ExecPlugin(pluginPath, netconf, args.AsEnv())
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetVersionInfo returns the version information available about the plugin.
0000000000000000000000000000000000000000;;	// For recent-enough plugins, it uses the information returned by the VERSION
0000000000000000000000000000000000000000;;	// command.  For older plugins which do not recognize that command, it reports
0000000000000000000000000000000000000000;;	// version 0.1.0
0000000000000000000000000000000000000000;;	func (e *PluginExec) GetVersionInfo(pluginPath string) (version.PluginInfo, error) {
0000000000000000000000000000000000000000;;		args := &Args{
0000000000000000000000000000000000000000;;			Command: "VERSION",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// set fake values required by plugins built against an older version of skel
0000000000000000000000000000000000000000;;			NetNS:  "dummy",
0000000000000000000000000000000000000000;;			IfName: "dummy",
0000000000000000000000000000000000000000;;			Path:   "dummy",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stdin := []byte(fmt.Sprintf(`{"cniVersion":%q}`, version.Current()))
0000000000000000000000000000000000000000;;		stdoutBytes, err := e.RawExec.ExecPlugin(pluginPath, stdin, args.AsEnv())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if err.Error() == "unknown CNI_COMMAND: VERSION" {
0000000000000000000000000000000000000000;;				return version.PluginSupports("0.1.0"), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return e.VersionDecoder.Decode(stdoutBytes)
0000000000000000000000000000000000000000;;	}
