0000000000000000000000000000000000000000;;	// Copyright 2016 CNI authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
b470e88e0f5adf62765f30d82b8bad5206a3b19d;;	
0000000000000000000000000000000000000000;;	package version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginInfo reports information about CNI versioning
0000000000000000000000000000000000000000;;	type PluginInfo interface {
0000000000000000000000000000000000000000;;		// SupportedVersions returns one or more CNI spec versions that the plugin
0000000000000000000000000000000000000000;;		// supports.  If input is provided in one of these versions, then the plugin
0000000000000000000000000000000000000000;;		// promises to use the same CNI version in its response
0000000000000000000000000000000000000000;;		SupportedVersions() []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Encode writes this CNI version information as JSON to the given Writer
0000000000000000000000000000000000000000;;		Encode(io.Writer) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pluginInfo struct {
0000000000000000000000000000000000000000;;		CNIVersion_        string   `json:"cniVersion"`
0000000000000000000000000000000000000000;;		SupportedVersions_ []string `json:"supportedVersions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// pluginInfo implements the PluginInfo interface
0000000000000000000000000000000000000000;;	var _ PluginInfo = &pluginInfo{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *pluginInfo) Encode(w io.Writer) error {
0000000000000000000000000000000000000000;;		return json.NewEncoder(w).Encode(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *pluginInfo) SupportedVersions() []string {
0000000000000000000000000000000000000000;;		return p.SupportedVersions_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginSupports returns a new PluginInfo that will report the given versions
0000000000000000000000000000000000000000;;	// as supported
0000000000000000000000000000000000000000;;	func PluginSupports(supportedVersions ...string) PluginInfo {
0000000000000000000000000000000000000000;;		if len(supportedVersions) < 1 {
0000000000000000000000000000000000000000;;			panic("programmer error: you must support at least one version")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pluginInfo{
0000000000000000000000000000000000000000;;			CNIVersion_:        Current(),
0000000000000000000000000000000000000000;;			SupportedVersions_: supportedVersions,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginDecoder can decode the response returned by a plugin's VERSION command
0000000000000000000000000000000000000000;;	type PluginDecoder struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*PluginDecoder) Decode(jsonBytes []byte) (PluginInfo, error) {
0000000000000000000000000000000000000000;;		var info pluginInfo
0000000000000000000000000000000000000000;;		err := json.Unmarshal(jsonBytes, &info)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("decoding version info: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if info.CNIVersion_ == "" {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("decoding version info: missing field cniVersion")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(info.SupportedVersions_) == 0 {
0000000000000000000000000000000000000000;;			if info.CNIVersion_ == "0.2.0" {
0000000000000000000000000000000000000000;;				return PluginSupports("0.1.0", "0.2.0"), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("decoding version info: missing field supportedVersions")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &info, nil
0000000000000000000000000000000000000000;;	}
