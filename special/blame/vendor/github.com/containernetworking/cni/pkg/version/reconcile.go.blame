0000000000000000000000000000000000000000;;	// Copyright 2016 CNI authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
b470e88e0f5adf62765f30d82b8bad5206a3b19d;;	
0000000000000000000000000000000000000000;;	package version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ErrorIncompatible struct {
0000000000000000000000000000000000000000;;		Config    string
0000000000000000000000000000000000000000;;		Supported []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *ErrorIncompatible) Details() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("config is %q, plugin supports %q", e.Config, e.Supported)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *ErrorIncompatible) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("incompatible CNI versions: %s", e.Details())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Reconciler struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Reconciler) Check(configVersion string, pluginInfo PluginInfo) *ErrorIncompatible {
0000000000000000000000000000000000000000;;		return r.CheckRaw(configVersion, pluginInfo.SupportedVersions())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*Reconciler) CheckRaw(configVersion string, supportedVersions []string) *ErrorIncompatible {
0000000000000000000000000000000000000000;;		for _, supportedVersion := range supportedVersions {
0000000000000000000000000000000000000000;;			if configVersion == supportedVersion {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &ErrorIncompatible{
0000000000000000000000000000000000000000;;			Config:    configVersion,
0000000000000000000000000000000000000000;;			Supported: supportedVersions,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
