0000000000000000000000000000000000000000;;	// Copyright 2016 CNI authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
b470e88e0f5adf62765f30d82b8bad5206a3b19d;;	
0000000000000000000000000000000000000000;;	package version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfigDecoder can decode the CNI version available in network config data
0000000000000000000000000000000000000000;;	type ConfigDecoder struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*ConfigDecoder) Decode(jsonBytes []byte) (string, error) {
0000000000000000000000000000000000000000;;		var conf struct {
0000000000000000000000000000000000000000;;			CNIVersion string `json:"cniVersion"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := json.Unmarshal(jsonBytes, &conf)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("decoding version from network config: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if conf.CNIVersion == "" {
0000000000000000000000000000000000000000;;			return "0.1.0", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return conf.CNIVersion, nil
0000000000000000000000000000000000000000;;	}
