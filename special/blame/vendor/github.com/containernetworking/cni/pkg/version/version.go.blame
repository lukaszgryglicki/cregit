0000000000000000000000000000000000000000;;	// Copyright 2016 CNI authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
b470e88e0f5adf62765f30d82b8bad5206a3b19d;;	
0000000000000000000000000000000000000000;;	package version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/pkg/types/020"
0000000000000000000000000000000000000000;;		"github.com/containernetworking/cni/pkg/types/current"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Current reports the version of the CNI spec implemented by this library
0000000000000000000000000000000000000000;;	func Current() string {
0000000000000000000000000000000000000000;;		return "0.3.1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Legacy PluginInfo describes a plugin that is backwards compatible with the
0000000000000000000000000000000000000000;;	// CNI spec version 0.1.0.  In particular, a runtime compiled against the 0.1.0
0000000000000000000000000000000000000000;;	// library ought to work correctly with a plugin that reports support for
0000000000000000000000000000000000000000;;	// Legacy versions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Any future CNI spec versions which meet this definition should be added to
0000000000000000000000000000000000000000;;	// this list.
0000000000000000000000000000000000000000;;	var Legacy = PluginSupports("0.1.0", "0.2.0")
0000000000000000000000000000000000000000;;	var All = PluginSupports("0.1.0", "0.2.0", "0.3.0", "0.3.1")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var resultFactories = []struct {
0000000000000000000000000000000000000000;;		supportedVersions []string
0000000000000000000000000000000000000000;;		newResult         types.ResultFactoryFunc
0000000000000000000000000000000000000000;;	}{
0000000000000000000000000000000000000000;;		{current.SupportedVersions, current.NewResult},
0000000000000000000000000000000000000000;;		{types020.SupportedVersions, types020.NewResult},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Finds a Result object matching the requested version (if any) and asks
0000000000000000000000000000000000000000;;	// that object to parse the plugin result, returning an error if parsing failed.
0000000000000000000000000000000000000000;;	func NewResult(version string, resultBytes []byte) (types.Result, error) {
0000000000000000000000000000000000000000;;		reconciler := &Reconciler{}
0000000000000000000000000000000000000000;;		for _, resultFactory := range resultFactories {
0000000000000000000000000000000000000000;;			err := reconciler.CheckRaw(version, resultFactory.supportedVersions)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				// Result supports this version
0000000000000000000000000000000000000000;;				return resultFactory.newResult(resultBytes)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("unsupported CNI result version %q", version)
0000000000000000000000000000000000000000;;	}
