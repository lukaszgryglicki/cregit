0000000000000000000000000000000000000000;;	# How to contribute #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	We'd love to accept your patches and contributions to this project.  There are
0000000000000000000000000000000000000000;;	a just a few small guidelines you need to follow.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contributor License Agreement ##
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Contributions to any Google project must be accompanied by a Contributor
0000000000000000000000000000000000000000;;	License Agreement.  This is not a copyright **assignment**, it simply gives
0000000000000000000000000000000000000000;;	Google permission to use and redistribute your contributions as part of the
0000000000000000000000000000000000000000;;	project.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  * If you are an individual writing original source code and you're sure you
0000000000000000000000000000000000000000;;	    own the intellectual property, then you'll need to sign an [individual
0000000000000000000000000000000000000000;;	    CLA][].
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  * If you work for a company that wants to allow you to contribute your work,
0000000000000000000000000000000000000000;;	    then you'll need to sign a [corporate CLA][].
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You generally only need to submit a CLA once, so if you've already submitted
0000000000000000000000000000000000000000;;	one (even if it was for a different project), you probably don't need to do it
0000000000000000000000000000000000000000;;	again.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[individual CLA]: https://developers.google.com/open-source/cla/individual
0000000000000000000000000000000000000000;;	[corporate CLA]: https://developers.google.com/open-source/cla/corporate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Submitting a patch ##
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  1. It's generally best to start by opening a new issue describing the bug or
0000000000000000000000000000000000000000;;	     feature you're intending to fix.  Even if you think it's relatively minor,
0000000000000000000000000000000000000000;;	     it's helpful to know what people are working on.  Mention in the initial
0000000000000000000000000000000000000000;;	     issue that you are planning to work on that bug or feature so that it can
0000000000000000000000000000000000000000;;	     be assigned to you.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  1. Follow the normal process of [forking][] the project, and setup a new
0000000000000000000000000000000000000000;;	     branch to work in.  It's important that each group of changes be done in
0000000000000000000000000000000000000000;;	     separate branches in order to ensure that a pull request only includes the
0000000000000000000000000000000000000000;;	     commits related to that bug or feature.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  1. Go makes it very simple to ensure properly formatted code, so always run
0000000000000000000000000000000000000000;;	     `go fmt` on your code before committing it.  You should also run
0000000000000000000000000000000000000000;;	     [golint][] over your code.  As noted in the [golint readme][], it's not
0000000000000000000000000000000000000000;;	     strictly necessary that your code be completely "lint-free", but this will
0000000000000000000000000000000000000000;;	     help you find common style issues.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  1. Any significant changes should almost always be accompanied by tests.  The
0000000000000000000000000000000000000000;;	     project already has good test coverage, so look at some of the existing
0000000000000000000000000000000000000000;;	     tests if you're unsure how to go about it.  [gocov][] and [gocov-html][]
0000000000000000000000000000000000000000;;	     are invaluable tools for seeing which parts of your code aren't being
0000000000000000000000000000000000000000;;	     exercised by your tests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  1. Do your best to have [well-formed commit messages][] for each change.
0000000000000000000000000000000000000000;;	     This provides consistency throughout the project, and ensures that commit
0000000000000000000000000000000000000000;;	     messages are able to be formatted properly by various git tools.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  1. Finally, push the commits to your fork and submit a [pull request][].
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[forking]: https://help.github.com/articles/fork-a-repo
0000000000000000000000000000000000000000;;	[golint]: https://github.com/golang/lint
0000000000000000000000000000000000000000;;	[golint readme]: https://github.com/golang/lint/blob/master/README
0000000000000000000000000000000000000000;;	[gocov]: https://github.com/axw/gocov
0000000000000000000000000000000000000000;;	[gocov-html]: https://github.com/matm/gocov-html
0000000000000000000000000000000000000000;;	[well-formed commit messages]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
0000000000000000000000000000000000000000;;	[squash]: http://git-scm.com/book/en/Git-Tools-Rewriting-History#Squashing-Commits
0000000000000000000000000000000000000000;;	[pull request]: https://help.github.com/articles/creating-a-pull-request
