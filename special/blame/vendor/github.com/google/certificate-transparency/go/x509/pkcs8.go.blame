0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
4719f97477417ada91b80cafeecea0dd05c6fdd6;;	
0000000000000000000000000000000000000000;;	package x509
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		// START CT CHANGES
0000000000000000000000000000000000000000;;		"github.com/google/certificate-transparency/go/asn1"
0000000000000000000000000000000000000000;;		"github.com/google/certificate-transparency/go/x509/pkix"
0000000000000000000000000000000000000000;;		// END CT CHANGES
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// pkcs8 reflects an ASN.1, PKCS#8 PrivateKey. See
0000000000000000000000000000000000000000;;	// ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-8/pkcs-8v1_2.asn
0000000000000000000000000000000000000000;;	// and RFC5208.
0000000000000000000000000000000000000000;;	type pkcs8 struct {
0000000000000000000000000000000000000000;;		Version    int
0000000000000000000000000000000000000000;;		Algo       pkix.AlgorithmIdentifier
0000000000000000000000000000000000000000;;		PrivateKey []byte
0000000000000000000000000000000000000000;;		// optional attributes omitted.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParsePKCS8PrivateKey parses an unencrypted, PKCS#8 private key. See
0000000000000000000000000000000000000000;;	// http://www.rsa.com/rsalabs/node.asp?id=2130 and RFC5208.
0000000000000000000000000000000000000000;;	func ParsePKCS8PrivateKey(der []byte) (key interface{}, err error) {
0000000000000000000000000000000000000000;;		var privKey pkcs8
0000000000000000000000000000000000000000;;		if _, err := asn1.Unmarshal(der, &privKey); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case privKey.Algo.Algorithm.Equal(oidPublicKeyRSA):
0000000000000000000000000000000000000000;;			key, err = ParsePKCS1PrivateKey(privKey.PrivateKey)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, errors.New("x509: failed to parse RSA private key embedded in PKCS#8: " + err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return key, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case privKey.Algo.Algorithm.Equal(oidPublicKeyECDSA):
0000000000000000000000000000000000000000;;			bytes := privKey.Algo.Parameters.FullBytes
0000000000000000000000000000000000000000;;			namedCurveOID := new(asn1.ObjectIdentifier)
0000000000000000000000000000000000000000;;			if _, err := asn1.Unmarshal(bytes, namedCurveOID); err != nil {
0000000000000000000000000000000000000000;;				namedCurveOID = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			key, err = parseECPrivateKey(namedCurveOID, privKey.PrivateKey)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, errors.New("x509: failed to parse EC private key embedded in PKCS#8: " + err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return key, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("x509: PKCS#8 wrapping contained private key with unknown algorithm: %v", privKey.Algo.Algorithm)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
