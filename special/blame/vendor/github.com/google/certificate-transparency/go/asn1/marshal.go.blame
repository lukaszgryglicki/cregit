0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
4719f97477417ada91b80cafeecea0dd05c6fdd6;;	
0000000000000000000000000000000000000000;;	package asn1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"math/big"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;		"unicode/utf8"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A forkableWriter is an in-memory buffer that can be
0000000000000000000000000000000000000000;;	// 'forked' to create new forkableWriters that bracket the
0000000000000000000000000000000000000000;;	// original.  After
0000000000000000000000000000000000000000;;	//    pre, post := w.fork();
0000000000000000000000000000000000000000;;	// the overall sequence of bytes represented is logically w+pre+post.
0000000000000000000000000000000000000000;;	type forkableWriter struct {
0000000000000000000000000000000000000000;;		*bytes.Buffer
0000000000000000000000000000000000000000;;		pre, post *forkableWriter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newForkableWriter() *forkableWriter {
0000000000000000000000000000000000000000;;		return &forkableWriter{new(bytes.Buffer), nil, nil}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *forkableWriter) fork() (pre, post *forkableWriter) {
0000000000000000000000000000000000000000;;		if f.pre != nil || f.post != nil {
0000000000000000000000000000000000000000;;			panic("have already forked")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.pre = newForkableWriter()
0000000000000000000000000000000000000000;;		f.post = newForkableWriter()
0000000000000000000000000000000000000000;;		return f.pre, f.post
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *forkableWriter) Len() (l int) {
0000000000000000000000000000000000000000;;		l += f.Buffer.Len()
0000000000000000000000000000000000000000;;		if f.pre != nil {
0000000000000000000000000000000000000000;;			l += f.pre.Len()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f.post != nil {
0000000000000000000000000000000000000000;;			l += f.post.Len()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *forkableWriter) writeTo(out io.Writer) (n int, err error) {
0000000000000000000000000000000000000000;;		n, err = out.Write(f.Bytes())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var nn int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if f.pre != nil {
0000000000000000000000000000000000000000;;			nn, err = f.pre.writeTo(out)
0000000000000000000000000000000000000000;;			n += nn
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if f.post != nil {
0000000000000000000000000000000000000000;;			nn, err = f.post.writeTo(out)
0000000000000000000000000000000000000000;;			n += nn
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalBase128Int(out *forkableWriter, n int64) (err error) {
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			err = out.WriteByte(0)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l := 0
0000000000000000000000000000000000000000;;		for i := n; i > 0; i >>= 7 {
0000000000000000000000000000000000000000;;			l++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := l - 1; i >= 0; i-- {
0000000000000000000000000000000000000000;;			o := byte(n >> uint(i*7))
0000000000000000000000000000000000000000;;			o &= 0x7f
0000000000000000000000000000000000000000;;			if i != 0 {
0000000000000000000000000000000000000000;;				o |= 0x80
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err = out.WriteByte(o)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalInt64(out *forkableWriter, i int64) (err error) {
0000000000000000000000000000000000000000;;		n := int64Length(i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for ; n > 0; n-- {
0000000000000000000000000000000000000000;;			err = out.WriteByte(byte(i >> uint((n-1)*8)))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func int64Length(i int64) (numBytes int) {
0000000000000000000000000000000000000000;;		numBytes = 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i > 127 {
0000000000000000000000000000000000000000;;			numBytes++
0000000000000000000000000000000000000000;;			i >>= 8
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i < -128 {
0000000000000000000000000000000000000000;;			numBytes++
0000000000000000000000000000000000000000;;			i >>= 8
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalBigInt(out *forkableWriter, n *big.Int) (err error) {
0000000000000000000000000000000000000000;;		if n.Sign() < 0 {
0000000000000000000000000000000000000000;;			// A negative number has to be converted to two's-complement
0000000000000000000000000000000000000000;;			// form. So we'll subtract 1 and invert. If the
0000000000000000000000000000000000000000;;			// most-significant-bit isn't set then we'll need to pad the
0000000000000000000000000000000000000000;;			// beginning with 0xff in order to keep the number negative.
0000000000000000000000000000000000000000;;			nMinus1 := new(big.Int).Neg(n)
0000000000000000000000000000000000000000;;			nMinus1.Sub(nMinus1, bigOne)
0000000000000000000000000000000000000000;;			bytes := nMinus1.Bytes()
0000000000000000000000000000000000000000;;			for i := range bytes {
0000000000000000000000000000000000000000;;				bytes[i] ^= 0xff
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(bytes) == 0 || bytes[0]&0x80 == 0 {
0000000000000000000000000000000000000000;;				err = out.WriteByte(0xff)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, err = out.Write(bytes)
0000000000000000000000000000000000000000;;		} else if n.Sign() == 0 {
0000000000000000000000000000000000000000;;			// Zero is written as a single 0 zero rather than no bytes.
0000000000000000000000000000000000000000;;			err = out.WriteByte(0x00)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			bytes := n.Bytes()
0000000000000000000000000000000000000000;;			if len(bytes) > 0 && bytes[0]&0x80 != 0 {
0000000000000000000000000000000000000000;;				// We'll have to pad this with 0x00 in order to stop it
0000000000000000000000000000000000000000;;				// looking like a negative number.
0000000000000000000000000000000000000000;;				err = out.WriteByte(0)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, err = out.Write(bytes)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalLength(out *forkableWriter, i int) (err error) {
0000000000000000000000000000000000000000;;		n := lengthLength(i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for ; n > 0; n-- {
0000000000000000000000000000000000000000;;			err = out.WriteByte(byte(i >> uint((n-1)*8)))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lengthLength(i int) (numBytes int) {
0000000000000000000000000000000000000000;;		numBytes = 1
0000000000000000000000000000000000000000;;		for i > 255 {
0000000000000000000000000000000000000000;;			numBytes++
0000000000000000000000000000000000000000;;			i >>= 8
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalTagAndLength(out *forkableWriter, t tagAndLength) (err error) {
0000000000000000000000000000000000000000;;		b := uint8(t.class) << 6
0000000000000000000000000000000000000000;;		if t.isCompound {
0000000000000000000000000000000000000000;;			b |= 0x20
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t.tag >= 31 {
0000000000000000000000000000000000000000;;			b |= 0x1f
0000000000000000000000000000000000000000;;			err = out.WriteByte(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err = marshalBase128Int(out, int64(t.tag))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			b |= uint8(t.tag)
0000000000000000000000000000000000000000;;			err = out.WriteByte(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if t.length >= 128 {
0000000000000000000000000000000000000000;;			l := lengthLength(t.length)
0000000000000000000000000000000000000000;;			err = out.WriteByte(0x80 | byte(l))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err = marshalLength(out, t.length)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			err = out.WriteByte(byte(t.length))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalBitString(out *forkableWriter, b BitString) (err error) {
0000000000000000000000000000000000000000;;		paddingBits := byte((8 - b.BitLength%8) % 8)
0000000000000000000000000000000000000000;;		err = out.WriteByte(paddingBits)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = out.Write(b.Bytes)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalObjectIdentifier(out *forkableWriter, oid []int) (err error) {
0000000000000000000000000000000000000000;;		if len(oid) < 2 || oid[0] > 2 || (oid[0] < 2 && oid[1] >= 40) {
0000000000000000000000000000000000000000;;			return StructuralError{"invalid object identifier"}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalBase128Int(out, int64(oid[0]*40+oid[1]))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 2; i < len(oid); i++ {
0000000000000000000000000000000000000000;;			err = marshalBase128Int(out, int64(oid[i]))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalPrintableString(out *forkableWriter, s string) (err error) {
0000000000000000000000000000000000000000;;		b := []byte(s)
0000000000000000000000000000000000000000;;		for _, c := range b {
0000000000000000000000000000000000000000;;			if !isPrintable(c) {
0000000000000000000000000000000000000000;;				return StructuralError{"PrintableString contains invalid character"}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = out.Write(b)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalIA5String(out *forkableWriter, s string) (err error) {
0000000000000000000000000000000000000000;;		b := []byte(s)
0000000000000000000000000000000000000000;;		for _, c := range b {
0000000000000000000000000000000000000000;;			if c > 127 {
0000000000000000000000000000000000000000;;				return StructuralError{"IA5String contains invalid character"}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = out.Write(b)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalUTF8String(out *forkableWriter, s string) (err error) {
0000000000000000000000000000000000000000;;		_, err = out.Write([]byte(s))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalTwoDigits(out *forkableWriter, v int) (err error) {
0000000000000000000000000000000000000000;;		err = out.WriteByte(byte('0' + (v/10)%10))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out.WriteByte(byte('0' + v%10))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalUTCTime(out *forkableWriter, t time.Time) (err error) {
0000000000000000000000000000000000000000;;		year, month, day := t.Date()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case 1950 <= year && year < 2000:
0000000000000000000000000000000000000000;;			err = marshalTwoDigits(out, int(year-1900))
0000000000000000000000000000000000000000;;		case 2000 <= year && year < 2050:
0000000000000000000000000000000000000000;;			err = marshalTwoDigits(out, int(year-2000))
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return StructuralError{"cannot represent time as UTCTime"}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalTwoDigits(out, int(month))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalTwoDigits(out, day)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hour, min, sec := t.Clock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalTwoDigits(out, hour)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalTwoDigits(out, min)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalTwoDigits(out, sec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, offset := t.Zone()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case offset/60 == 0:
0000000000000000000000000000000000000000;;			err = out.WriteByte('Z')
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		case offset > 0:
0000000000000000000000000000000000000000;;			err = out.WriteByte('+')
0000000000000000000000000000000000000000;;		case offset < 0:
0000000000000000000000000000000000000000;;			err = out.WriteByte('-')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		offsetMinutes := offset / 60
0000000000000000000000000000000000000000;;		if offsetMinutes < 0 {
0000000000000000000000000000000000000000;;			offsetMinutes = -offsetMinutes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalTwoDigits(out, offsetMinutes/60)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalTwoDigits(out, offsetMinutes%60)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stripTagAndLength(in []byte) []byte {
0000000000000000000000000000000000000000;;		_, offset, err := parseTagAndLength(in, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return in
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return in[offset:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalBody(out *forkableWriter, value reflect.Value, params fieldParameters) (err error) {
0000000000000000000000000000000000000000;;		switch value.Type() {
0000000000000000000000000000000000000000;;		case timeType:
0000000000000000000000000000000000000000;;			return marshalUTCTime(out, value.Interface().(time.Time))
0000000000000000000000000000000000000000;;		case bitStringType:
0000000000000000000000000000000000000000;;			return marshalBitString(out, value.Interface().(BitString))
0000000000000000000000000000000000000000;;		case objectIdentifierType:
0000000000000000000000000000000000000000;;			return marshalObjectIdentifier(out, value.Interface().(ObjectIdentifier))
0000000000000000000000000000000000000000;;		case bigIntType:
0000000000000000000000000000000000000000;;			return marshalBigInt(out, value.Interface().(*big.Int))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v := value; v.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Bool:
0000000000000000000000000000000000000000;;			if v.Bool() {
0000000000000000000000000000000000000000;;				return out.WriteByte(255)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return out.WriteByte(0)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			return marshalInt64(out, int64(v.Int()))
0000000000000000000000000000000000000000;;		case reflect.Struct:
0000000000000000000000000000000000000000;;			t := v.Type()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			startingField := 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// If the first element of the structure is a non-empty
0000000000000000000000000000000000000000;;			// RawContents, then we don't bother serializing the rest.
0000000000000000000000000000000000000000;;			if t.NumField() > 0 && t.Field(0).Type == rawContentsType {
0000000000000000000000000000000000000000;;				s := v.Field(0)
0000000000000000000000000000000000000000;;				if s.Len() > 0 {
0000000000000000000000000000000000000000;;					bytes := make([]byte, s.Len())
0000000000000000000000000000000000000000;;					for i := 0; i < s.Len(); i++ {
0000000000000000000000000000000000000000;;						bytes[i] = uint8(s.Index(i).Uint())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					/* The RawContents will contain the tag and
0000000000000000000000000000000000000000;;					 * length fields but we'll also be writing
0000000000000000000000000000000000000000;;					 * those ourselves, so we strip them out of
0000000000000000000000000000000000000000;;					 * bytes */
0000000000000000000000000000000000000000;;					_, err = out.Write(stripTagAndLength(bytes))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					startingField = 1
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i := startingField; i < t.NumField(); i++ {
0000000000000000000000000000000000000000;;				var pre *forkableWriter
0000000000000000000000000000000000000000;;				pre, out = out.fork()
0000000000000000000000000000000000000000;;				err = marshalField(pre, v.Field(i), parseFieldParameters(t.Field(i).Tag.Get("asn1")))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		case reflect.Slice:
0000000000000000000000000000000000000000;;			sliceType := v.Type()
0000000000000000000000000000000000000000;;			if sliceType.Elem().Kind() == reflect.Uint8 {
0000000000000000000000000000000000000000;;				bytes := make([]byte, v.Len())
0000000000000000000000000000000000000000;;				for i := 0; i < v.Len(); i++ {
0000000000000000000000000000000000000000;;					bytes[i] = uint8(v.Index(i).Uint())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				_, err = out.Write(bytes)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var fp fieldParameters
0000000000000000000000000000000000000000;;			for i := 0; i < v.Len(); i++ {
0000000000000000000000000000000000000000;;				var pre *forkableWriter
0000000000000000000000000000000000000000;;				pre, out = out.fork()
0000000000000000000000000000000000000000;;				err = marshalField(pre, v.Index(i), fp)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		case reflect.String:
0000000000000000000000000000000000000000;;			switch params.stringType {
0000000000000000000000000000000000000000;;			case tagIA5String:
0000000000000000000000000000000000000000;;				return marshalIA5String(out, v.String())
0000000000000000000000000000000000000000;;			case tagPrintableString:
0000000000000000000000000000000000000000;;				return marshalPrintableString(out, v.String())
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return marshalUTF8String(out, v.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return StructuralError{"unknown Go type"}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalField(out *forkableWriter, v reflect.Value, params fieldParameters) (err error) {
0000000000000000000000000000000000000000;;		// If the field is an interface{} then recurse into it.
0000000000000000000000000000000000000000;;		if v.Kind() == reflect.Interface && v.Type().NumMethod() == 0 {
0000000000000000000000000000000000000000;;			return marshalField(out, v.Elem(), params)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if v.Kind() == reflect.Slice && v.Len() == 0 && params.omitEmpty {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if params.optional && reflect.DeepEqual(v.Interface(), reflect.Zero(v.Type()).Interface()) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if v.Type() == rawValueType {
0000000000000000000000000000000000000000;;			rv := v.Interface().(RawValue)
0000000000000000000000000000000000000000;;			if len(rv.FullBytes) != 0 {
0000000000000000000000000000000000000000;;				_, err = out.Write(rv.FullBytes)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = marshalTagAndLength(out, tagAndLength{rv.Class, rv.Tag, len(rv.Bytes), rv.IsCompound})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				_, err = out.Write(rv.Bytes)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tag, isCompound, ok := getUniversalType(v.Type())
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			err = StructuralError{fmt.Sprintf("unknown Go type: %v", v.Type())}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		class := classUniversal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if params.stringType != 0 && tag != tagPrintableString {
0000000000000000000000000000000000000000;;			return StructuralError{"explicit string type given to non-string member"}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if tag == tagPrintableString {
0000000000000000000000000000000000000000;;			if params.stringType == 0 {
0000000000000000000000000000000000000000;;				// This is a string without an explicit string type. We'll use
0000000000000000000000000000000000000000;;				// a PrintableString if the character set in the string is
0000000000000000000000000000000000000000;;				// sufficiently limited, otherwise we'll use a UTF8String.
0000000000000000000000000000000000000000;;				for _, r := range v.String() {
0000000000000000000000000000000000000000;;					if r >= utf8.RuneSelf || !isPrintable(byte(r)) {
0000000000000000000000000000000000000000;;						if !utf8.ValidString(v.String()) {
0000000000000000000000000000000000000000;;							return errors.New("asn1: string not valid UTF-8")
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						tag = tagUTF8String
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				tag = params.stringType
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if params.set {
0000000000000000000000000000000000000000;;			if tag != tagSequence {
0000000000000000000000000000000000000000;;				return StructuralError{"non sequence tagged as set"}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tag = tagSet
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tags, body := out.fork()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalBody(body, v, params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bodyLen := body.Len()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var explicitTag *forkableWriter
0000000000000000000000000000000000000000;;		if params.explicit {
0000000000000000000000000000000000000000;;			explicitTag, tags = tags.fork()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !params.explicit && params.tag != nil {
0000000000000000000000000000000000000000;;			// implicit tag.
0000000000000000000000000000000000000000;;			tag = *params.tag
0000000000000000000000000000000000000000;;			class = classContextSpecific
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = marshalTagAndLength(tags, tagAndLength{class, tag, bodyLen, isCompound})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if params.explicit {
0000000000000000000000000000000000000000;;			err = marshalTagAndLength(explicitTag, tagAndLength{
0000000000000000000000000000000000000000;;				class:      classContextSpecific,
0000000000000000000000000000000000000000;;				tag:        *params.tag,
0000000000000000000000000000000000000000;;				length:     bodyLen + tags.Len(),
0000000000000000000000000000000000000000;;				isCompound: true,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshal returns the ASN.1 encoding of val.
0000000000000000000000000000000000000000;;	func Marshal(val interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		var out bytes.Buffer
0000000000000000000000000000000000000000;;		v := reflect.ValueOf(val)
0000000000000000000000000000000000000000;;		f := newForkableWriter()
0000000000000000000000000000000000000000;;		err := marshalField(f, v, fieldParameters{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = f.writeTo(&out)
0000000000000000000000000000000000000000;;		return out.Bytes(), nil
0000000000000000000000000000000000000000;;	}
