0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
e2a368d09bfda52d5970d2d9e3fd645b4eddb58b;Godeps/_workspace/src/github.com/google/cadvisor/utils/cloudinfo/gce.go[Godeps/_workspace/src/github.com/google/cadvisor/utils/cloudinfo/gce.go][vendor/github.com/google/cadvisor/utils/cloudinfo/gce.go];	
0000000000000000000000000000000000000000;;	package cloudinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"cloud.google.com/go/compute/metadata"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		gceProductName = "/sys/class/dmi/id/product_name"
0000000000000000000000000000000000000000;;		google         = "Google"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func onGCE() bool {
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile(gceProductName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error while reading product_name: %v", err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Contains(string(data), google)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getGceInstanceType() info.InstanceType {
0000000000000000000000000000000000000000;;		machineType, err := metadata.Get("instance/machine-type")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return info.UnknownInstance
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		responseParts := strings.Split(machineType, "/") // Extract the instance name from the machine type.
0000000000000000000000000000000000000000;;		return info.InstanceType(responseParts[len(responseParts)-1])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getGceInstanceID() info.InstanceID {
0000000000000000000000000000000000000000;;		instanceID, err := metadata.Get("instance/id")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return info.UnknownInstance
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return info.InstanceID(info.InstanceType(instanceID))
0000000000000000000000000000000000000000;;	}
