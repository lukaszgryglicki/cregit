0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
e2a368d09bfda52d5970d2d9e3fd645b4eddb58b;Godeps/_workspace/src/github.com/google/cadvisor/utils/cloudinfo/cloudinfo.go[Godeps/_workspace/src/github.com/google/cadvisor/utils/cloudinfo/cloudinfo.go][vendor/github.com/google/cadvisor/utils/cloudinfo/cloudinfo.go];	
0000000000000000000000000000000000000000;;	// Get information about the cloud provider (if any) cAdvisor is running on.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cloudinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloudInfo interface {
0000000000000000000000000000000000000000;;		GetCloudProvider() info.CloudProvider
0000000000000000000000000000000000000000;;		GetInstanceType() info.InstanceType
0000000000000000000000000000000000000000;;		GetInstanceID() info.InstanceID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type realCloudInfo struct {
0000000000000000000000000000000000000000;;		cloudProvider info.CloudProvider
0000000000000000000000000000000000000000;;		instanceType  info.InstanceType
0000000000000000000000000000000000000000;;		instanceID    info.InstanceID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRealCloudInfo() CloudInfo {
0000000000000000000000000000000000000000;;		cloudProvider := detectCloudProvider()
0000000000000000000000000000000000000000;;		instanceType := detectInstanceType(cloudProvider)
0000000000000000000000000000000000000000;;		instanceID := detectInstanceID(cloudProvider)
0000000000000000000000000000000000000000;;		return &realCloudInfo{
0000000000000000000000000000000000000000;;			cloudProvider: cloudProvider,
0000000000000000000000000000000000000000;;			instanceType:  instanceType,
0000000000000000000000000000000000000000;;			instanceID:    instanceID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *realCloudInfo) GetCloudProvider() info.CloudProvider {
0000000000000000000000000000000000000000;;		return self.cloudProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *realCloudInfo) GetInstanceType() info.InstanceType {
0000000000000000000000000000000000000000;;		return self.instanceType
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *realCloudInfo) GetInstanceID() info.InstanceID {
0000000000000000000000000000000000000000;;		return self.instanceID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func detectCloudProvider() info.CloudProvider {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case onGCE():
0000000000000000000000000000000000000000;;			return info.GCE
0000000000000000000000000000000000000000;;		case onAWS():
0000000000000000000000000000000000000000;;			return info.AWS
0000000000000000000000000000000000000000;;		case onAzure():
0000000000000000000000000000000000000000;;			return info.Azure
0000000000000000000000000000000000000000;;		case onBaremetal():
0000000000000000000000000000000000000000;;			return info.Baremetal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return info.UnknownProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func detectInstanceType(cloudProvider info.CloudProvider) info.InstanceType {
0000000000000000000000000000000000000000;;		switch cloudProvider {
0000000000000000000000000000000000000000;;		case info.GCE:
0000000000000000000000000000000000000000;;			return getGceInstanceType()
0000000000000000000000000000000000000000;;		case info.AWS:
0000000000000000000000000000000000000000;;			return getAwsInstanceType()
0000000000000000000000000000000000000000;;		case info.Azure:
0000000000000000000000000000000000000000;;			return getAzureInstanceType()
0000000000000000000000000000000000000000;;		case info.Baremetal:
0000000000000000000000000000000000000000;;			return info.NoInstance
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return info.UnknownInstance
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func detectInstanceID(cloudProvider info.CloudProvider) info.InstanceID {
0000000000000000000000000000000000000000;;		switch cloudProvider {
0000000000000000000000000000000000000000;;		case info.GCE:
0000000000000000000000000000000000000000;;			return getGceInstanceID()
0000000000000000000000000000000000000000;;		case info.AWS:
0000000000000000000000000000000000000000;;			return getAwsInstanceID()
0000000000000000000000000000000000000000;;		case info.Azure:
0000000000000000000000000000000000000000;;			return getAzureInstanceID()
0000000000000000000000000000000000000000;;		case info.Baremetal:
0000000000000000000000000000000000000000;;			return info.UnNamedInstance
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return info.UnNamedInstance
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Implement method.
0000000000000000000000000000000000000000;;	func onBaremetal() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
