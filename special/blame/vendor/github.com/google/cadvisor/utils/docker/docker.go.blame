0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a93fc00f9e3e99c0b1e06ca1ecb0ad623862f330;;	
0000000000000000000000000000000000000000;;	package docker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockertypes "github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DockerInfoDriver          = "Driver"
0000000000000000000000000000000000000000;;		DockerInfoDriverStatus    = "DriverStatus"
0000000000000000000000000000000000000000;;		DriverStatusPoolName      = "Pool Name"
0000000000000000000000000000000000000000;;		DriverStatusDataLoopFile  = "Data loop file"
0000000000000000000000000000000000000000;;		DriverStatusMetadataFile  = "Metadata file"
0000000000000000000000000000000000000000;;		DriverStatusParentDataset = "Parent Dataset"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DriverStatusValue(status [][2]string, target string) string {
0000000000000000000000000000000000000000;;		for _, v := range status {
0000000000000000000000000000000000000000;;			if strings.EqualFold(v[0], target) {
0000000000000000000000000000000000000000;;				return v[1]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DockerThinPoolName(info dockertypes.Info) (string, error) {
0000000000000000000000000000000000000000;;		poolName := DriverStatusValue(info.DriverStatus, DriverStatusPoolName)
0000000000000000000000000000000000000000;;		if len(poolName) == 0 {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Could not get devicemapper pool name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return poolName, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DockerMetadataDevice(info dockertypes.Info) (string, error) {
0000000000000000000000000000000000000000;;		metadataDevice := DriverStatusValue(info.DriverStatus, DriverStatusMetadataFile)
0000000000000000000000000000000000000000;;		if len(metadataDevice) != 0 {
0000000000000000000000000000000000000000;;			return metadataDevice, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		poolName, err := DockerThinPoolName(info)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metadataDevice = fmt.Sprintf("/dev/mapper/%s_tmeta", poolName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := os.Stat(metadataDevice); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return metadataDevice, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DockerZfsFilesystem(info dockertypes.Info) (string, error) {
0000000000000000000000000000000000000000;;		filesystem := DriverStatusValue(info.DriverStatus, DriverStatusParentDataset)
0000000000000000000000000000000000000000;;		if len(filesystem) == 0 {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Could not get zfs filesystem")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return filesystem, nil
0000000000000000000000000000000000000000;;	}
