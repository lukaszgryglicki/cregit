0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/utils/cpuload/cpuload.go[Godeps/_workspace/src/github.com/google/cadvisor/utils/cpuload/cpuload.go][vendor/github.com/google/cadvisor/utils/cpuload/cpuload.go];	
0000000000000000000000000000000000000000;;	package cpuload
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/utils/cpuload/netlink"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuLoadReader interface {
0000000000000000000000000000000000000000;;		// Start the reader.
0000000000000000000000000000000000000000;;		Start() error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Stop the reader and clean up internal state.
0000000000000000000000000000000000000000;;		Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Retrieve Cpu load for a given group.
0000000000000000000000000000000000000000;;		// name is the full hierarchical name of the container.
0000000000000000000000000000000000000000;;		// Path is an absolute filesystem path for a container under CPU cgroup hierarchy.
0000000000000000000000000000000000000000;;		GetCpuLoad(name string, path string) (info.LoadStats, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New() (CpuLoadReader, error) {
0000000000000000000000000000000000000000;;		reader, err := netlink.New()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to create a netlink based cpuload reader: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(3).Info("Using a netlink-based load reader")
0000000000000000000000000000000000000000;;		return reader, nil
0000000000000000000000000000000000000000;;	}
