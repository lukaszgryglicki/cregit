0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a93fc00f9e3e99c0b1e06ca1ecb0ad623862f330;;	
0000000000000000000000000000000000000000;;	// Package tail implements "tail -F" functionality following rotated logs
0000000000000000000000000000000000000000;;	package tail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"golang.org/x/exp/inotify"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Tail struct {
0000000000000000000000000000000000000000;;		reader     *bufio.Reader
0000000000000000000000000000000000000000;;		readerErr  error
0000000000000000000000000000000000000000;;		readerLock sync.RWMutex
0000000000000000000000000000000000000000;;		filename   string
0000000000000000000000000000000000000000;;		file       *os.File
0000000000000000000000000000000000000000;;		stop       chan bool
0000000000000000000000000000000000000000;;		watcher    *inotify.Watcher
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		defaultRetryInterval = 100 * time.Millisecond
0000000000000000000000000000000000000000;;		maxRetryInterval     = 30 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTail starts opens the given file and watches it for deletion/rotation
0000000000000000000000000000000000000000;;	func NewTail(filename string) (*Tail, error) {
0000000000000000000000000000000000000000;;		t, err := newTail(filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go t.watchLoop()
0000000000000000000000000000000000000000;;		return t, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newTail creates a Tail object.
0000000000000000000000000000000000000000;;	func newTail(filename string) (*Tail, error) {
0000000000000000000000000000000000000000;;		t := &Tail{
0000000000000000000000000000000000000000;;			filename: filename,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		t.stop = make(chan bool)
0000000000000000000000000000000000000000;;		t.watcher, err = inotify.NewWatcher()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("inotify init failed on %s: %v", t.filename, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Initialize readerErr as io.EOF, so that the reader can work properly
0000000000000000000000000000000000000000;;		// during initialization.
0000000000000000000000000000000000000000;;		t.readerErr = io.EOF
0000000000000000000000000000000000000000;;		return t, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Read implements the io.Reader interface for Tail
0000000000000000000000000000000000000000;;	func (t *Tail) Read(p []byte) (int, error) {
0000000000000000000000000000000000000000;;		t.readerLock.RLock()
0000000000000000000000000000000000000000;;		defer t.readerLock.RUnlock()
0000000000000000000000000000000000000000;;		if t.readerErr != nil {
0000000000000000000000000000000000000000;;			return 0, t.readerErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return t.reader.Read(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ io.ReadCloser = &Tail{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Close stops watching and closes the file
0000000000000000000000000000000000000000;;	func (t *Tail) Close() error {
0000000000000000000000000000000000000000;;		close(t.stop)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tail) attemptOpen() error {
0000000000000000000000000000000000000000;;		t.readerLock.Lock()
0000000000000000000000000000000000000000;;		defer t.readerLock.Unlock()
0000000000000000000000000000000000000000;;		t.readerErr = nil
0000000000000000000000000000000000000000;;		attempt := 0
0000000000000000000000000000000000000000;;		var lastErr error
0000000000000000000000000000000000000000;;		for interval := defaultRetryInterval; ; interval *= 2 {
0000000000000000000000000000000000000000;;			attempt++
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Opening %s (attempt %d)", t.filename, attempt)
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			t.file, err = os.Open(t.filename)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				// TODO: not interested in old events?
0000000000000000000000000000000000000000;;				// t.file.Seek(0, os.SEEK_END)
0000000000000000000000000000000000000000;;				t.reader = bufio.NewReader(t.file)
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			lastErr = err
0000000000000000000000000000000000000000;;			glog.V(4).Infof("open log file %s error: %v", t.filename, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if interval >= maxRetryInterval {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-time.After(interval):
0000000000000000000000000000000000000000;;			case <-t.stop:
0000000000000000000000000000000000000000;;				t.readerErr = io.EOF
0000000000000000000000000000000000000000;;				return fmt.Errorf("watch was cancelled")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := fmt.Errorf("can't open log file %s: %v", t.filename, lastErr)
0000000000000000000000000000000000000000;;		t.readerErr = err
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tail) watchLoop() {
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			err := t.watchFile()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Tail failed on %s: %v", t.filename, err)
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tail) watchFile() error {
0000000000000000000000000000000000000000;;		err := t.attemptOpen()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer t.file.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watchDir := filepath.Dir(t.filename)
0000000000000000000000000000000000000000;;		err = t.watcher.AddWatch(watchDir, inotify.IN_MOVED_FROM|inotify.IN_DELETE)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Failed to add watch to directory %s: %v", watchDir, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer t.watcher.RemoveWatch(watchDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case event := <-t.watcher.Event:
0000000000000000000000000000000000000000;;				eventPath := filepath.Clean(event.Name) // Directory events have an extra '/'
0000000000000000000000000000000000000000;;				if eventPath == t.filename {
0000000000000000000000000000000000000000;;					glog.V(4).Infof("Log file %s moved/deleted", t.filename)
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case <-t.stop:
0000000000000000000000000000000000000000;;				return fmt.Errorf("watch was cancelled")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
