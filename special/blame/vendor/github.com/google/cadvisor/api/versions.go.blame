0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
ddb91896b60df07452d87846c6343678b1c48dde;Godeps/_workspace/src/github.com/google/cadvisor/api/versions.go[Godeps/_workspace/src/github.com/google/cadvisor/api/versions.go][vendor/github.com/google/cadvisor/api/versions.go];	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/manager"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		containersApi    = "containers"
0000000000000000000000000000000000000000;;		subcontainersApi = "subcontainers"
0000000000000000000000000000000000000000;;		machineApi       = "machine"
0000000000000000000000000000000000000000;;		machineStatsApi  = "machinestats"
0000000000000000000000000000000000000000;;		dockerApi        = "docker"
0000000000000000000000000000000000000000;;		summaryApi       = "summary"
0000000000000000000000000000000000000000;;		statsApi         = "stats"
0000000000000000000000000000000000000000;;		specApi          = "spec"
0000000000000000000000000000000000000000;;		eventsApi        = "events"
0000000000000000000000000000000000000000;;		storageApi       = "storage"
0000000000000000000000000000000000000000;;		attributesApi    = "attributes"
0000000000000000000000000000000000000000;;		versionApi       = "version"
0000000000000000000000000000000000000000;;		psApi            = "ps"
0000000000000000000000000000000000000000;;		customMetricsApi = "appmetrics"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface for a cAdvisor API version
0000000000000000000000000000000000000000;;	type ApiVersion interface {
0000000000000000000000000000000000000000;;		// Returns the version string.
0000000000000000000000000000000000000000;;		Version() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of supported API endpoints.
0000000000000000000000000000000000000000;;		SupportedRequestTypes() []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handles a request. The second argument is the parameters after /api/<version>/<endpoint>
0000000000000000000000000000000000000000;;		HandleRequest(requestType string, request []string, m manager.Manager, w http.ResponseWriter, r *http.Request) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets all supported API versions.
0000000000000000000000000000000000000000;;	func getApiVersions() []ApiVersion {
0000000000000000000000000000000000000000;;		v1_0 := &version1_0{}
0000000000000000000000000000000000000000;;		v1_1 := newVersion1_1(v1_0)
0000000000000000000000000000000000000000;;		v1_2 := newVersion1_2(v1_1)
0000000000000000000000000000000000000000;;		v1_3 := newVersion1_3(v1_2)
0000000000000000000000000000000000000000;;		v2_0 := newVersion2_0()
0000000000000000000000000000000000000000;;		v2_1 := newVersion2_1(v2_0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return []ApiVersion{v1_0, v1_1, v1_2, v1_3, v2_0, v2_1}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// API v1.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type version1_0 struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_0) Version() string {
0000000000000000000000000000000000000000;;		return "v1.0"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_0) SupportedRequestTypes() []string {
0000000000000000000000000000000000000000;;		return []string{containersApi, machineApi}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_0) HandleRequest(requestType string, request []string, m manager.Manager, w http.ResponseWriter, r *http.Request) error {
0000000000000000000000000000000000000000;;		switch requestType {
0000000000000000000000000000000000000000;;		case machineApi:
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Machine")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Get the MachineInfo
0000000000000000000000000000000000000000;;			machineInfo, err := m.GetMachineInfo()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = writeResult(machineInfo, w)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case containersApi:
0000000000000000000000000000000000000000;;			containerName := getContainerName(request)
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Container(%s)", containerName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Get the query request.
0000000000000000000000000000000000000000;;			query, err := getContainerInfoRequest(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Get the container.
0000000000000000000000000000000000000000;;			cont, err := m.GetContainerInfo(containerName, query)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to get container %q with error: %s", containerName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Only output the container as JSON.
0000000000000000000000000000000000000000;;			err = writeResult(cont, w)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("unknown request type %q", requestType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// API v1.1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type version1_1 struct {
0000000000000000000000000000000000000000;;		baseVersion *version1_0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// v1.1 builds on v1.0.
0000000000000000000000000000000000000000;;	func newVersion1_1(v *version1_0) *version1_1 {
0000000000000000000000000000000000000000;;		return &version1_1{
0000000000000000000000000000000000000000;;			baseVersion: v,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_1) Version() string {
0000000000000000000000000000000000000000;;		return "v1.1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_1) SupportedRequestTypes() []string {
0000000000000000000000000000000000000000;;		return append(self.baseVersion.SupportedRequestTypes(), subcontainersApi)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_1) HandleRequest(requestType string, request []string, m manager.Manager, w http.ResponseWriter, r *http.Request) error {
0000000000000000000000000000000000000000;;		switch requestType {
0000000000000000000000000000000000000000;;		case subcontainersApi:
0000000000000000000000000000000000000000;;			containerName := getContainerName(request)
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Subcontainers(%s)", containerName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Get the query request.
0000000000000000000000000000000000000000;;			query, err := getContainerInfoRequest(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Get the subcontainers.
0000000000000000000000000000000000000000;;			containers, err := m.SubcontainersInfo(containerName, query)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to get subcontainers for container %q with error: %s", containerName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Only output the containers as JSON.
0000000000000000000000000000000000000000;;			err = writeResult(containers, w)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return self.baseVersion.HandleRequest(requestType, request, m, w, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// API v1.2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type version1_2 struct {
0000000000000000000000000000000000000000;;		baseVersion *version1_1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// v1.2 builds on v1.1.
0000000000000000000000000000000000000000;;	func newVersion1_2(v *version1_1) *version1_2 {
0000000000000000000000000000000000000000;;		return &version1_2{
0000000000000000000000000000000000000000;;			baseVersion: v,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_2) Version() string {
0000000000000000000000000000000000000000;;		return "v1.2"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_2) SupportedRequestTypes() []string {
0000000000000000000000000000000000000000;;		return append(self.baseVersion.SupportedRequestTypes(), dockerApi)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_2) HandleRequest(requestType string, request []string, m manager.Manager, w http.ResponseWriter, r *http.Request) error {
0000000000000000000000000000000000000000;;		switch requestType {
0000000000000000000000000000000000000000;;		case dockerApi:
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Docker(%v)", request)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Get the query request.
0000000000000000000000000000000000000000;;			query, err := getContainerInfoRequest(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var containers map[string]info.ContainerInfo
0000000000000000000000000000000000000000;;			// map requests for "docker/" to "docker"
0000000000000000000000000000000000000000;;			if len(request) == 1 && len(request[0]) == 0 {
0000000000000000000000000000000000000000;;				request = request[:0]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			switch len(request) {
0000000000000000000000000000000000000000;;			case 0:
0000000000000000000000000000000000000000;;				// Get all Docker containers.
0000000000000000000000000000000000000000;;				containers, err = m.AllDockerContainers(query)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("failed to get all Docker containers with error: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case 1:
0000000000000000000000000000000000000000;;				// Get one Docker container.
0000000000000000000000000000000000000000;;				var cont info.ContainerInfo
0000000000000000000000000000000000000000;;				cont, err = m.DockerContainer(request[0], query)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("failed to get Docker container %q with error: %v", request[0], err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				containers = map[string]info.ContainerInfo{
0000000000000000000000000000000000000000;;					cont.Name: cont,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return fmt.Errorf("unknown request for Docker container %v", request)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Only output the containers as JSON.
0000000000000000000000000000000000000000;;			err = writeResult(containers, w)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return self.baseVersion.HandleRequest(requestType, request, m, w, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// API v1.3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type version1_3 struct {
0000000000000000000000000000000000000000;;		baseVersion *version1_2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// v1.3 builds on v1.2.
0000000000000000000000000000000000000000;;	func newVersion1_3(v *version1_2) *version1_3 {
0000000000000000000000000000000000000000;;		return &version1_3{
0000000000000000000000000000000000000000;;			baseVersion: v,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_3) Version() string {
0000000000000000000000000000000000000000;;		return "v1.3"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_3) SupportedRequestTypes() []string {
0000000000000000000000000000000000000000;;		return append(self.baseVersion.SupportedRequestTypes(), eventsApi)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version1_3) HandleRequest(requestType string, request []string, m manager.Manager, w http.ResponseWriter, r *http.Request) error {
0000000000000000000000000000000000000000;;		switch requestType {
0000000000000000000000000000000000000000;;		case eventsApi:
0000000000000000000000000000000000000000;;			return handleEventRequest(request, m, w, r)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return self.baseVersion.HandleRequest(requestType, request, m, w, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func handleEventRequest(request []string, m manager.Manager, w http.ResponseWriter, r *http.Request) error {
0000000000000000000000000000000000000000;;		query, stream, err := getEventRequest(r)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		query.ContainerName = path.Join("/", getContainerName(request))
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Api - Events(%v)", query)
0000000000000000000000000000000000000000;;		if !stream {
0000000000000000000000000000000000000000;;			pastEvents, err := m.GetPastEvents(query)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(pastEvents, w)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		eventChannel, err := m.WatchForEvents(query)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return streamResults(eventChannel, w, r, m)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// API v2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type version2_0 struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newVersion2_0() *version2_0 {
0000000000000000000000000000000000000000;;		return &version2_0{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version2_0) Version() string {
0000000000000000000000000000000000000000;;		return "v2.0"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version2_0) SupportedRequestTypes() []string {
0000000000000000000000000000000000000000;;		return []string{versionApi, attributesApi, eventsApi, machineApi, summaryApi, statsApi, specApi, storageApi, psApi, customMetricsApi}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version2_0) HandleRequest(requestType string, request []string, m manager.Manager, w http.ResponseWriter, r *http.Request) error {
0000000000000000000000000000000000000000;;		opt, err := getRequestOptions(r)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch requestType {
0000000000000000000000000000000000000000;;		case versionApi:
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Version")
0000000000000000000000000000000000000000;;			versionInfo, err := m.GetVersionInfo()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(versionInfo.CadvisorVersion, w)
0000000000000000000000000000000000000000;;		case attributesApi:
0000000000000000000000000000000000000000;;			glog.V(4).Info("Api - Attributes")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			machineInfo, err := m.GetMachineInfo()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			versionInfo, err := m.GetVersionInfo()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			info := v2.GetAttributes(machineInfo, versionInfo)
0000000000000000000000000000000000000000;;			return writeResult(info, w)
0000000000000000000000000000000000000000;;		case machineApi:
0000000000000000000000000000000000000000;;			glog.V(4).Info("Api - Machine")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// TODO(rjnagal): Move machineInfo from v1.
0000000000000000000000000000000000000000;;			machineInfo, err := m.GetMachineInfo()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(machineInfo, w)
0000000000000000000000000000000000000000;;		case summaryApi:
0000000000000000000000000000000000000000;;			containerName := getContainerName(request)
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Summary for container %q, options %+v", containerName, opt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stats, err := m.GetDerivedStats(containerName, opt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(stats, w)
0000000000000000000000000000000000000000;;		case statsApi:
0000000000000000000000000000000000000000;;			name := getContainerName(request)
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Stats: Looking for stats for container %q, options %+v", name, opt)
0000000000000000000000000000000000000000;;			infos, err := m.GetRequestedContainersInfo(name, opt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if len(infos) == 0 {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				glog.Errorf("Error calling GetRequestedContainersInfo: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			contStats := make(map[string][]v2.DeprecatedContainerStats, 0)
0000000000000000000000000000000000000000;;			for name, cinfo := range infos {
0000000000000000000000000000000000000000;;				contStats[name] = v2.DeprecatedStatsFromV1(cinfo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(contStats, w)
0000000000000000000000000000000000000000;;		case customMetricsApi:
0000000000000000000000000000000000000000;;			containerName := getContainerName(request)
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Custom Metrics: Looking for metrics for container %q, options %+v", containerName, opt)
0000000000000000000000000000000000000000;;			infos, err := m.GetContainerInfoV2(containerName, opt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			contMetrics := make(map[string]map[string]map[string][]info.MetricValBasic, 0)
0000000000000000000000000000000000000000;;			for _, cinfo := range infos {
0000000000000000000000000000000000000000;;				metrics := make(map[string]map[string][]info.MetricValBasic, 0)
0000000000000000000000000000000000000000;;				for _, contStat := range cinfo.Stats {
0000000000000000000000000000000000000000;;					if len(contStat.CustomMetrics) == 0 {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					for name, allLabels := range contStat.CustomMetrics {
0000000000000000000000000000000000000000;;						metricLabels := make(map[string][]info.MetricValBasic, 0)
0000000000000000000000000000000000000000;;						for _, metric := range allLabels {
0000000000000000000000000000000000000000;;							if !metric.Timestamp.IsZero() {
0000000000000000000000000000000000000000;;								metVal := info.MetricValBasic{
0000000000000000000000000000000000000000;;									Timestamp:  metric.Timestamp,
0000000000000000000000000000000000000000;;									IntValue:   metric.IntValue,
0000000000000000000000000000000000000000;;									FloatValue: metric.FloatValue,
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;								labels := metrics[name]
0000000000000000000000000000000000000000;;								if labels != nil {
0000000000000000000000000000000000000000;;									values := labels[metric.Label]
0000000000000000000000000000000000000000;;									values = append(values, metVal)
0000000000000000000000000000000000000000;;									labels[metric.Label] = values
0000000000000000000000000000000000000000;;									metrics[name] = labels
0000000000000000000000000000000000000000;;								} else {
0000000000000000000000000000000000000000;;									metricLabels[metric.Label] = []info.MetricValBasic{metVal}
0000000000000000000000000000000000000000;;									metrics[name] = metricLabels
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				contMetrics[containerName] = metrics
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(contMetrics, w)
0000000000000000000000000000000000000000;;		case specApi:
0000000000000000000000000000000000000000;;			containerName := getContainerName(request)
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Spec for container %q, options %+v", containerName, opt)
0000000000000000000000000000000000000000;;			specs, err := m.GetContainerSpec(containerName, opt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(specs, w)
0000000000000000000000000000000000000000;;		case storageApi:
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			fi := []v2.FsInfo{}
0000000000000000000000000000000000000000;;			label := r.URL.Query().Get("label")
0000000000000000000000000000000000000000;;			if len(label) == 0 {
0000000000000000000000000000000000000000;;				// Get all global filesystems info.
0000000000000000000000000000000000000000;;				fi, err = m.GetFsInfo("")
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// Get a specific label.
0000000000000000000000000000000000000000;;				fi, err = m.GetFsInfo(label)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(fi, w)
0000000000000000000000000000000000000000;;		case eventsApi:
0000000000000000000000000000000000000000;;			return handleEventRequest(request, m, w, r)
0000000000000000000000000000000000000000;;		case psApi:
0000000000000000000000000000000000000000;;			// reuse container type from request.
0000000000000000000000000000000000000000;;			// ignore recursive.
0000000000000000000000000000000000000000;;			// TODO(rjnagal): consider count to limit ps output.
0000000000000000000000000000000000000000;;			name := getContainerName(request)
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Spec for container %q, options %+v", name, opt)
0000000000000000000000000000000000000000;;			ps, err := m.GetProcessList(name, opt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("process listing failed: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(ps, w)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("unknown request type %q", requestType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type version2_1 struct {
0000000000000000000000000000000000000000;;		baseVersion *version2_0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newVersion2_1(v *version2_0) *version2_1 {
0000000000000000000000000000000000000000;;		return &version2_1{
0000000000000000000000000000000000000000;;			baseVersion: v,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version2_1) Version() string {
0000000000000000000000000000000000000000;;		return "v2.1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version2_1) SupportedRequestTypes() []string {
0000000000000000000000000000000000000000;;		return append([]string{machineStatsApi}, self.baseVersion.SupportedRequestTypes()...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *version2_1) HandleRequest(requestType string, request []string, m manager.Manager, w http.ResponseWriter, r *http.Request) error {
0000000000000000000000000000000000000000;;		// Get the query request.
0000000000000000000000000000000000000000;;		opt, err := getRequestOptions(r)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch requestType {
0000000000000000000000000000000000000000;;		case machineStatsApi:
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - MachineStats(%v)", request)
0000000000000000000000000000000000000000;;			cont, err := m.GetRequestedContainersInfo("/", opt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if len(cont) == 0 {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				glog.Errorf("Error calling GetRequestedContainersInfo: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(v2.MachineStatsFromV1(cont["/"]), w)
0000000000000000000000000000000000000000;;		case statsApi:
0000000000000000000000000000000000000000;;			name := getContainerName(request)
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Api - Stats: Looking for stats for container %q, options %+v", name, opt)
0000000000000000000000000000000000000000;;			conts, err := m.GetRequestedContainersInfo(name, opt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if len(conts) == 0 {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				glog.Errorf("Error calling GetRequestedContainersInfo: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			contStats := make(map[string]v2.ContainerInfo, len(conts))
0000000000000000000000000000000000000000;;			for name, cont := range conts {
0000000000000000000000000000000000000000;;				if name == "/" {
0000000000000000000000000000000000000000;;					// Root cgroup stats should be exposed as machine stats
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				contStats[name] = v2.ContainerInfo{
0000000000000000000000000000000000000000;;					Spec:  v2.ContainerSpecFromV1(&cont.Spec, cont.Aliases, cont.Namespace),
0000000000000000000000000000000000000000;;					Stats: v2.ContainerStatsFromV1(name, &cont.Spec, cont.Stats),
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return writeResult(contStats, w)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return self.baseVersion.HandleRequest(requestType, request, m, w, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getRequestOptions(r *http.Request) (v2.RequestOptions, error) {
0000000000000000000000000000000000000000;;		supportedTypes := map[string]bool{
0000000000000000000000000000000000000000;;			v2.TypeName:   true,
0000000000000000000000000000000000000000;;			v2.TypeDocker: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// fill in the defaults.
0000000000000000000000000000000000000000;;		opt := v2.RequestOptions{
0000000000000000000000000000000000000000;;			IdType:    v2.TypeName,
0000000000000000000000000000000000000000;;			Count:     64,
0000000000000000000000000000000000000000;;			Recursive: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		idType := r.URL.Query().Get("type")
0000000000000000000000000000000000000000;;		if len(idType) != 0 {
0000000000000000000000000000000000000000;;			if !supportedTypes[idType] {
0000000000000000000000000000000000000000;;				return opt, fmt.Errorf("unknown 'type' %q", idType)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			opt.IdType = idType
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		count := r.URL.Query().Get("count")
0000000000000000000000000000000000000000;;		if len(count) != 0 {
0000000000000000000000000000000000000000;;			n, err := strconv.ParseUint(count, 10, 32)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return opt, fmt.Errorf("failed to parse 'count' option: %v", count)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			opt.Count = int(n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		recursive := r.URL.Query().Get("recursive")
0000000000000000000000000000000000000000;;		if recursive == "true" {
0000000000000000000000000000000000000000;;			opt.Recursive = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return opt, nil
0000000000000000000000000000000000000000;;	}
