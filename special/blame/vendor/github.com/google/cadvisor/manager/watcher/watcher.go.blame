0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a93fc00f9e3e99c0b1e06ca1ecb0ad623862f330;;	
0000000000000000000000000000000000000000;;	// Package container defines types for sub-container events and also
0000000000000000000000000000000000000000;;	// defines an interface for container operation handlers.
0000000000000000000000000000000000000000;;	package watcher
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubcontainerEventType indicates an addition or deletion event.
0000000000000000000000000000000000000000;;	type ContainerEventType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ContainerAdd ContainerEventType = iota
0000000000000000000000000000000000000000;;		ContainerDelete
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerWatchSource int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Raw ContainerWatchSource = iota
0000000000000000000000000000000000000000;;		Rkt
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerEvent represents a
0000000000000000000000000000000000000000;;	type ContainerEvent struct {
0000000000000000000000000000000000000000;;		// The type of event that occurred.
0000000000000000000000000000000000000000;;		EventType ContainerEventType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full container name of the container where the event occurred.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The watcher that detected this change event
0000000000000000000000000000000000000000;;		WatchSource ContainerWatchSource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerWatcher interface {
0000000000000000000000000000000000000000;;		// Registers a channel to listen for events affecting subcontainers (recursively).
0000000000000000000000000000000000000000;;		Start(events chan ContainerEvent) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Stops watching for subcontainer changes.
0000000000000000000000000000000000000000;;		Stop() error
0000000000000000000000000000000000000000;;	}
