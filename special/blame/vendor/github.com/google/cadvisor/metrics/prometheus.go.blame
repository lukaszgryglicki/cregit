0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0222664bb890bf25a441acb6f6d523fe3b9a7f97;Godeps/_workspace/src/github.com/google/cadvisor/metrics/prometheus.go[Godeps/_workspace/src/github.com/google/cadvisor/metrics/prometheus.go][vendor/github.com/google/cadvisor/metrics/prometheus.go];	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// infoProvider will usually be manager.Manager, but can be swapped out for testing.
0000000000000000000000000000000000000000;;	type infoProvider interface {
0000000000000000000000000000000000000000;;		// SubcontainersInfo provides information about all subcontainers of the
0000000000000000000000000000000000000000;;		// specified container including itself.
0000000000000000000000000000000000000000;;		SubcontainersInfo(containerName string, query *info.ContainerInfoRequest) ([]*info.ContainerInfo, error)
0000000000000000000000000000000000000000;;		// GetVersionInfo provides information about the version.
0000000000000000000000000000000000000000;;		GetVersionInfo() (*info.VersionInfo, error)
0000000000000000000000000000000000000000;;		// GetMachineInfo provides information about the machine.
0000000000000000000000000000000000000000;;		GetMachineInfo() (*info.MachineInfo, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// metricValue describes a single metric value for a given set of label values
0000000000000000000000000000000000000000;;	// within a parent containerMetric.
0000000000000000000000000000000000000000;;	type metricValue struct {
0000000000000000000000000000000000000000;;		value  float64
0000000000000000000000000000000000000000;;		labels []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type metricValues []metricValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// asFloat64 converts a uint64 into a float64.
0000000000000000000000000000000000000000;;	func asFloat64(v uint64) float64 { return float64(v) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// asNanosecondsToSeconds converts nanoseconds into a float64 representing seconds.
0000000000000000000000000000000000000000;;	func asNanosecondsToSeconds(v uint64) float64 {
0000000000000000000000000000000000000000;;		return float64(v) / float64(time.Second)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fsValues is a helper method for assembling per-filesystem stats.
0000000000000000000000000000000000000000;;	func fsValues(fsStats []info.FsStats, valueFn func(*info.FsStats) float64) metricValues {
0000000000000000000000000000000000000000;;		values := make(metricValues, 0, len(fsStats))
0000000000000000000000000000000000000000;;		for _, stat := range fsStats {
0000000000000000000000000000000000000000;;			values = append(values, metricValue{
0000000000000000000000000000000000000000;;				value:  valueFn(&stat),
0000000000000000000000000000000000000000;;				labels: []string{stat.Device},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return values
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ioValues is a helper method for assembling per-disk and per-filesystem stats.
0000000000000000000000000000000000000000;;	func ioValues(ioStats []info.PerDiskStats, ioType string, ioValueFn func(uint64) float64, fsStats []info.FsStats, valueFn func(*info.FsStats) float64) metricValues {
0000000000000000000000000000000000000000;;		values := make(metricValues, 0, len(ioStats)+len(fsStats))
0000000000000000000000000000000000000000;;		for _, stat := range ioStats {
0000000000000000000000000000000000000000;;			values = append(values, metricValue{
0000000000000000000000000000000000000000;;				value:  ioValueFn(stat.Stats[ioType]),
0000000000000000000000000000000000000000;;				labels: []string{stat.Device},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, stat := range fsStats {
0000000000000000000000000000000000000000;;			values = append(values, metricValue{
0000000000000000000000000000000000000000;;				value:  valueFn(&stat),
0000000000000000000000000000000000000000;;				labels: []string{stat.Device},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return values
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// containerMetric describes a multi-dimensional metric used for exposing a
0000000000000000000000000000000000000000;;	// certain type of container statistic.
0000000000000000000000000000000000000000;;	type containerMetric struct {
0000000000000000000000000000000000000000;;		name        string
0000000000000000000000000000000000000000;;		help        string
0000000000000000000000000000000000000000;;		valueType   prometheus.ValueType
0000000000000000000000000000000000000000;;		extraLabels []string
0000000000000000000000000000000000000000;;		condition   func(s info.ContainerSpec) bool
0000000000000000000000000000000000000000;;		getValues   func(s *info.ContainerStats) metricValues
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cm *containerMetric) desc(baseLabels []string) *prometheus.Desc {
0000000000000000000000000000000000000000;;		return prometheus.NewDesc(cm.name, cm.help, append(baseLabels, cm.extraLabels...), nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerLabelsFunc defines all base labels and their values attached to
0000000000000000000000000000000000000000;;	// each metric exported by cAdvisor.
0000000000000000000000000000000000000000;;	type ContainerLabelsFunc func(*info.ContainerInfo) map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrometheusCollector implements prometheus.Collector.
0000000000000000000000000000000000000000;;	type PrometheusCollector struct {
0000000000000000000000000000000000000000;;		infoProvider        infoProvider
0000000000000000000000000000000000000000;;		errors              prometheus.Gauge
0000000000000000000000000000000000000000;;		containerMetrics    []containerMetric
0000000000000000000000000000000000000000;;		containerLabelsFunc ContainerLabelsFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPrometheusCollector returns a new PrometheusCollector. The passed
0000000000000000000000000000000000000000;;	// ContainerLabelsFunc specifies which base labels will be attached to all
0000000000000000000000000000000000000000;;	// exported metrics. If left to nil, the DefaultContainerLabels function
0000000000000000000000000000000000000000;;	// will be used instead.
0000000000000000000000000000000000000000;;	func NewPrometheusCollector(i infoProvider, f ContainerLabelsFunc) *PrometheusCollector {
0000000000000000000000000000000000000000;;		if f == nil {
0000000000000000000000000000000000000000;;			f = DefaultContainerLabels
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := &PrometheusCollector{
0000000000000000000000000000000000000000;;			infoProvider:        i,
0000000000000000000000000000000000000000;;			containerLabelsFunc: f,
0000000000000000000000000000000000000000;;			errors: prometheus.NewGauge(prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Namespace: "container",
0000000000000000000000000000000000000000;;				Name:      "scrape_error",
0000000000000000000000000000000000000000;;				Help:      "1 if there was an error while getting container metrics, 0 otherwise",
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			containerMetrics: []containerMetric{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					name:      "container_last_seen",
0000000000000000000000000000000000000000;;					help:      "Last time a container was seen by the exporter",
0000000000000000000000000000000000000000;;					valueType: prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(time.Now().Unix())}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_cpu_user_seconds_total",
0000000000000000000000000000000000000000;;					help:      "Cumulative user cpu time consumed in seconds.",
0000000000000000000000000000000000000000;;					valueType: prometheus.CounterValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Cpu.Usage.User) / float64(time.Second)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_cpu_system_seconds_total",
0000000000000000000000000000000000000000;;					help:      "Cumulative system cpu time consumed in seconds.",
0000000000000000000000000000000000000000;;					valueType: prometheus.CounterValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Cpu.Usage.System) / float64(time.Second)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_cpu_usage_seconds_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative cpu time consumed per cpu in seconds.",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"cpu"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Cpu.Usage.PerCpu))
0000000000000000000000000000000000000000;;						for i, value := range s.Cpu.Usage.PerCpu {
0000000000000000000000000000000000000000;;							if value > 0 {
0000000000000000000000000000000000000000;;								values = append(values, metricValue{
0000000000000000000000000000000000000000;;									value:  float64(value) / float64(time.Second),
0000000000000000000000000000000000000000;;									labels: []string{fmt.Sprintf("cpu%02d", i)},
0000000000000000000000000000000000000000;;								})
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_cpu_cfs_periods_total",
0000000000000000000000000000000000000000;;					help:      "Number of elapsed enforcement period intervals.",
0000000000000000000000000000000000000000;;					valueType: prometheus.CounterValue,
0000000000000000000000000000000000000000;;					condition: func(s info.ContainerSpec) bool { return s.Cpu.Quota != 0 },
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Cpu.CFS.Periods)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_cpu_cfs_throttled_periods_total",
0000000000000000000000000000000000000000;;					help:      "Number of throttled period intervals.",
0000000000000000000000000000000000000000;;					valueType: prometheus.CounterValue,
0000000000000000000000000000000000000000;;					condition: func(s info.ContainerSpec) bool { return s.Cpu.Quota != 0 },
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Cpu.CFS.ThrottledPeriods)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_cpu_cfs_throttled_seconds_total",
0000000000000000000000000000000000000000;;					help:      "Total time duration the container has been throttled.",
0000000000000000000000000000000000000000;;					valueType: prometheus.CounterValue,
0000000000000000000000000000000000000000;;					condition: func(s info.ContainerSpec) bool { return s.Cpu.Quota != 0 },
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Cpu.CFS.ThrottledTime) / float64(time.Second)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_memory_cache",
0000000000000000000000000000000000000000;;					help:      "Number of bytes of page cache memory.",
0000000000000000000000000000000000000000;;					valueType: prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Memory.Cache)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_memory_rss",
0000000000000000000000000000000000000000;;					help:      "Size of RSS in bytes.",
0000000000000000000000000000000000000000;;					valueType: prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Memory.RSS)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_memory_swap",
0000000000000000000000000000000000000000;;					help:      "Container swap usage in bytes.",
0000000000000000000000000000000000000000;;					valueType: prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Memory.Swap)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_memory_failcnt",
0000000000000000000000000000000000000000;;					help:      "Number of memory usage hits limits",
0000000000000000000000000000000000000000;;					valueType: prometheus.CounterValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Memory.Failcnt)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_memory_usage_bytes",
0000000000000000000000000000000000000000;;					help:      "Current memory usage in bytes.",
0000000000000000000000000000000000000000;;					valueType: prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Memory.Usage)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:      "container_memory_working_set_bytes",
0000000000000000000000000000000000000000;;					help:      "Current working set in bytes.",
0000000000000000000000000000000000000000;;					valueType: prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{{value: float64(s.Memory.WorkingSet)}}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_memory_failures_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of memory allocation failures.",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"type", "scope"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.Memory.ContainerData.Pgfault),
0000000000000000000000000000000000000000;;								labels: []string{"pgfault", "container"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.Memory.ContainerData.Pgmajfault),
0000000000000000000000000000000000000000;;								labels: []string{"pgmajfault", "container"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.Memory.HierarchicalData.Pgfault),
0000000000000000000000000000000000000000;;								labels: []string{"pgfault", "hierarchy"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.Memory.HierarchicalData.Pgmajfault),
0000000000000000000000000000000000000000;;								labels: []string{"pgmajfault", "hierarchy"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_inodes_free",
0000000000000000000000000000000000000000;;					help:        "Number of available Inodes",
0000000000000000000000000000000000000000;;					valueType:   prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;							return float64(fs.InodesFree)
0000000000000000000000000000000000000000;;						})
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_inodes_total",
0000000000000000000000000000000000000000;;					help:        "Number of Inodes",
0000000000000000000000000000000000000000;;					valueType:   prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;							return float64(fs.Inodes)
0000000000000000000000000000000000000000;;						})
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_limit_bytes",
0000000000000000000000000000000000000000;;					help:        "Number of bytes that can be consumed by the container on this filesystem.",
0000000000000000000000000000000000000000;;					valueType:   prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;							return float64(fs.Limit)
0000000000000000000000000000000000000000;;						})
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_usage_bytes",
0000000000000000000000000000000000000000;;					help:        "Number of bytes that are consumed by the container on this filesystem.",
0000000000000000000000000000000000000000;;					valueType:   prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;							return float64(fs.Usage)
0000000000000000000000000000000000000000;;						})
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_reads_bytes_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of bytes read",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoServiceBytes, "Read", asFloat64,
0000000000000000000000000000000000000000;;							nil, nil,
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_reads_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of reads completed",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoServiced, "Read", asFloat64,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.ReadsCompleted)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_sector_reads_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of sector reads completed",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.Sectors, "Read", asFloat64,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.SectorsRead)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_reads_merged_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of reads merged",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoMerged, "Read", asFloat64,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.ReadsMerged)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_read_seconds_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of seconds spent reading",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoServiceTime, "Read", asNanosecondsToSeconds,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.ReadTime) / float64(time.Second)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_writes_bytes_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of bytes written",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoServiceBytes, "Write", asFloat64,
0000000000000000000000000000000000000000;;							nil, nil,
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_writes_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of writes completed",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoServiced, "Write", asFloat64,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.WritesCompleted)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_sector_writes_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of sector writes completed",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.Sectors, "Write", asFloat64,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.SectorsWritten)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_writes_merged_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of writes merged",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoMerged, "Write", asFloat64,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.WritesMerged)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_write_seconds_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of seconds spent writing",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoServiceTime, "Write", asNanosecondsToSeconds,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.WriteTime) / float64(time.Second)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_io_current",
0000000000000000000000000000000000000000;;					help:        "Number of I/Os currently in progress",
0000000000000000000000000000000000000000;;					valueType:   prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoQueued, "Total", asFloat64,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(fs.IoInProgress)
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_io_time_seconds_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of seconds spent doing I/Os",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return ioValues(
0000000000000000000000000000000000000000;;							s.DiskIo.IoServiceTime, "Total", asNanosecondsToSeconds,
0000000000000000000000000000000000000000;;							s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;								return float64(float64(fs.IoTime) / float64(time.Second))
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						)
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_fs_io_time_weighted_seconds_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative weighted I/O time in seconds",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"device"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
0000000000000000000000000000000000000000;;							return float64(fs.WeightedIoTime) / float64(time.Second)
0000000000000000000000000000000000000000;;						})
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_network_receive_bytes_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of bytes received",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"interface"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Network.Interfaces))
0000000000000000000000000000000000000000;;						for _, value := range s.Network.Interfaces {
0000000000000000000000000000000000000000;;							values = append(values, metricValue{
0000000000000000000000000000000000000000;;								value:  float64(value.RxBytes),
0000000000000000000000000000000000000000;;								labels: []string{value.Name},
0000000000000000000000000000000000000000;;							})
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_network_receive_packets_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of packets received",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"interface"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Network.Interfaces))
0000000000000000000000000000000000000000;;						for _, value := range s.Network.Interfaces {
0000000000000000000000000000000000000000;;							values = append(values, metricValue{
0000000000000000000000000000000000000000;;								value:  float64(value.RxPackets),
0000000000000000000000000000000000000000;;								labels: []string{value.Name},
0000000000000000000000000000000000000000;;							})
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_network_receive_packets_dropped_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of packets dropped while receiving",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"interface"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Network.Interfaces))
0000000000000000000000000000000000000000;;						for _, value := range s.Network.Interfaces {
0000000000000000000000000000000000000000;;							values = append(values, metricValue{
0000000000000000000000000000000000000000;;								value:  float64(value.RxDropped),
0000000000000000000000000000000000000000;;								labels: []string{value.Name},
0000000000000000000000000000000000000000;;							})
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_network_receive_errors_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of errors encountered while receiving",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"interface"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Network.Interfaces))
0000000000000000000000000000000000000000;;						for _, value := range s.Network.Interfaces {
0000000000000000000000000000000000000000;;							values = append(values, metricValue{
0000000000000000000000000000000000000000;;								value:  float64(value.RxErrors),
0000000000000000000000000000000000000000;;								labels: []string{value.Name},
0000000000000000000000000000000000000000;;							})
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_network_transmit_bytes_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of bytes transmitted",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"interface"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Network.Interfaces))
0000000000000000000000000000000000000000;;						for _, value := range s.Network.Interfaces {
0000000000000000000000000000000000000000;;							values = append(values, metricValue{
0000000000000000000000000000000000000000;;								value:  float64(value.TxBytes),
0000000000000000000000000000000000000000;;								labels: []string{value.Name},
0000000000000000000000000000000000000000;;							})
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_network_transmit_packets_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of packets transmitted",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"interface"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Network.Interfaces))
0000000000000000000000000000000000000000;;						for _, value := range s.Network.Interfaces {
0000000000000000000000000000000000000000;;							values = append(values, metricValue{
0000000000000000000000000000000000000000;;								value:  float64(value.TxPackets),
0000000000000000000000000000000000000000;;								labels: []string{value.Name},
0000000000000000000000000000000000000000;;							})
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_network_transmit_packets_dropped_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of packets dropped while transmitting",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"interface"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Network.Interfaces))
0000000000000000000000000000000000000000;;						for _, value := range s.Network.Interfaces {
0000000000000000000000000000000000000000;;							values = append(values, metricValue{
0000000000000000000000000000000000000000;;								value:  float64(value.TxDropped),
0000000000000000000000000000000000000000;;								labels: []string{value.Name},
0000000000000000000000000000000000000000;;							})
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_network_transmit_errors_total",
0000000000000000000000000000000000000000;;					help:        "Cumulative count of errors encountered while transmitting",
0000000000000000000000000000000000000000;;					valueType:   prometheus.CounterValue,
0000000000000000000000000000000000000000;;					extraLabels: []string{"interface"},
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						values := make(metricValues, 0, len(s.Network.Interfaces))
0000000000000000000000000000000000000000;;						for _, value := range s.Network.Interfaces {
0000000000000000000000000000000000000000;;							values = append(values, metricValue{
0000000000000000000000000000000000000000;;								value:  float64(value.TxErrors),
0000000000000000000000000000000000000000;;								labels: []string{value.Name},
0000000000000000000000000000000000000000;;							})
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return values
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					name:        "container_tasks_state",
0000000000000000000000000000000000000000;;					help:        "Number of tasks in given state",
0000000000000000000000000000000000000000;;					extraLabels: []string{"state"},
0000000000000000000000000000000000000000;;					valueType:   prometheus.GaugeValue,
0000000000000000000000000000000000000000;;					getValues: func(s *info.ContainerStats) metricValues {
0000000000000000000000000000000000000000;;						return metricValues{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.TaskStats.NrSleeping),
0000000000000000000000000000000000000000;;								labels: []string{"sleeping"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.TaskStats.NrRunning),
0000000000000000000000000000000000000000;;								labels: []string{"running"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.TaskStats.NrStopped),
0000000000000000000000000000000000000000;;								labels: []string{"stopped"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.TaskStats.NrUninterruptible),
0000000000000000000000000000000000000000;;								labels: []string{"uninterruptible"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								value:  float64(s.TaskStats.NrIoWait),
0000000000000000000000000000000000000000;;								labels: []string{"iowaiting"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		versionInfoDesc       = prometheus.NewDesc("cadvisor_version_info", "A metric with a constant '1' value labeled by kernel version, OS version, docker version, cadvisor version & cadvisor revision.", []string{"kernelVersion", "osVersion", "dockerVersion", "cadvisorVersion", "cadvisorRevision"}, nil)
0000000000000000000000000000000000000000;;		machineInfoCoresDesc  = prometheus.NewDesc("machine_cpu_cores", "Number of CPU cores on the machine.", nil, nil)
0000000000000000000000000000000000000000;;		machineInfoMemoryDesc = prometheus.NewDesc("machine_memory_bytes", "Amount of memory installed on the machine.", nil, nil)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describe describes all the metrics ever exported by cadvisor. It
0000000000000000000000000000000000000000;;	// implements prometheus.PrometheusCollector.
0000000000000000000000000000000000000000;;	func (c *PrometheusCollector) Describe(ch chan<- *prometheus.Desc) {
0000000000000000000000000000000000000000;;		c.errors.Describe(ch)
0000000000000000000000000000000000000000;;		for _, cm := range c.containerMetrics {
0000000000000000000000000000000000000000;;			ch <- cm.desc([]string{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ch <- versionInfoDesc
0000000000000000000000000000000000000000;;		ch <- machineInfoCoresDesc
0000000000000000000000000000000000000000;;		ch <- machineInfoMemoryDesc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Collect fetches the stats from all containers and delivers them as
0000000000000000000000000000000000000000;;	// Prometheus metrics. It implements prometheus.PrometheusCollector.
0000000000000000000000000000000000000000;;	func (c *PrometheusCollector) Collect(ch chan<- prometheus.Metric) {
0000000000000000000000000000000000000000;;		c.errors.Set(0)
0000000000000000000000000000000000000000;;		c.collectMachineInfo(ch)
0000000000000000000000000000000000000000;;		c.collectVersionInfo(ch)
0000000000000000000000000000000000000000;;		c.collectContainersInfo(ch)
0000000000000000000000000000000000000000;;		c.errors.Collect(ch)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ContainerLabelPrefix is the prefix added to all container labels.
0000000000000000000000000000000000000000;;		ContainerLabelPrefix = "container_label_"
0000000000000000000000000000000000000000;;		// ContainerEnvPrefix is the prefix added to all env variable labels.
0000000000000000000000000000000000000000;;		ContainerEnvPrefix = "container_env_"
0000000000000000000000000000000000000000;;		// LabelID is the name of the id label.
0000000000000000000000000000000000000000;;		LabelID = "id"
0000000000000000000000000000000000000000;;		// LabelName is the name of the name label.
0000000000000000000000000000000000000000;;		LabelName = "name"
0000000000000000000000000000000000000000;;		// LabelImage is the name of the image label.
0000000000000000000000000000000000000000;;		LabelImage = "image"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultContainerLabels implements ContainerLabelsFunc. It exports the
0000000000000000000000000000000000000000;;	// container name, first alias, image name as well as all its env and label
0000000000000000000000000000000000000000;;	// values.
0000000000000000000000000000000000000000;;	func DefaultContainerLabels(container *info.ContainerInfo) map[string]string {
0000000000000000000000000000000000000000;;		set := map[string]string{LabelID: container.Name}
0000000000000000000000000000000000000000;;		if len(container.Aliases) > 0 {
0000000000000000000000000000000000000000;;			set[LabelName] = container.Aliases[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if image := container.Spec.Image; len(image) > 0 {
0000000000000000000000000000000000000000;;			set[LabelImage] = image
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range container.Spec.Labels {
0000000000000000000000000000000000000000;;			set[ContainerLabelPrefix+k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range container.Spec.Envs {
0000000000000000000000000000000000000000;;			set[ContainerEnvPrefix+k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return set
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PrometheusCollector) collectContainersInfo(ch chan<- prometheus.Metric) {
0000000000000000000000000000000000000000;;		containers, err := c.infoProvider.SubcontainersInfo("/", &info.ContainerInfoRequest{NumStats: 1})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			c.errors.Set(1)
0000000000000000000000000000000000000000;;			glog.Warningf("Couldn't get containers: %s", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, container := range containers {
0000000000000000000000000000000000000000;;			labels, values := []string{}, []string{}
0000000000000000000000000000000000000000;;			for l, v := range c.containerLabelsFunc(container) {
0000000000000000000000000000000000000000;;				labels = append(labels, sanitizeLabelName(l))
0000000000000000000000000000000000000000;;				values = append(values, v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Container spec
0000000000000000000000000000000000000000;;			desc := prometheus.NewDesc("container_start_time_seconds", "Start time of the container since unix epoch in seconds.", labels, nil)
0000000000000000000000000000000000000000;;			ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, float64(container.Spec.CreationTime.Unix()), values...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if container.Spec.HasCpu {
0000000000000000000000000000000000000000;;				desc = prometheus.NewDesc("container_spec_cpu_period", "CPU period of the container.", labels, nil)
0000000000000000000000000000000000000000;;				ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, float64(container.Spec.Cpu.Period), values...)
0000000000000000000000000000000000000000;;				if container.Spec.Cpu.Quota != 0 {
0000000000000000000000000000000000000000;;					desc = prometheus.NewDesc("container_spec_cpu_quota", "CPU quota of the container.", labels, nil)
0000000000000000000000000000000000000000;;					ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, float64(container.Spec.Cpu.Quota), values...)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				desc := prometheus.NewDesc("container_spec_cpu_shares", "CPU share of the container.", labels, nil)
0000000000000000000000000000000000000000;;				ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, float64(container.Spec.Cpu.Limit), values...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if container.Spec.HasMemory {
0000000000000000000000000000000000000000;;				desc := prometheus.NewDesc("container_spec_memory_limit_bytes", "Memory limit for the container.", labels, nil)
0000000000000000000000000000000000000000;;				ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, specMemoryValue(container.Spec.Memory.Limit), values...)
0000000000000000000000000000000000000000;;				desc = prometheus.NewDesc("container_spec_memory_swap_limit_bytes", "Memory swap limit for the container.", labels, nil)
0000000000000000000000000000000000000000;;				ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, specMemoryValue(container.Spec.Memory.SwapLimit), values...)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Now for the actual metrics
0000000000000000000000000000000000000000;;			stats := container.Stats[0]
0000000000000000000000000000000000000000;;			for _, cm := range c.containerMetrics {
0000000000000000000000000000000000000000;;				if cm.condition != nil && !cm.condition(container.Spec) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				desc := cm.desc(labels)
0000000000000000000000000000000000000000;;				for _, metricValue := range cm.getValues(stats) {
0000000000000000000000000000000000000000;;					ch <- prometheus.MustNewConstMetric(desc, cm.valueType, float64(metricValue.value), append(values, metricValue.labels...)...)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PrometheusCollector) collectVersionInfo(ch chan<- prometheus.Metric) {
0000000000000000000000000000000000000000;;		versionInfo, err := c.infoProvider.GetVersionInfo()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			c.errors.Set(1)
0000000000000000000000000000000000000000;;			glog.Warningf("Couldn't get version info: %s", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ch <- prometheus.MustNewConstMetric(versionInfoDesc, prometheus.GaugeValue, 1, []string{versionInfo.KernelVersion, versionInfo.ContainerOsVersion, versionInfo.DockerVersion, versionInfo.CadvisorVersion, versionInfo.CadvisorRevision}...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PrometheusCollector) collectMachineInfo(ch chan<- prometheus.Metric) {
0000000000000000000000000000000000000000;;		machineInfo, err := c.infoProvider.GetMachineInfo()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			c.errors.Set(1)
0000000000000000000000000000000000000000;;			glog.Warningf("Couldn't get machine info: %s", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ch <- prometheus.MustNewConstMetric(machineInfoCoresDesc, prometheus.GaugeValue, float64(machineInfo.NumCores))
0000000000000000000000000000000000000000;;		ch <- prometheus.MustNewConstMetric(machineInfoMemoryDesc, prometheus.GaugeValue, float64(machineInfo.MemoryCapacity))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Size after which we consider memory to be "unlimited". This is not
0000000000000000000000000000000000000000;;	// MaxInt64 due to rounding by the kernel.
0000000000000000000000000000000000000000;;	const maxMemorySize = uint64(1 << 62)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func specMemoryValue(v uint64) float64 {
0000000000000000000000000000000000000000;;		if v > maxMemorySize {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return float64(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var invalidLabelCharRE = regexp.MustCompile(`[^a-zA-Z0-9_]`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sanitizeLabelName replaces anything that doesn't match
0000000000000000000000000000000000000000;;	// client_label.LabelNameRE with an underscore.
0000000000000000000000000000000000000000;;	func sanitizeLabelName(name string) string {
0000000000000000000000000000000000000000;;		return invalidLabelCharRE.ReplaceAllString(name, "_")
0000000000000000000000000000000000000000;;	}
