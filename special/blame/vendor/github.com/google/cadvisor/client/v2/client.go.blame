0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
bacba8daa0ff853009b9f6fc0f2aceef702255f4;;	
0000000000000000000000000000000000000000;;	// Client library to programmatically access cAdvisor API.
0000000000000000000000000000000000000000;;	package v2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v1 "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Client represents the base URL for a cAdvisor client.
0000000000000000000000000000000000000000;;	type Client struct {
0000000000000000000000000000000000000000;;		baseUrl string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClient returns a new client with the specified base URL.
0000000000000000000000000000000000000000;;	func NewClient(url string) (*Client, error) {
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(url, "/") {
0000000000000000000000000000000000000000;;			url += "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Client{
0000000000000000000000000000000000000000;;			baseUrl: fmt.Sprintf("%sapi/v2.1/", url),
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MachineInfo returns the JSON machine information for this client.
0000000000000000000000000000000000000000;;	// A non-nil error result indicates a problem with obtaining
0000000000000000000000000000000000000000;;	// the JSON machine information data.
0000000000000000000000000000000000000000;;	func (self *Client) MachineInfo() (minfo *v1.MachineInfo, err error) {
0000000000000000000000000000000000000000;;		u := self.machineInfoUrl()
0000000000000000000000000000000000000000;;		ret := new(v1.MachineInfo)
0000000000000000000000000000000000000000;;		if err = self.httpGetJsonData(ret, nil, u, "machine info"); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		minfo = ret
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MachineStats returns the JSON machine statistics for this client.
0000000000000000000000000000000000000000;;	// A non-nil error result indicates a problem with obtaining
0000000000000000000000000000000000000000;;	// the JSON machine information data.
0000000000000000000000000000000000000000;;	func (self *Client) MachineStats() ([]v2.MachineStats, error) {
0000000000000000000000000000000000000000;;		var ret []v2.MachineStats
0000000000000000000000000000000000000000;;		u := self.machineStatsUrl()
0000000000000000000000000000000000000000;;		err := self.httpGetJsonData(&ret, nil, u, "machine stats")
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VersionInfo returns the version info for cAdvisor.
0000000000000000000000000000000000000000;;	func (self *Client) VersionInfo() (version string, err error) {
0000000000000000000000000000000000000000;;		u := self.versionInfoUrl()
0000000000000000000000000000000000000000;;		version, err = self.httpGetString(u, "version info")
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attributes returns hardware and software attributes of the machine.
0000000000000000000000000000000000000000;;	func (self *Client) Attributes() (attr *v2.Attributes, err error) {
0000000000000000000000000000000000000000;;		u := self.attributesUrl()
0000000000000000000000000000000000000000;;		ret := new(v2.Attributes)
0000000000000000000000000000000000000000;;		if err = self.httpGetJsonData(ret, nil, u, "attributes"); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		attr = ret
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stats returns stats for the requested container.
0000000000000000000000000000000000000000;;	func (self *Client) Stats(name string, request *v2.RequestOptions) (map[string]v2.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		u := self.statsUrl(name)
0000000000000000000000000000000000000000;;		ret := make(map[string]v2.ContainerInfo)
0000000000000000000000000000000000000000;;		data := url.Values{
0000000000000000000000000000000000000000;;			"type":      []string{request.IdType},
0000000000000000000000000000000000000000;;			"count":     []string{strconv.Itoa(request.Count)},
0000000000000000000000000000000000000000;;			"recursive": []string{strconv.FormatBool(request.Recursive)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u = fmt.Sprintf("%s?%s", u, data.Encode())
0000000000000000000000000000000000000000;;		if err := self.httpGetJsonData(&ret, nil, u, "stats"); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) machineInfoUrl() string {
0000000000000000000000000000000000000000;;		return self.baseUrl + path.Join("machine")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) machineStatsUrl() string {
0000000000000000000000000000000000000000;;		return self.baseUrl + path.Join("machinestats")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) versionInfoUrl() string {
0000000000000000000000000000000000000000;;		return self.baseUrl + path.Join("version")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) attributesUrl() string {
0000000000000000000000000000000000000000;;		return self.baseUrl + path.Join("attributes")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) statsUrl(name string) string {
0000000000000000000000000000000000000000;;		return self.baseUrl + path.Join("stats", name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) httpGetResponse(postData interface{}, urlPath, infoName string) ([]byte, error) {
0000000000000000000000000000000000000000;;		var resp *http.Response
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if postData != nil {
0000000000000000000000000000000000000000;;			data, marshalErr := json.Marshal(postData)
0000000000000000000000000000000000000000;;			if marshalErr != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unable to marshal data: %v", marshalErr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resp, err = http.Post(urlPath, "application/json", bytes.NewBuffer(data))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			resp, err = http.Get(urlPath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unable to post %q to %q: %v", infoName, urlPath, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("received empty response for %q from %q", infoName, urlPath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		body, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("unable to read all %q from %q: %v", infoName, urlPath, err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != 200 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("request %q failed with error: %q", urlPath, strings.TrimSpace(string(body)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return body, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) httpGetString(url, infoName string) (string, error) {
0000000000000000000000000000000000000000;;		body, err := self.httpGetResponse(nil, url, infoName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(body), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) httpGetJsonData(data, postData interface{}, url, infoName string) error {
0000000000000000000000000000000000000000;;		body, err := self.httpGetResponse(postData, url, infoName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = json.Unmarshal(body, data); err != nil {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("unable to unmarshal %q (Body: %q) from %q with error: %v", infoName, string(body), url, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
