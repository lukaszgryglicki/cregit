0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
ddb91896b60df07452d87846c6343678b1c48dde;Godeps/_workspace/src/github.com/google/cadvisor/http/handlers.go[Godeps/_workspace/src/github.com/google/cadvisor/http/handlers.go][vendor/github.com/google/cadvisor/http/handlers.go];	
0000000000000000000000000000000000000000;;	package http
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/api"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/healthz"
0000000000000000000000000000000000000000;;		httpmux "github.com/google/cadvisor/http/mux"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/manager"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/metrics"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/pages"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/pages/static"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/validate"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		auth "github.com/abbot/go-http-auth"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus/promhttp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegisterHandlers(mux httpmux.Mux, containerManager manager.Manager, httpAuthFile, httpAuthRealm, httpDigestFile, httpDigestRealm string) error {
0000000000000000000000000000000000000000;;		// Basic health handler.
0000000000000000000000000000000000000000;;		if err := healthz.RegisterHandler(mux); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to register healthz handler: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validation/Debug handler.
0000000000000000000000000000000000000000;;		mux.HandleFunc(validate.ValidatePage, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			err := validate.HandleRequest(w, containerManager)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, "%s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Register API handler.
0000000000000000000000000000000000000000;;		if err := api.RegisterHandlers(mux, containerManager); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to register API handlers: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Redirect / to containers page.
0000000000000000000000000000000000000000;;		mux.Handle("/", http.RedirectHandler(pages.ContainersPage, http.StatusTemporaryRedirect))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var authenticated bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Setup the authenticator object
0000000000000000000000000000000000000000;;		if httpAuthFile != "" {
0000000000000000000000000000000000000000;;			glog.Infof("Using auth file %s", httpAuthFile)
0000000000000000000000000000000000000000;;			secrets := auth.HtpasswdFileProvider(httpAuthFile)
0000000000000000000000000000000000000000;;			authenticator := auth.NewBasicAuthenticator(httpAuthRealm, secrets)
0000000000000000000000000000000000000000;;			mux.HandleFunc(static.StaticResource, authenticator.Wrap(staticHandler))
0000000000000000000000000000000000000000;;			if err := pages.RegisterHandlersBasic(mux, containerManager, authenticator); err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to register pages auth handlers: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			authenticated = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if httpAuthFile == "" && httpDigestFile != "" {
0000000000000000000000000000000000000000;;			glog.Infof("Using digest file %s", httpDigestFile)
0000000000000000000000000000000000000000;;			secrets := auth.HtdigestFileProvider(httpDigestFile)
0000000000000000000000000000000000000000;;			authenticator := auth.NewDigestAuthenticator(httpDigestRealm, secrets)
0000000000000000000000000000000000000000;;			mux.HandleFunc(static.StaticResource, authenticator.Wrap(staticHandler))
0000000000000000000000000000000000000000;;			if err := pages.RegisterHandlersDigest(mux, containerManager, authenticator); err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to register pages digest handlers: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			authenticated = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Change handler based on authenticator initalization
0000000000000000000000000000000000000000;;		if !authenticated {
0000000000000000000000000000000000000000;;			mux.HandleFunc(static.StaticResource, staticHandlerNoAuth)
0000000000000000000000000000000000000000;;			if err := pages.RegisterHandlersBasic(mux, containerManager, nil); err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to register pages handlers: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterPrometheusHandler creates a new PrometheusCollector and configures
0000000000000000000000000000000000000000;;	// the provided HTTP mux to handle the given Prometheus endpoint.
0000000000000000000000000000000000000000;;	func RegisterPrometheusHandler(mux httpmux.Mux, containerManager manager.Manager, prometheusEndpoint string, f metrics.ContainerLabelsFunc) {
0000000000000000000000000000000000000000;;		r := prometheus.NewRegistry()
0000000000000000000000000000000000000000;;		r.MustRegister(
0000000000000000000000000000000000000000;;			metrics.NewPrometheusCollector(containerManager, f),
0000000000000000000000000000000000000000;;			prometheus.NewGoCollector(),
0000000000000000000000000000000000000000;;			prometheus.NewProcessCollector(os.Getpid(), ""),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		mux.Handle(prometheusEndpoint, promhttp.HandlerFor(r, promhttp.HandlerOpts{ErrorHandling: promhttp.ContinueOnError}))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func staticHandlerNoAuth(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		err := static.HandleRequest(w, r.URL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "%s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func staticHandler(w http.ResponseWriter, r *auth.AuthenticatedRequest) {
0000000000000000000000000000000000000000;;		err := static.HandleRequest(w, r.URL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "%s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
