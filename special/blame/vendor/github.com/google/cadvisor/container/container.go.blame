0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/container/container.go[Godeps/_workspace/src/github.com/google/cadvisor/container/container.go][vendor/github.com/google/cadvisor/container/container.go];	
0000000000000000000000000000000000000000;;	// Package container defines types for sub-container events and also
0000000000000000000000000000000000000000;;	// defines an interface for container operation handlers.
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListType describes whether listing should be just for a
0000000000000000000000000000000000000000;;	// specific container or performed recursively.
0000000000000000000000000000000000000000;;	type ListType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ListSelf ListType = iota
0000000000000000000000000000000000000000;;		ListRecursive
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ContainerTypeRaw ContainerType = iota
0000000000000000000000000000000000000000;;		ContainerTypeDocker
0000000000000000000000000000000000000000;;		ContainerTypeRkt
0000000000000000000000000000000000000000;;		ContainerTypeSystemd
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface for container operation handlers.
0000000000000000000000000000000000000000;;	type ContainerHandler interface {
0000000000000000000000000000000000000000;;		// Returns the ContainerReference
0000000000000000000000000000000000000000;;		ContainerReference() (info.ContainerReference, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns container's isolation spec.
0000000000000000000000000000000000000000;;		GetSpec() (info.ContainerSpec, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the current stats values of the container.
0000000000000000000000000000000000000000;;		GetStats() (*info.ContainerStats, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the subcontainers of this container.
0000000000000000000000000000000000000000;;		ListContainers(listType ListType) ([]info.ContainerReference, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the processes inside this container.
0000000000000000000000000000000000000000;;		ListProcesses(listType ListType) ([]int, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns absolute cgroup path for the requested resource.
0000000000000000000000000000000000000000;;		GetCgroupPath(resource string) (string, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns container labels, if available.
0000000000000000000000000000000000000000;;		GetContainerLabels() map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the container's ip address, if available
0000000000000000000000000000000000000000;;		GetContainerIPAddress() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns whether the container still exists.
0000000000000000000000000000000000000000;;		Exists() bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Cleanup frees up any resources being held like fds or go routines, etc.
0000000000000000000000000000000000000000;;		Cleanup()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start starts any necessary background goroutines - must be cleaned up in Cleanup().
0000000000000000000000000000000000000000;;		// It is expected that most implementations will be a no-op.
0000000000000000000000000000000000000000;;		Start()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type of handler
0000000000000000000000000000000000000000;;		Type() ContainerType
0000000000000000000000000000000000000000;;	}
