0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d5fa6cf31825f06f168e8c9a6e5568ec5d58ce4f;Godeps/_workspace/src/github.com/google/cadvisor/container/rkt/helpers.go[Godeps/_workspace/src/github.com/google/cadvisor/container/rkt/helpers.go][vendor/github.com/google/cadvisor/container/rkt/helpers.go];	
0000000000000000000000000000000000000000;;	package rkt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rktapi "github.com/coreos/rkt/api/v1alpha"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type parsedName struct {
0000000000000000000000000000000000000000;;		Pod       string
0000000000000000000000000000000000000000;;		Container string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyPod(name string) (bool, error) {
0000000000000000000000000000000000000000;;		pod, err := cgroupToPod(name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil || pod == nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Anything handler can handle is also accepted.
0000000000000000000000000000000000000000;;		// Accept cgroups that are sub the pod cgroup, except "system.slice"
0000000000000000000000000000000000000000;;		//   - "system.slice" doesn't contain any processes itself
0000000000000000000000000000000000000000;;		accept := !strings.HasSuffix(name, "/system.slice")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return accept, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func cgroupToPod(name string) (*rktapi.Pod, error) {
0000000000000000000000000000000000000000;;		rktClient, err := Client()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("couldn't get rkt api service: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := rktClient.ListPods(context.Background(), &rktapi.ListPodsRequest{
0000000000000000000000000000000000000000;;			Filters: []*rktapi.PodFilter{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					States:        []rktapi.PodState{rktapi.PodState_POD_STATE_RUNNING},
0000000000000000000000000000000000000000;;					PodSubCgroups: []string{name},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to list pods: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(resp.Pods) == 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(resp.Pods) != 1 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("returned %d (expected 1) pods for cgroup %v", len(resp.Pods), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp.Pods[0], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* Parse cgroup name into a pod/container name struct
0000000000000000000000000000000000000000;;	   Example cgroup fs name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   pod - /machine.slice/machine-rkt\\x2df556b64a\\x2d17a7\\x2d47d7\\x2d93ec\\x2def2275c3d67e.scope/
0000000000000000000000000000000000000000;;	    or   /system.slice/k8s-..../
0000000000000000000000000000000000000000;;	   container under pod - /machine.slice/machine-rkt\\x2df556b64a\\x2d17a7\\x2d47d7\\x2d93ec\\x2def2275c3d67e.scope/system.slice/alpine-sh.service
0000000000000000000000000000000000000000;;	    or  /system.slice/k8s-..../system.slice/pause.service
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	func parseName(name string) (*parsedName, error) {
0000000000000000000000000000000000000000;;		pod, err := cgroupToPod(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("parseName: couldn't convert %v to a rkt pod: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("parseName: didn't return a pod for %v", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		splits := strings.Split(name, "/")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parsed := &parsedName{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(splits) == 3 || len(splits) == 5 {
0000000000000000000000000000000000000000;;			parsed.Pod = pod.Id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(splits) == 5 {
0000000000000000000000000000000000000000;;				parsed.Container = strings.Replace(splits[4], ".service", "", -1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return parsed, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("%s not handled by rkt handler", name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets a Rkt container's overlay upper dir
0000000000000000000000000000000000000000;;	func getRootFs(root string, parsed *parsedName) string {
0000000000000000000000000000000000000000;;		/* Example of where it stores the upper dir key
0000000000000000000000000000000000000000;;		for container
0000000000000000000000000000000000000000;;			/var/lib/rkt/pods/run/bc793ec6-c48f-4480-99b5-6bec16d52210/appsinfo/alpine-sh/treeStoreID
0000000000000000000000000000000000000000;;		for pod
0000000000000000000000000000000000000000;;			/var/lib/rkt/pods/run/f556b64a-17a7-47d7-93ec-ef2275c3d67e/stage1TreeStoreID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var tree string
0000000000000000000000000000000000000000;;		if parsed.Container == "" {
0000000000000000000000000000000000000000;;			tree = path.Join(root, "pods/run", parsed.Pod, "stage1TreeStoreID")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			tree = path.Join(root, "pods/run", parsed.Pod, "appsinfo", parsed.Container, "treeStoreID")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bytes, err := ioutil.ReadFile(tree)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("ReadFile failed, couldn't read %v to get upper dir: %v", tree, err)
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := string(bytes)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		/* Example of where the upper dir is stored via key read above
0000000000000000000000000000000000000000;;		   /var/lib/rkt/pods/run/bc793ec6-c48f-4480-99b5-6bec16d52210/overlay/deps-sha512-82a099e560a596662b15dec835e9adabab539cad1f41776a30195a01a8f2f22b/
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;		return path.Join(root, "pods/run", parsed.Pod, "overlay", s)
0000000000000000000000000000000000000000;;	}
