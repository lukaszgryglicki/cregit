0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d5fa6cf31825f06f168e8c9a6e5568ec5d58ce4f;Godeps/_workspace/src/github.com/google/cadvisor/container/rkt/client.go[Godeps/_workspace/src/github.com/google/cadvisor/container/rkt/client.go][vendor/github.com/google/cadvisor/container/rkt/client.go];	
0000000000000000000000000000000000000000;;	package rkt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/blang/semver"
0000000000000000000000000000000000000000;;		rktapi "github.com/coreos/rkt/api/v1alpha"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		defaultRktAPIServiceAddr = "localhost:15441"
0000000000000000000000000000000000000000;;		timeout                  = 2 * time.Second
0000000000000000000000000000000000000000;;		minimumRktBinVersion     = "1.6.0"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		rktClient    rktapi.PublicAPIClient
0000000000000000000000000000000000000000;;		rktClientErr error
0000000000000000000000000000000000000000;;		once         sync.Once
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Client() (rktapi.PublicAPIClient, error) {
0000000000000000000000000000000000000000;;		once.Do(func() {
0000000000000000000000000000000000000000;;			conn, err := net.DialTimeout("tcp", defaultRktAPIServiceAddr, timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				rktClient = nil
0000000000000000000000000000000000000000;;				rktClientErr = fmt.Errorf("rkt: cannot tcp Dial rkt api service: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			conn.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			apisvcConn, err := grpc.Dial(defaultRktAPIServiceAddr, grpc.WithInsecure(), grpc.WithTimeout(timeout))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				rktClient = nil
0000000000000000000000000000000000000000;;				rktClientErr = fmt.Errorf("rkt: cannot grpc Dial rkt api service: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			apisvc := rktapi.NewPublicAPIClient(apisvcConn)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := apisvc.GetInfo(context.Background(), &rktapi.GetInfoRequest{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				rktClientErr = fmt.Errorf("rkt: GetInfo() failed: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			binVersion, err := semver.Make(resp.Info.RktVersion)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				rktClientErr = fmt.Errorf("rkt: couldn't parse RtVersion: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if binVersion.LT(semver.MustParse(minimumRktBinVersion)) {
0000000000000000000000000000000000000000;;				rktClientErr = fmt.Errorf("rkt: binary version is too old(%v), requires at least %v", resp.Info.RktVersion, minimumRktBinVersion)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			rktClient = apisvc
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return rktClient, rktClientErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RktPath() (string, error) {
0000000000000000000000000000000000000000;;		client, err := Client()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.GetInfo(context.Background(), &rktapi.GetInfoRequest{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("couldn't GetInfo from rkt api service: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp.Info.GlobalFlags.Dir, nil
0000000000000000000000000000000000000000;;	}
