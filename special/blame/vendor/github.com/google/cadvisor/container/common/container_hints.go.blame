0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/container/raw/container_hints.go[Godeps/_workspace/src/github.com/google/cadvisor/container/raw/container_hints.go][vendor/github.com/google/cadvisor/container/common/container_hints.go];	
0000000000000000000000000000000000000000;;	// Unmarshal's a Containers description json file. The json file contains
0000000000000000000000000000000000000000;;	// an array of ContainerHint structs, each with a container's id and networkInterface
0000000000000000000000000000000000000000;;	// This allows collecting stats about network interfaces configured outside docker
0000000000000000000000000000000000000000;;	// and lxc
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var ArgContainerHints = flag.String("container_hints", "/etc/cadvisor/container_hints.json", "location of the container hints file")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type containerHints struct {
0000000000000000000000000000000000000000;;		AllHosts []containerHint `json:"all_hosts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type containerHint struct {
0000000000000000000000000000000000000000;;		FullName         string            `json:"full_path,omitempty"`
0000000000000000000000000000000000000000;;		NetworkInterface *networkInterface `json:"network_interface,omitempty"`
0000000000000000000000000000000000000000;;		Mounts           []Mount           `json:"mounts,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Mount struct {
0000000000000000000000000000000000000000;;		HostDir      string `json:"host_dir,omitempty"`
0000000000000000000000000000000000000000;;		ContainerDir string `json:"container_dir,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type networkInterface struct {
0000000000000000000000000000000000000000;;		VethHost  string `json:"veth_host,omitempty"`
0000000000000000000000000000000000000000;;		VethChild string `json:"veth_child,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetContainerHintsFromFile(containerHintsFile string) (containerHints, error) {
0000000000000000000000000000000000000000;;		dat, err := ioutil.ReadFile(containerHintsFile)
0000000000000000000000000000000000000000;;		if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			return containerHints{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var cHints containerHints
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			err = json.Unmarshal(dat, &cHints)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cHints, err
0000000000000000000000000000000000000000;;	}
