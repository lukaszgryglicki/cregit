0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/container/raw/factory.go[Godeps/_workspace/src/github.com/google/cadvisor/container/raw/factory.go][vendor/github.com/google/cadvisor/container/raw/factory.go];	
0000000000000000000000000000000000000000;;	package raw
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/container"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/container/common"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/container/libcontainer"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/fs"
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		watch "github.com/google/cadvisor/manager/watcher"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var dockerOnly = flag.Bool("docker_only", false, "Only report docker containers in addition to root stats")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rawFactory struct {
0000000000000000000000000000000000000000;;		// Factory for machine information.
0000000000000000000000000000000000000000;;		machineInfoFactory info.MachineInfoFactory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the cgroup subsystems.
0000000000000000000000000000000000000000;;		cgroupSubsystems *libcontainer.CgroupSubsystems
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about mounted filesystems.
0000000000000000000000000000000000000000;;		fsInfo fs.FsInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Watcher for inotify events.
0000000000000000000000000000000000000000;;		watcher *common.InotifyWatcher
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of metrics to be ignored.
0000000000000000000000000000000000000000;;		ignoreMetrics map[container.MetricKind]struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *rawFactory) String() string {
0000000000000000000000000000000000000000;;		return "raw"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *rawFactory) NewContainerHandler(name string, inHostNamespace bool) (container.ContainerHandler, error) {
0000000000000000000000000000000000000000;;		rootFs := "/"
0000000000000000000000000000000000000000;;		if !inHostNamespace {
0000000000000000000000000000000000000000;;			rootFs = "/rootfs"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newRawContainerHandler(name, self.cgroupSubsystems, self.machineInfoFactory, self.fsInfo, self.watcher, rootFs, self.ignoreMetrics)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The raw factory can handle any container. If --docker_only is set to false, non-docker containers are ignored.
0000000000000000000000000000000000000000;;	func (self *rawFactory) CanHandleAndAccept(name string) (bool, bool, error) {
0000000000000000000000000000000000000000;;		accept := name == "/" || !*dockerOnly
0000000000000000000000000000000000000000;;		return true, accept, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *rawFactory) DebugInfo() map[string][]string {
0000000000000000000000000000000000000000;;		return common.DebugInfo(self.watcher.GetWatches())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Register(machineInfoFactory info.MachineInfoFactory, fsInfo fs.FsInfo, ignoreMetrics map[container.MetricKind]struct{}) error {
0000000000000000000000000000000000000000;;		cgroupSubsystems, err := libcontainer.GetCgroupSubsystems()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to get cgroup subsystems: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(cgroupSubsystems.Mounts) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to find supported cgroup mounts for the raw factory")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watcher, err := common.NewInotifyWatcher()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Infof("Registering Raw factory")
0000000000000000000000000000000000000000;;		factory := &rawFactory{
0000000000000000000000000000000000000000;;			machineInfoFactory: machineInfoFactory,
0000000000000000000000000000000000000000;;			fsInfo:             fsInfo,
0000000000000000000000000000000000000000;;			cgroupSubsystems:   &cgroupSubsystems,
0000000000000000000000000000000000000000;;			watcher:            watcher,
0000000000000000000000000000000000000000;;			ignoreMetrics:      ignoreMetrics,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		container.RegisterContainerHandlerFactory(factory, []watch.ContainerWatchSource{watch.Raw})
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
