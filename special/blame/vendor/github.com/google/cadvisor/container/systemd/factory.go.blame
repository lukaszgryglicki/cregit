0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d5fa6cf31825f06f168e8c9a6e5568ec5d58ce4f;Godeps/_workspace/src/github.com/google/cadvisor/container/systemd/factory.go[Godeps/_workspace/src/github.com/google/cadvisor/container/systemd/factory.go][vendor/github.com/google/cadvisor/container/systemd/factory.go];	
0000000000000000000000000000000000000000;;	package systemd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/container"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/fs"
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/manager/watcher"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type systemdFactory struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *systemdFactory) String() string {
0000000000000000000000000000000000000000;;		return "systemd"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *systemdFactory) NewContainerHandler(name string, inHostNamespace bool) (container.ContainerHandler, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Not yet supported")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *systemdFactory) CanHandleAndAccept(name string) (bool, bool, error) {
0000000000000000000000000000000000000000;;		// on systemd using devicemapper each mount into the container has an associated cgroup that we ignore.
0000000000000000000000000000000000000000;;		// for details on .mount units: http://man7.org/linux/man-pages/man5/systemd.mount.5.html
0000000000000000000000000000000000000000;;		if strings.HasSuffix(name, ".mount") {
0000000000000000000000000000000000000000;;			return true, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, false, fmt.Errorf("%s not handled by systemd handler", name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *systemdFactory) DebugInfo() map[string][]string {
0000000000000000000000000000000000000000;;		return map[string][]string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register registers the systemd container factory.
0000000000000000000000000000000000000000;;	func Register(machineInfoFactory info.MachineInfoFactory, fsInfo fs.FsInfo, ignoreMetrics container.MetricSet) error {
0000000000000000000000000000000000000000;;		glog.Infof("Registering systemd factory")
0000000000000000000000000000000000000000;;		factory := &systemdFactory{}
0000000000000000000000000000000000000000;;		container.RegisterContainerHandlerFactory(factory, []watcher.ContainerWatchSource{watcher.Raw})
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
