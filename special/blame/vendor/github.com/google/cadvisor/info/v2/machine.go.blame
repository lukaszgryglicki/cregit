0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5baafbd746e4fe64c8238ca334c8d170f6adfb55;Godeps/_workspace/src/github.com/google/cadvisor/info/v2/machine.go[Godeps/_workspace/src/github.com/google/cadvisor/info/v2/machine.go][vendor/github.com/google/cadvisor/info/v2/machine.go];	
0000000000000000000000000000000000000000;;	package v2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		// TODO(rjnagal): Move structs from v1.
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Attributes struct {
0000000000000000000000000000000000000000;;		// Kernel version.
0000000000000000000000000000000000000000;;		KernelVersion string `json:"kernel_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OS image being used for cadvisor container, or host image if running on host directly.
0000000000000000000000000000000000000000;;		ContainerOsVersion string `json:"container_os_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Docker version.
0000000000000000000000000000000000000000;;		DockerVersion string `json:"docker_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Docker API version.
0000000000000000000000000000000000000000;;		DockerAPIVersion string `json:"docker_api_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// cAdvisor version.
0000000000000000000000000000000000000000;;		CadvisorVersion string `json:"cadvisor_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of cores in this machine.
0000000000000000000000000000000000000000;;		NumCores int `json:"num_cores"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Maximum clock speed for the cores, in KHz.
0000000000000000000000000000000000000000;;		CpuFrequency uint64 `json:"cpu_frequency_khz"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The amount of memory (in bytes) in this machine
0000000000000000000000000000000000000000;;		MemoryCapacity uint64 `json:"memory_capacity"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The machine id
0000000000000000000000000000000000000000;;		MachineID string `json:"machine_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The system uuid
0000000000000000000000000000000000000000;;		SystemUUID string `json:"system_uuid"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filesystems on this machine.
0000000000000000000000000000000000000000;;		Filesystems []v1.FsInfo `json:"filesystems"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Disk map
0000000000000000000000000000000000000000;;		DiskMap map[string]v1.DiskInfo `json:"disk_map"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Network devices
0000000000000000000000000000000000000000;;		NetworkDevices []v1.NetInfo `json:"network_devices"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Machine Topology
0000000000000000000000000000000000000000;;		// Describes cpu/memory layout and hierarchy.
0000000000000000000000000000000000000000;;		Topology []v1.Node `json:"topology"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Cloud provider the machine belongs to
0000000000000000000000000000000000000000;;		CloudProvider v1.CloudProvider `json:"cloud_provider"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type of cloud instance (e.g. GCE standard) the machine is.
0000000000000000000000000000000000000000;;		InstanceType v1.InstanceType `json:"instance_type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetAttributes(mi *v1.MachineInfo, vi *v1.VersionInfo) Attributes {
0000000000000000000000000000000000000000;;		return Attributes{
0000000000000000000000000000000000000000;;			KernelVersion:      vi.KernelVersion,
0000000000000000000000000000000000000000;;			ContainerOsVersion: vi.ContainerOsVersion,
0000000000000000000000000000000000000000;;			DockerVersion:      vi.DockerVersion,
0000000000000000000000000000000000000000;;			DockerAPIVersion:   vi.DockerAPIVersion,
0000000000000000000000000000000000000000;;			CadvisorVersion:    vi.CadvisorVersion,
0000000000000000000000000000000000000000;;			NumCores:           mi.NumCores,
0000000000000000000000000000000000000000;;			CpuFrequency:       mi.CpuFrequency,
0000000000000000000000000000000000000000;;			MemoryCapacity:     mi.MemoryCapacity,
0000000000000000000000000000000000000000;;			MachineID:          mi.MachineID,
0000000000000000000000000000000000000000;;			SystemUUID:         mi.SystemUUID,
0000000000000000000000000000000000000000;;			Filesystems:        mi.Filesystems,
0000000000000000000000000000000000000000;;			DiskMap:            mi.DiskMap,
0000000000000000000000000000000000000000;;			NetworkDevices:     mi.NetworkDevices,
0000000000000000000000000000000000000000;;			Topology:           mi.Topology,
0000000000000000000000000000000000000000;;			CloudProvider:      mi.CloudProvider,
0000000000000000000000000000000000000000;;			InstanceType:       mi.InstanceType,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MachineStats contains usage statistics for the entire machine.
0000000000000000000000000000000000000000;;	type MachineStats struct {
0000000000000000000000000000000000000000;;		// The time of this stat point.
0000000000000000000000000000000000000000;;		Timestamp time.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;		// In nanoseconds (aggregated)
0000000000000000000000000000000000000000;;		Cpu *v1.CpuStats `json:"cpu,omitempty"`
0000000000000000000000000000000000000000;;		// In nanocores per second (instantaneous)
0000000000000000000000000000000000000000;;		CpuInst *CpuInstStats `json:"cpu_inst,omitempty"`
0000000000000000000000000000000000000000;;		// Memory statistics
0000000000000000000000000000000000000000;;		Memory *v1.MemoryStats `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		// Network statistics
0000000000000000000000000000000000000000;;		Network *NetworkStats `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		// Filesystem statistics
0000000000000000000000000000000000000000;;		Filesystem []MachineFsStats `json:"filesystem,omitempty"`
0000000000000000000000000000000000000000;;		// Task load statistics
0000000000000000000000000000000000000000;;		Load *v1.LoadStats `json:"load_stats,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MachineFsStats contains per filesystem capacity and usage information.
0000000000000000000000000000000000000000;;	type MachineFsStats struct {
0000000000000000000000000000000000000000;;		// The block device name associated with the filesystem.
0000000000000000000000000000000000000000;;		Device string `json:"device"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type of filesystem.
0000000000000000000000000000000000000000;;		Type string `json:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of bytes that can be consumed on this filesystem.
0000000000000000000000000000000000000000;;		Capacity *uint64 `json:"capacity,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of bytes that is currently consumed on this filesystem.
0000000000000000000000000000000000000000;;		Usage *uint64 `json:"usage,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of bytes available for non-root user on this filesystem.
0000000000000000000000000000000000000000;;		Available *uint64 `json:"available,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of inodes that are available on this filesystem.
0000000000000000000000000000000000000000;;		InodesFree *uint64 `json:"inodes_free,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DiskStats for this device.
0000000000000000000000000000000000000000;;		DiskStats `json:"inline"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DiskStats contains per partition usage information.
0000000000000000000000000000000000000000;;	// This information is only available at the machine level.
0000000000000000000000000000000000000000;;	type DiskStats struct {
0000000000000000000000000000000000000000;;		// Number of reads completed
0000000000000000000000000000000000000000;;		// This is the total number of reads completed successfully.
0000000000000000000000000000000000000000;;		ReadsCompleted *uint64 `json:"reads_completed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of reads merged
0000000000000000000000000000000000000000;;		// Reads and writes which are adjacent to each other may be merged for
0000000000000000000000000000000000000000;;		// efficiency.  Thus two 4K reads may become one 8K read before it is
0000000000000000000000000000000000000000;;		// ultimately handed to the disk, and so it will be counted (and queued)
0000000000000000000000000000000000000000;;		// as only one I/O.  This field lets you know how often this was done.
0000000000000000000000000000000000000000;;		ReadsMerged *uint64 `json:"reads_merged,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of sectors read
0000000000000000000000000000000000000000;;		// This is the total number of sectors read successfully.
0000000000000000000000000000000000000000;;		SectorsRead *uint64 `json:"sectors_read,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Time spent reading
0000000000000000000000000000000000000000;;		// This is the total number of milliseconds spent by all reads (as
0000000000000000000000000000000000000000;;		// measured from __make_request() to end_that_request_last()).
0000000000000000000000000000000000000000;;		ReadDuration *time.Duration `json:"read_duration,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of writes completed
0000000000000000000000000000000000000000;;		// This is the total number of writes completed successfully.
0000000000000000000000000000000000000000;;		WritesCompleted *uint64 `json:"writes_completed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of writes merged
0000000000000000000000000000000000000000;;		// See the description of reads merged.
0000000000000000000000000000000000000000;;		WritesMerged *uint64 `json:"writes_merged,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of sectors written
0000000000000000000000000000000000000000;;		// This is the total number of sectors written successfully.
0000000000000000000000000000000000000000;;		SectorsWritten *uint64 `json:"sectors_written,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Time spent writing
0000000000000000000000000000000000000000;;		// This is the total number of milliseconds spent by all writes (as
0000000000000000000000000000000000000000;;		// measured from __make_request() to end_that_request_last()).
0000000000000000000000000000000000000000;;		WriteDuration *time.Duration `json:"write_duration,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of I/Os currently in progress
0000000000000000000000000000000000000000;;		// The only field that should go to zero. Incremented as requests are
0000000000000000000000000000000000000000;;		// given to appropriate struct request_queue and decremented as they finish.
0000000000000000000000000000000000000000;;		IoInProgress *uint64 `json:"io_in_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Time spent doing I/Os
0000000000000000000000000000000000000000;;		// This field increases so long as field 9 is nonzero.
0000000000000000000000000000000000000000;;		IoDuration *time.Duration `json:"io_duration,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// weighted time spent doing I/Os
0000000000000000000000000000000000000000;;		// This field is incremented at each I/O start, I/O completion, I/O
0000000000000000000000000000000000000000;;		// merge, or read of these stats by the number of I/Os in progress
0000000000000000000000000000000000000000;;		// (field 9) times the number of milliseconds spent doing I/O since the
0000000000000000000000000000000000000000;;		// last update of this field.  This can provide an easy measure of both
0000000000000000000000000000000000000000;;		// I/O completion time and the backlog that may be accumulating.
0000000000000000000000000000000000000000;;		WeightedIoDuration *time.Duration `json:"weighted_io_duration,omitempty"`
0000000000000000000000000000000000000000;;	}
