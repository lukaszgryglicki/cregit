0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/info/v2/container.go[Godeps/_workspace/src/github.com/google/cadvisor/info/v2/container.go][vendor/github.com/google/cadvisor/info/v2/container.go];	
0000000000000000000000000000000000000000;;	package v2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO(rjnagal): Remove dependency after moving all stats structs from v1.
0000000000000000000000000000000000000000;;		// using v1 now for easy conversion.
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TypeName   = "name"
0000000000000000000000000000000000000000;;		TypeDocker = "docker"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CpuSpec struct {
0000000000000000000000000000000000000000;;		// Requested cpu shares. Default is 1024.
0000000000000000000000000000000000000000;;		Limit uint64 `json:"limit"`
0000000000000000000000000000000000000000;;		// Requested cpu hard limit. Default is unlimited (0).
0000000000000000000000000000000000000000;;		// Units: milli-cpus.
0000000000000000000000000000000000000000;;		MaxLimit uint64 `json:"max_limit"`
0000000000000000000000000000000000000000;;		// Cpu affinity mask.
0000000000000000000000000000000000000000;;		// TODO(rjnagal): Add a library to convert mask string to set of cpu bitmask.
0000000000000000000000000000000000000000;;		Mask string `json:"mask,omitempty"`
0000000000000000000000000000000000000000;;		// CPUQuota Default is disabled
0000000000000000000000000000000000000000;;		Quota uint64 `json:"quota,omitempty"`
0000000000000000000000000000000000000000;;		// Period is the CPU reference time in ns e.g the quota is compared aginst this.
0000000000000000000000000000000000000000;;		Period uint64 `json:"period,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemorySpec struct {
0000000000000000000000000000000000000000;;		// The amount of memory requested. Default is unlimited (-1).
0000000000000000000000000000000000000000;;		// Units: bytes.
0000000000000000000000000000000000000000;;		Limit uint64 `json:"limit,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The amount of guaranteed memory.  Default is 0.
0000000000000000000000000000000000000000;;		// Units: bytes.
0000000000000000000000000000000000000000;;		Reservation uint64 `json:"reservation,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The amount of swap space requested. Default is unlimited (-1).
0000000000000000000000000000000000000000;;		// Units: bytes.
0000000000000000000000000000000000000000;;		SwapLimit uint64 `json:"swap_limit,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerInfo struct {
0000000000000000000000000000000000000000;;		// Describes the container.
0000000000000000000000000000000000000000;;		Spec ContainerSpec `json:"spec,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Historical statistics gathered from the container.
0000000000000000000000000000000000000000;;		Stats []*ContainerStats `json:"stats,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerSpec struct {
0000000000000000000000000000000000000000;;		// Time at which the container was created.
0000000000000000000000000000000000000000;;		CreationTime time.Time `json:"creation_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Other names by which the container is known within a certain namespace.
0000000000000000000000000000000000000000;;		// This is unique within that namespace.
0000000000000000000000000000000000000000;;		Aliases []string `json:"aliases,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace under which the aliases of a container are unique.
0000000000000000000000000000000000000000;;		// An example of a namespace is "docker" for Docker containers.
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metadata labels associated with this container.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;		// Metadata envs associated with this container. Only whitelisted envs are added.
0000000000000000000000000000000000000000;;		Envs map[string]string `json:"envs,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HasCpu bool    `json:"has_cpu"`
0000000000000000000000000000000000000000;;		Cpu    CpuSpec `json:"cpu,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HasMemory bool       `json:"has_memory"`
0000000000000000000000000000000000000000;;		Memory    MemorySpec `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HasCustomMetrics bool            `json:"has_custom_metrics"`
0000000000000000000000000000000000000000;;		CustomMetrics    []v1.MetricSpec `json:"custom_metrics,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Following resources have no associated spec, but are being isolated.
0000000000000000000000000000000000000000;;		HasNetwork    bool `json:"has_network"`
0000000000000000000000000000000000000000;;		HasFilesystem bool `json:"has_filesystem"`
0000000000000000000000000000000000000000;;		HasDiskIo     bool `json:"has_diskio"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Image name used for this container.
0000000000000000000000000000000000000000;;		Image string `json:"image,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeprecatedContainerStats struct {
0000000000000000000000000000000000000000;;		// The time of this stat point.
0000000000000000000000000000000000000000;;		Timestamp time.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;		// CPU statistics
0000000000000000000000000000000000000000;;		HasCpu bool `json:"has_cpu"`
0000000000000000000000000000000000000000;;		// In nanoseconds (aggregated)
0000000000000000000000000000000000000000;;		Cpu v1.CpuStats `json:"cpu,omitempty"`
0000000000000000000000000000000000000000;;		// In nanocores per second (instantaneous)
0000000000000000000000000000000000000000;;		CpuInst *CpuInstStats `json:"cpu_inst,omitempty"`
0000000000000000000000000000000000000000;;		// Disk IO statistics
0000000000000000000000000000000000000000;;		HasDiskIo bool           `json:"has_diskio"`
0000000000000000000000000000000000000000;;		DiskIo    v1.DiskIoStats `json:"diskio,omitempty"`
0000000000000000000000000000000000000000;;		// Memory statistics
0000000000000000000000000000000000000000;;		HasMemory bool           `json:"has_memory"`
0000000000000000000000000000000000000000;;		Memory    v1.MemoryStats `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		// Network statistics
0000000000000000000000000000000000000000;;		HasNetwork bool         `json:"has_network"`
0000000000000000000000000000000000000000;;		Network    NetworkStats `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		// Filesystem statistics
0000000000000000000000000000000000000000;;		HasFilesystem bool         `json:"has_filesystem"`
0000000000000000000000000000000000000000;;		Filesystem    []v1.FsStats `json:"filesystem,omitempty"`
0000000000000000000000000000000000000000;;		// Task load statistics
0000000000000000000000000000000000000000;;		HasLoad bool         `json:"has_load"`
0000000000000000000000000000000000000000;;		Load    v1.LoadStats `json:"load_stats,omitempty"`
0000000000000000000000000000000000000000;;		// Custom Metrics
0000000000000000000000000000000000000000;;		HasCustomMetrics bool                      `json:"has_custom_metrics"`
0000000000000000000000000000000000000000;;		CustomMetrics    map[string][]v1.MetricVal `json:"custom_metrics,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerStats struct {
0000000000000000000000000000000000000000;;		// The time of this stat point.
0000000000000000000000000000000000000000;;		Timestamp time.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;		// CPU statistics
0000000000000000000000000000000000000000;;		// In nanoseconds (aggregated)
0000000000000000000000000000000000000000;;		Cpu *v1.CpuStats `json:"cpu,omitempty"`
0000000000000000000000000000000000000000;;		// In nanocores per second (instantaneous)
0000000000000000000000000000000000000000;;		CpuInst *CpuInstStats `json:"cpu_inst,omitempty"`
0000000000000000000000000000000000000000;;		// Disk IO statistics
0000000000000000000000000000000000000000;;		DiskIo *v1.DiskIoStats `json:"diskio,omitempty"`
0000000000000000000000000000000000000000;;		// Memory statistics
0000000000000000000000000000000000000000;;		Memory *v1.MemoryStats `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		// Network statistics
0000000000000000000000000000000000000000;;		Network *NetworkStats `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		// Filesystem statistics
0000000000000000000000000000000000000000;;		Filesystem *FilesystemStats `json:"filesystem,omitempty"`
0000000000000000000000000000000000000000;;		// Task load statistics
0000000000000000000000000000000000000000;;		Load *v1.LoadStats `json:"load_stats,omitempty"`
0000000000000000000000000000000000000000;;		// Custom Metrics
0000000000000000000000000000000000000000;;		CustomMetrics map[string][]v1.MetricVal `json:"custom_metrics,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Percentiles struct {
0000000000000000000000000000000000000000;;		// Indicates whether the stats are present or not.
0000000000000000000000000000000000000000;;		// If true, values below do not have any data.
0000000000000000000000000000000000000000;;		Present bool `json:"present"`
0000000000000000000000000000000000000000;;		// Average over the collected sample.
0000000000000000000000000000000000000000;;		Mean uint64 `json:"mean"`
0000000000000000000000000000000000000000;;		// Max seen over the collected sample.
0000000000000000000000000000000000000000;;		Max uint64 `json:"max"`
0000000000000000000000000000000000000000;;		// 50th percentile over the collected sample.
0000000000000000000000000000000000000000;;		Fifty uint64 `json:"fifty"`
0000000000000000000000000000000000000000;;		// 90th percentile over the collected sample.
0000000000000000000000000000000000000000;;		Ninety uint64 `json:"ninety"`
0000000000000000000000000000000000000000;;		// 95th percentile over the collected sample.
0000000000000000000000000000000000000000;;		NinetyFive uint64 `json:"ninetyfive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Usage struct {
0000000000000000000000000000000000000000;;		// Indicates amount of data available [0-100].
0000000000000000000000000000000000000000;;		// If we have data for half a day, we'll still process DayUsage,
0000000000000000000000000000000000000000;;		// but set PercentComplete to 50.
0000000000000000000000000000000000000000;;		PercentComplete int32 `json:"percent_complete"`
0000000000000000000000000000000000000000;;		// Mean, Max, and 90p cpu rate value in milliCpus/seconds. Converted to milliCpus to avoid floats.
0000000000000000000000000000000000000000;;		Cpu Percentiles `json:"cpu"`
0000000000000000000000000000000000000000;;		// Mean, Max, and 90p memory size in bytes.
0000000000000000000000000000000000000000;;		Memory Percentiles `json:"memory"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// latest sample collected for a container.
0000000000000000000000000000000000000000;;	type InstantUsage struct {
0000000000000000000000000000000000000000;;		// cpu rate in cpu milliseconds/second.
0000000000000000000000000000000000000000;;		Cpu uint64 `json:"cpu"`
0000000000000000000000000000000000000000;;		// Memory usage in bytes.
0000000000000000000000000000000000000000;;		Memory uint64 `json:"memory"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DerivedStats struct {
0000000000000000000000000000000000000000;;		// Time of generation of these stats.
0000000000000000000000000000000000000000;;		Timestamp time.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;		// Latest instantaneous sample.
0000000000000000000000000000000000000000;;		LatestUsage InstantUsage `json:"latest_usage"`
0000000000000000000000000000000000000000;;		// Percentiles in last observed minute.
0000000000000000000000000000000000000000;;		MinuteUsage Usage `json:"minute_usage"`
0000000000000000000000000000000000000000;;		// Percentile in last hour.
0000000000000000000000000000000000000000;;		HourUsage Usage `json:"hour_usage"`
0000000000000000000000000000000000000000;;		// Percentile in last day.
0000000000000000000000000000000000000000;;		DayUsage Usage `json:"day_usage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FsInfo struct {
0000000000000000000000000000000000000000;;		// The block device name associated with the filesystem.
0000000000000000000000000000000000000000;;		Device string `json:"device"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Path where the filesystem is mounted.
0000000000000000000000000000000000000000;;		Mountpoint string `json:"mountpoint"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filesystem usage in bytes.
0000000000000000000000000000000000000000;;		Capacity uint64 `json:"capacity"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Bytes available for non-root use.
0000000000000000000000000000000000000000;;		Available uint64 `json:"available"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of bytes used on this filesystem.
0000000000000000000000000000000000000000;;		Usage uint64 `json:"usage"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels associated with this filesystem.
0000000000000000000000000000000000000000;;		Labels []string `json:"labels"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of Inodes.
0000000000000000000000000000000000000000;;		Inodes *uint64 `json:"inodes,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of available Inodes (if known)
0000000000000000000000000000000000000000;;		InodesFree *uint64 `json:"inodes_free,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RequestOptions struct {
0000000000000000000000000000000000000000;;		// Type of container identifier specified - "name", "dockerid", dockeralias"
0000000000000000000000000000000000000000;;		IdType string `json:"type"`
0000000000000000000000000000000000000000;;		// Number of stats to return
0000000000000000000000000000000000000000;;		Count int `json:"count"`
0000000000000000000000000000000000000000;;		// Whether to include stats for child subcontainers.
0000000000000000000000000000000000000000;;		Recursive bool `json:"recursive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessInfo struct {
0000000000000000000000000000000000000000;;		User          string  `json:"user"`
0000000000000000000000000000000000000000;;		Pid           int     `json:"pid"`
0000000000000000000000000000000000000000;;		Ppid          int     `json:"parent_pid"`
0000000000000000000000000000000000000000;;		StartTime     string  `json:"start_time"`
0000000000000000000000000000000000000000;;		PercentCpu    float32 `json:"percent_cpu"`
0000000000000000000000000000000000000000;;		PercentMemory float32 `json:"percent_mem"`
0000000000000000000000000000000000000000;;		RSS           uint64  `json:"rss"`
0000000000000000000000000000000000000000;;		VirtualSize   uint64  `json:"virtual_size"`
0000000000000000000000000000000000000000;;		Status        string  `json:"status"`
0000000000000000000000000000000000000000;;		RunningTime   string  `json:"running_time"`
0000000000000000000000000000000000000000;;		CgroupPath    string  `json:"cgroup_path"`
0000000000000000000000000000000000000000;;		Cmd           string  `json:"cmd"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TcpStat struct {
0000000000000000000000000000000000000000;;		Established uint64
0000000000000000000000000000000000000000;;		SynSent     uint64
0000000000000000000000000000000000000000;;		SynRecv     uint64
0000000000000000000000000000000000000000;;		FinWait1    uint64
0000000000000000000000000000000000000000;;		FinWait2    uint64
0000000000000000000000000000000000000000;;		TimeWait    uint64
0000000000000000000000000000000000000000;;		Close       uint64
0000000000000000000000000000000000000000;;		CloseWait   uint64
0000000000000000000000000000000000000000;;		LastAck     uint64
0000000000000000000000000000000000000000;;		Listen      uint64
0000000000000000000000000000000000000000;;		Closing     uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkStats struct {
0000000000000000000000000000000000000000;;		// Network stats by interface.
0000000000000000000000000000000000000000;;		Interfaces []v1.InterfaceStats `json:"interfaces,omitempty"`
0000000000000000000000000000000000000000;;		// TCP connection stats (Established, Listen...)
0000000000000000000000000000000000000000;;		Tcp TcpStat `json:"tcp"`
0000000000000000000000000000000000000000;;		// TCP6 connection stats (Established, Listen...)
0000000000000000000000000000000000000000;;		Tcp6 TcpStat `json:"tcp6"`
0000000000000000000000000000000000000000;;		// UDP connection stats
0000000000000000000000000000000000000000;;		Udp v1.UdpStat `json:"udp"`
0000000000000000000000000000000000000000;;		// UDP6 connection stats
0000000000000000000000000000000000000000;;		Udp6 v1.UdpStat `json:"udp6"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Instantaneous CPU stats
0000000000000000000000000000000000000000;;	type CpuInstStats struct {
0000000000000000000000000000000000000000;;		Usage CpuInstUsage `json:"usage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CPU usage time statistics.
0000000000000000000000000000000000000000;;	type CpuInstUsage struct {
0000000000000000000000000000000000000000;;		// Total CPU usage.
0000000000000000000000000000000000000000;;		// Units: nanocores per second
0000000000000000000000000000000000000000;;		Total uint64 `json:"total"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Per CPU/core usage of the container.
0000000000000000000000000000000000000000;;		// Unit: nanocores per second
0000000000000000000000000000000000000000;;		PerCpu []uint64 `json:"per_cpu_usage,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Time spent in user space.
0000000000000000000000000000000000000000;;		// Unit: nanocores per second
0000000000000000000000000000000000000000;;		User uint64 `json:"user"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Time spent in kernel space.
0000000000000000000000000000000000000000;;		// Unit: nanocores per second
0000000000000000000000000000000000000000;;		System uint64 `json:"system"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filesystem usage statistics.
0000000000000000000000000000000000000000;;	type FilesystemStats struct {
0000000000000000000000000000000000000000;;		// Total Number of bytes consumed by container.
0000000000000000000000000000000000000000;;		TotalUsageBytes *uint64 `json:"totalUsageBytes,omitempty"`
0000000000000000000000000000000000000000;;		// Number of bytes consumed by a container through its root filesystem.
0000000000000000000000000000000000000000;;		BaseUsageBytes *uint64 `json:"baseUsageBytes,omitempty"`
0000000000000000000000000000000000000000;;		// Number of inodes used within the container's root filesystem.
0000000000000000000000000000000000000000;;		// This only accounts for inodes that are shared across containers,
0000000000000000000000000000000000000000;;		// and does not include inodes used in mounted directories.
0000000000000000000000000000000000000000;;		InodeUsage *uint64 `json:"containter_inode_usage,omitempty"`
0000000000000000000000000000000000000000;;	}
