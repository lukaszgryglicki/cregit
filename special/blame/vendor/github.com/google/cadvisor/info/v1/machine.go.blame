0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
baeaf2d312f924c834e28f908757163c9de924af;Godeps/_workspace/src/github.com/google/cadvisor/info/v1/machine.go[Godeps/_workspace/src/github.com/google/cadvisor/info/v1/machine.go][vendor/github.com/google/cadvisor/info/v1/machine.go];	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FsInfo struct {
0000000000000000000000000000000000000000;;		// Block device associated with the filesystem.
0000000000000000000000000000000000000000;;		Device string `json:"device"`
0000000000000000000000000000000000000000;;		// DeviceMajor is the major identifier of the device, used for correlation with blkio stats
0000000000000000000000000000000000000000;;		DeviceMajor uint64 `json:"-"`
0000000000000000000000000000000000000000;;		// DeviceMinor is the minor identifier of the device, used for correlation with blkio stats
0000000000000000000000000000000000000000;;		DeviceMinor uint64 `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Total number of bytes available on the filesystem.
0000000000000000000000000000000000000000;;		Capacity uint64 `json:"capacity"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type of device.
0000000000000000000000000000000000000000;;		Type string `json:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Total number of inodes available on the filesystem.
0000000000000000000000000000000000000000;;		Inodes uint64 `json:"inodes"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HasInodes when true, indicates that Inodes info will be available.
0000000000000000000000000000000000000000;;		HasInodes bool `json:"has_inodes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Node struct {
0000000000000000000000000000000000000000;;		Id int `json:"node_id"`
0000000000000000000000000000000000000000;;		// Per-node memory
0000000000000000000000000000000000000000;;		Memory uint64  `json:"memory"`
0000000000000000000000000000000000000000;;		Cores  []Core  `json:"cores"`
0000000000000000000000000000000000000000;;		Caches []Cache `json:"caches"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Core struct {
0000000000000000000000000000000000000000;;		Id      int     `json:"core_id"`
0000000000000000000000000000000000000000;;		Threads []int   `json:"thread_ids"`
0000000000000000000000000000000000000000;;		Caches  []Cache `json:"caches"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cache struct {
0000000000000000000000000000000000000000;;		// Size of memory cache in bytes.
0000000000000000000000000000000000000000;;		Size uint64 `json:"size"`
0000000000000000000000000000000000000000;;		// Type of memory cache: data, instruction, or unified.
0000000000000000000000000000000000000000;;		Type string `json:"type"`
0000000000000000000000000000000000000000;;		// Level (distance from cpus) in a multi-level cache hierarchy.
0000000000000000000000000000000000000000;;		Level int `json:"level"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Node) FindCore(id int) (bool, int) {
0000000000000000000000000000000000000000;;		for i, n := range self.Cores {
0000000000000000000000000000000000000000;;			if n.Id == id {
0000000000000000000000000000000000000000;;				return true, i
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, -1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Node) AddThread(thread int, core int) {
0000000000000000000000000000000000000000;;		var coreIdx int
0000000000000000000000000000000000000000;;		if core == -1 {
0000000000000000000000000000000000000000;;			// Assume one hyperthread per core when topology data is missing.
0000000000000000000000000000000000000000;;			core = thread
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ok, coreIdx := self.FindCore(core)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			// New core
0000000000000000000000000000000000000000;;			core := Core{Id: core}
0000000000000000000000000000000000000000;;			self.Cores = append(self.Cores, core)
0000000000000000000000000000000000000000;;			coreIdx = len(self.Cores) - 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		self.Cores[coreIdx].Threads = append(self.Cores[coreIdx].Threads, thread)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Node) AddNodeCache(c Cache) {
0000000000000000000000000000000000000000;;		self.Caches = append(self.Caches, c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Node) AddPerCoreCache(c Cache) {
0000000000000000000000000000000000000000;;		for idx := range self.Cores {
0000000000000000000000000000000000000000;;			self.Cores[idx].Caches = append(self.Cores[idx].Caches, c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskInfo struct {
0000000000000000000000000000000000000000;;		// device name
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Major number
0000000000000000000000000000000000000000;;		Major uint64 `json:"major"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Minor number
0000000000000000000000000000000000000000;;		Minor uint64 `json:"minor"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Size in bytes
0000000000000000000000000000000000000000;;		Size uint64 `json:"size"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// I/O Scheduler - one of "none", "noop", "cfq", "deadline"
0000000000000000000000000000000000000000;;		Scheduler string `json:"scheduler"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetInfo struct {
0000000000000000000000000000000000000000;;		// Device name
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Mac Address
0000000000000000000000000000000000000000;;		MacAddress string `json:"mac_address"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Speed in MBits/s
0000000000000000000000000000000000000000;;		Speed int64 `json:"speed"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Maximum Transmission Unit
0000000000000000000000000000000000000000;;		Mtu int64 `json:"mtu"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloudProvider string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		GCE             CloudProvider = "GCE"
0000000000000000000000000000000000000000;;		AWS                           = "AWS"
0000000000000000000000000000000000000000;;		Azure                         = "Azure"
0000000000000000000000000000000000000000;;		Baremetal                     = "Baremetal"
0000000000000000000000000000000000000000;;		UnknownProvider               = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		NoInstance      InstanceType = "None"
0000000000000000000000000000000000000000;;		UnknownInstance              = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceID string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		UnNamedInstance InstanceID = "None"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MachineInfo struct {
0000000000000000000000000000000000000000;;		// The number of cores in this machine.
0000000000000000000000000000000000000000;;		NumCores int `json:"num_cores"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Maximum clock speed for the cores, in KHz.
0000000000000000000000000000000000000000;;		CpuFrequency uint64 `json:"cpu_frequency_khz"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The amount of memory (in bytes) in this machine
0000000000000000000000000000000000000000;;		MemoryCapacity uint64 `json:"memory_capacity"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The machine id
0000000000000000000000000000000000000000;;		MachineID string `json:"machine_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The system uuid
0000000000000000000000000000000000000000;;		SystemUUID string `json:"system_uuid"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The boot id
0000000000000000000000000000000000000000;;		BootID string `json:"boot_id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filesystems on this machine.
0000000000000000000000000000000000000000;;		Filesystems []FsInfo `json:"filesystems"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Disk map
0000000000000000000000000000000000000000;;		DiskMap map[string]DiskInfo `json:"disk_map"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Network devices
0000000000000000000000000000000000000000;;		NetworkDevices []NetInfo `json:"network_devices"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Machine Topology
0000000000000000000000000000000000000000;;		// Describes cpu/memory layout and hierarchy.
0000000000000000000000000000000000000000;;		Topology []Node `json:"topology"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Cloud provider the machine belongs to.
0000000000000000000000000000000000000000;;		CloudProvider CloudProvider `json:"cloud_provider"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type of cloud instance (e.g. GCE standard) the machine is.
0000000000000000000000000000000000000000;;		InstanceType InstanceType `json:"instance_type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ID of cloud instance (e.g. instance-1) given to it by the cloud provider.
0000000000000000000000000000000000000000;;		InstanceID InstanceID `json:"instance_id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VersionInfo struct {
0000000000000000000000000000000000000000;;		// Kernel version.
0000000000000000000000000000000000000000;;		KernelVersion string `json:"kernel_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OS image being used for cadvisor container, or host image if running on host directly.
0000000000000000000000000000000000000000;;		ContainerOsVersion string `json:"container_os_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Docker version.
0000000000000000000000000000000000000000;;		DockerVersion string `json:"docker_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Docker API Version
0000000000000000000000000000000000000000;;		DockerAPIVersion string `json:"docker_api_version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// cAdvisor version.
0000000000000000000000000000000000000000;;		CadvisorVersion string `json:"cadvisor_version"`
0000000000000000000000000000000000000000;;		// cAdvisor git revision.
0000000000000000000000000000000000000000;;		CadvisorRevision string `json:"cadvisor_revision"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MachineInfoFactory interface {
0000000000000000000000000000000000000000;;		GetMachineInfo() (*MachineInfo, error)
0000000000000000000000000000000000000000;;		GetVersionInfo() (*VersionInfo, error)
0000000000000000000000000000000000000000;;	}
