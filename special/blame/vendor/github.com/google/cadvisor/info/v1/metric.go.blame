0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
9fe3ec3611e44ce1e0177b26dd5b53b2963dcf96;Godeps/_workspace/src/github.com/google/cadvisor/info/v2/metric.go[Godeps/_workspace/src/github.com/google/cadvisor/info/v2/metric.go][vendor/github.com/google/cadvisor/info/v1/metric.go];	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Type of metric being exported.
0000000000000000000000000000000000000000;;	type MetricType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Instantaneous value. May increase or decrease.
0000000000000000000000000000000000000000;;		MetricGauge MetricType = "gauge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A counter-like value that is only expected to increase.
0000000000000000000000000000000000000000;;		MetricCumulative MetricType = "cumulative"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rate over a time period.
0000000000000000000000000000000000000000;;		MetricDelta MetricType = "delta"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataType for metric being exported.
0000000000000000000000000000000000000000;;	type DataType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IntType   DataType = "int"
0000000000000000000000000000000000000000;;		FloatType DataType = "float"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Spec for custom metric.
0000000000000000000000000000000000000000;;	type MetricSpec struct {
0000000000000000000000000000000000000000;;		// The name of the metric.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type of the metric.
0000000000000000000000000000000000000000;;		Type MetricType `json:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Data Type for the stats.
0000000000000000000000000000000000000000;;		Format DataType `json:"format"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Display Units for the stats.
0000000000000000000000000000000000000000;;		Units string `json:"units"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An exported metric.
0000000000000000000000000000000000000000;;	type MetricValBasic struct {
0000000000000000000000000000000000000000;;		// Time at which the metric was queried
0000000000000000000000000000000000000000;;		Timestamp time.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the metric at this point.
0000000000000000000000000000000000000000;;		IntValue   int64   `json:"int_value,omitempty"`
0000000000000000000000000000000000000000;;		FloatValue float64 `json:"float_value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An exported metric.
0000000000000000000000000000000000000000;;	type MetricVal struct {
0000000000000000000000000000000000000000;;		// Label associated with a metric
0000000000000000000000000000000000000000;;		Label string `json:"label,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Time at which the metric was queried
0000000000000000000000000000000000000000;;		Timestamp time.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the metric at this point.
0000000000000000000000000000000000000000;;		IntValue   int64   `json:"int_value,omitempty"`
0000000000000000000000000000000000000000;;		FloatValue float64 `json:"float_value,omitempty"`
0000000000000000000000000000000000000000;;	}
