0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/fs/types.go[Godeps/_workspace/src/github.com/google/cadvisor/fs/types.go][vendor/github.com/google/cadvisor/fs/types.go];	
0000000000000000000000000000000000000000;;	package fs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceInfo struct {
0000000000000000000000000000000000000000;;		Device string
0000000000000000000000000000000000000000;;		Major  uint
0000000000000000000000000000000000000000;;		Minor  uint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FsType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ft FsType) String() string {
0000000000000000000000000000000000000000;;		return string(ft)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ZFS          FsType = "zfs"
0000000000000000000000000000000000000000;;		DeviceMapper FsType = "devicemapper"
0000000000000000000000000000000000000000;;		VFS          FsType = "vfs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Fs struct {
0000000000000000000000000000000000000000;;		DeviceInfo
0000000000000000000000000000000000000000;;		Type       FsType
0000000000000000000000000000000000000000;;		Capacity   uint64
0000000000000000000000000000000000000000;;		Free       uint64
0000000000000000000000000000000000000000;;		Available  uint64
0000000000000000000000000000000000000000;;		Inodes     *uint64
0000000000000000000000000000000000000000;;		InodesFree *uint64
0000000000000000000000000000000000000000;;		DiskStats  DiskStats
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskStats struct {
0000000000000000000000000000000000000000;;		ReadsCompleted  uint64
0000000000000000000000000000000000000000;;		ReadsMerged     uint64
0000000000000000000000000000000000000000;;		SectorsRead     uint64
0000000000000000000000000000000000000000;;		ReadTime        uint64
0000000000000000000000000000000000000000;;		WritesCompleted uint64
0000000000000000000000000000000000000000;;		WritesMerged    uint64
0000000000000000000000000000000000000000;;		SectorsWritten  uint64
0000000000000000000000000000000000000000;;		WriteTime       uint64
0000000000000000000000000000000000000000;;		IoInProgress    uint64
0000000000000000000000000000000000000000;;		IoTime          uint64
0000000000000000000000000000000000000000;;		WeightedIoTime  uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FsInfo interface {
0000000000000000000000000000000000000000;;		// Returns capacity and free space, in bytes, of all the ext2, ext3, ext4 filesystems on the host.
0000000000000000000000000000000000000000;;		GetGlobalFsInfo() ([]Fs, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns capacity and free space, in bytes, of the set of mounts passed.
0000000000000000000000000000000000000000;;		GetFsInfoForPath(mountSet map[string]struct{}) ([]Fs, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns number of bytes occupied by 'dir'.
0000000000000000000000000000000000000000;;		GetDirDiskUsage(dir string, timeout time.Duration) (uint64, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns number of inodes used by 'dir'.
0000000000000000000000000000000000000000;;		GetDirInodeUsage(dir string, timeout time.Duration) (uint64, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the block device info of the filesystem on which 'dir' resides.
0000000000000000000000000000000000000000;;		GetDirFsDevice(dir string) (*DeviceInfo, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the device name associated with a particular label.
0000000000000000000000000000000000000000;;		GetDeviceForLabel(label string) (string, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns all labels associated with a particular device name.
0000000000000000000000000000000000000000;;		GetLabelsForDevice(device string) ([]string, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the mountpoint associated with a particular device.
0000000000000000000000000000000000000000;;		GetMountpointForDevice(device string) (string, error)
0000000000000000000000000000000000000000;;	}
