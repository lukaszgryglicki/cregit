0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	package devicemapper
a93fc00f9e3e99c0b1e06ca1ecb0ad623862f330;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DmsetupClient is a low-level client for interacting with device mapper via
0000000000000000000000000000000000000000;;	// the `dmsetup` utility, which is provided by the `device-mapper` package.
0000000000000000000000000000000000000000;;	type DmsetupClient interface {
0000000000000000000000000000000000000000;;		// Table runs `dmsetup table` on the given device name and returns the
0000000000000000000000000000000000000000;;		// output or an error.
0000000000000000000000000000000000000000;;		Table(deviceName string) ([]byte, error)
0000000000000000000000000000000000000000;;		// Message runs `dmsetup message` on the given device, passing the given
0000000000000000000000000000000000000000;;		// message to the given sector, and returns the output or an error.
0000000000000000000000000000000000000000;;		Message(deviceName string, sector int, message string) ([]byte, error)
0000000000000000000000000000000000000000;;		// Status runs `dmsetup status` on the given device and returns the output
0000000000000000000000000000000000000000;;		// or an error.
0000000000000000000000000000000000000000;;		Status(deviceName string) ([]byte, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDmSetupClient returns a new DmsetupClient.
0000000000000000000000000000000000000000;;	func NewDmsetupClient() DmsetupClient {
0000000000000000000000000000000000000000;;		return &defaultDmsetupClient{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaultDmsetupClient is a functional DmsetupClient
0000000000000000000000000000000000000000;;	type defaultDmsetupClient struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ DmsetupClient = &defaultDmsetupClient{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *defaultDmsetupClient) Table(deviceName string) ([]byte, error) {
0000000000000000000000000000000000000000;;		return c.dmsetup("table", deviceName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *defaultDmsetupClient) Message(deviceName string, sector int, message string) ([]byte, error) {
0000000000000000000000000000000000000000;;		return c.dmsetup("message", deviceName, strconv.Itoa(sector), message)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *defaultDmsetupClient) Status(deviceName string) ([]byte, error) {
0000000000000000000000000000000000000000;;		return c.dmsetup("status", deviceName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*defaultDmsetupClient) dmsetup(args ...string) ([]byte, error) {
0000000000000000000000000000000000000000;;		glog.V(5).Infof("running dmsetup %v", strings.Join(args, " "))
0000000000000000000000000000000000000000;;		return exec.Command("dmsetup", args...).Output()
0000000000000000000000000000000000000000;;	}
