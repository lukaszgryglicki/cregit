0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	package devicemapper
a93fc00f9e3e99c0b1e06ca1ecb0ad623862f330;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// thinLsClient knows how to run a thin_ls very specific to CoW usage for
0000000000000000000000000000000000000000;;	// containers.
0000000000000000000000000000000000000000;;	type thinLsClient interface {
0000000000000000000000000000000000000000;;		// ThinLs runs a thin ls on the given device, which is expected to be a
0000000000000000000000000000000000000000;;		// metadata device. The caller must hold the metadata snapshot for the
0000000000000000000000000000000000000000;;		// device.
0000000000000000000000000000000000000000;;		ThinLs(deviceName string) (map[string]uint64, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newThinLsClient returns a thinLsClient or an error if the thin_ls binary
0000000000000000000000000000000000000000;;	// couldn't be located.
0000000000000000000000000000000000000000;;	func newThinLsClient() (thinLsClient, error) {
0000000000000000000000000000000000000000;;		thinLsPath, err := ThinLsBinaryPresent()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error creating thin_ls client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &defaultThinLsClient{thinLsPath}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaultThinLsClient is a functional thinLsClient
0000000000000000000000000000000000000000;;	type defaultThinLsClient struct {
0000000000000000000000000000000000000000;;		thinLsPath string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ thinLsClient = &defaultThinLsClient{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *defaultThinLsClient) ThinLs(deviceName string) (map[string]uint64, error) {
0000000000000000000000000000000000000000;;		args := []string{"--no-headers", "-m", "-o", "DEV,EXCLUSIVE_BYTES", deviceName}
0000000000000000000000000000000000000000;;		glog.V(4).Infof("running command: thin_ls %v", strings.Join(args, " "))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output, err := exec.Command(c.thinLsPath, args...).Output()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Error running command `thin_ls %v`: %v\noutput:\n\n%v", strings.Join(args, " "), err, string(output))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return parseThinLsOutput(output), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseThinLsOutput parses the output returned by thin_ls to build a map of
0000000000000000000000000000000000000000;;	// device id -> usage.
0000000000000000000000000000000000000000;;	func parseThinLsOutput(output []byte) map[string]uint64 {
0000000000000000000000000000000000000000;;		cache := map[string]uint64{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// parse output
0000000000000000000000000000000000000000;;		scanner := bufio.NewScanner(bytes.NewReader(output))
0000000000000000000000000000000000000000;;		for scanner.Scan() {
0000000000000000000000000000000000000000;;			output := scanner.Text()
0000000000000000000000000000000000000000;;			fields := strings.Fields(output)
0000000000000000000000000000000000000000;;			if len(fields) != 2 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			deviceID := fields[0]
0000000000000000000000000000000000000000;;			usage, err := strconv.ParseUint(fields[1], 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Warning("unexpected error parsing thin_ls output: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cache[deviceID] = usage
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
