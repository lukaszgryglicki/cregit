0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/storage/storage.go[Godeps/_workspace/src/github.com/google/cadvisor/storage/storage.go][vendor/github.com/google/cadvisor/storage/storage.go];	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDriver interface {
0000000000000000000000000000000000000000;;		AddStats(ref info.ContainerReference, stats *info.ContainerStats) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Close will clear the state of the storage driver. The elements
0000000000000000000000000000000000000000;;		// stored in the underlying storage may or may not be deleted depending
0000000000000000000000000000000000000000;;		// on the implementation of the storage driver.
0000000000000000000000000000000000000000;;		Close() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageDriverFunc func() (StorageDriver, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var registeredPlugins = map[string](StorageDriverFunc){}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegisterStorageDriver(name string, f StorageDriverFunc) {
0000000000000000000000000000000000000000;;		registeredPlugins[name] = f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(name string) (StorageDriver, error) {
0000000000000000000000000000000000000000;;		if name == "" {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f, ok := registeredPlugins[name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unknown backend storage driver: %s", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ListDrivers() []string {
0000000000000000000000000000000000000000;;		drivers := make([]string, 0, len(registeredPlugins))
0000000000000000000000000000000000000000;;		for name := range registeredPlugins {
0000000000000000000000000000000000000000;;			drivers = append(drivers, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Strings(drivers)
0000000000000000000000000000000000000000;;		return drivers
0000000000000000000000000000000000000000;;	}
