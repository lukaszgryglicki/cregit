0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
ddb91896b60df07452d87846c6343678b1c48dde;Godeps/_workspace/src/github.com/google/cadvisor/pages/pages.go[Godeps/_workspace/src/github.com/google/cadvisor/pages/pages.go][vendor/github.com/google/cadvisor/pages/pages.go];	
0000000000000000000000000000000000000000;;	package pages
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"html/template"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		httpmux "github.com/google/cadvisor/http/mux"
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/manager"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		auth "github.com/abbot/go-http-auth"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var pageTemplate *template.Template
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type link struct {
0000000000000000000000000000000000000000;;		// Text to show in the link.
0000000000000000000000000000000000000000;;		Text string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Web address to link to.
0000000000000000000000000000000000000000;;		Link string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type keyVal struct {
0000000000000000000000000000000000000000;;		Key   string
0000000000000000000000000000000000000000;;		Value string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pageData struct {
0000000000000000000000000000000000000000;;		DisplayName            string
0000000000000000000000000000000000000000;;		ContainerName          string
0000000000000000000000000000000000000000;;		ParentContainers       []link
0000000000000000000000000000000000000000;;		Subcontainers          []link
0000000000000000000000000000000000000000;;		Spec                   info.ContainerSpec
0000000000000000000000000000000000000000;;		Stats                  []*info.ContainerStats
0000000000000000000000000000000000000000;;		MachineInfo            *info.MachineInfo
0000000000000000000000000000000000000000;;		IsRoot                 bool
0000000000000000000000000000000000000000;;		ResourcesAvailable     bool
0000000000000000000000000000000000000000;;		CpuAvailable           bool
0000000000000000000000000000000000000000;;		MemoryAvailable        bool
0000000000000000000000000000000000000000;;		NetworkAvailable       bool
0000000000000000000000000000000000000000;;		FsAvailable            bool
0000000000000000000000000000000000000000;;		CustomMetricsAvailable bool
0000000000000000000000000000000000000000;;		SubcontainersAvailable bool
0000000000000000000000000000000000000000;;		Root                   string
0000000000000000000000000000000000000000;;		DockerStatus           []keyVal
0000000000000000000000000000000000000000;;		DockerDriverStatus     []keyVal
0000000000000000000000000000000000000000;;		DockerImages           []info.DockerImage
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		containersHtmlTemplate, _ := Asset("pages/assets/html/containers.html")
0000000000000000000000000000000000000000;;		pageTemplate = template.New("containersTemplate").Funcs(funcMap)
0000000000000000000000000000000000000000;;		_, err := pageTemplate.Parse(string(containersHtmlTemplate))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Failed to parse template: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func containerHandlerNoAuth(containerManager manager.Manager) http.HandlerFunc {
0000000000000000000000000000000000000000;;		return func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			err := serveContainersPage(containerManager, w, r.URL)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, "%s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func containerHandler(containerManager manager.Manager) auth.AuthenticatedHandlerFunc {
0000000000000000000000000000000000000000;;		return func(w http.ResponseWriter, r *auth.AuthenticatedRequest) {
0000000000000000000000000000000000000000;;			err := serveContainersPage(containerManager, w, r.URL)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, "%s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func dockerHandlerNoAuth(containerManager manager.Manager) http.HandlerFunc {
0000000000000000000000000000000000000000;;		return func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			err := serveDockerPage(containerManager, w, r.URL)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, "%s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func dockerHandler(containerManager manager.Manager) auth.AuthenticatedHandlerFunc {
0000000000000000000000000000000000000000;;		return func(w http.ResponseWriter, r *auth.AuthenticatedRequest) {
0000000000000000000000000000000000000000;;			err := serveDockerPage(containerManager, w, r.URL)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, "%s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register http handlers
0000000000000000000000000000000000000000;;	func RegisterHandlersDigest(mux httpmux.Mux, containerManager manager.Manager, authenticator *auth.DigestAuth) error {
0000000000000000000000000000000000000000;;		// Register the handler for the containers page.
0000000000000000000000000000000000000000;;		if authenticator != nil {
0000000000000000000000000000000000000000;;			mux.HandleFunc(ContainersPage, authenticator.Wrap(containerHandler(containerManager)))
0000000000000000000000000000000000000000;;			mux.HandleFunc(DockerPage, authenticator.Wrap(dockerHandler(containerManager)))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			mux.HandleFunc(ContainersPage, containerHandlerNoAuth(containerManager))
0000000000000000000000000000000000000000;;			mux.HandleFunc(DockerPage, dockerHandlerNoAuth(containerManager))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegisterHandlersBasic(mux httpmux.Mux, containerManager manager.Manager, authenticator *auth.BasicAuth) error {
0000000000000000000000000000000000000000;;		// Register the handler for the containers and docker age.
0000000000000000000000000000000000000000;;		if authenticator != nil {
0000000000000000000000000000000000000000;;			mux.HandleFunc(ContainersPage, authenticator.Wrap(containerHandler(containerManager)))
0000000000000000000000000000000000000000;;			mux.HandleFunc(DockerPage, authenticator.Wrap(dockerHandler(containerManager)))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			mux.HandleFunc(ContainersPage, containerHandlerNoAuth(containerManager))
0000000000000000000000000000000000000000;;			mux.HandleFunc(DockerPage, dockerHandlerNoAuth(containerManager))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getContainerDisplayName(cont info.ContainerReference) string {
0000000000000000000000000000000000000000;;		// Pick a user-added alias as display name.
0000000000000000000000000000000000000000;;		displayName := ""
0000000000000000000000000000000000000000;;		for _, alias := range cont.Aliases {
0000000000000000000000000000000000000000;;			// ignore container id as alias.
0000000000000000000000000000000000000000;;			if strings.Contains(cont.Name, alias) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// pick shortest display name if multiple aliases are available.
0000000000000000000000000000000000000000;;			if displayName == "" || len(displayName) >= len(alias) {
0000000000000000000000000000000000000000;;				displayName = alias
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if displayName == "" {
0000000000000000000000000000000000000000;;			displayName = cont.Name
0000000000000000000000000000000000000000;;		} else if len(displayName) > 50 {
0000000000000000000000000000000000000000;;			// truncate display name to fit in one line.
0000000000000000000000000000000000000000;;			displayName = displayName[:50] + "..."
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add the full container name to the display name.
0000000000000000000000000000000000000000;;		if displayName != cont.Name {
0000000000000000000000000000000000000000;;			displayName = fmt.Sprintf("%s (%s)", displayName, cont.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return displayName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Escape the non-path characters on a container name.
0000000000000000000000000000000000000000;;	func escapeContainerName(containerName string) string {
0000000000000000000000000000000000000000;;		parts := strings.Split(containerName, "/")
0000000000000000000000000000000000000000;;		for i := range parts {
0000000000000000000000000000000000000000;;			parts[i] = url.QueryEscape(parts[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(parts, "/")
0000000000000000000000000000000000000000;;	}
