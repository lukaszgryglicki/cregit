0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
ddb91896b60df07452d87846c6343678b1c48dde;Godeps/_workspace/src/github.com/google/cadvisor/pages/static/static.go[Godeps/_workspace/src/github.com/google/cadvisor/pages/static/static.go][vendor/github.com/google/cadvisor/pages/static/static.go];	
0000000000000000000000000000000000000000;;	// Handler for /static content.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package static
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"mime"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const StaticResource = "/static/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var bootstrapJs, _ = Asset("pages/assets/js/bootstrap-3.1.1.min.js")
0000000000000000000000000000000000000000;;	var containersJs, _ = Asset("pages/assets/js/containers.js")
0000000000000000000000000000000000000000;;	var gchartsJs, _ = Asset("pages/assets/js/gcharts.js")
0000000000000000000000000000000000000000;;	var googleJsapiJs, _ = Asset("pages/assets/js/google-jsapi.js")
0000000000000000000000000000000000000000;;	var jqueryJs, _ = Asset("pages/assets/js/jquery-1.10.2.min.js")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var bootstrapCss, _ = Asset("pages/assets/styles/bootstrap-3.1.1.min.css")
0000000000000000000000000000000000000000;;	var bootstrapThemeCss, _ = Asset("pages/assets/styles/bootstrap-theme-3.1.1.min.css")
0000000000000000000000000000000000000000;;	var containersCss, _ = Asset("pages/assets/styles/containers.css")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var staticFiles = map[string][]byte{
0000000000000000000000000000000000000000;;		"bootstrap-3.1.1.min.css":       bootstrapCss,
0000000000000000000000000000000000000000;;		"bootstrap-3.1.1.min.js":        bootstrapJs,
0000000000000000000000000000000000000000;;		"bootstrap-theme-3.1.1.min.css": bootstrapThemeCss,
0000000000000000000000000000000000000000;;		"containers.css":                containersCss,
0000000000000000000000000000000000000000;;		"containers.js":                 containersJs,
0000000000000000000000000000000000000000;;		"gcharts.js":                    gchartsJs,
0000000000000000000000000000000000000000;;		"google-jsapi.js":               googleJsapiJs,
0000000000000000000000000000000000000000;;		"jquery-1.10.2.min.js":          jqueryJs,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func HandleRequest(w http.ResponseWriter, u *url.URL) error {
0000000000000000000000000000000000000000;;		if len(u.Path) <= len(StaticResource) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unknown static resource %q", u.Path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get the static content if it exists.
0000000000000000000000000000000000000000;;		resource := u.Path[len(StaticResource):]
0000000000000000000000000000000000000000;;		content, ok := staticFiles[resource]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unknown static resource %q", resource)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set Content-Type if we were able to detect it.
0000000000000000000000000000000000000000;;		contentType := mime.TypeByExtension(path.Ext(resource))
0000000000000000000000000000000000000000;;		if contentType != "" {
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", contentType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := w.Write(content)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
