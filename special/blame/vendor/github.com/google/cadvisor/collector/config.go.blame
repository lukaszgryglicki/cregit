0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
e2a368d09bfda52d5970d2d9e3fd645b4eddb58b;Godeps/_workspace/src/github.com/google/cadvisor/collector/config.go[Godeps/_workspace/src/github.com/google/cadvisor/collector/config.go][vendor/github.com/google/cadvisor/collector/config.go];	
0000000000000000000000000000000000000000;;	package collector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		// the endpoint to hit to scrape metrics
0000000000000000000000000000000000000000;;		Endpoint EndpointConfig `json:"endpoint"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// holds information about different metrics that can be collected
0000000000000000000000000000000000000000;;		MetricsConfig []MetricConfig `json:"metrics_config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// metricConfig holds information extracted from the config file about a metric
0000000000000000000000000000000000000000;;	type MetricConfig struct {
0000000000000000000000000000000000000000;;		// the name of the metric
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// enum type for the metric type
0000000000000000000000000000000000000000;;		MetricType v1.MetricType `json:"metric_type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// metric units to display on UI and in storage (eg: MB, cores)
0000000000000000000000000000000000000000;;		// this is only used for display.
0000000000000000000000000000000000000000;;		Units string `json:"units"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// data type of the metric (eg: int, float)
0000000000000000000000000000000000000000;;		DataType v1.DataType `json:"data_type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the frequency at which the metric should be collected
0000000000000000000000000000000000000000;;		PollingFrequency time.Duration `json:"polling_frequency"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the regular expression that can be used to extract the metric
0000000000000000000000000000000000000000;;		Regex string `json:"regex"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Prometheus struct {
0000000000000000000000000000000000000000;;		// the endpoint to hit to scrape metrics
0000000000000000000000000000000000000000;;		Endpoint EndpointConfig `json:"endpoint"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the frequency at which metrics should be collected
0000000000000000000000000000000000000000;;		PollingFrequency time.Duration `json:"polling_frequency"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// holds names of different metrics that can be collected
0000000000000000000000000000000000000000;;		MetricsConfig []string `json:"metrics_config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EndpointConfig struct {
0000000000000000000000000000000000000000;;		// The full URL of the endpoint to reach
0000000000000000000000000000000000000000;;		URL string
0000000000000000000000000000000000000000;;		// A configuration in which an actual URL is constructed from, using the container's ip address
0000000000000000000000000000000000000000;;		URLConfig URLConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type URLConfig struct {
0000000000000000000000000000000000000000;;		// the protocol to use for connecting to the endpoint. Eg 'http' or 'https'
0000000000000000000000000000000000000000;;		Protocol string `json:"protocol"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the port to use for connecting to the endpoint. Eg '8778'
0000000000000000000000000000000000000000;;		Port json.Number `json:"port"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the path to use for the endpoint. Eg '/metrics'
0000000000000000000000000000000000000000;;		Path string `json:"path"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ec *EndpointConfig) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		url := ""
0000000000000000000000000000000000000000;;		config := URLConfig{
0000000000000000000000000000000000000000;;			Protocol: "http",
0000000000000000000000000000000000000000;;			Port:     "8000",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(b, &url); err == nil {
0000000000000000000000000000000000000000;;			ec.URL = url
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &config)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			ec.URLConfig = config
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
