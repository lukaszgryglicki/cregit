0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
2f7de603bc49bb8e10c4f7b2a87dd983e556f46a;Godeps/_workspace/src/github.com/google/cadvisor/collector/types.go[Godeps/_workspace/src/github.com/google/cadvisor/collector/types.go][vendor/github.com/google/cadvisor/collector/types.go];	
0000000000000000000000000000000000000000;;	package collector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(vmarmol): Export to a custom metrics type when that is available.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Metric collector.
0000000000000000000000000000000000000000;;	type Collector interface {
0000000000000000000000000000000000000000;;		// Collect metrics from this collector.
0000000000000000000000000000000000000000;;		// Returns the next time this collector should be collected from.
0000000000000000000000000000000000000000;;		// Next collection time is always returned, even when an error occurs.
0000000000000000000000000000000000000000;;		// A collection time of zero means no more collection.
0000000000000000000000000000000000000000;;		Collect(map[string][]v1.MetricVal) (time.Time, map[string][]v1.MetricVal, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Return spec for all metrics associated with this collector
0000000000000000000000000000000000000000;;		GetSpec() []v1.MetricSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of this collector.
0000000000000000000000000000000000000000;;		Name() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Manages and runs collectors.
0000000000000000000000000000000000000000;;	type CollectorManager interface {
0000000000000000000000000000000000000000;;		// Register a collector.
0000000000000000000000000000000000000000;;		RegisterCollector(collector Collector) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Collect from collectors that are ready and return the next time
0000000000000000000000000000000000000000;;		// at which a collector will be ready to collect from.
0000000000000000000000000000000000000000;;		// Next collection time is always returned, even when an error occurs.
0000000000000000000000000000000000000000;;		// A collection time of zero means no more collection.
0000000000000000000000000000000000000000;;		Collect() (time.Time, map[string][]v1.MetricVal, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get metric spec from all registered collectors.
0000000000000000000000000000000000000000;;		GetSpec() ([]v1.MetricSpec, error)
0000000000000000000000000000000000000000;;	}
