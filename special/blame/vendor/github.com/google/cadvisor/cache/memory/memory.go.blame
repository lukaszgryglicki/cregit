0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/storage/memory/memory.go[Godeps/_workspace/src/github.com/google/cadvisor/storage/memory/memory.go][vendor/github.com/google/cadvisor/cache/memory/memory.go];	
0000000000000000000000000000000000000000;;	package memory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/storage"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/utils"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(vmarmol): See about refactoring this class, we have an unecessary redirection of containerCache and InMemoryCache.
0000000000000000000000000000000000000000;;	// containerCache is used to store per-container information
0000000000000000000000000000000000000000;;	type containerCache struct {
0000000000000000000000000000000000000000;;		ref         info.ContainerReference
0000000000000000000000000000000000000000;;		recentStats *utils.TimedStore
0000000000000000000000000000000000000000;;		maxAge      time.Duration
0000000000000000000000000000000000000000;;		lock        sync.RWMutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *containerCache) AddStats(stats *info.ContainerStats) error {
0000000000000000000000000000000000000000;;		self.lock.Lock()
0000000000000000000000000000000000000000;;		defer self.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add the stat to storage.
0000000000000000000000000000000000000000;;		self.recentStats.Add(stats.Timestamp, stats)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *containerCache) RecentStats(start, end time.Time, maxStats int) ([]*info.ContainerStats, error) {
0000000000000000000000000000000000000000;;		self.lock.RLock()
0000000000000000000000000000000000000000;;		defer self.lock.RUnlock()
0000000000000000000000000000000000000000;;		result := self.recentStats.InTimeRange(start, end, maxStats)
0000000000000000000000000000000000000000;;		converted := make([]*info.ContainerStats, len(result))
0000000000000000000000000000000000000000;;		for i, el := range result {
0000000000000000000000000000000000000000;;			converted[i] = el.(*info.ContainerStats)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return converted, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newContainerStore(ref info.ContainerReference, maxAge time.Duration) *containerCache {
0000000000000000000000000000000000000000;;		return &containerCache{
0000000000000000000000000000000000000000;;			ref:         ref,
0000000000000000000000000000000000000000;;			recentStats: utils.NewTimedStore(maxAge, -1),
0000000000000000000000000000000000000000;;			maxAge:      maxAge,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InMemoryCache struct {
0000000000000000000000000000000000000000;;		lock              sync.RWMutex
0000000000000000000000000000000000000000;;		containerCacheMap map[string]*containerCache
0000000000000000000000000000000000000000;;		maxAge            time.Duration
0000000000000000000000000000000000000000;;		backend           storage.StorageDriver
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *InMemoryCache) AddStats(ref info.ContainerReference, stats *info.ContainerStats) error {
0000000000000000000000000000000000000000;;		var cstore *containerCache
0000000000000000000000000000000000000000;;		var ok bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			self.lock.Lock()
0000000000000000000000000000000000000000;;			defer self.lock.Unlock()
0000000000000000000000000000000000000000;;			if cstore, ok = self.containerCacheMap[ref.Name]; !ok {
0000000000000000000000000000000000000000;;				cstore = newContainerStore(ref, self.maxAge)
0000000000000000000000000000000000000000;;				self.containerCacheMap[ref.Name] = cstore
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if self.backend != nil {
0000000000000000000000000000000000000000;;			// TODO(monnand): To deal with long delay write operations, we
0000000000000000000000000000000000000000;;			// may want to start a pool of goroutines to do write
0000000000000000000000000000000000000000;;			// operations.
0000000000000000000000000000000000000000;;			if err := self.backend.AddStats(ref, stats); err != nil {
0000000000000000000000000000000000000000;;				glog.Error(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cstore.AddStats(stats)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *InMemoryCache) RecentStats(name string, start, end time.Time, maxStats int) ([]*info.ContainerStats, error) {
0000000000000000000000000000000000000000;;		var cstore *containerCache
0000000000000000000000000000000000000000;;		var ok bool
0000000000000000000000000000000000000000;;		err := func() error {
0000000000000000000000000000000000000000;;			self.lock.RLock()
0000000000000000000000000000000000000000;;			defer self.lock.RUnlock()
0000000000000000000000000000000000000000;;			if cstore, ok = self.containerCacheMap[name]; !ok {
0000000000000000000000000000000000000000;;				return fmt.Errorf("unable to find data for container %v", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cstore.RecentStats(start, end, maxStats)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *InMemoryCache) Close() error {
0000000000000000000000000000000000000000;;		self.lock.Lock()
0000000000000000000000000000000000000000;;		self.containerCacheMap = make(map[string]*containerCache, 32)
0000000000000000000000000000000000000000;;		self.lock.Unlock()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *InMemoryCache) RemoveContainer(containerName string) error {
0000000000000000000000000000000000000000;;		self.lock.Lock()
0000000000000000000000000000000000000000;;		delete(self.containerCacheMap, containerName)
0000000000000000000000000000000000000000;;		self.lock.Unlock()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(
0000000000000000000000000000000000000000;;		maxAge time.Duration,
0000000000000000000000000000000000000000;;		backend storage.StorageDriver,
0000000000000000000000000000000000000000;;	) *InMemoryCache {
0000000000000000000000000000000000000000;;		ret := &InMemoryCache{
0000000000000000000000000000000000000000;;			containerCacheMap: make(map[string]*containerCache, 32),
0000000000000000000000000000000000000000;;			maxAge:            maxAge,
0000000000000000000000000000000000000000;;			backend:           backend,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
