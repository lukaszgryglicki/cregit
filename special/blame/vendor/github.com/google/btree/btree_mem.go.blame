0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/google/btree/btree_mem.go[Godeps/_workspace/src/github.com/google/btree/btree_mem.go][vendor/github.com/google/btree/btree_mem.go];	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This binary compares memory usage between btree and gollrb.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/btree"
0000000000000000000000000000000000000000;;		"github.com/petar/GoLLRB/llrb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		size   = flag.Int("size", 1000000, "size of the tree to build")
0000000000000000000000000000000000000000;;		degree = flag.Int("degree", 8, "degree of btree")
0000000000000000000000000000000000000000;;		gollrb = flag.Bool("llrb", false, "use llrb instead of btree")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;		vals := rand.Perm(*size)
0000000000000000000000000000000000000000;;		var t, v interface{}
0000000000000000000000000000000000000000;;		v = vals
0000000000000000000000000000000000000000;;		var stats runtime.MemStats
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			runtime.GC()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println("-------- BEFORE ----------")
0000000000000000000000000000000000000000;;		runtime.ReadMemStats(&stats)
0000000000000000000000000000000000000000;;		fmt.Printf("%+v\n", stats)
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		if *gollrb {
0000000000000000000000000000000000000000;;			tr := llrb.New()
0000000000000000000000000000000000000000;;			for _, v := range vals {
0000000000000000000000000000000000000000;;				tr.ReplaceOrInsert(llrb.Int(v))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t = tr // keep it around
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			tr := btree.New(*degree)
0000000000000000000000000000000000000000;;			for _, v := range vals {
0000000000000000000000000000000000000000;;				tr.ReplaceOrInsert(btree.Int(v))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t = tr // keep it around
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Printf("%v inserts in %v\n", *size, time.Since(start))
0000000000000000000000000000000000000000;;		fmt.Println("-------- AFTER ----------")
0000000000000000000000000000000000000000;;		runtime.ReadMemStats(&stats)
0000000000000000000000000000000000000000;;		fmt.Printf("%+v\n", stats)
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			runtime.GC()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println("-------- AFTER GC ----------")
0000000000000000000000000000000000000000;;		runtime.ReadMemStats(&stats)
0000000000000000000000000000000000000000;;		fmt.Printf("%+v\n", stats)
0000000000000000000000000000000000000000;;		if t == v {
0000000000000000000000000000000000000000;;			fmt.Println("to make sure vals and tree aren't GC'd")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
