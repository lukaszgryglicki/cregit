0000000000000000000000000000000000000000;;	package bolt
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/boltdb/bolt/errors.go[Godeps/_workspace/src/github.com/boltdb/bolt/errors.go][vendor/github.com/boltdb/bolt/errors.go];	
0000000000000000000000000000000000000000;;	import "errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These errors can be returned when opening or calling methods on a DB.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrDatabaseNotOpen is returned when a DB instance is accessed before it
0000000000000000000000000000000000000000;;		// is opened or after it is closed.
0000000000000000000000000000000000000000;;		ErrDatabaseNotOpen = errors.New("database not open")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrDatabaseOpen is returned when opening a database that is
0000000000000000000000000000000000000000;;		// already open.
0000000000000000000000000000000000000000;;		ErrDatabaseOpen = errors.New("database already open")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrInvalid is returned when both meta pages on a database are invalid.
0000000000000000000000000000000000000000;;		// This typically occurs when a file is not a bolt database.
0000000000000000000000000000000000000000;;		ErrInvalid = errors.New("invalid database")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrVersionMismatch is returned when the data file was created with a
0000000000000000000000000000000000000000;;		// different version of Bolt.
0000000000000000000000000000000000000000;;		ErrVersionMismatch = errors.New("version mismatch")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrChecksum is returned when either meta page checksum does not match.
0000000000000000000000000000000000000000;;		ErrChecksum = errors.New("checksum error")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrTimeout is returned when a database cannot obtain an exclusive lock
0000000000000000000000000000000000000000;;		// on the data file after the timeout passed to Open().
0000000000000000000000000000000000000000;;		ErrTimeout = errors.New("timeout")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These errors can occur when beginning or committing a Tx.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrTxNotWritable is returned when performing a write operation on a
0000000000000000000000000000000000000000;;		// read-only transaction.
0000000000000000000000000000000000000000;;		ErrTxNotWritable = errors.New("tx not writable")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrTxClosed is returned when committing or rolling back a transaction
0000000000000000000000000000000000000000;;		// that has already been committed or rolled back.
0000000000000000000000000000000000000000;;		ErrTxClosed = errors.New("tx closed")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrDatabaseReadOnly is returned when a mutating transaction is started on a
0000000000000000000000000000000000000000;;		// read-only database.
0000000000000000000000000000000000000000;;		ErrDatabaseReadOnly = errors.New("database is in read-only mode")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These errors can occur when putting or deleting a value or a bucket.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrBucketNotFound is returned when trying to access a bucket that has
0000000000000000000000000000000000000000;;		// not been created yet.
0000000000000000000000000000000000000000;;		ErrBucketNotFound = errors.New("bucket not found")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrBucketExists is returned when creating a bucket that already exists.
0000000000000000000000000000000000000000;;		ErrBucketExists = errors.New("bucket already exists")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrBucketNameRequired is returned when creating a bucket with a blank name.
0000000000000000000000000000000000000000;;		ErrBucketNameRequired = errors.New("bucket name required")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrKeyRequired is returned when inserting a zero-length key.
0000000000000000000000000000000000000000;;		ErrKeyRequired = errors.New("key required")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrKeyTooLarge is returned when inserting a key that is larger than MaxKeySize.
0000000000000000000000000000000000000000;;		ErrKeyTooLarge = errors.New("key too large")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrValueTooLarge is returned when inserting a value that is larger than MaxValueSize.
0000000000000000000000000000000000000000;;		ErrValueTooLarge = errors.New("value too large")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrIncompatibleValue is returned when trying create or delete a bucket
0000000000000000000000000000000000000000;;		// on an existing non-bucket key or when trying to create or delete a
0000000000000000000000000000000000000000;;		// non-bucket key on an existing bucket key.
0000000000000000000000000000000000000000;;		ErrIncompatibleValue = errors.New("incompatible value")
0000000000000000000000000000000000000000;;	)
