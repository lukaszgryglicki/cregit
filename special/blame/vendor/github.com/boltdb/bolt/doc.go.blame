0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package bolt implements a low-level key/value store in pure Go. It supports
0000000000000000000000000000000000000000;;	fully serializable transactions, ACID semantics, and lock-free MVCC with
0000000000000000000000000000000000000000;;	multiple readers and a single writer. Bolt can be used for projects that
0000000000000000000000000000000000000000;;	want a simple data store without the need to add large dependencies such as
0000000000000000000000000000000000000000;;	Postgres or MySQL.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/boltdb/bolt/doc.go[Godeps/_workspace/src/github.com/boltdb/bolt/doc.go][vendor/github.com/boltdb/bolt/doc.go];	
0000000000000000000000000000000000000000;;	Bolt is a single-level, zero-copy, B+tree data store. This means that Bolt is
0000000000000000000000000000000000000000;;	optimized for fast read access and does not require recovery in the event of a
0000000000000000000000000000000000000000;;	system crash. Transactions which have not finished committing will simply be
0000000000000000000000000000000000000000;;	rolled back in the event of a crash.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The design of Bolt is based on Howard Chu's LMDB database project.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Bolt currently works on Windows, Mac OS X, and Linux.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Basics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	There are only a few types in Bolt: DB, Bucket, Tx, and Cursor. The DB is
0000000000000000000000000000000000000000;;	a collection of buckets and is represented by a single file on disk. A bucket is
0000000000000000000000000000000000000000;;	a collection of unique keys that are associated with values.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Transactions provide either read-only or read-write access to the database.
0000000000000000000000000000000000000000;;	Read-only transactions can retrieve key/value pairs and can use Cursors to
0000000000000000000000000000000000000000;;	iterate over the dataset sequentially. Read-write transactions can create and
0000000000000000000000000000000000000000;;	delete buckets and can insert and remove keys. Only one read-write transaction
0000000000000000000000000000000000000000;;	is allowed at a time.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Caveats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The database uses a read-only, memory-mapped data file to ensure that
0000000000000000000000000000000000000000;;	applications cannot corrupt the database, however, this means that keys and
0000000000000000000000000000000000000000;;	values returned from Bolt cannot be changed. Writing to a read-only byte slice
0000000000000000000000000000000000000000;;	will cause Go to panic.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Keys and values retrieved from the database are only valid for the life of
0000000000000000000000000000000000000000;;	the transaction. When used outside the transaction, these byte slices can
0000000000000000000000000000000000000000;;	point to different data or can point to invalid memory which will cause a panic.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package bolt
