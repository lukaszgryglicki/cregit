0000000000000000000000000000000000000000;;	// Copyright (c) 2013 Phillip Bond
0000000000000000000000000000000000000000;;	// Licensed under the MIT License
0000000000000000000000000000000000000000;;	// see file LICENSE
c841fb672d6f9bc0f6ff4e0b9a3716fb3886fa66;Godeps/_workspace/src/bitbucket.org/bertimus9/systemstat/systemstat.go[Godeps/_workspace/src/bitbucket.org/bertimus9/systemstat/systemstat.go][vendor/bitbucket.org/bertimus9/systemstat/systemstat.go];	
0000000000000000000000000000000000000000;;	package systemstat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CPUSample is an object that represents the breakdown of time spent by the
0000000000000000000000000000000000000000;;	// CPU in various types of tasks. Two CPUSamples are required to find the
0000000000000000000000000000000000000000;;	// average usage over time, represented by the CPUAverage object. The CPUSample
0000000000000000000000000000000000000000;;	// is taken from the line "cpu" from /proc/stat in the Linux kernel.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Summarized from the proc(5) man page:
0000000000000000000000000000000000000000;;	// /proc/stat :
0000000000000000000000000000000000000000;;	//        kernel/system  statistics.   Varies  with  architecture.
0000000000000000000000000000000000000000;;	type CPUSample struct {
0000000000000000000000000000000000000000;;		User    uint64    // time spent in user mode
0000000000000000000000000000000000000000;;		Nice    uint64    // time spent in user mode with low priority (nice)
0000000000000000000000000000000000000000;;		System  uint64    // time spent in system mode
0000000000000000000000000000000000000000;;		Idle    uint64    // time spent in the idle task
0000000000000000000000000000000000000000;;		Iowait  uint64    // time spent waiting for I/O to complete (since Linux 2.5.41)
0000000000000000000000000000000000000000;;		Irq     uint64    // time spent servicing  interrupts  (since  2.6.0-test4)
0000000000000000000000000000000000000000;;		SoftIrq uint64    // time spent servicing softirqs (since 2.6.0-test4)
0000000000000000000000000000000000000000;;		Steal   uint64    // time spent in other OSes when running in a virtualized environment
0000000000000000000000000000000000000000;;		Guest   uint64    // time spent running a virtual CPU for guest operating systems under the control of the Linux kernel.
0000000000000000000000000000000000000000;;		Name    string    // name of the line in /proc/stat; cpu, cpu1, etc
0000000000000000000000000000000000000000;;		Time    time.Time // when the sample was taken
0000000000000000000000000000000000000000;;		Total   uint64    // total of all time fields
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcCPUSample struct {
0000000000000000000000000000000000000000;;		User         float64   // time spent in user mode
0000000000000000000000000000000000000000;;		System       float64   // time spent in system mode
0000000000000000000000000000000000000000;;		Time         time.Time // when the sample was taken
0000000000000000000000000000000000000000;;		Total        float64   // total of all time fields
0000000000000000000000000000000000000000;;		ProcMemUsedK int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcCPUAverage struct {
0000000000000000000000000000000000000000;;		UserPct            float64   // time spent in user mode
0000000000000000000000000000000000000000;;		SystemPct          float64   // time spent in system mode
0000000000000000000000000000000000000000;;		TotalPct           float64   // total of all time fields
0000000000000000000000000000000000000000;;		PossiblePct        float64   // total of all time fields
0000000000000000000000000000000000000000;;		CumulativeTotalPct float64   // total of all time throughout process life
0000000000000000000000000000000000000000;;		Time               time.Time // when the sample was taken
0000000000000000000000000000000000000000;;		Seconds            float64   // how many seconds between the two samples
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SimpleCPUAverage is an object that represents the average cpu usage over a
0000000000000000000000000000000000000000;;	// time period. It is calculated by taking the difference between two
0000000000000000000000000000000000000000;;	// CPUSamples (whose units are clock ticks), dividing by the number of elapsed
0000000000000000000000000000000000000000;;	// ticks between the samples, and converting to a percent. It is a simplified version of the CPUAverage in that it only accounts for time in the Idle task and all other time (Busy).
0000000000000000000000000000000000000000;;	type SimpleCPUAverage struct {
0000000000000000000000000000000000000000;;		BusyPct float64 // percent of time spent by CPU performing all non-idle tasks
0000000000000000000000000000000000000000;;		IdlePct float64 // percent of time spent by CPU in the idle task
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CPUAverage is an object that represents the average cpu usage over a
0000000000000000000000000000000000000000;;	// time period. It is calculated by taking the difference between two
0000000000000000000000000000000000000000;;	// CPUSamples (whose units are clock ticks), dividing by the number of elapsed
0000000000000000000000000000000000000000;;	// ticks between the samples, and converting to a percent.
0000000000000000000000000000000000000000;;	type CPUAverage struct {
0000000000000000000000000000000000000000;;		UserPct    float64
0000000000000000000000000000000000000000;;		NicePct    float64
0000000000000000000000000000000000000000;;		SystemPct  float64
0000000000000000000000000000000000000000;;		IdlePct    float64
0000000000000000000000000000000000000000;;		IowaitPct  float64
0000000000000000000000000000000000000000;;		IrqPct     float64
0000000000000000000000000000000000000000;;		SoftIrqPct float64
0000000000000000000000000000000000000000;;		StealPct   float64
0000000000000000000000000000000000000000;;		GuestPct   float64
0000000000000000000000000000000000000000;;		Time       time.Time
0000000000000000000000000000000000000000;;		Seconds    float64 // how many seconds between the two samples
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MemSample struct {
0000000000000000000000000000000000000000;;		Buffers   uint64
0000000000000000000000000000000000000000;;		Cached    uint64
0000000000000000000000000000000000000000;;		MemTotal  uint64
0000000000000000000000000000000000000000;;		MemUsed   uint64
0000000000000000000000000000000000000000;;		MemFree   uint64
0000000000000000000000000000000000000000;;		SwapTotal uint64
0000000000000000000000000000000000000000;;		SwapUsed  uint64
0000000000000000000000000000000000000000;;		SwapFree  uint64
0000000000000000000000000000000000000000;;		Time      time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadAvgSample struct {
0000000000000000000000000000000000000000;;		One     float64
0000000000000000000000000000000000000000;;		Five    float64
0000000000000000000000000000000000000000;;		Fifteen float64
0000000000000000000000000000000000000000;;		Time    time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UptimeSample struct {
0000000000000000000000000000000000000000;;		Uptime float64
0000000000000000000000000000000000000000;;		Time   time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCPUAverage returns the average cpu usage between two CPUSamples.
0000000000000000000000000000000000000000;;	func GetCPUAverage(first CPUSample, second CPUSample) CPUAverage {
0000000000000000000000000000000000000000;;		return getCPUAverage(first, second)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSimpleCPUAverage returns an aggregated average cpu usage between two CPUSamples.
0000000000000000000000000000000000000000;;	func GetSimpleCPUAverage(first CPUSample, second CPUSample) SimpleCPUAverage {
0000000000000000000000000000000000000000;;		return getSimpleCPUAverage(first, second)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetProcCPUAverage returns the average cpu usage of this running process
0000000000000000000000000000000000000000;;	func GetProcCPUAverage(first ProcCPUSample, second ProcCPUSample, procUptime float64) (avg ProcCPUAverage) {
0000000000000000000000000000000000000000;;		return getProcCPUAverage(first, second, procUptime)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCPUSample takes a snapshot of kernel statistics from the /proc/stat file.
0000000000000000000000000000000000000000;;	func GetCPUSample() (samp CPUSample) {
0000000000000000000000000000000000000000;;		return getCPUSample("/proc/stat")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetProcCPUSample takes a snapshot of kernel statistics from the /proc/stat file.
0000000000000000000000000000000000000000;;	func GetProcCPUSample() (samp ProcCPUSample) {
0000000000000000000000000000000000000000;;		return getProcCPUSample()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetUptime takes a snapshot of load info from the /proc/loadavg file.
0000000000000000000000000000000000000000;;	func GetUptime() (samp UptimeSample) {
0000000000000000000000000000000000000000;;		return getUptime("/proc/uptime")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetLoadAvgSample takes a snapshot of load info from the /proc/loadavg file.
0000000000000000000000000000000000000000;;	func GetLoadAvgSample() (samp LoadAvgSample) {
0000000000000000000000000000000000000000;;		return getLoadAvgSample("/proc/loadavg")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMemSample takes a snapshot of memory info from the /proc/meminfo file.
0000000000000000000000000000000000000000;;	func GetMemSample() (samp MemSample) {
0000000000000000000000000000000000000000;;		return getMemSample("/proc/meminfo")
0000000000000000000000000000000000000000;;	}
