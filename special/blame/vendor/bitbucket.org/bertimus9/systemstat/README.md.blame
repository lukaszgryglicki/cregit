0000000000000000000000000000000000000000;;	# systemstat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Documentation online](http://godoc.org/bitbucket.org/bertimus9/systemstat)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**systemstat** is a package written in Go generated automatically by `gobi`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**systemstat** allows you to add system statistics to your go program; it
0000000000000000000000000000000000000000;;	currently polls the linux kernel for CPU usage, free/used memory and swap
0000000000000000000000000000000000000000;;	sizes, and uptime for your go process, as well as the system you're running it
0000000000000000000000000000000000000000;;	on, and the system load. It can be used to make a crippled version of top that
0000000000000000000000000000000000000000;;	monitors the current go process and ignores other processes and the number of
0000000000000000000000000000000000000000;;	users with ttys. See the examples directory for go-top.go, which is my attempt
0000000000000000000000000000000000000000;;	at a top clone. Bear in mind that the intention of **systemstat** is to allow
0000000000000000000000000000000000000000;;	your process to monitor itself and it's environment, not to replace top.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Install (with GOPATH set on your machine)
0000000000000000000000000000000000000000;;	----------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Step 1: Get the `systemstat` package
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	go get bitbucket.org/bertimus9/systemstat
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Step 2 (Optional): Run tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	$ go test -v bitbucket.org/bertimus9/systemstat
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Step 3 (Optional): Run example
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```bash
0000000000000000000000000000000000000000;;	$ cd to the first directory in your $GOPATH
0000000000000000000000000000000000000000;;	$ cd src/bitbucket.org/bertimus9/systemstat
0000000000000000000000000000000000000000;;	$ go run examples/go-top.go
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	##Usage
0000000000000000000000000000000000000000;;	----------
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bitbucket.org/bertimus9/systemstat"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var sample systemstat.MemSample
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This example shows how easy it is to get memory information
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		sample = systemstat.GetMemSample()
0000000000000000000000000000000000000000;;		fmt.Println("Total available RAM in kb:", sample.MemTotal, "k total")
0000000000000000000000000000000000000000;;		fmt.Println("Used RAM in kb:", sample.MemUsed, "k used")
0000000000000000000000000000000000000000;;		fmt.Println("Free RAM in kb:", sample.MemFree, "k free")
0000000000000000000000000000000000000000;;		fmt.Printf("The output is similar to, but somewhat different than:\n\ttop -n1 | grep Mem:\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	##License
0000000000000000000000000000000000000000;;	----------
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Copyright (c) 2013 Phillip Bond
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the MIT License
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	see file LICENSE
0000000000000000000000000000000000000000;;	
