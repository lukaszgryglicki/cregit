0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8348cc447f54ffa72cc1bd618c5ca60528fda670;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var collectCases = []struct {
0000000000000000000000000000000000000000;;		filename string
0000000000000000000000000000000000000000;;		code     string
0000000000000000000000000000000000000000;;		output   []Test
0000000000000000000000000000000000000000;;	}{
0000000000000000000000000000000000000000;;		// Empty: no tests
0000000000000000000000000000000000000000;;		{"e2e/util_test.go", "", []Test{}},
0000000000000000000000000000000000000000;;		// Go unit test
0000000000000000000000000000000000000000;;		{"test/list/main_test.go", `
0000000000000000000000000000000000000000;;	var num = 3
0000000000000000000000000000000000000000;;	func Helper(x int) { return x / 0 }
0000000000000000000000000000000000000000;;	func TestStuff(t *Testing.T) {
0000000000000000000000000000000000000000;;	}`, []Test{{"test/list/main_test.go:5:1", "k8s.io/kubernetes/test/list", "TestStuff"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// Describe + It
0000000000000000000000000000000000000000;;		{"e2e/foo.go", `
0000000000000000000000000000000000000000;;	var _ = Describe("Feature", func() {
0000000000000000000000000000000000000000;;		It("should work properly", func() {})
0000000000000000000000000000000000000000;;	})`, []Test{{"e2e/foo.go:4:2", "[k8s.io] Feature", "should work properly"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// KubeDescribe + It
0000000000000000000000000000000000000000;;		{"e2e/foo.go", `
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Feature", func() {
0000000000000000000000000000000000000000;;		It("should work properly", func() {})
0000000000000000000000000000000000000000;;	})`, []Test{{"e2e/foo.go:4:2", "[k8s.io] Feature", "should work properly"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// KubeDescribe + Context + It
0000000000000000000000000000000000000000;;		{"e2e/foo.go", `
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Feature", func() {
0000000000000000000000000000000000000000;;		Context("when offline", func() {
0000000000000000000000000000000000000000;;			It("should work", func() {})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})`, []Test{{"e2e/foo.go:5:3", "[k8s.io] Feature when offline", "should work"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// KubeDescribe + It(Sprintf)
0000000000000000000000000000000000000000;;		{"e2e/foo.go", `
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Feature", func() {
0000000000000000000000000000000000000000;;		It(fmt.Sprintf("handles %d nodes", num), func() {})
0000000000000000000000000000000000000000;;	})`, []Test{{"e2e/foo.go:4:2", "[k8s.io] Feature", "handles * nodes"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// KubeDescribe + Sprintf + It(var)
0000000000000000000000000000000000000000;;		{"e2e/foo.go", `
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Feature", func() {
0000000000000000000000000000000000000000;;		arg := fmt.Sprintf("does %s and %v at %d", task, desc, num)
0000000000000000000000000000000000000000;;		It(arg, func() {})
0000000000000000000000000000000000000000;;	})`, []Test{{"e2e/foo.go:5:2", "[k8s.io] Feature", "does * and * at *"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// KubeDescribe + string + It(var)
0000000000000000000000000000000000000000;;		{"e2e/foo.go", `
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Feature", func() {
0000000000000000000000000000000000000000;;		arg := "does stuff"
0000000000000000000000000000000000000000;;		It(arg, func() {})
0000000000000000000000000000000000000000;;	})`, []Test{{"e2e/foo.go:5:2", "[k8s.io] Feature", "does stuff"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// KubeDescribe + It(unknown)
0000000000000000000000000000000000000000;;		{"e2e/foo.go", `
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Feature", func() {
0000000000000000000000000000000000000000;;		It(mysteryFunc(), func() {})
0000000000000000000000000000000000000000;;	})`, []Test{{"e2e/foo.go:4:2", "[k8s.io] Feature", "*"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCollect(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, test := range collectCases {
0000000000000000000000000000000000000000;;			code := "package test\n" + test.code
0000000000000000000000000000000000000000;;			tests := collect(test.filename, code)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(tests, test.output) {
0000000000000000000000000000000000000000;;				t.Errorf("code:\n%s\ngot  %v\nwant %v",
0000000000000000000000000000000000000000;;					code, tests, test.output)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandlePath(t *testing.T) {
0000000000000000000000000000000000000000;;		tl := testList{}
0000000000000000000000000000000000000000;;		e := errors.New("ex")
0000000000000000000000000000000000000000;;		if tl.handlePath("foo", nil, e) != e {
0000000000000000000000000000000000000000;;			t.Error("handlePath not returning errors")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if tl.handlePath("foo.txt", nil, nil) != nil {
0000000000000000000000000000000000000000;;			t.Error("should skip random files")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if tl.handlePath("third_party/a_test.go", nil, nil) != filepath.SkipDir {
0000000000000000000000000000000000000000;;			t.Error("should skip third_party")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
