0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Script used to configure node e2e test hosts from gce base images.
0000000000000000000000000000000000000000;;	# DISCLAIMER: This script is not actively tested or maintained.  No guarantees that this will work
0000000000000000000000000000000000000000;;	# on any host environment.  Contributions encouraged!  Send PRs to pwittrock (github.com).
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# At some point has successfully configured the following distros:
0000000000000000000000000000000000000000;;	# - ubuntu trusty
0000000000000000000000000000000000000000;;	# - containervm (no-op)
0000000000000000000000000000000000000000;;	# - rhel 7
0000000000000000000000000000000000000000;;	# - centos 7
0000000000000000000000000000000000000000;;	# - debian jessie
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# RHEL os detection
0000000000000000000000000000000000000000;;	cat /etc/*-release | grep "ID=\"rhel\""
0000000000000000000000000000000000000000;;	OS_RHEL=$?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# On a systemd environment, enable cpu and memory accounting for all processes by default.
0000000000000000000000000000000000000000;;	if [ -d /etc/systemd ]; then
0000000000000000000000000000000000000000;;	  cat <<EOF >kubernetes-accounting.conf
0000000000000000000000000000000000000000;;	[Manager]
0000000000000000000000000000000000000000;;	DefaultCPUAccounting=yes
0000000000000000000000000000000000000000;;	DefaultMemoryAccounting=yes
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  sudo mkdir -p /etc/systemd/system.conf.d/
0000000000000000000000000000000000000000;;	  sudo cp kubernetes-accounting.conf /etc/systemd/system.conf.d
0000000000000000000000000000000000000000;;	  sudo systemctl daemon-reload
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# For coreos, disable updates
0000000000000000000000000000000000000000;;	if $(sudo systemctl status update-engine &>/dev/null); then
0000000000000000000000000000000000000000;;	  sudo systemctl mask update-engine locksmithd
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Fixup sudoers require tty
0000000000000000000000000000000000000000;;	sudo grep -q "# Defaults    requiretty" /etc/sudoers
0000000000000000000000000000000000000000;;	if [ $? -ne 0 ] ; then
0000000000000000000000000000000000000000;;	  sudo sed -i 's/Defaults    requiretty/# Defaults    requiretty/' /etc/sudoers
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Install nsenter for ubuntu images
0000000000000000000000000000000000000000;;	cat /etc/*-release | grep "ID=ubuntu"
0000000000000000000000000000000000000000;;	if [ $? -eq 0 ]; then
0000000000000000000000000000000000000000;;	  if ! which nsenter > /dev/null; then
0000000000000000000000000000000000000000;;	     echo "Do not find nsenter. Install it."
0000000000000000000000000000000000000000;;	     mkdir -p /tmp/nsenter-install
0000000000000000000000000000000000000000;;	     cd /tmp/nsenter-install
0000000000000000000000000000000000000000;;	     curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-
0000000000000000000000000000000000000000;;	     sudo apt-get update
0000000000000000000000000000000000000000;;	     sudo apt-get --yes install make
0000000000000000000000000000000000000000;;	     sudo apt-get --yes install gcc
0000000000000000000000000000000000000000;;	     cd util-linux-2.24
0000000000000000000000000000000000000000;;	     ./configure --without-ncurses
0000000000000000000000000000000000000000;;	     make nsenter
0000000000000000000000000000000000000000;;	     sudo cp nsenter /usr/local/bin
0000000000000000000000000000000000000000;;	     rm -rf /tmp/nsenter-install
0000000000000000000000000000000000000000;;	   fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Install docker
0000000000000000000000000000000000000000;;	hash docker 2>/dev/null
0000000000000000000000000000000000000000;;	if [ $? -ne 0 ]; then
0000000000000000000000000000000000000000;;	  # RHEL platforms should always install from RHEL repository
0000000000000000000000000000000000000000;;	  # This will install the latest supported stable docker platform on RHEL
0000000000000000000000000000000000000000;;	  if [ $OS_RHEL -eq 0 ]; then
0000000000000000000000000000000000000000;;	    sudo yum install -y docker-latest
0000000000000000000000000000000000000000;;	    sudo groupadd docker
0000000000000000000000000000000000000000;;	    sudo systemctl enable docker-latest.service
0000000000000000000000000000000000000000;;	    sudo systemctl start docker-latest.service
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    curl -fsSL https://get.docker.com/ | sh
0000000000000000000000000000000000000000;;	    sudo service docker start
0000000000000000000000000000000000000000;;	    sudo systemctl enable docker.service
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Allow jenkins access to docker
0000000000000000000000000000000000000000;;	id jenkins || sudo useradd jenkins -m
0000000000000000000000000000000000000000;;	sudo usermod -a -G docker jenkins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# install lxc
0000000000000000000000000000000000000000;;	cat /etc/*-release | grep "ID=debian"
0000000000000000000000000000000000000000;;	if [ $? -ne 0 ]; then
0000000000000000000000000000000000000000;;	  hash apt-get 2>/dev/null
0000000000000000000000000000000000000000;;	  if [ $? -ne 1 ]; then
0000000000000000000000000000000000000000;;	    sudo apt-get install lxc -y
0000000000000000000000000000000000000000;;	    lxc-checkconfig
0000000000000000000000000000000000000000;;	    sudo sed -i 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="\1 cgroup_enable=memory"/' /etc/default/grub
0000000000000000000000000000000000000000;;	    sudo update-grub  
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# delete init kubelet from containervm so that is doesn't startup
0000000000000000000000000000000000000000;;	if [ -f /etc/init.d/kubelet ]; then
0000000000000000000000000000000000000000;;	  sudo rm /etc/init.d/kubelet
0000000000000000000000000000000000000000;;	fi
