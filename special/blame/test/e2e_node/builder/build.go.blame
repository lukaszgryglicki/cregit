0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
48687e92e477ac7584e2167428d5336e6db56d7e;test/e2e_node/e2e_build.go[test/e2e_node/e2e_build.go][test/e2e_node/builder/build.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package builder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var k8sBinDir = flag.String("k8s-bin-dir", "", "Directory containing k8s kubelet binaries.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var buildTargets = []string{
0000000000000000000000000000000000000000;;		"cmd/kubelet",
0000000000000000000000000000000000000000;;		"test/e2e_node/e2e_node.test",
0000000000000000000000000000000000000000;;		"vendor/github.com/onsi/ginkgo/ginkgo",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildGo() error {
0000000000000000000000000000000000000000;;		glog.Infof("Building k8s binaries...")
0000000000000000000000000000000000000000;;		k8sRoot, err := GetK8sRootDir()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to locate kubernetes root directory %v.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		targets := strings.Join(buildTargets, " ")
0000000000000000000000000000000000000000;;		cmd := exec.Command("make", "-C", k8sRoot, fmt.Sprintf("WHAT=%s", targets))
0000000000000000000000000000000000000000;;		cmd.Stdout = os.Stdout
0000000000000000000000000000000000000000;;		cmd.Stderr = os.Stderr
0000000000000000000000000000000000000000;;		err = cmd.Run()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to build go packages %v\n", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getK8sBin(bin string) (string, error) {
0000000000000000000000000000000000000000;;		// Use commandline specified path
0000000000000000000000000000000000000000;;		if *k8sBinDir != "" {
0000000000000000000000000000000000000000;;			absPath, err := filepath.Abs(*k8sBinDir)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := os.Stat(filepath.Join(*k8sBinDir, bin)); err != nil {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("Could not find %s under directory %s.", bin, absPath)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return filepath.Join(absPath, bin), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		path, err := filepath.Abs(filepath.Dir(os.Args[0]))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Could not find absolute path of directory containing the tests %s.", filepath.Dir(os.Args[0]))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(filepath.Join(path, bin)); err == nil {
0000000000000000000000000000000000000000;;			return filepath.Join(path, bin), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buildOutputDir, err := GetK8sBuildOutputDir()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(filepath.Join(buildOutputDir, bin)); err == nil {
0000000000000000000000000000000000000000;;			return filepath.Join(buildOutputDir, bin), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Give up with error
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("Unable to locate %s.  Can be defined using --k8s-path.", bin)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Dedup / merge this with comparable utilities in e2e/util.go
0000000000000000000000000000000000000000;;	func GetK8sRootDir() (string, error) {
0000000000000000000000000000000000000000;;		// Get the directory of the current executable
0000000000000000000000000000000000000000;;		_, testExec, _, _ := runtime.Caller(0)
0000000000000000000000000000000000000000;;		path := filepath.Dir(testExec)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Look for the kubernetes source root directory
0000000000000000000000000000000000000000;;		if strings.Contains(path, "k8s.io/kubernetes") {
0000000000000000000000000000000000000000;;			splitPath := strings.Split(path, "k8s.io/kubernetes")
0000000000000000000000000000000000000000;;			return filepath.Join(splitPath[0], "k8s.io/kubernetes/"), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("Could not find kubernetes source root directory.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetK8sBuildOutputDir() (string, error) {
0000000000000000000000000000000000000000;;		k8sRoot, err := GetK8sRootDir()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buildOutputDir := filepath.Join(k8sRoot, "_output/local/go/bin")
0000000000000000000000000000000000000000;;		if _, err := os.Stat(buildOutputDir); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buildOutputDir, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetKubeletServerBin() string {
0000000000000000000000000000000000000000;;		bin, err := getK8sBin("kubelet")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Could not locate kubelet binary %v.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return bin
0000000000000000000000000000000000000000;;	}
