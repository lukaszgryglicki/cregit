0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f3d9c142cea72a8a336c499fb09d5f3b5993b2d2;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		podutil "k8s.io/kubernetes/pkg/api/v1/pod"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// One pod one container
0000000000000000000000000000000000000000;;	// TODO: This should be migrated to the e2e framework.
0000000000000000000000000000000000000000;;	type ConformanceContainer struct {
0000000000000000000000000000000000000000;;		Container        v1.Container
0000000000000000000000000000000000000000;;		RestartPolicy    v1.RestartPolicy
0000000000000000000000000000000000000000;;		Volumes          []v1.Volume
0000000000000000000000000000000000000000;;		ImagePullSecrets []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PodClient          *framework.PodClient
0000000000000000000000000000000000000000;;		podName            string
0000000000000000000000000000000000000000;;		PodSecurityContext *v1.PodSecurityContext
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cc *ConformanceContainer) Create() {
0000000000000000000000000000000000000000;;		cc.podName = cc.Container.Name + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;		imagePullSecrets := []v1.LocalObjectReference{}
0000000000000000000000000000000000000000;;		for _, s := range cc.ImagePullSecrets {
0000000000000000000000000000000000000000;;			imagePullSecrets = append(imagePullSecrets, v1.LocalObjectReference{Name: s})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: cc.podName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: cc.RestartPolicy,
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					cc.Container,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecurityContext:  cc.PodSecurityContext,
0000000000000000000000000000000000000000;;				Volumes:          cc.Volumes,
0000000000000000000000000000000000000000;;				ImagePullSecrets: imagePullSecrets,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cc.PodClient.Create(pod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cc *ConformanceContainer) Delete() error {
0000000000000000000000000000000000000000;;		return cc.PodClient.Delete(cc.podName, metav1.NewDeleteOptions(0))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cc *ConformanceContainer) IsReady() (bool, error) {
0000000000000000000000000000000000000000;;		pod, err := cc.PodClient.Get(cc.podName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return podutil.IsPodReady(pod), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cc *ConformanceContainer) GetPhase() (v1.PodPhase, error) {
0000000000000000000000000000000000000000;;		pod, err := cc.PodClient.Get(cc.podName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return v1.PodUnknown, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pod.Status.Phase, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cc *ConformanceContainer) GetStatus() (v1.ContainerStatus, error) {
0000000000000000000000000000000000000000;;		pod, err := cc.PodClient.Get(cc.podName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return v1.ContainerStatus{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		statuses := pod.Status.ContainerStatuses
0000000000000000000000000000000000000000;;		if len(statuses) != 1 || statuses[0].Name != cc.Container.Name {
0000000000000000000000000000000000000000;;			return v1.ContainerStatus{}, fmt.Errorf("unexpected container statuses %v", statuses)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return statuses[0], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cc *ConformanceContainer) Present() (bool, error) {
0000000000000000000000000000000000000000;;		_, err := cc.PodClient.Get(cc.podName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ContainerStateWaiting    ContainerState = "Waiting"
0000000000000000000000000000000000000000;;		ContainerStateRunning    ContainerState = "Running"
0000000000000000000000000000000000000000;;		ContainerStateTerminated ContainerState = "Terminated"
0000000000000000000000000000000000000000;;		ContainerStateUnknown    ContainerState = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetContainerState(state v1.ContainerState) ContainerState {
0000000000000000000000000000000000000000;;		if state.Waiting != nil {
0000000000000000000000000000000000000000;;			return ContainerStateWaiting
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if state.Running != nil {
0000000000000000000000000000000000000000;;			return ContainerStateRunning
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if state.Terminated != nil {
0000000000000000000000000000000000000000;;			return ContainerStateTerminated
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ContainerStateUnknown
0000000000000000000000000000000000000000;;	}
