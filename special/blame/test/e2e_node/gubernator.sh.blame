0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Make bucket and a folder for e2e-node test logs.
0000000000000000000000000000000000000000;;	# Populate the folder from the logs stored in /tmp/_artifacts/ in the same way as a
0000000000000000000000000000000000000000;;	# jenkins build would, and then print the URL to view the test results on Gubernator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source cluster/lib/logging.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ $# -eq 0 || ! $1 =~ ^[Yy]$ ]]; then
0000000000000000000000000000000000000000;;	  read -p "Do you want to run gubernator.sh and upload logs publicly to GCS? [y/n]" yn
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	  if [[ ! $yn =~ ^[Yy]$ ]]; then
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check that user has gsutil
0000000000000000000000000000000000000000;;	if [[ $(which gsutil) == "" ]]; then
0000000000000000000000000000000000000000;;	  echo "Could not find gsutil when running \`which gsutil\`"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check that user has gcloud
0000000000000000000000000000000000000000;;	if [[ $(which gcloud) == "" ]]; then
0000000000000000000000000000000000000000;;	  echo "Could not find gcloud when running: \`which gcloud\`"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check that user has Credentialed Active account
0000000000000000000000000000000000000000;;	if ! gcloud auth list | grep -q "ACTIVE"; then
0000000000000000000000000000000000000000;;	  echo "Could not find active account when running: \`gcloud auth list\`"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly gcs_acl="public-read"
0000000000000000000000000000000000000000;;	bucket_name="${USER}-g8r-logs"
0000000000000000000000000000000000000000;;	echo ""
0000000000000000000000000000000000000000;;	V=2 kube::log::status "Using bucket ${bucket_name}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check if the bucket exists
0000000000000000000000000000000000000000;;	if ! gsutil ls gs:// | grep -q "gs://${bucket_name}/"; then
0000000000000000000000000000000000000000;;	  V=2 kube::log::status "Creating public bucket ${bucket_name}"
0000000000000000000000000000000000000000;;	  gsutil mb gs://${bucket_name}/
0000000000000000000000000000000000000000;;	  # Make all files in the bucket publicly readable
0000000000000000000000000000000000000000;;	  gsutil acl ch -u AllUsers:R gs://${bucket_name}
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  V=2 kube::log::status "Bucket already exists"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Path for e2e-node test results
0000000000000000000000000000000000000000;;	GCS_JOBS_PATH="gs://${bucket_name}/logs/e2e-node"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	ARTIFACTS=${ARTIFACTS:-"/tmp/_artifacts"}
0000000000000000000000000000000000000000;;	BUILD_LOG_PATH="${ARTIFACTS}/build-log.txt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ ! -e $BUILD_LOG_PATH ]]; then
0000000000000000000000000000000000000000;;	  echo "Could not find build-log.txt at ${BUILD_LOG_PATH}"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Get start and end timestamps based on build-log.txt file contents
0000000000000000000000000000000000000000;;	# Line where the actual tests start
0000000000000000000000000000000000000000;;	start_line=$(grep -n -m 1 "^=" ${BUILD_LOG_PATH} | sed 's/\([0-9]*\).*/\1/')
0000000000000000000000000000000000000000;;	# Create text file starting where the tests start
0000000000000000000000000000000000000000;;	after_start=$(tail -n +${start_line} ${BUILD_LOG_PATH})
0000000000000000000000000000000000000000;;	echo "${after_start}" >> build-log-cut.txt
0000000000000000000000000000000000000000;;	# Match the first timestamp
0000000000000000000000000000000000000000;;	start_time_raw=$(grep -m 1 -o '[0-9][0-9][0-9][0-9][[:blank:]][0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9]*' build-log-cut.txt)
0000000000000000000000000000000000000000;;	rm build-log-cut.txt
0000000000000000000000000000000000000000;;	# Make the date readable by date command (ex: 0101 00:00:00.000 -> 01/01 00:00:00.000)
0000000000000000000000000000000000000000;;	start_time=$(echo ${start_time_raw} | sed 's/^.\{2\}/&\//')
0000000000000000000000000000000000000000;;	V=2 kube::log::status "Started at ${start_time}"
0000000000000000000000000000000000000000;;	# Match the last timestamp in the build-log file
0000000000000000000000000000000000000000;;	end_time=$(grep -o '[0-9][0-9][0-9][0-9][[:blank:]][0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9]*' ${BUILD_LOG_PATH} | tail -1 | sed 's/^.\{2\}/&\//')
0000000000000000000000000000000000000000;;	# Convert to epoch time for Gubernator
0000000000000000000000000000000000000000;;	start_time_epoch=$(date -d "${start_time}" +%s)
0000000000000000000000000000000000000000;;	end_time_epoch=$(date -d "${end_time}" +%s)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Make folder name for build from timestamp
0000000000000000000000000000000000000000;;	BUILD_STAMP=$(echo $start_time | sed 's/\///' | sed 's/ /_/')
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	GCS_LOGS_PATH="${GCS_JOBS_PATH}/${BUILD_STAMP}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Check if folder for same logs already exists
0000000000000000000000000000000000000000;;	if gsutil ls "${GCS_JOBS_PATH}" | grep -q "${BUILD_STAMP}"; then
0000000000000000000000000000000000000000;;	  V=2 kube::log::status "Log files already uploaded"
0000000000000000000000000000000000000000;;	  echo "Gubernator linked below:"
0000000000000000000000000000000000000000;;	  echo "k8s-gubernator.appspot.com/build/${GCS_LOGS_PATH}?local=on"
0000000000000000000000000000000000000000;;	  exit
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for result in $(find ${ARTIFACTS} -type d -name "results"); do
0000000000000000000000000000000000000000;;	  if [[ $result != "" && $result != "${ARTIFACTS}/results" && $result != $ARTIFACTS ]]; then
0000000000000000000000000000000000000000;;	    mv $result/* $ARTIFACTS
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Upload log files
0000000000000000000000000000000000000000;;	for upload_attempt in $(seq 3); do
0000000000000000000000000000000000000000;;	  if [[ -d "${ARTIFACTS}" && -n $(ls -A "${ARTIFACTS}") ]]; then
0000000000000000000000000000000000000000;;	    V=2 kube::log::status "Uploading artifacts"
0000000000000000000000000000000000000000;;	    gsutil -m -q -o "GSUtil:use_magicfile=True" cp -a "${gcs_acl}" -r -c \
0000000000000000000000000000000000000000;;	      -z log,xml,json "${ARTIFACTS}" "${GCS_LOGS_PATH}/artifacts" || continue
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  break
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	for upload_attempt in $(seq 3); do
0000000000000000000000000000000000000000;;	  if [[ -e "${BUILD_LOG_PATH}" ]]; then
0000000000000000000000000000000000000000;;	    V=2 kube::log::status "Uploading build log"
0000000000000000000000000000000000000000;;	    gsutil -q cp -Z -a "${gcs_acl}" "${BUILD_LOG_PATH}" "${GCS_LOGS_PATH}" || continue
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  break
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Find the k8s version for started.json
0000000000000000000000000000000000000000;;	version=""
0000000000000000000000000000000000000000;;	if [[ -e "version" ]]; then
0000000000000000000000000000000000000000;;	  version=$(cat "version")
0000000000000000000000000000000000000000;;	elif [[ -e "hack/lib/version.sh" ]]; then
0000000000000000000000000000000000000000;;	  export KUBE_ROOT="."
0000000000000000000000000000000000000000;;	  source "hack/lib/version.sh"
0000000000000000000000000000000000000000;;	  kube::version::get_version_vars
0000000000000000000000000000000000000000;;	  version="${KUBE_GIT_VERSION-}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	if [[ -n "${version}" ]]; then
0000000000000000000000000000000000000000;;	  V=2 kube::log::status "Found Kubernetes version: ${version}"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  V=2 kube::log::status "Could not find Kubernetes version"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#Find build result from build-log.txt
0000000000000000000000000000000000000000;;	if grep -Fxq "Test Suite Passed" "${BUILD_LOG_PATH}"
0000000000000000000000000000000000000000;;	  then
0000000000000000000000000000000000000000;;	    build_result="SUCCESS"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	    build_result="FAILURE"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	V=4 kube::log::status "Build result is ${build_result}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -e "${ARTIFACTS}/started.json" ]]; then
0000000000000000000000000000000000000000;;	  rm "${ARTIFACTS}/started.json"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -e "${ARTIFACTS}/finished.json" ]]; then
0000000000000000000000000000000000000000;;	  rm "${ARTIFACTS}/finished.json"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	V=2 kube::log::status "Constructing started.json and finished.json files"
0000000000000000000000000000000000000000;;	echo "{" >> "${ARTIFACTS}/started.json"
0000000000000000000000000000000000000000;;	echo "    \"version\": \"${version}\"," >> "${ARTIFACTS}/started.json"
0000000000000000000000000000000000000000;;	echo "    \"timestamp\": ${start_time_epoch}," >> "${ARTIFACTS}/started.json"
0000000000000000000000000000000000000000;;	echo "    \"jenkins-node\": \"${NODE_NAME:-}\"" >> "${ARTIFACTS}/started.json"
0000000000000000000000000000000000000000;;	echo "}" >> "${ARTIFACTS}/started.json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "{" >> "${ARTIFACTS}/finished.json"
0000000000000000000000000000000000000000;;	echo "    \"result\": \"${build_result}\"," >> "${ARTIFACTS}/finished.json"
0000000000000000000000000000000000000000;;	echo "    \"timestamp\": ${end_time_epoch}" >> "${ARTIFACTS}/finished.json"
0000000000000000000000000000000000000000;;	echo "}" >> "${ARTIFACTS}/finished.json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Upload started.json
0000000000000000000000000000000000000000;;	V=2 kube::log::status "Uploading started.json and finished.json"
0000000000000000000000000000000000000000;;	V=2 kube::log::status "Run started at ${start_time}"
0000000000000000000000000000000000000000;;	json_file="${GCS_LOGS_PATH}/started.json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for upload_attempt in $(seq 3); do
0000000000000000000000000000000000000000;;	  V=2 kube::log::status "Uploading started.json to ${json_file} (attempt ${upload_attempt})"
0000000000000000000000000000000000000000;;	  gsutil -q -h "Content-Type:application/json" cp -a "${gcs_acl}" "${ARTIFACTS}/started.json" \
0000000000000000000000000000000000000000;;	    "${json_file}" || continue
0000000000000000000000000000000000000000;;	  break
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Upload finished.json
0000000000000000000000000000000000000000;;	for upload_attempt in $(seq 3); do
0000000000000000000000000000000000000000;;	  V=2 kube::log::status "Uploading finished.json to ${GCS_LOGS_PATH} (attempt ${upload_attempt})"
0000000000000000000000000000000000000000;;	  gsutil -q -h "Content-Type:application/json" cp -a "${gcs_acl}" "${ARTIFACTS}/finished.json" \
0000000000000000000000000000000000000000;;	    "${GCS_LOGS_PATH}/finished.json" || continue
0000000000000000000000000000000000000000;;	  break
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Gubernator linked below:"
0000000000000000000000000000000000000000;;	echo "k8s-gubernator.appspot.com/build/${bucket_name}/logs/e2e-node/${BUILD_STAMP}"
