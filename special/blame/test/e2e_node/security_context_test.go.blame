0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e7130c171e127e9f10ecdb7c0995988c4324a86d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Security Context", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("security-context-test")
0000000000000000000000000000000000000000;;		var podClient *framework.PodClient
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			podClient = f.PodClient()
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("when creating a pod in the host PID namespace", func() {
0000000000000000000000000000000000000000;;			makeHostPidPod := func(podName, image string, command []string, hostPID bool) *v1.Pod {
0000000000000000000000000000000000000000;;				return &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: podName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;						HostPID:       hostPID,
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image:   image,
0000000000000000000000000000000000000000;;								Name:    podName,
0000000000000000000000000000000000000000;;								Command: command,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			createAndWaitHostPidPod := func(podName string, hostPID bool) {
0000000000000000000000000000000000000000;;				podClient.Create(makeHostPidPod(podName,
0000000000000000000000000000000000000000;;					"gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;					[]string{"sh", "-c", "pidof nginx || true"},
0000000000000000000000000000000000000000;;					hostPID,
0000000000000000000000000000000000000000;;				))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				podClient.WaitForSuccess(podName, framework.PodStartTimeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			nginxPid := ""
0000000000000000000000000000000000000000;;			BeforeEach(func() {
0000000000000000000000000000000000000000;;				nginxPodName := "nginx-hostpid-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				podClient.CreateSync(makeHostPidPod(nginxPodName,
0000000000000000000000000000000000000000;;					"gcr.io/google_containers/nginx-slim:0.7",
0000000000000000000000000000000000000000;;					nil,
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;				))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				output := f.ExecShellInContainer(nginxPodName, nginxPodName,
0000000000000000000000000000000000000000;;					"cat /var/run/nginx.pid")
0000000000000000000000000000000000000000;;				nginxPid = strings.TrimSpace(output)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should show its pid in the host PID namespace", func() {
0000000000000000000000000000000000000000;;				busyboxPodName := "busybox-hostpid-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				createAndWaitHostPidPod(busyboxPodName, true)
0000000000000000000000000000000000000000;;				logs, err := framework.GetPodLogs(f.ClientSet, f.Namespace.Name, busyboxPodName, busyboxPodName)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("GetPodLogs for pod %q failed: %v", busyboxPodName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				pids := strings.TrimSpace(logs)
0000000000000000000000000000000000000000;;				framework.Logf("Got nginx's pid %q from pod %q", pids, busyboxPodName)
0000000000000000000000000000000000000000;;				if pids == "" {
0000000000000000000000000000000000000000;;					framework.Failf("nginx's pid should be seen by hostpid containers")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				pidSets := sets.NewString(strings.Split(pids, " ")...)
0000000000000000000000000000000000000000;;				if !pidSets.Has(nginxPid) {
0000000000000000000000000000000000000000;;					framework.Failf("nginx's pid should be seen by hostpid containers")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should not show its pid in the non-hostpid containers", func() {
0000000000000000000000000000000000000000;;				busyboxPodName := "busybox-non-hostpid-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				createAndWaitHostPidPod(busyboxPodName, false)
0000000000000000000000000000000000000000;;				logs, err := framework.GetPodLogs(f.ClientSet, f.Namespace.Name, busyboxPodName, busyboxPodName)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("GetPodLogs for pod %q failed: %v", busyboxPodName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				pids := strings.TrimSpace(logs)
0000000000000000000000000000000000000000;;				framework.Logf("Got nginx's pid %q from pod %q", pids, busyboxPodName)
0000000000000000000000000000000000000000;;				pidSets := sets.NewString(strings.Split(pids, " ")...)
0000000000000000000000000000000000000000;;				if pidSets.Has(nginxPid) {
0000000000000000000000000000000000000000;;					framework.Failf("nginx's pid should not be seen by non-hostpid containers")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("when creating a pod in the host IPC namespace", func() {
0000000000000000000000000000000000000000;;			makeHostIPCPod := func(podName, image string, command []string, hostIPC bool) *v1.Pod {
0000000000000000000000000000000000000000;;				return &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: podName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;						HostIPC:       hostIPC,
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image:   image,
0000000000000000000000000000000000000000;;								Name:    podName,
0000000000000000000000000000000000000000;;								Command: command,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			createAndWaitHostIPCPod := func(podName string, hostNetwork bool) {
0000000000000000000000000000000000000000;;				podClient.Create(makeHostIPCPod(podName,
0000000000000000000000000000000000000000;;					"gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;					[]string{"sh", "-c", "ipcs -m | awk '{print $2}'"},
0000000000000000000000000000000000000000;;					hostNetwork,
0000000000000000000000000000000000000000;;				))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				podClient.WaitForSuccess(podName, framework.PodStartTimeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			hostSharedMemoryID := ""
0000000000000000000000000000000000000000;;			BeforeEach(func() {
0000000000000000000000000000000000000000;;				output, err := exec.Command("sh", "-c", "ipcmk -M 1M | awk '{print $NF}'").Output()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("Failed to create the shared memory on the host: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				hostSharedMemoryID = strings.TrimSpace(string(output))
0000000000000000000000000000000000000000;;				framework.Logf("Got host shared memory ID %q", hostSharedMemoryID)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should show the shared memory ID in the host IPC containers", func() {
0000000000000000000000000000000000000000;;				busyboxPodName := "busybox-hostipc-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				createAndWaitHostIPCPod(busyboxPodName, true)
0000000000000000000000000000000000000000;;				logs, err := framework.GetPodLogs(f.ClientSet, f.Namespace.Name, busyboxPodName, busyboxPodName)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("GetPodLogs for pod %q failed: %v", busyboxPodName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				podSharedMemoryIDs := strings.TrimSpace(logs)
0000000000000000000000000000000000000000;;				framework.Logf("Got shared memory IDs %q from pod %q", podSharedMemoryIDs, busyboxPodName)
0000000000000000000000000000000000000000;;				if !strings.Contains(podSharedMemoryIDs, hostSharedMemoryID) {
0000000000000000000000000000000000000000;;					framework.Failf("hostIPC container should show shared memory IDs on host")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should not show the shared memory ID in the non-hostIPC containers", func() {
0000000000000000000000000000000000000000;;				busyboxPodName := "busybox-non-hostipc-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				createAndWaitHostIPCPod(busyboxPodName, false)
0000000000000000000000000000000000000000;;				logs, err := framework.GetPodLogs(f.ClientSet, f.Namespace.Name, busyboxPodName, busyboxPodName)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("GetPodLogs for pod %q failed: %v", busyboxPodName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				podSharedMemoryIDs := strings.TrimSpace(logs)
0000000000000000000000000000000000000000;;				framework.Logf("Got shared memory IDs %q from pod %q", podSharedMemoryIDs, busyboxPodName)
0000000000000000000000000000000000000000;;				if strings.Contains(podSharedMemoryIDs, hostSharedMemoryID) {
0000000000000000000000000000000000000000;;					framework.Failf("non-hostIPC container should not show shared memory IDs on host")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			AfterEach(func() {
0000000000000000000000000000000000000000;;				if hostSharedMemoryID != "" {
0000000000000000000000000000000000000000;;					_, err := exec.Command("sh", "-c", fmt.Sprintf("ipcrm -m %q", hostSharedMemoryID)).Output()
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						framework.Failf("Failed to remove shared memory %q on the host: %v", hostSharedMemoryID, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("when creating a pod in the host network namespace", func() {
0000000000000000000000000000000000000000;;			makeHostNetworkPod := func(podName, image string, command []string, hostNetwork bool) *v1.Pod {
0000000000000000000000000000000000000000;;				return &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: podName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;						HostNetwork:   hostNetwork,
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image:   image,
0000000000000000000000000000000000000000;;								Name:    podName,
0000000000000000000000000000000000000000;;								Command: command,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			listListeningPortsCommand := []string{"sh", "-c", "netstat -ln"}
0000000000000000000000000000000000000000;;			createAndWaitHostNetworkPod := func(podName string, hostNetwork bool) {
0000000000000000000000000000000000000000;;				podClient.Create(makeHostNetworkPod(podName,
0000000000000000000000000000000000000000;;					"gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;					listListeningPortsCommand,
0000000000000000000000000000000000000000;;					hostNetwork,
0000000000000000000000000000000000000000;;				))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				podClient.WaitForSuccess(podName, framework.PodStartTimeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			listeningPort := ""
0000000000000000000000000000000000000000;;			var l net.Listener
0000000000000000000000000000000000000000;;			BeforeEach(func() {
0000000000000000000000000000000000000000;;				l, err := net.Listen("tcp", ":0")
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("Failed to open a new tcp port: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				addr := strings.Split(l.Addr().String(), ":")
0000000000000000000000000000000000000000;;				listeningPort = addr[len(addr)-1]
0000000000000000000000000000000000000000;;				framework.Logf("Opened a new tcp port %q", listeningPort)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should listen on same port in the host network containers", func() {
0000000000000000000000000000000000000000;;				busyboxPodName := "busybox-hostnetwork-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				createAndWaitHostNetworkPod(busyboxPodName, true)
0000000000000000000000000000000000000000;;				logs, err := framework.GetPodLogs(f.ClientSet, f.Namespace.Name, busyboxPodName, busyboxPodName)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("GetPodLogs for pod %q failed: %v", busyboxPodName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				framework.Logf("Got logs for pod %q: %q", busyboxPodName, logs)
0000000000000000000000000000000000000000;;				if !strings.Contains(logs, listeningPort) {
0000000000000000000000000000000000000000;;					framework.Failf("host-networked container should listening on same port as host")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("shouldn't show the same port in the non-hostnetwork containers", func() {
0000000000000000000000000000000000000000;;				busyboxPodName := "busybox-non-hostnetwork-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				createAndWaitHostNetworkPod(busyboxPodName, false)
0000000000000000000000000000000000000000;;				logs, err := framework.GetPodLogs(f.ClientSet, f.Namespace.Name, busyboxPodName, busyboxPodName)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("GetPodLogs for pod %q failed: %v", busyboxPodName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				framework.Logf("Got logs for pod %q: %q", busyboxPodName, logs)
0000000000000000000000000000000000000000;;				if strings.Contains(logs, listeningPort) {
0000000000000000000000000000000000000000;;					framework.Failf("non-hostnetworked container shouldn't show the same port as host")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			AfterEach(func() {
0000000000000000000000000000000000000000;;				if l != nil {
0000000000000000000000000000000000000000;;					l.Close()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("When creating a container with runAsUser", func() {
0000000000000000000000000000000000000000;;			makeUserPod := func(podName, image string, command []string, userid int64) *v1.Pod {
0000000000000000000000000000000000000000;;				return &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: podName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Image:   image,
0000000000000000000000000000000000000000;;								Name:    podName,
0000000000000000000000000000000000000000;;								Command: command,
0000000000000000000000000000000000000000;;								SecurityContext: &v1.SecurityContext{
0000000000000000000000000000000000000000;;									RunAsUser: &userid,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			createAndWaitUserPod := func(userid int64) {
0000000000000000000000000000000000000000;;				podName := fmt.Sprintf("busybox-user-%d-%s", userid, uuid.NewUUID())
0000000000000000000000000000000000000000;;				podClient.Create(makeUserPod(podName,
0000000000000000000000000000000000000000;;					"gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;					[]string{"sh", "-c", fmt.Sprintf("test $(id -u) -eq %d", userid)},
0000000000000000000000000000000000000000;;					userid,
0000000000000000000000000000000000000000;;				))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				podClient.WaitForSuccess(podName, framework.PodStartTimeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should run the container with uid 65534", func() {
0000000000000000000000000000000000000000;;				createAndWaitUserPod(65534)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should run the container with uid 0", func() {
0000000000000000000000000000000000000000;;				createAndWaitUserPod(0)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
