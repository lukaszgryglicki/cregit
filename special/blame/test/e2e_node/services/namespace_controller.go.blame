0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
37195907f39b808a2a8e0b11940c67c3b2759003;test/e2e_node/namespace_controller.go[test/e2e_node/namespace_controller.go][test/e2e_node/services/namespace_controller.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package services
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/dynamic"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions"
0000000000000000000000000000000000000000;;		namespacecontroller "k8s.io/kubernetes/pkg/controller/namespace"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ncName is the name of namespace controller
0000000000000000000000000000000000000000;;		ncName = "namespace-controller"
0000000000000000000000000000000000000000;;		// ncResyncPeriod is resync period of the namespace controller
0000000000000000000000000000000000000000;;		ncResyncPeriod = 5 * time.Minute
0000000000000000000000000000000000000000;;		// ncConcurrency is concurrency of the namespace controller
0000000000000000000000000000000000000000;;		ncConcurrency = 2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespaceController is a server which manages namespace controller.
0000000000000000000000000000000000000000;;	type NamespaceController struct {
0000000000000000000000000000000000000000;;		host   string
0000000000000000000000000000000000000000;;		stopCh chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNamespaceController creates a new namespace controller.
0000000000000000000000000000000000000000;;	func NewNamespaceController(host string) *NamespaceController {
0000000000000000000000000000000000000000;;		return &NamespaceController{host: host, stopCh: make(chan struct{})}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Start starts the namespace controller.
0000000000000000000000000000000000000000;;	func (n *NamespaceController) Start() error {
0000000000000000000000000000000000000000;;		// Use the default QPS
0000000000000000000000000000000000000000;;		config := restclient.AddUserAgent(&restclient.Config{Host: n.host}, ncName)
0000000000000000000000000000000000000000;;		client, err := clientset.NewForConfig(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clientPool := dynamic.NewClientPool(config, api.Registry.RESTMapper(), dynamic.LegacyAPIPathResolverFunc)
0000000000000000000000000000000000000000;;		discoverResourcesFn := client.Discovery().ServerPreferredNamespacedResources
0000000000000000000000000000000000000000;;		informerFactory := informers.NewSharedInformerFactory(client, ncResyncPeriod)
0000000000000000000000000000000000000000;;		nc := namespacecontroller.NewNamespaceController(
0000000000000000000000000000000000000000;;			client,
0000000000000000000000000000000000000000;;			clientPool,
0000000000000000000000000000000000000000;;			discoverResourcesFn,
0000000000000000000000000000000000000000;;			informerFactory.Core().V1().Namespaces(),
0000000000000000000000000000000000000000;;			ncResyncPeriod, v1.FinalizerKubernetes,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		informerFactory.Start(n.stopCh)
0000000000000000000000000000000000000000;;		go nc.Run(ncConcurrency, n.stopCh)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stop stops the namespace controller.
0000000000000000000000000000000000000000;;	func (n *NamespaceController) Stop() error {
0000000000000000000000000000000000000000;;		close(n.stopCh)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Name returns the name of namespace controller.
0000000000000000000000000000000000000000;;	func (n *NamespaceController) Name() string {
0000000000000000000000000000000000000000;;		return ncName
0000000000000000000000000000000000000000;;	}
