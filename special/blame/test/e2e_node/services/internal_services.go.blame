0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8a61fa8b78d8bea5022d101f030b28736ed91a2b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package services
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// e2eService manages e2e services in current process.
0000000000000000000000000000000000000000;;	type e2eServices struct {
0000000000000000000000000000000000000000;;		rmDirs []string
0000000000000000000000000000000000000000;;		// statically linked e2e services
0000000000000000000000000000000000000000;;		etcdServer   *EtcdServer
0000000000000000000000000000000000000000;;		apiServer    *APIServer
0000000000000000000000000000000000000000;;		nsController *NamespaceController
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newE2EServices() *e2eServices {
0000000000000000000000000000000000000000;;		return &e2eServices{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// run starts all e2e services and wait for the termination signal. Once receives the
0000000000000000000000000000000000000000;;	// termination signal, it will stop the e2e services gracefully.
0000000000000000000000000000000000000000;;	func (es *e2eServices) run() error {
0000000000000000000000000000000000000000;;		defer es.stop()
0000000000000000000000000000000000000000;;		if err := es.start(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Wait until receiving a termination signal.
0000000000000000000000000000000000000000;;		waitForTerminationSignal()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// start starts the tests embedded services or returns an error.
0000000000000000000000000000000000000000;;	func (es *e2eServices) start() error {
0000000000000000000000000000000000000000;;		glog.Info("Starting e2e services...")
0000000000000000000000000000000000000000;;		err := es.startEtcd()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = es.startApiServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = es.startNamespaceController()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.Info("E2E services started.")
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stop stops the embedded e2e services.
0000000000000000000000000000000000000000;;	func (es *e2eServices) stop() {
0000000000000000000000000000000000000000;;		glog.Info("Stopping e2e services...")
0000000000000000000000000000000000000000;;		// TODO(random-liu): Use a loop to stop all services after introducing
0000000000000000000000000000000000000000;;		// service interface.
0000000000000000000000000000000000000000;;		glog.Info("Stopping namespace controller")
0000000000000000000000000000000000000000;;		if es.nsController != nil {
0000000000000000000000000000000000000000;;			if err := es.nsController.Stop(); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Failed to stop %q: %v", es.nsController.Name(), err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Info("Stopping API server")
0000000000000000000000000000000000000000;;		if es.apiServer != nil {
0000000000000000000000000000000000000000;;			if err := es.apiServer.Stop(); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Failed to stop %q: %v", es.apiServer.Name(), err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Info("Stopping etcd")
0000000000000000000000000000000000000000;;		if es.etcdServer != nil {
0000000000000000000000000000000000000000;;			if err := es.etcdServer.Stop(); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Failed to stop %q: %v", es.etcdServer.Name(), err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, d := range es.rmDirs {
0000000000000000000000000000000000000000;;			glog.Infof("Deleting directory %v", d)
0000000000000000000000000000000000000000;;			err := os.RemoveAll(d)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Failed to delete directory %s.\n%v", d, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Info("E2E services stopped.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// startEtcd starts the embedded etcd instance or returns an error.
0000000000000000000000000000000000000000;;	func (es *e2eServices) startEtcd() error {
0000000000000000000000000000000000000000;;		glog.Info("Starting etcd")
0000000000000000000000000000000000000000;;		// Create data directory in current working space.
0000000000000000000000000000000000000000;;		dataDir, err := ioutil.TempDir(".", "etcd")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Mark the dataDir as directories to remove.
0000000000000000000000000000000000000000;;		es.rmDirs = append(es.rmDirs, dataDir)
0000000000000000000000000000000000000000;;		es.etcdServer = NewEtcd(dataDir)
0000000000000000000000000000000000000000;;		return es.etcdServer.Start()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// startApiServer starts the embedded API server or returns an error.
0000000000000000000000000000000000000000;;	func (es *e2eServices) startApiServer() error {
0000000000000000000000000000000000000000;;		glog.Info("Starting API server")
0000000000000000000000000000000000000000;;		es.apiServer = NewAPIServer()
0000000000000000000000000000000000000000;;		return es.apiServer.Start()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// startNamespaceController starts the embedded namespace controller or returns an error.
0000000000000000000000000000000000000000;;	func (es *e2eServices) startNamespaceController() error {
0000000000000000000000000000000000000000;;		glog.Info("Starting namespace controller")
0000000000000000000000000000000000000000;;		es.nsController = NewNamespaceController(framework.TestContext.Host)
0000000000000000000000000000000000000000;;		return es.nsController.Start()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getServicesHealthCheckURLs returns the health check urls for the internal services.
0000000000000000000000000000000000000000;;	func getServicesHealthCheckURLs() []string {
0000000000000000000000000000000000000000;;		return []string{
0000000000000000000000000000000000000000;;			getEtcdHealthCheckURL(),
0000000000000000000000000000000000000000;;			getAPIServerHealthCheckURL(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
