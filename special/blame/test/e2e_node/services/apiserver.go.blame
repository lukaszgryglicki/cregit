0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9a741ba1daf13b55e5527d13affe70e37a3ec76c;test/e2e_node/apiserver.go[test/e2e_node/apiserver.go][test/e2e_node/services/apiserver.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package services
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiserver "k8s.io/kubernetes/cmd/kube-apiserver/app"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kube-apiserver/app/options"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		clusterIPRange          = "10.0.0.1/24"
0000000000000000000000000000000000000000;;		apiserverClientURL      = "http://localhost:8080"
0000000000000000000000000000000000000000;;		apiserverHealthCheckURL = apiserverClientURL + "/healthz"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIServer is a server which manages apiserver.
0000000000000000000000000000000000000000;;	type APIServer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAPIServer creates an apiserver.
0000000000000000000000000000000000000000;;	func NewAPIServer() *APIServer {
0000000000000000000000000000000000000000;;		return &APIServer{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Start starts the apiserver, returns when apiserver is ready.
0000000000000000000000000000000000000000;;	func (a *APIServer) Start() error {
0000000000000000000000000000000000000000;;		config := options.NewServerRunOptions()
0000000000000000000000000000000000000000;;		config.Etcd.StorageConfig.ServerList = []string{getEtcdClientURL()}
0000000000000000000000000000000000000000;;		// TODO: Current setup of etcd in e2e-node tests doesn't support etcd v3
0000000000000000000000000000000000000000;;		// protocol. We should migrate it to use the same infrastructure as all
0000000000000000000000000000000000000000;;		// other tests (pkg/storage/etcd/testing).
0000000000000000000000000000000000000000;;		config.Etcd.StorageConfig.Type = "etcd2"
0000000000000000000000000000000000000000;;		_, ipnet, err := net.ParseCIDR(clusterIPRange)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.ServiceClusterIPRange = *ipnet
0000000000000000000000000000000000000000;;		config.AllowPrivileged = true
0000000000000000000000000000000000000000;;		errCh := make(chan error)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer close(errCh)
0000000000000000000000000000000000000000;;			stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;			defer close(stopCh)
0000000000000000000000000000000000000000;;			err := apiserver.Run(config, stopCh)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errCh <- fmt.Errorf("run apiserver error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = readinessCheck("apiserver", []string{apiserverHealthCheckURL}, errCh)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stop stops the apiserver. Currently, there is no way to stop the apiserver.
0000000000000000000000000000000000000000;;	// The function is here only for completion.
0000000000000000000000000000000000000000;;	func (a *APIServer) Stop() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const apiserverName = "apiserver"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *APIServer) Name() string {
0000000000000000000000000000000000000000;;		return apiserverName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getAPIServerClientURL() string {
0000000000000000000000000000000000000000;;		return apiserverClientURL
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getAPIServerHealthCheckURL() string {
0000000000000000000000000000000000000000;;		return apiserverHealthCheckURL
0000000000000000000000000000000000000000;;	}
