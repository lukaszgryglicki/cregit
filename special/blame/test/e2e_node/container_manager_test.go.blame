0000000000000000000000000000000000000000;;	// +build linux
c2f84f5197d3fad4bc16e232e951ac7fb7bcc68f;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getOOMScoreForPid(pid int) (int, error) {
0000000000000000000000000000000000000000;;		procfsPath := path.Join("/proc", strconv.Itoa(pid), "oom_score_adj")
0000000000000000000000000000000000000000;;		out, err := exec.Command("sudo", "cat", procfsPath).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strconv.Atoi(strings.TrimSpace(string(out)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateOOMScoreAdjSetting(pid int, expectedOOMScoreAdj int) error {
0000000000000000000000000000000000000000;;		oomScore, err := getOOMScoreForPid(pid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to get oom_score_adj for %d: %v", pid, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if expectedOOMScoreAdj != oomScore {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected pid %d's oom_score_adj to be %d; found %d", pid, expectedOOMScoreAdj, oomScore)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateOOMScoreAdjSettingIsInRange(pid int, expectedMinOOMScoreAdj, expectedMaxOOMScoreAdj int) error {
0000000000000000000000000000000000000000;;		oomScore, err := getOOMScoreForPid(pid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to get oom_score_adj for %d", pid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if oomScore < expectedMinOOMScoreAdj {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected pid %d's oom_score_adj to be >= %d; found %d", pid, expectedMinOOMScoreAdj, oomScore)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if oomScore < expectedMaxOOMScoreAdj {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected pid %d's oom_score_adj to be < %d; found %d", pid, expectedMaxOOMScoreAdj, oomScore)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Container Manager Misc [Serial]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("kubelet-container-manager")
0000000000000000000000000000000000000000;;		Describe("Validate OOM score adjustments", func() {
0000000000000000000000000000000000000000;;			Context("once the node is setup", func() {
0000000000000000000000000000000000000000;;				It("docker daemon's oom-score-adj should be -999", func() {
0000000000000000000000000000000000000000;;					dockerPids, err := getPidsForProcess(dockerProcessName, dockerPidFile)
0000000000000000000000000000000000000000;;					Expect(err).To(BeNil(), "failed to get list of docker daemon pids")
0000000000000000000000000000000000000000;;					for _, pid := range dockerPids {
0000000000000000000000000000000000000000;;						Eventually(func() error {
0000000000000000000000000000000000000000;;							return validateOOMScoreAdjSetting(pid, -999)
0000000000000000000000000000000000000000;;						}, 5*time.Minute, 30*time.Second).Should(BeNil())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				It("Kubelet's oom-score-adj should be -999", func() {
0000000000000000000000000000000000000000;;					kubeletPids, err := getPidsForProcess(kubeletProcessName, "")
0000000000000000000000000000000000000000;;					Expect(err).To(BeNil(), "failed to get list of kubelet pids")
0000000000000000000000000000000000000000;;					Expect(len(kubeletPids)).To(Equal(1), "expected only one kubelet process; found %d", len(kubeletPids))
0000000000000000000000000000000000000000;;					Eventually(func() error {
0000000000000000000000000000000000000000;;						return validateOOMScoreAdjSetting(kubeletPids[0], -999)
0000000000000000000000000000000000000000;;					}, 5*time.Minute, 30*time.Second).Should(BeNil())
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				Context("", func() {
0000000000000000000000000000000000000000;;					It("pod infra containers oom-score-adj should be -998 and best effort container's should be 1000", func() {
0000000000000000000000000000000000000000;;						// Take a snapshot of existing pause processes. These were
0000000000000000000000000000000000000000;;						// created before this test, and may not be infra
0000000000000000000000000000000000000000;;						// containers. They should be excluded from the test.
0000000000000000000000000000000000000000;;						existingPausePIDs, err := getPidsForProcess("pause", "")
0000000000000000000000000000000000000000;;						Expect(err).To(BeNil(), "failed to list all pause processes on the node")
0000000000000000000000000000000000000000;;						existingPausePIDSet := sets.NewInt(existingPausePIDs...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						podClient := f.PodClient()
0000000000000000000000000000000000000000;;						podName := "besteffort" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;						podClient.Create(&v1.Pod{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: podName,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Image: framework.ServeHostnameImage,
0000000000000000000000000000000000000000;;										Name:  podName,
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						})
0000000000000000000000000000000000000000;;						var pausePids []int
0000000000000000000000000000000000000000;;						By("checking infra container's oom-score-adj")
0000000000000000000000000000000000000000;;						Eventually(func() error {
0000000000000000000000000000000000000000;;							pausePids, err = getPidsForProcess("pause", "")
0000000000000000000000000000000000000000;;							if err != nil {
0000000000000000000000000000000000000000;;								return fmt.Errorf("failed to get list of pause pids: %v", err)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							for _, pid := range pausePids {
0000000000000000000000000000000000000000;;								if existingPausePIDSet.Has(pid) {
0000000000000000000000000000000000000000;;									// Not created by this test. Ignore it.
0000000000000000000000000000000000000000;;									continue
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;								if err := validateOOMScoreAdjSetting(pid, -998); err != nil {
0000000000000000000000000000000000000000;;									return err
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							return nil
0000000000000000000000000000000000000000;;						}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;						var shPids []int
0000000000000000000000000000000000000000;;						By("checking besteffort container's oom-score-adj")
0000000000000000000000000000000000000000;;						Eventually(func() error {
0000000000000000000000000000000000000000;;							shPids, err = getPidsForProcess("serve_hostname", "")
0000000000000000000000000000000000000000;;							if err != nil {
0000000000000000000000000000000000000000;;								return fmt.Errorf("failed to get list of serve hostname process pids: %v", err)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if len(shPids) != 1 {
0000000000000000000000000000000000000000;;								return fmt.Errorf("expected only one serve_hostname process; found %d", len(shPids))
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							return validateOOMScoreAdjSetting(shPids[0], 1000)
0000000000000000000000000000000000000000;;						}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;					// Log the running containers here to help debugging. Use `docker ps`
0000000000000000000000000000000000000000;;					// directly for now because the test is already docker specific.
0000000000000000000000000000000000000000;;					AfterEach(func() {
0000000000000000000000000000000000000000;;						if CurrentGinkgoTestDescription().Failed {
0000000000000000000000000000000000000000;;							By("Dump all running docker containers")
0000000000000000000000000000000000000000;;							output, err := exec.Command("docker", "ps").CombinedOutput()
0000000000000000000000000000000000000000;;							Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;							framework.Logf("Running docker containers:\n%s", string(output))
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				It("guaranteed container's oom-score-adj should be -998", func() {
0000000000000000000000000000000000000000;;					podClient := f.PodClient()
0000000000000000000000000000000000000000;;					podName := "guaranteed" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;					podClient.Create(&v1.Pod{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: podName,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;							Containers: []v1.Container{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Image: "gcr.io/google_containers/nginx-slim:0.7",
0000000000000000000000000000000000000000;;									Name:  podName,
0000000000000000000000000000000000000000;;									Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;										Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;											"cpu":    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;											"memory": resource.MustParse("50Mi"),
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;					var (
0000000000000000000000000000000000000000;;						ngPids []int
0000000000000000000000000000000000000000;;						err    error
0000000000000000000000000000000000000000;;					)
0000000000000000000000000000000000000000;;					Eventually(func() error {
0000000000000000000000000000000000000000;;						ngPids, err = getPidsForProcess("nginx", "")
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							return fmt.Errorf("failed to get list of nginx process pids: %v", err)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						for _, pid := range ngPids {
0000000000000000000000000000000000000000;;							if err := validateOOMScoreAdjSetting(pid, -998); err != nil {
0000000000000000000000000000000000000000;;								return err
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						return nil
0000000000000000000000000000000000000000;;					}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				It("burstable container's oom-score-adj should be between [2, 1000)", func() {
0000000000000000000000000000000000000000;;					podClient := f.PodClient()
0000000000000000000000000000000000000000;;					podName := "burstable" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;					podClient.Create(&v1.Pod{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name: podName,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;							Containers: []v1.Container{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Image: "gcr.io/google_containers/test-webserver:e2e",
0000000000000000000000000000000000000000;;									Name:  podName,
0000000000000000000000000000000000000000;;									Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;										Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;											"cpu":    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;											"memory": resource.MustParse("50Mi"),
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;					var (
0000000000000000000000000000000000000000;;						wsPids []int
0000000000000000000000000000000000000000;;						err    error
0000000000000000000000000000000000000000;;					)
0000000000000000000000000000000000000000;;					Eventually(func() error {
0000000000000000000000000000000000000000;;						wsPids, err = getPidsForProcess("test-webserver", "")
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							return fmt.Errorf("failed to get list of test-webserver process pids: %v", err)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						for _, pid := range wsPids {
0000000000000000000000000000000000000000;;							if err := validateOOMScoreAdjSettingIsInRange(pid, 2, 1000); err != nil {
0000000000000000000000000000000000000000;;								return err
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return nil
0000000000000000000000000000000000000000;;					}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// TODO: Test the oom-score-adj logic for burstable more accurately.
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
