0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4bc19d8b5f077e19482e129a5e85a7d8d5444ff8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		goerrors "errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("MirrorPod", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("mirror-pod")
0000000000000000000000000000000000000000;;		Context("when create a mirror pod ", func() {
0000000000000000000000000000000000000000;;			var ns, manifestPath, staticPodName, mirrorPodName string
0000000000000000000000000000000000000000;;			BeforeEach(func() {
0000000000000000000000000000000000000000;;				ns = f.Namespace.Name
0000000000000000000000000000000000000000;;				staticPodName = "static-pod-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				mirrorPodName = staticPodName + "-" + framework.TestContext.NodeName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				manifestPath = framework.TestContext.KubeletConfig.PodManifestPath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("create the static pod")
0000000000000000000000000000000000000000;;				err := createStaticPod(manifestPath, staticPodName, ns,
0000000000000000000000000000000000000000;;					"gcr.io/google_containers/nginx-slim:0.7", v1.RestartPolicyAlways)
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("wait for the mirror pod to be running")
0000000000000000000000000000000000000000;;				Eventually(func() error {
0000000000000000000000000000000000000000;;					return checkMirrorPodRunning(f.ClientSet, mirrorPodName, ns)
0000000000000000000000000000000000000000;;				}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should be updated when static pod updated [Conformance]", func() {
0000000000000000000000000000000000000000;;				By("get mirror pod uid")
0000000000000000000000000000000000000000;;				pod, err := f.ClientSet.Core().Pods(ns).Get(mirrorPodName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;				uid := pod.UID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("update the static pod container image")
0000000000000000000000000000000000000000;;				image := framework.GetPauseImageNameForHostArch()
0000000000000000000000000000000000000000;;				err = createStaticPod(manifestPath, staticPodName, ns, image, v1.RestartPolicyAlways)
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("wait for the mirror pod to be updated")
0000000000000000000000000000000000000000;;				Eventually(func() error {
0000000000000000000000000000000000000000;;					return checkMirrorPodRecreatedAndRunnig(f.ClientSet, mirrorPodName, ns, uid)
0000000000000000000000000000000000000000;;				}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("check the mirror pod container image is updated")
0000000000000000000000000000000000000000;;				pod, err = f.ClientSet.Core().Pods(ns).Get(mirrorPodName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;				Expect(len(pod.Spec.Containers)).Should(Equal(1))
0000000000000000000000000000000000000000;;				Expect(pod.Spec.Containers[0].Image).Should(Equal(image))
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should be recreated when mirror pod gracefully deleted [Conformance]", func() {
0000000000000000000000000000000000000000;;				By("get mirror pod uid")
0000000000000000000000000000000000000000;;				pod, err := f.ClientSet.Core().Pods(ns).Get(mirrorPodName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;				uid := pod.UID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("delete the mirror pod with grace period 30s")
0000000000000000000000000000000000000000;;				err = f.ClientSet.Core().Pods(ns).Delete(mirrorPodName, metav1.NewDeleteOptions(30))
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("wait for the mirror pod to be recreated")
0000000000000000000000000000000000000000;;				Eventually(func() error {
0000000000000000000000000000000000000000;;					return checkMirrorPodRecreatedAndRunnig(f.ClientSet, mirrorPodName, ns, uid)
0000000000000000000000000000000000000000;;				}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should be recreated when mirror pod forcibly deleted [Conformance]", func() {
0000000000000000000000000000000000000000;;				By("get mirror pod uid")
0000000000000000000000000000000000000000;;				pod, err := f.ClientSet.Core().Pods(ns).Get(mirrorPodName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;				uid := pod.UID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("delete the mirror pod with grace period 0s")
0000000000000000000000000000000000000000;;				err = f.ClientSet.Core().Pods(ns).Delete(mirrorPodName, metav1.NewDeleteOptions(0))
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("wait for the mirror pod to be recreated")
0000000000000000000000000000000000000000;;				Eventually(func() error {
0000000000000000000000000000000000000000;;					return checkMirrorPodRecreatedAndRunnig(f.ClientSet, mirrorPodName, ns, uid)
0000000000000000000000000000000000000000;;				}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			AfterEach(func() {
0000000000000000000000000000000000000000;;				By("delete the static pod")
0000000000000000000000000000000000000000;;				err := deleteStaticPod(manifestPath, staticPodName, ns)
0000000000000000000000000000000000000000;;				Expect(err).ShouldNot(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("wait for the mirror pod to disappear")
0000000000000000000000000000000000000000;;				Eventually(func() error {
0000000000000000000000000000000000000000;;					return checkMirrorPodDisappear(f.ClientSet, mirrorPodName, ns)
0000000000000000000000000000000000000000;;				}, 2*time.Minute, time.Second*4).Should(BeNil())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func staticPodPath(dir, name, namespace string) string {
0000000000000000000000000000000000000000;;		return filepath.Join(dir, namespace+"-"+name+".yaml")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createStaticPod(dir, name, namespace, image string, restart v1.RestartPolicy) error {
0000000000000000000000000000000000000000;;		template := `
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Pod
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: %s
0000000000000000000000000000000000000000;;	  namespace: %s
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  containers:
0000000000000000000000000000000000000000;;	  - name: test
0000000000000000000000000000000000000000;;	    image: %s
0000000000000000000000000000000000000000;;	    restartPolicy: %s
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;		file := staticPodPath(dir, name, namespace)
0000000000000000000000000000000000000000;;		podYaml := fmt.Sprintf(template, name, namespace, image, string(restart))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, err := os.OpenFile(file, os.O_RDWR|os.O_TRUNC|os.O_CREATE, 0666)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = f.WriteString(podYaml)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func deleteStaticPod(dir, name, namespace string) error {
0000000000000000000000000000000000000000;;		file := staticPodPath(dir, name, namespace)
0000000000000000000000000000000000000000;;		return os.Remove(file)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkMirrorPodDisappear(cl clientset.Interface, name, namespace string) error {
0000000000000000000000000000000000000000;;		_, err := cl.Core().Pods(namespace).Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return goerrors.New("pod not disappear")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkMirrorPodRunning(cl clientset.Interface, name, namespace string) error {
0000000000000000000000000000000000000000;;		pod, err := cl.Core().Pods(namespace).Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected the mirror pod %q to appear: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod.Status.Phase != v1.PodRunning {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected the mirror pod %q to be running, got %q", name, pod.Status.Phase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkMirrorPodRecreatedAndRunnig(cl clientset.Interface, name, namespace string, oUID types.UID) error {
0000000000000000000000000000000000000000;;		pod, err := cl.Core().Pods(namespace).Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected the mirror pod %q to appear: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod.UID == oUID {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected the uid of mirror pod %q to be changed, got %q", name, pod.UID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod.Status.Phase != v1.PodRunning {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected the mirror pod %q to be running, got %q", name, pod.Status.Phase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
