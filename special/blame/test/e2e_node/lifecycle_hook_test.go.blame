0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8ad1e69249f87586ce87cf1f339bb52c29721905;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Container Lifecycle Hook", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("container-lifecycle-hook")
0000000000000000000000000000000000000000;;		var podClient *framework.PodClient
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			podCheckInterval     = 1 * time.Second
0000000000000000000000000000000000000000;;			postStartWaitTimeout = 2 * time.Minute
0000000000000000000000000000000000000000;;			preStopWaitTimeout   = 30 * time.Second
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		Context("when create a pod with lifecycle hook", func() {
0000000000000000000000000000000000000000;;			var targetIP string
0000000000000000000000000000000000000000;;			podHandleHookRequest := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "pod-handle-http-request",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  "pod-handle-http-request",
0000000000000000000000000000000000000000;;							Image: "gcr.io/google_containers/netexec:1.7",
0000000000000000000000000000000000000000;;							Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									ContainerPort: 8080,
0000000000000000000000000000000000000000;;									Protocol:      v1.ProtocolTCP,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			BeforeEach(func() {
0000000000000000000000000000000000000000;;				podClient = f.PodClient()
0000000000000000000000000000000000000000;;				By("create the container to handle the HTTPGet hook request.")
0000000000000000000000000000000000000000;;				newPod := podClient.CreateSync(podHandleHookRequest)
0000000000000000000000000000000000000000;;				targetIP = newPod.Status.PodIP
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			testPodWithHook := func(podWithHook *v1.Pod) {
0000000000000000000000000000000000000000;;				By("create the pod with lifecycle hook")
0000000000000000000000000000000000000000;;				podClient.CreateSync(podWithHook)
0000000000000000000000000000000000000000;;				if podWithHook.Spec.Containers[0].Lifecycle.PostStart != nil {
0000000000000000000000000000000000000000;;					By("check poststart hook")
0000000000000000000000000000000000000000;;					Eventually(func() error {
0000000000000000000000000000000000000000;;						return podClient.MatchContainerOutput(podHandleHookRequest.Name, podHandleHookRequest.Spec.Containers[0].Name,
0000000000000000000000000000000000000000;;							`GET /echo\?msg=poststart`)
0000000000000000000000000000000000000000;;					}, postStartWaitTimeout, podCheckInterval).Should(BeNil())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				By("delete the pod with lifecycle hook")
0000000000000000000000000000000000000000;;				podClient.DeleteSync(podWithHook.Name, metav1.NewDeleteOptions(15), framework.DefaultPodDeletionTimeout)
0000000000000000000000000000000000000000;;				if podWithHook.Spec.Containers[0].Lifecycle.PreStop != nil {
0000000000000000000000000000000000000000;;					By("check prestop hook")
0000000000000000000000000000000000000000;;					Eventually(func() error {
0000000000000000000000000000000000000000;;						return podClient.MatchContainerOutput(podHandleHookRequest.Name, podHandleHookRequest.Spec.Containers[0].Name,
0000000000000000000000000000000000000000;;							`GET /echo\?msg=prestop`)
0000000000000000000000000000000000000000;;					}, preStopWaitTimeout, podCheckInterval).Should(BeNil())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			It("should execute poststart exec hook properly [Conformance]", func() {
0000000000000000000000000000000000000000;;				lifecycle := &v1.Lifecycle{
0000000000000000000000000000000000000000;;					PostStart: &v1.Handler{
0000000000000000000000000000000000000000;;						Exec: &v1.ExecAction{
0000000000000000000000000000000000000000;;							Command: []string{"sh", "-c", "curl http://" + targetIP + ":8080/echo?msg=poststart"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				podWithHook := getPodWithHook("pod-with-poststart-exec-hook", "gcr.io/google_containers/hostexec:1.2", lifecycle)
0000000000000000000000000000000000000000;;				testPodWithHook(podWithHook)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should execute prestop exec hook properly [Conformance]", func() {
0000000000000000000000000000000000000000;;				lifecycle := &v1.Lifecycle{
0000000000000000000000000000000000000000;;					PreStop: &v1.Handler{
0000000000000000000000000000000000000000;;						Exec: &v1.ExecAction{
0000000000000000000000000000000000000000;;							Command: []string{"sh", "-c", "curl http://" + targetIP + ":8080/echo?msg=prestop"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				podWithHook := getPodWithHook("pod-with-prestop-exec-hook", "gcr.io/google_containers/hostexec:1.2", lifecycle)
0000000000000000000000000000000000000000;;				testPodWithHook(podWithHook)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should execute poststart http hook properly [Conformance]", func() {
0000000000000000000000000000000000000000;;				lifecycle := &v1.Lifecycle{
0000000000000000000000000000000000000000;;					PostStart: &v1.Handler{
0000000000000000000000000000000000000000;;						HTTPGet: &v1.HTTPGetAction{
0000000000000000000000000000000000000000;;							Path: "/echo?msg=poststart",
0000000000000000000000000000000000000000;;							Host: targetIP,
0000000000000000000000000000000000000000;;							Port: intstr.FromInt(8080),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				podWithHook := getPodWithHook("pod-with-poststart-http-hook", framework.GetPauseImageNameForHostArch(), lifecycle)
0000000000000000000000000000000000000000;;				testPodWithHook(podWithHook)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should execute prestop http hook properly [Conformance]", func() {
0000000000000000000000000000000000000000;;				lifecycle := &v1.Lifecycle{
0000000000000000000000000000000000000000;;					PreStop: &v1.Handler{
0000000000000000000000000000000000000000;;						HTTPGet: &v1.HTTPGetAction{
0000000000000000000000000000000000000000;;							Path: "/echo?msg=prestop",
0000000000000000000000000000000000000000;;							Host: targetIP,
0000000000000000000000000000000000000000;;							Port: intstr.FromInt(8080),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				podWithHook := getPodWithHook("pod-with-prestop-http-hook", framework.GetPauseImageNameForHostArch(), lifecycle)
0000000000000000000000000000000000000000;;				testPodWithHook(podWithHook)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPodWithHook(name string, image string, lifecycle *v1.Lifecycle) *v1.Pod {
0000000000000000000000000000000000000000;;		return &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      name,
0000000000000000000000000000000000000000;;						Image:     image,
0000000000000000000000000000000000000000;;						Lifecycle: lifecycle,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
