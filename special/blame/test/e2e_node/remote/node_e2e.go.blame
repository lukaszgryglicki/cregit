0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
70a6e3f9aff9e43f6a453719693f7482b3c70da0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package remote
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e_node/builder"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const localCOSMounterPath = "cluster/gce/gci/mounter/mounter"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeE2ERemote contains the specific functions in the node e2e test suite.
0000000000000000000000000000000000000000;;	type NodeE2ERemote struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func InitNodeE2ERemote() TestSuite {
0000000000000000000000000000000000000000;;		// TODO: Register flags.
0000000000000000000000000000000000000000;;		return &NodeE2ERemote{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetupTestPackage sets up the test package with binaries k8s required for node e2e tests
0000000000000000000000000000000000000000;;	func (n *NodeE2ERemote) SetupTestPackage(tardir string) error {
0000000000000000000000000000000000000000;;		// Build the executables
0000000000000000000000000000000000000000;;		if err := builder.BuildGo(); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to build the depedencies: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure we can find the newly built binaries
0000000000000000000000000000000000000000;;		buildOutputDir, err := builder.GetK8sBuildOutputDir()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to locate kubernetes build output directory %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Copy binaries
0000000000000000000000000000000000000000;;		requiredBins := []string{"kubelet", "e2e_node.test", "ginkgo"}
0000000000000000000000000000000000000000;;		for _, bin := range requiredBins {
0000000000000000000000000000000000000000;;			source := filepath.Join(buildOutputDir, bin)
0000000000000000000000000000000000000000;;			if _, err := os.Stat(source); err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to locate test binary %s: %v", bin, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out, err := exec.Command("cp", source, filepath.Join(tardir, bin)).CombinedOutput()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to copy %q: %v Output: %q", bin, err, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Include the GCI/COS mounter artifacts in the deployed tarball
0000000000000000000000000000000000000000;;		err = tarAddCOSMounter(tardir)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// dest is relative to the root of the tar
0000000000000000000000000000000000000000;;	func tarAddFile(tar, source, dest string) error {
0000000000000000000000000000000000000000;;		dir := filepath.Dir(dest)
0000000000000000000000000000000000000000;;		tardir := filepath.Join(tar, dir)
0000000000000000000000000000000000000000;;		tardest := filepath.Join(tar, dest)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := exec.Command("mkdir", "-p", tardir).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to create archive bin subdir %q, was dest for file %q. Err: %v. Output:\n%s", tardir, source, err, out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out, err = exec.Command("cp", source, tardest).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to copy file %q to the archive bin subdir %q. Err: %v. Output:\n%s", source, tardir, err, out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Includes the GCI/COS mounter artifacts in the deployed tarball
0000000000000000000000000000000000000000;;	func tarAddCOSMounter(tar string) error {
0000000000000000000000000000000000000000;;		k8sDir, err := builder.GetK8sRootDir()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Could not find K8s root dir! Err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		source := filepath.Join(k8sDir, localCOSMounterPath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Require the GCI/COS mounter script, we want to make sure the remote test runner stays up to date if the mounter file moves
0000000000000000000000000000000000000000;;		if _, err := os.Stat(source); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Could not find GCI/COS mounter script at %q! If this script has been (re)moved, please update the e2e node remote test runner accordingly! Err: %v", source, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tarAddFile(tar, source, localCOSMounterPath)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// prependCOSMounterFlag prepends the flag for setting the GCI mounter path to
0000000000000000000000000000000000000000;;	// args and returns the result.
0000000000000000000000000000000000000000;;	func prependCOSMounterFlag(args, host, workspace string) (string, error) {
0000000000000000000000000000000000000000;;		// If we are testing on a GCI/COS node, we chmod 544 the mounter and specify a different mounter path in the test args.
0000000000000000000000000000000000000000;;		// We do this here because the local var `workspace` tells us which /tmp/node-e2e-%d is relevant to the current test run.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Determine if the GCI/COS mounter script exists locally.
0000000000000000000000000000000000000000;;		k8sDir, err := builder.GetK8sRootDir()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return args, fmt.Errorf("could not find K8s root dir! Err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		source := filepath.Join(k8sDir, localCOSMounterPath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Require the GCI/COS mounter script, we want to make sure the remote test runner stays up to date if the mounter file moves
0000000000000000000000000000000000000000;;		if _, err = os.Stat(source); err != nil {
0000000000000000000000000000000000000000;;			return args, fmt.Errorf("could not find GCI/COS mounter script at %q! If this script has been (re)moved, please update the e2e node remote test runner accordingly! Err: %v", source, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(2).Infof("GCI/COS node and GCI/COS mounter both detected, modifying --experimental-mounter-path accordingly")
0000000000000000000000000000000000000000;;		// Note this implicitly requires the script to be where we expect in the tarball, so if that location changes the error
0000000000000000000000000000000000000000;;		// here will tell us to update the remote test runner.
0000000000000000000000000000000000000000;;		mounterPath := filepath.Join(workspace, localCOSMounterPath)
0000000000000000000000000000000000000000;;		output, err := SSH(host, "sh", "-c", fmt.Sprintf("'chmod 544 %s'", mounterPath))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return args, fmt.Errorf("unabled to chmod 544 GCI/COS mounter script. Err: %v, Output:\n%s", err, output)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Insert args at beginning of test args, so any values from command line take precedence
0000000000000000000000000000000000000000;;		args = fmt.Sprintf("--kubelet-flags=--experimental-mounter-path=%s ", mounterPath) + args
0000000000000000000000000000000000000000;;		return args, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// prependMemcgNotificationFlag prepends the flag for enabling memcg
0000000000000000000000000000000000000000;;	// notification to args and returns the result.
0000000000000000000000000000000000000000;;	func prependMemcgNotificationFlag(args string) string {
0000000000000000000000000000000000000000;;		return "--kubelet-flags=--experimental-kernel-memcg-notification=true " + args
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// updateOSSpecificKubeletFlags updates the Kubelet args with OS specific
0000000000000000000000000000000000000000;;	// settings.
0000000000000000000000000000000000000000;;	func updateOSSpecificKubeletFlags(args, host, workspace string) (string, error) {
0000000000000000000000000000000000000000;;		output, err := SSH(host, "cat", "/etc/os-release")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("issue detecting node's OS via node's /etc/os-release. Err: %v, Output:\n%s", err, output)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case strings.Contains(output, "ID=gci"), strings.Contains(output, "ID=cos"):
0000000000000000000000000000000000000000;;			args = prependMemcgNotificationFlag(args)
0000000000000000000000000000000000000000;;			return prependCOSMounterFlag(args, host, workspace)
0000000000000000000000000000000000000000;;		case strings.Contains(output, "ID=ubuntu"):
0000000000000000000000000000000000000000;;			return prependMemcgNotificationFlag(args), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return args, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunTest runs test on the node.
0000000000000000000000000000000000000000;;	func (n *NodeE2ERemote) RunTest(host, workspace, results, imageDesc, junitFilePrefix, testArgs, ginkgoArgs string, timeout time.Duration) (string, error) {
0000000000000000000000000000000000000000;;		// Install the cni plugins and add a basic CNI configuration.
0000000000000000000000000000000000000000;;		if err := setupCNI(host, workspace); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Configure iptables firewall rules
0000000000000000000000000000000000000000;;		if err := configureFirewall(host); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kill any running node processes
0000000000000000000000000000000000000000;;		cleanupNodeProcesses(host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testArgs, err := updateOSSpecificKubeletFlags(testArgs, host, workspace)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run the tests
0000000000000000000000000000000000000000;;		glog.V(2).Infof("Starting tests on %q", host)
0000000000000000000000000000000000000000;;		cmd := getSSHCommand(" && ",
0000000000000000000000000000000000000000;;			fmt.Sprintf("cd %s", workspace),
0000000000000000000000000000000000000000;;			fmt.Sprintf("timeout -k 30s %fs ./ginkgo %s ./e2e_node.test -- --logtostderr --v 4 --node-name=%s --report-dir=%s --report-prefix=%s --image-description=%s %s",
0000000000000000000000000000000000000000;;				timeout.Seconds(), ginkgoArgs, host, results, junitFilePrefix, imageDesc, testArgs),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return SSH(host, "sh", "-c", cmd)
0000000000000000000000000000000000000000;;	}
