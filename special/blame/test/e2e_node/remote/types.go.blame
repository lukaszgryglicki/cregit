0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
70a6e3f9aff9e43f6a453719693f7482b3c70da0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package remote
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestSuite is the interface of a test suite, such as node e2e, node conformance,
0000000000000000000000000000000000000000;;	// node soaking, cri validation etc.
0000000000000000000000000000000000000000;;	type TestSuite interface {
0000000000000000000000000000000000000000;;		// SetupTestPackage setup the test package in the given directory. TestSuite
0000000000000000000000000000000000000000;;		// should put all necessary binaries and dependencies into the path. The caller
0000000000000000000000000000000000000000;;		// will:
0000000000000000000000000000000000000000;;		// * create a tarball with the directory.
0000000000000000000000000000000000000000;;		// * deploy the tarball to the testing host.
0000000000000000000000000000000000000000;;		// * untar the tarball to the testing workspace on the testing host.
0000000000000000000000000000000000000000;;		SetupTestPackage(path string) error
0000000000000000000000000000000000000000;;		// RunTest runs test on the node in the given workspace and returns test output
0000000000000000000000000000000000000000;;		// and test error if there is any.
0000000000000000000000000000000000000000;;		// * host is the target node to run the test.
0000000000000000000000000000000000000000;;		// * workspace is the directory on the testing host the test is running in. Note
0000000000000000000000000000000000000000;;		//   that the test package is unpacked in the workspace before running the test.
0000000000000000000000000000000000000000;;		// * results is the directory the test should write result into. All logs should be
0000000000000000000000000000000000000000;;		//   saved as *.log, all junit file should start with junit*.
0000000000000000000000000000000000000000;;		// * imageDesc is the description of the image the test is running on.
0000000000000000000000000000000000000000;;		//   It will be used for logging purpose only.
0000000000000000000000000000000000000000;;		// * junitFilePrefix is the prefix of output junit file.
0000000000000000000000000000000000000000;;		// * testArgs is the arguments passed to test.
0000000000000000000000000000000000000000;;		// * ginkgoArgs is the arguments passed to ginkgo.
0000000000000000000000000000000000000000;;		// * timeout is the test timeout.
0000000000000000000000000000000000000000;;		RunTest(host, workspace, results, imageDesc, junitFilePrefix, testArgs, ginkgoArgs string, timeout time.Duration) (string, error)
0000000000000000000000000000000000000000;;	}
