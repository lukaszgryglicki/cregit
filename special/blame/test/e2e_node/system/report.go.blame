0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0c8a8920e3d5c7202b445c4cc754f91ffbacf9a5;test/e2e_node/system/util.go[test/e2e_node/system/util.go][test/e2e_node/system/report.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidationResultType is type of the validation result. Different validation results
0000000000000000000000000000000000000000;;	// corresponds to different colors.
0000000000000000000000000000000000000000;;	type ValidationResultType int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		good ValidationResultType = iota
0000000000000000000000000000000000000000;;		bad
0000000000000000000000000000000000000000;;		warn
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// color is the color of the message.
0000000000000000000000000000000000000000;;	type color int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		red    color = 31
0000000000000000000000000000000000000000;;		green        = 32
0000000000000000000000000000000000000000;;		yellow       = 33
0000000000000000000000000000000000000000;;		white        = 37
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func colorize(s string, c color) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("\033[0;%dm%s\033[0m", c, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The default reporter for the system verification test
0000000000000000000000000000000000000000;;	type StreamReporter struct {
0000000000000000000000000000000000000000;;		// The stream that this reporter is writing to
0000000000000000000000000000000000000000;;		WriteStream io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (dr *StreamReporter) Report(key, value string, resultType ValidationResultType) error {
0000000000000000000000000000000000000000;;		var c color
0000000000000000000000000000000000000000;;		switch resultType {
0000000000000000000000000000000000000000;;		case good:
0000000000000000000000000000000000000000;;			c = green
0000000000000000000000000000000000000000;;		case bad:
0000000000000000000000000000000000000000;;			c = red
0000000000000000000000000000000000000000;;		case warn:
0000000000000000000000000000000000000000;;			c = yellow
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			c = white
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dr.WriteStream == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("WriteStream has to be defined for this reporter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Fprintf(dr.WriteStream, "%s: %s\n", colorize(key, white), colorize(value, c))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultReporter is the default Reporter
0000000000000000000000000000000000000000;;	var DefaultReporter = &StreamReporter{
0000000000000000000000000000000000000000;;		WriteStream: os.Stdout,
0000000000000000000000000000000000000000;;	}
