0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0c8a8920e3d5c7202b445c4cc754f91ffbacf9a5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ Validator = &CgroupsValidator{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CgroupsValidator struct {
0000000000000000000000000000000000000000;;		Reporter Reporter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CgroupsValidator) Name() string {
0000000000000000000000000000000000000000;;		return "cgroups"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		cgroupsConfigPrefix = "CGROUPS_"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CgroupsValidator) Validate(spec SysSpec) (error, error) {
0000000000000000000000000000000000000000;;		subsystems, err := c.getCgroupSubsystems()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to get cgroup subsystems: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, c.validateCgroupSubsystems(spec.Cgroups, subsystems)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CgroupsValidator) validateCgroupSubsystems(cgroupSpec, subsystems []string) error {
0000000000000000000000000000000000000000;;		missing := []string{}
0000000000000000000000000000000000000000;;		for _, cgroup := range cgroupSpec {
0000000000000000000000000000000000000000;;			found := false
0000000000000000000000000000000000000000;;			for _, subsystem := range subsystems {
0000000000000000000000000000000000000000;;				if cgroup == subsystem {
0000000000000000000000000000000000000000;;					found = true
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			item := cgroupsConfigPrefix + strings.ToUpper(cgroup)
0000000000000000000000000000000000000000;;			if found {
0000000000000000000000000000000000000000;;				c.Reporter.Report(item, "enabled", good)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				c.Reporter.Report(item, "missing", bad)
0000000000000000000000000000000000000000;;				missing = append(missing, cgroup)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(missing) > 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("missing cgroups: %s", strings.Join(missing, " "))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CgroupsValidator) getCgroupSubsystems() ([]string, error) {
0000000000000000000000000000000000000000;;		f, err := os.Open("/proc/cgroups")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		subsystems := []string{}
0000000000000000000000000000000000000000;;		s := bufio.NewScanner(f)
0000000000000000000000000000000000000000;;		for s.Scan() {
0000000000000000000000000000000000000000;;			if err := s.Err(); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			text := s.Text()
0000000000000000000000000000000000000000;;			if text[0] != '#' {
0000000000000000000000000000000000000000;;				parts := strings.Fields(text)
0000000000000000000000000000000000000000;;				if len(parts) >= 4 && parts[3] != "0" {
0000000000000000000000000000000000000000;;					subsystems = append(subsystems, parts[0])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return subsystems, nil
0000000000000000000000000000000000000000;;	}
