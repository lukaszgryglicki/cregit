0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6430742a6a3f18c34dabd3b5f99d9cffbbb1d56a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractUpstreamVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "",
0000000000000000000000000000000000000000;;				expected: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "1.0.6",
0000000000000000000000000000000000000000;;				expected: "1.0.6",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "1:1.0.6",
0000000000000000000000000000000000000000;;				expected: "1.0.6",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "1.0.6-2ubuntu2.1",
0000000000000000000000000000000000000000;;				expected: "1.0.6",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "1:1.0.6-2ubuntu2.1",
0000000000000000000000000000000000000000;;				expected: "1.0.6",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			got := extractUpstreamVersion(test.input)
0000000000000000000000000000000000000000;;			if test.expected != got {
0000000000000000000000000000000000000000;;				t.Errorf("extractUpstreamVersion(%q) = %q, want %q", test.input, got, test.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestToSemVer(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "",
0000000000000000000000000000000000000000;;				expected: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "1.2.3",
0000000000000000000000000000000000000000;;				expected: "1.2.3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "1.8.19p1",
0000000000000000000000000000000000000000;;				expected: "1.8.19",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "1.8.19.p1",
0000000000000000000000000000000000000000;;				expected: "1.8.19",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "p1",
0000000000000000000000000000000000000000;;				expected: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "1.18",
0000000000000000000000000000000000000000;;				expected: "1.18.0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "481",
0000000000000000000000000000000000000000;;				expected: "481.0.0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "2.0.10.4",
0000000000000000000000000000000000000000;;				expected: "2.0.10",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "03",
0000000000000000000000000000000000000000;;				expected: "3.0.0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "2.02",
0000000000000000000000000000000000000000;;				expected: "2.2.0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "8.0.0095",
0000000000000000000000000000000000000000;;				expected: "8.0.95",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			got := toSemVer(test.input)
0000000000000000000000000000000000000000;;			if test.expected != got {
0000000000000000000000000000000000000000;;				t.Errorf("toSemVer(%q) = %q, want %q", test.input, got, test.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestToSemVerRange(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "",
0000000000000000000000000000000000000000;;				expected: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    ">=1.0.0",
0000000000000000000000000000000000000000;;				expected: ">=1.0.0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    ">=1.0",
0000000000000000000000000000000000000000;;				expected: ">=1.0.x",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    ">=1",
0000000000000000000000000000000000000000;;				expected: ">=1.x",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    ">=1 || !2.3",
0000000000000000000000000000000000000000;;				expected: ">=1.x || !2.3.x",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    ">1 || >3.1.0 !4.2",
0000000000000000000000000000000000000000;;				expected: ">1.x || >3.1.0 !4.2.x",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			got := toSemVerRange(test.input)
0000000000000000000000000000000000000000;;			if test.expected != got {
0000000000000000000000000000000000000000;;				t.Errorf("toSemVerRange(%q) = %q, want %q", test.input, got, test.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// testPackageManager implements the packageManager interface.
0000000000000000000000000000000000000000;;	type testPackageManager struct {
0000000000000000000000000000000000000000;;		packageVersions map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m testPackageManager) getPackageVersion(packageName string) (string, error) {
0000000000000000000000000000000000000000;;		if v, ok := m.packageVersions[packageName]; ok {
0000000000000000000000000000000000000000;;			return v, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("package %q does not exist", packageName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePackageVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		testKernelRelease := "test-kernel-release"
0000000000000000000000000000000000000000;;		manager := testPackageManager{
0000000000000000000000000000000000000000;;			packageVersions: map[string]string{
0000000000000000000000000000000000000000;;				"foo": "1.0.0",
0000000000000000000000000000000000000000;;				"bar": "2.1.0",
0000000000000000000000000000000000000000;;				"bar-" + testKernelRelease: "3.0.0",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v := &packageValidator{
0000000000000000000000000000000000000000;;			reporter:      DefaultReporter,
0000000000000000000000000000000000000000;;			kernelRelease: testKernelRelease,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			desc  string
0000000000000000000000000000000000000000;;			specs []PackageSpec
0000000000000000000000000000000000000000;;			err   error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "all packages meet the spec",
0000000000000000000000000000000000000000;;				specs: []PackageSpec{
0000000000000000000000000000000000000000;;					{Name: "foo", VersionRange: ">=1.0"},
0000000000000000000000000000000000000000;;					{Name: "bar", VersionRange: ">=2.0 <= 3.0"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "package version does not meet the spec",
0000000000000000000000000000000000000000;;				specs: []PackageSpec{
0000000000000000000000000000000000000000;;					{Name: "foo", VersionRange: ">=1.0"},
0000000000000000000000000000000000000000;;					{Name: "bar", VersionRange: ">=3.0"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: errors.New("package \"bar 2.1.0\" does not meet the spec \"bar (>=3.0)\""),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "package not installed",
0000000000000000000000000000000000000000;;				specs: []PackageSpec{
0000000000000000000000000000000000000000;;					{Name: "baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: errors.New("package \"baz\" does not exist"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "use variable in package name",
0000000000000000000000000000000000000000;;				specs: []PackageSpec{
0000000000000000000000000000000000000000;;					{Name: "bar-${KERNEL_RELEASE}", VersionRange: ">=3.0"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			_, err := v.validate(test.specs, manager)
0000000000000000000000000000000000000000;;			if test.err == nil && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: v.validate(): err = %s", test.desc, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.err != nil {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: v.validate() is expected to fail.", test.desc)
0000000000000000000000000000000000000000;;				} else if test.err.Error() != err.Error() {
0000000000000000000000000000000000000000;;					t.Errorf("%s: v.validate(): err = %q, want = %q", test.desc, err, test.err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestApplyPackageOverride(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			overrides []PackageSpecOverride
0000000000000000000000000000000000000000;;			osDistro  string
0000000000000000000000000000000000000000;;			specs     []PackageSpec
0000000000000000000000000000000000000000;;			expected  []PackageSpec
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				specs:    []PackageSpec{{Name: "foo", VersionRange: ">=1.0"}},
0000000000000000000000000000000000000000;;				expected: []PackageSpec{{Name: "foo", VersionRange: ">=1.0"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				osDistro: "ubuntu",
0000000000000000000000000000000000000000;;				overrides: []PackageSpecOverride{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						OSDistro:     "ubuntu",
0000000000000000000000000000000000000000;;						Subtractions: []PackageSpec{{Name: "foo"}},
0000000000000000000000000000000000000000;;						Additions:    []PackageSpec{{Name: "bar", VersionRange: ">=2.0"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				specs:    []PackageSpec{{Name: "foo", VersionRange: ">=1.0"}},
0000000000000000000000000000000000000000;;				expected: []PackageSpec{{Name: "bar", VersionRange: ">=2.0"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				osDistro: "ubuntu",
0000000000000000000000000000000000000000;;				overrides: []PackageSpecOverride{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						OSDistro:     "debian",
0000000000000000000000000000000000000000;;						Subtractions: []PackageSpec{{Name: "foo"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				specs:    []PackageSpec{{Name: "foo", VersionRange: ">=1.0"}},
0000000000000000000000000000000000000000;;				expected: []PackageSpec{{Name: "foo", VersionRange: ">=1.0"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			got := applyPackageSpecOverride(test.specs, test.overrides, test.osDistro)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expected, got) {
0000000000000000000000000000000000000000;;				t.Errorf("applyPackageSpecOverride(%+v, %+v, %s) = %+v, want = %+v", test.specs, test.overrides, test.osDistro, got, test.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
