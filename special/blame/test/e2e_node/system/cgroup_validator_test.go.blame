0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3ce7b70e0f165d7b10923edc598227a549ddb0e3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateCgroupSubsystem(t *testing.T) {
0000000000000000000000000000000000000000;;		v := &CgroupsValidator{
0000000000000000000000000000000000000000;;			Reporter: DefaultReporter,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cgroupSpec := []string{"system1", "system2"}
0000000000000000000000000000000000000000;;		for desc, test := range map[string]struct {
0000000000000000000000000000000000000000;;			cgroupSpec []string
0000000000000000000000000000000000000000;;			subsystems []string
0000000000000000000000000000000000000000;;			err        bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"missing cgroup subsystem should report error": {
0000000000000000000000000000000000000000;;				subsystems: []string{"system1"},
0000000000000000000000000000000000000000;;				err:        true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"extra cgroup subsystems should not report error": {
0000000000000000000000000000000000000000;;				subsystems: []string{"system1", "system2", "system3"},
0000000000000000000000000000000000000000;;				err:        false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"subsystems the same with spec should not report error": {
0000000000000000000000000000000000000000;;				subsystems: []string{"system1", "system2"},
0000000000000000000000000000000000000000;;				err:        false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			err := v.validateCgroupSubsystems(cgroupSpec, test.subsystems)
0000000000000000000000000000000000000000;;			if !test.err {
0000000000000000000000000000000000000000;;				assert.Nil(t, err, "%q: Expect error not to occur with cgroup", desc)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.NotNil(t, err, "%q: Expect error to occur with docker info", desc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
