0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0c8a8920e3d5c7202b445c4cc754f91ffbacf9a5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/client"
0000000000000000000000000000000000000000;;		"github.com/docker/engine-api/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ Validator = &DockerValidator{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DockerValidator validates docker configuration.
0000000000000000000000000000000000000000;;	type DockerValidator struct {
0000000000000000000000000000000000000000;;		Reporter Reporter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *DockerValidator) Name() string {
0000000000000000000000000000000000000000;;		return "docker"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		dockerEndpoint            = "unix:///var/run/docker.sock"
0000000000000000000000000000000000000000;;		dockerConfigPrefix        = "DOCKER_"
0000000000000000000000000000000000000000;;		maxDockerValidatedVersion = "1.12"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(random-liu): Add more validating items.
0000000000000000000000000000000000000000;;	func (d *DockerValidator) Validate(spec SysSpec) (error, error) {
0000000000000000000000000000000000000000;;		if spec.RuntimeSpec.DockerSpec == nil {
0000000000000000000000000000000000000000;;			// If DockerSpec is not specified, assume current runtime is not
0000000000000000000000000000000000000000;;			// docker, skip the docker configuration validation.
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c, err := client.NewClient(dockerEndpoint, "", nil, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to create docker client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		info, err := c.Info(context.Background())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to get docker info: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d.validateDockerInfo(spec.RuntimeSpec.DockerSpec, info)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *DockerValidator) validateDockerInfo(spec *DockerSpec, info types.Info) (error, error) {
0000000000000000000000000000000000000000;;		// Validate docker version.
0000000000000000000000000000000000000000;;		matched := false
0000000000000000000000000000000000000000;;		for _, v := range spec.Version {
0000000000000000000000000000000000000000;;			r := regexp.MustCompile(v)
0000000000000000000000000000000000000000;;			if r.MatchString(info.ServerVersion) {
0000000000000000000000000000000000000000;;				d.Reporter.Report(dockerConfigPrefix+"VERSION", info.ServerVersion, good)
0000000000000000000000000000000000000000;;				matched = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !matched {
0000000000000000000000000000000000000000;;			// catch if docker is 1.13+
0000000000000000000000000000000000000000;;			ver := `1\.(1[3-9])\..*|\d{2}\.\d+\.\d+-[a-z]{2}`
0000000000000000000000000000000000000000;;			r := regexp.MustCompile(ver)
0000000000000000000000000000000000000000;;			if r.MatchString(info.ServerVersion) {
0000000000000000000000000000000000000000;;				d.Reporter.Report(dockerConfigPrefix+"VERSION", info.ServerVersion, good)
0000000000000000000000000000000000000000;;				w := fmt.Errorf(
0000000000000000000000000000000000000000;;					"docker version is greater than the most recently validated version. Docker version: %s. Max validated version: %s",
0000000000000000000000000000000000000000;;					info.ServerVersion,
0000000000000000000000000000000000000000;;					maxDockerValidatedVersion,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;				return w, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			d.Reporter.Report(dockerConfigPrefix+"VERSION", info.ServerVersion, bad)
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unsupported docker version: %s", info.ServerVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Validate graph driver.
0000000000000000000000000000000000000000;;		item := dockerConfigPrefix + "GRAPH_DRIVER"
0000000000000000000000000000000000000000;;		for _, gd := range spec.GraphDriver {
0000000000000000000000000000000000000000;;			if info.Driver == gd {
0000000000000000000000000000000000000000;;				d.Reporter.Report(item, info.Driver, good)
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		d.Reporter.Report(item, info.Driver, bad)
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("unsupported graph driver: %s", info.Driver)
0000000000000000000000000000000000000000;;	}
