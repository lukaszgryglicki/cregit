0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0c8a8920e3d5c7202b445c4cc754f91ffbacf9a5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KernelConfig defines one kernel configration item.
0000000000000000000000000000000000000000;;	type KernelConfig struct {
0000000000000000000000000000000000000000;;		// Name is the general name of the kernel configuration. It is used to
0000000000000000000000000000000000000000;;		// match kernel configuration.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// Aliases are aliases of the kernel configuration. Some configuration
0000000000000000000000000000000000000000;;		// has different names in different kernel version. Names of different
0000000000000000000000000000000000000000;;		// versions will be treated as aliases.
0000000000000000000000000000000000000000;;		Aliases []string
0000000000000000000000000000000000000000;;		// Description is the description of the kernel configuration, for example:
0000000000000000000000000000000000000000;;		//  * What is it used for?
0000000000000000000000000000000000000000;;		//  * Why is it needed?
0000000000000000000000000000000000000000;;		//  * Who needs it?
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KernelSpec defines the specification for the kernel. Currently, it contains
0000000000000000000000000000000000000000;;	// specification for:
0000000000000000000000000000000000000000;;	//   * Kernel Version
0000000000000000000000000000000000000000;;	//   * Kernel Configuration
0000000000000000000000000000000000000000;;	type KernelSpec struct {
0000000000000000000000000000000000000000;;		// Versions define supported kernel version. It is a group of regexps.
0000000000000000000000000000000000000000;;		Versions []string
0000000000000000000000000000000000000000;;		// Required contains all kernel configurations required to be enabled
0000000000000000000000000000000000000000;;		// (built in or as module).
0000000000000000000000000000000000000000;;		Required []KernelConfig
0000000000000000000000000000000000000000;;		// Optional contains all kernel configurations are required for optional
0000000000000000000000000000000000000000;;		// features.
0000000000000000000000000000000000000000;;		Optional []KernelConfig
0000000000000000000000000000000000000000;;		// Forbidden contains all kernel configurations which areforbidden (disabled
0000000000000000000000000000000000000000;;		// or not set)
0000000000000000000000000000000000000000;;		Forbidden []KernelConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DockerSpec defines the requirement configuration for docker. Currently, it only
0000000000000000000000000000000000000000;;	// contains spec for graph driver.
0000000000000000000000000000000000000000;;	type DockerSpec struct {
0000000000000000000000000000000000000000;;		// Version is a group of regex matching supported docker versions.
0000000000000000000000000000000000000000;;		Version []string
0000000000000000000000000000000000000000;;		// GraphDriver is the graph drivers supported by kubelet.
0000000000000000000000000000000000000000;;		GraphDriver []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuntimeSpec is the abstract layer for different runtimes. Different runtimes
0000000000000000000000000000000000000000;;	// should put their spec inside the RuntimeSpec.
0000000000000000000000000000000000000000;;	type RuntimeSpec struct {
0000000000000000000000000000000000000000;;		*DockerSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PackageSpec defines the required packages and their versions.
0000000000000000000000000000000000000000;;	// PackageSpec is only supported on OS distro with Debian package manager.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODO(yguo0905): Support operator OR of multiple packages for the case where
0000000000000000000000000000000000000000;;	// either "foo (>=1.0)" or "bar (>=2.0)" is required.
0000000000000000000000000000000000000000;;	type PackageSpec struct {
0000000000000000000000000000000000000000;;		// Name is the name of the package to be checked.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// VersionRange represents a range of versions that the package must
0000000000000000000000000000000000000000;;		// satisfy. Note that the version requirement will not be enforced if
0000000000000000000000000000000000000000;;		// the version range is empty. For example,
0000000000000000000000000000000000000000;;		// - "" would match any versions but the package must be installed.
0000000000000000000000000000000000000000;;		// - ">=1" would match "1.0.0", "1.0.1", "1.1.0", and "2.0".
0000000000000000000000000000000000000000;;		// - ">1.0 <2.0" would match between both ranges, so "1.1.1" and "1.8.7"
0000000000000000000000000000000000000000;;		//   but not "1.0.0" or "2.0.0".
0000000000000000000000000000000000000000;;		// - "<2.0.0 || >=3.0.0" would match "1.0.0" and "3.0.0" but not "2.0.0".
0000000000000000000000000000000000000000;;		VersionRange string
0000000000000000000000000000000000000000;;		// Description explains the reason behind this package requirements.
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PackageSpecOverride defines the overrides on the PackageSpec for an OS
0000000000000000000000000000000000000000;;	// distro.
0000000000000000000000000000000000000000;;	type PackageSpecOverride struct {
0000000000000000000000000000000000000000;;		// OSDistro identifies to which OS distro this override applies.
0000000000000000000000000000000000000000;;		// Must be "ubuntu", "cos" or "coreos".
0000000000000000000000000000000000000000;;		OSDistro string
0000000000000000000000000000000000000000;;		// Subtractions is a list of package names that are excluded from the
0000000000000000000000000000000000000000;;		// package spec.
0000000000000000000000000000000000000000;;		Subtractions []PackageSpec
0000000000000000000000000000000000000000;;		// Additions is a list of additional package requirements included the
0000000000000000000000000000000000000000;;		// package spec.
0000000000000000000000000000000000000000;;		Additions []PackageSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SysSpec defines the requirement of supported system. Currently, it only contains
0000000000000000000000000000000000000000;;	// spec for OS, Kernel and Cgroups.
0000000000000000000000000000000000000000;;	type SysSpec struct {
0000000000000000000000000000000000000000;;		// OS is the operating system of the SysSpec.
0000000000000000000000000000000000000000;;		OS string
0000000000000000000000000000000000000000;;		// KernelConfig defines the spec for kernel.
0000000000000000000000000000000000000000;;		KernelSpec KernelSpec
0000000000000000000000000000000000000000;;		// Cgroups is the required cgroups.
0000000000000000000000000000000000000000;;		Cgroups []string
0000000000000000000000000000000000000000;;		// RuntimeSpec defines the spec for runtime.
0000000000000000000000000000000000000000;;		RuntimeSpec RuntimeSpec
0000000000000000000000000000000000000000;;		// PackageSpec defines the required packages and their versions.
0000000000000000000000000000000000000000;;		PackageSpecs []PackageSpec
0000000000000000000000000000000000000000;;		// PackageSpec defines the overrides of the required packages and their
0000000000000000000000000000000000000000;;		// versions for an OS distro.
0000000000000000000000000000000000000000;;		PackageSpecOverrides []PackageSpecOverride
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultSysSpec is the default SysSpec.
0000000000000000000000000000000000000000;;	var DefaultSysSpec = SysSpec{
0000000000000000000000000000000000000000;;		OS: "Linux",
0000000000000000000000000000000000000000;;		KernelSpec: KernelSpec{
0000000000000000000000000000000000000000;;			Versions: []string{`3\.[1-9][0-9].*`, `4\..*`}, // Requires 3.10+ or 4+
0000000000000000000000000000000000000000;;			// TODO(random-liu): Add more config
0000000000000000000000000000000000000000;;			// TODO(random-liu): Add description for each kernel configuration:
0000000000000000000000000000000000000000;;			Required: []KernelConfig{
0000000000000000000000000000000000000000;;				{Name: "NAMESPACES"},
0000000000000000000000000000000000000000;;				{Name: "NET_NS"},
0000000000000000000000000000000000000000;;				{Name: "PID_NS"},
0000000000000000000000000000000000000000;;				{Name: "IPC_NS"},
0000000000000000000000000000000000000000;;				{Name: "UTS_NS"},
0000000000000000000000000000000000000000;;				{Name: "CGROUPS"},
0000000000000000000000000000000000000000;;				{Name: "CGROUP_CPUACCT"},
0000000000000000000000000000000000000000;;				{Name: "CGROUP_DEVICE"},
0000000000000000000000000000000000000000;;				{Name: "CGROUP_FREEZER"},
0000000000000000000000000000000000000000;;				{Name: "CGROUP_SCHED"},
0000000000000000000000000000000000000000;;				{Name: "CPUSETS"},
0000000000000000000000000000000000000000;;				{Name: "MEMCG"},
0000000000000000000000000000000000000000;;				{Name: "INET"},
0000000000000000000000000000000000000000;;				{Name: "EXT4_FS"},
0000000000000000000000000000000000000000;;				{Name: "PROC_FS"},
0000000000000000000000000000000000000000;;				{Name: "NETFILTER_XT_TARGET_REDIRECT", Aliases: []string{"IP_NF_TARGET_REDIRECT"}},
0000000000000000000000000000000000000000;;				{Name: "NETFILTER_XT_MATCH_COMMENT"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Optional: []KernelConfig{
0000000000000000000000000000000000000000;;				{Name: "OVERLAY_FS", Aliases: []string{"OVERLAYFS_FS"}, Description: "Required for overlayfs."},
0000000000000000000000000000000000000000;;				{Name: "AUFS_FS", Description: "Required for aufs."},
0000000000000000000000000000000000000000;;				{Name: "BLK_DEV_DM", Description: "Required for devicemapper."},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Forbidden: []KernelConfig{},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		Cgroups: []string{"cpu", "cpuacct", "cpuset", "devices", "freezer", "memory"},
0000000000000000000000000000000000000000;;		RuntimeSpec: RuntimeSpec{
0000000000000000000000000000000000000000;;			DockerSpec: &DockerSpec{
0000000000000000000000000000000000000000;;				Version: []string{`1\.(9|1[0-2])\..*`}, // Requires 1.9+
0000000000000000000000000000000000000000;;				// TODO(random-liu): Validate overlay2.
0000000000000000000000000000000000000000;;				GraphDriver: []string{"aufs", "overlay", "devicemapper"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
