0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0c8a8920e3d5c7202b445c4cc754f91ffbacf9a5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ Validator = &OSValidator{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OSValidator struct {
0000000000000000000000000000000000000000;;		Reporter Reporter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *OSValidator) Name() string {
0000000000000000000000000000000000000000;;		return "os"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *OSValidator) Validate(spec SysSpec) (error, error) {
0000000000000000000000000000000000000000;;		os, err := exec.Command("uname").CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to get os name: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, o.validateOS(strings.TrimSpace(string(os)), spec.OS)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *OSValidator) validateOS(os, specOS string) error {
0000000000000000000000000000000000000000;;		if os != specOS {
0000000000000000000000000000000000000000;;			o.Reporter.Report("OS", os, bad)
0000000000000000000000000000000000000000;;			return fmt.Errorf("unsupported operating system: %s", os)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.Reporter.Report("OS", os, good)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
