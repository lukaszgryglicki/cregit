0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0c8a8920e3d5c7202b445c4cc754f91ffbacf9a5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validator is the interface for all validators.
0000000000000000000000000000000000000000;;	type Validator interface {
0000000000000000000000000000000000000000;;		// Name is the name of the validator.
0000000000000000000000000000000000000000;;		Name() string
0000000000000000000000000000000000000000;;		// Validate is the validate function.
0000000000000000000000000000000000000000;;		Validate(SysSpec) (error, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reporter is the interface for the reporters for the validators.
0000000000000000000000000000000000000000;;	type Reporter interface {
0000000000000000000000000000000000000000;;		// Report reports the results of the system verification
0000000000000000000000000000000000000000;;		Report(string, string, ValidationResultType) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate uses validators to validate the system and returns a warning or error.
0000000000000000000000000000000000000000;;	func Validate(spec SysSpec, validators []Validator) (error, error) {
0000000000000000000000000000000000000000;;		var errs []error
0000000000000000000000000000000000000000;;		var warns []error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, v := range validators {
0000000000000000000000000000000000000000;;			glog.Infof("Validating %s...", v.Name())
0000000000000000000000000000000000000000;;			warn, err := v.Validate(spec)
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;			warns = append(warns, warn)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors.NewAggregate(warns), errors.NewAggregate(errs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateDefault uses all default validators to validate the system and writes to stdout.
0000000000000000000000000000000000000000;;	func ValidateDefault(runtime string) (error, error) {
0000000000000000000000000000000000000000;;		// OS-level validators.
0000000000000000000000000000000000000000;;		var osValidators = []Validator{
0000000000000000000000000000000000000000;;			&OSValidator{Reporter: DefaultReporter},
0000000000000000000000000000000000000000;;			&KernelValidator{Reporter: DefaultReporter},
0000000000000000000000000000000000000000;;			&CgroupsValidator{Reporter: DefaultReporter},
0000000000000000000000000000000000000000;;			&packageValidator{reporter: DefaultReporter},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Docker-specific validators.
0000000000000000000000000000000000000000;;		var dockerValidators = []Validator{
0000000000000000000000000000000000000000;;			&DockerValidator{Reporter: DefaultReporter},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validators := osValidators
0000000000000000000000000000000000000000;;		switch runtime {
0000000000000000000000000000000000000000;;		case "docker":
0000000000000000000000000000000000000000;;			validators = append(validators, dockerValidators...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Validate(DefaultSysSpec, validators)
0000000000000000000000000000000000000000;;	}
