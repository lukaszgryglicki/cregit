0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
613ab00c7b13d7dba93c0bbd587de5300ee72ea1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This test is marked [Disruptive] because the Kubelet temporarily goes down as part of of this test.
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("DynamicKubeletConfiguration [Feature:DynamicKubeletConfig] [Serial] [Disruptive]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("dynamic-kubelet-configuration-test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("When a configmap called `kubelet-{node-name}` is added to the `kube-system` namespace", func() {
0000000000000000000000000000000000000000;;			It("The Kubelet on that node should restart to take up the new config", func() {
0000000000000000000000000000000000000000;;				// Get the current KubeletConfiguration (known to be valid) by
0000000000000000000000000000000000000000;;				// querying the configz endpoint for the current node.
0000000000000000000000000000000000000000;;				kubeCfg, err := getCurrentKubeletConfig()
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;				glog.Infof("KubeletConfiguration - Initial values: %+v", *kubeCfg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Change a safe value e.g. file check frequency.
0000000000000000000000000000000000000000;;				// Make sure we're providing a value distinct from the current one.
0000000000000000000000000000000000000000;;				oldFileCheckFrequency := kubeCfg.FileCheckFrequency.Duration
0000000000000000000000000000000000000000;;				newFileCheckFrequency := 11 * time.Second
0000000000000000000000000000000000000000;;				if kubeCfg.FileCheckFrequency.Duration == newFileCheckFrequency {
0000000000000000000000000000000000000000;;					newFileCheckFrequency = 10 * time.Second
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				kubeCfg.FileCheckFrequency.Duration = newFileCheckFrequency
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Use the new config to create a new kube-{node-name} configmap in `kube-system` namespace.
0000000000000000000000000000000000000000;;				// Note: setKubeletConfiguration will return an error if the Kubelet does not present the
0000000000000000000000000000000000000000;;				//       modified configuration via /configz when it comes back up.
0000000000000000000000000000000000000000;;				err = setKubeletConfiguration(f, kubeCfg)
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Change the config back to what it originally was.
0000000000000000000000000000000000000000;;				kubeCfg.FileCheckFrequency.Duration = oldFileCheckFrequency
0000000000000000000000000000000000000000;;				err = setKubeletConfiguration(f, kubeCfg)
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
