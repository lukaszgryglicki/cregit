0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
53ac1b293351c4d5bde2a87eb6d97d31d9617578;test/integration/pods.go[test/integration/pods.go][test/integration/pods/pods_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package pods
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodUpdateActiveDeadlineSeconds(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := framework.CreateTestingNamespace("pod-activedeadline-update", s, t)
0000000000000000000000000000000000000000;;		defer framework.DeleteTestingNamespace(ns, s, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(v1.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			iZero = int64(0)
0000000000000000000000000000000000000000;;			i30   = int64(30)
0000000000000000000000000000000000000000;;			i60   = int64(60)
0000000000000000000000000000000000000000;;			iNeg  = int64(-1)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		prototypePod := func() *v1.Pod {
0000000000000000000000000000000000000000;;			return &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "xxx",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  "fake-name",
0000000000000000000000000000000000000000;;							Image: "fakeimage",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			original *int64
0000000000000000000000000000000000000000;;			update   *int64
0000000000000000000000000000000000000000;;			valid    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "no change, nil",
0000000000000000000000000000000000000000;;				original: nil,
0000000000000000000000000000000000000000;;				update:   nil,
0000000000000000000000000000000000000000;;				valid:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "no change, set",
0000000000000000000000000000000000000000;;				original: &i30,
0000000000000000000000000000000000000000;;				update:   &i30,
0000000000000000000000000000000000000000;;				valid:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "change to positive from nil",
0000000000000000000000000000000000000000;;				original: nil,
0000000000000000000000000000000000000000;;				update:   &i60,
0000000000000000000000000000000000000000;;				valid:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "change to smaller positive",
0000000000000000000000000000000000000000;;				original: &i60,
0000000000000000000000000000000000000000;;				update:   &i30,
0000000000000000000000000000000000000000;;				valid:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "change to larger positive",
0000000000000000000000000000000000000000;;				original: &i30,
0000000000000000000000000000000000000000;;				update:   &i60,
0000000000000000000000000000000000000000;;				valid:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "change to negative from positive",
0000000000000000000000000000000000000000;;				original: &i30,
0000000000000000000000000000000000000000;;				update:   &iNeg,
0000000000000000000000000000000000000000;;				valid:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "change to negative from nil",
0000000000000000000000000000000000000000;;				original: nil,
0000000000000000000000000000000000000000;;				update:   &iNeg,
0000000000000000000000000000000000000000;;				valid:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// zero is not allowed, must be a positive integer
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "change to zero from positive",
0000000000000000000000000000000000000000;;				original: &i30,
0000000000000000000000000000000000000000;;				update:   &iZero,
0000000000000000000000000000000000000000;;				valid:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "change to nil from positive",
0000000000000000000000000000000000000000;;				original: &i30,
0000000000000000000000000000000000000000;;				update:   nil,
0000000000000000000000000000000000000000;;				valid:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range cases {
0000000000000000000000000000000000000000;;			pod := prototypePod()
0000000000000000000000000000000000000000;;			pod.Spec.ActiveDeadlineSeconds = tc.original
0000000000000000000000000000000000000000;;			pod.ObjectMeta.Name = fmt.Sprintf("activedeadlineseconds-test-%v", i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := client.Core().Pods(ns.Name).Create(pod); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to create pod: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pod.Spec.ActiveDeadlineSeconds = tc.update
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, err := client.Core().Pods(ns.Name).Update(pod)
0000000000000000000000000000000000000000;;			if tc.valid && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: failed to update pod: %v", tc.name, err)
0000000000000000000000000000000000000000;;			} else if !tc.valid && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected allowed update to pod", tc.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			integration.DeletePodOrErrorf(t, client, ns.Name, pod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodReadOnlyFilesystem(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		isReadOnly := true
0000000000000000000000000000000000000000;;		ns := framework.CreateTestingNamespace("pod-readonly-root", s, t)
0000000000000000000000000000000000000000;;		defer framework.DeleteTestingNamespace(ns, s, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(v1.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "xxx",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "fake-name",
0000000000000000000000000000000000000000;;						Image: "fakeimage",
0000000000000000000000000000000000000000;;						SecurityContext: &v1.SecurityContext{
0000000000000000000000000000000000000000;;							ReadOnlyRootFilesystem: &isReadOnly,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := client.Core().Pods(ns.Name).Create(pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create pod: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		integration.DeletePodOrErrorf(t, client, ns.Name, pod.Name)
0000000000000000000000000000000000000000;;	}
