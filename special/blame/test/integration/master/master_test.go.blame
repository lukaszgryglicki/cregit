0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b345c93715bc4fd35a6b24308379509f269ae749;test/integration/master_test.go[test/integration/master_test.go][test/integration/master/master_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package master
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/group"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/request/bearertoken"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizerfactory"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/plugin/pkg/authenticator/token/tokentest"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		clienttypedv1 "k8s.io/kubernetes/pkg/client/clientset_generated/clientset/typed/core/v1"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/master"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AliceToken string = "abc123" // username: alice.  Present in token file.
0000000000000000000000000000000000000000;;		BobToken   string = "xyz987" // username: bob.  Present in token file.
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type allowAliceAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (allowAliceAuthorizer) Authorize(a authorizer.Attributes) (bool, string, error) {
0000000000000000000000000000000000000000;;		if a.GetUser() != nil && a.GetUser().GetName() == "alice" {
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, "I can't allow that.  Go ask alice.", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPrefix(t *testing.T, prefix string) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := http.Get(s.URL + prefix)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error getting %s prefix: %v", prefix, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			t.Fatalf("got status %v instead of 200 OK", resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAutoscalingPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		testPrefix(t, "/apis/autoscaling/")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBatchPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		testPrefix(t, "/apis/batch/")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAppsPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		testPrefix(t, "/apis/apps/")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtensionsPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		testPrefix(t, "/apis/extensions/")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestKubernetesService(t *testing.T) {
0000000000000000000000000000000000000000;;		config := framework.NewMasterConfig()
0000000000000000000000000000000000000000;;		_, _, closeFn := framework.RunAMaster(config)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;		coreClient := clientset.NewForConfigOrDie(config.GenericConfig.LoopbackClientConfig)
0000000000000000000000000000000000000000;;		if _, err := coreClient.Services(metav1.NamespaceDefault).Get("kubernetes", metav1.GetOptions{}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected kubernetes service to exists, got: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmptyList(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u := s.URL + "/api/v1/namespaces/default/pods"
0000000000000000000000000000000000000000;;		resp, err := http.Get(u)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error getting %s: %v", u, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			t.Fatalf("got status %v instead of 200 OK", resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		data, _ := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		decodedData := map[string]interface{}{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &decodedData); err != nil {
0000000000000000000000000000000000000000;;			t.Logf("body: %s", string(data))
0000000000000000000000000000000000000000;;			t.Fatalf("got error decoding data: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if items, ok := decodedData["items"]; !ok {
0000000000000000000000000000000000000000;;			t.Logf("body: %s", string(data))
0000000000000000000000000000000000000000;;			t.Fatalf("missing items field in empty list (all lists should return an items field)")
0000000000000000000000000000000000000000;;		} else if items == nil {
0000000000000000000000000000000000000000;;			t.Logf("body: %s", string(data))
0000000000000000000000000000000000000000;;			t.Fatalf("nil items field from empty list (all lists should return non-nil empty items lists)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initStatusForbiddenMasterCongfig() *master.Config {
0000000000000000000000000000000000000000;;		masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authorizer = authorizerfactory.NewAlwaysDenyAuthorizer()
0000000000000000000000000000000000000000;;		return masterConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initUnauthorizedMasterCongfig() *master.Config {
0000000000000000000000000000000000000000;;		masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		tokenAuthenticator := tokentest.New()
0000000000000000000000000000000000000000;;		tokenAuthenticator.Tokens[AliceToken] = &user.DefaultInfo{Name: "alice", UID: "1"}
0000000000000000000000000000000000000000;;		tokenAuthenticator.Tokens[BobToken] = &user.DefaultInfo{Name: "bob", UID: "2"}
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authenticator = group.NewGroupAdder(bearertoken.New(tokenAuthenticator), []string{user.AllAuthenticated})
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authorizer = allowAliceAuthorizer{}
0000000000000000000000000000000000000000;;		return masterConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name         string
0000000000000000000000000000000000000000;;			masterConfig *master.Config
0000000000000000000000000000000000000000;;			statusCode   int
0000000000000000000000000000000000000000;;			reqPath      string
0000000000000000000000000000000000000000;;			reason       string
0000000000000000000000000000000000000000;;			message      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "404",
0000000000000000000000000000000000000000;;				masterConfig: nil,
0000000000000000000000000000000000000000;;				statusCode:   http.StatusNotFound,
0000000000000000000000000000000000000000;;				reqPath:      "/apis/batch/v1/namespaces/default/jobs/foo",
0000000000000000000000000000000000000000;;				reason:       "NotFound",
0000000000000000000000000000000000000000;;				message:      `jobs.batch "foo" not found`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "403",
0000000000000000000000000000000000000000;;				masterConfig: initStatusForbiddenMasterCongfig(),
0000000000000000000000000000000000000000;;				statusCode:   http.StatusForbidden,
0000000000000000000000000000000000000000;;				reqPath:      "/apis",
0000000000000000000000000000000000000000;;				reason:       "Forbidden",
0000000000000000000000000000000000000000;;				message:      ` "" is forbidden: User "" cannot get path "/apis".: "Everything is forbidden."`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "401",
0000000000000000000000000000000000000000;;				masterConfig: initUnauthorizedMasterCongfig(),
0000000000000000000000000000000000000000;;				statusCode:   http.StatusUnauthorized,
0000000000000000000000000000000000000000;;				reqPath:      "/apis",
0000000000000000000000000000000000000000;;				reason:       "Unauthorized",
0000000000000000000000000000000000000000;;				message:      `Unauthorized`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			_, s, closeFn := framework.RunAMaster(tc.masterConfig)
0000000000000000000000000000000000000000;;			defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u := s.URL + tc.reqPath
0000000000000000000000000000000000000000;;			resp, err := http.Get(u)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error getting %s: %v", u, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if resp.StatusCode != tc.statusCode {
0000000000000000000000000000000000000000;;				t.Fatalf("got status %v instead of %s", resp.StatusCode, tc.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer resp.Body.Close()
0000000000000000000000000000000000000000;;			data, _ := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;			decodedData := map[string]interface{}{}
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(data, &decodedData); err != nil {
0000000000000000000000000000000000000000;;				t.Logf("body: %s", string(data))
0000000000000000000000000000000000000000;;				t.Fatalf("got error decoding data: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Logf("body: %s", string(data))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if got, expected := decodedData["apiVersion"], "v1"; got != expected {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected apiVersion %q, expected %q", got, expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got, expected := decodedData["kind"], "Status"; got != expected {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected kind %q, expected %q", got, expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got, expected := decodedData["status"], "Failure"; got != expected {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected status %q, expected %q", got, expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got, expected := decodedData["code"], float64(tc.statusCode); got != expected {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected code %v, expected %v", got, expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got, expected := decodedData["reason"], tc.reason; got != expected {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected reason %v, expected %v", got, expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got, expected := decodedData["message"], tc.message; got != expected {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected message %v, expected %v", got, expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatchSucceedsWithoutArgs(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := http.Get(s.URL + "/api/v1/namespaces?watch=1")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error getting experimental prefix: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			t.Fatalf("got status %v instead of 200 OK", resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp.Body.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var hpaV1 string = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "autoscaling/v1",
0000000000000000000000000000000000000000;;	  "kind": "HorizontalPodAutoscaler",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;	    "name": "test-hpa",
0000000000000000000000000000000000000000;;	    "namespace": "default"
0000000000000000000000000000000000000000;;	  },
0000000000000000000000000000000000000000;;	  "spec": {
0000000000000000000000000000000000000000;;	    "scaleTargetRef": {
0000000000000000000000000000000000000000;;	      "kind": "ReplicationController",
0000000000000000000000000000000000000000;;	      "name": "test-hpa",
0000000000000000000000000000000000000000;;	      "namespace": "default"
0000000000000000000000000000000000000000;;	    },
0000000000000000000000000000000000000000;;	    "minReplicas": 1,
0000000000000000000000000000000000000000;;	    "maxReplicas": 10,
0000000000000000000000000000000000000000;;	    "targetCPUUtilizationPercentage": 50
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var deploymentExtensions string = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "extensions/v1beta1",
0000000000000000000000000000000000000000;;	  "kind": "Deployment",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;	     "name": "test-deployment1",
0000000000000000000000000000000000000000;;	     "namespace": "default"
0000000000000000000000000000000000000000;;	  },
0000000000000000000000000000000000000000;;	  "spec": {
0000000000000000000000000000000000000000;;	    "replicas": 1,
0000000000000000000000000000000000000000;;	    "template": {
0000000000000000000000000000000000000000;;	      "metadata": {
0000000000000000000000000000000000000000;;	        "labels": {
0000000000000000000000000000000000000000;;	          "app": "nginx0"
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	      },
0000000000000000000000000000000000000000;;	      "spec": {
0000000000000000000000000000000000000000;;	        "containers": [{
0000000000000000000000000000000000000000;;	          "name": "nginx",
0000000000000000000000000000000000000000;;	          "image": "gcr.io/google-containers/nginx:1.7.9"
0000000000000000000000000000000000000000;;	        }]
0000000000000000000000000000000000000000;;	      }
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var deploymentApps string = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "apps/v1beta1",
0000000000000000000000000000000000000000;;	  "kind": "Deployment",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;	     "name": "test-deployment2",
0000000000000000000000000000000000000000;;	     "namespace": "default"
0000000000000000000000000000000000000000;;	  },
0000000000000000000000000000000000000000;;	  "spec": {
0000000000000000000000000000000000000000;;	    "replicas": 1,
0000000000000000000000000000000000000000;;	    "template": {
0000000000000000000000000000000000000000;;	      "metadata": {
0000000000000000000000000000000000000000;;	        "labels": {
0000000000000000000000000000000000000000;;	          "app": "nginx0"
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	      },
0000000000000000000000000000000000000000;;	      "spec": {
0000000000000000000000000000000000000000;;	        "containers": [{
0000000000000000000000000000000000000000;;	          "name": "nginx",
0000000000000000000000000000000000000000;;	          "image": "gcr.io/google-containers/nginx:1.7.9"
0000000000000000000000000000000000000000;;	        }]
0000000000000000000000000000000000000000;;	      }
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func autoscalingPath(resource, namespace, name string) string {
0000000000000000000000000000000000000000;;		return testapi.Autoscaling.ResourcePath(resource, namespace, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func batchPath(resource, namespace, name string) string {
0000000000000000000000000000000000000000;;		return testapi.Batch.ResourcePath(resource, namespace, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func extensionsPath(resource, namespace, name string) string {
0000000000000000000000000000000000000000;;		return testapi.Extensions.ResourcePath(resource, namespace, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func appsPath(resource, namespace, name string) string {
0000000000000000000000000000000000000000;;		return testapi.Apps.ResourcePath(resource, namespace, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAutoscalingGroupBackwardCompatibility(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;		transport := http.DefaultTransport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requests := []struct {
0000000000000000000000000000000000000000;;			verb                string
0000000000000000000000000000000000000000;;			URL                 string
0000000000000000000000000000000000000000;;			body                string
0000000000000000000000000000000000000000;;			expectedStatusCodes map[int]bool
0000000000000000000000000000000000000000;;			expectedVersion     string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"POST", autoscalingPath("horizontalpodautoscalers", metav1.NamespaceDefault, ""), hpaV1, integration.Code201, ""},
0000000000000000000000000000000000000000;;			{"GET", autoscalingPath("horizontalpodautoscalers", metav1.NamespaceDefault, ""), "", integration.Code200, testapi.Autoscaling.GroupVersion().String()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, r := range requests {
0000000000000000000000000000000000000000;;			bodyBytes := bytes.NewReader([]byte(r.body))
0000000000000000000000000000000000000000;;			req, err := http.NewRequest(r.verb, s.URL+r.URL, bodyBytes)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Logf("case %v", r)
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				resp, err := transport.RoundTrip(req)
0000000000000000000000000000000000000000;;				defer resp.Body.Close()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Logf("case %v", r)
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				b, _ := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;				body := string(b)
0000000000000000000000000000000000000000;;				if _, ok := r.expectedStatusCodes[resp.StatusCode]; !ok {
0000000000000000000000000000000000000000;;					t.Logf("case %v", r)
0000000000000000000000000000000000000000;;					t.Errorf("Expected status one of %v, but got %v", r.expectedStatusCodes, resp.StatusCode)
0000000000000000000000000000000000000000;;					t.Errorf("Body: %v", body)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !strings.Contains(body, "\"apiVersion\":\""+r.expectedVersion) {
0000000000000000000000000000000000000000;;					t.Logf("case %v", r)
0000000000000000000000000000000000000000;;					t.Errorf("Expected version %v, got body %v", r.expectedVersion, body)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAppsGroupBackwardCompatibility(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;		transport := http.DefaultTransport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requests := []struct {
0000000000000000000000000000000000000000;;			verb                string
0000000000000000000000000000000000000000;;			URL                 string
0000000000000000000000000000000000000000;;			body                string
0000000000000000000000000000000000000000;;			expectedStatusCodes map[int]bool
0000000000000000000000000000000000000000;;			expectedVersion     string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Post to extensions endpoint and get back from both: extensions and apps
0000000000000000000000000000000000000000;;			{"POST", extensionsPath("deployments", metav1.NamespaceDefault, ""), deploymentExtensions, integration.Code201, ""},
0000000000000000000000000000000000000000;;			{"GET", extensionsPath("deployments", metav1.NamespaceDefault, "test-deployment1"), "", integration.Code200, testapi.Extensions.GroupVersion().String()},
0000000000000000000000000000000000000000;;			{"GET", appsPath("deployments", metav1.NamespaceDefault, "test-deployment1"), "", integration.Code200, testapi.Apps.GroupVersion().String()},
0000000000000000000000000000000000000000;;			{"DELETE", extensionsPath("deployments", metav1.NamespaceDefault, "test-deployment1"), "", integration.Code200, testapi.Extensions.GroupVersion().String()},
0000000000000000000000000000000000000000;;			// Post to apps endpoint and get back from both: apps and extensions
0000000000000000000000000000000000000000;;			{"POST", appsPath("deployments", metav1.NamespaceDefault, ""), deploymentApps, integration.Code201, ""},
0000000000000000000000000000000000000000;;			{"GET", appsPath("deployments", metav1.NamespaceDefault, "test-deployment2"), "", integration.Code200, testapi.Apps.GroupVersion().String()},
0000000000000000000000000000000000000000;;			{"GET", extensionsPath("deployments", metav1.NamespaceDefault, "test-deployment2"), "", integration.Code200, testapi.Extensions.GroupVersion().String()},
0000000000000000000000000000000000000000;;			{"DELETE", appsPath("deployments", metav1.NamespaceDefault, "test-deployment2"), "", integration.Code200, testapi.Apps.GroupVersion().String()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, r := range requests {
0000000000000000000000000000000000000000;;			bodyBytes := bytes.NewReader([]byte(r.body))
0000000000000000000000000000000000000000;;			req, err := http.NewRequest(r.verb, s.URL+r.URL, bodyBytes)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Logf("case %v", r)
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				resp, err := transport.RoundTrip(req)
0000000000000000000000000000000000000000;;				defer resp.Body.Close()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Logf("case %v", r)
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				b, _ := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;				body := string(b)
0000000000000000000000000000000000000000;;				if _, ok := r.expectedStatusCodes[resp.StatusCode]; !ok {
0000000000000000000000000000000000000000;;					t.Logf("case %v", r)
0000000000000000000000000000000000000000;;					t.Errorf("Expected status one of %v, but got %v", r.expectedStatusCodes, resp.StatusCode)
0000000000000000000000000000000000000000;;					t.Errorf("Body: %v", body)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !strings.Contains(body, "\"apiVersion\":\""+r.expectedVersion) {
0000000000000000000000000000000000000000;;					t.Logf("case %v", r)
0000000000000000000000000000000000000000;;					t.Errorf("Expected version %v, got body %v", r.expectedVersion, body)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAccept(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := http.Get(s.URL + "/api/")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error getting api: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			t.Fatalf("got status %v instead of 200 OK", resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body, _ := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if resp.Header.Get("Content-Type") != "application/json" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected content: %s", body)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(body, &map[string]interface{}{}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", s.URL+"/api/", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Accept", "application/yaml")
0000000000000000000000000000000000000000;;		resp, err = http.DefaultClient.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		body, _ = ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if resp.Header.Get("Content-Type") != "application/yaml" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected content: %s", body)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("body: %s", body)
0000000000000000000000000000000000000000;;		if err := yaml.Unmarshal(body, &map[string]interface{}{}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err = http.NewRequest("GET", s.URL+"/api/", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Accept", "application/json, application/yaml")
0000000000000000000000000000000000000000;;		resp, err = http.DefaultClient.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		body, _ = ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if resp.Header.Get("Content-Type") != "application/json" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected content: %s", body)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("body: %s", body)
0000000000000000000000000000000000000000;;		if err := yaml.Unmarshal(body, &map[string]interface{}{}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err = http.NewRequest("GET", s.URL+"/api/", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Accept", "application") // not a valid media type
0000000000000000000000000000000000000000;;		resp, err = http.DefaultClient.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusNotAcceptable {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error from the server")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func countEndpoints(eps *api.Endpoints) int {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		for i := range eps.Subsets {
0000000000000000000000000000000000000000;;			count += len(eps.Subsets[i].Addresses) * len(eps.Subsets[i].Ports)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return count
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMasterService(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(framework.NewIntegrationTestMasterConfig())
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := wait.Poll(time.Second, time.Minute, func() (bool, error) {
0000000000000000000000000000000000000000;;			svcList, err := client.Core().Services(metav1.NamespaceDefault).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			found := false
0000000000000000000000000000000000000000;;			for i := range svcList.Items {
0000000000000000000000000000000000000000;;				if svcList.Items[i].Name == "kubernetes" {
0000000000000000000000000000000000000000;;					found = true
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if found {
0000000000000000000000000000000000000000;;				ep, err := client.Core().Endpoints(metav1.NamespaceDefault).Get("kubernetes", metav1.GetOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return false, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if countEndpoints(ep) == 0 {
0000000000000000000000000000000000000000;;					return false, fmt.Errorf("no endpoints for kubernetes service: %v", ep)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServiceAlloc(t *testing.T) {
0000000000000000000000000000000000000000;;		cfg := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		_, cidr, err := net.ParseCIDR("192.168.0.0/29")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("bad cidr: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.ServiceIPRange = *cidr
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(cfg)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		svc := func(i int) *api.Service {
0000000000000000000000000000000000000000;;			return &api.Service{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: fmt.Sprintf("svc-%v", i),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;					Type: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;						{Port: 80},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Wait until the default "kubernetes" service is created.
0000000000000000000000000000000000000000;;		if err = wait.Poll(250*time.Millisecond, time.Minute, func() (bool, error) {
0000000000000000000000000000000000000000;;			_, err := client.Core().Services(metav1.NamespaceDefault).Get("kubernetes", metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil && !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return !errors.IsNotFound(err), nil
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("creating kubernetes service timed out")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// make 5 more services to take up all IPs
0000000000000000000000000000000000000000;;		for i := 0; i < 5; i++ {
0000000000000000000000000000000000000000;;			if _, err := client.Core().Services(metav1.NamespaceDefault).Create(svc(i)); err != nil {
0000000000000000000000000000000000000000;;				t.Error(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make another service. It will fail because we're out of cluster IPs
0000000000000000000000000000000000000000;;		if _, err := client.Core().Services(metav1.NamespaceDefault).Create(svc(8)); err != nil {
0000000000000000000000000000000000000000;;			if !strings.Contains(err.Error(), "range is full") {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error text: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			svcs, err := client.Core().Services(metav1.NamespaceAll).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected success, and error getting the services: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			allIPs := []string{}
0000000000000000000000000000000000000000;;			for _, s := range svcs.Items {
0000000000000000000000000000000000000000;;				allIPs = append(allIPs, s.Spec.ClusterIP)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected creation success. The following IPs exist: %#v. It should only be possible to allocate 2 IP addresses in this cluster.\n\n%#v", allIPs, svcs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delete the first service.
0000000000000000000000000000000000000000;;		if err := client.Core().Services(metav1.NamespaceDefault).Delete(svc(1).ObjectMeta.Name, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("got unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This time creating the second service should work.
0000000000000000000000000000000000000000;;		if _, err := client.Core().Services(metav1.NamespaceDefault).Create(svc(8)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("got unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestUpdateNodeObjects represents a simple version of the behavior of node checkins at steady
0000000000000000000000000000000000000000;;	// state. This test allows for easy profiling of a realistic master scenario for baseline CPU
0000000000000000000000000000000000000000;;	// in very large clusters. It is disabled by default - start a kube-apiserver and pass
0000000000000000000000000000000000000000;;	// UPDATE_NODE_APISERVER as the host value.
0000000000000000000000000000000000000000;;	func TestUpdateNodeObjects(t *testing.T) {
0000000000000000000000000000000000000000;;		server := os.Getenv("UPDATE_NODE_APISERVER")
0000000000000000000000000000000000000000;;		if len(server) == 0 {
0000000000000000000000000000000000000000;;			t.Skip("UPDATE_NODE_APISERVER is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := clienttypedv1.NewForConfigOrDie(&restclient.Config{
0000000000000000000000000000000000000000;;			QPS:  10000,
0000000000000000000000000000000000000000;;			Host: server,
0000000000000000000000000000000000000000;;			ContentConfig: restclient.ContentConfig{
0000000000000000000000000000000000000000;;				AcceptContentTypes: "application/vnd.kubernetes.protobuf",
0000000000000000000000000000000000000000;;				ContentType:        "application/vnd.kubernetes.protobuf",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodes := 400
0000000000000000000000000000000000000000;;		listers := 5
0000000000000000000000000000000000000000;;		watchers := 50
0000000000000000000000000000000000000000;;		iterations := 10000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < nodes*6; i++ {
0000000000000000000000000000000000000000;;			c.Nodes().Delete(fmt.Sprintf("node-%d", i), nil)
0000000000000000000000000000000000000000;;			_, err := c.Nodes().Create(&v1.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: fmt.Sprintf("node-%d", i),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k := 0; k < listers; k++ {
0000000000000000000000000000000000000000;;			go func(lister int) {
0000000000000000000000000000000000000000;;				for i := 0; i < iterations; i++ {
0000000000000000000000000000000000000000;;					_, err := c.Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						fmt.Printf("[list:%d] error after %d: %v\n", lister, i, err)
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					time.Sleep(time.Duration(lister)*10*time.Millisecond + 1500*time.Millisecond)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}(k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k := 0; k < watchers; k++ {
0000000000000000000000000000000000000000;;			go func(lister int) {
0000000000000000000000000000000000000000;;				w, err := c.Nodes().Watch(metav1.ListOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					fmt.Printf("[watch:%d] error: %v", k, err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				i := 0
0000000000000000000000000000000000000000;;				for r := range w.ResultChan() {
0000000000000000000000000000000000000000;;					i++
0000000000000000000000000000000000000000;;					if _, ok := r.Object.(*v1.Node); !ok {
0000000000000000000000000000000000000000;;						fmt.Printf("[watch:%d] unexpected object after %d: %#v\n", lister, i, r)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if i%100 == 0 {
0000000000000000000000000000000000000000;;						fmt.Printf("[watch:%d] iteration %d ...\n", lister, i)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				fmt.Printf("[watch:%d] done\n", lister)
0000000000000000000000000000000000000000;;			}(k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var wg sync.WaitGroup
0000000000000000000000000000000000000000;;		wg.Add(nodes - listers)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for j := 0; j < nodes; j++ {
0000000000000000000000000000000000000000;;			go func(node int) {
0000000000000000000000000000000000000000;;				var lastCount int
0000000000000000000000000000000000000000;;				for i := 0; i < iterations; i++ {
0000000000000000000000000000000000000000;;					if i%100 == 0 {
0000000000000000000000000000000000000000;;						fmt.Printf("[%d] iteration %d ...\n", node, i)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if i%20 == 0 {
0000000000000000000000000000000000000000;;						_, err := c.Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							fmt.Printf("[%d] error after %d: %v\n", node, i, err)
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					r, err := c.Nodes().List(metav1.ListOptions{
0000000000000000000000000000000000000000;;						FieldSelector:   fmt.Sprintf("metadata.name=node-%d", node),
0000000000000000000000000000000000000000;;						ResourceVersion: "0",
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						fmt.Printf("[%d] error after %d: %v\n", node, i, err)
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if len(r.Items) != 1 {
0000000000000000000000000000000000000000;;						fmt.Printf("[%d] error after %d: unexpected list count\n", node, i)
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					n, err := c.Nodes().Get(fmt.Sprintf("node-%d", node), metav1.GetOptions{})
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						fmt.Printf("[%d] error after %d: %v\n", node, i, err)
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if len(n.Status.Conditions) != lastCount {
0000000000000000000000000000000000000000;;						fmt.Printf("[%d] worker set %d, read %d conditions\n", node, lastCount, len(n.Status.Conditions))
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					previousCount := lastCount
0000000000000000000000000000000000000000;;					switch {
0000000000000000000000000000000000000000;;					case i%4 == 0:
0000000000000000000000000000000000000000;;						lastCount = 1
0000000000000000000000000000000000000000;;						n.Status.Conditions = []v1.NodeCondition{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type:   v1.NodeReady,
0000000000000000000000000000000000000000;;								Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;								Reason: "foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					case i%4 == 1:
0000000000000000000000000000000000000000;;						lastCount = 2
0000000000000000000000000000000000000000;;						n.Status.Conditions = []v1.NodeCondition{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type:   v1.NodeReady,
0000000000000000000000000000000000000000;;								Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;								Reason: "foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type:   v1.NodeDiskPressure,
0000000000000000000000000000000000000000;;								Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;								Reason: "bar",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					case i%4 == 1:
0000000000000000000000000000000000000000;;						lastCount = 0
0000000000000000000000000000000000000000;;						n.Status.Conditions = nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if _, err := c.Nodes().UpdateStatus(n); err != nil {
0000000000000000000000000000000000000000;;						if !errors.IsConflict(err) {
0000000000000000000000000000000000000000;;							fmt.Printf("[%d] error after %d: %v\n", node, i, err)
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						lastCount = previousCount
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				wg.Done()
0000000000000000000000000000000000000000;;				fmt.Printf("[%d] done\n", node)
0000000000000000000000000000000000000000;;			}(j)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wg.Wait()
0000000000000000000000000000000000000000;;	}
