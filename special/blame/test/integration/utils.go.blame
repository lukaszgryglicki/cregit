0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
85124ac5cbed94f26f75b81fac9f361620a2bb0d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package integration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		coreclient "k8s.io/kubernetes/pkg/client/clientset_generated/clientset/typed/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeletePodOrErrorf(t *testing.T, c clientset.Interface, ns, name string) {
0000000000000000000000000000000000000000;;		if err := c.Core().Pods(ns).Delete(name, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to delete pod %v: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Requests to try.  Each one should be forbidden or not forbidden
0000000000000000000000000000000000000000;;	// depending on the authentication and authorization setup of the master.
0000000000000000000000000000000000000000;;	var Code200 = map[int]bool{200: true}
0000000000000000000000000000000000000000;;	var Code201 = map[int]bool{201: true}
0000000000000000000000000000000000000000;;	var Code400 = map[int]bool{400: true}
0000000000000000000000000000000000000000;;	var Code403 = map[int]bool{403: true}
0000000000000000000000000000000000000000;;	var Code404 = map[int]bool{404: true}
0000000000000000000000000000000000000000;;	var Code405 = map[int]bool{405: true}
0000000000000000000000000000000000000000;;	var Code409 = map[int]bool{409: true}
0000000000000000000000000000000000000000;;	var Code422 = map[int]bool{422: true}
0000000000000000000000000000000000000000;;	var Code500 = map[int]bool{500: true}
0000000000000000000000000000000000000000;;	var Code503 = map[int]bool{503: true}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitForPodToDisappear polls the API server if the pod has been deleted.
0000000000000000000000000000000000000000;;	func WaitForPodToDisappear(podClient coreclient.PodInterface, podName string, interval, timeout time.Duration) error {
0000000000000000000000000000000000000000;;		return wait.PollImmediate(interval, timeout, func() (bool, error) {
0000000000000000000000000000000000000000;;			_, err := podClient.Get(podName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return false, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
