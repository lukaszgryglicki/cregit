0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
93123b40e5079d22bf0f1c626075b89668a6be83;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package defaulttolerationseconds
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/defaulttolerationseconds"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdmission(t *testing.T) {
0000000000000000000000000000000000000000;;		masterConfig := framework.NewMasterConfig()
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.EnableProfiling = true
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.EnableMetrics = true
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.AdmissionControl = defaulttolerationseconds.NewDefaultTolerationSeconds()
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(masterConfig)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(v1.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := framework.CreateTestingNamespace("default-toleration-seconds", s, t)
0000000000000000000000000000000000000000;;		defer framework.DeleteTestingNamespace(ns, s, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: ns.Name,
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "test",
0000000000000000000000000000000000000000;;						Image: "an-image",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		updatedPod, err := client.Core().Pods(pod.Namespace).Create(&pod)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating pod: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var defaultSeconds int64 = 300
0000000000000000000000000000000000000000;;		nodeNotReady := v1.Toleration{
0000000000000000000000000000000000000000;;			Key:               algorithm.TaintNodeNotReady,
0000000000000000000000000000000000000000;;			Operator:          v1.TolerationOpExists,
0000000000000000000000000000000000000000;;			Effect:            v1.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;			TolerationSeconds: &defaultSeconds,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeUnreachable := v1.Toleration{
0000000000000000000000000000000000000000;;			Key:               algorithm.TaintNodeUnreachable,
0000000000000000000000000000000000000000;;			Operator:          v1.TolerationOpExists,
0000000000000000000000000000000000000000;;			Effect:            v1.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;			TolerationSeconds: &defaultSeconds,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		found := 0
0000000000000000000000000000000000000000;;		tolerations := updatedPod.Spec.Tolerations
0000000000000000000000000000000000000000;;		for i := range tolerations {
0000000000000000000000000000000000000000;;			if found == 2 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tolerations[i].MatchToleration(&nodeNotReady) {
0000000000000000000000000000000000000000;;				if helper.Semantic.DeepEqual(tolerations[i], nodeNotReady) {
0000000000000000000000000000000000000000;;					found++
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tolerations[i].MatchToleration(&nodeUnreachable) {
0000000000000000000000000000000000000000;;				if helper.Semantic.DeepEqual(tolerations[i], nodeUnreachable) {
0000000000000000000000000000000000000000;;					found++
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if found != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected tolerations: %v\n", updatedPod.Spec.Tolerations)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
