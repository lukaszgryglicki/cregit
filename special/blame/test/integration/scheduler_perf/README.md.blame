0000000000000000000000000000000000000000;;	Scheduler Performance Test
0000000000000000000000000000000000000000;;	======
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Motivation
0000000000000000000000000000000000000000;;	------
0000000000000000000000000000000000000000;;	We already have a performance testing system -- Kubemark. However, Kubemark requires setting up and bootstrapping a whole cluster, which takes a lot of time.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	We want to have a standard way to reproduce scheduling latency metrics result and benchmark scheduler as simple and fast as possible. We have the following goals:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- Save time on testing
0000000000000000000000000000000000000000;;	  - The test and benchmark can be run in a single box.
0000000000000000000000000000000000000000;;	    We only set up components necessary to scheduling without booting up a cluster.
0000000000000000000000000000000000000000;;	- Profiling runtime metrics to find out bottleneck
0000000000000000000000000000000000000000;;	  - Write scheduler integration test but focus on performance measurement.
0000000000000000000000000000000000000000;;	    Take advantage of go profiling tools and collect fine-grained metrics,
0000000000000000000000000000000000000000;;	    like cpu-profiling, memory-profiling and block-profiling.
0000000000000000000000000000000000000000;;	- Reproduce test result easily
0000000000000000000000000000000000000000;;	  - We want to have a known place to do the performance related test for scheduler.
0000000000000000000000000000000000000000;;	    Developers should just run one script to collect all the information they need.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Currently the test suite has the following:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- density test (by adding a new Go test)
0000000000000000000000000000000000000000;;	  - schedule 30k pods on 1000 (fake) nodes and 3k pods on 100 (fake) nodes
0000000000000000000000000000000000000000;;	  - print out scheduling rate every second
0000000000000000000000000000000000000000;;	  - let you learn the rate changes vs number of scheduled pods
0000000000000000000000000000000000000000;;	- benchmark
0000000000000000000000000000000000000000;;	  - make use of `go test -bench` and report nanosecond/op.
0000000000000000000000000000000000000000;;	  - schedule b.N pods when the cluster has N nodes and P scheduled pods. Since it takes relatively long time to finish one round, b.N is small: 10 - 100.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	How To Run
0000000000000000000000000000000000000000;;	------
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	cd kubernetes/test/integration/scheduler_perf
0000000000000000000000000000000000000000;;	./test-performance.sh
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	<!-- BEGIN MUNGE: GENERATED_ANALYTICS -->
0000000000000000000000000000000000000000;;	[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/test/component/scheduler/perf/README.md?pixel)]()
0000000000000000000000000000000000000000;;	<!-- END MUNGE: GENERATED_ANALYTICS -->
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/test/integration/scheduler_perf/README.md?pixel)]()
