0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../../../
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::golang::setup_env
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	DIR_BASENAME=$(dirname "${BASH_SOURCE}")
0000000000000000000000000000000000000000;;	pushd ${DIR_BASENAME}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cleanup() {
0000000000000000000000000000000000000000;;	  popd 2> /dev/null
0000000000000000000000000000000000000000;;	  kube::etcd::cleanup
0000000000000000000000000000000000000000;;	  kube::log::status "performance test cleanup complete"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	trap cleanup EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube::etcd::start
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# We are using the benchmark suite to do profiling. Because it only runs a few pods and
0000000000000000000000000000000000000000;;	# theoretically it has less variance.
0000000000000000000000000000000000000000;;	if ${RUN_BENCHMARK:-false}; then
0000000000000000000000000000000000000000;;	  kube::log::status "performance test (benchmark) compiling"
0000000000000000000000000000000000000000;;	  go test -c -o "perf.test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::log::status "performance test (benchmark) start"
0000000000000000000000000000000000000000;;	  "./perf.test" -test.bench=. -test.run=xxxx -test.cpuprofile=prof.out -test.short=false
0000000000000000000000000000000000000000;;	  kube::log::status "...benchmark tests finished"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	# Running density tests. It might take a long time.
0000000000000000000000000000000000000000;;	kube::log::status "performance test (density) start"
0000000000000000000000000000000000000000;;	go test -test.run=. -test.timeout=60m -test.short=false
0000000000000000000000000000000000000000;;	kube::log::status "...density tests finished"
