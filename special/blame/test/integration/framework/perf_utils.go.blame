0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
31cd51431bd4c881fc4320ac01d34d9010e4744d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package framework
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		e2eframework "k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;		testutils "k8s.io/kubernetes/test/utils"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		retries = 5
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IntegrationTestNodePreparer struct {
0000000000000000000000000000000000000000;;		client          clientset.Interface
0000000000000000000000000000000000000000;;		countToStrategy []testutils.CountToStrategy
0000000000000000000000000000000000000000;;		nodeNamePrefix  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewIntegrationTestNodePreparer(client clientset.Interface, countToStrategy []testutils.CountToStrategy, nodeNamePrefix string) testutils.TestNodePreparer {
0000000000000000000000000000000000000000;;		return &IntegrationTestNodePreparer{
0000000000000000000000000000000000000000;;			client:          client,
0000000000000000000000000000000000000000;;			countToStrategy: countToStrategy,
0000000000000000000000000000000000000000;;			nodeNamePrefix:  nodeNamePrefix,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *IntegrationTestNodePreparer) PrepareNodes() error {
0000000000000000000000000000000000000000;;		numNodes := 0
0000000000000000000000000000000000000000;;		for _, v := range p.countToStrategy {
0000000000000000000000000000000000000000;;			numNodes += v.Count
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Infof("Making %d nodes", numNodes)
0000000000000000000000000000000000000000;;		baseNode := &v1.Node{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				GenerateName: p.nodeNamePrefix,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.NodeSpec{
0000000000000000000000000000000000000000;;				// TODO: investigate why this is needed.
0000000000000000000000000000000000000000;;				ExternalID: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: v1.NodeStatus{
0000000000000000000000000000000000000000;;				Capacity: v1.ResourceList{
0000000000000000000000000000000000000000;;					v1.ResourcePods:   *resource.NewQuantity(110, resource.DecimalSI),
0000000000000000000000000000000000000000;;					v1.ResourceCPU:    resource.MustParse("4"),
0000000000000000000000000000000000000000;;					v1.ResourceMemory: resource.MustParse("32Gi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Phase: v1.NodeRunning,
0000000000000000000000000000000000000000;;				Conditions: []v1.NodeCondition{
0000000000000000000000000000000000000000;;					{Type: v1.NodeReady, Status: v1.ConditionTrue},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 0; i < numNodes; i++ {
0000000000000000000000000000000000000000;;			if _, err := p.client.Core().Nodes().Create(baseNode); err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Error creating node: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodes := e2eframework.GetReadySchedulableNodesOrDie(p.client)
0000000000000000000000000000000000000000;;		index := 0
0000000000000000000000000000000000000000;;		sum := 0
0000000000000000000000000000000000000000;;		for _, v := range p.countToStrategy {
0000000000000000000000000000000000000000;;			sum += v.Count
0000000000000000000000000000000000000000;;			for ; index < sum; index++ {
0000000000000000000000000000000000000000;;				if err := testutils.DoPrepareNode(p.client, &nodes.Items[index], v.Strategy); err != nil {
0000000000000000000000000000000000000000;;					glog.Errorf("Aborting node preparation: %v", err)
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *IntegrationTestNodePreparer) CleanupNodes() error {
0000000000000000000000000000000000000000;;		nodes := e2eframework.GetReadySchedulableNodesOrDie(p.client)
0000000000000000000000000000000000000000;;		for i := range nodes.Items {
0000000000000000000000000000000000000000;;			if err := p.client.Core().Nodes().Delete(nodes.Items[i].Name, &metav1.DeleteOptions{}); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Error while deleting Node: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
