0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
9fd016054d8a1843770120c305f50bac5918d834;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storageclasses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file contains tests for the storage classes API resource.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		storage "k8s.io/api/storage/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const provisionerPluginName = "kubernetes.io/mock-provisioner"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestStorageClasses tests apiserver-side behavior of creation of storage class objects and their use by pvcs.
0000000000000000000000000000000000000000;;	func TestStorageClasses(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(v1.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := framework.CreateTestingNamespace("storageclass", s, t)
0000000000000000000000000000000000000000;;		defer framework.DeleteTestingNamespace(ns, s, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DoTestStorageClasses(t, client, ns)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DoTestStorageClasses tests storage classes for one api version.
0000000000000000000000000000000000000000;;	func DoTestStorageClasses(t *testing.T, client clientset.Interface, ns *v1.Namespace) {
0000000000000000000000000000000000000000;;		// Make a storage class object.
0000000000000000000000000000000000000000;;		s := storage.StorageClass{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind: "StorageClass",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "gold",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: provisionerPluginName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := client.StorageV1().StorageClasses().Create(&s); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to create test storage class: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer deleteStorageClassOrErrorf(t, client, s.Namespace, s.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Template for pvcs that specify a storage class
0000000000000000000000000000000000000000;;		classGold := "gold"
0000000000000000000000000000000000000000;;		pvc := &v1.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "XXX",
0000000000000000000000000000000000000000;;				Namespace: ns.Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;				Resources:        v1.ResourceRequirements{Requests: v1.ResourceList{v1.ResourceName(v1.ResourceStorage): resource.MustParse("1G")}},
0000000000000000000000000000000000000000;;				AccessModes:      []v1.PersistentVolumeAccessMode{v1.ReadWriteOnce},
0000000000000000000000000000000000000000;;				StorageClassName: &classGold,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pvc.ObjectMeta.Name = "uses-storageclass"
0000000000000000000000000000000000000000;;		if _, err := client.Core().PersistentVolumeClaims(ns.Name).Create(pvc); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create pvc: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer deletePersistentVolumeClaimOrErrorf(t, client, ns.Name, pvc.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func deleteStorageClassOrErrorf(t *testing.T, c clientset.Interface, ns, name string) {
0000000000000000000000000000000000000000;;		if err := c.StorageV1().StorageClasses().Delete(name, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to delete storage class %v: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func deletePersistentVolumeClaimOrErrorf(t *testing.T, c clientset.Interface, ns, name string) {
0000000000000000000000000000000000000000;;		if err := c.Core().PersistentVolumeClaims(ns).Delete(name, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to delete persistent volume claim %v: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
