0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6bbc51f84e2d61d63fe935d743dcb50624adadce;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setup(t *testing.T) (*httptest.Server, clientset.Interface, framework.CloseFunc) {
0000000000000000000000000000000000000000;;		masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		masterConfig.EnableCoreControllers = false
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(masterConfig)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientSet, err := clientset.NewForConfig(&restclient.Config{Host: s.URL})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in create clientset: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s, clientSet, closeFn
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyStatusCode(t *testing.T, verb, URL, body string, expectedStatusCode int) {
0000000000000000000000000000000000000000;;		// We dont use the typed Go client to send this request to be able to verify the response status code.
0000000000000000000000000000000000000000;;		bodyBytes := bytes.NewReader([]byte(body))
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(verb, URL, bodyBytes)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v in sending req with verb: %s, URL: %s and body: %s", err, verb, URL, body)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		transport := http.DefaultTransport
0000000000000000000000000000000000000000;;		glog.Infof("Sending request: %v", req)
0000000000000000000000000000000000000000;;		resp, err := transport.RoundTrip(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v in req: %v", err, req)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		b, _ := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if resp.StatusCode != expectedStatusCode {
0000000000000000000000000000000000000000;;			t.Errorf("Expected status %v, but got %v", expectedStatusCode, resp.StatusCode)
0000000000000000000000000000000000000000;;			t.Errorf("Body: %v", string(b))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func path(resource, namespace, name string) string {
0000000000000000000000000000000000000000;;		return testapi.Extensions.ResourcePath(resource, namespace, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRS(namespace string) *v1beta1.ReplicaSet {
0000000000000000000000000000000000000000;;		return &v1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind:       "ReplicaSet",
0000000000000000000000000000000000000000;;				APIVersion: "extensions/v1beta1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:    namespace,
0000000000000000000000000000000000000000;;				GenerateName: "apiserver-test",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;				Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"name": "test"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "fake-name",
0000000000000000000000000000000000000000;;								Image: "fakeimage",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var cascDel = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "kind": "DeleteOptions",
0000000000000000000000000000000000000000;;	  "apiVersion": "` + api.Registry.GroupOrDie(api.GroupName).GroupVersion.String() + `",
0000000000000000000000000000000000000000;;	  "orphanDependents": false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Tests that the apiserver returns 202 status code as expected.
0000000000000000000000000000000000000000;;	func Test202StatusCode(t *testing.T) {
0000000000000000000000000000000000000000;;		s, clientSet, closeFn := setup(t)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := framework.CreateTestingNamespace("status-code", s, t)
0000000000000000000000000000000000000000;;		defer framework.DeleteTestingNamespace(ns, s, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rsClient := clientSet.Extensions().ReplicaSets(ns.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// 1. Create the resource without any finalizer and then delete it without setting DeleteOptions.
0000000000000000000000000000000000000000;;		// Verify that server returns 200 in this case.
0000000000000000000000000000000000000000;;		rs, err := rsClient.Create(newRS(ns.Name))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create rs: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyStatusCode(t, "DELETE", s.URL+path("replicasets", ns.Name, rs.Name), "", 200)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// 2. Create the resource with a finalizer so that the resource is not immediately deleted and then delete it without setting DeleteOptions.
0000000000000000000000000000000000000000;;		// Verify that the apiserver still returns 200 since DeleteOptions.OrphanDependents is not set.
0000000000000000000000000000000000000000;;		rs = newRS(ns.Name)
0000000000000000000000000000000000000000;;		rs.ObjectMeta.Finalizers = []string{"kube.io/dummy-finalizer"}
0000000000000000000000000000000000000000;;		rs, err = rsClient.Create(rs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create rs: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyStatusCode(t, "DELETE", s.URL+path("replicasets", ns.Name, rs.Name), "", 200)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// 3. Create the resource and then delete it with DeleteOptions.OrphanDependents=false.
0000000000000000000000000000000000000000;;		// Verify that the server still returns 200 since the resource is immediately deleted.
0000000000000000000000000000000000000000;;		rs = newRS(ns.Name)
0000000000000000000000000000000000000000;;		rs, err = rsClient.Create(rs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create rs: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyStatusCode(t, "DELETE", s.URL+path("replicasets", ns.Name, rs.Name), cascDel, 200)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// 4. Create the resource with a finalizer so that the resource is not immediately deleted and then delete it with DeleteOptions.OrphanDependents=false.
0000000000000000000000000000000000000000;;		// Verify that the server returns 202 in this case.
0000000000000000000000000000000000000000;;		rs = newRS(ns.Name)
0000000000000000000000000000000000000000;;		rs.ObjectMeta.Finalizers = []string{"kube.io/dummy-finalizer"}
0000000000000000000000000000000000000000;;		rs, err = rsClient.Create(rs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create rs: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyStatusCode(t, "DELETE", s.URL+path("replicasets", ns.Name, rs.Name), cascDel, 202)
0000000000000000000000000000000000000000;;	}
