0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9c97f06e1356e7ea7b8c52255a3c0aebc1c1200d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package auth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/auth/nodeidentifier"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubeapiserver/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/noderestriction"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/auth/authorizer/rbac/bootstrappolicy"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNodeAuthorizer(t *testing.T) {
0000000000000000000000000000000000000000;;		// Start the server so we know the address
0000000000000000000000000000000000000000;;		h := &framework.MasterHolder{Initialized: make(chan struct{})}
0000000000000000000000000000000000000000;;		apiServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			<-h.Initialized
0000000000000000000000000000000000000000;;			h.M.GenericAPIServer.Handler.ServeHTTP(w, req)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Build client config, clientset, and informers
0000000000000000000000000000000000000000;;		clientConfig := &restclient.Config{Host: apiServer.URL, ContentConfig: restclient.ContentConfig{NegotiatedSerializer: api.Codecs}}
0000000000000000000000000000000000000000;;		superuserClient := clientsetForUser("admin/system:masters", clientConfig)
0000000000000000000000000000000000000000;;		informerFactory := informers.NewSharedInformerFactory(superuserClient, time.Minute)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set up Node+RBAC authorizer
0000000000000000000000000000000000000000;;		authorizerConfig := &authorizer.AuthorizationConfig{
0000000000000000000000000000000000000000;;			AuthorizationModes: []string{"Node", "RBAC"},
0000000000000000000000000000000000000000;;			InformerFactory:    informerFactory,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nodeRBACAuthorizer, err := authorizerConfig.New()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer bootstrappolicy.ClearClusterRoleBindingFilters()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set up NodeRestriction admission
0000000000000000000000000000000000000000;;		nodeRestrictionAdmission := noderestriction.NewPlugin(nodeidentifier.NewDefaultNodeIdentifier())
0000000000000000000000000000000000000000;;		nodeRestrictionAdmission.SetInternalKubeClientSet(superuserClient)
0000000000000000000000000000000000000000;;		if err := nodeRestrictionAdmission.Validate(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start the server
0000000000000000000000000000000000000000;;		masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authenticator = newFakeAuthenticator()
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authorizer = nodeRBACAuthorizer
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.AdmissionControl = nodeRestrictionAdmission
0000000000000000000000000000000000000000;;		_, _, closeFn := framework.RunAMasterUsingServer(masterConfig, apiServer, h)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start the informers
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;		informerFactory.Start(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Wait for a healthy server
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			result := superuserClient.Core().RESTClient().Get().AbsPath("/healthz").Do()
0000000000000000000000000000000000000000;;			_, err := result.Raw()
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Log(err)
0000000000000000000000000000000000000000;;			time.Sleep(time.Second)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create objects
0000000000000000000000000000000000000000;;		if _, err := superuserClient.Core().Secrets("ns").Create(&api.Secret{ObjectMeta: metav1.ObjectMeta{Name: "mysecret"}}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := superuserClient.Core().Secrets("ns").Create(&api.Secret{ObjectMeta: metav1.ObjectMeta{Name: "mypvsecret"}}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := superuserClient.Core().ConfigMaps("ns").Create(&api.ConfigMap{ObjectMeta: metav1.ObjectMeta{Name: "myconfigmap"}}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := superuserClient.Core().PersistentVolumeClaims("ns").Create(&api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "mypvc"},
0000000000000000000000000000000000000000;;			Spec: api.PersistentVolumeClaimSpec{
0000000000000000000000000000000000000000;;				AccessModes: []api.PersistentVolumeAccessMode{api.ReadOnlyMany},
0000000000000000000000000000000000000000;;				Resources:   api.ResourceRequirements{Requests: api.ResourceList{api.ResourceStorage: resource.MustParse("1")}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := superuserClient.Core().PersistentVolumes().Create(&api.PersistentVolume{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "mypv"},
0000000000000000000000000000000000000000;;			Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;				AccessModes:            []api.PersistentVolumeAccessMode{api.ReadOnlyMany},
0000000000000000000000000000000000000000;;				Capacity:               api.ResourceList{api.ResourceStorage: resource.MustParse("1")},
0000000000000000000000000000000000000000;;				ClaimRef:               &api.ObjectReference{Namespace: "ns", Name: "mypvc"},
0000000000000000000000000000000000000000;;				PersistentVolumeSource: api.PersistentVolumeSource{AzureFile: &api.AzureFileVolumeSource{ShareName: "default", SecretName: "mypvsecret"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		getSecret := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().Secrets("ns").Get("mysecret", metav1.GetOptions{})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getPVSecret := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().Secrets("ns").Get("mypvsecret", metav1.GetOptions{})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getConfigMap := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().ConfigMaps("ns").Get("myconfigmap", metav1.GetOptions{})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getPVC := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().PersistentVolumeClaims("ns").Get("mypvc", metav1.GetOptions{})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getPV := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().PersistentVolumes().Get("mypv", metav1.GetOptions{})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createNode2NormalPod := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().Pods("ns").Create(&api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "node2normalpod"},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					NodeName:   "node2",
0000000000000000000000000000000000000000;;					Containers: []api.Container{{Name: "image", Image: "busybox"}},
0000000000000000000000000000000000000000;;					Volumes: []api.Volume{
0000000000000000000000000000000000000000;;						{Name: "secret", VolumeSource: api.VolumeSource{Secret: &api.SecretVolumeSource{SecretName: "mysecret"}}},
0000000000000000000000000000000000000000;;						{Name: "cm", VolumeSource: api.VolumeSource{ConfigMap: &api.ConfigMapVolumeSource{LocalObjectReference: api.LocalObjectReference{Name: "myconfigmap"}}}},
0000000000000000000000000000000000000000;;						{Name: "pvc", VolumeSource: api.VolumeSource{PersistentVolumeClaim: &api.PersistentVolumeClaimVolumeSource{ClaimName: "mypvc"}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateNode2NormalPodStatus := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			startTime := metav1.NewTime(time.Now())
0000000000000000000000000000000000000000;;			_, err := client.Core().Pods("ns").UpdateStatus(&api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "node2normalpod"},
0000000000000000000000000000000000000000;;				Status:     api.PodStatus{StartTime: &startTime},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		deleteNode2NormalPod := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			zero := int64(0)
0000000000000000000000000000000000000000;;			return client.Core().Pods("ns").Delete("node2normalpod", &metav1.DeleteOptions{GracePeriodSeconds: &zero})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createNode2MirrorPod := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().Pods("ns").Create(&api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:        "node2mirrorpod",
0000000000000000000000000000000000000000;;					Annotations: map[string]string{api.MirrorPodAnnotationKey: "true"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					NodeName:   "node2",
0000000000000000000000000000000000000000;;					Containers: []api.Container{{Name: "image", Image: "busybox"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		deleteNode2MirrorPod := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			zero := int64(0)
0000000000000000000000000000000000000000;;			return client.Core().Pods("ns").Delete("node2mirrorpod", &metav1.DeleteOptions{GracePeriodSeconds: &zero})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createNode2 := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().Nodes().Create(&api.Node{ObjectMeta: metav1.ObjectMeta{Name: "node2"}})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateNode2Status := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			_, err := client.Core().Nodes().UpdateStatus(&api.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "node2"},
0000000000000000000000000000000000000000;;				Status:     api.NodeStatus{},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		deleteNode2 := func(client clientset.Interface) error {
0000000000000000000000000000000000000000;;			return client.Core().Nodes().Delete("node2", nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodeanonClient := clientsetForUser("unknown/system:nodes", clientConfig)
0000000000000000000000000000000000000000;;		node1Client := clientsetForUser("system:node:node1/system:nodes", clientConfig)
0000000000000000000000000000000000000000;;		node2Client := clientsetForUser("system:node:node2/system:nodes", clientConfig)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// all node requests from node1 and unknown node fail
0000000000000000000000000000000000000000;;		expectForbidden(t, getSecret(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVSecret(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, getConfigMap(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVC(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPV(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2NormalPod(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2MirrorPod(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, deleteNode2MirrorPod(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, updateNode2Status(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, deleteNode2(nodeanonClient))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectForbidden(t, getSecret(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVSecret(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getConfigMap(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVC(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPV(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2NormalPod(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2MirrorPod(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, deleteNode2MirrorPod(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, updateNode2Status(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, deleteNode2(node1Client))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// related object requests from node2 fail
0000000000000000000000000000000000000000;;		expectForbidden(t, getSecret(node2Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVSecret(node2Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getConfigMap(node2Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVC(node2Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPV(node2Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2NormalPod(nodeanonClient))
0000000000000000000000000000000000000000;;		// mirror pod and self node lifecycle is allowed
0000000000000000000000000000000000000000;;		expectAllowed(t, createNode2MirrorPod(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, deleteNode2MirrorPod(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, createNode2(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, updateNode2Status(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, deleteNode2(node2Client))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create a pod as an admin to add object references
0000000000000000000000000000000000000000;;		expectAllowed(t, createNode2NormalPod(superuserClient))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// unidentifiable node and node1 are still forbidden
0000000000000000000000000000000000000000;;		expectForbidden(t, getSecret(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVSecret(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, getConfigMap(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVC(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPV(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2NormalPod(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, updateNode2NormalPodStatus(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, deleteNode2NormalPod(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2MirrorPod(nodeanonClient))
0000000000000000000000000000000000000000;;		expectForbidden(t, deleteNode2MirrorPod(nodeanonClient))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectForbidden(t, getSecret(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVSecret(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getConfigMap(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPVC(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, getPV(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2NormalPod(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, updateNode2NormalPodStatus(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, deleteNode2NormalPod(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2MirrorPod(node1Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, deleteNode2MirrorPod(node1Client))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// node2 can get referenced objects now
0000000000000000000000000000000000000000;;		expectAllowed(t, getSecret(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, getPVSecret(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, getConfigMap(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, getPVC(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, getPV(node2Client))
0000000000000000000000000000000000000000;;		expectForbidden(t, createNode2NormalPod(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, updateNode2NormalPodStatus(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, deleteNode2NormalPod(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, createNode2MirrorPod(node2Client))
0000000000000000000000000000000000000000;;		expectAllowed(t, deleteNode2MirrorPod(node2Client))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func expectForbidden(t *testing.T, err error) {
0000000000000000000000000000000000000000;;		if !errors.IsForbidden(err) {
0000000000000000000000000000000000000000;;			_, file, line, _ := runtime.Caller(1)
0000000000000000000000000000000000000000;;			t.Errorf("%s:%d: Expected forbidden error, got %v", filepath.Base(file), line, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func expectAllowed(t *testing.T, err error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			_, file, line, _ := runtime.Caller(1)
0000000000000000000000000000000000000000;;			t.Errorf("%s:%d: Expected no error, got %v", filepath.Base(file), line, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
