0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0052744ee0b9927cdc22918b9bf9ffd042afcb84;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package auth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		authorizationapi "k8s.io/kubernetes/pkg/apis/authorization"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/admit"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Inject into master an authorizer that uses user info.
0000000000000000000000000000000000000000;;	// TODO(etune): remove this test once a more comprehensive built-in authorizer is implemented.
0000000000000000000000000000000000000000;;	type sarAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sarAuthorizer) Authorize(a authorizer.Attributes) (bool, string, error) {
0000000000000000000000000000000000000000;;		if a.GetUser().GetName() == "dave" {
0000000000000000000000000000000000000000;;			return false, "no", errors.New("I'm sorry, Dave")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true, "you're not dave", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func alwaysAlice(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		return &user.DefaultInfo{
0000000000000000000000000000000000000000;;			Name: "alice",
0000000000000000000000000000000000000000;;		}, true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSubjectAccessReview(t *testing.T) {
0000000000000000000000000000000000000000;;		masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authenticator = authenticator.RequestFunc(alwaysAlice)
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authorizer = sarAuthorizer{}
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.AdmissionControl = admit.NewAlwaysAdmit()
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(masterConfig)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name           string
0000000000000000000000000000000000000000;;			sar            *authorizationapi.SubjectAccessReview
0000000000000000000000000000000000000000;;			expectedError  string
0000000000000000000000000000000000000000;;			expectedStatus authorizationapi.SubjectAccessReviewStatus
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "simple allow",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.SubjectAccessReview{
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:     "list",
0000000000000000000000000000000000000000;;							Group:    api.GroupName,
0000000000000000000000000000000000000000;;							Version:  "v1",
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						User: "alice",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed: true,
0000000000000000000000000000000000000000;;					Reason:  "you're not dave",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "simple deny",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.SubjectAccessReview{
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:     "list",
0000000000000000000000000000000000000000;;							Group:    api.GroupName,
0000000000000000000000000000000000000000;;							Version:  "v1",
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						User: "dave",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed:         false,
0000000000000000000000000000000000000000;;					Reason:          "no",
0000000000000000000000000000000000000000;;					EvaluationError: "I'm sorry, Dave",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "simple error",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.SubjectAccessReview{
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:     "list",
0000000000000000000000000000000000000000;;							Group:    api.GroupName,
0000000000000000000000000000000000000000;;							Version:  "v1",
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "at least one of user or group must be specified",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			response, err := clientset.Authorization().SubjectAccessReviews().Create(test.sar)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil && len(test.expectedError) == 0:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case err != nil && strings.Contains(err.Error(), test.expectedError):
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case err != nil && len(test.expectedError) != 0:
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.expectedError, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if response.Status != test.expectedStatus {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.expectedStatus, response.Status)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelfSubjectAccessReview(t *testing.T) {
0000000000000000000000000000000000000000;;		username := "alice"
0000000000000000000000000000000000000000;;		masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authenticator = authenticator.RequestFunc(func(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;			return &user.DefaultInfo{Name: username}, true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authorizer = sarAuthorizer{}
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.AdmissionControl = admit.NewAlwaysAdmit()
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(masterConfig)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name           string
0000000000000000000000000000000000000000;;			username       string
0000000000000000000000000000000000000000;;			sar            *authorizationapi.SelfSubjectAccessReview
0000000000000000000000000000000000000000;;			expectedError  string
0000000000000000000000000000000000000000;;			expectedStatus authorizationapi.SubjectAccessReviewStatus
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "simple allow",
0000000000000000000000000000000000000000;;				username: "alice",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.SelfSubjectAccessReview{
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SelfSubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:     "list",
0000000000000000000000000000000000000000;;							Group:    api.GroupName,
0000000000000000000000000000000000000000;;							Version:  "v1",
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed: true,
0000000000000000000000000000000000000000;;					Reason:  "you're not dave",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "simple deny",
0000000000000000000000000000000000000000;;				username: "dave",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.SelfSubjectAccessReview{
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SelfSubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:     "list",
0000000000000000000000000000000000000000;;							Group:    api.GroupName,
0000000000000000000000000000000000000000;;							Version:  "v1",
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed:         false,
0000000000000000000000000000000000000000;;					Reason:          "no",
0000000000000000000000000000000000000000;;					EvaluationError: "I'm sorry, Dave",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			username = test.username
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			response, err := clientset.Authorization().SelfSubjectAccessReviews().Create(test.sar)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil && len(test.expectedError) == 0:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case err != nil && strings.Contains(err.Error(), test.expectedError):
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case err != nil && len(test.expectedError) != 0:
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.expectedError, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if response.Status != test.expectedStatus {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.expectedStatus, response.Status)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLocalSubjectAccessReview(t *testing.T) {
0000000000000000000000000000000000000000;;		masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authenticator = authenticator.RequestFunc(alwaysAlice)
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authorizer = sarAuthorizer{}
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.AdmissionControl = admit.NewAlwaysAdmit()
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(masterConfig)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name           string
0000000000000000000000000000000000000000;;			namespace      string
0000000000000000000000000000000000000000;;			sar            *authorizationapi.LocalSubjectAccessReview
0000000000000000000000000000000000000000;;			expectedError  string
0000000000000000000000000000000000000000;;			expectedStatus authorizationapi.SubjectAccessReviewStatus
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "simple allow",
0000000000000000000000000000000000000000;;				namespace: "foo",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.LocalSubjectAccessReview{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: "foo"},
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:      "list",
0000000000000000000000000000000000000000;;							Group:     api.GroupName,
0000000000000000000000000000000000000000;;							Version:   "v1",
0000000000000000000000000000000000000000;;							Resource:  "pods",
0000000000000000000000000000000000000000;;							Namespace: "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						User: "alice",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed: true,
0000000000000000000000000000000000000000;;					Reason:  "you're not dave",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "simple deny",
0000000000000000000000000000000000000000;;				namespace: "foo",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.LocalSubjectAccessReview{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: "foo"},
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:      "list",
0000000000000000000000000000000000000000;;							Group:     api.GroupName,
0000000000000000000000000000000000000000;;							Version:   "v1",
0000000000000000000000000000000000000000;;							Resource:  "pods",
0000000000000000000000000000000000000000;;							Namespace: "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						User: "dave",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed:         false,
0000000000000000000000000000000000000000;;					Reason:          "no",
0000000000000000000000000000000000000000;;					EvaluationError: "I'm sorry, Dave",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "conflicting namespace",
0000000000000000000000000000000000000000;;				namespace: "foo",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.LocalSubjectAccessReview{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: "foo"},
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:      "list",
0000000000000000000000000000000000000000;;							Group:     api.GroupName,
0000000000000000000000000000000000000000;;							Version:   "v1",
0000000000000000000000000000000000000000;;							Resource:  "pods",
0000000000000000000000000000000000000000;;							Namespace: "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						User: "dave",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "must match metadata.namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "missing namespace",
0000000000000000000000000000000000000000;;				namespace: "foo",
0000000000000000000000000000000000000000;;				sar: &authorizationapi.LocalSubjectAccessReview{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: "foo"},
0000000000000000000000000000000000000000;;					Spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;						ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;							Verb:     "list",
0000000000000000000000000000000000000000;;							Group:    api.GroupName,
0000000000000000000000000000000000000000;;							Version:  "v1",
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						User: "dave",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "must match metadata.namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			response, err := clientset.Authorization().LocalSubjectAccessReviews(test.namespace).Create(test.sar)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil && len(test.expectedError) == 0:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case err != nil && strings.Contains(err.Error(), test.expectedError):
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case err != nil && len(test.expectedError) != 0:
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.expectedError, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if response.Status != test.expectedStatus {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %#v, got %#v", test.name, test.expectedStatus, response.Status)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
