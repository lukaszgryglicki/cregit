0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
55612b8cf1307bbb1db499b0619abc5db56e884e;test/integration/rbac_test.go[test/integration/rbac_test.go][test/integration/auth/rbac_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package auth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httputil"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/request/bearertoken"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/plugin/pkg/authenticator/token/anytoken"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/transport"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		rbacapi "k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/master"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/rbac/clusterrole"
0000000000000000000000000000000000000000;;		clusterrolestore "k8s.io/kubernetes/pkg/registry/rbac/clusterrole/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/rbac/clusterrolebinding"
0000000000000000000000000000000000000000;;		clusterrolebindingstore "k8s.io/kubernetes/pkg/registry/rbac/clusterrolebinding/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/rbac/role"
0000000000000000000000000000000000000000;;		rolestore "k8s.io/kubernetes/pkg/registry/rbac/role/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/rbac/rolebinding"
0000000000000000000000000000000000000000;;		rolebindingstore "k8s.io/kubernetes/pkg/registry/rbac/rolebinding/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/auth/authorizer/rbac"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeAuthenticator() authenticator.Request {
0000000000000000000000000000000000000000;;		return bearertoken.New(anytoken.AnyTokenAuthenticator{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func clientForUser(user string) *http.Client {
0000000000000000000000000000000000000000;;		return &http.Client{
0000000000000000000000000000000000000000;;			Transport: transport.NewBearerAuthRoundTripper(
0000000000000000000000000000000000000000;;				user,
0000000000000000000000000000000000000000;;				transport.DebugWrappers(http.DefaultTransport),
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func clientsetForUser(user string, config *restclient.Config) clientset.Interface {
0000000000000000000000000000000000000000;;		configCopy := *config
0000000000000000000000000000000000000000;;		configCopy.BearerToken = user
0000000000000000000000000000000000000000;;		return clientset.NewForConfigOrDie(&configCopy)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testRESTOptionsGetter struct {
0000000000000000000000000000000000000000;;		config *master.Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (getter *testRESTOptionsGetter) GetRESTOptions(resource schema.GroupResource) (generic.RESTOptions, error) {
0000000000000000000000000000000000000000;;		storageConfig, err := getter.config.StorageFactory.NewConfig(resource)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return generic.RESTOptions{}, fmt.Errorf("failed to get storage: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return generic.RESTOptions{StorageConfig: storageConfig, Decorator: generic.UndecoratedStorage, ResourcePrefix: resource.Resource}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRBACAuthorizer(config *master.Config) authorizer.Authorizer {
0000000000000000000000000000000000000000;;		optsGetter := &testRESTOptionsGetter{config}
0000000000000000000000000000000000000000;;		roleRegistry := role.AuthorizerAdapter{Registry: role.NewRegistry(rolestore.NewREST(optsGetter))}
0000000000000000000000000000000000000000;;		roleBindingRegistry := rolebinding.AuthorizerAdapter{Registry: rolebinding.NewRegistry(rolebindingstore.NewREST(optsGetter))}
0000000000000000000000000000000000000000;;		clusterRoleRegistry := clusterrole.AuthorizerAdapter{Registry: clusterrole.NewRegistry(clusterrolestore.NewREST(optsGetter))}
0000000000000000000000000000000000000000;;		clusterRoleBindingRegistry := clusterrolebinding.AuthorizerAdapter{Registry: clusterrolebinding.NewRegistry(clusterrolebindingstore.NewREST(optsGetter))}
0000000000000000000000000000000000000000;;		return rbac.New(roleRegistry, roleBindingRegistry, clusterRoleRegistry, clusterRoleBindingRegistry)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// bootstrapRoles are a set of RBAC roles which will be populated before the test.
0000000000000000000000000000000000000000;;	type bootstrapRoles struct {
0000000000000000000000000000000000000000;;		roles               []rbacapi.Role
0000000000000000000000000000000000000000;;		roleBindings        []rbacapi.RoleBinding
0000000000000000000000000000000000000000;;		clusterRoles        []rbacapi.ClusterRole
0000000000000000000000000000000000000000;;		clusterRoleBindings []rbacapi.ClusterRoleBinding
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// bootstrap uses the provided client to create the bootstrap roles and role bindings.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// client should be authenticated as the RBAC super user.
0000000000000000000000000000000000000000;;	func (b bootstrapRoles) bootstrap(client clientset.Interface) error {
0000000000000000000000000000000000000000;;		for _, r := range b.clusterRoles {
0000000000000000000000000000000000000000;;			_, err := client.Rbac().ClusterRoles().Create(&r)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to make request: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range b.roles {
0000000000000000000000000000000000000000;;			_, err := client.Rbac().Roles(r.Namespace).Create(&r)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to make request: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range b.clusterRoleBindings {
0000000000000000000000000000000000000000;;			_, err := client.Rbac().ClusterRoleBindings().Create(&r)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to make request: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, r := range b.roleBindings {
0000000000000000000000000000000000000000;;			_, err := client.Rbac().RoleBindings(r.Namespace).Create(&r)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("failed to make request: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// request is a test case which can.
0000000000000000000000000000000000000000;;	type request struct {
0000000000000000000000000000000000000000;;		// The username attempting to send the request.
0000000000000000000000000000000000000000;;		user string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resource metadata
0000000000000000000000000000000000000000;;		verb      string
0000000000000000000000000000000000000000;;		apiGroup  string
0000000000000000000000000000000000000000;;		resource  string
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;		name      string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The actual resource.
0000000000000000000000000000000000000000;;		body string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The expected return status of this request.
0000000000000000000000000000000000000000;;		expectedStatus int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r request) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s %s %s", r.user, r.verb, r.resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type statusCode int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s statusCode) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d %s", int(s), http.StatusText(int(s)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Declare a set of raw objects to use.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		writeJobsRoleBinding = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "rbac.authorization.k8s.io/v1beta1",
0000000000000000000000000000000000000000;;	  "kind": "RoleBinding",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;	    "name": "pi"%s
0000000000000000000000000000000000000000;;	  },
0000000000000000000000000000000000000000;;	  "roleRef": {
0000000000000000000000000000000000000000;;	    "apiGroup": "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;	    "kind": "ClusterRole",
0000000000000000000000000000000000000000;;	    "name": "write-jobs"
0000000000000000000000000000000000000000;;	  },
0000000000000000000000000000000000000000;;	  "subjects": [{
0000000000000000000000000000000000000000;;	    "apiGroup": "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;	    "kind": "User",
0000000000000000000000000000000000000000;;	    "name": "admin"
0000000000000000000000000000000000000000;;	  }]
0000000000000000000000000000000000000000;;	}`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aJob = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "batch/v1",
0000000000000000000000000000000000000000;;	  "kind": "Job",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;	    "name": "pi"%s
0000000000000000000000000000000000000000;;	  },
0000000000000000000000000000000000000000;;	  "spec": {
0000000000000000000000000000000000000000;;	    "template": {
0000000000000000000000000000000000000000;;	      "metadata": {
0000000000000000000000000000000000000000;;	        "name": "a",
0000000000000000000000000000000000000000;;	        "labels": {
0000000000000000000000000000000000000000;;	          "name": "pijob"
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	      },
0000000000000000000000000000000000000000;;	      "spec": {
0000000000000000000000000000000000000000;;	        "containers": [
0000000000000000000000000000000000000000;;	          {
0000000000000000000000000000000000000000;;	            "name": "pi",
0000000000000000000000000000000000000000;;	            "image": "perl",
0000000000000000000000000000000000000000;;	            "command": [
0000000000000000000000000000000000000000;;	              "perl",
0000000000000000000000000000000000000000;;	              "-Mbignum=bpi",
0000000000000000000000000000000000000000;;	              "-wle",
0000000000000000000000000000000000000000;;	              "print bpi(2000)"
0000000000000000000000000000000000000000;;	            ]
0000000000000000000000000000000000000000;;	          }
0000000000000000000000000000000000000000;;	        ],
0000000000000000000000000000000000000000;;	        "restartPolicy": "Never"
0000000000000000000000000000000000000000;;	      }
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;		podNamespace = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "` + api.Registry.GroupOrDie(api.GroupName).GroupVersion.String() + `",
0000000000000000000000000000000000000000;;	  "kind": "Namespace",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;		"name": "pod-namespace"%s
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;		jobNamespace = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "` + api.Registry.GroupOrDie(api.GroupName).GroupVersion.String() + `",
0000000000000000000000000000000000000000;;	  "kind": "Namespace",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;		"name": "job-namespace"%s
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;		forbiddenNamespace = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "` + api.Registry.GroupOrDie(api.GroupName).GroupVersion.String() + `",
0000000000000000000000000000000000000000;;	  "kind": "Namespace",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;		"name": "forbidden-namespace"%s
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Declare some PolicyRules beforehand.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ruleAllowAll  = rbacapi.NewRule("*").Groups("*").Resources("*").RuleOrDie()
0000000000000000000000000000000000000000;;		ruleReadPods  = rbacapi.NewRule("list", "get", "watch").Groups("").Resources("pods").RuleOrDie()
0000000000000000000000000000000000000000;;		ruleWriteJobs = rbacapi.NewRule("*").Groups("batch").Resources("*").RuleOrDie()
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRBAC(t *testing.T) {
0000000000000000000000000000000000000000;;		superUser := "admin/system:masters"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			bootstrapRoles bootstrapRoles
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			requests []request
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				bootstrapRoles: bootstrapRoles{
0000000000000000000000000000000000000000;;					clusterRoles: []rbacapi.ClusterRole{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "allow-all"},
0000000000000000000000000000000000000000;;							Rules:      []rbacapi.PolicyRule{ruleAllowAll},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "read-pods"},
0000000000000000000000000000000000000000;;							Rules:      []rbacapi.PolicyRule{ruleReadPods},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					clusterRoleBindings: []rbacapi.ClusterRoleBinding{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "read-pods"},
0000000000000000000000000000000000000000;;							Subjects: []rbacapi.Subject{
0000000000000000000000000000000000000000;;								{Kind: "User", Name: "pod-reader"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							RoleRef: rbacapi.RoleRef{Kind: "ClusterRole", Name: "read-pods"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				requests: []request{
0000000000000000000000000000000000000000;;					// Create the namespace used later in the test
0000000000000000000000000000000000000000;;					{superUser, "POST", "", "namespaces", "", "", podNamespace, http.StatusCreated},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					{superUser, "GET", "", "pods", "", "", "", http.StatusOK},
0000000000000000000000000000000000000000;;					{superUser, "GET", "", "pods", "pod-namespace", "a", "", http.StatusNotFound},
0000000000000000000000000000000000000000;;					{superUser, "POST", "", "pods", "pod-namespace", "", aPod, http.StatusCreated},
0000000000000000000000000000000000000000;;					{superUser, "GET", "", "pods", "pod-namespace", "a", "", http.StatusOK},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					{"bob", "GET", "", "pods", "", "", "", http.StatusForbidden},
0000000000000000000000000000000000000000;;					{"bob", "GET", "", "pods", "pod-namespace", "a", "", http.StatusForbidden},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					{"pod-reader", "GET", "", "pods", "", "", "", http.StatusOK},
0000000000000000000000000000000000000000;;					{"pod-reader", "POST", "", "pods", "pod-namespace", "", aPod, http.StatusForbidden},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				bootstrapRoles: bootstrapRoles{
0000000000000000000000000000000000000000;;					clusterRoles: []rbacapi.ClusterRole{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "write-jobs"},
0000000000000000000000000000000000000000;;							Rules:      []rbacapi.PolicyRule{ruleWriteJobs},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "create-rolebindings"},
0000000000000000000000000000000000000000;;							Rules: []rbacapi.PolicyRule{
0000000000000000000000000000000000000000;;								rbacapi.NewRule("create").Groups("rbac.authorization.k8s.io").Resources("rolebindings").RuleOrDie(),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "bind-any-clusterrole"},
0000000000000000000000000000000000000000;;							Rules: []rbacapi.PolicyRule{
0000000000000000000000000000000000000000;;								rbacapi.NewRule("bind").Groups("rbac.authorization.k8s.io").Resources("clusterroles").RuleOrDie(),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					clusterRoleBindings: []rbacapi.ClusterRoleBinding{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "write-jobs"},
0000000000000000000000000000000000000000;;							Subjects:   []rbacapi.Subject{{Kind: "User", Name: "job-writer"}},
0000000000000000000000000000000000000000;;							RoleRef:    rbacapi.RoleRef{Kind: "ClusterRole", Name: "write-jobs"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "create-rolebindings"},
0000000000000000000000000000000000000000;;							Subjects: []rbacapi.Subject{
0000000000000000000000000000000000000000;;								{Kind: "User", Name: "job-writer"},
0000000000000000000000000000000000000000;;								{Kind: "User", Name: "nonescalating-rolebinding-writer"},
0000000000000000000000000000000000000000;;								{Kind: "User", Name: "any-rolebinding-writer"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							RoleRef: rbacapi.RoleRef{Kind: "ClusterRole", Name: "create-rolebindings"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "bind-any-clusterrole"},
0000000000000000000000000000000000000000;;							Subjects:   []rbacapi.Subject{{Kind: "User", Name: "any-rolebinding-writer"}},
0000000000000000000000000000000000000000;;							RoleRef:    rbacapi.RoleRef{Kind: "ClusterRole", Name: "bind-any-clusterrole"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					roleBindings: []rbacapi.RoleBinding{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "write-jobs", Namespace: "job-namespace"},
0000000000000000000000000000000000000000;;							Subjects:   []rbacapi.Subject{{Kind: "User", Name: "job-writer-namespace"}},
0000000000000000000000000000000000000000;;							RoleRef:    rbacapi.RoleRef{Kind: "ClusterRole", Name: "write-jobs"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "create-rolebindings", Namespace: "job-namespace"},
0000000000000000000000000000000000000000;;							Subjects: []rbacapi.Subject{
0000000000000000000000000000000000000000;;								{Kind: "User", Name: "job-writer-namespace"},
0000000000000000000000000000000000000000;;								{Kind: "User", Name: "any-rolebinding-writer-namespace"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							RoleRef: rbacapi.RoleRef{Kind: "ClusterRole", Name: "create-rolebindings"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "bind-any-clusterrole", Namespace: "job-namespace"},
0000000000000000000000000000000000000000;;							Subjects:   []rbacapi.Subject{{Kind: "User", Name: "any-rolebinding-writer-namespace"}},
0000000000000000000000000000000000000000;;							RoleRef:    rbacapi.RoleRef{Kind: "ClusterRole", Name: "bind-any-clusterrole"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				requests: []request{
0000000000000000000000000000000000000000;;					// Create the namespace used later in the test
0000000000000000000000000000000000000000;;					{superUser, "POST", "", "namespaces", "", "", jobNamespace, http.StatusCreated},
0000000000000000000000000000000000000000;;					{superUser, "POST", "", "namespaces", "", "", forbiddenNamespace, http.StatusCreated},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					{"user-with-no-permissions", "POST", "batch", "jobs", "job-namespace", "", aJob, http.StatusForbidden},
0000000000000000000000000000000000000000;;					{"user-with-no-permissions", "GET", "batch", "jobs", "job-namespace", "pi", "", http.StatusForbidden},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// job-writer-namespace cannot write to the "forbidden-namespace"
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "GET", "batch", "jobs", "forbidden-namespace", "", "", http.StatusForbidden},
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "GET", "batch", "jobs", "forbidden-namespace", "pi", "", http.StatusForbidden},
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "POST", "batch", "jobs", "forbidden-namespace", "", aJob, http.StatusForbidden},
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "GET", "batch", "jobs", "forbidden-namespace", "pi", "", http.StatusForbidden},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// job-writer can write to any namespace
0000000000000000000000000000000000000000;;					{"job-writer", "GET", "batch", "jobs", "forbidden-namespace", "", "", http.StatusOK},
0000000000000000000000000000000000000000;;					{"job-writer", "GET", "batch", "jobs", "forbidden-namespace", "pi", "", http.StatusNotFound},
0000000000000000000000000000000000000000;;					{"job-writer", "POST", "batch", "jobs", "forbidden-namespace", "", aJob, http.StatusCreated},
0000000000000000000000000000000000000000;;					{"job-writer", "GET", "batch", "jobs", "forbidden-namespace", "pi", "", http.StatusOK},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "GET", "batch", "jobs", "job-namespace", "", "", http.StatusOK},
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "GET", "batch", "jobs", "job-namespace", "pi", "", http.StatusNotFound},
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "POST", "batch", "jobs", "job-namespace", "", aJob, http.StatusCreated},
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "GET", "batch", "jobs", "job-namespace", "pi", "", http.StatusOK},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// cannot bind role anywhere
0000000000000000000000000000000000000000;;					{"user-with-no-permissions", "POST", "rbac.authorization.k8s.io", "rolebindings", "job-namespace", "", writeJobsRoleBinding, http.StatusForbidden},
0000000000000000000000000000000000000000;;					// can only bind role in namespace where they have explicit bind permission
0000000000000000000000000000000000000000;;					{"any-rolebinding-writer-namespace", "POST", "rbac.authorization.k8s.io", "rolebindings", "forbidden-namespace", "", writeJobsRoleBinding, http.StatusForbidden},
0000000000000000000000000000000000000000;;					// can only bind role in namespace where they have covering permissions
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "POST", "rbac.authorization.k8s.io", "rolebindings", "forbidden-namespace", "", writeJobsRoleBinding, http.StatusForbidden},
0000000000000000000000000000000000000000;;					{"job-writer-namespace", "POST", "rbac.authorization.k8s.io", "rolebindings", "job-namespace", "", writeJobsRoleBinding, http.StatusCreated},
0000000000000000000000000000000000000000;;					{superUser, "DELETE", "rbac.authorization.k8s.io", "rolebindings", "job-namespace", "pi", "", http.StatusOK},
0000000000000000000000000000000000000000;;					// can bind role in any namespace where they have covering permissions
0000000000000000000000000000000000000000;;					{"job-writer", "POST", "rbac.authorization.k8s.io", "rolebindings", "forbidden-namespace", "", writeJobsRoleBinding, http.StatusCreated},
0000000000000000000000000000000000000000;;					{superUser, "DELETE", "rbac.authorization.k8s.io", "rolebindings", "forbidden-namespace", "pi", "", http.StatusOK},
0000000000000000000000000000000000000000;;					// cannot bind role because they don't have covering permissions
0000000000000000000000000000000000000000;;					{"nonescalating-rolebinding-writer", "POST", "rbac.authorization.k8s.io", "rolebindings", "job-namespace", "", writeJobsRoleBinding, http.StatusForbidden},
0000000000000000000000000000000000000000;;					// can bind role because they have explicit bind permission
0000000000000000000000000000000000000000;;					{"any-rolebinding-writer", "POST", "rbac.authorization.k8s.io", "rolebindings", "job-namespace", "", writeJobsRoleBinding, http.StatusCreated},
0000000000000000000000000000000000000000;;					{superUser, "DELETE", "rbac.authorization.k8s.io", "rolebindings", "job-namespace", "pi", "", http.StatusOK},
0000000000000000000000000000000000000000;;					{"any-rolebinding-writer-namespace", "POST", "rbac.authorization.k8s.io", "rolebindings", "job-namespace", "", writeJobsRoleBinding, http.StatusCreated},
0000000000000000000000000000000000000000;;					{superUser, "DELETE", "rbac.authorization.k8s.io", "rolebindings", "job-namespace", "pi", "", http.StatusOK},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range tests {
0000000000000000000000000000000000000000;;			// Create an API Server.
0000000000000000000000000000000000000000;;			masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;			masterConfig.GenericConfig.Authorizer = newRBACAuthorizer(masterConfig)
0000000000000000000000000000000000000000;;			masterConfig.GenericConfig.Authenticator = newFakeAuthenticator()
0000000000000000000000000000000000000000;;			_, s, closeFn := framework.RunAMaster(masterConfig)
0000000000000000000000000000000000000000;;			defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			clientConfig := &restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{NegotiatedSerializer: api.Codecs}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Bootstrap the API Server with the test case's initial roles.
0000000000000000000000000000000000000000;;			if err := tc.bootstrapRoles.bootstrap(clientsetForUser(superUser, clientConfig)); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("case %d: failed to apply initial roles: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			previousResourceVersion := make(map[string]float64)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for j, r := range tc.requests {
0000000000000000000000000000000000000000;;				testGroup, ok := testapi.Groups[r.apiGroup]
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					t.Errorf("case %d %d: unknown api group %q, %s", i, j, r.apiGroup, r)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				path := testGroup.ResourcePath(r.resource, r.namespace, r.name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				var body io.Reader
0000000000000000000000000000000000000000;;				if r.body != "" {
0000000000000000000000000000000000000000;;					sub := ""
0000000000000000000000000000000000000000;;					if r.verb == "PUT" {
0000000000000000000000000000000000000000;;						// For update operations, insert previous resource version
0000000000000000000000000000000000000000;;						if resVersion := previousResourceVersion[getPreviousResourceVersionKey(path, "")]; resVersion != 0 {
0000000000000000000000000000000000000000;;							sub += fmt.Sprintf(",\"resourceVersion\": \"%v\"", resVersion)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					body = strings.NewReader(fmt.Sprintf(r.body, sub))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				req, err := http.NewRequest(r.verb, s.URL+path, body)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("failed to create request: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				func() {
0000000000000000000000000000000000000000;;					reqDump, err := httputil.DumpRequest(req, true)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Fatalf("failed to dump request: %v", err)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					resp, err := clientForUser(r.user).Do(req)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("case %d, req %d: failed to make request: %v", i, j, err)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					respDump, err := httputil.DumpResponse(resp, true)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Fatalf("failed to dump response: %v", err)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if resp.StatusCode != r.expectedStatus {
0000000000000000000000000000000000000000;;						// When debugging is on, dump the entire request and response. Very helpful for
0000000000000000000000000000000000000000;;						// debugging malformed test cases.
0000000000000000000000000000000000000000;;						//
0000000000000000000000000000000000000000;;						// To turn on debugging, use the '-args' flag.
0000000000000000000000000000000000000000;;						//
0000000000000000000000000000000000000000;;						//    go test -v -tags integration -run RBAC -args -v 10
0000000000000000000000000000000000000000;;						//
0000000000000000000000000000000000000000;;						glog.V(8).Infof("case %d, req %d: %s\n%s\n", i, j, reqDump, respDump)
0000000000000000000000000000000000000000;;						t.Errorf("case %d, req %d: %s expected %q got %q", i, j, r, statusCode(r.expectedStatus), statusCode(resp.StatusCode))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					b, _ := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if r.verb == "POST" && (resp.StatusCode/100) == 2 {
0000000000000000000000000000000000000000;;						// For successful create operations, extract resourceVersion
0000000000000000000000000000000000000000;;						id, currentResourceVersion, err := parseResourceVersion(b)
0000000000000000000000000000000000000000;;						if err == nil {
0000000000000000000000000000000000000000;;							key := getPreviousResourceVersionKey(path, id)
0000000000000000000000000000000000000000;;							previousResourceVersion[key] = currentResourceVersion
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							t.Logf("error in trying to extract resource version: %s", err)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBootstrapping(t *testing.T) {
0000000000000000000000000000000000000000;;		superUser := "admin/system:masters"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		masterConfig := framework.NewIntegrationTestMasterConfig()
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authorizer = newRBACAuthorizer(masterConfig)
0000000000000000000000000000000000000000;;		masterConfig.GenericConfig.Authenticator = newFakeAuthenticator()
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(masterConfig)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset := clientset.NewForConfigOrDie(&restclient.Config{BearerToken: superUser, Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watcher, err := clientset.Rbac().ClusterRoles().Watch(metav1.ListOptions{ResourceVersion: "0"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = watch.Until(30*time.Second, watcher, func(event watch.Event) (bool, error) {
0000000000000000000000000000000000000000;;			if event.Type != watch.Added {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterRoles, err := clientset.Rbac().ClusterRoles().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(clusterRoles.Items) == 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("missing cluster roles")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, clusterRole := range clusterRoles.Items {
0000000000000000000000000000000000000000;;			if clusterRole.Name == "cluster-admin" {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Errorf("missing cluster-admin: %v", clusterRoles)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		healthBytes, err := clientset.Discovery().RESTClient().Get().AbsPath("/healthz/poststarthooks/rbac/bootstrap-roles").DoRaw()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Errorf("expected %v, got %v", "asdf", string(healthBytes))
0000000000000000000000000000000000000000;;	}
