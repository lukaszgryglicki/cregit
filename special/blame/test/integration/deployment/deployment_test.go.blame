0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
dce10711c9faf4e720c7430f04ef29f7de5e7f04;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package deployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		deploymentutil "k8s.io/kubernetes/pkg/controller/deployment/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		s, closeFn, rm, dc, informers, c := dcSetup(t)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;		name := "test-new-deployment"
0000000000000000000000000000000000000000;;		ns := framework.CreateTestingNamespace(name, s, t)
0000000000000000000000000000000000000000;;		defer framework.DeleteTestingNamespace(ns, s, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		replicas := int32(20)
0000000000000000000000000000000000000000;;		tester := &deploymentTester{t: t, c: c, deployment: newDeployment(name, ns.Name, replicas)}
0000000000000000000000000000000000000000;;		tester.deployment.Spec.MinReadySeconds = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tester.deployment.Annotations = map[string]string{"test": "should-copy-to-replica-set", v1.LastAppliedConfigAnnotation: "should-not-copy-to-replica-set"}
0000000000000000000000000000000000000000;;		deploy, err := c.Extensions().Deployments(ns.Name).Create(tester.deployment)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("failed to create deployment %s: %v", deploy.Name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start informer and controllers
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;		informers.Start(stopCh)
0000000000000000000000000000000000000000;;		go rm.Run(5, stopCh)
0000000000000000000000000000000000000000;;		go dc.Run(5, stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Wait for the Deployment to be updated to revision 1
0000000000000000000000000000000000000000;;		err = tester.waitForDeploymentRevisionAndImage("1", fakeImage)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("failed to wait for Deployment revision %s: %v", deploy.Name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure the Deployment status becomes valid while manually marking Deployment pods as ready at the same time
0000000000000000000000000000000000000000;;		tester.waitForDeploymentStatusValidAndMarkPodsReady()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check new RS annotations
0000000000000000000000000000000000000000;;		newRS, err := deploymentutil.GetNewReplicaSet(deploy, c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("failed to get new ReplicaSet of Deployment %s: %v", deploy.Name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if newRS.Annotations["test"] != "should-copy-to-replica-set" {
0000000000000000000000000000000000000000;;			t.Errorf("expected new ReplicaSet annotations copied from Deployment %s, got: %v", deploy.Name, newRS.Annotations)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if newRS.Annotations[v1.LastAppliedConfigAnnotation] != "" {
0000000000000000000000000000000000000000;;			t.Errorf("expected new ReplicaSet last-applied annotation not copied from Deployment %s", deploy.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
