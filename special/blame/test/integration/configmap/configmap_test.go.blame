0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
049695285ebceffbf472bce5bb7d1090d1f33e3c;test/integration/configmap_test.go[test/integration/configmap_test.go][test/integration/configmap/configmap_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package configmap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file tests use of the configMap API resource.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestConfigMap tests apiserver-side behavior of creation of ConfigMaps and pods that consume them.
0000000000000000000000000000000000000000;;	func TestConfigMap(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(v1.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := framework.CreateTestingNamespace("config-map", s, t)
0000000000000000000000000000000000000000;;		defer framework.DeleteTestingNamespace(ns, s, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DoTestConfigMap(t, client, ns)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DoTestConfigMap(t *testing.T, client clientset.Interface, ns *v1.Namespace) {
0000000000000000000000000000000000000000;;		cfg := v1.ConfigMap{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "configmap",
0000000000000000000000000000000000000000;;				Namespace: ns.Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string]string{
0000000000000000000000000000000000000000;;				"data-1": "value-1",
0000000000000000000000000000000000000000;;				"data-2": "value-2",
0000000000000000000000000000000000000000;;				"data-3": "value-3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := client.Core().ConfigMaps(cfg.Namespace).Create(&cfg); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to create test configMap: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer deleteConfigMapOrErrorf(t, client, cfg.Namespace, cfg.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "XXX",
0000000000000000000000000000000000000000;;				Namespace: ns.Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "fake-name",
0000000000000000000000000000000000000000;;						Image: "fakeimage",
0000000000000000000000000000000000000000;;						Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "CONFIG_DATA_1",
0000000000000000000000000000000000000000;;								ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;									ConfigMapKeyRef: &v1.ConfigMapKeySelector{
0000000000000000000000000000000000000000;;										LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;											Name: "configmap",
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Key: "data-1",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "CONFIG_DATA_2",
0000000000000000000000000000000000000000;;								ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;									ConfigMapKeyRef: &v1.ConfigMapKeySelector{
0000000000000000000000000000000000000000;;										LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;											Name: "configmap",
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Key: "data-2",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							}, {
0000000000000000000000000000000000000000;;								Name: "CONFIG_DATA_3",
0000000000000000000000000000000000000000;;								ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;									ConfigMapKeyRef: &v1.ConfigMapKeySelector{
0000000000000000000000000000000000000000;;										LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;											Name: "configmap",
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Key: "data-3",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Name = "uses-configmap"
0000000000000000000000000000000000000000;;		if _, err := client.Core().Pods(ns.Name).Create(pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create pod: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer integration.DeletePodOrErrorf(t, client, ns.Name, pod.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func deleteConfigMapOrErrorf(t *testing.T, c clientset.Interface, ns, name string) {
0000000000000000000000000000000000000000;;		if err := c.Core().ConfigMaps(ns).Delete(name, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to delete ConfigMap %v: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
