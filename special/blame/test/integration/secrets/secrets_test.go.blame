0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
baab4d624322ecf877cdbf685b193d480353a346;test/integration/secret_test.go[test/integration/secret_test.go][test/integration/secrets/secrets_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package secrets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file tests use of the secrets API resource.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func deleteSecretOrErrorf(t *testing.T, c clientset.Interface, ns, name string) {
0000000000000000000000000000000000000000;;		if err := c.Core().Secrets(ns).Delete(name, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to delete secret %v: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestSecrets tests apiserver-side behavior of creation of secret objects and their use by pods.
0000000000000000000000000000000000000000;;	func TestSecrets(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(v1.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := framework.CreateTestingNamespace("secret", s, t)
0000000000000000000000000000000000000000;;		defer framework.DeleteTestingNamespace(ns, s, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DoTestSecrets(t, client, ns)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DoTestSecrets test secrets for one api version.
0000000000000000000000000000000000000000;;	func DoTestSecrets(t *testing.T, client clientset.Interface, ns *v1.Namespace) {
0000000000000000000000000000000000000000;;		// Make a secret object.
0000000000000000000000000000000000000000;;		s := v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "secret",
0000000000000000000000000000000000000000;;				Namespace: ns.Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				"data": []byte("value1\n"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := client.Core().Secrets(s.Namespace).Create(&s); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unable to create test secret: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer deleteSecretOrErrorf(t, client, s.Namespace, s.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Template for pods that use a secret.
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "XXX",
0000000000000000000000000000000000000000;;				Namespace: ns.Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Volumes: []v1.Volume{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "secvol",
0000000000000000000000000000000000000000;;						VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretVolumeSource{
0000000000000000000000000000000000000000;;								SecretName: "secret",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "fake-name",
0000000000000000000000000000000000000000;;						Image: "fakeimage",
0000000000000000000000000000000000000000;;						VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:      "secvol",
0000000000000000000000000000000000000000;;								MountPath: "/fake/path",
0000000000000000000000000000000000000000;;								ReadOnly:  true,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a pod to consume secret.
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Name = "uses-secret"
0000000000000000000000000000000000000000;;		if _, err := client.Core().Pods(ns.Name).Create(pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create pod: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer integration.DeletePodOrErrorf(t, client, ns.Name, pod.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a pod that consumes non-existent secret.
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Name = "uses-non-existent-secret"
0000000000000000000000000000000000000000;;		if _, err := client.Core().Pods(ns.Name).Create(pod); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create pod: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer integration.DeletePodOrErrorf(t, client, ns.Name, pod.Name)
0000000000000000000000000000000000000000;;		// This pod may fail to run, but we don't currently prevent this, and this
0000000000000000000000000000000000000000;;		// test can't check whether the kubelet actually pulls the secret.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verifying contents of the volumes is out of scope for a
0000000000000000000000000000000000000000;;		// apiserver<->kubelet integration test.  It is covered by an e2e test.
0000000000000000000000000000000000000000;;	}
