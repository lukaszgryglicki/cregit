0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6cef88f39ae420c5985043f8d38512beda777c25;federation/cmd/federated-apiserver/app/server_test.go[federation/cmd/federated-apiserver/app/server_test.go][test/integration/federation/api_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package federation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		autoscaling_v1 "k8s.io/api/autoscaling/v1"
0000000000000000000000000000000000000000;;		batch_v1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		ext_v1b1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		fed_v1b1 "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/federation/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List of group versions that are enabled by default.
0000000000000000000000000000000000000000;;	var enabledGroupVersions = []schema.GroupVersion{
0000000000000000000000000000000000000000;;		fed_v1b1.SchemeGroupVersion,
0000000000000000000000000000000000000000;;		ext_v1b1.SchemeGroupVersion,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List of group versions that are disabled by default.
0000000000000000000000000000000000000000;;	var disabledGroupVersions = []schema.GroupVersion{
0000000000000000000000000000000000000000;;		batch_v1.SchemeGroupVersion,
0000000000000000000000000000000000000000;;		autoscaling_v1.SchemeGroupVersion,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type apiTestFunc func(t *testing.T, host string, expectedGroupVersions []schema.GroupVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testFederationAPI(t *testing.T, runtimeConfig string, expectedGroupVersions []schema.GroupVersion) {
0000000000000000000000000000000000000000;;		f := &framework.FederationAPIFixture{}
0000000000000000000000000000000000000000;;		if runtimeConfig == "" {
0000000000000000000000000000000000000000;;			f.SetUp(t)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			runOptions := framework.GetRunOptions()
0000000000000000000000000000000000000000;;			runOptions.APIEnablement.RuntimeConfig.Set(runtimeConfig)
0000000000000000000000000000000000000000;;			f.SetUpWithRunOptions(t, runOptions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.TearDown(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := map[string]apiTestFunc{
0000000000000000000000000000000000000000;;			"swaggerSpec":     testSwaggerSpec,
0000000000000000000000000000000000000000;;			"support":         testSupport,
0000000000000000000000000000000000000000;;			"apiGroupList":    testAPIGroupList,
0000000000000000000000000000000000000000;;			"apiGroup":        testAPIGroup,
0000000000000000000000000000000000000000;;			"apiResourceList": testAPIResourceList,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testFunc := range testCases {
0000000000000000000000000000000000000000;;			t.Run(testName, func(t *testing.T) {
0000000000000000000000000000000000000000;;				testFunc(t, f.Host, expectedGroupVersions)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verifies that only default APIs are enabled when no runtime config is set.
0000000000000000000000000000000000000000;;	func TestDefaultRun(t *testing.T) {
0000000000000000000000000000000000000000;;		testFederationAPI(t, "", enabledGroupVersions)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verifies that all APIs are enabled when runtime config is set to all.
0000000000000000000000000000000000000000;;	func TestRunWithRuntimeConfigAll(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedGroupVersions := enabledGroupVersions
0000000000000000000000000000000000000000;;		expectedGroupVersions = append(enabledGroupVersions, disabledGroupVersions...)
0000000000000000000000000000000000000000;;		testFederationAPI(t, "api/all=true", expectedGroupVersions)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readResponse(serverURL string) ([]byte, error) {
0000000000000000000000000000000000000000;;		response, err := http.Get(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Error in fetching %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer response.Body.Close()
0000000000000000000000000000000000000000;;		if response.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unexpected status: %d for URL: %s, expected status: %d", response.StatusCode, serverURL, http.StatusOK)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		contents, err := ioutil.ReadAll(response.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Error reading response from %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return contents, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testSwaggerSpec(t *testing.T, host string, expectedGroupVersions []schema.GroupVersion) {
0000000000000000000000000000000000000000;;		serverURL := host + "/swaggerapi"
0000000000000000000000000000000000000000;;		_, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testSupport(t *testing.T, host string, expectedGroupVersions []schema.GroupVersion) {
0000000000000000000000000000000000000000;;		serverURL := host + "/version"
0000000000000000000000000000000000000000;;		_, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func findGroup(groups []metav1.APIGroup, groupName string) *metav1.APIGroup {
0000000000000000000000000000000000000000;;		for _, group := range groups {
0000000000000000000000000000000000000000;;			if group.Name == groupName {
0000000000000000000000000000000000000000;;				return &group
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testAPIGroupList(t *testing.T, host string, expectedGroupVersions []schema.GroupVersion) {
0000000000000000000000000000000000000000;;		groupVersionForDiscoveryMap := make(map[string]metav1.GroupVersionForDiscovery)
0000000000000000000000000000000000000000;;		for _, groupVersion := range expectedGroupVersions {
0000000000000000000000000000000000000000;;			groupVersionForDiscoveryMap[groupVersion.Group] = metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;				GroupVersion: groupVersion.String(),
0000000000000000000000000000000000000000;;				Version:      groupVersion.Version,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverURL := host + "/apis"
0000000000000000000000000000000000000000;;		contents, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var apiGroupList metav1.APIGroupList
0000000000000000000000000000000000000000;;		err = json.Unmarshal(contents, &apiGroupList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in unmarshalling response from server %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, len(apiGroupList.Groups), len(expectedGroupVersions), "expected: %v, actual: %v", expectedGroupVersions, apiGroupList.Groups)
0000000000000000000000000000000000000000;;		for _, groupVersion := range expectedGroupVersions {
0000000000000000000000000000000000000000;;			found := findGroup(apiGroupList.Groups, groupVersion.Group)
0000000000000000000000000000000000000000;;			assert.NotNil(t, found)
0000000000000000000000000000000000000000;;			assert.Equal(t, groupVersion.Group, found.Name)
0000000000000000000000000000000000000000;;			assert.Equal(t, 1, len(found.Versions))
0000000000000000000000000000000000000000;;			groupVersionForDiscovery := groupVersionForDiscoveryMap[groupVersion.Group]
0000000000000000000000000000000000000000;;			assert.Equal(t, groupVersionForDiscovery, found.Versions[0])
0000000000000000000000000000000000000000;;			assert.Equal(t, groupVersionForDiscovery, found.PreferredVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testAPIGroup(t *testing.T, host string, expectedGroupVersions []schema.GroupVersion) {
0000000000000000000000000000000000000000;;		for _, groupVersion := range expectedGroupVersions {
0000000000000000000000000000000000000000;;			serverURL := host + "/apis/" + groupVersion.Group
0000000000000000000000000000000000000000;;			contents, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var apiGroup metav1.APIGroup
0000000000000000000000000000000000000000;;			err = json.Unmarshal(contents, &apiGroup)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Error in unmarshalling response from server %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// empty APIVersion for extensions group
0000000000000000000000000000000000000000;;			if groupVersion.Group == "extensions" {
0000000000000000000000000000000000000000;;				assert.Equal(t, "", apiGroup.APIVersion)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.Equal(t, "v1", apiGroup.APIVersion)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			assert.Equal(t, apiGroup.Name, groupVersion.Group)
0000000000000000000000000000000000000000;;			assert.Equal(t, 1, len(apiGroup.Versions))
0000000000000000000000000000000000000000;;			assert.Equal(t, groupVersion.String(), apiGroup.Versions[0].GroupVersion)
0000000000000000000000000000000000000000;;			assert.Equal(t, groupVersion.Version, apiGroup.Versions[0].Version)
0000000000000000000000000000000000000000;;			assert.Equal(t, apiGroup.PreferredVersion, apiGroup.Versions[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCoreAPIGroup(t, host)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testCoreAPIGroup(t *testing.T, host string) {
0000000000000000000000000000000000000000;;		serverURL := host + "/api"
0000000000000000000000000000000000000000;;		contents, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var apiVersions metav1.APIVersions
0000000000000000000000000000000000000000;;		err = json.Unmarshal(contents, &apiVersions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in unmarshalling response from server %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, len(apiVersions.Versions))
0000000000000000000000000000000000000000;;		assert.Equal(t, "v1", apiVersions.Versions[0])
0000000000000000000000000000000000000000;;		assert.NotEmpty(t, apiVersions.ServerAddressByClientCIDRs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func findResource(resources []metav1.APIResource, resourceName string) *metav1.APIResource {
0000000000000000000000000000000000000000;;		for _, resource := range resources {
0000000000000000000000000000000000000000;;			if resource.Name == resourceName {
0000000000000000000000000000000000000000;;				return &resource
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testAPIResourceList(t *testing.T, host string, expectedGroupVersions []schema.GroupVersion) {
0000000000000000000000000000000000000000;;		testFederationResourceList(t, host)
0000000000000000000000000000000000000000;;		testCoreResourceList(t, host)
0000000000000000000000000000000000000000;;		testExtensionsResourceList(t, host)
0000000000000000000000000000000000000000;;		if contains(expectedGroupVersions, batch_v1.SchemeGroupVersion) {
0000000000000000000000000000000000000000;;			testBatchResourceList(t, host)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if contains(expectedGroupVersions, autoscaling_v1.SchemeGroupVersion) {
0000000000000000000000000000000000000000;;			testAutoscalingResourceList(t, host)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func contains(gvs []schema.GroupVersion, requiredGV schema.GroupVersion) bool {
0000000000000000000000000000000000000000;;		for _, gv := range gvs {
0000000000000000000000000000000000000000;;			if gv.String() == requiredGV.String() {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testFederationResourceList(t *testing.T, host string) {
0000000000000000000000000000000000000000;;		serverURL := host + "/apis/" + fed_v1b1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		contents, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var apiResourceList metav1.APIResourceList
0000000000000000000000000000000000000000;;		err = json.Unmarshal(contents, &apiResourceList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in unmarshalling response from server %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, "v1", apiResourceList.APIVersion)
0000000000000000000000000000000000000000;;		assert.Equal(t, fed_v1b1.SchemeGroupVersion.String(), apiResourceList.GroupVersion)
0000000000000000000000000000000000000000;;		// Assert that there are exactly 2 resources.
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, len(apiResourceList.APIResources))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		found := findResource(apiResourceList.APIResources, "clusters")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.False(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "clusters/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.False(t, found.Namespaced)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testCoreResourceList(t *testing.T, host string) {
0000000000000000000000000000000000000000;;		serverURL := host + "/api/" + v1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		contents, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var apiResourceList metav1.APIResourceList
0000000000000000000000000000000000000000;;		err = json.Unmarshal(contents, &apiResourceList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in unmarshalling response from server %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, "", apiResourceList.APIVersion)
0000000000000000000000000000000000000000;;		assert.Equal(t, v1.SchemeGroupVersion.String(), apiResourceList.GroupVersion)
0000000000000000000000000000000000000000;;		assert.Equal(t, 8, len(apiResourceList.APIResources), "ResourceList: %v", apiResourceList.APIResources)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify services.
0000000000000000000000000000000000000000;;		found := findResource(apiResourceList.APIResources, "services")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "services/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify namespaces.
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "namespaces")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.False(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "namespaces/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.False(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "namespaces/finalize")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.False(t, found.Namespaced)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify events.
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "events")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify secrets.
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "secrets")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify config maps.
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "configmaps")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testExtensionsResourceList(t *testing.T, host string) {
0000000000000000000000000000000000000000;;		serverURL := host + "/apis/" + ext_v1b1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		contents, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var apiResourceList metav1.APIResourceList
0000000000000000000000000000000000000000;;		err = json.Unmarshal(contents, &apiResourceList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in unmarshalling response from server %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// empty APIVersion for extensions group
0000000000000000000000000000000000000000;;		assert.Equal(t, "", apiResourceList.APIVersion)
0000000000000000000000000000000000000000;;		assert.Equal(t, ext_v1b1.SchemeGroupVersion.String(), apiResourceList.GroupVersion)
0000000000000000000000000000000000000000;;		// Assert that there are exactly 11 resources.
0000000000000000000000000000000000000000;;		assert.Equal(t, 11, len(apiResourceList.APIResources))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify replicasets.
0000000000000000000000000000000000000000;;		found := findResource(apiResourceList.APIResources, "replicasets")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "replicasets/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "replicasets/scale")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify ingress.
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "ingresses")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "ingresses/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify daemonsets.
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "daemonsets")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "daemonsets/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify deployments.
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "deployments")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "deployments/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "deployments/scale")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "deployments/rollback")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testBatchResourceList(t *testing.T, host string) {
0000000000000000000000000000000000000000;;		serverURL := host + "/apis/" + batch_v1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		contents, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var apiResourceList metav1.APIResourceList
0000000000000000000000000000000000000000;;		err = json.Unmarshal(contents, &apiResourceList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in unmarshalling response from server %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// empty APIVersion for extensions group
0000000000000000000000000000000000000000;;		assert.Equal(t, "v1", apiResourceList.APIVersion)
0000000000000000000000000000000000000000;;		assert.Equal(t, batch_v1.SchemeGroupVersion.String(), apiResourceList.GroupVersion)
0000000000000000000000000000000000000000;;		// Assert that there are exactly this number of resources.
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, len(apiResourceList.APIResources))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify jobs
0000000000000000000000000000000000000000;;		found := findResource(apiResourceList.APIResources, "jobs")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "jobs/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testAutoscalingResourceList(t *testing.T, host string) {
0000000000000000000000000000000000000000;;		serverURL := host + "/apis/" + autoscaling_v1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		contents, err := readResponse(serverURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var apiResourceList metav1.APIResourceList
0000000000000000000000000000000000000000;;		err = json.Unmarshal(contents, &apiResourceList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error in unmarshalling response from server %s: %v", serverURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// empty APIVersion for extensions group
0000000000000000000000000000000000000000;;		assert.Equal(t, "v1", apiResourceList.APIVersion)
0000000000000000000000000000000000000000;;		assert.Equal(t, autoscaling_v1.SchemeGroupVersion.String(), apiResourceList.GroupVersion)
0000000000000000000000000000000000000000;;		// Assert that there are exactly this number of resources.
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, len(apiResourceList.APIResources))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify hpa
0000000000000000000000000000000000000000;;		found := findResource(apiResourceList.APIResources, "horizontalpodautoscalers")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;		found = findResource(apiResourceList.APIResources, "horizontalpodautoscalers/status")
0000000000000000000000000000000000000000;;		assert.NotNil(t, found)
0000000000000000000000000000000000000000;;		assert.True(t, found.Namespaced)
0000000000000000000000000000000000000000;;	}
