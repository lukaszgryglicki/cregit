0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c507aab7c3e12a6fd7aae5913db7610c2cbc52a4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package federation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/pborman/uuid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pkgruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		federationapi "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/federatedtypes"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/federatedtypes/crudtester"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/federation/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestFederationCRUD validates create/read/update/delete operations for federated resource types.
0000000000000000000000000000000000000000;;	func TestFederationCRUD(t *testing.T) {
0000000000000000000000000000000000000000;;		fedFixture := framework.FederationFixture{DesiredClusterCount: 2}
0000000000000000000000000000000000000000;;		fedFixture.SetUp(t)
0000000000000000000000000000000000000000;;		defer fedFixture.TearDown(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		federatedTypes := federatedtypes.FederatedTypes()
0000000000000000000000000000000000000000;;		for kind, fedType := range federatedTypes {
0000000000000000000000000000000000000000;;			t.Run(kind, func(t *testing.T) {
0000000000000000000000000000000000000000;;				fixture, crudTester, obj, _ := initCRUDTest(t, &fedFixture, fedType.AdapterFactory, kind)
0000000000000000000000000000000000000000;;				defer fixture.TearDown(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				crudTester.CheckLifecycle(obj)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The following tests target a single type since the underlying logic is common across all types.
0000000000000000000000000000000000000000;;		kind := federatedtypes.SecretKind
0000000000000000000000000000000000000000;;		adapterFactory := federatedtypes.NewSecretAdapter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validate deletion handling where orphanDependents is true or nil
0000000000000000000000000000000000000000;;		orphanedDependents := true
0000000000000000000000000000000000000000;;		testCases := map[string]*bool{
0000000000000000000000000000000000000000;;			"Resource should not be deleted from underlying clusters when OrphanDependents is true": &orphanedDependents,
0000000000000000000000000000000000000000;;			"Resource should not be deleted from underlying clusters when OrphanDependents is nil":  nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, orphanDependents := range testCases {
0000000000000000000000000000000000000000;;			t.Run(testName, func(t *testing.T) {
0000000000000000000000000000000000000000;;				fixture, crudTester, obj, _ := initCRUDTest(t, &fedFixture, adapterFactory, kind)
0000000000000000000000000000000000000000;;				defer fixture.TearDown(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				updatedObj := crudTester.CheckCreate(obj)
0000000000000000000000000000000000000000;;				crudTester.CheckDelete(updatedObj, orphanDependents)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Run("Resource should be propagated to a newly added cluster", func(t *testing.T) {
0000000000000000000000000000000000000000;;			fixture, crudTester, obj, _ := initCRUDTest(t, &fedFixture, adapterFactory, kind)
0000000000000000000000000000000000000000;;			defer fixture.TearDown(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			updatedObj := crudTester.CheckCreate(obj)
0000000000000000000000000000000000000000;;			// Start a new cluster and validate that the resource is propagated to it.
0000000000000000000000000000000000000000;;			fedFixture.StartCluster(t)
0000000000000000000000000000000000000000;;			// Check propagation to the new cluster by providing the updated set of clients
0000000000000000000000000000000000000000;;			objectExpected := true
0000000000000000000000000000000000000000;;			crudTester.CheckPropagationForClients(updatedObj, fedFixture.ClusterClients, objectExpected)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Run("Resource should only be propagated to the cluster with a matching selector", func(t *testing.T) {
0000000000000000000000000000000000000000;;			fixture, crudTester, obj, adapter := initCRUDTest(t, &fedFixture, adapterFactory, kind)
0000000000000000000000000000000000000000;;			defer fixture.TearDown(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Set an annotation to specify that the object is isolated to cluster 1.
0000000000000000000000000000000000000000;;			federatedtypes.SetAnnotation(adapter, obj, federationapi.FederationClusterSelectorAnnotation, `[{"key": "cluster", "operator": "==", "values": ["1"]}]`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			updatedObj := crudTester.Create(obj)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check propagation to the first cluster
0000000000000000000000000000000000000000;;			objectExpected := true
0000000000000000000000000000000000000000;;			crudTester.CheckPropagationForClients(updatedObj, fedFixture.ClusterClients[0:1], objectExpected)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Verify the object is not sent to the second cluster
0000000000000000000000000000000000000000;;			objectExpected = false
0000000000000000000000000000000000000000;;			crudTester.CheckPropagationForClients(updatedObj, fedFixture.ClusterClients[1:2], objectExpected)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// initCRUDTest initializes common elements of a crud test
0000000000000000000000000000000000000000;;	func initCRUDTest(t *testing.T, fedFixture *framework.FederationFixture, adapterFactory federatedtypes.AdapterFactory, kind string) (
0000000000000000000000000000000000000000;;		*framework.ControllerFixture, *crudtester.FederatedTypeCRUDTester, pkgruntime.Object, federatedtypes.FederatedTypeAdapter) {
0000000000000000000000000000000000000000;;		config := fedFixture.APIFixture.NewConfig()
0000000000000000000000000000000000000000;;		fixture := framework.NewControllerFixture(t, kind, adapterFactory, config)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := fedFixture.APIFixture.NewClient(fmt.Sprintf("crud-test-%s", kind))
0000000000000000000000000000000000000000;;		adapter := adapterFactory(client, config)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		crudTester := framework.NewFederatedTypeCRUDTester(t, adapter, fedFixture.ClusterClients)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := adapter.NewTestObject(uuid.New())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fixture, crudTester, obj, adapter
0000000000000000000000000000000000000000;;	}
