0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
c12dbb5e4b7ef0033a3e146ceb09e8609e4e3d52;test/integration/metrics_test.go[test/integration/metrics_test.go][test/integration/metrics/metrics_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/integration/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/golang/protobuf/proto"
0000000000000000000000000000000000000000;;		prometheuspb "github.com/prometheus/client_model/go"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const scrapeRequestHeader = "application/vnd.google.protobuf;proto=io.prometheus.client.MetricFamily;encoding=compact-text"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scrapeMetrics(s *httptest.Server) ([]*prometheuspb.MetricFamily, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", s.URL+"/metrics", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Unable to create http request: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Ask the prometheus exporter for its text protocol buffer format, since it's
0000000000000000000000000000000000000000;;		// much easier to parse than its plain-text format. Don't use the serialized
0000000000000000000000000000000000000000;;		// proto representation since it uses a non-standard varint delimiter between
0000000000000000000000000000000000000000;;		// metric families.
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", scrapeRequestHeader)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := &http.Client{}
0000000000000000000000000000000000000000;;		resp, err := client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Unable to contact metrics endpoint of master: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		if resp.StatusCode != 200 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Non-200 response trying to scrape metrics from master: %v", resp)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Each line in the response body should contain all the data for a single metric.
0000000000000000000000000000000000000000;;		var metrics []*prometheuspb.MetricFamily
0000000000000000000000000000000000000000;;		scanner := bufio.NewScanner(resp.Body)
0000000000000000000000000000000000000000;;		for scanner.Scan() {
0000000000000000000000000000000000000000;;			var metric prometheuspb.MetricFamily
0000000000000000000000000000000000000000;;			if err := proto.UnmarshalText(scanner.Text(), &metric); err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("Failed to unmarshal line of metrics response: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Got metric %q", metric.GetName())
0000000000000000000000000000000000000000;;			metrics = append(metrics, &metric)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return metrics, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkForExpectedMetrics(t *testing.T, metrics []*prometheuspb.MetricFamily, expectedMetrics []string) {
0000000000000000000000000000000000000000;;		foundMetrics := make(map[string]bool)
0000000000000000000000000000000000000000;;		for _, metric := range metrics {
0000000000000000000000000000000000000000;;			foundMetrics[metric.GetName()] = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, expected := range expectedMetrics {
0000000000000000000000000000000000000000;;			if _, found := foundMetrics[expected]; !found {
0000000000000000000000000000000000000000;;				t.Errorf("Master metrics did not include expected metric %q", expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMasterProcessMetrics(t *testing.T) {
0000000000000000000000000000000000000000;;		if runtime.GOOS == "darwin" || runtime.GOOS == "windows" {
0000000000000000000000000000000000000000;;			t.Skipf("not supported on GOOS=%s", runtime.GOOS)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metrics, err := scrapeMetrics(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		checkForExpectedMetrics(t, metrics, []string{
0000000000000000000000000000000000000000;;			"process_start_time_seconds",
0000000000000000000000000000000000000000;;			"process_cpu_seconds_total",
0000000000000000000000000000000000000000;;			"process_open_fds",
0000000000000000000000000000000000000000;;			"process_resident_memory_bytes",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestApiserverMetrics(t *testing.T) {
0000000000000000000000000000000000000000;;		_, s, closeFn := framework.RunAMaster(nil)
0000000000000000000000000000000000000000;;		defer closeFn()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make a request to the apiserver to ensure there's at least one data point
0000000000000000000000000000000000000000;;		// for the metrics we're expecting -- otherwise, they won't be exported.
0000000000000000000000000000000000000000;;		client := clientset.NewForConfigOrDie(&restclient.Config{Host: s.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(v1.GroupName).GroupVersion}})
0000000000000000000000000000000000000000;;		if _, err := client.Core().Pods(metav1.NamespaceDefault).List(metav1.ListOptions{}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error getting pods: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metrics, err := scrapeMetrics(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		checkForExpectedMetrics(t, metrics, []string{
0000000000000000000000000000000000000000;;			"apiserver_request_count",
0000000000000000000000000000000000000000;;			"apiserver_request_latencies",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
