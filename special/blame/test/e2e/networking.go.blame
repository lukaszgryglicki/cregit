0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7378a0cb38d21d9c5b6304002e679b9e0c9d364d;test/e2e/network.go[test/e2e/network.go][test/e2e/networking.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/master/ports"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Networking", func() {
0000000000000000000000000000000000000000;;		var svcname = "nettest"
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework(svcname)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			// Assert basic external connectivity.
0000000000000000000000000000000000000000;;			// Since this is not really a test of kubernetes in any way, we
0000000000000000000000000000000000000000;;			// leave it as a pre-test assertion, rather than a Ginko test.
0000000000000000000000000000000000000000;;			By("Executing a successful http request from the external internet")
0000000000000000000000000000000000000000;;			resp, err := http.Get("http://google.com")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				framework.Failf("Unable to connect/talk to the internet: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;				framework.Failf("Unexpected error code, expected 200, got, %v (%v)", resp.StatusCode, resp)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide Internet connection for containers [Conformance]", func() {
0000000000000000000000000000000000000000;;			By("Running container which tries to ping 8.8.8.8")
0000000000000000000000000000000000000000;;			framework.ExpectNoError(
0000000000000000000000000000000000000000;;				framework.CheckConnectivityToHost(f, "", "ping-test", "8.8.8.8", 30))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// First test because it has no dependencies on variables created later on.
0000000000000000000000000000000000000000;;		It("should provide unchanging, static URL paths for kubernetes api services", func() {
0000000000000000000000000000000000000000;;			tests := []struct {
0000000000000000000000000000000000000000;;				path string
0000000000000000000000000000000000000000;;			}{
0000000000000000000000000000000000000000;;				{path: "/healthz"},
0000000000000000000000000000000000000000;;				{path: "/api"},
0000000000000000000000000000000000000000;;				{path: "/apis"},
0000000000000000000000000000000000000000;;				{path: "/metrics"},
0000000000000000000000000000000000000000;;				{path: "/swaggerapi"},
0000000000000000000000000000000000000000;;				{path: "/version"},
0000000000000000000000000000000000000000;;				// TODO: test proxy links here
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !framework.ProviderIs("gke") {
0000000000000000000000000000000000000000;;				tests = append(tests, struct{ path string }{path: "/logs"})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, test := range tests {
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("testing: %s", test.path))
0000000000000000000000000000000000000000;;				data, err := f.ClientSet.Core().RESTClient().Get().
0000000000000000000000000000000000000000;;					AbsPath(test.path).
0000000000000000000000000000000000000000;;					DoRaw()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Failf("Failed: %v\nBody: %s", err, string(data))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should check kube-proxy urls", func() {
0000000000000000000000000000000000000000;;			// TODO: this is overkill we just need the host networking pod
0000000000000000000000000000000000000000;;			// to hit kube-proxy urls.
0000000000000000000000000000000000000000;;			config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("checking kube-proxy URLs")
0000000000000000000000000000000000000000;;			config.GetSelfURL(ports.ProxyHealthzPort, "/healthz", "200 OK")
0000000000000000000000000000000000000000;;			config.GetSelfURL(ports.ProxyStatusPort, "/proxyMode", "iptables") // the default
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: Remove [Slow] when this has had enough bake time to prove presubmit worthiness.
0000000000000000000000000000000000000000;;		framework.KubeDescribe("Granular Checks: Services [Slow]", func() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for pod-Service: http", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v --> %v:%v (config.clusterIP)", config.TestContainerPod.Name, config.ClusterIP, framework.ClusterHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromTestContainer("http", config.ClusterIP, framework.ClusterHttpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v --> %v:%v (nodeIP)", config.TestContainerPod.Name, config.ExternalAddrs[0], config.NodeHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromTestContainer("http", config.NodeIP, config.NodeHttpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for pod-Service: udp", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v --> %v:%v (config.clusterIP)", config.TestContainerPod.Name, config.ClusterIP, framework.ClusterUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromTestContainer("udp", config.ClusterIP, framework.ClusterUdpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v --> %v:%v (nodeIP)", config.TestContainerPod.Name, config.ExternalAddrs[0], config.NodeUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromTestContainer("udp", config.NodeIP, config.NodeUdpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for node-Service: http", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v (node) --> %v:%v (config.clusterIP)", config.NodeIP, config.ClusterIP, framework.ClusterHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromNode("http", config.ClusterIP, framework.ClusterHttpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v (node) --> %v:%v (nodeIP)", config.NodeIP, config.NodeIP, config.NodeHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromNode("http", config.NodeIP, config.NodeHttpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for node-Service: udp", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v (node) --> %v:%v (config.clusterIP)", config.NodeIP, config.ClusterIP, framework.ClusterUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromNode("udp", config.ClusterIP, framework.ClusterUdpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v (node) --> %v:%v (nodeIP)", config.NodeIP, config.NodeIP, config.NodeUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromNode("udp", config.NodeIP, config.NodeUdpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for endpoint-Service: http", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v (endpoint) --> %v:%v (config.clusterIP)", config.EndpointPods[0].Name, config.ClusterIP, framework.ClusterHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromEndpointContainer("http", config.ClusterIP, framework.ClusterHttpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v (endpoint) --> %v:%v (nodeIP)", config.EndpointPods[0].Name, config.NodeIP, config.NodeHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromEndpointContainer("http", config.NodeIP, config.NodeHttpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for endpoint-Service: udp", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v (endpoint) --> %v:%v (config.clusterIP)", config.EndpointPods[0].Name, config.ClusterIP, framework.ClusterUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromEndpointContainer("udp", config.ClusterIP, framework.ClusterUdpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v (endpoint) --> %v:%v (nodeIP)", config.EndpointPods[0].Name, config.NodeIP, config.NodeUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromEndpointContainer("udp", config.NodeIP, config.NodeUdpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should update endpoints: http", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v --> %v:%v (config.clusterIP)", config.TestContainerPod.Name, config.ClusterIP, framework.ClusterHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromTestContainer("http", config.ClusterIP, framework.ClusterHttpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				config.DeleteNetProxyPod()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v --> %v:%v (config.clusterIP)", config.TestContainerPod.Name, config.ClusterIP, framework.ClusterHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromTestContainer("http", config.ClusterIP, framework.ClusterHttpPort, config.MaxTries, config.MaxTries, config.EndpointHostnames())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should update endpoints: udp", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v --> %v:%v (config.clusterIP)", config.TestContainerPod.Name, config.ClusterIP, framework.ClusterUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromTestContainer("udp", config.ClusterIP, framework.ClusterUdpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				config.DeleteNetProxyPod()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v --> %v:%v (config.clusterIP)", config.TestContainerPod.Name, config.ClusterIP, framework.ClusterUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromTestContainer("udp", config.ClusterIP, framework.ClusterUdpPort, config.MaxTries, config.MaxTries, config.EndpointHostnames())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Slow because we confirm that the nodePort doesn't serve traffic, which requires a period of polling.
0000000000000000000000000000000000000000;;			It("should update nodePort: http [Slow]", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v (node) --> %v:%v (nodeIP)", config.NodeIP, config.NodeIP, config.NodeHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromNode("http", config.NodeIP, config.NodeHttpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				config.DeleteNodePortService()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(http) %v (node) --> %v:%v (nodeIP)", config.NodeIP, config.NodeIP, config.NodeHttpPort))
0000000000000000000000000000000000000000;;				config.DialFromNode("http", config.NodeIP, config.NodeHttpPort, config.MaxTries, config.MaxTries, sets.NewString())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Slow because we confirm that the nodePort doesn't serve traffic, which requires a period of polling.
0000000000000000000000000000000000000000;;			It("should update nodePort: udp [Slow]", func() {
0000000000000000000000000000000000000000;;				config := framework.NewNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v (node) --> %v:%v (nodeIP)", config.NodeIP, config.NodeIP, config.NodeUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromNode("udp", config.NodeIP, config.NodeUdpPort, config.MaxTries, 0, config.EndpointHostnames())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				config.DeleteNodePortService()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("dialing(udp) %v (node) --> %v:%v (nodeIP)", config.NodeIP, config.NodeIP, config.NodeUdpPort))
0000000000000000000000000000000000000000;;				config.DialFromNode("udp", config.NodeIP, config.NodeUdpPort, config.MaxTries, config.MaxTries, sets.NewString())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			// TODO: Test sessionAffinity #31712
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
