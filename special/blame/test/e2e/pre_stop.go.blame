0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
1ecacb2d617dbf47eaed5dfc629b085caf7555cb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// partially cloned from webserver.go
0000000000000000000000000000000000000000;;	type State struct {
0000000000000000000000000000000000000000;;		Received map[string]int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPreStop(c clientset.Interface, ns string) {
0000000000000000000000000000000000000000;;		// This is the server that will receive the preStop notification
0000000000000000000000000000000000000000;;		podDescr := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "server",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "server",
0000000000000000000000000000000000000000;;						Image: "gcr.io/google_containers/nettest:1.7",
0000000000000000000000000000000000000000;;						Ports: []v1.ContainerPort{{ContainerPort: 8080}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("Creating server pod %s in namespace %s", podDescr.Name, ns))
0000000000000000000000000000000000000000;;		podDescr, err := c.Core().Pods(ns).Create(podDescr)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, fmt.Sprintf("creating pod %s", podDescr.Name))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// At the end of the test, clean up by removing the pod.
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			By("Deleting the server pod")
0000000000000000000000000000000000000000;;			c.Core().Pods(ns).Delete(podDescr.Name, nil)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("Waiting for pods to come up.")
0000000000000000000000000000000000000000;;		err = framework.WaitForPodRunningInNamespace(c, podDescr)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "waiting for server pod to start")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		val := "{\"Source\": \"prestop\"}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podOut, err := c.Core().Pods(ns).Get(podDescr.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "getting pod info")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preStopDescr := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "tester",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:    "tester",
0000000000000000000000000000000000000000;;						Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;						Command: []string{"sleep", "600"},
0000000000000000000000000000000000000000;;						Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;							PreStop: &v1.Handler{
0000000000000000000000000000000000000000;;								Exec: &v1.ExecAction{
0000000000000000000000000000000000000000;;									Command: []string{
0000000000000000000000000000000000000000;;										"wget", "-O-", "--post-data=" + val, fmt.Sprintf("http://%s:8080/write", podOut.Status.PodIP),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("Creating tester pod %s in namespace %s", preStopDescr.Name, ns))
0000000000000000000000000000000000000000;;		preStopDescr, err = c.Core().Pods(ns).Create(preStopDescr)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, fmt.Sprintf("creating pod %s", preStopDescr.Name))
0000000000000000000000000000000000000000;;		deletePreStop := true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// At the end of the test, clean up by removing the pod.
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if deletePreStop {
0000000000000000000000000000000000000000;;				By("Deleting the tester pod")
0000000000000000000000000000000000000000;;				c.Core().Pods(ns).Delete(preStopDescr.Name, nil)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = framework.WaitForPodRunningInNamespace(c, preStopDescr)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "waiting for tester pod to start")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delete the pod with the preStop handler.
0000000000000000000000000000000000000000;;		By("Deleting pre-stop pod")
0000000000000000000000000000000000000000;;		if err := c.Core().Pods(ns).Delete(preStopDescr.Name, nil); err == nil {
0000000000000000000000000000000000000000;;			deletePreStop = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, fmt.Sprintf("deleting pod: %s", preStopDescr.Name))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validate that the server received the web poke.
0000000000000000000000000000000000000000;;		err = wait.Poll(time.Second*5, time.Second*60, func() (bool, error) {
0000000000000000000000000000000000000000;;			subResourceProxyAvailable, err := framework.ServerVersionGTE(framework.SubResourcePodProxyVersion, c.Discovery())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ctx, cancel := context.WithTimeout(context.Background(), framework.SingleCallTimeout)
0000000000000000000000000000000000000000;;			defer cancel()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var body []byte
0000000000000000000000000000000000000000;;			if subResourceProxyAvailable {
0000000000000000000000000000000000000000;;				body, err = c.Core().RESTClient().Get().
0000000000000000000000000000000000000000;;					Context(ctx).
0000000000000000000000000000000000000000;;					Namespace(ns).
0000000000000000000000000000000000000000;;					Resource("pods").
0000000000000000000000000000000000000000;;					SubResource("proxy").
0000000000000000000000000000000000000000;;					Name(podDescr.Name).
0000000000000000000000000000000000000000;;					Suffix("read").
0000000000000000000000000000000000000000;;					DoRaw()
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				body, err = c.Core().RESTClient().Get().
0000000000000000000000000000000000000000;;					Context(ctx).
0000000000000000000000000000000000000000;;					Prefix("proxy").
0000000000000000000000000000000000000000;;					Namespace(ns).
0000000000000000000000000000000000000000;;					Resource("pods").
0000000000000000000000000000000000000000;;					Name(podDescr.Name).
0000000000000000000000000000000000000000;;					Suffix("read").
0000000000000000000000000000000000000000;;					DoRaw()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if ctx.Err() != nil {
0000000000000000000000000000000000000000;;					framework.Failf("Error validating prestop: %v", err)
0000000000000000000000000000000000000000;;					return true, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("Error validating prestop: %v", err))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				framework.Logf("Saw: %s", string(body))
0000000000000000000000000000000000000000;;				state := State{}
0000000000000000000000000000000000000000;;				err := json.Unmarshal(body, &state)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Logf("Error parsing: %v", err)
0000000000000000000000000000000000000000;;					return false, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if state.Received["prestop"] != 0 {
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "validating pre-stop.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("PreStop", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("prestop")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should call prestop when killing a pod [Conformance]", func() {
0000000000000000000000000000000000000000;;			testPreStop(f.ClientSet, f.Namespace.Name)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
