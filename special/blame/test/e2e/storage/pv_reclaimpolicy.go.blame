0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
fab7df78a1367134c1d54b3a56c6aa9166dc83fd;test/e2e/pv_reclaimpolicy.go[test/e2e/pv_reclaimpolicy.go][test/e2e/storage/pv_reclaimpolicy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apierrs "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		vsphere "k8s.io/kubernetes/pkg/cloudprovider/providers/vsphere"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = SIGDescribe("PersistentVolumes [Feature:ReclaimPolicy]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("persistentvolumereclaim")
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			c          clientset.Interface
0000000000000000000000000000000000000000;;			ns         string
0000000000000000000000000000000000000000;;			volumePath string
0000000000000000000000000000000000000000;;			pv         *v1.PersistentVolume
0000000000000000000000000000000000000000;;			pvc        *v1.PersistentVolumeClaim
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			c = f.ClientSet
0000000000000000000000000000000000000000;;			ns = f.Namespace.Name
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.WaitForAllNodesSchedulable(c, framework.TestContext.NodeSchedulableTimeout))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SIGDescribe("persistentvolumereclaim:vsphere", func() {
0000000000000000000000000000000000000000;;			BeforeEach(func() {
0000000000000000000000000000000000000000;;				framework.SkipUnlessProviderIs("vsphere")
0000000000000000000000000000000000000000;;				pv = nil
0000000000000000000000000000000000000000;;				pvc = nil
0000000000000000000000000000000000000000;;				volumePath = ""
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			AfterEach(func() {
0000000000000000000000000000000000000000;;				vsp, err := vsphere.GetVSphere()
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;				testCleanupVSpherePersistentVolumeReclaim(vsp, c, ns, volumePath, pv, pvc)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			/*
0000000000000000000000000000000000000000;;				This test verifies persistent volume should be deleted when reclaimPolicy on the PV is set to delete and
0000000000000000000000000000000000000000;;				associated claim is deleted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Test Steps:
0000000000000000000000000000000000000000;;				1. Create vmdk
0000000000000000000000000000000000000000;;				2. Create PV Spec with volume path set to VMDK file created in Step-1, and PersistentVolumeReclaimPolicy is set to Delete
0000000000000000000000000000000000000000;;				3. Create PVC with the storage request set to PV's storage capacity.
0000000000000000000000000000000000000000;;				4. Wait for PV and PVC to bound.
0000000000000000000000000000000000000000;;				5. Delete PVC
0000000000000000000000000000000000000000;;				6. Verify PV is deleted automatically.
0000000000000000000000000000000000000000;;			*/
0000000000000000000000000000000000000000;;			It("should delete persistent volume when reclaimPolicy set to delete and associated claim is deleted", func() {
0000000000000000000000000000000000000000;;				vsp, err := vsphere.GetVSphere()
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				volumePath, pv, pvc, err = testSetupVSpherePersistentVolumeReclaim(vsp, c, ns, v1.PersistentVolumeReclaimDelete)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				deletePVCAfterBind(c, ns, pvc, pv)
0000000000000000000000000000000000000000;;				pvc = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("verify pv is deleted")
0000000000000000000000000000000000000000;;				err = framework.WaitForPersistentVolumeDeleted(c, pv.Name, 3*time.Second, 300*time.Second)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				pv = nil
0000000000000000000000000000000000000000;;				volumePath = ""
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			/*
0000000000000000000000000000000000000000;;				This test Verify persistent volume should be retained when reclaimPolicy on the PV is set to retain
0000000000000000000000000000000000000000;;				and associated claim is deleted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Test Steps:
0000000000000000000000000000000000000000;;				1. Create vmdk
0000000000000000000000000000000000000000;;				2. Create PV Spec with volume path set to VMDK file created in Step-1, and PersistentVolumeReclaimPolicy is set to Retain
0000000000000000000000000000000000000000;;				3. Create PVC with the storage request set to PV's storage capacity.
0000000000000000000000000000000000000000;;				4. Wait for PV and PVC to bound.
0000000000000000000000000000000000000000;;				5. Write some content in the volume.
0000000000000000000000000000000000000000;;				6. Delete PVC
0000000000000000000000000000000000000000;;				7. Verify PV is retained.
0000000000000000000000000000000000000000;;				8. Delete retained PV.
0000000000000000000000000000000000000000;;				9. Create PV Spec with the same volume path used in step 2.
0000000000000000000000000000000000000000;;				10. Create PVC with the storage request set to PV's storage capacity.
0000000000000000000000000000000000000000;;				11. Created POD using PVC created in Step 10 and verify volume content is matching.
0000000000000000000000000000000000000000;;			*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should retain persistent volume when reclaimPolicy set to retain when associated claim is deleted", func() {
0000000000000000000000000000000000000000;;				var volumeFileContent = "hello from vsphere cloud provider, Random Content is :" + strconv.FormatInt(time.Now().UnixNano(), 10)
0000000000000000000000000000000000000000;;				vsp, err := vsphere.GetVSphere()
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				volumePath, pv, pvc, err = testSetupVSpherePersistentVolumeReclaim(vsp, c, ns, v1.PersistentVolumeReclaimRetain)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				writeContentToVSpherePV(c, pvc, volumeFileContent)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("Delete PVC")
0000000000000000000000000000000000000000;;				framework.ExpectNoError(framework.DeletePersistentVolumeClaim(c, pvc.Name, ns), "Failed to delete PVC ", pvc.Name)
0000000000000000000000000000000000000000;;				pvc = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("Verify PV is retained")
0000000000000000000000000000000000000000;;				framework.Logf("Waiting for PV %v to become Released", pv.Name)
0000000000000000000000000000000000000000;;				err = framework.WaitForPersistentVolumePhase(v1.VolumeReleased, c, pv.Name, 3*time.Second, 300*time.Second)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;				framework.ExpectNoError(framework.DeletePersistentVolume(c, pv.Name), "Failed to delete PV ", pv.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("Creating the PV for same volume path")
0000000000000000000000000000000000000000;;				pv = getVSpherePersistentVolumeSpec(volumePath, v1.PersistentVolumeReclaimRetain, nil)
0000000000000000000000000000000000000000;;				pv, err = c.CoreV1().PersistentVolumes().Create(pv)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("creating the pvc")
0000000000000000000000000000000000000000;;				pvc = getVSpherePersistentVolumeClaimSpec(ns, nil)
0000000000000000000000000000000000000000;;				pvc, err = c.CoreV1().PersistentVolumeClaims(ns).Create(pvc)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("wait for the pv and pvc to bind")
0000000000000000000000000000000000000000;;				framework.ExpectNoError(framework.WaitOnPVandPVC(c, ns, pv, pvc))
0000000000000000000000000000000000000000;;				verifyContentOfVSpherePV(c, pvc, volumeFileContent)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test Setup for persistentvolumereclaim tests for vSphere Provider
0000000000000000000000000000000000000000;;	func testSetupVSpherePersistentVolumeReclaim(vsp *vsphere.VSphere, c clientset.Interface, ns string, persistentVolumeReclaimPolicy v1.PersistentVolumeReclaimPolicy) (volumePath string, pv *v1.PersistentVolume, pvc *v1.PersistentVolumeClaim, err error) {
0000000000000000000000000000000000000000;;		By("running testSetupVSpherePersistentVolumeReclaim")
0000000000000000000000000000000000000000;;		By("creating vmdk")
0000000000000000000000000000000000000000;;		volumePath, err = createVSphereVolume(vsp, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		By("creating the pv")
0000000000000000000000000000000000000000;;		pv = getVSpherePersistentVolumeSpec(volumePath, persistentVolumeReclaimPolicy, nil)
0000000000000000000000000000000000000000;;		pv, err = c.CoreV1().PersistentVolumes().Create(pv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		By("creating the pvc")
0000000000000000000000000000000000000000;;		pvc = getVSpherePersistentVolumeClaimSpec(ns, nil)
0000000000000000000000000000000000000000;;		pvc, err = c.CoreV1().PersistentVolumeClaims(ns).Create(pvc)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test Cleanup for persistentvolumereclaim tests for vSphere Provider
0000000000000000000000000000000000000000;;	func testCleanupVSpherePersistentVolumeReclaim(vsp *vsphere.VSphere, c clientset.Interface, ns string, volumePath string, pv *v1.PersistentVolume, pvc *v1.PersistentVolumeClaim) {
0000000000000000000000000000000000000000;;		By("running testCleanupVSpherePersistentVolumeReclaim")
0000000000000000000000000000000000000000;;		if len(volumePath) > 0 {
0000000000000000000000000000000000000000;;			vsp.DeleteVolume(volumePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pv != nil {
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.DeletePersistentVolume(c, pv.Name), "Failed to delete PV ", pv.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pvc != nil {
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.DeletePersistentVolumeClaim(c, pvc.Name, ns), "Failed to delete PVC ", pvc.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// func to wait until PV and PVC bind and once bind completes, delete the PVC
0000000000000000000000000000000000000000;;	func deletePVCAfterBind(c clientset.Interface, ns string, pvc *v1.PersistentVolumeClaim, pv *v1.PersistentVolume) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("wait for the pv and pvc to bind")
0000000000000000000000000000000000000000;;		framework.ExpectNoError(framework.WaitOnPVandPVC(c, ns, pv, pvc))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("delete pvc")
0000000000000000000000000000000000000000;;		framework.ExpectNoError(framework.DeletePersistentVolumeClaim(c, pvc.Name, ns), "Failed to delete PVC ", pvc.Name)
0000000000000000000000000000000000000000;;		pvc, err = c.CoreV1().PersistentVolumeClaims(ns).Get(pvc.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if !apierrs.IsNotFound(err) {
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
