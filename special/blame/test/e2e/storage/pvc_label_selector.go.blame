0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
fab7df78a1367134c1d54b3a56c6aa9166dc83fd;test/e2e/pvc_label_selector.go[test/e2e/pvc_label_selector.go][test/e2e/storage/pvc_label_selector.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		vsphere "k8s.io/kubernetes/pkg/cloudprovider/providers/vsphere"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	   This is a function test for Selector-Label Volume Binding Feature
0000000000000000000000000000000000000000;;	   Test verifies volume with the matching label is bounded with the PVC.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   Test Steps
0000000000000000000000000000000000000000;;	   ----------
0000000000000000000000000000000000000000;;	   1. Create VMDK.
0000000000000000000000000000000000000000;;	   2. Create pv with lable volume-type:ssd, volume path set to vmdk created in previous step, and PersistentVolumeReclaimPolicy is set to Delete.
0000000000000000000000000000000000000000;;	   3. Create PVC (pvc_vvol) with label selector to match with volume-type:vvol
0000000000000000000000000000000000000000;;	   4. Create PVC (pvc_ssd) with label selector to match with volume-type:ssd
0000000000000000000000000000000000000000;;	   5. Wait and verify pvc_ssd is bound with PV.
0000000000000000000000000000000000000000;;	   6. Verify Status of pvc_vvol is still pending.
0000000000000000000000000000000000000000;;	   7. Delete pvc_ssd.
0000000000000000000000000000000000000000;;	   8. verify associated pv is also deleted.
0000000000000000000000000000000000000000;;	   9. delete pvc_vvol
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	var _ = SIGDescribe("PersistentVolumes [Feature:LabelSelector]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("pvclabelselector")
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			c          clientset.Interface
0000000000000000000000000000000000000000;;			ns         string
0000000000000000000000000000000000000000;;			pv_ssd     *v1.PersistentVolume
0000000000000000000000000000000000000000;;			pvc_ssd    *v1.PersistentVolumeClaim
0000000000000000000000000000000000000000;;			pvc_vvol   *v1.PersistentVolumeClaim
0000000000000000000000000000000000000000;;			volumePath string
0000000000000000000000000000000000000000;;			ssdlabels  map[string]string
0000000000000000000000000000000000000000;;			vvollabels map[string]string
0000000000000000000000000000000000000000;;			err        error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			framework.SkipUnlessProviderIs("vsphere")
0000000000000000000000000000000000000000;;			c = f.ClientSet
0000000000000000000000000000000000000000;;			ns = f.Namespace.Name
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.WaitForAllNodesSchedulable(c, framework.TestContext.NodeSchedulableTimeout))
0000000000000000000000000000000000000000;;			ssdlabels = make(map[string]string)
0000000000000000000000000000000000000000;;			ssdlabels["volume-type"] = "ssd"
0000000000000000000000000000000000000000;;			vvollabels = make(map[string]string)
0000000000000000000000000000000000000000;;			vvollabels["volume-type"] = "vvol"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SIGDescribe("Selector-Label Volume Binding:vsphere", func() {
0000000000000000000000000000000000000000;;			AfterEach(func() {
0000000000000000000000000000000000000000;;				By("Running clean up actions")
0000000000000000000000000000000000000000;;				if framework.ProviderIs("vsphere") {
0000000000000000000000000000000000000000;;					testCleanupVSpherePVClabelselector(c, ns, volumePath, pv_ssd, pvc_ssd, pvc_vvol)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should bind volume with claim for given label", func() {
0000000000000000000000000000000000000000;;				volumePath, pv_ssd, pvc_ssd, pvc_vvol, err = testSetupVSpherePVClabelselector(c, ns, ssdlabels, vvollabels)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("wait for the pvc_ssd to bind with pv_ssd")
0000000000000000000000000000000000000000;;				framework.ExpectNoError(framework.WaitOnPVandPVC(c, ns, pv_ssd, pvc_ssd))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("Verify status of pvc_vvol is pending")
0000000000000000000000000000000000000000;;				err = framework.WaitForPersistentVolumeClaimPhase(v1.ClaimPending, c, ns, pvc_vvol.Name, 3*time.Second, 300*time.Second)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("delete pvc_ssd")
0000000000000000000000000000000000000000;;				framework.ExpectNoError(framework.DeletePersistentVolumeClaim(c, pvc_ssd.Name, ns), "Failed to delete PVC ", pvc_ssd.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("verify pv_ssd is deleted")
0000000000000000000000000000000000000000;;				err = framework.WaitForPersistentVolumeDeleted(c, pv_ssd.Name, 3*time.Second, 300*time.Second)
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;				volumePath = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("delete pvc_vvol")
0000000000000000000000000000000000000000;;				framework.ExpectNoError(framework.DeletePersistentVolumeClaim(c, pvc_vvol.Name, ns), "Failed to delete PVC ", pvc_vvol.Name)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testSetupVSpherePVClabelselector(c clientset.Interface, ns string, ssdlabels map[string]string, vvollabels map[string]string) (volumePath string, pv_ssd *v1.PersistentVolume, pvc_ssd *v1.PersistentVolumeClaim, pvc_vvol *v1.PersistentVolumeClaim, err error) {
0000000000000000000000000000000000000000;;		volumePath = ""
0000000000000000000000000000000000000000;;		By("creating vmdk")
0000000000000000000000000000000000000000;;		vsp, err := vsphere.GetVSphere()
0000000000000000000000000000000000000000;;		Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;		volumePath, err = createVSphereVolume(vsp, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("creating the pv with lable volume-type:ssd")
0000000000000000000000000000000000000000;;		pv_ssd = getVSpherePersistentVolumeSpec(volumePath, v1.PersistentVolumeReclaimDelete, ssdlabels)
0000000000000000000000000000000000000000;;		pv_ssd, err = c.CoreV1().PersistentVolumes().Create(pv_ssd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("creating pvc with label selector to match with volume-type:vvol")
0000000000000000000000000000000000000000;;		pvc_vvol = getVSpherePersistentVolumeClaimSpec(ns, vvollabels)
0000000000000000000000000000000000000000;;		pvc_vvol, err = c.CoreV1().PersistentVolumeClaims(ns).Create(pvc_vvol)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("creating pvc with label selector to match with volume-type:ssd")
0000000000000000000000000000000000000000;;		pvc_ssd = getVSpherePersistentVolumeClaimSpec(ns, ssdlabels)
0000000000000000000000000000000000000000;;		pvc_ssd, err = c.CoreV1().PersistentVolumeClaims(ns).Create(pvc_ssd)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testCleanupVSpherePVClabelselector(c clientset.Interface, ns string, volumePath string, pv_ssd *v1.PersistentVolume, pvc_ssd *v1.PersistentVolumeClaim, pvc_vvol *v1.PersistentVolumeClaim) {
0000000000000000000000000000000000000000;;		By("running testCleanupVSpherePVClabelselector")
0000000000000000000000000000000000000000;;		if len(volumePath) > 0 {
0000000000000000000000000000000000000000;;			vsp, err := vsphere.GetVSphere()
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;			vsp.DeleteVolume(volumePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pvc_ssd != nil {
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.DeletePersistentVolumeClaim(c, pvc_ssd.Name, ns), "Failed to delete PVC ", pvc_ssd.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pvc_vvol != nil {
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.DeletePersistentVolumeClaim(c, pvc_vvol.Name, ns), "Failed to delete PVC ", pvc_vvol.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pv_ssd != nil {
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.DeletePersistentVolume(c, pv_ssd.Name), "Faled to delete PV ", pv_ssd.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
