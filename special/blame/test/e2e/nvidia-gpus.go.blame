0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f7d5e3ae0200f3303766005522ba5b5950dc8695;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		utilyaml "k8s.io/apimachinery/pkg/util/yaml"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		testPodNamePrefix = "nvidia-gpu-"
0000000000000000000000000000000000000000;;		testCUDAImage     = "gcr.io/google_containers/cuda-vector-add:v0.1"
0000000000000000000000000000000000000000;;		cosOSImage        = "Container-Optimized OS from Google"
0000000000000000000000000000000000000000;;		// Nvidia driver installation can take upwards of 5 minutes.
0000000000000000000000000000000000000000;;		driverInstallTimeout = 10 * time.Minute
0000000000000000000000000000000000000000;;		// Nvidia COS driver installer daemonset.
0000000000000000000000000000000000000000;;		cosNvidiaDriverInstallerUrl = "https://raw.githubusercontent.com/ContainerEngine/accelerators/stable/cos-nvidia-gpu-installer/daemonset.yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeCudaAdditionTestPod() *v1.Pod {
0000000000000000000000000000000000000000;;		podName := testPodNamePrefix + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;		testPod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: podName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "vector-addition",
0000000000000000000000000000000000000000;;						Image: testCUDAImage,
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceNvidiaGPU: *resource.NewQuantity(1, resource.DecimalSI),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:      "nvidia-libraries",
0000000000000000000000000000000000000000;;								MountPath: "/usr/local/nvidia/lib64",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: []v1.Volume{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "nvidia-libraries",
0000000000000000000000000000000000000000;;						VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;							HostPath: &v1.HostPathVolumeSource{
0000000000000000000000000000000000000000;;								Path: "/home/kubernetes/bin/nvidia/lib",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return testPod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isClusterRunningCOS(f *framework.Framework) bool {
0000000000000000000000000000000000000000;;		nodeList, err := f.ClientSet.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "getting node list")
0000000000000000000000000000000000000000;;		for _, node := range nodeList.Items {
0000000000000000000000000000000000000000;;			if !strings.Contains(node.Status.NodeInfo.OSImage, cosOSImage) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func areGPUsAvailableOnAllSchedulableNodes(f *framework.Framework) bool {
0000000000000000000000000000000000000000;;		framework.Logf("Getting list of Nodes from API server")
0000000000000000000000000000000000000000;;		nodeList, err := f.ClientSet.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "getting node list")
0000000000000000000000000000000000000000;;		for _, node := range nodeList.Items {
0000000000000000000000000000000000000000;;			if node.Spec.Unschedulable {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if node.Status.Capacity.NvidiaGPU().Value() == 0 {
0000000000000000000000000000000000000000;;				framework.Logf("Nvidia GPUs not available on Node: %q", node.Name)
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Nvidia GPUs exist on all schedulable nodes")
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getGPUsAvailable(f *framework.Framework) int64 {
0000000000000000000000000000000000000000;;		nodeList, err := f.ClientSet.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "getting node list")
0000000000000000000000000000000000000000;;		var gpusAvailable int64
0000000000000000000000000000000000000000;;		for _, node := range nodeList.Items {
0000000000000000000000000000000000000000;;			gpusAvailable += node.Status.Capacity.NvidiaGPU().Value()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return gpusAvailable
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testNvidiaGPUsOnCOS(f *framework.Framework) {
0000000000000000000000000000000000000000;;		// Skip the test if the base image is not COS.
0000000000000000000000000000000000000000;;		// TODO: Add support for other base images.
0000000000000000000000000000000000000000;;		// CUDA apps require host mounts which is not portable across base images (yet).
0000000000000000000000000000000000000000;;		framework.Logf("Checking base image")
0000000000000000000000000000000000000000;;		if !isClusterRunningCOS(f) {
0000000000000000000000000000000000000000;;			Skip("Nvidia GPU tests are supproted only on Container Optimized OS image currently")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Cluster is running on COS. Proceeding with test")
0000000000000000000000000000000000000000;;		// GPU drivers might have already been installed.
0000000000000000000000000000000000000000;;		if !areGPUsAvailableOnAllSchedulableNodes(f) {
0000000000000000000000000000000000000000;;			// Install Nvidia Drivers.
0000000000000000000000000000000000000000;;			ds := dsFromManifest(cosNvidiaDriverInstallerUrl)
0000000000000000000000000000000000000000;;			ds.Namespace = f.Namespace.Name
0000000000000000000000000000000000000000;;			_, err := f.ClientSet.Extensions().DaemonSets(f.Namespace.Name).Create(ds)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err, "failed to create daemonset")
0000000000000000000000000000000000000000;;			framework.Logf("Successfully created daemonset to install Nvidia drivers. Waiting for drivers to be installed and GPUs to be available in Node Capacity...")
0000000000000000000000000000000000000000;;			// Wait for Nvidia GPUs to be available on nodes
0000000000000000000000000000000000000000;;			Eventually(func() bool {
0000000000000000000000000000000000000000;;				return areGPUsAvailableOnAllSchedulableNodes(f)
0000000000000000000000000000000000000000;;			}, driverInstallTimeout, time.Second).Should(BeTrue())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Creating as many pods as there are Nvidia GPUs and have the pods run a CUDA app")
0000000000000000000000000000000000000000;;		podList := []*v1.Pod{}
0000000000000000000000000000000000000000;;		for i := int64(0); i < getGPUsAvailable(f); i++ {
0000000000000000000000000000000000000000;;			podList = append(podList, f.PodClient().Create(makeCudaAdditionTestPod()))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Wait for all test pods to succeed")
0000000000000000000000000000000000000000;;		// Wait for all pods to succeed
0000000000000000000000000000000000000000;;		for _, po := range podList {
0000000000000000000000000000000000000000;;			f.PodClient().WaitForSuccess(po.Name, 5*time.Minute)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// dsFromManifest reads a .json/yaml file and returns the daemonset in it.
0000000000000000000000000000000000000000;;	func dsFromManifest(url string) *extensions.DaemonSet {
0000000000000000000000000000000000000000;;		var controller extensions.DaemonSet
0000000000000000000000000000000000000000;;		framework.Logf("Parsing ds from %v", url)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var response *http.Response
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		for i := 1; i <= 5; i++ {
0000000000000000000000000000000000000000;;			response, err = http.Get(url)
0000000000000000000000000000000000000000;;			if err == nil && response.StatusCode == 200 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(time.Duration(i) * time.Second)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;		Expect(response.StatusCode).To(Equal(200))
0000000000000000000000000000000000000000;;		defer response.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(response.Body)
0000000000000000000000000000000000000000;;		Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := utilyaml.ToJSON(data)
0000000000000000000000000000000000000000;;		Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Expect(runtime.DecodeInto(api.Codecs.UniversalDecoder(), json, &controller)).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;		return &controller
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("[Feature:GPU]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("gpus")
0000000000000000000000000000000000000000;;		It("run Nvidia GPU tests on Container Optimized OS only", func() {
0000000000000000000000000000000000000000;;			testNvidiaGPUsOnCOS(f)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
