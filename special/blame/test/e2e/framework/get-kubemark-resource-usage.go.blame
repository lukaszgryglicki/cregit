0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2d591e395338b3859f8a2a6e582d857f1cf8e4fc;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package framework
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubemarkResourceUsage struct {
0000000000000000000000000000000000000000;;		Name                    string
0000000000000000000000000000000000000000;;		MemoryWorkingSetInBytes uint64
0000000000000000000000000000000000000000;;		CPUUsageInCores         float64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getMasterUsageByPrefix(prefix string) (string, error) {
0000000000000000000000000000000000000000;;		sshResult, err := SSH(fmt.Sprintf("ps ax -o %%cpu,rss,command | tail -n +2 | grep %v | sed 's/\\s+/ /g'", prefix), GetMasterHost()+":22", TestContext.Provider)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return sshResult.Stdout, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: figure out how to move this to kubemark directory (need to factor test SSH out of e2e framework)
0000000000000000000000000000000000000000;;	func GetKubemarkMasterComponentsResourceUsage() map[string]*KubemarkResourceUsage {
0000000000000000000000000000000000000000;;		result := make(map[string]*KubemarkResourceUsage)
0000000000000000000000000000000000000000;;		// Get kuberenetes component resource usage
0000000000000000000000000000000000000000;;		sshResult, err := getMasterUsageByPrefix("kube")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			Logf("Error when trying to SSH to master machine. Skipping probe")
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scanner := bufio.NewScanner(strings.NewReader(sshResult))
0000000000000000000000000000000000000000;;		for scanner.Scan() {
0000000000000000000000000000000000000000;;			var cpu float64
0000000000000000000000000000000000000000;;			var mem uint64
0000000000000000000000000000000000000000;;			var name string
0000000000000000000000000000000000000000;;			fmt.Sscanf(strings.TrimSpace(scanner.Text()), "%f %d /usr/local/bin/kube-%s", &cpu, &mem, &name)
0000000000000000000000000000000000000000;;			if name != "" {
0000000000000000000000000000000000000000;;				// Gatherer expects pod_name/container_name format
0000000000000000000000000000000000000000;;				fullName := name + "/" + name
0000000000000000000000000000000000000000;;				result[fullName] = &KubemarkResourceUsage{Name: fullName, MemoryWorkingSetInBytes: mem * 1024, CPUUsageInCores: cpu / 100}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Get etcd resource usage
0000000000000000000000000000000000000000;;		sshResult, err = getMasterUsageByPrefix("bin/etcd")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			Logf("Error when trying to SSH to master machine. Skipping probe")
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scanner = bufio.NewScanner(strings.NewReader(sshResult))
0000000000000000000000000000000000000000;;		for scanner.Scan() {
0000000000000000000000000000000000000000;;			var cpu float64
0000000000000000000000000000000000000000;;			var mem uint64
0000000000000000000000000000000000000000;;			var etcdKind string
0000000000000000000000000000000000000000;;			fmt.Sscanf(strings.TrimSpace(scanner.Text()), "%f %d /bin/sh -c /usr/local/bin/etcd", &cpu, &mem)
0000000000000000000000000000000000000000;;			dataDirStart := strings.Index(scanner.Text(), "--data-dir")
0000000000000000000000000000000000000000;;			if dataDirStart < 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Sscanf(scanner.Text()[dataDirStart:], "--data-dir=/var/%s", &etcdKind)
0000000000000000000000000000000000000000;;			if etcdKind != "" {
0000000000000000000000000000000000000000;;				// Gatherer expects pod_name/container_name format
0000000000000000000000000000000000000000;;				fullName := "etcd/" + etcdKind
0000000000000000000000000000000000000000;;				result[fullName] = &KubemarkResourceUsage{Name: fullName, MemoryWorkingSetInBytes: mem * 1024, CPUUsageInCores: cpu / 100}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
