0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
33513269b3e4fdafc2040811b4bd843edb035ced;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package framework
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/onsi/ginkgo/config"
0000000000000000000000000000000000000000;;		"github.com/spf13/viper"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/componentconfig"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const defaultHost = "http://127.0.0.1:8080"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestContextType struct {
0000000000000000000000000000000000000000;;		KubeConfig         string
0000000000000000000000000000000000000000;;		KubeContext        string
0000000000000000000000000000000000000000;;		KubeAPIContentType string
0000000000000000000000000000000000000000;;		KubeVolumeDir      string
0000000000000000000000000000000000000000;;		CertDir            string
0000000000000000000000000000000000000000;;		Host               string
0000000000000000000000000000000000000000;;		// TODO: Deprecating this over time... instead just use gobindata_util.go , see #23987.
0000000000000000000000000000000000000000;;		RepoRoot                string
0000000000000000000000000000000000000000;;		DockershimCheckpointDir string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Provider       string
0000000000000000000000000000000000000000;;		CloudConfig    CloudConfig
0000000000000000000000000000000000000000;;		KubectlPath    string
0000000000000000000000000000000000000000;;		OutputDir      string
0000000000000000000000000000000000000000;;		ReportDir      string
0000000000000000000000000000000000000000;;		ReportPrefix   string
0000000000000000000000000000000000000000;;		Prefix         string
0000000000000000000000000000000000000000;;		MinStartupPods int
0000000000000000000000000000000000000000;;		// Timeout for waiting for system pods to be running
0000000000000000000000000000000000000000;;		SystemPodsStartupTimeout time.Duration
0000000000000000000000000000000000000000;;		UpgradeTarget            string
0000000000000000000000000000000000000000;;		EtcdUpgradeStorage       string
0000000000000000000000000000000000000000;;		EtcdUpgradeVersion       string
0000000000000000000000000000000000000000;;		UpgradeImage             string
0000000000000000000000000000000000000000;;		GCEUpgradeScript         string
0000000000000000000000000000000000000000;;		PrometheusPushGateway    string
0000000000000000000000000000000000000000;;		ContainerRuntime         string
0000000000000000000000000000000000000000;;		ContainerRuntimeEndpoint string
0000000000000000000000000000000000000000;;		ImageServiceEndpoint     string
0000000000000000000000000000000000000000;;		MasterOSDistro           string
0000000000000000000000000000000000000000;;		NodeOSDistro             string
0000000000000000000000000000000000000000;;		VerifyServiceAccount     bool
0000000000000000000000000000000000000000;;		DeleteNamespace          bool
0000000000000000000000000000000000000000;;		DeleteNamespaceOnFailure bool
0000000000000000000000000000000000000000;;		AllowedNotReadyNodes     int
0000000000000000000000000000000000000000;;		CleanStart               bool
0000000000000000000000000000000000000000;;		// If set to 'true' or 'all' framework will start a goroutine monitoring resource usage of system add-ons.
0000000000000000000000000000000000000000;;		// It will read the data every 30 seconds from all Nodes and print summary during afterEach. If set to 'master'
0000000000000000000000000000000000000000;;		// only master Node will be monitored.
0000000000000000000000000000000000000000;;		GatherKubeSystemResourceUsageData string
0000000000000000000000000000000000000000;;		GatherLogsSizes                   bool
0000000000000000000000000000000000000000;;		GatherMetricsAfterTest            bool
0000000000000000000000000000000000000000;;		GatherSuiteMetricsAfterTest       bool
0000000000000000000000000000000000000000;;		// Currently supported values are 'hr' for human-readable and 'json'. It's a comma separated list.
0000000000000000000000000000000000000000;;		OutputPrintType string
0000000000000000000000000000000000000000;;		// NodeSchedulableTimeout is the timeout for waiting for all nodes to be schedulable.
0000000000000000000000000000000000000000;;		NodeSchedulableTimeout time.Duration
0000000000000000000000000000000000000000;;		// CreateTestingNS is responsible for creating namespace used for executing e2e tests.
0000000000000000000000000000000000000000;;		// It accepts namespace base name, which will be prepended with e2e prefix, kube client
0000000000000000000000000000000000000000;;		// and labels to be applied to a namespace.
0000000000000000000000000000000000000000;;		CreateTestingNS CreateTestingNSFn
0000000000000000000000000000000000000000;;		// If set to true test will dump data about the namespace in which test was running.
0000000000000000000000000000000000000000;;		DumpLogsOnFailure bool
0000000000000000000000000000000000000000;;		// Disables dumping cluster log from master and nodes after all tests.
0000000000000000000000000000000000000000;;		DisableLogDump bool
0000000000000000000000000000000000000000;;		// If the garbage collector is enabled in the kube-apiserver and kube-controller-manager.
0000000000000000000000000000000000000000;;		GarbageCollectorEnabled bool
0000000000000000000000000000000000000000;;		// FeatureGates is a set of key=value pairs that describe feature gates for alpha/experimental features.
0000000000000000000000000000000000000000;;		FeatureGates string
0000000000000000000000000000000000000000;;		// Node e2e specific test context
0000000000000000000000000000000000000000;;		NodeTestContextType
0000000000000000000000000000000000000000;;		// Federation e2e context
0000000000000000000000000000000000000000;;		FederatedKubeContext string
0000000000000000000000000000000000000000;;		// Federation control plane version to upgrade to while doing upgrade tests
0000000000000000000000000000000000000000;;		FederationUpgradeTarget string
0000000000000000000000000000000000000000;;		// Whether configuration for accessing federation member clusters should be sourced from the host cluster
0000000000000000000000000000000000000000;;		FederationConfigFromCluster bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Viper-only parameters.  These will in time replace all flags.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Example: Create a file 'e2e.json' with the following:
0000000000000000000000000000000000000000;;		// 	"Cadvisor":{
0000000000000000000000000000000000000000;;		// 		"MaxRetries":"6"
0000000000000000000000000000000000000000;;		// 	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Viper    string
0000000000000000000000000000000000000000;;		Cadvisor struct {
0000000000000000000000000000000000000000;;			MaxRetries      int
0000000000000000000000000000000000000000;;			SleepDurationMS int
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LoggingSoak struct {
0000000000000000000000000000000000000000;;			Scale                    int
0000000000000000000000000000000000000000;;			MilliSecondsBetweenWaves int
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeTestContextType is part of TestContextType, it is shared by all node e2e test.
0000000000000000000000000000000000000000;;	type NodeTestContextType struct {
0000000000000000000000000000000000000000;;		// NodeE2E indicates whether it is running node e2e.
0000000000000000000000000000000000000000;;		NodeE2E bool
0000000000000000000000000000000000000000;;		// Name of the node to run tests on.
0000000000000000000000000000000000000000;;		NodeName string
0000000000000000000000000000000000000000;;		// NodeConformance indicates whether the test is running in node conformance mode.
0000000000000000000000000000000000000000;;		NodeConformance bool
0000000000000000000000000000000000000000;;		// PrepullImages indicates whether node e2e framework should prepull images.
0000000000000000000000000000000000000000;;		PrepullImages bool
0000000000000000000000000000000000000000;;		// KubeletConfig is the kubelet configuration the test is running against.
0000000000000000000000000000000000000000;;		KubeletConfig componentconfig.KubeletConfiguration
0000000000000000000000000000000000000000;;		// ImageDescription is the description of the image on which the test is running.
0000000000000000000000000000000000000000;;		ImageDescription string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloudConfig struct {
0000000000000000000000000000000000000000;;		ApiEndpoint       string
0000000000000000000000000000000000000000;;		ProjectID         string
0000000000000000000000000000000000000000;;		Zone              string
0000000000000000000000000000000000000000;;		MultiZone         bool
0000000000000000000000000000000000000000;;		Cluster           string
0000000000000000000000000000000000000000;;		MasterName        string
0000000000000000000000000000000000000000;;		NodeInstanceGroup string // comma-delimited list of groups' names
0000000000000000000000000000000000000000;;		NumNodes          int
0000000000000000000000000000000000000000;;		ClusterIPRange    string
0000000000000000000000000000000000000000;;		ClusterTag        string
0000000000000000000000000000000000000000;;		Network           string
0000000000000000000000000000000000000000;;		ConfigFile        string // for azure and openstack
0000000000000000000000000000000000000000;;		NodeTag           string
0000000000000000000000000000000000000000;;		MasterTag         string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Provider cloudprovider.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var TestContext TestContextType
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register flags common to all e2e test suites.
0000000000000000000000000000000000000000;;	func RegisterCommonFlags() {
0000000000000000000000000000000000000000;;		// Turn on verbose by default to get spec names
0000000000000000000000000000000000000000;;		config.DefaultReporterConfig.Verbose = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Turn on EmitSpecProgress to get spec progress (especially on interrupt)
0000000000000000000000000000000000000000;;		config.GinkgoConfig.EmitSpecProgress = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Randomize specs as well as suites
0000000000000000000000000000000000000000;;		config.GinkgoConfig.RandomizeAllSpecs = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.GatherKubeSystemResourceUsageData, "gather-resource-usage", "false", "If set to 'true' or 'all' framework will be monitoring resource usage of system all add-ons in (some) e2e tests, if set to 'master' framework will be monitoring master node only, if set to 'none' of 'false' monitoring will be turned off.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.GatherLogsSizes, "gather-logs-sizes", false, "If set to true framework will be monitoring logs sizes on all machines running e2e tests.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.GatherMetricsAfterTest, "gather-metrics-at-teardown", false, "If set to true framwork will gather metrics from all components after each test.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.GatherSuiteMetricsAfterTest, "gather-suite-metrics-at-teardown", false, "If set to true framwork will gather metrics from all components after the whole test suite completes.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.OutputPrintType, "output-print-type", "json", "Format in which summaries should be printed: 'hr' for human readable, 'json' for JSON ones.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.DumpLogsOnFailure, "dump-logs-on-failure", true, "If set to true test will dump data about the namespace in which test was running.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.DisableLogDump, "disable-log-dump", false, "If set to true, logs from master and nodes won't be gathered after test run.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.DeleteNamespace, "delete-namespace", true, "If true tests will delete namespace after completion. It is only designed to make debugging easier, DO NOT turn it off by default.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.DeleteNamespaceOnFailure, "delete-namespace-on-failure", true, "If true, framework will delete test namespace on failure. Used only during test debugging.")
0000000000000000000000000000000000000000;;		flag.IntVar(&TestContext.AllowedNotReadyNodes, "allowed-not-ready-nodes", 0, "If non-zero, framework will allow for that many non-ready nodes when checking for all ready nodes.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.Host, "host", "", fmt.Sprintf("The host, or apiserver, to connect to. Will default to %s if this argument and --kubeconfig are not set", defaultHost))
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.ReportPrefix, "report-prefix", "", "Optional prefix for JUnit XML reports. Default is empty, which doesn't prepend anything to the default name.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.ReportDir, "report-dir", "", "Path to the directory where the JUnit XML reports should be saved. Default is empty, which doesn't generate these reports.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.FeatureGates, "feature-gates", "", "A set of key=value pairs that describe feature gates for alpha/experimental features.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.Viper, "viper-config", "e2e", "The name of the viper config i.e. 'e2e' will read values from 'e2e.json' locally.  All e2e parameters are meant to be configurable by viper.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.ContainerRuntime, "container-runtime", "docker", "The container runtime of cluster VM instances (docker/rkt/remote).")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.ContainerRuntimeEndpoint, "container-runtime-endpoint", "", "The container runtime endpoint of cluster VM instances.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.ImageServiceEndpoint, "image-service-endpoint", "", "The image service endpoint of cluster VM instances.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.DockershimCheckpointDir, "dockershim-checkpoint-dir", "/var/lib/dockershim/sandbox", "The directory for dockershim to store sandbox checkpoints.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register flags specific to the cluster e2e test suite.
0000000000000000000000000000000000000000;;	func RegisterClusterFlags() {
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.VerifyServiceAccount, "e2e-verify-service-account", true, "If true tests will verify the service account before running.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.KubeConfig, clientcmd.RecommendedConfigPathFlag, os.Getenv(clientcmd.RecommendedConfigPathEnvVar), "Path to kubeconfig containing embedded authinfo.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.KubeContext, clientcmd.FlagContext, "", "kubeconfig context to use/override. If unset, will use value from 'current-context'")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.KubeAPIContentType, "kube-api-content-type", "application/vnd.kubernetes.protobuf", "ContentType used to communicate with apiserver")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.FederatedKubeContext, "federated-kube-context", "e2e-federation", "kubeconfig context for federation.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.FederationConfigFromCluster, "federation-config-from-cluster", false, "whether to source configuration for member clusters from the hosting cluster.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.KubeVolumeDir, "volume-dir", "/var/lib/kubelet", "Path to the directory containing the kubelet volumes.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.CertDir, "cert-dir", "", "Path to the directory containing the certs. Default is empty, which doesn't use certs.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.RepoRoot, "repo-root", "../../", "Root directory of kubernetes repository, for finding test files.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.Provider, "provider", "", "The name of the Kubernetes provider (gce, gke, local, vagrant, etc.)")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.KubectlPath, "kubectl-path", "kubectl", "The kubectl binary to use. For development, you might use 'cluster/kubectl.sh' here.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.OutputDir, "e2e-output-dir", "/tmp", "Output directory for interesting/useful test data, like performance data, benchmarks, and other metrics.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.Prefix, "prefix", "e2e", "A prefix to be added to cloud resources created during testing.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.MasterOSDistro, "master-os-distro", "debian", "The OS distribution of cluster master (debian, trusty, or coreos).")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.NodeOSDistro, "node-os-distro", "debian", "The OS distribution of cluster VM instances (debian, trusty, or coreos).")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: Flags per provider?  Rename gce-project/gce-zone?
0000000000000000000000000000000000000000;;		cloudConfig := &TestContext.CloudConfig
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.MasterName, "kube-master", "", "Name of the kubernetes master. Only required if provider is gce or gke")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.ApiEndpoint, "gce-api-endpoint", "", "The GCE ApiEndpoint being used, if applicable")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.ProjectID, "gce-project", "", "The GCE project being used, if applicable")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.Zone, "gce-zone", "", "GCE zone being used, if applicable")
0000000000000000000000000000000000000000;;		flag.BoolVar(&cloudConfig.MultiZone, "gce-multizone", false, "If true, start GCE cloud provider with multizone support.")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.Cluster, "gke-cluster", "", "GKE name of cluster being used, if applicable")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.NodeInstanceGroup, "node-instance-group", "", "Name of the managed instance group for nodes. Valid only for gce, gke or aws. If there is more than one group: comma separated list of groups.")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.Network, "network", "e2e", "The cloud provider network for this e2e cluster.")
0000000000000000000000000000000000000000;;		flag.IntVar(&cloudConfig.NumNodes, "num-nodes", -1, "Number of nodes in the cluster")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.ClusterIPRange, "cluster-ip-range", "10.100.0.0/14", "A CIDR notation IP range from which to assign IPs in the cluster.")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.NodeTag, "node-tag", "", "Network tags used on node instances. Valid only for gce, gke")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.MasterTag, "master-tag", "", "Network tags used on master instances. Valid only for gce, gke")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.ClusterTag, "cluster-tag", "", "Tag used to identify resources.  Only required if provider is aws.")
0000000000000000000000000000000000000000;;		flag.StringVar(&cloudConfig.ConfigFile, "cloud-config-file", "", "Cloud config file.  Only required if provider is azure.")
0000000000000000000000000000000000000000;;		flag.IntVar(&TestContext.MinStartupPods, "minStartupPods", 0, "The number of pods which we need to see in 'Running' state with a 'Ready' condition of true, before we try running tests. This is useful in any cluster which needs some base pod-based services running before it can be used.")
0000000000000000000000000000000000000000;;		flag.DurationVar(&TestContext.SystemPodsStartupTimeout, "system-pods-startup-timeout", 10*time.Minute, "Timeout for waiting for all system pods to be running before starting tests.")
0000000000000000000000000000000000000000;;		flag.DurationVar(&TestContext.NodeSchedulableTimeout, "node-schedulable-timeout", 4*time.Hour, "Timeout for waiting for all nodes to be schedulable.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.UpgradeTarget, "upgrade-target", "ci/latest", "Version to upgrade to (e.g. 'release/stable', 'release/latest', 'ci/latest', '0.19.1', '0.19.1-669-gabac8c8') if doing an upgrade test.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.EtcdUpgradeStorage, "etcd-upgrade-storage", "", "The storage version to upgrade to (either 'etcdv2' or 'etcdv3') if doing an etcd upgrade test.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.EtcdUpgradeVersion, "etcd-upgrade-version", "", "The etcd binary version to upgrade to (e.g., '3.0.14', '2.3.7') if doing an etcd upgrade test.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.UpgradeImage, "upgrade-image", "", "Image to upgrade to (e.g. 'container_vm' or 'gci') if doing an upgrade test.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.GCEUpgradeScript, "gce-upgrade-script", "", "Script to use to upgrade a GCE cluster.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.FederationUpgradeTarget, "federation-upgrade-target", "ci/latest", "Version to upgrade to (e.g. 'release/stable', 'release/latest', 'ci/latest', '0.19.1', '0.19.1-669-gabac8c8') if doing an federation upgrade test.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.PrometheusPushGateway, "prom-push-gateway", "", "The URL to prometheus gateway, so that metrics can be pushed during e2es and scraped by prometheus. Typically something like 127.0.0.1:9091.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.CleanStart, "clean-start", false, "If true, purge all namespaces except default and system before running tests. This serves to Cleanup test namespaces from failed/interrupted e2e runs in a long-lived cluster.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.GarbageCollectorEnabled, "garbage-collector-enabled", true, "Set to true if the garbage collector is enabled in the kube-apiserver and kube-controller-manager, then some tests will rely on the garbage collector to delete dependent resources.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register flags specific to the node e2e test suite.
0000000000000000000000000000000000000000;;	func RegisterNodeFlags() {
0000000000000000000000000000000000000000;;		// Mark the test as node e2e when node flags are api.Registry.
0000000000000000000000000000000000000000;;		TestContext.NodeE2E = true
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.NodeName, "node-name", "", "Name of the node to run tests on.")
0000000000000000000000000000000000000000;;		// TODO(random-liu): Move kubelet start logic out of the test.
0000000000000000000000000000000000000000;;		// TODO(random-liu): Move log fetch logic out of the test.
0000000000000000000000000000000000000000;;		// There are different ways to start kubelet (systemd, initd, docker, rkt, manually started etc.)
0000000000000000000000000000000000000000;;		// and manage logs (journald, upstart etc.).
0000000000000000000000000000000000000000;;		// For different situation we need to mount different things into the container, run different commands.
0000000000000000000000000000000000000000;;		// It is hard and unnecessary to deal with the complexity inside the test suite.
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.NodeConformance, "conformance", false, "If true, the test suite will not start kubelet, and fetch system log (kernel, docker, kubelet log etc.) to the report directory.")
0000000000000000000000000000000000000000;;		flag.BoolVar(&TestContext.PrepullImages, "prepull-images", true, "If true, prepull images so image pull failures do not cause test failures.")
0000000000000000000000000000000000000000;;		flag.StringVar(&TestContext.ImageDescription, "image-description", "", "The description of the image which the test will be running on.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ViperizeFlags sets up all flag and config processing. Future configuration info should be added to viper, not to flags.
0000000000000000000000000000000000000000;;	func ViperizeFlags() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Part 1: Set regular flags.
0000000000000000000000000000000000000000;;		// TODO: Future, lets eliminate e2e 'flag' deps entirely in favor of viper only,
0000000000000000000000000000000000000000;;		// since go test 'flag's are sort of incompatible w/ flag, glog, etc.
0000000000000000000000000000000000000000;;		RegisterCommonFlags()
0000000000000000000000000000000000000000;;		RegisterClusterFlags()
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Part 2: Set Viper provided flags.
0000000000000000000000000000000000000000;;		// This must be done after common flags are registered, since Viper is a flag option.
0000000000000000000000000000000000000000;;		viper.SetConfigName(TestContext.Viper)
0000000000000000000000000000000000000000;;		viper.AddConfigPath(".")
0000000000000000000000000000000000000000;;		viper.ReadInConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO Consider wether or not we want to use overwriteFlagsWithViperConfig().
0000000000000000000000000000000000000000;;		viper.Unmarshal(&TestContext)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AfterReadingAllFlags(&TestContext)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AfterReadingAllFlags makes changes to the context after all flags
0000000000000000000000000000000000000000;;	// have been read.
0000000000000000000000000000000000000000;;	func AfterReadingAllFlags(t *TestContextType) {
0000000000000000000000000000000000000000;;		// Only set a default host if one won't be supplied via kubeconfig
0000000000000000000000000000000000000000;;		if len(t.Host) == 0 && len(t.KubeConfig) == 0 {
0000000000000000000000000000000000000000;;			t.Host = defaultHost
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
