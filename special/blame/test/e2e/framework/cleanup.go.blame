0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
33513269b3e4fdafc2040811b4bd843edb035ced;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package framework
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CleanupActionHandle *int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var cleanupActionsLock sync.Mutex
0000000000000000000000000000000000000000;;	var cleanupActions = map[CleanupActionHandle]func(){}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddCleanupAction installs a function that will be called in the event of the
0000000000000000000000000000000000000000;;	// whole test being terminated.  This allows arbitrary pieces of the overall
0000000000000000000000000000000000000000;;	// test to hook into SynchronizedAfterSuite().
0000000000000000000000000000000000000000;;	func AddCleanupAction(fn func()) CleanupActionHandle {
0000000000000000000000000000000000000000;;		p := CleanupActionHandle(new(int))
0000000000000000000000000000000000000000;;		cleanupActionsLock.Lock()
0000000000000000000000000000000000000000;;		defer cleanupActionsLock.Unlock()
0000000000000000000000000000000000000000;;		cleanupActions[p] = fn
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveCleanupAction removes a function that was installed by
0000000000000000000000000000000000000000;;	// AddCleanupAction.
0000000000000000000000000000000000000000;;	func RemoveCleanupAction(p CleanupActionHandle) {
0000000000000000000000000000000000000000;;		cleanupActionsLock.Lock()
0000000000000000000000000000000000000000;;		defer cleanupActionsLock.Unlock()
0000000000000000000000000000000000000000;;		delete(cleanupActions, p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunCleanupActions runs all functions installed by AddCleanupAction.  It does
0000000000000000000000000000000000000000;;	// not remove them (see RemoveCleanupAction) but it does run unlocked, so they
0000000000000000000000000000000000000000;;	// may remove themselves.
0000000000000000000000000000000000000000;;	func RunCleanupActions() {
0000000000000000000000000000000000000000;;		list := []func(){}
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			cleanupActionsLock.Lock()
0000000000000000000000000000000000000000;;			defer cleanupActionsLock.Unlock()
0000000000000000000000000000000000000000;;			for _, fn := range cleanupActions {
0000000000000000000000000000000000000000;;				list = append(list, fn)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		// Run unlocked.
0000000000000000000000000000000000000000;;		for _, fn := range list {
0000000000000000000000000000000000000000;;			fn()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
