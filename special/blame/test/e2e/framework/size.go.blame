0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
fec3da72b2818a6faeea5fc901517f14077aa2ce;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package framework
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/session"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/autoscaling"
0000000000000000000000000000000000000000;;		awscloud "k8s.io/kubernetes/pkg/cloudprovider/providers/aws"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		resizeNodeReadyTimeout    = 2 * time.Minute
0000000000000000000000000000000000000000;;		resizeNodeNotReadyTimeout = 2 * time.Minute
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ResizeGroup(group string, size int32) error {
0000000000000000000000000000000000000000;;		if TestContext.ReportDir != "" {
0000000000000000000000000000000000000000;;			CoreDump(TestContext.ReportDir)
0000000000000000000000000000000000000000;;			defer CoreDump(TestContext.ReportDir)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if TestContext.Provider == "gce" || TestContext.Provider == "gke" {
0000000000000000000000000000000000000000;;			// TODO: make this hit the compute API directly instead of shelling out to gcloud.
0000000000000000000000000000000000000000;;			// TODO: make gce/gke implement InstanceGroups, so we can eliminate the per-provider logic
0000000000000000000000000000000000000000;;			output, err := exec.Command("gcloud", "compute", "instance-groups", "managed", "resize",
0000000000000000000000000000000000000000;;				group, fmt.Sprintf("--size=%v", size),
0000000000000000000000000000000000000000;;				"--project="+TestContext.CloudConfig.ProjectID, "--zone="+TestContext.CloudConfig.Zone).CombinedOutput()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				Logf("Failed to resize node instance group: %v", string(output))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if TestContext.Provider == "aws" {
0000000000000000000000000000000000000000;;			client := autoscaling.New(session.New())
0000000000000000000000000000000000000000;;			return awscloud.ResizeInstanceGroup(client, group, int(size))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Provider does not support InstanceGroups")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetGroupNodes(group string) ([]string, error) {
0000000000000000000000000000000000000000;;		if TestContext.Provider == "gce" || TestContext.Provider == "gke" {
0000000000000000000000000000000000000000;;			// TODO: make this hit the compute API directly instead of shelling out to gcloud.
0000000000000000000000000000000000000000;;			// TODO: make gce/gke implement InstanceGroups, so we can eliminate the per-provider logic
0000000000000000000000000000000000000000;;			output, err := exec.Command("gcloud", "compute", "instance-groups", "managed",
0000000000000000000000000000000000000000;;				"list-instances", group, "--project="+TestContext.CloudConfig.ProjectID,
0000000000000000000000000000000000000000;;				"--zone="+TestContext.CloudConfig.Zone).CombinedOutput()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			re := regexp.MustCompile(".*RUNNING")
0000000000000000000000000000000000000000;;			lines := re.FindAllString(string(output), -1)
0000000000000000000000000000000000000000;;			for i, line := range lines {
0000000000000000000000000000000000000000;;				lines[i] = line[:strings.Index(line, " ")]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return lines, nil
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("provider does not support InstanceGroups")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GroupSize(group string) (int, error) {
0000000000000000000000000000000000000000;;		if TestContext.Provider == "gce" || TestContext.Provider == "gke" {
0000000000000000000000000000000000000000;;			// TODO: make this hit the compute API directly instead of shelling out to gcloud.
0000000000000000000000000000000000000000;;			// TODO: make gce/gke implement InstanceGroups, so we can eliminate the per-provider logic
0000000000000000000000000000000000000000;;			output, err := exec.Command("gcloud", "compute", "instance-groups", "managed",
0000000000000000000000000000000000000000;;				"list-instances", group, "--project="+TestContext.CloudConfig.ProjectID,
0000000000000000000000000000000000000000;;				"--zone="+TestContext.CloudConfig.Zone).CombinedOutput()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			re := regexp.MustCompile("RUNNING")
0000000000000000000000000000000000000000;;			return len(re.FindAllString(string(output), -1)), nil
0000000000000000000000000000000000000000;;		} else if TestContext.Provider == "aws" {
0000000000000000000000000000000000000000;;			client := autoscaling.New(session.New())
0000000000000000000000000000000000000000;;			instanceGroup, err := awscloud.DescribeInstanceGroup(client, group)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return -1, fmt.Errorf("error describing instance group: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if instanceGroup == nil {
0000000000000000000000000000000000000000;;				return -1, fmt.Errorf("instance group not found: %s", group)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return instanceGroup.CurrentSize()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return -1, fmt.Errorf("provider does not support InstanceGroups")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WaitForGroupSize(group string, size int32) error {
0000000000000000000000000000000000000000;;		timeout := 30 * time.Minute
0000000000000000000000000000000000000000;;		for start := time.Now(); time.Since(start) < timeout; time.Sleep(20 * time.Second) {
0000000000000000000000000000000000000000;;			currentSize, err := GroupSize(group)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				Logf("Failed to get node instance group size: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if currentSize != int(size) {
0000000000000000000000000000000000000000;;				Logf("Waiting for node instance group size %d, current size %d", size, currentSize)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			Logf("Node instance group has reached the desired size %d", size)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("timeout waiting %v for node instance group size to be %d", timeout, size)
0000000000000000000000000000000000000000;;	}
