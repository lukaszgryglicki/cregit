0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
21e5d7700127c2ec8289f8439930077ac278ae13;test/e2e/privileged.go[test/e2e/privileged.go][test/e2e/common/privileged.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrivilegedPodTestConfig struct {
0000000000000000000000000000000000000000;;		f *framework.Framework
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		privilegedPod          string
0000000000000000000000000000000000000000;;		privilegedContainer    string
0000000000000000000000000000000000000000;;		notPrivilegedContainer string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod *v1.Pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("PrivilegedPod", func() {
0000000000000000000000000000000000000000;;		config := &PrivilegedPodTestConfig{
0000000000000000000000000000000000000000;;			f:                      framework.NewDefaultFramework("e2e-privileged-pod"),
0000000000000000000000000000000000000000;;			privilegedPod:          "privileged-pod",
0000000000000000000000000000000000000000;;			privilegedContainer:    "privileged-container",
0000000000000000000000000000000000000000;;			notPrivilegedContainer: "not-privileged-container",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should enable privileged commands", func() {
0000000000000000000000000000000000000000;;			By("Creating a pod with a privileged container")
0000000000000000000000000000000000000000;;			config.createPods()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Executing in the privileged container")
0000000000000000000000000000000000000000;;			config.run(config.privilegedContainer, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Executing in the non-privileged container")
0000000000000000000000000000000000000000;;			config.run(config.notPrivilegedContainer, false)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PrivilegedPodTestConfig) run(containerName string, expectSuccess bool) {
0000000000000000000000000000000000000000;;		cmd := []string{"ip", "link", "add", "dummy1", "type", "dummy"}
0000000000000000000000000000000000000000;;		reverseCmd := []string{"ip", "link", "del", "dummy1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stdout, stderr, err := c.f.ExecCommandInContainerWithFullOutput(
0000000000000000000000000000000000000000;;			c.privilegedPod, containerName, cmd...)
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("cmd %v, stdout %q, stderr %q", cmd, stdout, stderr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if expectSuccess {
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred(), msg)
0000000000000000000000000000000000000000;;			// We need to clean up the dummy link that was created, as it
0000000000000000000000000000000000000000;;			// leaks out into the node level -- yuck.
0000000000000000000000000000000000000000;;			_, _, err := c.f.ExecCommandInContainerWithFullOutput(
0000000000000000000000000000000000000000;;				c.privilegedPod, containerName, reverseCmd...)
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred(),
0000000000000000000000000000000000000000;;				fmt.Sprintf("could not remove dummy1 link: %v", err))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			Expect(err).To(HaveOccurred(), msg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PrivilegedPodTestConfig) createPodsSpec() *v1.Pod {
0000000000000000000000000000000000000000;;		isPrivileged := true
0000000000000000000000000000000000000000;;		notPrivileged := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const image = "gcr.io/google_containers/busybox:1.24"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      c.privilegedPod,
0000000000000000000000000000000000000000;;				Namespace: c.f.Namespace.Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            c.privilegedContainer,
0000000000000000000000000000000000000000;;						Image:           image,
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						SecurityContext: &v1.SecurityContext{Privileged: &isPrivileged},
0000000000000000000000000000000000000000;;						Command:         []string{"/bin/sleep", "10000"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            c.notPrivilegedContainer,
0000000000000000000000000000000000000000;;						Image:           image,
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						SecurityContext: &v1.SecurityContext{Privileged: &notPrivileged},
0000000000000000000000000000000000000000;;						Command:         []string{"/bin/sleep", "10000"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PrivilegedPodTestConfig) createPods() {
0000000000000000000000000000000000000000;;		podSpec := c.createPodsSpec()
0000000000000000000000000000000000000000;;		c.pod = c.f.PodClient().CreateSync(podSpec)
0000000000000000000000000000000000000000;;	}
