0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b9d5f9bfb2caceafdf0d520306b4ba0044f524c8;test/e2e/expansion.go[test/e2e/expansion.go][test/e2e/common/expansion.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These tests exercise the Kubernetes expansion syntax $(VAR).
0000000000000000000000000000000000000000;;	// For more information, see: docs/design/expansion.md
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Variable Expansion", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("var-expansion")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should allow composing env vars into new env vars [Conformance]", func() {
0000000000000000000000000000000000000000;;			podName := "var-expansion-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   podName,
0000000000000000000000000000000000000000;;					Labels: map[string]string{"name": podName},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "dapi-container",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"sh", "-c", "env"},
0000000000000000000000000000000000000000;;							Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name:  "FOO",
0000000000000000000000000000000000000000;;									Value: "foo-value",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name:  "BAR",
0000000000000000000000000000000000000000;;									Value: "bar-value",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name:  "FOOBAR",
0000000000000000000000000000000000000000;;									Value: "$(FOO);;$(BAR)",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("env composition", pod, 0, []string{
0000000000000000000000000000000000000000;;				"FOO=foo-value",
0000000000000000000000000000000000000000;;				"BAR=bar-value",
0000000000000000000000000000000000000000;;				"FOOBAR=foo-value;;bar-value",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should allow substituting values in a container's command [Conformance]", func() {
0000000000000000000000000000000000000000;;			podName := "var-expansion-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   podName,
0000000000000000000000000000000000000000;;					Labels: map[string]string{"name": podName},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "dapi-container",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"sh", "-c", "TEST_VAR=wrong echo \"$(TEST_VAR)\""},
0000000000000000000000000000000000000000;;							Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name:  "TEST_VAR",
0000000000000000000000000000000000000000;;									Value: "test-value",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("substitution in container's command", pod, 0, []string{
0000000000000000000000000000000000000000;;				"test-value",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should allow substituting values in a container's args [Conformance]", func() {
0000000000000000000000000000000000000000;;			podName := "var-expansion-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   podName,
0000000000000000000000000000000000000000;;					Labels: map[string]string{"name": podName},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "dapi-container",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"sh", "-c"},
0000000000000000000000000000000000000000;;							Args:    []string{"TEST_VAR=wrong echo \"$(TEST_VAR)\""},
0000000000000000000000000000000000000000;;							Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name:  "TEST_VAR",
0000000000000000000000000000000000000000;;									Value: "test-value",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("substitution in container's args", pod, 0, []string{
0000000000000000000000000000000000000000;;				"test-value",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
