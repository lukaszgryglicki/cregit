0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5a8de016571395d896c38830ad8b24167d172e36;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		podutil "k8s.io/kubernetes/pkg/api/v1/pod"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/conditions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("InitContainer", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("init-container")
0000000000000000000000000000000000000000;;		var podClient *framework.PodClient
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			podClient = f.PodClient()
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should invoke init containers on a RestartNever pod", func() {
0000000000000000000000000000000000000000;;			framework.SkipIfContainerRuntimeIs("rkt") // #25988
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("creating the pod")
0000000000000000000000000000000000000000;;			name := "pod-init-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			value := strconv.Itoa(time.Now().Nanosecond())
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: name,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"name": "foo",
0000000000000000000000000000000000000000;;						"time": value,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;					InitContainers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "init1",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/true"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "init2",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/true"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "run1",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/true"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			stable := true
0000000000000000000000000000000000000000;;			for i := 0; i < 2; i++ {
0000000000000000000000000000000000000000;;				if !stable {
0000000000000000000000000000000000000000;;					framework.Logf("PodSpec: initContainers in metadata.annotation")
0000000000000000000000000000000000000000;;					if err := podutil.SetInitContainersAnnotations(pod); err != nil {
0000000000000000000000000000000000000000;;						Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					framework.Logf("PodSpec: initContainers in spec.initContainers")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				startedPod := podClient.Create(pod)
0000000000000000000000000000000000000000;;				w, err := podClient.Watch(metav1.SingleObject(startedPod.ObjectMeta))
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred(), "error watching a pod")
0000000000000000000000000000000000000000;;				wr := watch.NewRecorder(w)
0000000000000000000000000000000000000000;;				event, err := watch.Until(framework.PodStartTimeout, wr, conditions.PodCompleted)
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				framework.CheckInvariants(wr.Events(), framework.ContainerInitInvariant)
0000000000000000000000000000000000000000;;				endPod := event.Object.(*v1.Pod)
0000000000000000000000000000000000000000;;				if err := podutil.SetInitContainersAndStatuses(endPod); err != nil {
0000000000000000000000000000000000000000;;					Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Expect(endPod.Status.Phase).To(Equal(v1.PodSucceeded))
0000000000000000000000000000000000000000;;				_, init := podutil.GetPodCondition(&endPod.Status, v1.PodInitialized)
0000000000000000000000000000000000000000;;				Expect(init).NotTo(BeNil())
0000000000000000000000000000000000000000;;				Expect(init.Status).To(Equal(v1.ConditionTrue))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Expect(len(endPod.Status.InitContainerStatuses)).To(Equal(2))
0000000000000000000000000000000000000000;;				for _, status := range endPod.Status.InitContainerStatuses {
0000000000000000000000000000000000000000;;					Expect(status.Ready).To(BeTrue())
0000000000000000000000000000000000000000;;					Expect(status.State.Terminated).NotTo(BeNil())
0000000000000000000000000000000000000000;;					Expect(status.State.Terminated.ExitCode).To(BeZero())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				stable = false
0000000000000000000000000000000000000000;;				name := "pod-init-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				pod.Name = name
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should invoke init containers on a RestartAlways pod", func() {
0000000000000000000000000000000000000000;;			framework.SkipIfContainerRuntimeIs("rkt") // #25988
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("creating the pod")
0000000000000000000000000000000000000000;;			name := "pod-init-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			value := strconv.Itoa(time.Now().Nanosecond())
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: name,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"name": "foo",
0000000000000000000000000000000000000000;;						"time": value,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					InitContainers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "init1",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/true"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "init2",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/true"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  "run1",
0000000000000000000000000000000000000000;;							Image: framework.GetPauseImageName(f.ClientSet),
0000000000000000000000000000000000000000;;							Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;								Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;									v1.ResourceCPU:    *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;									v1.ResourceMemory: *resource.NewQuantity(30*1024*1024, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			stable := true
0000000000000000000000000000000000000000;;			for i := 0; i < 2; i++ {
0000000000000000000000000000000000000000;;				if !stable {
0000000000000000000000000000000000000000;;					framework.Logf("PodSpec: initContainers in metadata.annotation")
0000000000000000000000000000000000000000;;					if err := podutil.SetInitContainersAnnotations(pod); err != nil {
0000000000000000000000000000000000000000;;						Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					framework.Logf("PodSpec: initContainers in spec.initContainers")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				startedPod := podClient.Create(pod)
0000000000000000000000000000000000000000;;				w, err := podClient.Watch(metav1.SingleObject(startedPod.ObjectMeta))
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred(), "error watching a pod")
0000000000000000000000000000000000000000;;				wr := watch.NewRecorder(w)
0000000000000000000000000000000000000000;;				event, err := watch.Until(framework.PodStartTimeout, wr, conditions.PodRunning)
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				framework.CheckInvariants(wr.Events(), framework.ContainerInitInvariant)
0000000000000000000000000000000000000000;;				endPod := event.Object.(*v1.Pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Expect(endPod.Status.Phase).To(Equal(v1.PodRunning))
0000000000000000000000000000000000000000;;				_, init := podutil.GetPodCondition(&endPod.Status, v1.PodInitialized)
0000000000000000000000000000000000000000;;				Expect(init).NotTo(BeNil())
0000000000000000000000000000000000000000;;				Expect(init.Status).To(Equal(v1.ConditionTrue))
0000000000000000000000000000000000000000;;				if err := podutil.SetInitContainersAndStatuses(endPod); err != nil {
0000000000000000000000000000000000000000;;					Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Expect(len(endPod.Status.InitContainerStatuses)).To(Equal(2))
0000000000000000000000000000000000000000;;				for _, status := range endPod.Status.InitContainerStatuses {
0000000000000000000000000000000000000000;;					Expect(status.Ready).To(BeTrue())
0000000000000000000000000000000000000000;;					Expect(status.State.Terminated).NotTo(BeNil())
0000000000000000000000000000000000000000;;					Expect(status.State.Terminated.ExitCode).To(BeZero())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				stable = false
0000000000000000000000000000000000000000;;				name := "pod-init-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				pod.Name = name
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should not start app containers if init containers fail on a RestartAlways pod", func() {
0000000000000000000000000000000000000000;;			framework.SkipIfContainerRuntimeIs("rkt") // #25988
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("creating the pod")
0000000000000000000000000000000000000000;;			name := "pod-init-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			value := strconv.Itoa(time.Now().Nanosecond())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: name,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"name": "foo",
0000000000000000000000000000000000000000;;						"time": value,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					InitContainers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "init1",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/false"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "init2",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/true"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  "run1",
0000000000000000000000000000000000000000;;							Image: framework.GetPauseImageName(f.ClientSet),
0000000000000000000000000000000000000000;;							Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;								Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;									v1.ResourceCPU:    *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;									v1.ResourceMemory: *resource.NewQuantity(30*1024*1024, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			stable := true
0000000000000000000000000000000000000000;;			for i := 0; i < 2; i++ {
0000000000000000000000000000000000000000;;				if !stable {
0000000000000000000000000000000000000000;;					framework.Logf("PodSpec: initContainers in metadata.annotation")
0000000000000000000000000000000000000000;;					if err := podutil.SetInitContainersAnnotations(pod); err != nil {
0000000000000000000000000000000000000000;;						Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					framework.Logf("PodSpec: initContainers in spec.initContainers")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				startedPod := podClient.Create(pod)
0000000000000000000000000000000000000000;;				w, err := podClient.Watch(metav1.SingleObject(startedPod.ObjectMeta))
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred(), "error watching a pod")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				wr := watch.NewRecorder(w)
0000000000000000000000000000000000000000;;				event, err := watch.Until(
0000000000000000000000000000000000000000;;					framework.PodStartTimeout, wr,
0000000000000000000000000000000000000000;;					// check for the first container to fail at least once
0000000000000000000000000000000000000000;;					func(evt watch.Event) (bool, error) {
0000000000000000000000000000000000000000;;						switch t := evt.Object.(type) {
0000000000000000000000000000000000000000;;						case *v1.Pod:
0000000000000000000000000000000000000000;;							if err := podutil.SetInitContainersAndStatuses(t); err != nil {
0000000000000000000000000000000000000000;;								Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							for _, status := range t.Status.ContainerStatuses {
0000000000000000000000000000000000000000;;								if status.State.Waiting == nil {
0000000000000000000000000000000000000000;;									return false, fmt.Errorf("container %q should not be out of waiting: %#v", status.Name, status)
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;								if status.State.Waiting.Reason != "PodInitializing" {
0000000000000000000000000000000000000000;;									return false, fmt.Errorf("container %q should have reason PodInitializing: %#v", status.Name, status)
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if len(t.Status.InitContainerStatuses) != 2 {
0000000000000000000000000000000000000000;;								return false, nil
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							status := t.Status.InitContainerStatuses[1]
0000000000000000000000000000000000000000;;							if status.State.Waiting == nil {
0000000000000000000000000000000000000000;;								return false, fmt.Errorf("second init container should not be out of waiting: %#v", status)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if status.State.Waiting.Reason != "PodInitializing" {
0000000000000000000000000000000000000000;;								return false, fmt.Errorf("second init container should have reason PodInitializing: %#v", status)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							status = t.Status.InitContainerStatuses[0]
0000000000000000000000000000000000000000;;							if status.State.Terminated != nil && status.State.Terminated.ExitCode == 0 {
0000000000000000000000000000000000000000;;								return false, fmt.Errorf("first init container should have exitCode != 0: %#v", status)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							// continue until we see an attempt to restart the pod
0000000000000000000000000000000000000000;;							return status.LastTerminationState.Terminated != nil, nil
0000000000000000000000000000000000000000;;						default:
0000000000000000000000000000000000000000;;							return false, fmt.Errorf("unexpected object: %#v", t)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					// verify we get two restarts
0000000000000000000000000000000000000000;;					func(evt watch.Event) (bool, error) {
0000000000000000000000000000000000000000;;						switch t := evt.Object.(type) {
0000000000000000000000000000000000000000;;						case *v1.Pod:
0000000000000000000000000000000000000000;;							if err := podutil.SetInitContainersAndStatuses(t); err != nil {
0000000000000000000000000000000000000000;;								Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							status := t.Status.InitContainerStatuses[0]
0000000000000000000000000000000000000000;;							if status.RestartCount < 3 {
0000000000000000000000000000000000000000;;								return false, nil
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							framework.Logf("init container has failed twice: %#v", t)
0000000000000000000000000000000000000000;;							// TODO: more conditions
0000000000000000000000000000000000000000;;							return true, nil
0000000000000000000000000000000000000000;;						default:
0000000000000000000000000000000000000000;;							return false, fmt.Errorf("unexpected object: %#v", t)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				framework.CheckInvariants(wr.Events(), framework.ContainerInitInvariant)
0000000000000000000000000000000000000000;;				endPod := event.Object.(*v1.Pod)
0000000000000000000000000000000000000000;;				if err := podutil.SetInitContainersAndStatuses(endPod); err != nil {
0000000000000000000000000000000000000000;;					Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Expect(endPod.Status.Phase).To(Equal(v1.PodPending))
0000000000000000000000000000000000000000;;				_, init := podutil.GetPodCondition(&endPod.Status, v1.PodInitialized)
0000000000000000000000000000000000000000;;				Expect(init).NotTo(BeNil())
0000000000000000000000000000000000000000;;				Expect(init.Status).To(Equal(v1.ConditionFalse))
0000000000000000000000000000000000000000;;				Expect(init.Reason).To(Equal("ContainersNotInitialized"))
0000000000000000000000000000000000000000;;				Expect(init.Message).To(Equal("containers with incomplete status: [init1 init2]"))
0000000000000000000000000000000000000000;;				Expect(len(endPod.Status.InitContainerStatuses)).To(Equal(2))
0000000000000000000000000000000000000000;;				stable = false
0000000000000000000000000000000000000000;;				name := "pod-init-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				pod.Name = name
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should not start app containers and fail the pod if init containers fail on a RestartNever pod", func() {
0000000000000000000000000000000000000000;;			framework.SkipIfContainerRuntimeIs("rkt") // #25988
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("creating the pod")
0000000000000000000000000000000000000000;;			name := "pod-init-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			value := strconv.Itoa(time.Now().Nanosecond())
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: name,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"name": "foo",
0000000000000000000000000000000000000000;;						"time": value,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;					InitContainers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "init1",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/true"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "init2",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/false"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "run1",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"/bin/true"},
0000000000000000000000000000000000000000;;							Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;								Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;									v1.ResourceCPU:    *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;									v1.ResourceMemory: *resource.NewQuantity(30*1024*1024, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			stable := true
0000000000000000000000000000000000000000;;			for i := 0; i < 2; i++ {
0000000000000000000000000000000000000000;;				if !stable {
0000000000000000000000000000000000000000;;					framework.Logf("PodSpec: initContainers in metadata.annotation")
0000000000000000000000000000000000000000;;					if err := podutil.SetInitContainersAnnotations(pod); err != nil {
0000000000000000000000000000000000000000;;						Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					framework.Logf("PodSpec: initContainers in spec.initContainers")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				startedPod := podClient.Create(pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w, err := podClient.Watch(metav1.SingleObject(startedPod.ObjectMeta))
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred(), "error watching a pod")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				wr := watch.NewRecorder(w)
0000000000000000000000000000000000000000;;				event, err := watch.Until(
0000000000000000000000000000000000000000;;					framework.PodStartTimeout, wr,
0000000000000000000000000000000000000000;;					// check for the second container to fail at least once
0000000000000000000000000000000000000000;;					func(evt watch.Event) (bool, error) {
0000000000000000000000000000000000000000;;						switch t := evt.Object.(type) {
0000000000000000000000000000000000000000;;						case *v1.Pod:
0000000000000000000000000000000000000000;;							if err := podutil.SetInitContainersAndStatuses(t); err != nil {
0000000000000000000000000000000000000000;;								Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							for _, status := range t.Status.ContainerStatuses {
0000000000000000000000000000000000000000;;								if status.State.Waiting == nil {
0000000000000000000000000000000000000000;;									return false, fmt.Errorf("container %q should not be out of waiting: %#v", status.Name, status)
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;								if status.State.Waiting.Reason != "PodInitializing" {
0000000000000000000000000000000000000000;;									return false, fmt.Errorf("container %q should have reason PodInitializing: %#v", status.Name, status)
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if len(t.Status.InitContainerStatuses) != 2 {
0000000000000000000000000000000000000000;;								return false, nil
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							status := t.Status.InitContainerStatuses[0]
0000000000000000000000000000000000000000;;							if status.State.Terminated == nil {
0000000000000000000000000000000000000000;;								if status.State.Waiting != nil && status.State.Waiting.Reason != "PodInitializing" {
0000000000000000000000000000000000000000;;									return false, fmt.Errorf("second init container should have reason PodInitializing: %#v", status)
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;								return false, nil
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if status.State.Terminated != nil && status.State.Terminated.ExitCode != 0 {
0000000000000000000000000000000000000000;;								return false, fmt.Errorf("first init container should have exitCode != 0: %#v", status)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							status = t.Status.InitContainerStatuses[1]
0000000000000000000000000000000000000000;;							if status.State.Terminated == nil {
0000000000000000000000000000000000000000;;								return false, nil
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if status.State.Terminated.ExitCode == 0 {
0000000000000000000000000000000000000000;;								return false, fmt.Errorf("second init container should have failed: %#v", status)
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							return true, nil
0000000000000000000000000000000000000000;;						default:
0000000000000000000000000000000000000000;;							return false, fmt.Errorf("unexpected object: %#v", t)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					conditions.PodCompleted,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				framework.CheckInvariants(wr.Events(), framework.ContainerInitInvariant)
0000000000000000000000000000000000000000;;				endPod := event.Object.(*v1.Pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Expect(endPod.Status.Phase).To(Equal(v1.PodFailed))
0000000000000000000000000000000000000000;;				_, init := podutil.GetPodCondition(&endPod.Status, v1.PodInitialized)
0000000000000000000000000000000000000000;;				Expect(init).NotTo(BeNil())
0000000000000000000000000000000000000000;;				Expect(init.Status).To(Equal(v1.ConditionFalse))
0000000000000000000000000000000000000000;;				Expect(init.Reason).To(Equal("ContainersNotInitialized"))
0000000000000000000000000000000000000000;;				Expect(init.Message).To(Equal("containers with incomplete status: [init2]"))
0000000000000000000000000000000000000000;;				Expect(len(endPod.Status.InitContainerStatuses)).To(Equal(2))
0000000000000000000000000000000000000000;;				Expect(endPod.Status.ContainerStatuses[0].State.Waiting).ToNot(BeNil())
0000000000000000000000000000000000000000;;				stable = false
0000000000000000000000000000000000000000;;				name := "pod-init-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;				pod.Name = name
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
