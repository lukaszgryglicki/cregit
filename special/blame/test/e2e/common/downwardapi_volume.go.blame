0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
90827a6c1ad71df24e240f9217dba5fe28b268b6;test/e2e/downwardapi_volume.go[test/e2e/downwardapi_volume.go][test/e2e/common/downwardapi_volume.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Downward API volume", func() {
0000000000000000000000000000000000000000;;		// How long to wait for a log pod to be displayed
0000000000000000000000000000000000000000;;		const podLogTimeout = 2 * time.Minute
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("downward-api")
0000000000000000000000000000000000000000;;		var podClient *framework.PodClient
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			podClient = f.PodClient()
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide podname only [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumePodForSimpleTest(podName, "/etc/podname")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s\n", podName),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should set DefaultMode on files [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			defaultMode := int32(0400)
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumePodForModeTest(podName, "/etc/podname", nil, &defaultMode)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				"mode of file \"/etc/podname\": -r--------",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should set mode on item file [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			mode := int32(0400)
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumePodForModeTest(podName, "/etc/podname", &mode, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				"mode of file \"/etc/podname\": -r--------",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide podname as non-root with fsgroup [Feature:FSGroup] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "metadata-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			uid := int64(1001)
0000000000000000000000000000000000000000;;			gid := int64(1234)
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumePodForSimpleTest(podName, "/etc/podname")
0000000000000000000000000000000000000000;;			pod.Spec.SecurityContext = &v1.PodSecurityContext{
0000000000000000000000000000000000000000;;				RunAsUser: &uid,
0000000000000000000000000000000000000000;;				FSGroup:   &gid,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s\n", podName),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide podname as non-root with fsgroup and defaultMode [Feature:FSGroup] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "metadata-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			uid := int64(1001)
0000000000000000000000000000000000000000;;			gid := int64(1234)
0000000000000000000000000000000000000000;;			mode := int32(0440) /* setting fsGroup sets mode to at least 440 */
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumePodForModeTest(podName, "/etc/podname", &mode, nil)
0000000000000000000000000000000000000000;;			pod.Spec.SecurityContext = &v1.PodSecurityContext{
0000000000000000000000000000000000000000;;				RunAsUser: &uid,
0000000000000000000000000000000000000000;;				FSGroup:   &gid,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				"mode of file \"/etc/podname\": -r--r-----",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should update labels on modification [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			labels := map[string]string{}
0000000000000000000000000000000000000000;;			labels["key1"] = "value1"
0000000000000000000000000000000000000000;;			labels["key2"] = "value2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			podName := "labelsupdate" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumePodForUpdateTest(podName, labels, map[string]string{}, "/etc/labels")
0000000000000000000000000000000000000000;;			containerName := "client-container"
0000000000000000000000000000000000000000;;			By("Creating the pod")
0000000000000000000000000000000000000000;;			podClient.CreateSync(pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Eventually(func() (string, error) {
0000000000000000000000000000000000000000;;				return framework.GetPodLogs(f.ClientSet, f.Namespace.Name, podName, containerName)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;				podLogTimeout, framework.Poll).Should(ContainSubstring("key1=\"value1\"\n"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			//modify labels
0000000000000000000000000000000000000000;;			podClient.Update(podName, func(pod *v1.Pod) {
0000000000000000000000000000000000000000;;				pod.Labels["key3"] = "value3"
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Eventually(func() (string, error) {
0000000000000000000000000000000000000000;;				return framework.GetPodLogs(f.ClientSet, f.Namespace.Name, pod.Name, containerName)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;				podLogTimeout, framework.Poll).Should(ContainSubstring("key3=\"value3\"\n"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should update annotations on modification [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			annotations := map[string]string{}
0000000000000000000000000000000000000000;;			annotations["builder"] = "bar"
0000000000000000000000000000000000000000;;			podName := "annotationupdate" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumePodForUpdateTest(podName, map[string]string{}, annotations, "/etc/annotations")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			containerName := "client-container"
0000000000000000000000000000000000000000;;			By("Creating the pod")
0000000000000000000000000000000000000000;;			podClient.CreateSync(pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pod, err := podClient.Get(pod.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred(), "Failed to get pod %q", pod.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Eventually(func() (string, error) {
0000000000000000000000000000000000000000;;				return framework.GetPodLogs(f.ClientSet, f.Namespace.Name, pod.Name, containerName)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;				podLogTimeout, framework.Poll).Should(ContainSubstring("builder=\"bar\"\n"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			//modify annotations
0000000000000000000000000000000000000000;;			podClient.Update(podName, func(pod *v1.Pod) {
0000000000000000000000000000000000000000;;				pod.Annotations["builder"] = "foo"
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Eventually(func() (string, error) {
0000000000000000000000000000000000000000;;				return framework.GetPodLogs(f.ClientSet, f.Namespace.Name, pod.Name, containerName)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;				podLogTimeout, framework.Poll).Should(ContainSubstring("builder=\"foo\"\n"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide container's cpu limit [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumeForContainerResources(podName, "/etc/cpu_limit")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("2\n"),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide container's memory limit [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumeForContainerResources(podName, "/etc/memory_limit")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("67108864\n"),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide container's cpu request [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumeForContainerResources(podName, "/etc/cpu_request")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("1\n"),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide container's memory request [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumeForContainerResources(podName, "/etc/memory_request")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("downward API volume plugin", pod, 0, []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("33554432\n"),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide node allocatable (cpu) as default cpu limit if the limit is not set [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumeForDefaultContainerResources(podName, "/etc/cpu_limit")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutputRegexp("downward API volume plugin", pod, 0, []string{"[1-9]"})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide node allocatable (memory) as default memory limit if the limit is not set [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			podName := "downwardapi-volume-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			pod := downwardAPIVolumeForDefaultContainerResources(podName, "/etc/memory_limit")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutputRegexp("downward API volume plugin", pod, 0, []string{"[1-9]"})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func downwardAPIVolumePodForModeTest(name, filePath string, itemMode, defaultMode *int32) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := downwardAPIVolumeBasePod(name, nil, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []v1.Container{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:    "client-container",
0000000000000000000000000000000000000000;;				Image:   "gcr.io/google_containers/mounttest:0.8",
0000000000000000000000000000000000000000;;				Command: []string{"/mt", "--file_mode=" + filePath},
0000000000000000000000000000000000000000;;				VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "podinfo",
0000000000000000000000000000000000000000;;						MountPath: "/etc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if itemMode != nil {
0000000000000000000000000000000000000000;;			pod.Spec.Volumes[0].VolumeSource.DownwardAPI.Items[0].Mode = itemMode
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if defaultMode != nil {
0000000000000000000000000000000000000000;;			pod.Spec.Volumes[0].VolumeSource.DownwardAPI.DefaultMode = defaultMode
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func downwardAPIVolumePodForSimpleTest(name string, filePath string) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := downwardAPIVolumeBasePod(name, nil, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []v1.Container{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:    "client-container",
0000000000000000000000000000000000000000;;				Image:   "gcr.io/google_containers/mounttest:0.8",
0000000000000000000000000000000000000000;;				Command: []string{"/mt", "--file_content=" + filePath},
0000000000000000000000000000000000000000;;				VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "podinfo",
0000000000000000000000000000000000000000;;						MountPath: "/etc",
0000000000000000000000000000000000000000;;						ReadOnly:  false,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func downwardAPIVolumeForContainerResources(name string, filePath string) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := downwardAPIVolumeBasePod(name, nil, nil)
0000000000000000000000000000000000000000;;		pod.Spec.Containers = downwardAPIVolumeBaseContainers("client-container", filePath)
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func downwardAPIVolumeForDefaultContainerResources(name string, filePath string) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := downwardAPIVolumeBasePod(name, nil, nil)
0000000000000000000000000000000000000000;;		pod.Spec.Containers = downwardAPIVolumeDefaultBaseContainer("client-container", filePath)
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func downwardAPIVolumeBaseContainers(name, filePath string) []v1.Container {
0000000000000000000000000000000000000000;;		return []v1.Container{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:    name,
0000000000000000000000000000000000000000;;				Image:   "gcr.io/google_containers/mounttest:0.8",
0000000000000000000000000000000000000000;;				Command: []string{"/mt", "--file_content=" + filePath},
0000000000000000000000000000000000000000;;				Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;					Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;						v1.ResourceCPU:    resource.MustParse("250m"),
0000000000000000000000000000000000000000;;						v1.ResourceMemory: resource.MustParse("32Mi"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;						v1.ResourceCPU:    resource.MustParse("1250m"),
0000000000000000000000000000000000000000;;						v1.ResourceMemory: resource.MustParse("64Mi"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "podinfo",
0000000000000000000000000000000000000000;;						MountPath: "/etc",
0000000000000000000000000000000000000000;;						ReadOnly:  false,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func downwardAPIVolumeDefaultBaseContainer(name, filePath string) []v1.Container {
0000000000000000000000000000000000000000;;		return []v1.Container{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:    name,
0000000000000000000000000000000000000000;;				Image:   "gcr.io/google_containers/mounttest:0.8",
0000000000000000000000000000000000000000;;				Command: []string{"/mt", "--file_content=" + filePath},
0000000000000000000000000000000000000000;;				VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "podinfo",
0000000000000000000000000000000000000000;;						MountPath: "/etc",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func downwardAPIVolumePodForUpdateTest(name string, labels, annotations map[string]string, filePath string) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := downwardAPIVolumeBasePod(name, labels, annotations)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []v1.Container{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:    "client-container",
0000000000000000000000000000000000000000;;				Image:   "gcr.io/google_containers/mounttest:0.8",
0000000000000000000000000000000000000000;;				Command: []string{"/mt", "--break_on_expected_content=false", "--retry_time=120", "--file_content_in_loop=" + filePath},
0000000000000000000000000000000000000000;;				VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:      "podinfo",
0000000000000000000000000000000000000000;;						MountPath: "/etc",
0000000000000000000000000000000000000000;;						ReadOnly:  false,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		applyLabelsAndAnnotationsToDownwardAPIPod(labels, annotations, pod)
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func downwardAPIVolumeBasePod(name string, labels, annotations map[string]string) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:        name,
0000000000000000000000000000000000000000;;				Labels:      labels,
0000000000000000000000000000000000000000;;				Annotations: annotations,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Volumes: []v1.Volume{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "podinfo",
0000000000000000000000000000000000000000;;						VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;							DownwardAPI: &v1.DownwardAPIVolumeSource{
0000000000000000000000000000000000000000;;								Items: []v1.DownwardAPIVolumeFile{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Path: "podname",
0000000000000000000000000000000000000000;;										FieldRef: &v1.ObjectFieldSelector{
0000000000000000000000000000000000000000;;											APIVersion: "v1",
0000000000000000000000000000000000000000;;											FieldPath:  "metadata.name",
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Path: "cpu_limit",
0000000000000000000000000000000000000000;;										ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;											ContainerName: "client-container",
0000000000000000000000000000000000000000;;											Resource:      "limits.cpu",
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Path: "cpu_request",
0000000000000000000000000000000000000000;;										ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;											ContainerName: "client-container",
0000000000000000000000000000000000000000;;											Resource:      "requests.cpu",
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Path: "memory_limit",
0000000000000000000000000000000000000000;;										ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;											ContainerName: "client-container",
0000000000000000000000000000000000000000;;											Resource:      "limits.memory",
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Path: "memory_request",
0000000000000000000000000000000000000000;;										ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;											ContainerName: "client-container",
0000000000000000000000000000000000000000;;											Resource:      "requests.memory",
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func applyLabelsAndAnnotationsToDownwardAPIPod(labels, annotations map[string]string, pod *v1.Pod) {
0000000000000000000000000000000000000000;;		if len(labels) > 0 {
0000000000000000000000000000000000000000;;			pod.Spec.Volumes[0].DownwardAPI.Items = append(pod.Spec.Volumes[0].DownwardAPI.Items, v1.DownwardAPIVolumeFile{
0000000000000000000000000000000000000000;;				Path: "labels",
0000000000000000000000000000000000000000;;				FieldRef: &v1.ObjectFieldSelector{
0000000000000000000000000000000000000000;;					APIVersion: "v1",
0000000000000000000000000000000000000000;;					FieldPath:  "metadata.labels",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(annotations) > 0 {
0000000000000000000000000000000000000000;;			pod.Spec.Volumes[0].DownwardAPI.Items = append(pod.Spec.Volumes[0].DownwardAPI.Items, v1.DownwardAPIVolumeFile{
0000000000000000000000000000000000000000;;				Path: "annotations",
0000000000000000000000000000000000000000;;				FieldRef: &v1.ObjectFieldSelector{
0000000000000000000000000000000000000000;;					APIVersion: "v1",
0000000000000000000000000000000000000000;;					FieldPath:  "metadata.annotations",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: add test-webserver example as pointed out in https://github.com/kubernetes/kubernetes/pull/5093#discussion-diff-37606771
