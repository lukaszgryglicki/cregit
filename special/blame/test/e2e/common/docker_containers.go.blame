0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
142faf500dfee288a2eae8b175f6d235b6c6bf5d;test/e2e/docker_containers.go[test/e2e/docker_containers.go][test/e2e/common/docker_containers.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Docker Containers", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("containers")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should use the image defaults if command and args are blank [Conformance]", func() {
0000000000000000000000000000000000000000;;			f.TestContainerOutput("use defaults", entrypointTestPod(), 0, []string{
0000000000000000000000000000000000000000;;				"[/ep default arguments]",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should be able to override the image's default arguments (docker cmd) [Conformance]", func() {
0000000000000000000000000000000000000000;;			pod := entrypointTestPod()
0000000000000000000000000000000000000000;;			pod.Spec.Containers[0].Args = []string{"override", "arguments"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("override arguments", pod, 0, []string{
0000000000000000000000000000000000000000;;				"[/ep override arguments]",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Note: when you override the entrypoint, the image's arguments (docker cmd)
0000000000000000000000000000000000000000;;		// are ignored.
0000000000000000000000000000000000000000;;		It("should be able to override the image's default commmand (docker entrypoint) [Conformance]", func() {
0000000000000000000000000000000000000000;;			pod := entrypointTestPod()
0000000000000000000000000000000000000000;;			pod.Spec.Containers[0].Command = []string{"/ep-2"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("override command", pod, 0, []string{
0000000000000000000000000000000000000000;;				"[/ep-2]",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should be able to override the image's default command and arguments [Conformance]", func() {
0000000000000000000000000000000000000000;;			pod := entrypointTestPod()
0000000000000000000000000000000000000000;;			pod.Spec.Containers[0].Command = []string{"/ep-2"}
0000000000000000000000000000000000000000;;			pod.Spec.Containers[0].Args = []string{"override", "arguments"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f.TestContainerOutput("override all", pod, 0, []string{
0000000000000000000000000000000000000000;;				"[/ep-2 override arguments]",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const testContainerName = "test-container"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Return a prototypical entrypoint test pod
0000000000000000000000000000000000000000;;	func entrypointTestPod() *v1.Pod {
0000000000000000000000000000000000000000;;		podName := "client-containers-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		one := int64(1)
0000000000000000000000000000000000000000;;		return &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: podName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  testContainerName,
0000000000000000000000000000000000000000;;						Image: "gcr.io/google_containers/eptest:0.1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy:                 v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &one,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
