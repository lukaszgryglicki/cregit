0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9d7f4b3aef3e04efc7b57d59533191e2e89aeb67;test/e2e/kubelet_etc_hosts.go[test/e2e/kubelet_etc_hosts.go][test/e2e/common/kubelet_etc_hosts.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		etcHostsImageName          = "gcr.io/google_containers/netexec:1.7"
0000000000000000000000000000000000000000;;		etcHostsPodName            = "test-pod"
0000000000000000000000000000000000000000;;		etcHostsHostNetworkPodName = "test-host-network-pod"
0000000000000000000000000000000000000000;;		etcHostsPartialContent     = "# Kubernetes-managed hosts file."
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubeletManagedHostConfig struct {
0000000000000000000000000000000000000000;;		hostNetworkPod *v1.Pod
0000000000000000000000000000000000000000;;		pod            *v1.Pod
0000000000000000000000000000000000000000;;		f              *framework.Framework
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("KubeletManagedEtcHosts", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("e2e-kubelet-etc-hosts")
0000000000000000000000000000000000000000;;		config := &KubeletManagedHostConfig{
0000000000000000000000000000000000000000;;			f: f,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should test kubelet managed /etc/hosts file [Conformance]", func() {
0000000000000000000000000000000000000000;;			By("Setting up the test")
0000000000000000000000000000000000000000;;			config.setup()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Running the test")
0000000000000000000000000000000000000000;;			config.verifyEtcHosts()
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (config *KubeletManagedHostConfig) verifyEtcHosts() {
0000000000000000000000000000000000000000;;		By("Verifying /etc/hosts of container is kubelet-managed for pod with hostNetwork=false")
0000000000000000000000000000000000000000;;		assertManagedStatus(config, etcHostsPodName, true, "busybox-1")
0000000000000000000000000000000000000000;;		assertManagedStatus(config, etcHostsPodName, true, "busybox-2")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("Verifying /etc/hosts of container is not kubelet-managed since container specifies /etc/hosts mount")
0000000000000000000000000000000000000000;;		assertManagedStatus(config, etcHostsPodName, false, "busybox-3")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("Verifying /etc/hosts content of container is not kubelet-managed for pod with hostNetwork=true")
0000000000000000000000000000000000000000;;		assertManagedStatus(config, etcHostsHostNetworkPodName, false, "busybox-1")
0000000000000000000000000000000000000000;;		assertManagedStatus(config, etcHostsHostNetworkPodName, false, "busybox-2")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (config *KubeletManagedHostConfig) setup() {
0000000000000000000000000000000000000000;;		By("Creating hostNetwork=false pod")
0000000000000000000000000000000000000000;;		config.createPodWithoutHostNetwork()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By("Creating hostNetwork=true pod")
0000000000000000000000000000000000000000;;		config.createPodWithHostNetwork()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (config *KubeletManagedHostConfig) createPodWithoutHostNetwork() {
0000000000000000000000000000000000000000;;		podSpec := config.createPodSpec(etcHostsPodName)
0000000000000000000000000000000000000000;;		config.pod = config.f.PodClient().CreateSync(podSpec)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (config *KubeletManagedHostConfig) createPodWithHostNetwork() {
0000000000000000000000000000000000000000;;		podSpec := config.createPodSpecWithHostNetwork(etcHostsHostNetworkPodName)
0000000000000000000000000000000000000000;;		config.hostNetworkPod = config.f.PodClient().CreateSync(podSpec)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertManagedStatus(
0000000000000000000000000000000000000000;;		config *KubeletManagedHostConfig, podName string, expectedIsManaged bool, name string) {
0000000000000000000000000000000000000000;;		// TODO: workaround for https://github.com/kubernetes/kubernetes/issues/34256
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Retry until timeout for the contents of /etc/hosts to show
0000000000000000000000000000000000000000;;		// up. Note: if /etc/hosts is properly mounted, then this will
0000000000000000000000000000000000000000;;		// succeed immediately.
0000000000000000000000000000000000000000;;		const retryTimeout = 30 * time.Second
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		retryCount := 0
0000000000000000000000000000000000000000;;		etcHostsContent := ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for startTime := time.Now(); time.Since(startTime) < retryTimeout; {
0000000000000000000000000000000000000000;;			etcHostsContent = config.getEtcHostsContent(podName, name)
0000000000000000000000000000000000000000;;			isManaged := strings.Contains(etcHostsContent, etcHostsPartialContent)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if expectedIsManaged == isManaged {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			glog.Warningf(
0000000000000000000000000000000000000000;;				"For pod: %s, name: %s, expected %t, actual %t (/etc/hosts was %q), retryCount: %d",
0000000000000000000000000000000000000000;;				podName, name, expectedIsManaged, isManaged, etcHostsContent, retryCount)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			retryCount++
0000000000000000000000000000000000000000;;			time.Sleep(100 * time.Millisecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if expectedIsManaged {
0000000000000000000000000000000000000000;;			framework.Failf(
0000000000000000000000000000000000000000;;				"/etc/hosts file should be kubelet managed (name: %s, retries: %d). /etc/hosts contains %q",
0000000000000000000000000000000000000000;;				name, retryCount, etcHostsContent)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			framework.Failf(
0000000000000000000000000000000000000000;;				"/etc/hosts file should no be kubelet managed (name: %s, retries: %d). /etc/hosts contains %q",
0000000000000000000000000000000000000000;;				name, retryCount, etcHostsContent)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (config *KubeletManagedHostConfig) getEtcHostsContent(podName, containerName string) string {
0000000000000000000000000000000000000000;;		return config.f.ExecCommandInContainer(podName, containerName, "cat", "/etc/hosts")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (config *KubeletManagedHostConfig) createPodSpec(podName string) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: podName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "busybox-1",
0000000000000000000000000000000000000000;;						Image:           etcHostsImageName,
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						Command: []string{
0000000000000000000000000000000000000000;;							"sleep",
0000000000000000000000000000000000000000;;							"900",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "busybox-2",
0000000000000000000000000000000000000000;;						Image:           etcHostsImageName,
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						Command: []string{
0000000000000000000000000000000000000000;;							"sleep",
0000000000000000000000000000000000000000;;							"900",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "busybox-3",
0000000000000000000000000000000000000000;;						Image:           etcHostsImageName,
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						Command: []string{
0000000000000000000000000000000000000000;;							"sleep",
0000000000000000000000000000000000000000;;							"900",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:      "host-etc-hosts",
0000000000000000000000000000000000000000;;								MountPath: "/etc/hosts",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Volumes: []v1.Volume{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "host-etc-hosts",
0000000000000000000000000000000000000000;;						VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;							HostPath: &v1.HostPathVolumeSource{
0000000000000000000000000000000000000000;;								Path: "/etc/hosts",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (config *KubeletManagedHostConfig) createPodSpecWithHostNetwork(podName string) *v1.Pod {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: podName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				HostNetwork:     true,
0000000000000000000000000000000000000000;;				SecurityContext: &v1.PodSecurityContext{},
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "busybox-1",
0000000000000000000000000000000000000000;;						Image:           etcHostsImageName,
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						Command: []string{
0000000000000000000000000000000000000000;;							"sleep",
0000000000000000000000000000000000000000;;							"900",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "busybox-2",
0000000000000000000000000000000000000000;;						Image:           etcHostsImageName,
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						Command: []string{
0000000000000000000000000000000000000000;;							"sleep",
0000000000000000000000000000000000000000;;							"900",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
