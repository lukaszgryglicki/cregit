0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8253e2578105f20f85f6eb57c24b08c01fdab4f6;test/e2e/downward_api.go[test/e2e/downward_api.go][test/e2e/common/downward_api.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Downward API", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("downward-api")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide pod name and namespace as env vars [Conformance]", func() {
0000000000000000000000000000000000000000;;			podName := "downward-api-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			env := []v1.EnvVar{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "POD_NAME",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &v1.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: "v1",
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "POD_NAMESPACE",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &v1.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: "v1",
0000000000000000000000000000000000000000;;							FieldPath:  "metadata.namespace",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectations := []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("POD_NAME=%v", podName),
0000000000000000000000000000000000000000;;				fmt.Sprintf("POD_NAMESPACE=%v", f.Namespace.Name),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			testDownwardAPI(f, podName, env, expectations)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide pod and host IP as an env var [Conformance]", func() {
0000000000000000000000000000000000000000;;			podName := "downward-api-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			env := []v1.EnvVar{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "POD_IP",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &v1.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: "v1",
0000000000000000000000000000000000000000;;							FieldPath:  "status.podIP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "HOST_IP",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						FieldRef: &v1.ObjectFieldSelector{
0000000000000000000000000000000000000000;;							APIVersion: "v1",
0000000000000000000000000000000000000000;;							FieldPath:  "status.hostIP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectations := []string{
0000000000000000000000000000000000000000;;				"POD_IP=(?:\\d+)\\.(?:\\d+)\\.(?:\\d+)\\.(?:\\d+)",
0000000000000000000000000000000000000000;;				"HOST_IP=(?:\\d+)\\.(?:\\d+)\\.(?:\\d+)\\.(?:\\d+)",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			testDownwardAPI(f, podName, env, expectations)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide container's limits.cpu/memory and requests.cpu/memory as env vars [Conformance]", func() {
0000000000000000000000000000000000000000;;			podName := "downward-api-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			env := []v1.EnvVar{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "CPU_LIMIT",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;							Resource: "limits.cpu",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "MEMORY_LIMIT",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;							Resource: "limits.memory",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "CPU_REQUEST",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;							Resource: "requests.cpu",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "MEMORY_REQUEST",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;							Resource: "requests.memory",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			expectations := []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("CPU_LIMIT=2"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("MEMORY_LIMIT=67108864"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("CPU_REQUEST=1"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("MEMORY_REQUEST=33554432"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			testDownwardAPI(f, podName, env, expectations)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should provide default limits.cpu/memory from node allocatable [Conformance]", func() {
0000000000000000000000000000000000000000;;			podName := "downward-api-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			env := []v1.EnvVar{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "CPU_LIMIT",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;							Resource: "limits.cpu",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "MEMORY_LIMIT",
0000000000000000000000000000000000000000;;					ValueFrom: &v1.EnvVarSource{
0000000000000000000000000000000000000000;;						ResourceFieldRef: &v1.ResourceFieldSelector{
0000000000000000000000000000000000000000;;							Resource: "limits.memory",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			expectations := []string{
0000000000000000000000000000000000000000;;				fmt.Sprintf("CPU_LIMIT=[1-9]"),
0000000000000000000000000000000000000000;;				fmt.Sprintf("MEMORY_LIMIT=[1-9]"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:   podName,
0000000000000000000000000000000000000000;;					Labels: map[string]string{"name": podName},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:    "dapi-container",
0000000000000000000000000000000000000000;;							Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;							Command: []string{"sh", "-c", "env"},
0000000000000000000000000000000000000000;;							Env:     env,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			testDownwardAPIUsingPod(f, pod, env, expectations)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testDownwardAPI(f *framework.Framework, podName string, env []v1.EnvVar, expectations []string) {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   podName,
0000000000000000000000000000000000000000;;				Labels: map[string]string{"name": podName},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:    "dapi-container",
0000000000000000000000000000000000000000;;						Image:   "gcr.io/google_containers/busybox:1.24",
0000000000000000000000000000000000000000;;						Command: []string{"sh", "-c", "env"},
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceCPU:    resource.MustParse("250m"),
0000000000000000000000000000000000000000;;								v1.ResourceMemory: resource.MustParse("32Mi"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceCPU:    resource.MustParse("1250m"),
0000000000000000000000000000000000000000;;								v1.ResourceMemory: resource.MustParse("64Mi"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Env: env,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testDownwardAPIUsingPod(f, pod, env, expectations)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testDownwardAPIUsingPod(f *framework.Framework, pod *v1.Pod, env []v1.EnvVar, expectations []string) {
0000000000000000000000000000000000000000;;		f.TestContainerOutputRegexp("downward api env vars", pod, 0, expectations)
0000000000000000000000000000000000000000;;	}
