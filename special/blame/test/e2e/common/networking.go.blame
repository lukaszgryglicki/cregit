0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bc6a98c3d757bfbb5f491c94d1eaedbad9971f62;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Networking", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("pod-network-test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("Granular Checks: Pods", func() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Try to hit all endpoints through a test container, retry 5 times,
0000000000000000000000000000000000000000;;			// expect exactly one unique hostname. Each of these endpoints reports
0000000000000000000000000000000000000000;;			// its own hostname.
0000000000000000000000000000000000000000;;			It("should function for intra-pod communication: http [Conformance]", func() {
0000000000000000000000000000000000000000;;				config := framework.NewCoreNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				for _, endpointPod := range config.EndpointPods {
0000000000000000000000000000000000000000;;					config.DialFromTestContainer("http", endpointPod.Status.PodIP, framework.EndpointHttpPort, config.MaxTries, 0, sets.NewString(endpointPod.Name))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for intra-pod communication: udp [Conformance]", func() {
0000000000000000000000000000000000000000;;				config := framework.NewCoreNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				for _, endpointPod := range config.EndpointPods {
0000000000000000000000000000000000000000;;					config.DialFromTestContainer("udp", endpointPod.Status.PodIP, framework.EndpointUdpPort, config.MaxTries, 0, sets.NewString(endpointPod.Name))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for node-pod communication: http [Conformance]", func() {
0000000000000000000000000000000000000000;;				config := framework.NewCoreNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				for _, endpointPod := range config.EndpointPods {
0000000000000000000000000000000000000000;;					config.DialFromNode("http", endpointPod.Status.PodIP, framework.EndpointHttpPort, config.MaxTries, 0, sets.NewString(endpointPod.Name))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should function for node-pod communication: udp [Conformance]", func() {
0000000000000000000000000000000000000000;;				config := framework.NewCoreNetworkingTestConfig(f)
0000000000000000000000000000000000000000;;				for _, endpointPod := range config.EndpointPods {
0000000000000000000000000000000000000000;;					config.DialFromNode("udp", endpointPod.Status.PodIP, framework.EndpointUdpPort, config.MaxTries, 0, sets.NewString(endpointPod.Name))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
