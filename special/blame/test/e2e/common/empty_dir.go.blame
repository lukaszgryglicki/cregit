0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
76719e07d72d88e2f0e10b40c168c2b9edf34079;test/e2e/empty_dir.go[test/e2e/empty_dir.go][test/e2e/common/empty_dir.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		testImageRootUid    = "gcr.io/google_containers/mounttest:0.8"
0000000000000000000000000000000000000000;;		testImageNonRootUid = "gcr.io/google_containers/mounttest-user:0.5"
0000000000000000000000000000000000000000;;		volumePath          = "/test-volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("EmptyDir volumes", func() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("emptydir")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("when FSGroup is specified [Feature:FSGroup]", func() {
0000000000000000000000000000000000000000;;			It("new files should be created with FSGroup ownership when container is root [sig-storage]", func() {
0000000000000000000000000000000000000000;;				doTestSetgidFSGroup(f, testImageRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("new files should be created with FSGroup ownership when container is non-root [sig-storage]", func() {
0000000000000000000000000000000000000000;;				doTestSetgidFSGroup(f, testImageNonRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("nonexistent volume subPath should have the correct mode and owner using FSGroup [sig-storage]", func() {
0000000000000000000000000000000000000000;;				doTestSubPathFSGroup(f, testImageNonRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("files with FSGroup ownership should support (root,0644,tmpfs) [sig-storage]", func() {
0000000000000000000000000000000000000000;;				doTest0644FSGroup(f, testImageRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("volume on default medium should have the correct mode using FSGroup [sig-storage]", func() {
0000000000000000000000000000000000000000;;				doTestVolumeModeFSGroup(f, testImageRootUid, v1.StorageMediumDefault)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("volume on tmpfs should have the correct mode using FSGroup [sig-storage]", func() {
0000000000000000000000000000000000000000;;				doTestVolumeModeFSGroup(f, testImageRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("volume on tmpfs should have the correct mode [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTestVolumeMode(f, testImageRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (root,0644,tmpfs) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0644(f, testImageRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (root,0666,tmpfs) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0666(f, testImageRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (root,0777,tmpfs) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0777(f, testImageRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (non-root,0644,tmpfs) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0644(f, testImageNonRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (non-root,0666,tmpfs) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0666(f, testImageNonRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (non-root,0777,tmpfs) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0777(f, testImageNonRootUid, v1.StorageMediumMemory)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("volume on default medium should have the correct mode [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTestVolumeMode(f, testImageRootUid, v1.StorageMediumDefault)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (root,0644,default) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0644(f, testImageRootUid, v1.StorageMediumDefault)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (root,0666,default) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0666(f, testImageRootUid, v1.StorageMediumDefault)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (root,0777,default) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0777(f, testImageRootUid, v1.StorageMediumDefault)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (non-root,0644,default) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0644(f, testImageNonRootUid, v1.StorageMediumDefault)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (non-root,0666,default) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0666(f, testImageNonRootUid, v1.StorageMediumDefault)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support (non-root,0777,default) [Conformance] [sig-storage]", func() {
0000000000000000000000000000000000000000;;			doTest0777(f, testImageNonRootUid, v1.StorageMediumDefault)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		containerName = "test-container"
0000000000000000000000000000000000000000;;		volumeName    = "test-volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTestSetgidFSGroup(f *framework.Framework, image string, medium v1.StorageMedium) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			filePath = path.Join(volumePath, "test-file")
0000000000000000000000000000000000000000;;			source   = &v1.EmptyDirVolumeSource{Medium: medium}
0000000000000000000000000000000000000000;;			pod      = testPodWithVolume(testImageRootUid, volumePath, source)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].Args = []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("--fs_type=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--new_file_0660=%v", filePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_perm=%v", filePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_owner=%v", filePath),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(123)
0000000000000000000000000000000000000000;;		pod.Spec.SecurityContext.FSGroup = &fsGroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("emptydir 0644 on %v", formatMedium(medium))
0000000000000000000000000000000000000000;;		out := []string{
0000000000000000000000000000000000000000;;			"perms of file \"/test-volume/test-file\": -rw-rw----",
0000000000000000000000000000000000000000;;			"content of file \"/test-volume/test-file\": mount-tester new file",
0000000000000000000000000000000000000000;;			"owner GID of \"/test-volume/test-file\": 123",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			out = append(out, "mount type of \"/test-volume\": tmpfs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.TestContainerOutput(msg, pod, 0, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTestSubPathFSGroup(f *framework.Framework, image string, medium v1.StorageMedium) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			subPath = "test-sub"
0000000000000000000000000000000000000000;;			source  = &v1.EmptyDirVolumeSource{Medium: medium}
0000000000000000000000000000000000000000;;			pod     = testPodWithVolume(image, volumePath, source)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].Args = []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("--fs_type=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_perm=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_owner=%v", volumePath),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].VolumeMounts[0].SubPath = subPath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(123)
0000000000000000000000000000000000000000;;		pod.Spec.SecurityContext.FSGroup = &fsGroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("emptydir subpath on %v", formatMedium(medium))
0000000000000000000000000000000000000000;;		out := []string{
0000000000000000000000000000000000000000;;			"perms of file \"/test-volume\": -rwxrwxrwx",
0000000000000000000000000000000000000000;;			"owner UID of \"/test-volume\": 0",
0000000000000000000000000000000000000000;;			"owner GID of \"/test-volume\": 123",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			out = append(out, "mount type of \"/test-volume\": tmpfs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.TestContainerOutput(msg, pod, 0, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTestVolumeModeFSGroup(f *framework.Framework, image string, medium v1.StorageMedium) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			source = &v1.EmptyDirVolumeSource{Medium: medium}
0000000000000000000000000000000000000000;;			pod    = testPodWithVolume(testImageRootUid, volumePath, source)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].Args = []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("--fs_type=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_perm=%v", volumePath),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(1001)
0000000000000000000000000000000000000000;;		pod.Spec.SecurityContext.FSGroup = &fsGroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("emptydir volume type on %v", formatMedium(medium))
0000000000000000000000000000000000000000;;		out := []string{
0000000000000000000000000000000000000000;;			"perms of file \"/test-volume\": -rwxrwxrwx",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			out = append(out, "mount type of \"/test-volume\": tmpfs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.TestContainerOutput(msg, pod, 0, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTest0644FSGroup(f *framework.Framework, image string, medium v1.StorageMedium) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			filePath = path.Join(volumePath, "test-file")
0000000000000000000000000000000000000000;;			source   = &v1.EmptyDirVolumeSource{Medium: medium}
0000000000000000000000000000000000000000;;			pod      = testPodWithVolume(image, volumePath, source)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].Args = []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("--fs_type=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--new_file_0644=%v", filePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_perm=%v", filePath),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(123)
0000000000000000000000000000000000000000;;		pod.Spec.SecurityContext.FSGroup = &fsGroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("emptydir 0644 on %v", formatMedium(medium))
0000000000000000000000000000000000000000;;		out := []string{
0000000000000000000000000000000000000000;;			"perms of file \"/test-volume/test-file\": -rw-r--r--",
0000000000000000000000000000000000000000;;			"content of file \"/test-volume/test-file\": mount-tester new file",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			out = append(out, "mount type of \"/test-volume\": tmpfs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.TestContainerOutput(msg, pod, 0, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTestVolumeMode(f *framework.Framework, image string, medium v1.StorageMedium) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			source = &v1.EmptyDirVolumeSource{Medium: medium}
0000000000000000000000000000000000000000;;			pod    = testPodWithVolume(testImageRootUid, volumePath, source)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].Args = []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("--fs_type=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_perm=%v", volumePath),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("emptydir volume type on %v", formatMedium(medium))
0000000000000000000000000000000000000000;;		out := []string{
0000000000000000000000000000000000000000;;			"perms of file \"/test-volume\": -rwxrwxrwx",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			out = append(out, "mount type of \"/test-volume\": tmpfs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.TestContainerOutput(msg, pod, 0, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTest0644(f *framework.Framework, image string, medium v1.StorageMedium) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			filePath = path.Join(volumePath, "test-file")
0000000000000000000000000000000000000000;;			source   = &v1.EmptyDirVolumeSource{Medium: medium}
0000000000000000000000000000000000000000;;			pod      = testPodWithVolume(image, volumePath, source)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].Args = []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("--fs_type=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--new_file_0644=%v", filePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_perm=%v", filePath),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("emptydir 0644 on %v", formatMedium(medium))
0000000000000000000000000000000000000000;;		out := []string{
0000000000000000000000000000000000000000;;			"perms of file \"/test-volume/test-file\": -rw-r--r--",
0000000000000000000000000000000000000000;;			"content of file \"/test-volume/test-file\": mount-tester new file",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			out = append(out, "mount type of \"/test-volume\": tmpfs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.TestContainerOutput(msg, pod, 0, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTest0666(f *framework.Framework, image string, medium v1.StorageMedium) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			filePath = path.Join(volumePath, "test-file")
0000000000000000000000000000000000000000;;			source   = &v1.EmptyDirVolumeSource{Medium: medium}
0000000000000000000000000000000000000000;;			pod      = testPodWithVolume(image, volumePath, source)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].Args = []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("--fs_type=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--new_file_0666=%v", filePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_perm=%v", filePath),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("emptydir 0666 on %v", formatMedium(medium))
0000000000000000000000000000000000000000;;		out := []string{
0000000000000000000000000000000000000000;;			"perms of file \"/test-volume/test-file\": -rw-rw-rw-",
0000000000000000000000000000000000000000;;			"content of file \"/test-volume/test-file\": mount-tester new file",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			out = append(out, "mount type of \"/test-volume\": tmpfs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.TestContainerOutput(msg, pod, 0, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTest0777(f *framework.Framework, image string, medium v1.StorageMedium) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			filePath = path.Join(volumePath, "test-file")
0000000000000000000000000000000000000000;;			source   = &v1.EmptyDirVolumeSource{Medium: medium}
0000000000000000000000000000000000000000;;			pod      = testPodWithVolume(image, volumePath, source)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers[0].Args = []string{
0000000000000000000000000000000000000000;;			fmt.Sprintf("--fs_type=%v", volumePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--new_file_0777=%v", filePath),
0000000000000000000000000000000000000000;;			fmt.Sprintf("--file_perm=%v", filePath),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("emptydir 0777 on %v", formatMedium(medium))
0000000000000000000000000000000000000000;;		out := []string{
0000000000000000000000000000000000000000;;			"perms of file \"/test-volume/test-file\": -rwxrwxrwx",
0000000000000000000000000000000000000000;;			"content of file \"/test-volume/test-file\": mount-tester new file",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			out = append(out, "mount type of \"/test-volume\": tmpfs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.TestContainerOutput(msg, pod, 0, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func formatMedium(medium v1.StorageMedium) string {
0000000000000000000000000000000000000000;;		if medium == v1.StorageMediumMemory {
0000000000000000000000000000000000000000;;			return "tmpfs"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "node default medium"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPodWithVolume(image, path string, source *v1.EmptyDirVolumeSource) *v1.Pod {
0000000000000000000000000000000000000000;;		podName := "pod-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;		return &v1.Pod{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind:       "Pod",
0000000000000000000000000000000000000000;;				APIVersion: api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: podName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  containerName,
0000000000000000000000000000000000000000;;						Image: image,
0000000000000000000000000000000000000000;;						VolumeMounts: []v1.VolumeMount{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:      volumeName,
0000000000000000000000000000000000000000;;								MountPath: path,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecurityContext: &v1.PodSecurityContext{
0000000000000000000000000000000000000000;;					SELinuxOptions: &v1.SELinuxOptions{
0000000000000000000000000000000000000000;;						Level: "s0",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;				Volumes: []v1.Volume{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: volumeName,
0000000000000000000000000000000000000000;;						VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;							EmptyDir: source,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
