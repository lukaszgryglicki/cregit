0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a8d62825407b276118b6a660098df5f94bde4268;test/e2e/horizontal_pod_autoscaling.go[test/e2e/horizontal_pod_autoscaling.go][test/e2e/autoscaling/horizontal_pod_autoscaling.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package autoscaling
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/common"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These tests don't seem to be running properly in parallel: issue: #20338.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("[HPA] Horizontal pod autoscaling (scale resource: CPU)", func() {
0000000000000000000000000000000000000000;;		var rc *common.ResourceConsumer
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("horizontal-pod-autoscaling")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		titleUp := "Should scale from 1 pod to 3 pods and from 3 to 5"
0000000000000000000000000000000000000000;;		titleDown := "Should scale from 5 pods to 3 pods and from 3 to 1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("[Serial] [Slow] Deployment", func() {
0000000000000000000000000000000000000000;;			// CPU tests via deployments
0000000000000000000000000000000000000000;;			It(titleUp, func() {
0000000000000000000000000000000000000000;;				scaleUp("test-deployment", common.KindDeployment, false, rc, f)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It(titleDown, func() {
0000000000000000000000000000000000000000;;				scaleDown("test-deployment", common.KindDeployment, false, rc, f)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("[Serial] [Slow] ReplicaSet", func() {
0000000000000000000000000000000000000000;;			// CPU tests via deployments
0000000000000000000000000000000000000000;;			It(titleUp, func() {
0000000000000000000000000000000000000000;;				scaleUp("rs", common.KindReplicaSet, false, rc, f)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It(titleDown, func() {
0000000000000000000000000000000000000000;;				scaleDown("rs", common.KindReplicaSet, false, rc, f)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// These tests take ~20 minutes each.
0000000000000000000000000000000000000000;;		framework.KubeDescribe("[Serial] [Slow] ReplicationController", func() {
0000000000000000000000000000000000000000;;			// CPU tests via replication controllers
0000000000000000000000000000000000000000;;			It(titleUp+" and verify decision stability", func() {
0000000000000000000000000000000000000000;;				scaleUp("rc", common.KindRC, true, rc, f)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It(titleDown+" and verify decision stability", func() {
0000000000000000000000000000000000000000;;				scaleDown("rc", common.KindRC, true, rc, f)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("ReplicationController light", func() {
0000000000000000000000000000000000000000;;			It("Should scale from 1 pod to 2 pods", func() {
0000000000000000000000000000000000000000;;				scaleTest := &HPAScaleTest{
0000000000000000000000000000000000000000;;					initPods:                    1,
0000000000000000000000000000000000000000;;					totalInitialCPUUsage:        150,
0000000000000000000000000000000000000000;;					perPodCPURequest:            200,
0000000000000000000000000000000000000000;;					targetCPUUtilizationPercent: 50,
0000000000000000000000000000000000000000;;					minPods:                     1,
0000000000000000000000000000000000000000;;					maxPods:                     2,
0000000000000000000000000000000000000000;;					firstScale:                  2,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				scaleTest.run("rc-light", common.KindRC, rc, f)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("Should scale from 2 pods to 1 pod", func() {
0000000000000000000000000000000000000000;;				scaleTest := &HPAScaleTest{
0000000000000000000000000000000000000000;;					initPods:                    2,
0000000000000000000000000000000000000000;;					totalInitialCPUUsage:        50,
0000000000000000000000000000000000000000;;					perPodCPURequest:            200,
0000000000000000000000000000000000000000;;					targetCPUUtilizationPercent: 50,
0000000000000000000000000000000000000000;;					minPods:                     1,
0000000000000000000000000000000000000000;;					maxPods:                     2,
0000000000000000000000000000000000000000;;					firstScale:                  1,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				scaleTest.run("rc-light", common.KindRC, rc, f)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HPAScaleTest struct is used by the scale(...) function.
0000000000000000000000000000000000000000;;	type HPAScaleTest struct {
0000000000000000000000000000000000000000;;		initPods                    int32
0000000000000000000000000000000000000000;;		totalInitialCPUUsage        int32
0000000000000000000000000000000000000000;;		perPodCPURequest            int64
0000000000000000000000000000000000000000;;		targetCPUUtilizationPercent int32
0000000000000000000000000000000000000000;;		minPods                     int32
0000000000000000000000000000000000000000;;		maxPods                     int32
0000000000000000000000000000000000000000;;		firstScale                  int32
0000000000000000000000000000000000000000;;		firstScaleStasis            time.Duration
0000000000000000000000000000000000000000;;		cpuBurst                    int
0000000000000000000000000000000000000000;;		secondScale                 int32
0000000000000000000000000000000000000000;;		secondScaleStasis           time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// run is a method which runs an HPA lifecycle, from a starting state, to an expected
0000000000000000000000000000000000000000;;	// The initial state is defined by the initPods parameter.
0000000000000000000000000000000000000000;;	// The first state change is due to the CPU being consumed initially, which HPA responds to by changing pod counts.
0000000000000000000000000000000000000000;;	// The second state change (optional) is due to the CPU burst parameter, which HPA again responds to.
0000000000000000000000000000000000000000;;	// TODO The use of 3 states is arbitrary, we could eventually make this test handle "n" states once this test stabilizes.
0000000000000000000000000000000000000000;;	func (scaleTest *HPAScaleTest) run(name, kind string, rc *common.ResourceConsumer, f *framework.Framework) {
0000000000000000000000000000000000000000;;		const timeToWait = 15 * time.Minute
0000000000000000000000000000000000000000;;		rc = common.NewDynamicResourceConsumer(name, kind, int(scaleTest.initPods), int(scaleTest.totalInitialCPUUsage), 0, 0, scaleTest.perPodCPURequest, 200, f)
0000000000000000000000000000000000000000;;		defer rc.CleanUp()
0000000000000000000000000000000000000000;;		hpa := common.CreateCPUHorizontalPodAutoscaler(rc, scaleTest.targetCPUUtilizationPercent, scaleTest.minPods, scaleTest.maxPods)
0000000000000000000000000000000000000000;;		defer common.DeleteHorizontalPodAutoscaler(rc, hpa.Name)
0000000000000000000000000000000000000000;;		rc.WaitForReplicas(int(scaleTest.firstScale), timeToWait)
0000000000000000000000000000000000000000;;		if scaleTest.firstScaleStasis > 0 {
0000000000000000000000000000000000000000;;			rc.EnsureDesiredReplicas(int(scaleTest.firstScale), scaleTest.firstScaleStasis)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if scaleTest.cpuBurst > 0 && scaleTest.secondScale > 0 {
0000000000000000000000000000000000000000;;			rc.ConsumeCPU(scaleTest.cpuBurst)
0000000000000000000000000000000000000000;;			rc.WaitForReplicas(int(scaleTest.secondScale), timeToWait)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scaleUp(name, kind string, checkStability bool, rc *common.ResourceConsumer, f *framework.Framework) {
0000000000000000000000000000000000000000;;		stasis := 0 * time.Minute
0000000000000000000000000000000000000000;;		if checkStability {
0000000000000000000000000000000000000000;;			stasis = 10 * time.Minute
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scaleTest := &HPAScaleTest{
0000000000000000000000000000000000000000;;			initPods:                    1,
0000000000000000000000000000000000000000;;			totalInitialCPUUsage:        250,
0000000000000000000000000000000000000000;;			perPodCPURequest:            500,
0000000000000000000000000000000000000000;;			targetCPUUtilizationPercent: 20,
0000000000000000000000000000000000000000;;			minPods:                     1,
0000000000000000000000000000000000000000;;			maxPods:                     5,
0000000000000000000000000000000000000000;;			firstScale:                  3,
0000000000000000000000000000000000000000;;			firstScaleStasis:            stasis,
0000000000000000000000000000000000000000;;			cpuBurst:                    700,
0000000000000000000000000000000000000000;;			secondScale:                 5,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scaleTest.run(name, kind, rc, f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scaleDown(name, kind string, checkStability bool, rc *common.ResourceConsumer, f *framework.Framework) {
0000000000000000000000000000000000000000;;		stasis := 0 * time.Minute
0000000000000000000000000000000000000000;;		if checkStability {
0000000000000000000000000000000000000000;;			stasis = 10 * time.Minute
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scaleTest := &HPAScaleTest{
0000000000000000000000000000000000000000;;			initPods:                    5,
0000000000000000000000000000000000000000;;			totalInitialCPUUsage:        375,
0000000000000000000000000000000000000000;;			perPodCPURequest:            500,
0000000000000000000000000000000000000000;;			targetCPUUtilizationPercent: 30,
0000000000000000000000000000000000000000;;			minPods:                     1,
0000000000000000000000000000000000000000;;			maxPods:                     5,
0000000000000000000000000000000000000000;;			firstScale:                  3,
0000000000000000000000000000000000000000;;			firstScaleStasis:            stasis,
0000000000000000000000000000000000000000;;			cpuBurst:                    10,
0000000000000000000000000000000000000000;;			secondScale:                 1,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scaleTest.run(name, kind, rc, f)
0000000000000000000000000000000000000000;;	}
