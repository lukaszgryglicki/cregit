0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
336799e8fbbf288cf7203d989addcbe998b05fec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package chaosmonkey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDoWithPanic(t *testing.T) {
0000000000000000000000000000000000000000;;		var counter int64 = 0
0000000000000000000000000000000000000000;;		cm := New(func() {})
0000000000000000000000000000000000000000;;		tests := []Test{
0000000000000000000000000000000000000000;;			// No panic
0000000000000000000000000000000000000000;;			func(sem *Semaphore) {
0000000000000000000000000000000000000000;;				defer atomic.AddInt64(&counter, 1)
0000000000000000000000000000000000000000;;				sem.Ready()
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Panic after sem.Ready()
0000000000000000000000000000000000000000;;			func(sem *Semaphore) {
0000000000000000000000000000000000000000;;				defer atomic.AddInt64(&counter, 1)
0000000000000000000000000000000000000000;;				sem.Ready()
0000000000000000000000000000000000000000;;				panic("Panic after calling sem.Ready()")
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Panic before sem.Ready()
0000000000000000000000000000000000000000;;			func(sem *Semaphore) {
0000000000000000000000000000000000000000;;				defer atomic.AddInt64(&counter, 1)
0000000000000000000000000000000000000000;;				panic("Panic before calling sem.Ready()")
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			cm.Register(test)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cm.Do()
0000000000000000000000000000000000000000;;		// Check that all funcs in tests were called.
0000000000000000000000000000000000000000;;		if int(counter) != len(tests) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected counter to be %v, but it was %v", len(tests), counter)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
