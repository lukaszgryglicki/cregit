0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6b84e619b7788a11feb3463c08ecc035dae6ecd0;test/e2e/empty.go[test/e2e/empty.go][test/e2e/scalability/empty.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scalability
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Empty [Feature:Empty]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("empty")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			c := f.ClientSet
0000000000000000000000000000000000000000;;			ns := f.Namespace.Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// TODO: respect --allow-notready-nodes flag in those functions.
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.WaitForAllNodesSchedulable(c, framework.TestContext.NodeSchedulableTimeout))
0000000000000000000000000000000000000000;;			framework.WaitForAllNodesHealthy(c, time.Minute)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := framework.CheckTestingNSDeletedExcept(c, ns)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("starts a pod", func() {
0000000000000000000000000000000000000000;;			configs, _, _ := GenerateConfigsForGroup([]*v1.Namespace{f.Namespace}, "empty-pod", 1, 1, framework.GetPauseImageName(f.ClientSet), []string{}, api.Kind("ReplicationController"), 0, 0)
0000000000000000000000000000000000000000;;			if len(configs) != 1 {
0000000000000000000000000000000000000000;;				framework.Failf("generateConfigs should have generated single config")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			config := configs[0]
0000000000000000000000000000000000000000;;			config.SetClient(f.ClientSet)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(config.Run())
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
