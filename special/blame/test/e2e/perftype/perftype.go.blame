0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
893d04ff1a70e499dad3c00c72123203c5d74733;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package perftype
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(random-liu): Replace this with prometheus' data model.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The following performance data structures are generalized and well-formatted.
0000000000000000000000000000000000000000;;	// They can be pretty printed in json format and be analyzed by other performance
0000000000000000000000000000000000000000;;	// analyzing tools, such as Perfdash (k8s.io/contrib/perfdash).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataItem is the data point.
0000000000000000000000000000000000000000;;	type DataItem struct {
0000000000000000000000000000000000000000;;		// Data is a map from bucket to real data point (e.g. "Perc90" -> 23.5). Notice
0000000000000000000000000000000000000000;;		// that all data items with the same label conbination should have the same buckets.
0000000000000000000000000000000000000000;;		Data map[string]float64 `json:"data"`
0000000000000000000000000000000000000000;;		// Unit is the data unit. Notice that all data items with the same label combination
0000000000000000000000000000000000000000;;		// should have the same unit.
0000000000000000000000000000000000000000;;		Unit string `json:"unit"`
0000000000000000000000000000000000000000;;		// Labels is the labels of the data item.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PerfData contains all data items generated in current test.
0000000000000000000000000000000000000000;;	type PerfData struct {
0000000000000000000000000000000000000000;;		// Version is the version of the metrics. The metrics consumer could use the version
0000000000000000000000000000000000000000;;		// to detect metrics version change and decide what version to support.
0000000000000000000000000000000000000000;;		Version   string     `json:"version"`
0000000000000000000000000000000000000000;;		DataItems []DataItem `json:"dataItems"`
0000000000000000000000000000000000000000;;		// Labels is the labels of the dataset.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PerfResultTag is the prefix of generated perfdata. Analyzing tools can find the perf result
0000000000000000000000000000000000000000;;	// with this tag.
0000000000000000000000000000000000000000;;	const PerfResultTag = "[Result:Performance]"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PerfResultEnd is the end of generated perfdata. Analyzing tools can find the end of the perf
0000000000000000000000000000000000000000;;	// result with this tag.
0000000000000000000000000000000000000000;;	const PerfResultEnd = "[Finish:Performance]"
