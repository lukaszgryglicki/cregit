0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7378a0cb38d21d9c5b6304002e679b9e0c9d364d;test/e2e/kubelet_sends_events.go[test/e2e/kubelet_sends_events.go][test/e2e/events.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Events", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("events")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should be sent by kubelets and the scheduler about pods scheduling and running [Conformance]", func() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			podClient := f.ClientSet.Core().Pods(f.Namespace.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("creating the pod")
0000000000000000000000000000000000000000;;			name := "send-events-" + string(uuid.NewUUID())
0000000000000000000000000000000000000000;;			value := strconv.Itoa(time.Now().Nanosecond())
0000000000000000000000000000000000000000;;			pod := &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: name,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"name": "foo",
0000000000000000000000000000000000000000;;						"time": value,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  "p",
0000000000000000000000000000000000000000;;							Image: framework.ServeHostnameImage,
0000000000000000000000000000000000000000;;							Ports: []v1.ContainerPort{{ContainerPort: 80}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("submitting the pod to kubernetes")
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				By("deleting the pod")
0000000000000000000000000000000000000000;;				podClient.Delete(pod.Name, nil)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			if _, err := podClient.Create(pod); err != nil {
0000000000000000000000000000000000000000;;				framework.Failf("Failed to create pod: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			framework.ExpectNoError(f.WaitForPodRunning(pod.Name))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("verifying the pod is in kubernetes")
0000000000000000000000000000000000000000;;			selector := labels.SelectorFromSet(labels.Set(map[string]string{"time": value}))
0000000000000000000000000000000000000000;;			options := metav1.ListOptions{LabelSelector: selector.String()}
0000000000000000000000000000000000000000;;			pods, err := podClient.List(options)
0000000000000000000000000000000000000000;;			Expect(len(pods.Items)).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("retrieving the pod")
0000000000000000000000000000000000000000;;			podWithUid, err := podClient.Get(pod.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				framework.Failf("Failed to get pod: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Printf("%+v\n", podWithUid)
0000000000000000000000000000000000000000;;			var events *v1.EventList
0000000000000000000000000000000000000000;;			// Check for scheduler event about the pod.
0000000000000000000000000000000000000000;;			By("checking for scheduler event about the pod")
0000000000000000000000000000000000000000;;			framework.ExpectNoError(wait.Poll(time.Second*2, time.Second*60, func() (bool, error) {
0000000000000000000000000000000000000000;;				selector := fields.Set{
0000000000000000000000000000000000000000;;					"involvedObject.kind":      "Pod",
0000000000000000000000000000000000000000;;					"involvedObject.uid":       string(podWithUid.UID),
0000000000000000000000000000000000000000;;					"involvedObject.namespace": f.Namespace.Name,
0000000000000000000000000000000000000000;;					"source":                   v1.DefaultSchedulerName,
0000000000000000000000000000000000000000;;				}.AsSelector().String()
0000000000000000000000000000000000000000;;				options := metav1.ListOptions{FieldSelector: selector}
0000000000000000000000000000000000000000;;				events, err := f.ClientSet.Core().Events(f.Namespace.Name).List(options)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return false, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(events.Items) > 0 {
0000000000000000000000000000000000000000;;					fmt.Println("Saw scheduler event for our pod.")
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;			// Check for kubelet event about the pod.
0000000000000000000000000000000000000000;;			By("checking for kubelet event about the pod")
0000000000000000000000000000000000000000;;			framework.ExpectNoError(wait.Poll(time.Second*2, time.Second*60, func() (bool, error) {
0000000000000000000000000000000000000000;;				selector := fields.Set{
0000000000000000000000000000000000000000;;					"involvedObject.uid":       string(podWithUid.UID),
0000000000000000000000000000000000000000;;					"involvedObject.kind":      "Pod",
0000000000000000000000000000000000000000;;					"involvedObject.namespace": f.Namespace.Name,
0000000000000000000000000000000000000000;;					"source":                   "kubelet",
0000000000000000000000000000000000000000;;				}.AsSelector().String()
0000000000000000000000000000000000000000;;				options := metav1.ListOptions{FieldSelector: selector}
0000000000000000000000000000000000000000;;				events, err = f.ClientSet.Core().Events(f.Namespace.Name).List(options)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return false, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(events.Items) > 0 {
0000000000000000000000000000000000000000;;					fmt.Println("Saw kubelet event for our pod.")
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
