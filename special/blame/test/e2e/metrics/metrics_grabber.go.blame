0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a77d369111eaecd521e45636cd0c519aa9dc9d33;pkg/metrics/metrics_grabber.go[pkg/metrics/metrics_grabber.go][test/e2e/metrics/metrics_grabber.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/master/ports"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/system"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ProxyTimeout = 2 * time.Minute
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricsCollection struct {
0000000000000000000000000000000000000000;;		ApiServerMetrics         ApiServerMetrics
0000000000000000000000000000000000000000;;		ControllerManagerMetrics ControllerManagerMetrics
0000000000000000000000000000000000000000;;		KubeletMetrics           map[string]KubeletMetrics
0000000000000000000000000000000000000000;;		SchedulerMetrics         SchedulerMetrics
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricsGrabber struct {
0000000000000000000000000000000000000000;;		client                    clientset.Interface
0000000000000000000000000000000000000000;;		grabFromApiServer         bool
0000000000000000000000000000000000000000;;		grabFromControllerManager bool
0000000000000000000000000000000000000000;;		grabFromKubelets          bool
0000000000000000000000000000000000000000;;		grabFromScheduler         bool
0000000000000000000000000000000000000000;;		masterName                string
0000000000000000000000000000000000000000;;		registeredMaster          bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMetricsGrabber(c clientset.Interface, kubelets bool, scheduler bool, controllers bool, apiServer bool) (*MetricsGrabber, error) {
0000000000000000000000000000000000000000;;		registeredMaster := false
0000000000000000000000000000000000000000;;		masterName := ""
0000000000000000000000000000000000000000;;		nodeList, err := c.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(nodeList.Items) < 1 {
0000000000000000000000000000000000000000;;			glog.Warning("Can't find any Nodes in the API server to grab metrics from")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, node := range nodeList.Items {
0000000000000000000000000000000000000000;;			if system.IsMasterNode(node.Name) {
0000000000000000000000000000000000000000;;				registeredMaster = true
0000000000000000000000000000000000000000;;				masterName = node.Name
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !registeredMaster {
0000000000000000000000000000000000000000;;			scheduler = false
0000000000000000000000000000000000000000;;			controllers = false
0000000000000000000000000000000000000000;;			glog.Warningf("Master node is not registered. Grabbing metrics from Scheduler and ControllerManager is disabled.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &MetricsGrabber{
0000000000000000000000000000000000000000;;			client:                    c,
0000000000000000000000000000000000000000;;			grabFromApiServer:         apiServer,
0000000000000000000000000000000000000000;;			grabFromControllerManager: controllers,
0000000000000000000000000000000000000000;;			grabFromKubelets:          kubelets,
0000000000000000000000000000000000000000;;			grabFromScheduler:         scheduler,
0000000000000000000000000000000000000000;;			masterName:                masterName,
0000000000000000000000000000000000000000;;			registeredMaster:          registeredMaster,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *MetricsGrabber) GrabFromKubelet(nodeName string) (KubeletMetrics, error) {
0000000000000000000000000000000000000000;;		nodes, err := g.client.Core().Nodes().List(metav1.ListOptions{FieldSelector: fields.Set{api.ObjectNameField: nodeName}.AsSelector().String()})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return KubeletMetrics{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(nodes.Items) != 1 {
0000000000000000000000000000000000000000;;			return KubeletMetrics{}, fmt.Errorf("Error listing nodes with name %v, got %v", nodeName, nodes.Items)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kubeletPort := nodes.Items[0].Status.DaemonEndpoints.KubeletEndpoint.Port
0000000000000000000000000000000000000000;;		return g.grabFromKubeletInternal(nodeName, int(kubeletPort))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *MetricsGrabber) grabFromKubeletInternal(nodeName string, kubeletPort int) (KubeletMetrics, error) {
0000000000000000000000000000000000000000;;		if kubeletPort <= 0 || kubeletPort > 65535 {
0000000000000000000000000000000000000000;;			return KubeletMetrics{}, fmt.Errorf("Invalid Kubelet port %v. Skipping Kubelet's metrics gathering.", kubeletPort)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output, err := g.getMetricsFromNode(nodeName, int(kubeletPort))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return KubeletMetrics{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parseKubeletMetrics(output)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *MetricsGrabber) GrabFromScheduler() (SchedulerMetrics, error) {
0000000000000000000000000000000000000000;;		if !g.registeredMaster {
0000000000000000000000000000000000000000;;			return SchedulerMetrics{}, fmt.Errorf("Master's Kubelet is not registered. Skipping Scheduler's metrics gathering.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output, err := g.getMetricsFromPod(fmt.Sprintf("%v-%v", "kube-scheduler", g.masterName), metav1.NamespaceSystem, ports.SchedulerPort)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return SchedulerMetrics{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parseSchedulerMetrics(output)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *MetricsGrabber) GrabFromControllerManager() (ControllerManagerMetrics, error) {
0000000000000000000000000000000000000000;;		if !g.registeredMaster {
0000000000000000000000000000000000000000;;			return ControllerManagerMetrics{}, fmt.Errorf("Master's Kubelet is not registered. Skipping ControllerManager's metrics gathering.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output, err := g.getMetricsFromPod(fmt.Sprintf("%v-%v", "kube-controller-manager", g.masterName), metav1.NamespaceSystem, ports.ControllerManagerPort)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ControllerManagerMetrics{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parseControllerManagerMetrics(output)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *MetricsGrabber) GrabFromApiServer() (ApiServerMetrics, error) {
0000000000000000000000000000000000000000;;		output, err := g.getMetricsFromApiServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ApiServerMetrics{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parseApiServerMetrics(output)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *MetricsGrabber) Grab() (MetricsCollection, error) {
0000000000000000000000000000000000000000;;		result := MetricsCollection{}
0000000000000000000000000000000000000000;;		var errs []error
0000000000000000000000000000000000000000;;		if g.grabFromApiServer {
0000000000000000000000000000000000000000;;			metrics, err := g.GrabFromApiServer()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errs = append(errs, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				result.ApiServerMetrics = metrics
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if g.grabFromScheduler {
0000000000000000000000000000000000000000;;			metrics, err := g.GrabFromScheduler()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errs = append(errs, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				result.SchedulerMetrics = metrics
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if g.grabFromControllerManager {
0000000000000000000000000000000000000000;;			metrics, err := g.GrabFromControllerManager()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errs = append(errs, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				result.ControllerManagerMetrics = metrics
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if g.grabFromKubelets {
0000000000000000000000000000000000000000;;			result.KubeletMetrics = make(map[string]KubeletMetrics)
0000000000000000000000000000000000000000;;			nodes, err := g.client.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errs = append(errs, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for _, node := range nodes.Items {
0000000000000000000000000000000000000000;;					kubeletPort := node.Status.DaemonEndpoints.KubeletEndpoint.Port
0000000000000000000000000000000000000000;;					metrics, err := g.grabFromKubeletInternal(node.Name, int(kubeletPort))
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						errs = append(errs, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					result.KubeletMetrics[node.Name] = metrics
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(errs) > 0 {
0000000000000000000000000000000000000000;;			return MetricsCollection{}, fmt.Errorf("Errors while grabbing metrics: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
