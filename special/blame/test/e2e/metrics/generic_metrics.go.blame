0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a77d369111eaecd521e45636cd0c519aa9dc9d33;pkg/metrics/generic_metrics.go[pkg/metrics/generic_metrics.go][test/e2e/metrics/generic_metrics.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/prometheus/common/expfmt"
0000000000000000000000000000000000000000;;		"github.com/prometheus/common/model"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Metrics map[string]model.Samples
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Metrics) Equal(o Metrics) bool {
0000000000000000000000000000000000000000;;		leftKeySet := []string{}
0000000000000000000000000000000000000000;;		rightKeySet := []string{}
0000000000000000000000000000000000000000;;		for k := range *m {
0000000000000000000000000000000000000000;;			leftKeySet = append(leftKeySet, k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k := range o {
0000000000000000000000000000000000000000;;			rightKeySet = append(rightKeySet, k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(leftKeySet, rightKeySet) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, k := range leftKeySet {
0000000000000000000000000000000000000000;;			if !(*m)[k].Equal(o[k]) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func PrintSample(sample *model.Sample) string {
0000000000000000000000000000000000000000;;		buf := make([]string, 0)
0000000000000000000000000000000000000000;;		// Id is a VERY special label. For 'normal' container it's usless, but it's necessary
0000000000000000000000000000000000000000;;		// for 'system' containers (e.g. /docker-daemon, /kubelet, etc.). We know if that's the
0000000000000000000000000000000000000000;;		// case by checking if there's a label "kubernetes_container_name" present. It's hacky
0000000000000000000000000000000000000000;;		// but it works...
0000000000000000000000000000000000000000;;		_, normalContainer := sample.Metric["kubernetes_container_name"]
0000000000000000000000000000000000000000;;		for k, v := range sample.Metric {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(string(k), "__") {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if string(k) == "id" && normalContainer {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf = append(buf, fmt.Sprintf("%v=%v", string(k), v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("[%v] = %v", strings.Join(buf, ","), sample.Value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMetrics() Metrics {
0000000000000000000000000000000000000000;;		result := make(Metrics)
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseMetrics(data string, output *Metrics) error {
0000000000000000000000000000000000000000;;		dec := expfmt.NewDecoder(strings.NewReader(data), expfmt.FmtText)
0000000000000000000000000000000000000000;;		decoder := expfmt.SampleDecoder{
0000000000000000000000000000000000000000;;			Dec:  dec,
0000000000000000000000000000000000000000;;			Opts: &expfmt.DecodeOptions{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			var v model.Vector
0000000000000000000000000000000000000000;;			if err := decoder.Decode(&v); err != nil {
0000000000000000000000000000000000000000;;				if err == io.EOF {
0000000000000000000000000000000000000000;;					// Expected loop termination condition.
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				glog.Warningf("Invalid Decode. Skipping.")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, metric := range v {
0000000000000000000000000000000000000000;;				name := string(metric.Metric[model.MetricNameLabel])
0000000000000000000000000000000000000000;;				(*output)[name] = append((*output)[name], metric)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *MetricsGrabber) getMetricsFromPod(podName string, namespace string, port int) (string, error) {
0000000000000000000000000000000000000000;;		rawOutput, err := g.client.Core().RESTClient().Get().
0000000000000000000000000000000000000000;;			Namespace(namespace).
0000000000000000000000000000000000000000;;			Resource("pods").
0000000000000000000000000000000000000000;;			SubResource("proxy").
0000000000000000000000000000000000000000;;			Name(fmt.Sprintf("%v:%v", podName, port)).
0000000000000000000000000000000000000000;;			Suffix("metrics").
0000000000000000000000000000000000000000;;			Do().Raw()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(rawOutput), nil
0000000000000000000000000000000000000000;;	}
