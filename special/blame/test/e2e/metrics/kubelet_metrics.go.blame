0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a77d369111eaecd521e45636cd0c519aa9dc9d33;pkg/metrics/kubelet_metrics.go[pkg/metrics/kubelet_metrics.go][test/e2e/metrics/kubelet_metrics.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubeletMetrics Metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *KubeletMetrics) Equal(o KubeletMetrics) bool {
0000000000000000000000000000000000000000;;		return (*Metrics)(m).Equal(Metrics(o))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewKubeletMetrics() KubeletMetrics {
0000000000000000000000000000000000000000;;		result := NewMetrics()
0000000000000000000000000000000000000000;;		return KubeletMetrics(result)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GrabKubeletMetricsWithoutProxy retrieve metrics from the kubelet on the given node using a simple GET over http.
0000000000000000000000000000000000000000;;	// Currently only used in integration tests.
0000000000000000000000000000000000000000;;	func GrabKubeletMetricsWithoutProxy(nodeName string) (KubeletMetrics, error) {
0000000000000000000000000000000000000000;;		metricsEndpoint := "http://%s/metrics"
0000000000000000000000000000000000000000;;		resp, err := http.Get(fmt.Sprintf(metricsEndpoint, nodeName))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return KubeletMetrics{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		body, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return KubeletMetrics{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parseKubeletMetrics(string(body))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseKubeletMetrics(data string) (KubeletMetrics, error) {
0000000000000000000000000000000000000000;;		result := NewKubeletMetrics()
0000000000000000000000000000000000000000;;		if err := parseMetrics(data, (*Metrics)(&result)); err != nil {
0000000000000000000000000000000000000000;;			return KubeletMetrics{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *MetricsGrabber) getMetricsFromNode(nodeName string, kubeletPort int) (string, error) {
0000000000000000000000000000000000000000;;		// There's a problem with timing out during proxy. Wrapping this in a goroutine to prevent deadlock.
0000000000000000000000000000000000000000;;		// Hanging goroutine will be leaked.
0000000000000000000000000000000000000000;;		finished := make(chan struct{})
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		var rawOutput []byte
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			rawOutput, err = g.client.Core().RESTClient().Get().
0000000000000000000000000000000000000000;;				Resource("nodes").
0000000000000000000000000000000000000000;;				SubResource("proxy").
0000000000000000000000000000000000000000;;				Name(fmt.Sprintf("%v:%v", nodeName, kubeletPort)).
0000000000000000000000000000000000000000;;				Suffix("metrics").
0000000000000000000000000000000000000000;;				Do().Raw()
0000000000000000000000000000000000000000;;			finished <- struct{}{}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-time.After(ProxyTimeout):
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Timed out when waiting for proxy to gather metrics from %v", nodeName)
0000000000000000000000000000000000000000;;		case <-finished:
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return string(rawOutput), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
