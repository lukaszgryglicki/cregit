0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
200f2fccd22330b2c0976ddfe5893620d0be57cb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package upgrades
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		autoscalingv1 "k8s.io/api/autoscaling/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/common"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HPAUpgradeTest tests that HPA rescales target resource correctly before and after a cluster upgrade.
0000000000000000000000000000000000000000;;	type HPAUpgradeTest struct {
0000000000000000000000000000000000000000;;		rc  *common.ResourceConsumer
0000000000000000000000000000000000000000;;		hpa *autoscalingv1.HorizontalPodAutoscaler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HPAUpgradeTest) Name() string { return "hpa-upgrade" }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a resource consumer and an HPA object that autoscales the consumer.
0000000000000000000000000000000000000000;;	func (t *HPAUpgradeTest) Setup(f *framework.Framework) {
0000000000000000000000000000000000000000;;		t.rc = common.NewDynamicResourceConsumer(
0000000000000000000000000000000000000000;;			"res-cons-upgrade",
0000000000000000000000000000000000000000;;			common.KindRC,
0000000000000000000000000000000000000000;;			1,   /* replicas */
0000000000000000000000000000000000000000;;			250, /* initCPUTotal */
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			500, /* cpuLimit */
0000000000000000000000000000000000000000;;			200, /* memLimit */
0000000000000000000000000000000000000000;;			f)
0000000000000000000000000000000000000000;;		t.hpa = common.CreateCPUHorizontalPodAutoscaler(
0000000000000000000000000000000000000000;;			t.rc,
0000000000000000000000000000000000000000;;			20, /* targetCPUUtilizationPercent */
0000000000000000000000000000000000000000;;			1,  /* minPods */
0000000000000000000000000000000000000000;;			5)  /* maxPods */
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.rc.Pause()
0000000000000000000000000000000000000000;;		t.test()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test waits for upgrade to complete and verifies if HPA works correctly.
0000000000000000000000000000000000000000;;	func (t *HPAUpgradeTest) Test(f *framework.Framework, done <-chan struct{}, upgrade UpgradeType) {
0000000000000000000000000000000000000000;;		// Block until upgrade is done
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("Waiting for upgrade to finish before checking HPA"))
0000000000000000000000000000000000000000;;		<-done
0000000000000000000000000000000000000000;;		t.test()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Teardown cleans up any remaining resources.
0000000000000000000000000000000000000000;;	func (t *HPAUpgradeTest) Teardown(f *framework.Framework) {
0000000000000000000000000000000000000000;;		// rely on the namespace deletion to clean up everything
0000000000000000000000000000000000000000;;		common.DeleteHorizontalPodAutoscaler(t.rc, t.hpa.Name)
0000000000000000000000000000000000000000;;		t.rc.CleanUp()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *HPAUpgradeTest) test() {
0000000000000000000000000000000000000000;;		const timeToWait = 15 * time.Minute
0000000000000000000000000000000000000000;;		t.rc.Resume()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("HPA scales to 1 replica: consume 10 millicores, target per pod 100 millicores, min pods 1."))
0000000000000000000000000000000000000000;;		t.rc.ConsumeCPU(10) /* millicores */
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("HPA waits for 1 replica"))
0000000000000000000000000000000000000000;;		t.rc.WaitForReplicas(1, timeToWait)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("HPA scales to 3 replicas: consume 250 millicores, target per pod 100 millicores."))
0000000000000000000000000000000000000000;;		t.rc.ConsumeCPU(250) /* millicores */
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("HPA waits for 3 replicas"))
0000000000000000000000000000000000000000;;		t.rc.WaitForReplicas(3, timeToWait)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("HPA scales to 5 replicas: consume 700 millicores, target per pod 100 millicores, max pods 5."))
0000000000000000000000000000000000000000;;		t.rc.ConsumeCPU(700) /* millicores */
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("HPA waits for 5 replicas"))
0000000000000000000000000000000000000000;;		t.rc.WaitForReplicas(5, timeToWait)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We need to pause background goroutines as during upgrade master is unavailable and requests issued by them fail.
0000000000000000000000000000000000000000;;		t.rc.Pause()
0000000000000000000000000000000000000000;;	}
