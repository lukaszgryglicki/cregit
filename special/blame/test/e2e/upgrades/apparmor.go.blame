0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bb4d8a2b6c537707a32bcd27a2848b22ce9d2365;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package upgrades
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		api "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/common"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;		"github.com/onsi/gomega/gstruct"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AppArmorUpgradeTest tests that AppArmor profiles are enforced & usable across upgrades.
0000000000000000000000000000000000000000;;	type AppArmorUpgradeTest struct {
0000000000000000000000000000000000000000;;		pod *api.Pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (AppArmorUpgradeTest) Name() string { return "apparmor-upgrade" }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (AppArmorUpgradeTest) Skip(upgCtx UpgradeContext) bool {
0000000000000000000000000000000000000000;;		supportedImages := make(map[string]bool)
0000000000000000000000000000000000000000;;		for _, d := range common.AppArmorDistros {
0000000000000000000000000000000000000000;;			supportedImages[d] = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, vCtx := range upgCtx.Versions {
0000000000000000000000000000000000000000;;			if !supportedImages[vCtx.NodeImage] {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Setup creates a secret and then verifies that a pod can consume it.
0000000000000000000000000000000000000000;;	func (t *AppArmorUpgradeTest) Setup(f *framework.Framework) {
0000000000000000000000000000000000000000;;		By("Loading AppArmor profiles to nodes")
0000000000000000000000000000000000000000;;		common.LoadAppArmorProfiles(f)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create the initial test pod.
0000000000000000000000000000000000000000;;		By("Creating a long-running AppArmor enabled pod.")
0000000000000000000000000000000000000000;;		t.pod = common.CreateAppArmorTestPod(f, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify initial state.
0000000000000000000000000000000000000000;;		t.verifyNodesAppArmorEnabled(f)
0000000000000000000000000000000000000000;;		t.verifyNewPodSucceeds(f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test waits for the upgrade to complete, and then verifies that a
0000000000000000000000000000000000000000;;	// pod can still consume the secret.
0000000000000000000000000000000000000000;;	func (t *AppArmorUpgradeTest) Test(f *framework.Framework, done <-chan struct{}, upgrade UpgradeType) {
0000000000000000000000000000000000000000;;		<-done
0000000000000000000000000000000000000000;;		if upgrade == MasterUpgrade {
0000000000000000000000000000000000000000;;			t.verifyPodStillUp(f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.verifyNodesAppArmorEnabled(f)
0000000000000000000000000000000000000000;;		t.verifyNewPodSucceeds(f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Teardown cleans up any remaining resources.
0000000000000000000000000000000000000000;;	func (t *AppArmorUpgradeTest) Teardown(f *framework.Framework) {
0000000000000000000000000000000000000000;;		// rely on the namespace deletion to clean up everything
0000000000000000000000000000000000000000;;		By("Logging container failures")
0000000000000000000000000000000000000000;;		framework.LogFailedContainers(f.ClientSet, f.Namespace.Name, framework.Logf)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *AppArmorUpgradeTest) verifyPodStillUp(f *framework.Framework) {
0000000000000000000000000000000000000000;;		By("Verifying an AppArmor profile is continuously enforced for a pod")
0000000000000000000000000000000000000000;;		pod, err := f.PodClient().Get(t.pod.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "Should be able to get pod")
0000000000000000000000000000000000000000;;		Expect(pod.Status.Phase).To(Equal(api.PodRunning), "Pod should stay running")
0000000000000000000000000000000000000000;;		Expect(pod.Status.ContainerStatuses[0].State.Running).NotTo(BeNil(), "Container should be running")
0000000000000000000000000000000000000000;;		Expect(pod.Status.ContainerStatuses[0].RestartCount).To(BeZero(), "Container should not need to be restarted")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *AppArmorUpgradeTest) verifyNewPodSucceeds(f *framework.Framework) {
0000000000000000000000000000000000000000;;		By("Verifying an AppArmor profile is enforced for a new pod")
0000000000000000000000000000000000000000;;		common.CreateAppArmorTestPod(f, true)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *AppArmorUpgradeTest) verifyNodesAppArmorEnabled(f *framework.Framework) {
0000000000000000000000000000000000000000;;		By("Verifying nodes are AppArmor enabled")
0000000000000000000000000000000000000000;;		nodes, err := f.ClientSet.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "Failed to list nodes")
0000000000000000000000000000000000000000;;		for _, node := range nodes.Items {
0000000000000000000000000000000000000000;;			Expect(node.Status.Conditions).To(gstruct.MatchElements(conditionType, gstruct.IgnoreExtras, gstruct.Elements{
0000000000000000000000000000000000000000;;				"Ready": gstruct.MatchFields(gstruct.IgnoreExtras, gstruct.Fields{
0000000000000000000000000000000000000000;;					"Message": ContainSubstring("AppArmor enabled"),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func conditionType(condition interface{}) string {
0000000000000000000000000000000000000000;;		return string(condition.(api.NodeCondition).Type)
0000000000000000000000000000000000000000;;	}
