0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9738c82d39c98b2fd2586e160995a8fb49681347;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package upgrades provides a framework for testing Kubernetes
0000000000000000000000000000000000000000;;	// features before, during, and after different types of upgrades.
0000000000000000000000000000000000000000;;	package upgrades
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/version"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpgradeType represents different types of upgrades.
0000000000000000000000000000000000000000;;	type UpgradeType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// MasterUpgrade indicates that only the master is being upgraded.
0000000000000000000000000000000000000000;;		MasterUpgrade UpgradeType = iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NodeUpgrade indicates that only the nodes are being upgraded.
0000000000000000000000000000000000000000;;		NodeUpgrade
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ClusterUpgrade indicates that both master and nodes are
0000000000000000000000000000000000000000;;		// being upgraded.
0000000000000000000000000000000000000000;;		ClusterUpgrade
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EtcdUpgrade indicates that only etcd is being upgraded (or migrated
0000000000000000000000000000000000000000;;		// between storage versions).
0000000000000000000000000000000000000000;;		EtcdUpgrade
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test is an interface for upgrade tests.
0000000000000000000000000000000000000000;;	type Test interface {
0000000000000000000000000000000000000000;;		// Name should return a test name sans spaces.
0000000000000000000000000000000000000000;;		Name() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Setup should create and verify whatever objects need to
0000000000000000000000000000000000000000;;		// exist before the upgrade disruption starts.
0000000000000000000000000000000000000000;;		Setup(f *framework.Framework)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test will run during the upgrade. When the upgrade is
0000000000000000000000000000000000000000;;		// complete, done will be closed and final validation can
0000000000000000000000000000000000000000;;		// begin.
0000000000000000000000000000000000000000;;		Test(f *framework.Framework, done <-chan struct{}, upgrade UpgradeType)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Teardown should clean up any objects that are created that
0000000000000000000000000000000000000000;;		// aren't already cleaned up by the framework. This will
0000000000000000000000000000000000000000;;		// always be called, even if Setup failed.
0000000000000000000000000000000000000000;;		Teardown(f *framework.Framework)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Skippable is an interface that an upgrade test can implement to be
0000000000000000000000000000000000000000;;	// able to indicate that it should be skipped.
0000000000000000000000000000000000000000;;	type Skippable interface {
0000000000000000000000000000000000000000;;		// Skip should return true if test should be skipped. upgCtx
0000000000000000000000000000000000000000;;		// provides information about the upgrade that is going to
0000000000000000000000000000000000000000;;		// occur.
0000000000000000000000000000000000000000;;		Skip(upgCtx UpgradeContext) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpgradeContext contains information about all the stages of the
0000000000000000000000000000000000000000;;	// upgrade that is going to occur.
0000000000000000000000000000000000000000;;	type UpgradeContext struct {
0000000000000000000000000000000000000000;;		Versions []VersionContext
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VersionContext represents a stage of the upgrade.
0000000000000000000000000000000000000000;;	type VersionContext struct {
0000000000000000000000000000000000000000;;		Version   version.Version
0000000000000000000000000000000000000000;;		NodeImage string
0000000000000000000000000000000000000000;;	}
