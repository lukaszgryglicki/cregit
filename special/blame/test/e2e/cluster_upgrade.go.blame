0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
05a0e1eca327ee25fd6919bd38d9e6755efed059;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/version"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/chaosmonkey"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework/ginkgowrapper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/upgrades"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/utils/junit"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var upgradeTests = []upgrades.Test{
0000000000000000000000000000000000000000;;		&upgrades.ServiceUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.SecretUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.StatefulSetUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.DeploymentUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.JobUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.ConfigMapUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.HPAUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.PersistentVolumeUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.DaemonSetUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.IngressUpgradeTest{},
0000000000000000000000000000000000000000;;		&upgrades.AppArmorUpgradeTest{},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Upgrade [Feature:Upgrade]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("cluster-upgrade")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create the frameworks here because we can only create them
0000000000000000000000000000000000000000;;		// in a "Describe".
0000000000000000000000000000000000000000;;		testFrameworks := createUpgradeFrameworks()
0000000000000000000000000000000000000000;;		framework.KubeDescribe("master upgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning cluster [Feature:MasterUpgrade]", func() {
0000000000000000000000000000000000000000;;				upgCtx, err := getUpgradeContext(f.ClientSet.Discovery(), framework.TestContext.UpgradeTarget)
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				testSuite := &junit.TestSuite{Name: "Master upgrade"}
0000000000000000000000000000000000000000;;				masterUpgradeTest := &junit.TestCase{Name: "master-upgrade", Classname: "upgrade_tests"}
0000000000000000000000000000000000000000;;				testSuite.TestCases = append(testSuite.TestCases, masterUpgradeTest)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				upgradeFunc := func() {
0000000000000000000000000000000000000000;;					start := time.Now()
0000000000000000000000000000000000000000;;					defer finalizeUpgradeTest(start, masterUpgradeTest)
0000000000000000000000000000000000000000;;					target := upgCtx.Versions[1].Version.String()
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.MasterUpgrade(target))
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.CheckMasterVersion(f.ClientSet, target))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				runUpgradeSuite(f, testFrameworks, testSuite, upgCtx, upgrades.MasterUpgrade, upgradeFunc)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("node upgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning cluster [Feature:NodeUpgrade]", func() {
0000000000000000000000000000000000000000;;				upgCtx, err := getUpgradeContext(f.ClientSet.Discovery(), framework.TestContext.UpgradeTarget)
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				testSuite := &junit.TestSuite{Name: "Node upgrade"}
0000000000000000000000000000000000000000;;				nodeUpgradeTest := &junit.TestCase{Name: "node-upgrade", Classname: "upgrade_tests"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				upgradeFunc := func() {
0000000000000000000000000000000000000000;;					start := time.Now()
0000000000000000000000000000000000000000;;					defer finalizeUpgradeTest(start, nodeUpgradeTest)
0000000000000000000000000000000000000000;;					target := upgCtx.Versions[1].Version.String()
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.NodeUpgrade(f, target, framework.TestContext.UpgradeImage))
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.CheckNodesVersions(f.ClientSet, target))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				runUpgradeSuite(f, testFrameworks, testSuite, upgCtx, upgrades.NodeUpgrade, upgradeFunc)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("cluster upgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning cluster [Feature:ClusterUpgrade]", func() {
0000000000000000000000000000000000000000;;				upgCtx, err := getUpgradeContext(f.ClientSet.Discovery(), framework.TestContext.UpgradeTarget)
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				testSuite := &junit.TestSuite{Name: "Cluster upgrade"}
0000000000000000000000000000000000000000;;				clusterUpgradeTest := &junit.TestCase{Name: "cluster-upgrade", Classname: "upgrade_tests"}
0000000000000000000000000000000000000000;;				testSuite.TestCases = append(testSuite.TestCases, clusterUpgradeTest)
0000000000000000000000000000000000000000;;				upgradeFunc := func() {
0000000000000000000000000000000000000000;;					start := time.Now()
0000000000000000000000000000000000000000;;					defer finalizeUpgradeTest(start, clusterUpgradeTest)
0000000000000000000000000000000000000000;;					target := upgCtx.Versions[1].Version.String()
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.MasterUpgrade(target))
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.CheckMasterVersion(f.ClientSet, target))
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.NodeUpgrade(f, target, framework.TestContext.UpgradeImage))
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.CheckNodesVersions(f.ClientSet, target))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				runUpgradeSuite(f, testFrameworks, testSuite, upgCtx, upgrades.ClusterUpgrade, upgradeFunc)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Downgrade [Feature:Downgrade]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("cluster-downgrade")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create the frameworks here because we can only create them
0000000000000000000000000000000000000000;;		// in a "Describe".
0000000000000000000000000000000000000000;;		testFrameworks := map[string]*framework.Framework{}
0000000000000000000000000000000000000000;;		for _, t := range upgradeTests {
0000000000000000000000000000000000000000;;			testFrameworks[t.Name()] = framework.NewDefaultFramework(t.Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("cluster downgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning cluster [Feature:ClusterDowngrade]", func() {
0000000000000000000000000000000000000000;;				upgCtx, err := getUpgradeContext(f.ClientSet.Discovery(), framework.TestContext.UpgradeTarget)
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				testSuite := &junit.TestSuite{Name: "Cluster downgrade"}
0000000000000000000000000000000000000000;;				clusterDowngradeTest := &junit.TestCase{Name: "cluster-downgrade", Classname: "upgrade_tests"}
0000000000000000000000000000000000000000;;				testSuite.TestCases = append(testSuite.TestCases, clusterDowngradeTest)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				upgradeFunc := func() {
0000000000000000000000000000000000000000;;					start := time.Now()
0000000000000000000000000000000000000000;;					defer finalizeUpgradeTest(start, clusterDowngradeTest)
0000000000000000000000000000000000000000;;					// Yes this really is a downgrade. And nodes must downgrade first.
0000000000000000000000000000000000000000;;					target := upgCtx.Versions[1].Version.String()
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.NodeUpgrade(f, target, framework.TestContext.UpgradeImage))
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.CheckNodesVersions(f.ClientSet, target))
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.MasterUpgrade(target))
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.CheckMasterVersion(f.ClientSet, target))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				runUpgradeSuite(f, testFrameworks, testSuite, upgCtx, upgrades.ClusterUpgrade, upgradeFunc)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("etcd Upgrade [Feature:EtcdUpgrade]", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("etc-upgrade")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create the frameworks here because we can only create them
0000000000000000000000000000000000000000;;		// in a "Describe".
0000000000000000000000000000000000000000;;		testFrameworks := createUpgradeFrameworks()
0000000000000000000000000000000000000000;;		framework.KubeDescribe("etcd upgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning cluster", func() {
0000000000000000000000000000000000000000;;				upgCtx, err := getUpgradeContext(f.ClientSet.Discovery(), "")
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				testSuite := &junit.TestSuite{Name: "Etcd upgrade"}
0000000000000000000000000000000000000000;;				etcdTest := &junit.TestCase{Name: "etcd-upgrade", Classname: "upgrade_tests"}
0000000000000000000000000000000000000000;;				testSuite.TestCases = append(testSuite.TestCases, etcdTest)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				upgradeFunc := func() {
0000000000000000000000000000000000000000;;					start := time.Now()
0000000000000000000000000000000000000000;;					defer finalizeUpgradeTest(start, etcdTest)
0000000000000000000000000000000000000000;;					framework.ExpectNoError(framework.EtcdUpgrade(framework.TestContext.EtcdUpgradeStorage, framework.TestContext.EtcdUpgradeVersion))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				runUpgradeSuite(f, testFrameworks, testSuite, upgCtx, upgrades.EtcdUpgrade, upgradeFunc)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type chaosMonkeyAdapter struct {
0000000000000000000000000000000000000000;;		test        upgrades.Test
0000000000000000000000000000000000000000;;		testReport  *junit.TestCase
0000000000000000000000000000000000000000;;		framework   *framework.Framework
0000000000000000000000000000000000000000;;		upgradeType upgrades.UpgradeType
0000000000000000000000000000000000000000;;		upgCtx      upgrades.UpgradeContext
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cma *chaosMonkeyAdapter) Test(sem *chaosmonkey.Semaphore) {
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		var once sync.Once
0000000000000000000000000000000000000000;;		ready := func() {
0000000000000000000000000000000000000000;;			once.Do(func() {
0000000000000000000000000000000000000000;;				sem.Ready()
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer finalizeUpgradeTest(start, cma.testReport)
0000000000000000000000000000000000000000;;		defer ready()
0000000000000000000000000000000000000000;;		if skippable, ok := cma.test.(upgrades.Skippable); ok && skippable.Skip(cma.upgCtx) {
0000000000000000000000000000000000000000;;			By("skipping test " + cma.test.Name())
0000000000000000000000000000000000000000;;			cma.testReport.Skipped = "skipping test " + cma.test.Name()
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer cma.test.Teardown(cma.framework)
0000000000000000000000000000000000000000;;		cma.test.Setup(cma.framework)
0000000000000000000000000000000000000000;;		ready()
0000000000000000000000000000000000000000;;		cma.test.Test(cma.framework, sem.StopCh, cma.upgradeType)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func finalizeUpgradeTest(start time.Time, tc *junit.TestCase) {
0000000000000000000000000000000000000000;;		tc.Time = time.Since(start).Seconds()
0000000000000000000000000000000000000000;;		r := recover()
0000000000000000000000000000000000000000;;		if r == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch r := r.(type) {
0000000000000000000000000000000000000000;;		case ginkgowrapper.FailurePanic:
0000000000000000000000000000000000000000;;			tc.Failures = []*junit.Failure{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Message: r.Message,
0000000000000000000000000000000000000000;;					Type:    "Failure",
0000000000000000000000000000000000000000;;					Value:   fmt.Sprintf("%s\n\n%s", r.Message, r.FullStackTrace),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case ginkgowrapper.SkipPanic:
0000000000000000000000000000000000000000;;			tc.Skipped = fmt.Sprintf("%s:%d %q", r.Filename, r.Line, r.Message)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			tc.Errors = []*junit.Error{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Message: fmt.Sprintf("%v", r),
0000000000000000000000000000000000000000;;					Type:    "Panic",
0000000000000000000000000000000000000000;;					Value:   fmt.Sprintf("%v", r),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createUpgradeFrameworks() map[string]*framework.Framework {
0000000000000000000000000000000000000000;;		testFrameworks := map[string]*framework.Framework{}
0000000000000000000000000000000000000000;;		for _, t := range upgradeTests {
0000000000000000000000000000000000000000;;			testFrameworks[t.Name()] = framework.NewDefaultFramework(t.Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return testFrameworks
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func runUpgradeSuite(
0000000000000000000000000000000000000000;;		f *framework.Framework,
0000000000000000000000000000000000000000;;		testFrameworks map[string]*framework.Framework,
0000000000000000000000000000000000000000;;		testSuite *junit.TestSuite,
0000000000000000000000000000000000000000;;		upgCtx *upgrades.UpgradeContext,
0000000000000000000000000000000000000000;;		upgradeType upgrades.UpgradeType,
0000000000000000000000000000000000000000;;		upgradeFunc func(),
0000000000000000000000000000000000000000;;	) {
0000000000000000000000000000000000000000;;		upgCtx, err := getUpgradeContext(f.ClientSet.Discovery(), framework.TestContext.UpgradeTarget)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cm := chaosmonkey.New(upgradeFunc)
0000000000000000000000000000000000000000;;		for _, t := range upgradeTests {
0000000000000000000000000000000000000000;;			testCase := &junit.TestCase{
0000000000000000000000000000000000000000;;				Name:      t.Name(),
0000000000000000000000000000000000000000;;				Classname: "upgrade_tests",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			testSuite.TestCases = append(testSuite.TestCases, testCase)
0000000000000000000000000000000000000000;;			cma := chaosMonkeyAdapter{
0000000000000000000000000000000000000000;;				test:        t,
0000000000000000000000000000000000000000;;				testReport:  testCase,
0000000000000000000000000000000000000000;;				framework:   testFrameworks[t.Name()],
0000000000000000000000000000000000000000;;				upgradeType: upgradeType,
0000000000000000000000000000000000000000;;				upgCtx:      *upgCtx,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cm.Register(cma.Test)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			testSuite.Update()
0000000000000000000000000000000000000000;;			testSuite.Time = time.Since(start).Seconds()
0000000000000000000000000000000000000000;;			if framework.TestContext.ReportDir != "" {
0000000000000000000000000000000000000000;;				fname := filepath.Join(framework.TestContext.ReportDir, fmt.Sprintf("junit_%supgrades.xml", framework.TestContext.ReportPrefix))
0000000000000000000000000000000000000000;;				f, err := os.Create(fname)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				defer f.Close()
0000000000000000000000000000000000000000;;				xml.NewEncoder(f).Encode(testSuite)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		cm.Do()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getUpgradeContext(c discovery.DiscoveryInterface, upgradeTarget string) (*upgrades.UpgradeContext, error) {
0000000000000000000000000000000000000000;;		current, err := c.ServerVersion()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		curVer, err := version.ParseSemantic(current.String())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		upgCtx := &upgrades.UpgradeContext{
0000000000000000000000000000000000000000;;			Versions: []upgrades.VersionContext{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Version:   *curVer,
0000000000000000000000000000000000000000;;					NodeImage: framework.TestContext.NodeOSDistro,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(upgradeTarget) == 0 {
0000000000000000000000000000000000000000;;			return upgCtx, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		next, err := framework.RealVersion(upgradeTarget)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nextVer, err := version.ParseSemantic(next)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		upgCtx.Versions = append(upgCtx.Versions, upgrades.VersionContext{
0000000000000000000000000000000000000000;;			Version:   *nextVer,
0000000000000000000000000000000000000000;;			NodeImage: framework.TestContext.UpgradeImage,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return upgCtx, nil
0000000000000000000000000000000000000000;;	}
