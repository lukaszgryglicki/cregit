0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c4431ecbc709a1dd6f759c64dde898ebf06a3dcb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package extension
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"text/tabwriter"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		metav1alpha1 "k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Servers with support for Table transformation", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("tables")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should return pod details", func() {
0000000000000000000000000000000000000000;;			ns := f.Namespace.Name
0000000000000000000000000000000000000000;;			c := f.ClientSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			podName := "pod-1"
0000000000000000000000000000000000000000;;			framework.Logf("Creating pod %s", podName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, err := c.Core().Pods(ns).Create(newPod(podName))
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			table := &metav1alpha1.Table{}
0000000000000000000000000000000000000000;;			err = c.Core().RESTClient().Get().Resource("pods").Namespace(ns).Name(podName).SetHeader("Accept", "application/json;as=Table;v=v1alpha1;g=meta.k8s.io").Do().Into(table)
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;			framework.Logf("Table: %#v", table)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Expect(len(table.ColumnDefinitions)).To(BeNumerically(">", 2))
0000000000000000000000000000000000000000;;			Expect(len(table.Rows)).To(Equal(1))
0000000000000000000000000000000000000000;;			Expect(len(table.Rows[0].Cells)).To(Equal(len(table.ColumnDefinitions)))
0000000000000000000000000000000000000000;;			Expect(table.ColumnDefinitions[0].Name).To(Equal("Name"))
0000000000000000000000000000000000000000;;			Expect(table.Rows[0].Cells[0]).To(Equal(podName))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			out := printTable(table)
0000000000000000000000000000000000000000;;			Expect(out).To(MatchRegexp("^NAME\\s"))
0000000000000000000000000000000000000000;;			Expect(out).To(MatchRegexp("\npod-1\\s"))
0000000000000000000000000000000000000000;;			framework.Logf("Table:\n%s", out)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should return generic metadata details across all namespaces for nodes", func() {
0000000000000000000000000000000000000000;;			c := f.ClientSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			table := &metav1alpha1.Table{}
0000000000000000000000000000000000000000;;			err := c.Core().RESTClient().Get().Resource("nodes").SetHeader("Accept", "application/json;as=Table;v=v1alpha1;g=meta.k8s.io").Do().Into(table)
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;			framework.Logf("Table: %#v", table)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Expect(len(table.ColumnDefinitions)).To(BeNumerically(">=", 2))
0000000000000000000000000000000000000000;;			Expect(len(table.Rows)).To(BeNumerically(">=", 1))
0000000000000000000000000000000000000000;;			Expect(len(table.Rows[0].Cells)).To(Equal(len(table.ColumnDefinitions)))
0000000000000000000000000000000000000000;;			Expect(table.ColumnDefinitions[0].Name).To(Equal("Name"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			out := printTable(table)
0000000000000000000000000000000000000000;;			Expect(out).To(MatchRegexp("^NAME\\s"))
0000000000000000000000000000000000000000;;			framework.Logf("Table:\n%s", out)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should return a 406 for a backend which does not implement metadata", func() {
0000000000000000000000000000000000000000;;			c := f.ClientSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			table := &metav1alpha1.Table{}
0000000000000000000000000000000000000000;;			err := c.Core().RESTClient().Get().Resource("services").SetHeader("Accept", "application/json;as=Table;v=v1alpha1;g=meta.k8s.io").Do().Into(table)
0000000000000000000000000000000000000000;;			Expect(err).To(HaveOccurred())
0000000000000000000000000000000000000000;;			Expect(err.(errors.APIStatus).Status().Code).To(Equal(int32(406)))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printTable(table *metav1alpha1.Table) string {
0000000000000000000000000000000000000000;;		buf := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		tw := tabwriter.NewWriter(buf, 5, 8, 1, ' ', 0)
0000000000000000000000000000000000000000;;		err := printers.PrintTable(table, tw, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;		tw.Flush()
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPod(podName string) *v1.Pod {
0000000000000000000000000000000000000000;;		containerName := fmt.Sprintf("%s-container", podName)
0000000000000000000000000000000000000000;;		port := 8080
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: podName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  containerName,
0000000000000000000000000000000000000000;;						Image: "gcr.io/google_containers/porter:4524579c0eb935c056c8e75563b4e1eda31587e0",
0000000000000000000000000000000000000000;;						Env:   []v1.EnvVar{{Name: fmt.Sprintf("SERVE_PORT_%d", port), Value: "foo"}},
0000000000000000000000000000000000000000;;						Ports: []v1.ContainerPort{{ContainerPort: int32(port)}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: v1.RestartPolicyNever,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
