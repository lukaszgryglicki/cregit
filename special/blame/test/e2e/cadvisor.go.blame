0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
eb07415eb95cb3ab5eaf602c8094564f2fc7cb2e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Cadvisor", func() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("cadvisor")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should be healthy on every node.", func() {
0000000000000000000000000000000000000000;;			CheckCadvisorHealthOnAllNodes(f.ClientSet, 5*time.Minute)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CheckCadvisorHealthOnAllNodes(c clientset.Interface, timeout time.Duration) {
0000000000000000000000000000000000000000;;		// It should be OK to list unschedulable Nodes here.
0000000000000000000000000000000000000000;;		By("getting list of nodes")
0000000000000000000000000000000000000000;;		nodeList, err := c.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;		var errors []error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// returns maxRetries, sleepDuration
0000000000000000000000000000000000000000;;		readConfig := func() (int, time.Duration) {
0000000000000000000000000000000000000000;;			// Read in configuration settings, reasonable defaults.
0000000000000000000000000000000000000000;;			retry := framework.TestContext.Cadvisor.MaxRetries
0000000000000000000000000000000000000000;;			if framework.TestContext.Cadvisor.MaxRetries == 0 {
0000000000000000000000000000000000000000;;				retry = 6
0000000000000000000000000000000000000000;;				framework.Logf("Overriding default retry value of zero to %d", retry)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sleepDurationMS := framework.TestContext.Cadvisor.SleepDurationMS
0000000000000000000000000000000000000000;;			if sleepDurationMS == 0 {
0000000000000000000000000000000000000000;;				sleepDurationMS = 10000
0000000000000000000000000000000000000000;;				framework.Logf("Overriding default milliseconds value of zero to %d", sleepDurationMS)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return retry, time.Duration(sleepDurationMS) * time.Millisecond
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		maxRetries, sleepDuration := readConfig()
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			errors = []error{}
0000000000000000000000000000000000000000;;			for _, node := range nodeList.Items {
0000000000000000000000000000000000000000;;				// cadvisor is not accessible directly unless its port (4194 by default) is exposed.
0000000000000000000000000000000000000000;;				// Here, we access '/stats/' REST endpoint on the kubelet which polls cadvisor internally.
0000000000000000000000000000000000000000;;				statsResource := fmt.Sprintf("api/v1/proxy/nodes/%s/stats/", node.Name)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("Querying stats from node %s using url %s", node.Name, statsResource))
0000000000000000000000000000000000000000;;				_, err = c.Core().RESTClient().Get().AbsPath(statsResource).Timeout(timeout).Do().Raw()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					errors = append(errors, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errors) == 0 {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if maxRetries--; maxRetries <= 0 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			framework.Logf("failed to retrieve kubelet stats -\n %v", errors)
0000000000000000000000000000000000000000;;			time.Sleep(sleepDuration)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Failf("Failed after retrying %d times for cadvisor to be healthy on all nodes. Errors:\n%v", maxRetries, errors)
0000000000000000000000000000000000000000;;	}
