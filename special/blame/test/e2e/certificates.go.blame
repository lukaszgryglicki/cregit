0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9e56bc11abf06da9fae7ec13af52507d89fe29a3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"crypto/x509/pkix"
0000000000000000000000000000000000000000;;		"encoding/pem"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/certificates/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/cert"
0000000000000000000000000000000000000000;;		v1beta1client "k8s.io/kubernetes/pkg/client/clientset_generated/clientset/typed/certificates/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Certificates API", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("certificates")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should support building a client with a CSR", func() {
0000000000000000000000000000000000000000;;			const commonName = "tester-csr"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pk, err := cert.NewPrivateKey()
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pkder := x509.MarshalPKCS1PrivateKey(pk)
0000000000000000000000000000000000000000;;			pkpem := pem.EncodeToMemory(&pem.Block{
0000000000000000000000000000000000000000;;				Type:  "RSA PRIVATE KEY",
0000000000000000000000000000000000000000;;				Bytes: pkder,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			csrb, err := cert.MakeCSR(pk, &pkix.Name{CommonName: commonName, Organization: []string{"system:masters"}}, nil, nil)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			csr := &v1beta1.CertificateSigningRequest{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					GenerateName: commonName + "-",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1beta1.CertificateSigningRequestSpec{
0000000000000000000000000000000000000000;;					Request: csrb,
0000000000000000000000000000000000000000;;					Usages: []v1beta1.KeyUsage{
0000000000000000000000000000000000000000;;						v1beta1.UsageSigning,
0000000000000000000000000000000000000000;;						v1beta1.UsageKeyEncipherment,
0000000000000000000000000000000000000000;;						v1beta1.UsageClientAuth,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			csrs := f.ClientSet.CertificatesV1beta1().CertificateSigningRequests()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			framework.Logf("creating CSR")
0000000000000000000000000000000000000000;;			csr, err = csrs.Create(csr)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			csrName := csr.Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			framework.Logf("approving CSR")
0000000000000000000000000000000000000000;;			framework.ExpectNoError(wait.Poll(5*time.Second, time.Minute, func() (bool, error) {
0000000000000000000000000000000000000000;;				csr.Status.Conditions = []v1beta1.CertificateSigningRequestCondition{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Type:    v1beta1.CertificateApproved,
0000000000000000000000000000000000000000;;						Reason:  "E2E",
0000000000000000000000000000000000000000;;						Message: "Set from an e2e test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				csr, err = csrs.UpdateApproval(csr)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					csr, _ = csrs.Get(csrName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;					framework.Logf("err updating approval: %v", err)
0000000000000000000000000000000000000000;;					return false, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			framework.Logf("waiting for CSR to be signed")
0000000000000000000000000000000000000000;;			framework.ExpectNoError(wait.Poll(5*time.Second, time.Minute, func() (bool, error) {
0000000000000000000000000000000000000000;;				csr, _ = csrs.Get(csrName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return false, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(csr.Status.Certificate) == 0 {
0000000000000000000000000000000000000000;;					framework.Logf("csr not signed yet")
0000000000000000000000000000000000000000;;					return false, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			framework.Logf("testing the client")
0000000000000000000000000000000000000000;;			rcfg, err := framework.LoadConfig()
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			rcfg.TLSClientConfig.CertData = csr.Status.Certificate
0000000000000000000000000000000000000000;;			rcfg.TLSClientConfig.KeyData = pkpem
0000000000000000000000000000000000000000;;			rcfg.TLSClientConfig.CertFile = ""
0000000000000000000000000000000000000000;;			rcfg.BearerToken = ""
0000000000000000000000000000000000000000;;			rcfg.AuthProvider = nil
0000000000000000000000000000000000000000;;			rcfg.Username = ""
0000000000000000000000000000000000000000;;			rcfg.Password = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			newClient, err := v1beta1client.NewForConfig(rcfg)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(newClient.CertificateSigningRequests().Delete(csrName, nil))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
