0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9334b1bd74ee3dd6f5829ba8a32ddcdc11ebfa8b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scheduling
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scheduleSuccessEvent(podName, nodeName string) func(*v1.Event) bool {
0000000000000000000000000000000000000000;;		return func(e *v1.Event) bool {
0000000000000000000000000000000000000000;;			return e.Type == v1.EventTypeNormal &&
0000000000000000000000000000000000000000;;				e.Reason == "Scheduled" &&
0000000000000000000000000000000000000000;;				strings.HasPrefix(e.Name, podName) &&
0000000000000000000000000000000000000000;;				strings.Contains(e.Message, fmt.Sprintf("Successfully assigned %v to %v", podName, nodeName))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scheduleFailureEvent(podName string) func(*v1.Event) bool {
0000000000000000000000000000000000000000;;		return func(e *v1.Event) bool {
0000000000000000000000000000000000000000;;			return strings.HasPrefix(e.Name, podName) &&
0000000000000000000000000000000000000000;;				e.Type == "Warning" &&
0000000000000000000000000000000000000000;;				e.Reason == "FailedScheduling"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
