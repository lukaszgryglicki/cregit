0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
264e1f2ab87cc4cb73b39192367f8990d23c1fea;test/e2e/kube-ui.go[test/e2e/kube-ui.go][test/e2e/dashboard.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;		testutils "k8s.io/kubernetes/test/utils"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Kubernetes Dashboard", func() {
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			uiServiceName = "kubernetes-dashboard"
0000000000000000000000000000000000000000;;			uiAppName     = uiServiceName
0000000000000000000000000000000000000000;;			uiNamespace   = metav1.NamespaceSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			serverStartTimeout = 1 * time.Minute
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework(uiServiceName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should check that the kubernetes-dashboard instance is alive", func() {
0000000000000000000000000000000000000000;;			By("Checking whether the kubernetes-dashboard service exists.")
0000000000000000000000000000000000000000;;			err := framework.WaitForService(f.ClientSet, uiNamespace, uiServiceName, true, framework.Poll, framework.ServiceStartTimeout)
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Checking to make sure the kubernetes-dashboard pods are running")
0000000000000000000000000000000000000000;;			selector := labels.SelectorFromSet(labels.Set(map[string]string{"k8s-app": uiAppName}))
0000000000000000000000000000000000000000;;			err = testutils.WaitForPodsWithLabelRunning(f.ClientSet, uiNamespace, selector)
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Checking to make sure we get a response from the kubernetes-dashboard.")
0000000000000000000000000000000000000000;;			err = wait.Poll(framework.Poll, serverStartTimeout, func() (bool, error) {
0000000000000000000000000000000000000000;;				var status int
0000000000000000000000000000000000000000;;				proxyRequest, errProxy := framework.GetServicesProxyRequest(f.ClientSet, f.ClientSet.Core().RESTClient().Get())
0000000000000000000000000000000000000000;;				if errProxy != nil {
0000000000000000000000000000000000000000;;					framework.Logf("Get services proxy request failed: %v", errProxy)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				ctx, cancel := context.WithTimeout(context.Background(), framework.SingleCallTimeout)
0000000000000000000000000000000000000000;;				defer cancel()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Query against the proxy URL for the kube-ui service.
0000000000000000000000000000000000000000;;				err := proxyRequest.Namespace(uiNamespace).
0000000000000000000000000000000000000000;;					Context(ctx).
0000000000000000000000000000000000000000;;					Name(uiServiceName).
0000000000000000000000000000000000000000;;					Timeout(framework.SingleCallTimeout).
0000000000000000000000000000000000000000;;					Do().
0000000000000000000000000000000000000000;;					StatusCode(&status).
0000000000000000000000000000000000000000;;					Error()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					if ctx.Err() != nil {
0000000000000000000000000000000000000000;;						framework.Failf("Request to kube-ui failed: %v", err)
0000000000000000000000000000000000000000;;						return true, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					framework.Logf("Request to kube-ui failed: %v", err)
0000000000000000000000000000000000000000;;				} else if status != http.StatusOK {
0000000000000000000000000000000000000000;;					framework.Logf("Unexpected status from kubernetes-dashboard: %v", status)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// Don't return err here as it aborts polling.
0000000000000000000000000000000000000000;;				return status == http.StatusOK, nil
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Checking that the ApiServer /ui endpoint redirects to a valid server.")
0000000000000000000000000000000000000000;;			var status int
0000000000000000000000000000000000000000;;			err = f.ClientSet.Core().RESTClient().Get().
0000000000000000000000000000000000000000;;				AbsPath("/ui").
0000000000000000000000000000000000000000;;				Timeout(framework.SingleCallTimeout).
0000000000000000000000000000000000000000;;				Do().
0000000000000000000000000000000000000000;;				StatusCode(&status).
0000000000000000000000000000000000000000;;				Error()
0000000000000000000000000000000000000000;;			Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;			Expect(status).To(Equal(http.StatusOK), "Unexpected status from /ui")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
