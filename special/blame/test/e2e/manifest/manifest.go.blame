0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bc1ab85e0f633e1e6513e476d1c9e7ecf8af854f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package manifest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		utilyaml "k8s.io/apimachinery/pkg/util/yaml"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/generated"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodFromManifest reads a .json/yaml file and returns the pod in it.
0000000000000000000000000000000000000000;;	func PodFromManifest(filename string) (*v1.Pod, error) {
0000000000000000000000000000000000000000;;		var pod v1.Pod
0000000000000000000000000000000000000000;;		data := generated.ReadOrDie(filename)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := utilyaml.ToJSON(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(api.Codecs.UniversalDecoder(), json, &pod); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pod, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RcFromManifest reads a .json/yaml file and returns the rc in it.
0000000000000000000000000000000000000000;;	func RcFromManifest(fileName string) (*v1.ReplicationController, error) {
0000000000000000000000000000000000000000;;		var controller v1.ReplicationController
0000000000000000000000000000000000000000;;		data := generated.ReadOrDie(fileName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := utilyaml.ToJSON(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(api.Codecs.UniversalDecoder(), json, &controller); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &controller, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SvcFromManifest reads a .json/yaml file and returns the service in it.
0000000000000000000000000000000000000000;;	func SvcFromManifest(fileName string) (*v1.Service, error) {
0000000000000000000000000000000000000000;;		var svc v1.Service
0000000000000000000000000000000000000000;;		data := generated.ReadOrDie(fileName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := utilyaml.ToJSON(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(api.Codecs.UniversalDecoder(), json, &svc); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &svc, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IngressFromManifest reads a .json/yaml file and returns the ingress in it.
0000000000000000000000000000000000000000;;	func IngressFromManifest(fileName string) (*extensions.Ingress, error) {
0000000000000000000000000000000000000000;;		var ing extensions.Ingress
0000000000000000000000000000000000000000;;		data := generated.ReadOrDie(fileName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := utilyaml.ToJSON(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(api.Codecs.UniversalDecoder(), json, &ing); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ing, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetFromManifest returns a StatefulSet from a manifest stored in fileName in the Namespace indicated by ns.
0000000000000000000000000000000000000000;;	func StatefulSetFromManifest(fileName, ns string) (*apps.StatefulSet, error) {
0000000000000000000000000000000000000000;;		var ss apps.StatefulSet
0000000000000000000000000000000000000000;;		data := generated.ReadOrDie(fileName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := utilyaml.ToJSON(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(api.Codecs.UniversalDecoder(), json, &ss); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ss.Namespace = ns
0000000000000000000000000000000000000000;;		if ss.Spec.Selector == nil {
0000000000000000000000000000000000000000;;			ss.Spec.Selector = &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchLabels: ss.Spec.Template.Labels,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ss, nil
0000000000000000000000000000000000000000;;	}
