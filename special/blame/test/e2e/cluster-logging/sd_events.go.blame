0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
755a02fa470a28f713e81b039e3b61be52636921;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// eventsIngestionTimeout is the amount of time to wait until some
0000000000000000000000000000000000000000;;		// events are ingested.
0000000000000000000000000000000000000000;;		eventsIngestionTimeout = 10 * time.Minute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// eventPollingInterval is the delay between attempts to read events
0000000000000000000000000000000000000000;;		// from the logs provider.
0000000000000000000000000000000000000000;;		eventPollingInterval = 1 * time.Second
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// eventCreationInterval is the minimal delay between two events
0000000000000000000000000000000000000000;;		// created for testing purposes.
0000000000000000000000000000000000000000;;		eventCreationInterval = 10 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Cluster level logging implemented by Stackdriver", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("sd-logging-events")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			framework.SkipUnlessProviderIs("gce", "gke")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should ingest events", func() {
0000000000000000000000000000000000000000;;			sdLogsProvider, err := newSdLogsProvider(f)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err, "Failed to create Stackdriver logs provider")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = sdLogsProvider.Init()
0000000000000000000000000000000000000000;;			defer sdLogsProvider.Cleanup()
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err, "Failed to init Stackdriver logs provider")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;			successCh := make(chan struct{})
0000000000000000000000000000000000000000;;			go func() {
0000000000000000000000000000000000000000;;				wait.Poll(eventPollingInterval, eventsIngestionTimeout, func() (bool, error) {
0000000000000000000000000000000000000000;;					events := sdLogsProvider.ReadEvents()
0000000000000000000000000000000000000000;;					if len(events) > 0 {
0000000000000000000000000000000000000000;;						framework.Logf("Some events are ingested, sample event: %v", events[0])
0000000000000000000000000000000000000000;;						close(successCh)
0000000000000000000000000000000000000000;;						return true, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return false, nil
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				close(stopCh)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Running pods to generate events while waiting for some of them to be ingested")
0000000000000000000000000000000000000000;;			wait.PollUntil(eventCreationInterval, func() (bool, error) {
0000000000000000000000000000000000000000;;				podName := "synthlogger"
0000000000000000000000000000000000000000;;				startNewLoggingPod(f, podName, "", 1, 1*time.Second)
0000000000000000000000000000000000000000;;				defer f.PodClient().Delete(podName, &meta_v1.DeleteOptions{})
0000000000000000000000000000000000000000;;				err = framework.WaitForPodSuccessInNamespace(f.ClientSet, podName, f.Namespace.Name)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Logf("Failed to wait pod %s to successfully complete due to %v", podName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}, stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-successCh:
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				framework.Failf("No events are present in Stackdriver after %v", eventsIngestionTimeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
