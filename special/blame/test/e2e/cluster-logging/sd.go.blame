0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
173575707659bc12f8e4192261acc749a580d6c4;test/e2e/cluster_logging_gcl.go[test/e2e/cluster_logging_gcl.go][test/e2e/cluster-logging/sd.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Cluster level logging implemented by Stackdriver", func() {
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("sd-logging")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			framework.SkipUnlessProviderIs("gce", "gke")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should ingest logs from applications", func() {
0000000000000000000000000000000000000000;;			podName := "synthlogger"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sdLogsProvider, err := newSdLogsProvider(f)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err, "Failed to create Stackdriver logs provider")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = sdLogsProvider.Init()
0000000000000000000000000000000000000000;;			defer sdLogsProvider.Cleanup()
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err, "Failed to init Stackdriver logs provider")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = ensureSingleFluentdOnEachNode(f, sdLogsProvider.FluentdApplicationName())
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err, "Fluentd deployed incorrectly")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Running synthetic logger")
0000000000000000000000000000000000000000;;			pod := startNewLoggingPod(f, podName, "", 10*60, 10*time.Minute)
0000000000000000000000000000000000000000;;			defer f.PodClient().Delete(podName, &meta_v1.DeleteOptions{})
0000000000000000000000000000000000000000;;			err = framework.WaitForPodNameRunningInNamespace(f.ClientSet, podName, f.Namespace.Name)
0000000000000000000000000000000000000000;;			framework.ExpectNoError(err, fmt.Sprintf("Should've successfully waited for pod %s to be running", podName))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("Waiting for logs to ingest")
0000000000000000000000000000000000000000;;			config := &loggingTestConfig{
0000000000000000000000000000000000000000;;				LogsProvider:              sdLogsProvider,
0000000000000000000000000000000000000000;;				Pods:                      []*loggingPod{pod},
0000000000000000000000000000000000000000;;				IngestionTimeout:          10 * time.Minute,
0000000000000000000000000000000000000000;;				MaxAllowedLostFraction:    0,
0000000000000000000000000000000000000000;;				MaxAllowedFluentdRestarts: 0,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			framework.ExpectNoError(waitForSomeLogs(f, config), "Failed to ingest logs")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
