0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
57cddc74314ee1c203f913729a8118034faed4e0;test/e2e/cluster_logging_gcl_utils.go[test/e2e/cluster_logging_gcl_utils.go][test/e2e/cluster-logging/sd_utils.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2/google"
0000000000000000000000000000000000000000;;		sd "google.golang.org/api/logging/v2beta1"
0000000000000000000000000000000000000000;;		pubsub "google.golang.org/api/pubsub/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// The amount of time to wait for Stackdriver Logging
0000000000000000000000000000000000000000;;		// sink to become operational
0000000000000000000000000000000000000000;;		sinkStartupTimeout = 10 * time.Minute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The limit on the number of messages to pull from PubSub
0000000000000000000000000000000000000000;;		maxPullLogMessages = 100 * 1000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The limit on the number of messages in the single cache
0000000000000000000000000000000000000000;;		maxCacheSize = 10 * 1000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PubSub topic with log entries polling interval
0000000000000000000000000000000000000000;;		sdLoggingPollInterval = 100 * time.Millisecond
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sdLogsProvider struct {
0000000000000000000000000000000000000000;;		SdService          *sd.Service
0000000000000000000000000000000000000000;;		PubsubService      *pubsub.Service
0000000000000000000000000000000000000000;;		Framework          *framework.Framework
0000000000000000000000000000000000000000;;		Topic              *pubsub.Topic
0000000000000000000000000000000000000000;;		Subscription       *pubsub.Subscription
0000000000000000000000000000000000000000;;		LogSink            *sd.LogSink
0000000000000000000000000000000000000000;;		LogEntryCache      map[string]chan logEntry
0000000000000000000000000000000000000000;;		EventCache         chan map[string]interface{}
0000000000000000000000000000000000000000;;		CacheMutex         *sync.Mutex
0000000000000000000000000000000000000000;;		PollingStopChannel chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSdLogsProvider(f *framework.Framework) (*sdLogsProvider, error) {
0000000000000000000000000000000000000000;;		ctx := context.Background()
0000000000000000000000000000000000000000;;		hc, err := google.DefaultClient(ctx, sd.CloudPlatformScope)
0000000000000000000000000000000000000000;;		sdService, err := sd.New(hc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pubsubService, err := pubsub.New(hc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		provider := &sdLogsProvider{
0000000000000000000000000000000000000000;;			SdService:          sdService,
0000000000000000000000000000000000000000;;			PubsubService:      pubsubService,
0000000000000000000000000000000000000000;;			Framework:          f,
0000000000000000000000000000000000000000;;			LogEntryCache:      map[string]chan logEntry{},
0000000000000000000000000000000000000000;;			EventCache:         make(chan map[string]interface{}, maxCacheSize),
0000000000000000000000000000000000000000;;			CacheMutex:         &sync.Mutex{},
0000000000000000000000000000000000000000;;			PollingStopChannel: make(chan struct{}, 1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return provider, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) Init() error {
0000000000000000000000000000000000000000;;		projectId := framework.TestContext.CloudConfig.ProjectID
0000000000000000000000000000000000000000;;		nsName := sdLogsProvider.Framework.Namespace.Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		topic, err := sdLogsProvider.createPubSubTopic(projectId, nsName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to create PubSub topic: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sdLogsProvider.Topic = topic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		subs, err := sdLogsProvider.createPubSubSubscription(projectId, nsName, topic.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to create PubSub subscription: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sdLogsProvider.Subscription = subs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logSink, err := sdLogsProvider.createSink(projectId, nsName, nsName, topic.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to create Stackdriver Logging sink: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sdLogsProvider.LogSink = logSink
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = sdLogsProvider.authorizeSink(); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to authorize log sink: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = sdLogsProvider.waitSinkInit(); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to wait for sink to become operational: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go sdLogsProvider.pollLogs()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) createPubSubTopic(projectId, topicName string) (*pubsub.Topic, error) {
0000000000000000000000000000000000000000;;		topicFullName := fmt.Sprintf("projects/%s/topics/%s", projectId, topicName)
0000000000000000000000000000000000000000;;		topic := &pubsub.Topic{
0000000000000000000000000000000000000000;;			Name: topicFullName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return sdLogsProvider.PubsubService.Projects.Topics.Create(topicFullName, topic).Do()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) createPubSubSubscription(projectId, subsName, topicName string) (*pubsub.Subscription, error) {
0000000000000000000000000000000000000000;;		subsFullName := fmt.Sprintf("projects/%s/subscriptions/%s", projectId, subsName)
0000000000000000000000000000000000000000;;		subs := &pubsub.Subscription{
0000000000000000000000000000000000000000;;			Name:  subsFullName,
0000000000000000000000000000000000000000;;			Topic: topicName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return sdLogsProvider.PubsubService.Projects.Subscriptions.Create(subsFullName, subs).Do()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) createSink(projectId, nsName, sinkName, topicName string) (*sd.LogSink, error) {
0000000000000000000000000000000000000000;;		projectDst := fmt.Sprintf("projects/%s", projectId)
0000000000000000000000000000000000000000;;		filter := fmt.Sprintf("(resource.type=\"gke_cluster\" AND jsonPayload.kind=\"Event\" AND jsonPayload.metadata.namespace=\"%s\") OR "+
0000000000000000000000000000000000000000;;			"(resource.type=\"container\" AND resource.labels.namespace_id=\"%s\")", nsName, nsName)
0000000000000000000000000000000000000000;;		framework.Logf("Using the following filter for entries: %s", filter)
0000000000000000000000000000000000000000;;		sink := &sd.LogSink{
0000000000000000000000000000000000000000;;			Name:        sinkName,
0000000000000000000000000000000000000000;;			Destination: fmt.Sprintf("pubsub.googleapis.com/%s", topicName),
0000000000000000000000000000000000000000;;			Filter:      filter,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return sdLogsProvider.SdService.Projects.Sinks.Create(projectDst, sink).Do()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) authorizeSink() error {
0000000000000000000000000000000000000000;;		topicsService := sdLogsProvider.PubsubService.Projects.Topics
0000000000000000000000000000000000000000;;		policy, err := topicsService.GetIamPolicy(sdLogsProvider.Topic.Name).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		binding := &pubsub.Binding{
0000000000000000000000000000000000000000;;			Role:    "roles/pubsub.publisher",
0000000000000000000000000000000000000000;;			Members: []string{sdLogsProvider.LogSink.WriterIdentity},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		policy.Bindings = append(policy.Bindings, binding)
0000000000000000000000000000000000000000;;		req := &pubsub.SetIamPolicyRequest{Policy: policy}
0000000000000000000000000000000000000000;;		if _, err = topicsService.SetIamPolicy(sdLogsProvider.Topic.Name, req).Do(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) waitSinkInit() error {
0000000000000000000000000000000000000000;;		framework.Logf("Waiting for log sink to become operational")
0000000000000000000000000000000000000000;;		return wait.Poll(1*time.Second, sinkStartupTimeout, func() (bool, error) {
0000000000000000000000000000000000000000;;			err := publish(sdLogsProvider.PubsubService, sdLogsProvider.Topic, "embrace eternity")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				framework.Logf("Failed to push message to PubSub due to %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			messages, err := pullAndAck(sdLogsProvider.PubsubService, sdLogsProvider.Subscription)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				framework.Logf("Failed to pull messages from PubSub due to %v", err)
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(messages) > 0 {
0000000000000000000000000000000000000000;;				framework.Logf("Sink %s is operational", sdLogsProvider.LogSink.Name)
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) pollLogs() {
0000000000000000000000000000000000000000;;		wait.PollUntil(sdLoggingPollInterval, func() (bool, error) {
0000000000000000000000000000000000000000;;			messages, err := pullAndAck(sdLogsProvider.PubsubService, sdLogsProvider.Subscription)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				framework.Logf("Failed to pull messages from PubSub due to %v", err)
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, msg := range messages {
0000000000000000000000000000000000000000;;				logEntryEncoded, err := base64.StdEncoding.DecodeString(msg.Message.Data)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					framework.Logf("Got a message from pubsub that is not base64-encoded: %s", msg.Message.Data)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				var sdLogEntry sd.LogEntry
0000000000000000000000000000000000000000;;				if err := json.Unmarshal(logEntryEncoded, &sdLogEntry); err != nil {
0000000000000000000000000000000000000000;;					framework.Logf("Failed to decode a pubsub message '%s': %v", logEntryEncoded, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				switch sdLogEntry.Resource.Type {
0000000000000000000000000000000000000000;;				case "container":
0000000000000000000000000000000000000000;;					podName := sdLogEntry.Resource.Labels["pod_id"]
0000000000000000000000000000000000000000;;					ch := sdLogsProvider.getCacheChannel(podName)
0000000000000000000000000000000000000000;;					ch <- logEntry{Payload: sdLogEntry.TextPayload}
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				case "gke_cluster":
0000000000000000000000000000000000000000;;					jsonPayloadRaw, err := sdLogEntry.JsonPayload.MarshalJSON()
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						framework.Logf("Failed to get jsonPayload from LogEntry %v", sdLogEntry)
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					var eventObject map[string]interface{}
0000000000000000000000000000000000000000;;					err = json.Unmarshal(jsonPayloadRaw, &eventObject)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						framework.Logf("Failed to deserialize jsonPayload as json object %s", string(jsonPayloadRaw[:]))
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					sdLogsProvider.EventCache <- eventObject
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					framework.Logf("Received LogEntry with unexpected resource type: %s", sdLogEntry.Resource.Type)
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}, sdLogsProvider.PollingStopChannel)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) Cleanup() {
0000000000000000000000000000000000000000;;		sdLogsProvider.PollingStopChannel <- struct{}{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if sdLogsProvider.LogSink != nil {
0000000000000000000000000000000000000000;;			projectId := framework.TestContext.CloudConfig.ProjectID
0000000000000000000000000000000000000000;;			sinkNameId := fmt.Sprintf("projects/%s/sinks/%s", projectId, sdLogsProvider.LogSink.Name)
0000000000000000000000000000000000000000;;			sinksService := sdLogsProvider.SdService.Projects.Sinks
0000000000000000000000000000000000000000;;			if _, err := sinksService.Delete(sinkNameId).Do(); err != nil {
0000000000000000000000000000000000000000;;				framework.Logf("Failed to delete LogSink: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if sdLogsProvider.Subscription != nil {
0000000000000000000000000000000000000000;;			subsService := sdLogsProvider.PubsubService.Projects.Subscriptions
0000000000000000000000000000000000000000;;			if _, err := subsService.Delete(sdLogsProvider.Subscription.Name).Do(); err != nil {
0000000000000000000000000000000000000000;;				framework.Logf("Failed to delete PubSub subscription: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if sdLogsProvider.Topic != nil {
0000000000000000000000000000000000000000;;			topicsService := sdLogsProvider.PubsubService.Projects.Topics
0000000000000000000000000000000000000000;;			if _, err := topicsService.Delete(sdLogsProvider.Topic.Name).Do(); err != nil {
0000000000000000000000000000000000000000;;				framework.Logf("Failed to delete PubSub topic: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) ReadEntries(pod *loggingPod) []logEntry {
0000000000000000000000000000000000000000;;		var entries []logEntry
0000000000000000000000000000000000000000;;		ch := sdLogsProvider.getCacheChannel(pod.Name)
0000000000000000000000000000000000000000;;	polling_loop:
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case entry := <-ch:
0000000000000000000000000000000000000000;;				entries = append(entries, entry)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				break polling_loop
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return entries
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logsProvider *sdLogsProvider) FluentdApplicationName() string {
0000000000000000000000000000000000000000;;		return "fluentd-gcp"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) ReadEvents() []map[string]interface{} {
0000000000000000000000000000000000000000;;		var events []map[string]interface{}
0000000000000000000000000000000000000000;;	polling_loop:
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case event := <-sdLogsProvider.EventCache:
0000000000000000000000000000000000000000;;				events = append(events, event)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				break polling_loop
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return events
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdLogsProvider *sdLogsProvider) getCacheChannel(podName string) chan logEntry {
0000000000000000000000000000000000000000;;		sdLogsProvider.CacheMutex.Lock()
0000000000000000000000000000000000000000;;		defer sdLogsProvider.CacheMutex.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ch, ok := sdLogsProvider.LogEntryCache[podName]; ok {
0000000000000000000000000000000000000000;;			return ch
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newCh := make(chan logEntry, maxCacheSize)
0000000000000000000000000000000000000000;;		sdLogsProvider.LogEntryCache[podName] = newCh
0000000000000000000000000000000000000000;;		return newCh
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pullAndAck(service *pubsub.Service, subs *pubsub.Subscription) ([]*pubsub.ReceivedMessage, error) {
0000000000000000000000000000000000000000;;		subsService := service.Projects.Subscriptions
0000000000000000000000000000000000000000;;		req := &pubsub.PullRequest{
0000000000000000000000000000000000000000;;			ReturnImmediately: true,
0000000000000000000000000000000000000000;;			MaxMessages:       maxPullLogMessages,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := subsService.Pull(subs.Name, req).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var ids []string
0000000000000000000000000000000000000000;;		for _, msg := range resp.ReceivedMessages {
0000000000000000000000000000000000000000;;			ids = append(ids, msg.AckId)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(ids) > 0 {
0000000000000000000000000000000000000000;;			ackReq := &pubsub.AcknowledgeRequest{AckIds: ids}
0000000000000000000000000000000000000000;;			if _, err = subsService.Acknowledge(subs.Name, ackReq).Do(); err != nil {
0000000000000000000000000000000000000000;;				framework.Logf("Failed to ack poll: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp.ReceivedMessages, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func publish(service *pubsub.Service, topic *pubsub.Topic, msg string) error {
0000000000000000000000000000000000000000;;		topicsService := service.Projects.Topics
0000000000000000000000000000000000000000;;		req := &pubsub.PublishRequest{
0000000000000000000000000000000000000000;;			Messages: []*pubsub.PubsubMessage{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Data: base64.StdEncoding.EncodeToString([]byte(msg)),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err := topicsService.Publish(topic.Name, req).Do()
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
