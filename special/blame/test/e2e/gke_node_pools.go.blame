0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2c9c0c8df3636c1e05f0d7070b1be67bba392c56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("GKE node pools [Feature:GKENodePool]", func() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := framework.NewDefaultFramework("node-pools")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			framework.SkipUnlessProviderIs("gke")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should create a cluster with multiple node pools [Feature:GKENodePool]", func() {
0000000000000000000000000000000000000000;;			framework.Logf("Start create node pool test")
0000000000000000000000000000000000000000;;			testCreateDeleteNodePool(f, "test-pool")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testCreateDeleteNodePool(f *framework.Framework, poolName string) {
0000000000000000000000000000000000000000;;		framework.Logf("Create node pool: %q in cluster: %q", poolName, framework.TestContext.CloudConfig.Cluster)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterStr := fmt.Sprintf("--cluster=%s", framework.TestContext.CloudConfig.Cluster)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := exec.Command("gcloud", "container", "node-pools", "create",
0000000000000000000000000000000000000000;;			poolName,
0000000000000000000000000000000000000000;;			clusterStr,
0000000000000000000000000000000000000000;;			"--num-nodes=2").CombinedOutput()
0000000000000000000000000000000000000000;;		framework.Logf("\n%s", string(out))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			framework.Failf("Failed to create node pool %q. Err: %v\n%v", poolName, err, string(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Successfully created node pool %q.", poolName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err = exec.Command("gcloud", "container", "node-pools", "list",
0000000000000000000000000000000000000000;;			clusterStr).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			framework.Failf("Failed to list node pools from cluster %q. Err: %v\n%v", framework.TestContext.CloudConfig.Cluster, err, string(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Node pools:\n%s", string(out))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.Logf("Checking that 2 nodes have the correct node pool label.")
0000000000000000000000000000000000000000;;		nodeCount := nodesWithPoolLabel(f, poolName)
0000000000000000000000000000000000000000;;		if nodeCount != 2 {
0000000000000000000000000000000000000000;;			framework.Failf("Wanted 2 nodes with node pool label, got: %v", nodeCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Success, found 2 nodes with correct node pool labels.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.Logf("Deleting node pool: %q in cluster: %q", poolName, framework.TestContext.CloudConfig.Cluster)
0000000000000000000000000000000000000000;;		out, err = exec.Command("gcloud", "container", "node-pools", "delete",
0000000000000000000000000000000000000000;;			poolName,
0000000000000000000000000000000000000000;;			clusterStr,
0000000000000000000000000000000000000000;;			"-q").CombinedOutput()
0000000000000000000000000000000000000000;;		framework.Logf("\n%s", string(out))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			framework.Failf("Failed to delete node pool %q. Err: %v\n%v", poolName, err, string(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Successfully deleted node pool %q.", poolName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err = exec.Command("gcloud", "container", "node-pools", "list",
0000000000000000000000000000000000000000;;			clusterStr).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			framework.Failf("\nFailed to list node pools from cluster %q. Err: %v\n%v", framework.TestContext.CloudConfig.Cluster, err, string(out))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("\nNode pools:\n%s", string(out))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.Logf("Checking that no nodes have the deleted node pool's label.")
0000000000000000000000000000000000000000;;		nodeCount = nodesWithPoolLabel(f, poolName)
0000000000000000000000000000000000000000;;		if nodeCount != 0 {
0000000000000000000000000000000000000000;;			framework.Failf("Wanted 0 nodes with node pool label, got: %v", nodeCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		framework.Logf("Success, found no nodes with the deleted node pool's label.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// nodesWithPoolLabel returns the number of nodes that have the "gke-nodepool"
0000000000000000000000000000000000000000;;	// label with the given node pool name.
0000000000000000000000000000000000000000;;	func nodesWithPoolLabel(f *framework.Framework, poolName string) int {
0000000000000000000000000000000000000000;;		nodeCount := 0
0000000000000000000000000000000000000000;;		nodeList := framework.GetReadySchedulableNodesOrDie(f.ClientSet)
0000000000000000000000000000000000000000;;		for _, node := range nodeList.Items {
0000000000000000000000000000000000000000;;			if poolLabel := node.Labels["cloud.google.com/gke-nodepool"]; poolLabel == poolName {
0000000000000000000000000000000000000000;;				nodeCount++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nodeCount
0000000000000000000000000000000000000000;;	}
