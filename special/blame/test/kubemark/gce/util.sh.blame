0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../../..
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/test/kubemark/common/util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Wrapper for gcloud compute, running it $RETRIES times in case of failures.
0000000000000000000000000000000000000000;;	# Args:
0000000000000000000000000000000000000000;;	# $@: all stuff that goes after 'gcloud compute'
0000000000000000000000000000000000000000;;	function run-gcloud-compute-with-retries {
0000000000000000000000000000000000000000;;	  run-cmd-with-retries gcloud compute "$@"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-master-instance-with-resources {
0000000000000000000000000000000000000000;;	  GCLOUD_COMMON_ARGS="--project ${PROJECT} --zone ${ZONE}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  run-gcloud-compute-with-retries disks create "${MASTER_NAME}-pd" \
0000000000000000000000000000000000000000;;	    ${GCLOUD_COMMON_ARGS} \
0000000000000000000000000000000000000000;;	    --type "${MASTER_DISK_TYPE}" \
0000000000000000000000000000000000000000;;	    --size "${MASTER_DISK_SIZE}"
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  if [ "${EVENT_PD:-false}" == "true" ]; then
0000000000000000000000000000000000000000;;	    run-gcloud-compute-with-retries disks create "${MASTER_NAME}-event-pd" \
0000000000000000000000000000000000000000;;	      ${GCLOUD_COMMON_ARGS} \
0000000000000000000000000000000000000000;;	      --type "${MASTER_DISK_TYPE}" \
0000000000000000000000000000000000000000;;	      --size "${MASTER_DISK_SIZE}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  run-gcloud-compute-with-retries addresses create "${MASTER_NAME}-ip" \
0000000000000000000000000000000000000000;;	    --project "${PROJECT}" \
0000000000000000000000000000000000000000;;	    --region "${REGION}" -q
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  MASTER_IP=$(gcloud compute addresses describe "${MASTER_NAME}-ip" \
0000000000000000000000000000000000000000;;	    --project "${PROJECT}" --region "${REGION}" -q --format='value(address)')
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Override the master image project to cos-cloud for COS images staring with `cos` string prefix.
0000000000000000000000000000000000000000;;	  DEFAULT_GCI_PROJECT=google-containers
0000000000000000000000000000000000000000;;	  if [[ "${GCI_VERSION}" == "cos"* ]]; then
0000000000000000000000000000000000000000;;	      DEFAULT_GCI_PROJECT=cos-cloud
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  MASTER_IMAGE_PROJECT=${KUBE_GCE_MASTER_PROJECT:-${DEFAULT_GCI_PROJECT}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  run-gcloud-compute-with-retries instances create "${MASTER_NAME}" \
0000000000000000000000000000000000000000;;	    ${GCLOUD_COMMON_ARGS} \
0000000000000000000000000000000000000000;;	    --address "${MASTER_IP}" \
0000000000000000000000000000000000000000;;	    --machine-type "${MASTER_SIZE}" \
0000000000000000000000000000000000000000;;	    --image-project="${MASTER_IMAGE_PROJECT}" \
0000000000000000000000000000000000000000;;	    --image "${MASTER_IMAGE}" \
0000000000000000000000000000000000000000;;	    --tags "${MASTER_TAG}" \
0000000000000000000000000000000000000000;;	    --subnet "${NETWORK}" \
0000000000000000000000000000000000000000;;	    --scopes "storage-ro,compute-rw,logging-write" \
0000000000000000000000000000000000000000;;	    --boot-disk-size "${MASTER_ROOT_DISK_SIZE}" \
0000000000000000000000000000000000000000;;	    --disk "name=${MASTER_NAME}-pd,device-name=master-pd,mode=rw,boot=no,auto-delete=no"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  run-gcloud-compute-with-retries instances add-metadata "${MASTER_NAME}" \
0000000000000000000000000000000000000000;;	    ${GCLOUD_COMMON_ARGS} \
0000000000000000000000000000000000000000;;	    --metadata-from-file startup-script="${KUBE_ROOT}/test/kubemark/resources/start-kubemark-master.sh"
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  if [ "${EVENT_PD:-false}" == "true" ]; then
0000000000000000000000000000000000000000;;	    echo "Attaching ${MASTER_NAME}-event-pd to ${MASTER_NAME}"
0000000000000000000000000000000000000000;;	    run-gcloud-compute-with-retries instances attach-disk "${MASTER_NAME}" \
0000000000000000000000000000000000000000;;	    ${GCLOUD_COMMON_ARGS} \
0000000000000000000000000000000000000000;;	    --disk "${MASTER_NAME}-event-pd" \
0000000000000000000000000000000000000000;;	    --device-name="master-event-pd"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  run-gcloud-compute-with-retries firewall-rules create "${MASTER_NAME}-https" \
0000000000000000000000000000000000000000;;	    --project "${PROJECT}" \
0000000000000000000000000000000000000000;;	    --network "${NETWORK}" \
0000000000000000000000000000000000000000;;	    --source-ranges "0.0.0.0/0" \
0000000000000000000000000000000000000000;;	    --target-tags "${MASTER_TAG}" \
0000000000000000000000000000000000000000;;	    --allow "tcp:443"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Command to be executed is '$1'.
0000000000000000000000000000000000000000;;	# No. of retries is '$2' (if provided) or 1 (default).
0000000000000000000000000000000000000000;;	function execute-cmd-on-master-with-retries() {
0000000000000000000000000000000000000000;;	  RETRIES="${2:-1}" run-gcloud-compute-with-retries ssh "${MASTER_NAME}" --zone="${ZONE}" --project="${PROJECT}" --command="$1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function copy-files() {
0000000000000000000000000000000000000000;;		run-gcloud-compute-with-retries scp --recurse --zone="${ZONE}" --project="${PROJECT}" $@
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function delete-master-instance-and-resources {
0000000000000000000000000000000000000000;;	  GCLOUD_COMMON_ARGS="--project ${PROJECT} --zone ${ZONE} --quiet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  gcloud compute instances delete "${MASTER_NAME}" \
0000000000000000000000000000000000000000;;	      ${GCLOUD_COMMON_ARGS} || true
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  gcloud compute disks delete "${MASTER_NAME}-pd" \
0000000000000000000000000000000000000000;;	      ${GCLOUD_COMMON_ARGS} || true
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  gcloud compute disks delete "${MASTER_NAME}-event-pd" \
0000000000000000000000000000000000000000;;	      ${GCLOUD_COMMON_ARGS} &> /dev/null || true
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  gcloud compute addresses delete "${MASTER_NAME}-ip" \
0000000000000000000000000000000000000000;;	      --project "${PROJECT}" \
0000000000000000000000000000000000000000;;	      --region "${REGION}" \
0000000000000000000000000000000000000000;;	      --quiet || true
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  gcloud compute firewall-rules delete "${MASTER_NAME}-https" \
0000000000000000000000000000000000000000;;		  --project "${PROJECT}" \
0000000000000000000000000000000000000000;;		  --quiet || true
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  if [ "${SEPARATE_EVENT_MACHINE:-false}" == "true" ]; then
0000000000000000000000000000000000000000;;		  gcloud compute instances delete "${EVENT_STORE_NAME}" \
0000000000000000000000000000000000000000;;	    	  ${GCLOUD_COMMON_ARGS} || true
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;		  gcloud compute disks delete "${EVENT_STORE_NAME}-pd" \
0000000000000000000000000000000000000000;;	    	  ${GCLOUD_COMMON_ARGS} || true
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
