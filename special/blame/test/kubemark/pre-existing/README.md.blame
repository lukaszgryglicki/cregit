0000000000000000000000000000000000000000;;	# Kubemark Pre-existing Provider Guide
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Kubemark Master**
0000000000000000000000000000000000000000;;	- A set of Kubernetes control plane components running in a VM
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Kubernetes Cluster**
0000000000000000000000000000000000000000;;	- A real Kubernetes Cluster that has master and minions. The hollow-node pods
0000000000000000000000000000000000000000;;	  are run in this cluster, but appear as nodes to the Kubemark Master
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Introduction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Every running Kubemark setup looks like the following:
0000000000000000000000000000000000000000;;	 1) A running Kubernetes cluster pointed to by the local kubeconfig
0000000000000000000000000000000000000000;;	 2) A separate VM where the kubemark master is running
0000000000000000000000000000000000000000;;	 3) Some hollow-nodes that run on the Kubernetes Cluster from #1
0000000000000000000000000000000000000000;;	 4) The hollow-nodes are configured to talk with the kubemark master at #2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	When using the pre-existing provider, the developer is responsible for creating
0000000000000000000000000000000000000000;;	#1 and #2.  Therefore, the kubemark scripts will not create any infrastructure
0000000000000000000000000000000000000000;;	or start a kubemark master like in other providers. Instead, the existing
0000000000000000000000000000000000000000;;	resources provided by the VM at $MASTER_IP will serve as the kubemark master.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Use Case
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The goal of the pre-existing provider is to use the kubemark tools with an
0000000000000000000000000000000000000000;;	existing kubermark master. It's meant to provide the developer with
0000000000000000000000000000000000000000;;	additional flexibility to customize the cluster infrastructure and still use
0000000000000000000000000000000000000000;;	the kubemark setup tools.  The pre-existing provider is an **advanced** use
0000000000000000000000000000000000000000;;	case that requires the developer to have knowledge of setting up a kubemark
0000000000000000000000000000000000000000;;	master.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Requirements
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To use the pre-existing provider, the expectation is that there's a kubemark
0000000000000000000000000000000000000000;;	master that is rechable at $MASTER_IP. The machine that the kubemark master is
0000000000000000000000000000000000000000;;	on has to be ssh able from the host that's executing the kubemark scripts. And
0000000000000000000000000000000000000000;;	the user on that machine has to be 'kubernetes'.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Requirement checklist:
0000000000000000000000000000000000000000;;	- Set MASTER_IP to ip address to the kubemark master
0000000000000000000000000000000000000000;;	- The host where you execute the kubemark scripts must be able to ssh to
0000000000000000000000000000000000000000;;	  kubernetes@$MASTER_IP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Example Configuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	_test/kubemark/cloud-provider-config.sh_
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	CLOUD_PROVIDER="pre-existing"
0000000000000000000000000000000000000000;;	KUBEMARK_IMAGE_MAKE_TARGET="push"
0000000000000000000000000000000000000000;;	CONTAINER_REGISTRY=docker.io
0000000000000000000000000000000000000000;;	PROJECT="rthallisey"
0000000000000000000000000000000000000000;;	MASTER_IP="192.168.121.29:6443"
0000000000000000000000000000000000000000;;	```
