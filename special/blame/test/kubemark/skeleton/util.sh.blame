0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script contains the helper functions that each provider hosting
0000000000000000000000000000000000000000;;	# Kubermark must implement to use test/kubemark/start-kubemark.sh and
0000000000000000000000000000000000000000;;	# test/kubemark/stop-kubemark.sh scripts.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This function should create a machine instance for the master along
0000000000000000000000000000000000000000;;	# with any/all of the following resources:
0000000000000000000000000000000000000000;;	# - Attach a PD to the master (optionally 1 more for storing events)
0000000000000000000000000000000000000000;;	# - A public IP address for the master ($MASTER_IP)
0000000000000000000000000000000000000000;;	# - A network firewall rule allowing all TCP traffic on port 443 in master
0000000000000000000000000000000000000000;;	#   Note: This step is compulsory in order for kubemark to work
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# ENV vars that should be defined by the end of this function:
0000000000000000000000000000000000000000;;	# 1. MASTER_IP
0000000000000000000000000000000000000000;;	# 2. MASTER_NAME
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Recommended for this function to include retrying logic for the above
0000000000000000000000000000000000000000;;	# operations in case of failures.
0000000000000000000000000000000000000000;;	function create-master-instance-with-resources {
0000000000000000000000000000000000000000;;		echo "MASTER_IP: $MASTER_IP" 1>&2
0000000000000000000000000000000000000000;;		echo "MASTER_NAME: $MASTER_NAME" 1>&2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This function should execute the command('$1') on the master machine
0000000000000000000000000000000000000000;;	# (possibly through SSH), retrying in case of failure. The allowed number of
0000000000000000000000000000000000000000;;	# retries would be '$2' (if not provided, default to single try).
0000000000000000000000000000000000000000;;	function execute-cmd-on-master-with-retries() {
0000000000000000000000000000000000000000;;		echo "Executing command on the master" 1>&2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This function should act as an scp for the kubemark cluster, which copies
0000000000000000000000000000000000000000;;	# the files given by the first n-1 arguments to the remote location given
0000000000000000000000000000000000000000;;	# by the n^th argument.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Recommended for this function to include retrying logic in case of failures.
0000000000000000000000000000000000000000;;	function copy-files() {
0000000000000000000000000000000000000000;;		echo "Copying files" 1>&2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This function should delete the master instance along with all the
0000000000000000000000000000000000000000;;	# resources that have been allocated inside the function
0000000000000000000000000000000000000000;;	# 'create-master-instance-with-resources' above.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Recommended for this function to include retrying logic in case of failures.
0000000000000000000000000000000000000000;;	function delete-master-instance-and-resources {
0000000000000000000000000000000000000000;;		echo "Deleting master instance and its allocated resources" 1>&2
0000000000000000000000000000000000000000;;	}
