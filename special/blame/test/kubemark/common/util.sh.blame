0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Running cmd $RETRIES times in case of failures.
0000000000000000000000000000000000000000;;	function run-cmd-with-retries {
0000000000000000000000000000000000000000;;	  RETRIES="${RETRIES:-3}"
0000000000000000000000000000000000000000;;	  for attempt in $(seq 1 ${RETRIES}); do
0000000000000000000000000000000000000000;;	    exec 5>&1 # Duplicate &1 to &5 for use below.
0000000000000000000000000000000000000000;;	    # We don't use 'local' to declare result as then ret_val always gets value 0.
0000000000000000000000000000000000000000;;	    # We use tee to output to &5 (redirected to stdout) while also storing it in the variable.
0000000000000000000000000000000000000000;;	    result=$("$@" 2>&1 | tee >(cat - >&5)) || local ret_val="$?"
0000000000000000000000000000000000000000;;	    if [[ "${ret_val:-0}" -ne "0" ]]; then
0000000000000000000000000000000000000000;;	      if [[ $(echo "${result}" | grep -c "already exists") -gt 0 ]]; then
0000000000000000000000000000000000000000;;	        if [[ "${attempt}" == 1 ]]; then
0000000000000000000000000000000000000000;;	          echo -e "${color_red}Failed to $1 $2 $3 as the resource hasn't been deleted from a previous run.${color_norm}" >& 2
0000000000000000000000000000000000000000;;	          exit 1
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	        echo -e "${color_yellow}Succeeded to $1 $2 $3 in the previous attempt, but status response wasn't received.${color_norm}"
0000000000000000000000000000000000000000;;	        return 0
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      echo -e "${color_yellow}Attempt $attempt failed to $1 $2 $3. Retrying.${color_norm}" >& 2
0000000000000000000000000000000000000000;;	      sleep $(($attempt * 5))
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      echo -e "${color_green}Succeeded to $1 $2 $3.${color_norm}"
0000000000000000000000000000000000000000;;	      return 0
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  echo -e "${color_red}Failed to $1 $2 $3.${color_norm}" >& 2
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	}
