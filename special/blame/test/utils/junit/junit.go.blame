0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d5dd79c9b19c64d11461a2396632ce1e92c07c25;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package junit provides data structures to allow easy XML encoding
0000000000000000000000000000000000000000;;	// and decoding of JUnit test results.
0000000000000000000000000000000000000000;;	package junit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestSuite is a top-level test suite containing test cases.
0000000000000000000000000000000000000000;;	type TestSuite struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name `xml:"testsuite"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name      string    `xml:"name,attr"`
0000000000000000000000000000000000000000;;		Tests     int       `xml:"tests,attr"`
0000000000000000000000000000000000000000;;		Disabled  int       `xml:"disabled,attr,omitempty"`
0000000000000000000000000000000000000000;;		Errors    int       `xml:"errors,attr"`
0000000000000000000000000000000000000000;;		Failures  int       `xml:"failures,attr"`
0000000000000000000000000000000000000000;;		Skipped   int       `xml:"skipped,attr,omitempty"`
0000000000000000000000000000000000000000;;		Time      float64   `xml:"time,attr"`
0000000000000000000000000000000000000000;;		Timestamp time.Time `xml:"timestamp,attr"`
0000000000000000000000000000000000000000;;		ID        int       `xml:"id,attr,omitempty"`
0000000000000000000000000000000000000000;;		Package   string    `xml:"package,attr,omitempty"`
0000000000000000000000000000000000000000;;		Hostname  string    `xml:"hostname,attr"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Properties []*Property `xml:"properties,omitempty"`
0000000000000000000000000000000000000000;;		TestCases  []*TestCase `xml:"testcase"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SystemOut string `xml:"system-out,omitempty"`
0000000000000000000000000000000000000000;;		SystemErr string `xml:"system-err,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update iterates through the TestCases and updates Tests, Errors,
0000000000000000000000000000000000000000;;	// Failures, and Skipped top level attributes.
0000000000000000000000000000000000000000;;	func (t *TestSuite) Update() {
0000000000000000000000000000000000000000;;		t.Tests = len(t.TestCases)
0000000000000000000000000000000000000000;;		for _, tc := range t.TestCases {
0000000000000000000000000000000000000000;;			t.Errors += len(tc.Errors)
0000000000000000000000000000000000000000;;			t.Failures += len(tc.Failures)
0000000000000000000000000000000000000000;;			if len(tc.Skipped) > 0 {
0000000000000000000000000000000000000000;;				t.Skipped++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Property is a simple key-value property that can be attached to a TestSuite.
0000000000000000000000000000000000000000;;	type Property struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name `xml:"property"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name  string `xml:"name,attr"`
0000000000000000000000000000000000000000;;		Value string `xml:"value,attr"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error represents the errors in a test case.
0000000000000000000000000000000000000000;;	type Error struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name `xml:"error"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message string `xml:"message,attr,omitempty"`
0000000000000000000000000000000000000000;;		Type    string `xml:"type,attr"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:",cdata"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Failure represents the failures in a test case.
0000000000000000000000000000000000000000;;	type Failure struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name `xml:"failure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Message string `xml:"message,attr,omitempty"`
0000000000000000000000000000000000000000;;		Type    string `xml:"type,attr"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `xml:",cdata"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestCase represents a single test case within a suite.
0000000000000000000000000000000000000000;;	type TestCase struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name `xml:"testcase"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name       string  `xml:"name,attr"`
0000000000000000000000000000000000000000;;		Classname  string  `xml:"classname,attr"`
0000000000000000000000000000000000000000;;		Status     string  `xml:"status,attr,omitempty"`
0000000000000000000000000000000000000000;;		Assertions int     `xml:"assertions,attr,omitempty"`
0000000000000000000000000000000000000000;;		Time       float64 `xml:"time,attr"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Skipped string `xml:"skipped,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Errors   []*Error   `xml:"error,omitempty"`
0000000000000000000000000000000000000000;;		Failures []*Failure `xml:"failure,omitempty"`
0000000000000000000000000000000000000000;;	}
