0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e2b02ea310425e6817d3a6c0b79a00d3cae96b92;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package utils
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Convenient wrapper around cache.Store that returns list of v1.Pod instead of interface{}.
0000000000000000000000000000000000000000;;	type PodStore struct {
0000000000000000000000000000000000000000;;		cache.Store
0000000000000000000000000000000000000000;;		stopCh    chan struct{}
0000000000000000000000000000000000000000;;		Reflector *cache.Reflector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPodStore(c clientset.Interface, namespace string, label labels.Selector, field fields.Selector) *PodStore {
0000000000000000000000000000000000000000;;		lw := &cache.ListWatch{
0000000000000000000000000000000000000000;;			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;				options.LabelSelector = label.String()
0000000000000000000000000000000000000000;;				options.FieldSelector = field.String()
0000000000000000000000000000000000000000;;				obj, err := c.Core().Pods(namespace).List(options)
0000000000000000000000000000000000000000;;				return runtime.Object(obj), err
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;				options.LabelSelector = label.String()
0000000000000000000000000000000000000000;;				options.FieldSelector = field.String()
0000000000000000000000000000000000000000;;				return c.Core().Pods(namespace).Watch(options)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		store := cache.NewStore(cache.MetaNamespaceKeyFunc)
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		reflector := cache.NewReflector(lw, &v1.Pod{}, store, 0)
0000000000000000000000000000000000000000;;		reflector.RunUntil(stopCh)
0000000000000000000000000000000000000000;;		return &PodStore{Store: store, stopCh: stopCh, Reflector: reflector}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PodStore) List() []*v1.Pod {
0000000000000000000000000000000000000000;;		objects := s.Store.List()
0000000000000000000000000000000000000000;;		pods := make([]*v1.Pod, 0)
0000000000000000000000000000000000000000;;		for _, o := range objects {
0000000000000000000000000000000000000000;;			pods = append(pods, o.(*v1.Pod))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pods
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PodStore) Stop() {
0000000000000000000000000000000000000000;;		close(s.stopCh)
0000000000000000000000000000000000000000;;	}
