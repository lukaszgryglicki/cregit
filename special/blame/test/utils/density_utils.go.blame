0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4af9f14cc1cf003c1324fbb84d7c1d18793d9699;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package utils
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apierrs "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		retries = 5
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AddLabelsToNode(c clientset.Interface, nodeName string, labels map[string]string) error {
0000000000000000000000000000000000000000;;		tokens := make([]string, 0, len(labels))
0000000000000000000000000000000000000000;;		for k, v := range labels {
0000000000000000000000000000000000000000;;			tokens = append(tokens, "\""+k+"\":\""+v+"\"")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		labelString := "{" + strings.Join(tokens, ",") + "}"
0000000000000000000000000000000000000000;;		patch := fmt.Sprintf(`{"metadata":{"labels":%v}}`, labelString)
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		for attempt := 0; attempt < retries; attempt++ {
0000000000000000000000000000000000000000;;			_, err = c.Core().Nodes().Patch(nodeName, types.MergePatchType, []byte(patch))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if !apierrs.IsConflict(err) {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(100 * time.Millisecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveLabelOffNode is for cleaning up labels temporarily added to node,
0000000000000000000000000000000000000000;;	// won't fail if target label doesn't exist or has been removed.
0000000000000000000000000000000000000000;;	func RemoveLabelOffNode(c clientset.Interface, nodeName string, labelKeys []string) error {
0000000000000000000000000000000000000000;;		var node *v1.Node
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		for attempt := 0; attempt < retries; attempt++ {
0000000000000000000000000000000000000000;;			node, err = c.Core().Nodes().Get(nodeName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if node.Labels == nil {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, labelKey := range labelKeys {
0000000000000000000000000000000000000000;;				if node.Labels == nil || len(node.Labels[labelKey]) == 0 {
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				delete(node.Labels, labelKey)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, err = c.Core().Nodes().Update(node)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if !apierrs.IsConflict(err) {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					glog.V(2).Infof("Conflict when trying to remove a labels %v from %v", labelKeys, nodeName)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(100 * time.Millisecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VerifyLabelsRemoved checks if Node for given nodeName does not have any of labels from labelKeys.
0000000000000000000000000000000000000000;;	// Return non-nil error if it does.
0000000000000000000000000000000000000000;;	func VerifyLabelsRemoved(c clientset.Interface, nodeName string, labelKeys []string) error {
0000000000000000000000000000000000000000;;		node, err := c.Core().Nodes().Get(nodeName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, labelKey := range labelKeys {
0000000000000000000000000000000000000000;;			if node.Labels != nil && len(node.Labels[labelKey]) != 0 {
0000000000000000000000000000000000000000;;				return fmt.Errorf("Failed removing label " + labelKey + " of the node " + nodeName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
