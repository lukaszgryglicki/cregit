0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
3d6369ff411c92c7eb0fcbb5540982f0bdf59467;contrib/for-tests/mount-tester/mt.go[contrib/for-tests/mount-tester/mt.go][test/images/mounttest/mt.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		fsTypePath                = ""
0000000000000000000000000000000000000000;;		fileModePath              = ""
0000000000000000000000000000000000000000;;		filePermPath              = ""
0000000000000000000000000000000000000000;;		fileOwnerPath             = ""
0000000000000000000000000000000000000000;;		newFilePath0644           = ""
0000000000000000000000000000000000000000;;		newFilePath0666           = ""
0000000000000000000000000000000000000000;;		newFilePath0660           = ""
0000000000000000000000000000000000000000;;		newFilePath0777           = ""
0000000000000000000000000000000000000000;;		readFileContentPath       = ""
0000000000000000000000000000000000000000;;		readFileContentInLoopPath = ""
0000000000000000000000000000000000000000;;		retryDuration             = 180
0000000000000000000000000000000000000000;;		breakOnExpectedContent    = true
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		flag.StringVar(&fsTypePath, "fs_type", "", "Path to print the fs type for")
0000000000000000000000000000000000000000;;		flag.StringVar(&fileModePath, "file_mode", "", "Path to print the mode bits of")
0000000000000000000000000000000000000000;;		flag.StringVar(&filePermPath, "file_perm", "", "Path to print the perms of")
0000000000000000000000000000000000000000;;		flag.StringVar(&fileOwnerPath, "file_owner", "", "Path to print the owning UID and GID of")
0000000000000000000000000000000000000000;;		flag.StringVar(&newFilePath0644, "new_file_0644", "", "Path to write to and read from with perm 0644")
0000000000000000000000000000000000000000;;		flag.StringVar(&newFilePath0666, "new_file_0666", "", "Path to write to and read from with perm 0666")
0000000000000000000000000000000000000000;;		flag.StringVar(&newFilePath0660, "new_file_0660", "", "Path to write to and read from with perm 0660")
0000000000000000000000000000000000000000;;		flag.StringVar(&newFilePath0777, "new_file_0777", "", "Path to write to and read from with perm 0777")
0000000000000000000000000000000000000000;;		flag.StringVar(&readFileContentPath, "file_content", "", "Path to read the file content from")
0000000000000000000000000000000000000000;;		flag.StringVar(&readFileContentInLoopPath, "file_content_in_loop", "", "Path to read the file content in loop from")
0000000000000000000000000000000000000000;;		flag.IntVar(&retryDuration, "retry_time", 180, "Retry time during the loop")
0000000000000000000000000000000000000000;;		flag.BoolVar(&breakOnExpectedContent, "break_on_expected_content", true, "Break out of loop on expected content, (use with --file_content_in_loop flag only)")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This program performs some tests on the filesystem as dictated by the
0000000000000000000000000000000000000000;;	// flags passed by the user.
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			err  error
0000000000000000000000000000000000000000;;			errs = []error{}
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Clear the umask so we can set any mode bits we want.
0000000000000000000000000000000000000000;;		syscall.Umask(0000)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NOTE: the ordering of execution of the various command line
0000000000000000000000000000000000000000;;		// flags is intentional and allows a single command to:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// 1.  Check the fstype of a path
0000000000000000000000000000000000000000;;		// 2.  Write a new file within that path
0000000000000000000000000000000000000000;;		// 3.  Check that the file's content can be read
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Changing the ordering of the following code will break tests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = fsType(fsTypePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = readWriteNewFile(newFilePath0644, 0644)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = readWriteNewFile(newFilePath0666, 0666)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = readWriteNewFile(newFilePath0660, 0660)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = readWriteNewFile(newFilePath0777, 0777)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = fileMode(fileModePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = filePerm(filePermPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = fileOwner(fileOwnerPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = readFileContent(readFileContentPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = readFileContentInLoop(readFileContentInLoopPath, retryDuration, breakOnExpectedContent)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		os.Exit(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Defined by Linux (sys/statfs.h) - the type number for tmpfs mounts.
0000000000000000000000000000000000000000;;	const linuxTmpfsMagic = 0x01021994
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fsType(path string) error {
0000000000000000000000000000000000000000;;		if path == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := syscall.Statfs_t{}
0000000000000000000000000000000000000000;;		if err := syscall.Statfs(path, &buf); err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("error from statfs(%q): %v\n", path, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.Type == linuxTmpfsMagic {
0000000000000000000000000000000000000000;;			fmt.Printf("mount type of %q: tmpfs\n", path)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			fmt.Printf("mount type of %q: %v\n", path, buf.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fileMode(path string) error {
0000000000000000000000000000000000000000;;		if path == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fileinfo, err := os.Stat(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("error from Stat(%q): %v\n", path, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("mode of file %q: %v\n", path, fileinfo.Mode())
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func filePerm(path string) error {
0000000000000000000000000000000000000000;;		if path == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fileinfo, err := os.Stat(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("error from Stat(%q): %v\n", path, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("perms of file %q: %v\n", path, fileinfo.Mode().Perm())
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fileOwner(path string) error {
0000000000000000000000000000000000000000;;		if path == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := syscall.Stat_t{}
0000000000000000000000000000000000000000;;		if err := syscall.Stat(path, &buf); err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("error from stat(%q): %v\n", path, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("owner UID of %q: %v\n", path, buf.Uid)
0000000000000000000000000000000000000000;;		fmt.Printf("owner GID of %q: %v\n", path, buf.Gid)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readFileContent(path string) error {
0000000000000000000000000000000000000000;;		if path == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		contentBytes, err := ioutil.ReadFile(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("error reading file content for %q: %v\n", path, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("content of file %q: %v\n", path, string(contentBytes))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const initialContent string = "mount-tester new file\n"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readWriteNewFile(path string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		if path == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := ioutil.WriteFile(path, []byte(initialContent), perm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("error writing new file %q: %v\n", path, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return readFileContent(path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readFileContentInLoop(path string, retryDuration int, breakOnExpectedContent bool) error {
0000000000000000000000000000000000000000;;		if path == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return testFileContent(path, retryDuration, breakOnExpectedContent)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testFileContent(filePath string, retryDuration int, breakOnExpectedContent bool) error {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			contentBytes []byte
0000000000000000000000000000000000000000;;			err          error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		retryTime := time.Second * time.Duration(retryDuration)
0000000000000000000000000000000000000000;;		for start := time.Now(); time.Since(start) < retryTime; time.Sleep(2 * time.Second) {
0000000000000000000000000000000000000000;;			contentBytes, err = ioutil.ReadFile(filePath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Printf("Error reading file %s: %v, retrying\n", filePath, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Printf("content of file %q: %v\n", filePath, string(contentBytes))
0000000000000000000000000000000000000000;;			if breakOnExpectedContent {
0000000000000000000000000000000000000000;;				if string(contentBytes) != initialContent {
0000000000000000000000000000000000000000;;					fmt.Printf("Unexpected content. Expected: %s. Retrying", initialContent)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
