0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
ece5dd41b18c6b935f53a0928f7d1fa0c04c1d9a;test/images/clusterapi-tester/main.go[test/images/clusterapi-tester/main.go][test/images/clusterapi-tester/clusterapi-tester.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A simple pod that first lists all nodes/services through the Kubernetes
0000000000000000000000000000000000000000;;	// api, then serves a 200 on /healthz.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		cc, err := restclient.InClusterConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("Failed to create client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeClient, err := clientset.NewForConfig(cc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("Failed to create client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		listAll := metav1.ListOptions{}
0000000000000000000000000000000000000000;;		nodes, err := kubeClient.Core().Nodes().List(listAll)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("Failed to list nodes: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Printf("Nodes:")
0000000000000000000000000000000000000000;;		for _, node := range nodes.Items {
0000000000000000000000000000000000000000;;			log.Printf("\t%v", node.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		services, err := kubeClient.Core().Services(metav1.NamespaceDefault).List(listAll)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("Failed to list services: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Printf("Services:")
0000000000000000000000000000000000000000;;		for _, svc := range services.Items {
0000000000000000000000000000000000000000;;			log.Printf("\t%v", svc.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Printf("Success")
0000000000000000000000000000000000000000;;		http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "Ok")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		log.Fatal(http.ListenAndServe(":8080", nil))
0000000000000000000000000000000000000000;;	}
