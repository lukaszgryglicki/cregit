0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
45be65257bc252c2a28c185e4061db469c31c2b0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/logs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This Pod's /checknosnat takes `target` and `ips` arguments, and queries {target}/checknosnat?ips={ips}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MasqTestProxy struct {
0000000000000000000000000000000000000000;;		Port string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMasqTestProxy() *MasqTestProxy {
0000000000000000000000000000000000000000;;		return &MasqTestProxy{
0000000000000000000000000000000000000000;;			Port: "31235",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *MasqTestProxy) AddFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		fs.StringVar(&m.Port, "port", m.Port, "The port to serve /checknosnat endpoint on.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		m := NewMasqTestProxy()
0000000000000000000000000000000000000000;;		m.AddFlags(pflag.CommandLine)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flag.InitFlags()
0000000000000000000000000000000000000000;;		logs.InitLogs()
0000000000000000000000000000000000000000;;		defer logs.FlushLogs()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := m.Run(); err != nil {
0000000000000000000000000000000000000000;;			fmt.Fprintf(os.Stderr, "%v\n", err)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *MasqTestProxy) Run() error {
0000000000000000000000000000000000000000;;		// register handler
0000000000000000000000000000000000000000;;		http.HandleFunc("/checknosnat", checknosnat)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// spin up the server
0000000000000000000000000000000000000000;;		return http.ListenAndServe(":"+m.Port, nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type handler func(http.ResponseWriter, *http.Request)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func joinErrors(errs []error, sep string) string {
0000000000000000000000000000000000000000;;		strs := make([]string, len(errs))
0000000000000000000000000000000000000000;;		for i, err := range errs {
0000000000000000000000000000000000000000;;			strs[i] = err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(strs, sep)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checknosnatURL(pip, ips string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("http://%s/checknosnat?ips=%s", pip, ips)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checknosnat(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		url := checknosnatURL(req.URL.Query().Get("target"), req.URL.Query().Get("ips"))
0000000000000000000000000000000000000000;;		resp, err := http.Get(url)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			w.WriteHeader(500)
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "error querying %q, err: %v", url, err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			body, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				w.WriteHeader(500)
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, "error reading body of response from %q, err: %v", url, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// Respond the same status code and body as /checknosnat on the internal Pod
0000000000000000000000000000000000000000;;				w.WriteHeader(resp.StatusCode)
0000000000000000000000000000000000000000;;				w.Write(body)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp.Body.Close()
0000000000000000000000000000000000000000;;	}
