0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
01c75382997b1088bafa2a198c3553cd6eeebdc6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/rand"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		httpMethods = []string{
0000000000000000000000000000000000000000;;			"GET",
0000000000000000000000000000000000000000;;			"POST",
0000000000000000000000000000000000000000;;			"PUT",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		namespaces = []string{
0000000000000000000000000000000000000000;;			"kube-system",
0000000000000000000000000000000000000000;;			"default",
0000000000000000000000000000000000000000;;			"ns",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		linesTotal = flag.Int("log-lines-total", 0, "Total lines that should be generated by the end of the run")
0000000000000000000000000000000000000000;;		duration   = flag.Duration("run-duration", 0, "Total duration of the run")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if *linesTotal <= 0 {
0000000000000000000000000000000000000000;;			glog.Fatalf("Invalid total number of lines: %d", *linesTotal)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if *duration <= 0 {
0000000000000000000000000000000000000000;;			glog.Fatalf("Invalid duration: %v", *duration)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		generateLogs(*linesTotal, *duration)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Outputs linesTotal lines of logs to stdout uniformly for duration
0000000000000000000000000000000000000000;;	func generateLogs(linesTotal int, duration time.Duration) {
0000000000000000000000000000000000000000;;		delay := duration / time.Duration(linesTotal)
0000000000000000000000000000000000000000;;		rand.Seed(time.Now().UnixNano())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tick := time.Tick(delay)
0000000000000000000000000000000000000000;;		for id := 0; id < linesTotal; id++ {
0000000000000000000000000000000000000000;;			glog.Info(generateLogLine(id))
0000000000000000000000000000000000000000;;			<-tick
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generates apiserver-like line with average length of 100 symbols
0000000000000000000000000000000000000000;;	func generateLogLine(id int) string {
0000000000000000000000000000000000000000;;		method := httpMethods[rand.Intn(len(httpMethods))]
0000000000000000000000000000000000000000;;		namespace := namespaces[rand.Intn(len(namespaces))]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podName := rand.String(rand.IntnRange(3, 5))
0000000000000000000000000000000000000000;;		url := fmt.Sprintf("/api/v1/namespaces/%s/pods/%s", namespace, podName)
0000000000000000000000000000000000000000;;		status := rand.IntnRange(200, 600)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d %s %s %d", id, method, url, status)
0000000000000000000000000000000000000000;;	}
