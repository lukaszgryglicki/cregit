0000000000000000000000000000000000000000;;	#! /bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -eo pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script configures zookeeper cluster member ship for version of zookeeper
0000000000000000000000000000000000000000;;	# >= 3.5.0. It should not be used with the on-change.sh script in this example.
0000000000000000000000000000000000000000;;	# As of April-2016 is 3.4.8 is the latest stable.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Both /opt and /tmp/zookeeper are assumed to be volumes shared with the parent.
0000000000000000000000000000000000000000;;	# The format of each line in the dynamic config file is:
0000000000000000000000000000000000000000;;	# server.<1 based index>=<server-dns-name>:<peer port>:<election port>[:role];[<client port address>:]<client port>
0000000000000000000000000000000000000000;;	# <1 based index> is the server index that matches the id in datadir/myid
0000000000000000000000000000000000000000;;	# <peer port> is the port on which peers communicate to agree on updates
0000000000000000000000000000000000000000;;	# <election port> is the port used for leader election
0000000000000000000000000000000000000000;;	# [:role] can be set to observer, participant by default
0000000000000000000000000000000000000000;;	# <client port address> is optional and defaults to 0.0.0.0
0000000000000000000000000000000000000000;;	# <client port> is the port on which the server accepts client connections
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CFG=/opt/zookeeper/conf/zoo.cfg.dynamic
0000000000000000000000000000000000000000;;	CFG_BAK=/opt/zookeeper/conf/zoo.cfg.bak
0000000000000000000000000000000000000000;;	MY_ID_FILE=/tmp/zookeeper/myid
0000000000000000000000000000000000000000;;	HOSTNAME=$(hostname)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	while read -ra LINE; do
0000000000000000000000000000000000000000;;	    PEERS=("${PEERS[@]}" $LINE)
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Don't add the first member as an observer
0000000000000000000000000000000000000000;;	if [ ${#PEERS[@]} -eq 1 ]; then
0000000000000000000000000000000000000000;;	    # We need to write our index in this list of servers into MY_ID_FILE.
0000000000000000000000000000000000000000;;	    # Note that this may not always coincide with the hostname id.
0000000000000000000000000000000000000000;;	    echo 1 > "${MY_ID_FILE}"
0000000000000000000000000000000000000000;;	    echo "server.1=${PEERS[0]}:2888:3888;2181" > "${CFG}"
0000000000000000000000000000000000000000;;	    # TODO: zkServer-initialize is the safe way to handle changes to datadir
0000000000000000000000000000000000000000;;	    # because simply starting will create a new datadir, BUT if the user changed
0000000000000000000000000000000000000000;;	    # pod template they might end up with 2 datadirs and brief split brain.
0000000000000000000000000000000000000000;;	    exit
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Every subsequent member is added as an observer and promoted to a participant
0000000000000000000000000000000000000000;;	echo "" > "${CFG_BAK}"
0000000000000000000000000000000000000000;;	i=0
0000000000000000000000000000000000000000;;	LEADER=$HOSTNAME
0000000000000000000000000000000000000000;;	for peer in "${PEERS[@]}"; do
0000000000000000000000000000000000000000;;	    let i=i+1
0000000000000000000000000000000000000000;;	    if [[ "${peer}" == *"${HOSTNAME}"* ]]; then
0000000000000000000000000000000000000000;;	      MY_ID=$i
0000000000000000000000000000000000000000;;	      MY_NAME=${peer}
0000000000000000000000000000000000000000;;	      echo $i > "${MY_ID_FILE}"
0000000000000000000000000000000000000000;;	      echo "server.${i}=${peer}:2888:3888:observer;2181" >> "${CFG_BAK}"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      if [[ $(echo srvr | /opt/nc "${peer}" 2181 | grep Mode) = "Mode: leader" ]]; then
0000000000000000000000000000000000000000;;	        LEADER="${peer}"
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      echo "server.${i}=${peer}:2888:3888:participant;2181" >> "${CFG_BAK}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# zookeeper won't start without myid anyway.
0000000000000000000000000000000000000000;;	# This means our hostname wasn't in the peer list.
0000000000000000000000000000000000000000;;	if [ ! -f "${MY_ID_FILE}" ]; then
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Once the dynamic config file is written it shouldn't be modified, so the final
0000000000000000000000000000000000000000;;	# reconfigure needs to happen through the "reconfig" command.
0000000000000000000000000000000000000000;;	cp ${CFG_BAK} ${CFG}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO: zkServer-initialize is the safe way to handle changes to datadir
0000000000000000000000000000000000000000;;	# because simply starting will create a new datadir, BUT if the user changed
0000000000000000000000000000000000000000;;	# pod template they might end up with 2 datadirs and brief split brain.
0000000000000000000000000000000000000000;;	/opt/zookeeper/bin/zkServer.sh start
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO: We shouldn't need to specify the address of the master as long as
0000000000000000000000000000000000000000;;	# there's quorum. According to the docs the new server is just not allowed to
0000000000000000000000000000000000000000;;	# vote, it's still allowed to propose config changes, and it knows the
0000000000000000000000000000000000000000;;	# existing members of the ensemble from *its* config.
0000000000000000000000000000000000000000;;	ADD_SERVER="server.$MY_ID=$MY_NAME:2888:3888:participant;0.0.0.0:2181"
0000000000000000000000000000000000000000;;	/opt/zookeeper/bin/zkCli.sh reconfig -s "${LEADER}":2181 -add "${ADD_SERVER}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Prove that we've actually joined the running cluster
0000000000000000000000000000000000000000;;	ITERATION=0
0000000000000000000000000000000000000000;;	until $(echo config | /opt/nc localhost 2181 | grep "${ADD_SERVER}" > /dev/null); do
0000000000000000000000000000000000000000;;	  echo $ITERATION] waiting for updated config to sync back to localhost
0000000000000000000000000000000000000000;;	  sleep 1
0000000000000000000000000000000000000000;;	  let ITERATION=ITERATION+1
0000000000000000000000000000000000000000;;	  if [ $ITERATION -eq 20 ]; then
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/opt/zookeeper/bin/zkServer.sh stop
