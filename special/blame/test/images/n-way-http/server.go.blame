0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a2f66a38943309adc39e082f31f7e2df455d329e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A webserver that runs n http handlers. Example invocation:
0000000000000000000000000000000000000000;;	// - server -port 8080 -prefix foo -num 10 -start 0
0000000000000000000000000000000000000000;;	// Will given you 10 /foo(i) endpoints that simply echo foo(i) when requested.
0000000000000000000000000000000000000000;;	// - server -start 3 -num 1
0000000000000000000000000000000000000000;;	// Will create just one endpoint, at /foo3
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		port   = flag.Int("port", 8080, "Port number for requests.")
0000000000000000000000000000000000000000;;		prefix = flag.String("prefix", "foo", "String used as path prefix")
0000000000000000000000000000000000000000;;		num    = flag.Int("num", 10, "Number of endpoints to create.")
0000000000000000000000000000000000000000;;		start  = flag.Int("start", 0, "Index to start, only makes sense with --num")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;		// This container is used to test the GCE L7 controller which expects "/"
0000000000000000000000000000000000000000;;		// to return a 200 response.
0000000000000000000000000000000000000000;;		http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			fmt.Fprint(w, "ok")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		for i := *start; i < *start+*num; i++ {
0000000000000000000000000000000000000000;;			path := fmt.Sprintf("%v%d", *prefix, i)
0000000000000000000000000000000000000000;;			http.HandleFunc(fmt.Sprintf("/%v", path), func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;				fmt.Fprint(w, path)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Printf("server -port %d -prefix %v -num %d -start %d", *port, *prefix, *num, *start)
0000000000000000000000000000000000000000;;		http.ListenAndServe(fmt.Sprintf(":%d", *port), nil)
0000000000000000000000000000000000000000;;	}
