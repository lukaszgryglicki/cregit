0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0452947f0160563413902a593c9e0233778c4c8f;contrib/for-tests/porter/porter.go[contrib/for-tests/porter/porter.go][test/images/porter/porter.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A tiny binary for testing ports.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Reads env vars; for every var of the form SERVE_PORT_X, where X is a valid
0000000000000000000000000000000000000000;;	// port number, porter starts an HTTP server which serves the env var's value
0000000000000000000000000000000000000000;;	// in response to any query.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const prefix = "SERVE_PORT_"
0000000000000000000000000000000000000000;;	const tlsPrefix = "SERVE_TLS_PORT_"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		for _, vk := range os.Environ() {
0000000000000000000000000000000000000000;;			// Put everything before the first = sign in parts[0], and
0000000000000000000000000000000000000000;;			// everything else in parts[1] (even if there are multiple =
0000000000000000000000000000000000000000;;			// characters).
0000000000000000000000000000000000000000;;			parts := strings.SplitN(vk, "=", 2)
0000000000000000000000000000000000000000;;			key := parts[0]
0000000000000000000000000000000000000000;;			value := parts[1]
0000000000000000000000000000000000000000;;			if strings.HasPrefix(key, prefix) {
0000000000000000000000000000000000000000;;				port := strings.TrimPrefix(key, prefix)
0000000000000000000000000000000000000000;;				go servePort(port, value)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strings.HasPrefix(key, tlsPrefix) {
0000000000000000000000000000000000000000;;				port := strings.TrimPrefix(key, tlsPrefix)
0000000000000000000000000000000000000000;;				go serveTLSPort(port, value)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func servePort(port, value string) {
0000000000000000000000000000000000000000;;		s := &http.Server{
0000000000000000000000000000000000000000;;			Addr: "0.0.0.0:" + port,
0000000000000000000000000000000000000000;;			Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				fmt.Fprint(w, value)
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Printf("server on port %q failed: %v", port, s.ListenAndServe())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func serveTLSPort(port, value string) {
0000000000000000000000000000000000000000;;		s := &http.Server{
0000000000000000000000000000000000000000;;			Addr: "0.0.0.0:" + port,
0000000000000000000000000000000000000000;;			Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				fmt.Fprint(w, value)
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		certFile := os.Getenv("CERT_FILE")
0000000000000000000000000000000000000000;;		if len(certFile) == 0 {
0000000000000000000000000000000000000000;;			certFile = "localhost.crt"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		keyFile := os.Getenv("KEY_FILE")
0000000000000000000000000000000000000000;;		if len(keyFile) == 0 {
0000000000000000000000000000000000000000;;			keyFile = "localhost.key"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Printf("tls server on port %q with certFile=%q, keyFile=%q failed: %v", port, certFile, keyFile, s.ListenAndServeTLS(certFile, keyFile))
0000000000000000000000000000000000000000;;	}
