0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
81895b6d734a23f6736a4b135f1385475ef7441d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "log"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Runner is a client or server to run.
0000000000000000000000000000000000000000;;	type Runner interface {
0000000000000000000000000000000000000000;;		// NewOptions returns a new empty options structure to be populated
0000000000000000000000000000000000000000;;		// by from the JSON -options argument.
0000000000000000000000000000000000000000;;		NewOptions() interface{}
0000000000000000000000000000000000000000;;		// Run the client or server, taking in options. This execute the
0000000000000000000000000000000000000000;;		// test code.
0000000000000000000000000000000000000000;;		Run(logger *log.Logger, options interface{}) error
0000000000000000000000000000000000000000;;	}
