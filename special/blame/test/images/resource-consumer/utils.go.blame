0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
8bf183d3a2fdb51bfc6a5452d9a05816b9fb6036;contrib/for-tests/resource-consumer/utils.go[contrib/for-tests/resource-consumer/utils.go][test/images/resource-consumer/utils.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		consumeCPUBinary = "./consume-cpu/consume-cpu"
0000000000000000000000000000000000000000;;		consumeMemBinary = "stress"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ConsumeCPU(millicores int, durationSec int) {
0000000000000000000000000000000000000000;;		log.Printf("ConsumeCPU millicores: %v, durationSec: %v", millicores, durationSec)
0000000000000000000000000000000000000000;;		// creating new consume cpu process
0000000000000000000000000000000000000000;;		arg1 := fmt.Sprintf("-millicores=%d", millicores)
0000000000000000000000000000000000000000;;		arg2 := fmt.Sprintf("-duration-sec=%d", durationSec)
0000000000000000000000000000000000000000;;		consumeCPU := exec.Command(consumeCPUBinary, arg1, arg2)
0000000000000000000000000000000000000000;;		consumeCPU.Run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ConsumeMem(megabytes int, durationSec int) {
0000000000000000000000000000000000000000;;		log.Printf("ConsumeMem megabytes: %v, durationSec: %v", megabytes, durationSec)
0000000000000000000000000000000000000000;;		megabytesString := strconv.Itoa(megabytes) + "M"
0000000000000000000000000000000000000000;;		durationSecString := strconv.Itoa(durationSec)
0000000000000000000000000000000000000000;;		// creating new consume memory process
0000000000000000000000000000000000000000;;		consumeMem := exec.Command(consumeMemBinary, "-m", "1", "--vm-bytes", megabytesString, "--vm-hang", "0", "-t", durationSecString)
0000000000000000000000000000000000000000;;		consumeMem.Run()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetCurrentStatus() {
0000000000000000000000000000000000000000;;		log.Printf("GetCurrentStatus")
0000000000000000000000000000000000000000;;		// not implemented
0000000000000000000000000000000000000000;;	}
