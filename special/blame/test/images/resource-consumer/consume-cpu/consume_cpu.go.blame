0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b3d329cc1f69107580949094b88fa593a53cfcb3;contrib/for-tests/resource-consumer/consume-cpu/consume_cpu.go[contrib/for-tests/resource-consumer/consume-cpu/consume_cpu.go][test/images/resource-consumer/consume-cpu/consume_cpu.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"bitbucket.org/bertimus9/systemstat"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const sleep = time.Duration(10) * time.Millisecond
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doSomething() {
0000000000000000000000000000000000000000;;		for i := 1; i < 10000000; i++ {
0000000000000000000000000000000000000000;;			x := float64(0)
0000000000000000000000000000000000000000;;			x += math.Sqrt(0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		millicores  = flag.Int("millicores", 0, "millicores number")
0000000000000000000000000000000000000000;;		durationSec = flag.Int("duration-sec", 0, "duration time in seconds")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;		// convert millicores to percentage
0000000000000000000000000000000000000000;;		millicoresPct := float64(*millicores) / float64(10)
0000000000000000000000000000000000000000;;		duration := time.Duration(*durationSec) * time.Second
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		first := systemstat.GetProcCPUSample()
0000000000000000000000000000000000000000;;		for time.Now().Sub(start) < duration {
0000000000000000000000000000000000000000;;			cpu := systemstat.GetProcCPUAverage(first, systemstat.GetProcCPUSample(), systemstat.GetUptime().Uptime)
0000000000000000000000000000000000000000;;			if cpu.TotalPct < millicoresPct {
0000000000000000000000000000000000000000;;				doSomething()
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				time.Sleep(sleep)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
