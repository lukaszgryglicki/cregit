0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ff0c27114ad174ca536ea173c86b9e1b2157cd54;test/e2e/federation-event.go[test/e2e/federation-event.go][test/e2e_federation/event.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_federation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;		fedframework "k8s.io/kubernetes/test/e2e_federation/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FederationEventName = "federation-event"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create/delete event api objects.
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Federation events [Feature:Federation]", func() {
0000000000000000000000000000000000000000;;		f := fedframework.NewDefaultFederatedFramework("federation-event")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Describe("Event objects [NoCluster]", func() {
0000000000000000000000000000000000000000;;			AfterEach(func() {
0000000000000000000000000000000000000000;;				fedframework.SkipUnlessFederated(f.ClientSet)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				nsName := f.FederationNamespace.Name
0000000000000000000000000000000000000000;;				// Delete registered events.
0000000000000000000000000000000000000000;;				eventList, err := f.FederationClientset.Core().Events(nsName).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;				Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;				for _, event := range eventList.Items {
0000000000000000000000000000000000000000;;					err := f.FederationClientset.Core().Events(nsName).Delete(event.Name, &metav1.DeleteOptions{})
0000000000000000000000000000000000000000;;					Expect(err).NotTo(HaveOccurred())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			It("should be created and deleted successfully", func() {
0000000000000000000000000000000000000000;;				fedframework.SkipUnlessFederated(f.ClientSet)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				nsName := f.FederationNamespace.Name
0000000000000000000000000000000000000000;;				event := createEventOrFail(f.FederationClientset, nsName)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("Creation of event %q in namespace %q succeeded.  Deleting event.", event.Name, nsName))
0000000000000000000000000000000000000000;;				// Cleanup
0000000000000000000000000000000000000000;;				err := f.FederationClientset.Core().Events(nsName).Delete(event.Name, &metav1.DeleteOptions{})
0000000000000000000000000000000000000000;;				framework.ExpectNoError(err, "Error deleting event %q in namespace %q", event.Name, event.Namespace)
0000000000000000000000000000000000000000;;				By(fmt.Sprintf("Deletion of event %q in namespace %q succeeded.", event.Name, nsName))
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createEventOrFail(clientset *federation_clientset.Clientset, namespace string) *v1.Event {
0000000000000000000000000000000000000000;;		if clientset == nil || len(namespace) == 0 {
0000000000000000000000000000000000000000;;			Fail(fmt.Sprintf("Internal error: invalid parameters passed to createEventOrFail: clientset: %v, namespace: %v", clientset, namespace))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("Creating federated event %q in namespace %q", FederationEventName, namespace))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		event := &v1.Event{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      FederationEventName,
0000000000000000000000000000000000000000;;				Namespace: namespace,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			InvolvedObject: v1.ObjectReference{
0000000000000000000000000000000000000000;;				Kind:       "Pod",
0000000000000000000000000000000000000000;;				Name:       "pod-name",
0000000000000000000000000000000000000000;;				Namespace:  namespace,
0000000000000000000000000000000000000000;;				UID:        "C934D34AFB20242",
0000000000000000000000000000000000000000;;				APIVersion: "version",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Source: v1.EventSource{
0000000000000000000000000000000000000000;;				Component: "kubelet",
0000000000000000000000000000000000000000;;				Host:      "kublet.node1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Count: 1,
0000000000000000000000000000000000000000;;			Type:  v1.EventTypeNormal,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := clientset.Core().Events(namespace).Create(event)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err, "Creating event %q in namespace %q", event.Name, namespace)
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("Successfully created federated event %q in namespace %q", FederationEventName, namespace))
0000000000000000000000000000000000000000;;		return event
0000000000000000000000000000000000000000;;	}
