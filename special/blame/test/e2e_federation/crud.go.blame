0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
13a5a3f3ab57ea73714becbac9628ca0ab2bfe9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_federation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/federatedtypes"
0000000000000000000000000000000000000000;;		kubeclientset "k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;		fedframework "k8s.io/kubernetes/test/e2e_federation/framework"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Federated types [Feature:Federation][Experimental] ", func() {
0000000000000000000000000000000000000000;;		var clusterClients []kubeclientset.Interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := fedframework.NewDefaultFederatedFramework("federated-types")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fedTypes := federatedtypes.FederatedTypes()
0000000000000000000000000000000000000000;;		for name := range fedTypes {
0000000000000000000000000000000000000000;;			fedType := fedTypes[name]
0000000000000000000000000000000000000000;;			Describe(fmt.Sprintf("Federated %q resources", name), func() {
0000000000000000000000000000000000000000;;				It("should be created, read, updated and deleted successfully", func() {
0000000000000000000000000000000000000000;;					fedframework.SkipUnlessFederated(f.ClientSet)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Load clients only if not skipping to avoid doing
0000000000000000000000000000000000000000;;					// unnecessary work.  Assume clients can be shared
0000000000000000000000000000000000000000;;					// across tests.
0000000000000000000000000000000000000000;;					if clusterClients == nil {
0000000000000000000000000000000000000000;;						clusterClients = f.GetClusterClients()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					adapter := fedType.AdapterFactory(f.FederationClientset, f.FederationConfig)
0000000000000000000000000000000000000000;;					crudTester := fedframework.NewFederatedTypeCRUDTester(adapter, clusterClients)
0000000000000000000000000000000000000000;;					obj := adapter.NewTestObject(f.FederationNamespace.Name)
0000000000000000000000000000000000000000;;					crudTester.CheckLifecycle(obj)
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	})
