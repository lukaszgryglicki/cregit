0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4c3a53f81e4cd8f74ba9e4b86955bd9f4ff71916;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package upgrades
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pkgruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/federatedtypes"
0000000000000000000000000000000000000000;;		crudtester "k8s.io/kubernetes/federation/pkg/federatedtypes/crudtester"
0000000000000000000000000000000000000000;;		fedframework "k8s.io/kubernetes/test/e2e_federation/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SimpleUpgradeTest validates that a federated resource remains
0000000000000000000000000000000000000000;;	// propagated before and after a control plane upgrade
0000000000000000000000000000000000000000;;	type SimpleUpgradeTest struct {
0000000000000000000000000000000000000000;;		kind           string
0000000000000000000000000000000000000000;;		adapterFactory federatedtypes.AdapterFactory
0000000000000000000000000000000000000000;;		crudTester     *crudtester.FederatedTypeCRUDTester
0000000000000000000000000000000000000000;;		obj            pkgruntime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Setup creates a resource and validates its propagation to member clusters
0000000000000000000000000000000000000000;;	func (ut *SimpleUpgradeTest) Setup(f *fedframework.Framework) {
0000000000000000000000000000000000000000;;		adapter := ut.adapterFactory(f.FederationClientset, f.FederationConfig)
0000000000000000000000000000000000000000;;		clients := f.GetClusterClients()
0000000000000000000000000000000000000000;;		ut.crudTester = fedframework.NewFederatedTypeCRUDTester(adapter, clients)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("Creating a resource of kind %q and validating propagation to member clusters", ut.kind))
0000000000000000000000000000000000000000;;		obj := adapter.NewTestObject(f.Namespace.Name)
0000000000000000000000000000000000000000;;		ut.obj = ut.crudTester.CheckCreate(obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test validates that a resource remains propagated post-upgrade
0000000000000000000000000000000000000000;;	func (ut *SimpleUpgradeTest) Test(f *fedframework.Framework, done <-chan struct{}, upgrade FederationUpgradeType) {
0000000000000000000000000000000000000000;;		<-done
0000000000000000000000000000000000000000;;		By(fmt.Sprintf("Validating that a resource of kind %q remains propagated to member clusters after upgrade", ut.kind))
0000000000000000000000000000000000000000;;		ut.crudTester.CheckPropagation(ut.obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Teardown cleans up remaining resources
0000000000000000000000000000000000000000;;	func (ut *SimpleUpgradeTest) Teardown(f *fedframework.Framework) {
0000000000000000000000000000000000000000;;		// Rely on the namespace deletion to clean up everything
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SimpleUpgradeTests collects simple upgrade tests for registered federated types
0000000000000000000000000000000000000000;;	func SimpleUpgradeTests() []Test {
0000000000000000000000000000000000000000;;		tests := []Test{}
0000000000000000000000000000000000000000;;		for kind, fedType := range federatedtypes.FederatedTypes() {
0000000000000000000000000000000000000000;;			tests = append(tests, &SimpleUpgradeTest{
0000000000000000000000000000000000000000;;				kind:           kind,
0000000000000000000000000000000000000000;;				adapterFactory: fedType.AdapterFactory,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tests
0000000000000000000000000000000000000000;;	}
