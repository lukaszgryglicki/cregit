0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f3f84e931c47759184d90bd236ab8aaecdce04f7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package upgrades provides a framework for testing Kubernetes federation
0000000000000000000000000000000000000000;;	// features before, during, and after different types of upgrades.
0000000000000000000000000000000000000000;;	package upgrades
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import fedframework "k8s.io/kubernetes/test/e2e_federation/framework"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FederationUpgradeType represents different types of federation upgrades.
0000000000000000000000000000000000000000;;	type FederationUpgradeType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// FCPUpgrade indicates that federation control plane is being upgraded.
0000000000000000000000000000000000000000;;		FCPUpgrade FederationUpgradeType = iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FederatedClustersUpgrade indicates that federated clusters are being upgraded.
0000000000000000000000000000000000000000;;		FederatedClustersUpgrade
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FCPUpgradeFollowedByFederatedClustersUpgrade indicates that federation control plane is upgraded
0000000000000000000000000000000000000000;;		// followed by federated clusters upgrade.
0000000000000000000000000000000000000000;;		FCPUpgradeFollowedByFederatedClustersUpgrade
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FederatedClustersUpgradeFollowedByFCPUpgrade indicates that federated clusters are upgraded
0000000000000000000000000000000000000000;;		// followed by federation control plane upgrade.
0000000000000000000000000000000000000000;;		FederatedClustersUpgradeFollowedByFCPUpgrade
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test is an interface for federation upgrade tests.
0000000000000000000000000000000000000000;;	type Test interface {
0000000000000000000000000000000000000000;;		// Setup should create and verify whatever objects need to
0000000000000000000000000000000000000000;;		// exist before the upgrade disruption starts.
0000000000000000000000000000000000000000;;		Setup(f *fedframework.Framework)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test will run during the upgrade. When the upgrade is
0000000000000000000000000000000000000000;;		// complete, done will be closed and final validation can
0000000000000000000000000000000000000000;;		// begin.
0000000000000000000000000000000000000000;;		Test(f *fedframework.Framework, done <-chan struct{}, upgrade FederationUpgradeType)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TearDown should clean up any objects that are created that
0000000000000000000000000000000000000000;;		// aren't already cleaned up by the framework.
0000000000000000000000000000000000000000;;		Teardown(f *fedframework.Framework)
0000000000000000000000000000000000000000;;	}
