0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f3f84e931c47759184d90bd236ab8aaecdce04f7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package e2e_federation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/chaosmonkey"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e/framework"
0000000000000000000000000000000000000000;;		fedframework "k8s.io/kubernetes/test/e2e_federation/framework"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/test/e2e_federation/upgrades"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var upgradeTests = upgrades.SimpleUpgradeTests()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = framework.KubeDescribe("Upgrade [Feature:Upgrade]", func() {
0000000000000000000000000000000000000000;;		f := fedframework.NewDefaultFederatedFramework("federation-upgrade")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("Federation Control Plane upgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning federation [Feature:FCPUpgrade]", func() {
0000000000000000000000000000000000000000;;				fedframework.SkipUnlessFederated(f.ClientSet)
0000000000000000000000000000000000000000;;				cm := chaosmonkey.New(func() {
0000000000000000000000000000000000000000;;					federationControlPlaneUpgrade(f)
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				for _, t := range upgradeTests {
0000000000000000000000000000000000000000;;					cm.RegisterInterface(&chaosMonkeyAdapter{
0000000000000000000000000000000000000000;;						test:        t,
0000000000000000000000000000000000000000;;						framework:   f,
0000000000000000000000000000000000000000;;						upgradeType: upgrades.FCPUpgrade,
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				cm.Do()
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("Federated clusters upgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning federation [Feature:FederatedClustersUpgrade]", func() {
0000000000000000000000000000000000000000;;				fedframework.SkipUnlessFederated(f.ClientSet)
0000000000000000000000000000000000000000;;				cm := chaosmonkey.New(func() {
0000000000000000000000000000000000000000;;					federatedClustersUpgrade(f)
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				for _, t := range upgradeTests {
0000000000000000000000000000000000000000;;					cm.RegisterInterface(&chaosMonkeyAdapter{
0000000000000000000000000000000000000000;;						test:        t,
0000000000000000000000000000000000000000;;						framework:   f,
0000000000000000000000000000000000000000;;						upgradeType: upgrades.FederatedClustersUpgrade,
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				cm.Do()
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("FCP upgrade followed by federated clusters upgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning federation [Feature:FCPUpgradeFollowedByFederatedClustersUpgrade]", func() {
0000000000000000000000000000000000000000;;				fedframework.SkipUnlessFederated(f.ClientSet)
0000000000000000000000000000000000000000;;				cm := chaosmonkey.New(func() {
0000000000000000000000000000000000000000;;					federationControlPlaneUpgrade(f)
0000000000000000000000000000000000000000;;					federatedClustersUpgrade(f)
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				for _, t := range upgradeTests {
0000000000000000000000000000000000000000;;					cm.RegisterInterface(&chaosMonkeyAdapter{
0000000000000000000000000000000000000000;;						test:        t,
0000000000000000000000000000000000000000;;						framework:   f,
0000000000000000000000000000000000000000;;						upgradeType: upgrades.FCPUpgradeFollowedByFederatedClustersUpgrade,
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				cm.Do()
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		framework.KubeDescribe("Federated clusters upgrade followed by FCP upgrade", func() {
0000000000000000000000000000000000000000;;			It("should maintain a functioning federation [Feature:FederatedClustersUpgradeFollowedByFCPUpgrade]", func() {
0000000000000000000000000000000000000000;;				fedframework.SkipUnlessFederated(f.ClientSet)
0000000000000000000000000000000000000000;;				cm := chaosmonkey.New(func() {
0000000000000000000000000000000000000000;;					federatedClustersUpgrade(f)
0000000000000000000000000000000000000000;;					federationControlPlaneUpgrade(f)
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				for _, t := range upgradeTests {
0000000000000000000000000000000000000000;;					cm.RegisterInterface(&chaosMonkeyAdapter{
0000000000000000000000000000000000000000;;						test:        t,
0000000000000000000000000000000000000000;;						framework:   f,
0000000000000000000000000000000000000000;;						upgradeType: upgrades.FederatedClustersUpgradeFollowedByFCPUpgrade,
0000000000000000000000000000000000000000;;					})
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				cm.Do()
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type chaosMonkeyAdapter struct {
0000000000000000000000000000000000000000;;		test        upgrades.Test
0000000000000000000000000000000000000000;;		framework   *fedframework.Framework
0000000000000000000000000000000000000000;;		upgradeType upgrades.FederationUpgradeType
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cma *chaosMonkeyAdapter) Setup() {
0000000000000000000000000000000000000000;;		cma.test.Setup(cma.framework)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cma *chaosMonkeyAdapter) Test(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;		cma.test.Test(cma.framework, stopCh, cma.upgradeType)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cma *chaosMonkeyAdapter) Teardown() {
0000000000000000000000000000000000000000;;		cma.test.Teardown(cma.framework)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func federationControlPlaneUpgrade(f *fedframework.Framework) {
0000000000000000000000000000000000000000;;		federationVersion, err := framework.RealVersion(framework.TestContext.FederationUpgradeTarget)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(fedframework.FederationControlPlaneUpgrade(federationVersion))
0000000000000000000000000000000000000000;;		framework.ExpectNoError(fedframework.CheckFederationVersion(f.FederationClientset, federationVersion))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func federatedClustersUpgrade(f *fedframework.Framework) {
0000000000000000000000000000000000000000;;		k8sVersion, err := framework.RealVersion(framework.TestContext.UpgradeTarget)
0000000000000000000000000000000000000000;;		framework.ExpectNoError(err)
0000000000000000000000000000000000000000;;		clusters := f.GetRegisteredClusters()
0000000000000000000000000000000000000000;;		for _, cluster := range clusters {
0000000000000000000000000000000000000000;;			framework.ExpectNoError(fedframework.MasterUpgrade(cluster.Name, k8sVersion))
0000000000000000000000000000000000000000;;			framework.ExpectNoError(framework.CheckMasterVersion(cluster.Clientset, k8sVersion))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// TODO: Need to add Node upgrade. Add once this framework is stable
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
