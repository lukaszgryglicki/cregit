0000000000000000000000000000000000000000;;	package expansion
649aa350e6e0ed556053bda5b1d4e4d2cdf49dc8;third_party/golang/expansion/expand_test.go[third_party/golang/expansion/expand_test.go][third_party/forked/golang/expansion/expand_test.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMapReference(t *testing.T) {
0000000000000000000000000000000000000000;;		envs := []api.EnvVar{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "FOO",
0000000000000000000000000000000000000000;;				Value: "bar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "ZOO",
0000000000000000000000000000000000000000;;				Value: "$(FOO)-1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:  "BLU",
0000000000000000000000000000000000000000;;				Value: "$(ZOO)-2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		declaredEnv := map[string]string{
0000000000000000000000000000000000000000;;			"FOO": "bar",
0000000000000000000000000000000000000000;;			"ZOO": "$(FOO)-1",
0000000000000000000000000000000000000000;;			"BLU": "$(ZOO)-2",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serviceEnv := map[string]string{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapping := MappingFuncFor(declaredEnv, serviceEnv)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, env := range envs {
0000000000000000000000000000000000000000;;			declaredEnv[env.Name] = Expand(env.Value, mapping)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedEnv := map[string]string{
0000000000000000000000000000000000000000;;			"FOO": "bar",
0000000000000000000000000000000000000000;;			"ZOO": "bar-1",
0000000000000000000000000000000000000000;;			"BLU": "bar-1-2",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range expectedEnv {
0000000000000000000000000000000000000000;;			if e, a := v, declaredEnv[k]; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				delete(declaredEnv, k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(declaredEnv) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected keys in declared env: %v", declaredEnv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMapping(t *testing.T) {
0000000000000000000000000000000000000000;;		context := map[string]string{
0000000000000000000000000000000000000000;;			"VAR_A":     "A",
0000000000000000000000000000000000000000;;			"VAR_B":     "B",
0000000000000000000000000000000000000000;;			"VAR_C":     "C",
0000000000000000000000000000000000000000;;			"VAR_REF":   "$(VAR_A)",
0000000000000000000000000000000000000000;;			"VAR_EMPTY": "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mapping := MappingFuncFor(context)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doExpansionTest(t, mapping)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMappingDual(t *testing.T) {
0000000000000000000000000000000000000000;;		context := map[string]string{
0000000000000000000000000000000000000000;;			"VAR_A":     "A",
0000000000000000000000000000000000000000;;			"VAR_EMPTY": "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		context2 := map[string]string{
0000000000000000000000000000000000000000;;			"VAR_B":   "B",
0000000000000000000000000000000000000000;;			"VAR_C":   "C",
0000000000000000000000000000000000000000;;			"VAR_REF": "$(VAR_A)",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mapping := MappingFuncFor(context, context2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doExpansionTest(t, mapping)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doExpansionTest(t *testing.T, mapping func(string) string) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "whole string",
0000000000000000000000000000000000000000;;				input:    "$(VAR_A)",
0000000000000000000000000000000000000000;;				expected: "A",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "repeat",
0000000000000000000000000000000000000000;;				input:    "$(VAR_A)-$(VAR_A)",
0000000000000000000000000000000000000000;;				expected: "A-A",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "beginning",
0000000000000000000000000000000000000000;;				input:    "$(VAR_A)-1",
0000000000000000000000000000000000000000;;				expected: "A-1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "middle",
0000000000000000000000000000000000000000;;				input:    "___$(VAR_B)___",
0000000000000000000000000000000000000000;;				expected: "___B___",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "end",
0000000000000000000000000000000000000000;;				input:    "___$(VAR_C)",
0000000000000000000000000000000000000000;;				expected: "___C",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "compound",
0000000000000000000000000000000000000000;;				input:    "$(VAR_A)_$(VAR_B)_$(VAR_C)",
0000000000000000000000000000000000000000;;				expected: "A_B_C",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "escape & expand",
0000000000000000000000000000000000000000;;				input:    "$$(VAR_B)_$(VAR_A)",
0000000000000000000000000000000000000000;;				expected: "$(VAR_B)_A",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "compound escape",
0000000000000000000000000000000000000000;;				input:    "$$(VAR_A)_$$(VAR_B)",
0000000000000000000000000000000000000000;;				expected: "$(VAR_A)_$(VAR_B)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "mixed in escapes",
0000000000000000000000000000000000000000;;				input:    "f000-$$VAR_A",
0000000000000000000000000000000000000000;;				expected: "f000-$VAR_A",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "backslash escape ignored",
0000000000000000000000000000000000000000;;				input:    "foo\\$(VAR_C)bar",
0000000000000000000000000000000000000000;;				expected: "foo\\Cbar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "backslash escape ignored",
0000000000000000000000000000000000000000;;				input:    "foo\\\\$(VAR_C)bar",
0000000000000000000000000000000000000000;;				expected: "foo\\\\Cbar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "lots of backslashes",
0000000000000000000000000000000000000000;;				input:    "foo\\\\\\\\$(VAR_A)bar",
0000000000000000000000000000000000000000;;				expected: "foo\\\\\\\\Abar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "nested var references",
0000000000000000000000000000000000000000;;				input:    "$(VAR_A$(VAR_B))",
0000000000000000000000000000000000000000;;				expected: "$(VAR_A$(VAR_B))",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "nested var references second type",
0000000000000000000000000000000000000000;;				input:    "$(VAR_A$(VAR_B)",
0000000000000000000000000000000000000000;;				expected: "$(VAR_A$(VAR_B)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "value is a reference",
0000000000000000000000000000000000000000;;				input:    "$(VAR_REF)",
0000000000000000000000000000000000000000;;				expected: "$(VAR_A)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "value is a reference x 2",
0000000000000000000000000000000000000000;;				input:    "%%$(VAR_REF)--$(VAR_REF)%%",
0000000000000000000000000000000000000000;;				expected: "%%$(VAR_A)--$(VAR_A)%%",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "empty var",
0000000000000000000000000000000000000000;;				input:    "foo$(VAR_EMPTY)bar",
0000000000000000000000000000000000000000;;				expected: "foobar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "unterminated expression",
0000000000000000000000000000000000000000;;				input:    "foo$(VAR_Awhoops!",
0000000000000000000000000000000000000000;;				expected: "foo$(VAR_Awhoops!",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "expression without operator",
0000000000000000000000000000000000000000;;				input:    "f00__(VAR_A)__",
0000000000000000000000000000000000000000;;				expected: "f00__(VAR_A)__",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "shell special vars pass through",
0000000000000000000000000000000000000000;;				input:    "$?_boo_$!",
0000000000000000000000000000000000000000;;				expected: "$?_boo_$!",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "bare operators are ignored",
0000000000000000000000000000000000000000;;				input:    "$VAR_A",
0000000000000000000000000000000000000000;;				expected: "$VAR_A",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "undefined vars are passed through",
0000000000000000000000000000000000000000;;				input:    "$(VAR_DNE)",
0000000000000000000000000000000000000000;;				expected: "$(VAR_DNE)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "multiple (even) operators, var undefined",
0000000000000000000000000000000000000000;;				input:    "$$$$$$(BIG_MONEY)",
0000000000000000000000000000000000000000;;				expected: "$$$(BIG_MONEY)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "multiple (even) operators, var defined",
0000000000000000000000000000000000000000;;				input:    "$$$$$$(VAR_A)",
0000000000000000000000000000000000000000;;				expected: "$$$(VAR_A)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "multiple (odd) operators, var undefined",
0000000000000000000000000000000000000000;;				input:    "$$$$$$$(GOOD_ODDS)",
0000000000000000000000000000000000000000;;				expected: "$$$$(GOOD_ODDS)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "multiple (odd) operators, var defined",
0000000000000000000000000000000000000000;;				input:    "$$$$$$$(VAR_A)",
0000000000000000000000000000000000000000;;				expected: "$$$A",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "missing open expression",
0000000000000000000000000000000000000000;;				input:    "$VAR_A)",
0000000000000000000000000000000000000000;;				expected: "$VAR_A)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "shell syntax ignored",
0000000000000000000000000000000000000000;;				input:    "${VAR_A}",
0000000000000000000000000000000000000000;;				expected: "${VAR_A}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "trailing incomplete expression not consumed",
0000000000000000000000000000000000000000;;				input:    "$(VAR_B)_______$(A",
0000000000000000000000000000000000000000;;				expected: "B_______$(A",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "trailing incomplete expression, no content, is not consumed",
0000000000000000000000000000000000000000;;				input:    "$(VAR_C)_______$(",
0000000000000000000000000000000000000000;;				expected: "C_______$(",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "operator at end of input string is preserved",
0000000000000000000000000000000000000000;;				input:    "$(VAR_A)foobarzab$",
0000000000000000000000000000000000000000;;				expected: "Afoobarzab$",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "shell escaped incomplete expr",
0000000000000000000000000000000000000000;;				input:    "foo-\\$(VAR_A",
0000000000000000000000000000000000000000;;				expected: "foo-\\$(VAR_A",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "lots of $( in middle",
0000000000000000000000000000000000000000;;				input:    "--$($($($($--",
0000000000000000000000000000000000000000;;				expected: "--$($($($($--",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "lots of $( in beginning",
0000000000000000000000000000000000000000;;				input:    "$($($($($--foo$(",
0000000000000000000000000000000000000000;;				expected: "$($($($($--foo$(",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "lots of $( at end",
0000000000000000000000000000000000000000;;				input:    "foo0--$($($($(",
0000000000000000000000000000000000000000;;				expected: "foo0--$($($($(",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "escaped operators in variable names are not escaped",
0000000000000000000000000000000000000000;;				input:    "$(foo$$var)",
0000000000000000000000000000000000000000;;				expected: "$(foo$$var)",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "newline not expanded",
0000000000000000000000000000000000000000;;				input:    "\n",
0000000000000000000000000000000000000000;;				expected: "\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			expanded := Expand(tc.input, mapping)
0000000000000000000000000000000000000000;;			if e, a := tc.expected, expanded; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %q, got %q", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
