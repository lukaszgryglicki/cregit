0000000000000000000000000000000000000000;;	//This package is copied from Go library reflect/type.go.
0000000000000000000000000000000000000000;;	//The struct tag library provides no way to extract the list of struct tags, only
0000000000000000000000000000000000000000;;	//a specific tag
0000000000000000000000000000000000000000;;	package reflect
9bb9c60f2b7b63bf3e88276483ba15ee9096b005;third_party/golang/reflect/type.go[third_party/golang/reflect/type.go][third_party/forked/golang/reflect/type.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StructTag struct {
0000000000000000000000000000000000000000;;		Name  string
0000000000000000000000000000000000000000;;		Value string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t StructTag) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s:%q", t.Name, t.Value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StructTags []StructTag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tags StructTags) String() string {
0000000000000000000000000000000000000000;;		s := make([]string, 0, len(tags))
0000000000000000000000000000000000000000;;		for _, tag := range tags {
0000000000000000000000000000000000000000;;			s = append(s, tag.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "`" + strings.Join(s, " ") + "`"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tags StructTags) Has(name string) bool {
0000000000000000000000000000000000000000;;		for i := range tags {
0000000000000000000000000000000000000000;;			if tags[i].Name == name {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseStructTags returns the full set of fields in a struct tag in the order they appear in
0000000000000000000000000000000000000000;;	// the struct tag.
0000000000000000000000000000000000000000;;	func ParseStructTags(tag string) (StructTags, error) {
0000000000000000000000000000000000000000;;		tags := StructTags{}
0000000000000000000000000000000000000000;;		for tag != "" {
0000000000000000000000000000000000000000;;			// Skip leading space.
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for i < len(tag) && tag[i] == ' ' {
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tag = tag[i:]
0000000000000000000000000000000000000000;;			if tag == "" {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Scan to colon. A space, a quote or a control character is a syntax error.
0000000000000000000000000000000000000000;;			// Strictly speaking, control chars include the range [0x7f, 0x9f], not just
0000000000000000000000000000000000000000;;			// [0x00, 0x1f], but in practice, we ignore the multi-byte control characters
0000000000000000000000000000000000000000;;			// as it is simpler to inspect the tag's bytes than the tag's runes.
0000000000000000000000000000000000000000;;			i = 0
0000000000000000000000000000000000000000;;			for i < len(tag) && tag[i] > ' ' && tag[i] != ':' && tag[i] != '"' && tag[i] != 0x7f {
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if i == 0 || i+1 >= len(tag) || tag[i] != ':' || tag[i+1] != '"' {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			name := string(tag[:i])
0000000000000000000000000000000000000000;;			tag = tag[i+1:]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Scan quoted string to find value.
0000000000000000000000000000000000000000;;			i = 1
0000000000000000000000000000000000000000;;			for i < len(tag) && tag[i] != '"' {
0000000000000000000000000000000000000000;;				if tag[i] == '\\' {
0000000000000000000000000000000000000000;;					i++
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if i >= len(tag) {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			qvalue := string(tag[:i+1])
0000000000000000000000000000000000000000;;			tag = tag[i+1:]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			value, err := strconv.Unquote(qvalue)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tags = append(tags, StructTag{Name: name, Value: value})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tags, nil
0000000000000000000000000000000000000000;;	}
