0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
6e04cf52dcc9d574f52de37ef85abbfe8064938a;;	
0000000000000000000000000000000000000000;;	package wal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type multiReadCloser struct {
0000000000000000000000000000000000000000;;		closers []io.Closer
0000000000000000000000000000000000000000;;		reader  io.Reader
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mc *multiReadCloser) Close() error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		for i := range mc.closers {
0000000000000000000000000000000000000000;;			err = mc.closers[i].Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mc *multiReadCloser) Read(p []byte) (int, error) {
0000000000000000000000000000000000000000;;		return mc.reader.Read(p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MultiReadCloser(readClosers ...io.ReadCloser) io.ReadCloser {
0000000000000000000000000000000000000000;;		cs := make([]io.Closer, len(readClosers))
0000000000000000000000000000000000000000;;		rs := make([]io.Reader, len(readClosers))
0000000000000000000000000000000000000000;;		for i := range readClosers {
0000000000000000000000000000000000000000;;			cs[i] = readClosers[i]
0000000000000000000000000000000000000000;;			rs[i] = readClosers[i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r := io.MultiReader(rs...)
0000000000000000000000000000000000000000;;		return &multiReadCloser{cs, r}
0000000000000000000000000000000000000000;;	}
