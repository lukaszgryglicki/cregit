0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
6e04cf52dcc9d574f52de37ef85abbfe8064938a;;	
0000000000000000000000000000000000000000;;	// +build linux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Preallocate tries to allocate the space for given
0000000000000000000000000000000000000000;;	// file. This operation is only supported on linux by a
0000000000000000000000000000000000000000;;	// few filesystems (btrfs, ext4, etc.).
0000000000000000000000000000000000000000;;	// If the operation is unsupported, no error will be returned.
0000000000000000000000000000000000000000;;	// Otherwise, the error encountered will be returned.
0000000000000000000000000000000000000000;;	func Preallocate(f *os.File, sizeInBytes int) error {
0000000000000000000000000000000000000000;;		// use mode = 1 to keep size
0000000000000000000000000000000000000000;;		// see FALLOC_FL_KEEP_SIZE
0000000000000000000000000000000000000000;;		err := syscall.Fallocate(int(f.Fd()), 1, 0, int64(sizeInBytes))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errno, ok := err.(syscall.Errno)
0000000000000000000000000000000000000000;;			// treat not support as nil error
0000000000000000000000000000000000000000;;			if ok && errno == syscall.ENOTSUP {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
