0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
6e04cf52dcc9d574f52de37ef85abbfe8064938a;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func PurgeFile(dirname string, suffix string, max uint, interval time.Duration, stop <-chan struct{}) <-chan error {
0000000000000000000000000000000000000000;;		errC := make(chan error, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				fnames, err := ReadDir(dirname)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					errC <- err
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				newfnames := make([]string, 0)
0000000000000000000000000000000000000000;;				for _, fname := range fnames {
0000000000000000000000000000000000000000;;					if strings.HasSuffix(fname, suffix) {
0000000000000000000000000000000000000000;;						newfnames = append(newfnames, fname)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sort.Strings(newfnames)
0000000000000000000000000000000000000000;;				for len(newfnames) > int(max) {
0000000000000000000000000000000000000000;;					f := path.Join(dirname, newfnames[0])
0000000000000000000000000000000000000000;;					l, err := NewLock(f)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						errC <- err
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					err = l.TryLock()
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					err = os.Remove(f)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						errC <- err
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					err = l.Unlock()
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						plog.Errorf("error unlocking %s when purging file (%v)", l.Name(), err)
0000000000000000000000000000000000000000;;						errC <- err
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					err = l.Destroy()
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						plog.Errorf("error destroying lock %s when purging file (%v)", l.Name(), err)
0000000000000000000000000000000000000000;;						errC <- err
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					plog.Infof("purged file %s successfully", f)
0000000000000000000000000000000000000000;;					newfnames = newfnames[1:]
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				select {
0000000000000000000000000000000000000000;;				case <-time.After(interval):
0000000000000000000000000000000000000000;;				case <-stop:
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return errC
0000000000000000000000000000000000000000;;	}
