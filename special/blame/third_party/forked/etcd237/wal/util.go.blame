0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
58b3994076efb0a8e1e020de7f84b2367273e167;;	
0000000000000000000000000000000000000000;;	package wal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/third_party/forked/etcd237/pkg/fileutil"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		badWalName = errors.New("bad wal name")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Exist(dirpath string) bool {
0000000000000000000000000000000000000000;;		names, err := fileutil.ReadDir(dirpath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(names) != 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// searchIndex returns the last array index of names whose raft index section is
0000000000000000000000000000000000000000;;	// equal to or smaller than the given index.
0000000000000000000000000000000000000000;;	// The given names MUST be sorted.
0000000000000000000000000000000000000000;;	func searchIndex(names []string, index uint64) (int, bool) {
0000000000000000000000000000000000000000;;		for i := len(names) - 1; i >= 0; i-- {
0000000000000000000000000000000000000000;;			name := names[i]
0000000000000000000000000000000000000000;;			_, curIndex, err := parseWalName(name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				plog.Panicf("parse correct name should never fail: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if index >= curIndex {
0000000000000000000000000000000000000000;;				return i, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return -1, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// names should have been sorted based on sequence number.
0000000000000000000000000000000000000000;;	// isValidSeq checks whether seq increases continuously.
0000000000000000000000000000000000000000;;	func isValidSeq(names []string) bool {
0000000000000000000000000000000000000000;;		var lastSeq uint64
0000000000000000000000000000000000000000;;		for _, name := range names {
0000000000000000000000000000000000000000;;			curSeq, _, err := parseWalName(name)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				plog.Panicf("parse correct name should never fail: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if lastSeq != 0 && lastSeq != curSeq-1 {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			lastSeq = curSeq
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkWalNames(names []string) []string {
0000000000000000000000000000000000000000;;		wnames := make([]string, 0)
0000000000000000000000000000000000000000;;		for _, name := range names {
0000000000000000000000000000000000000000;;			if _, _, err := parseWalName(name); err != nil {
0000000000000000000000000000000000000000;;				plog.Warningf("ignored file %v in wal", name)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			wnames = append(wnames, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return wnames
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseWalName(str string) (seq, index uint64, err error) {
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(str, ".wal") {
0000000000000000000000000000000000000000;;			return 0, 0, badWalName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = fmt.Sscanf(str, "%016x-%016x.wal", &seq, &index)
0000000000000000000000000000000000000000;;		return seq, index, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func walName(seq, index uint64) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%016x-%016x.wal", seq, index)
0000000000000000000000000000000000000000;;	}
