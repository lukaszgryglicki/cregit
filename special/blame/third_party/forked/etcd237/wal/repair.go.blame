0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
58b3994076efb0a8e1e020de7f84b2367273e167;;	
0000000000000000000000000000000000000000;;	package wal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/third_party/forked/etcd237/pkg/fileutil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/wal/walpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Repair tries to repair ErrUnexpectedEOF in the
0000000000000000000000000000000000000000;;	// last wal file by truncating.
0000000000000000000000000000000000000000;;	func Repair(dirpath string) bool {
0000000000000000000000000000000000000000;;		f, err := openLast(dirpath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		n := 0
0000000000000000000000000000000000000000;;		rec := &walpb.Record{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		decoder := newDecoder(f)
0000000000000000000000000000000000000000;;		defer decoder.close()
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			err := decoder.decode(rec)
0000000000000000000000000000000000000000;;			switch err {
0000000000000000000000000000000000000000;;			case nil:
0000000000000000000000000000000000000000;;				n += 8 + rec.Size()
0000000000000000000000000000000000000000;;				// update crc of the decoder when necessary
0000000000000000000000000000000000000000;;				switch rec.Type {
0000000000000000000000000000000000000000;;				case crcType:
0000000000000000000000000000000000000000;;					crc := decoder.crc.Sum32()
0000000000000000000000000000000000000000;;					// current crc of decoder must match the crc of the record.
0000000000000000000000000000000000000000;;					// do no need to match 0 crc, since the decoder is a new one at this case.
0000000000000000000000000000000000000000;;					if crc != 0 && rec.Validate(crc) != nil {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					decoder.updateCRC(rec.Crc)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case io.EOF:
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			case io.ErrUnexpectedEOF:
0000000000000000000000000000000000000000;;				plog.Noticef("repairing %v", f.Name())
0000000000000000000000000000000000000000;;				bf, bferr := os.Create(f.Name() + ".broken")
0000000000000000000000000000000000000000;;				if bferr != nil {
0000000000000000000000000000000000000000;;					plog.Errorf("could not repair %v, failed to create backup file", f.Name())
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				defer bf.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if _, err = f.Seek(0, os.SEEK_SET); err != nil {
0000000000000000000000000000000000000000;;					plog.Errorf("could not repair %v, failed to read file", f.Name())
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if _, err = io.Copy(bf, f); err != nil {
0000000000000000000000000000000000000000;;					plog.Errorf("could not repair %v, failed to copy file", f.Name())
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if err = f.Truncate(int64(n)); err != nil {
0000000000000000000000000000000000000000;;					plog.Errorf("could not repair %v, failed to truncate file", f.Name())
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err = f.Sync(); err != nil {
0000000000000000000000000000000000000000;;					plog.Errorf("could not repair %v, failed to sync file", f.Name())
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				plog.Errorf("could not repair error (%v)", err)
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// openLast opens the last wal file for read and write.
0000000000000000000000000000000000000000;;	func openLast(dirpath string) (*os.File, error) {
0000000000000000000000000000000000000000;;		names, err := fileutil.ReadDir(dirpath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		names = checkWalNames(names)
0000000000000000000000000000000000000000;;		if len(names) == 0 {
0000000000000000000000000000000000000000;;			return nil, ErrFileNotFound
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		last := path.Join(dirpath, names[len(names)-1])
0000000000000000000000000000000000000000;;		return os.OpenFile(last, os.O_RDWR, 0)
0000000000000000000000000000000000000000;;	}
