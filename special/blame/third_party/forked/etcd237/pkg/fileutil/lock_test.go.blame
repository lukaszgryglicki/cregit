0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
58b3994076efb0a8e1e020de7f84b2367273e167;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLockAndUnlock(t *testing.T) {
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile("", "lock")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.Close()
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			err = os.Remove(f.Name())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// lock the file
0000000000000000000000000000000000000000;;		l, err := NewLock(f.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer l.Destroy()
0000000000000000000000000000000000000000;;		err = l.Lock()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// try lock a locked file
0000000000000000000000000000000000000000;;		dupl, err := NewLock(f.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = dupl.TryLock()
0000000000000000000000000000000000000000;;		if err != ErrLocked {
0000000000000000000000000000000000000000;;			t.Errorf("err = %v, want %v", err, ErrLocked)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// unlock the file
0000000000000000000000000000000000000000;;		err = l.Unlock()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// try lock the unlocked file
0000000000000000000000000000000000000000;;		err = dupl.TryLock()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("err = %v, want %v", err, nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer dupl.Destroy()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// blocking on locked file
0000000000000000000000000000000000000000;;		locked := make(chan struct{}, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			l.Lock()
0000000000000000000000000000000000000000;;			locked <- struct{}{}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-locked:
0000000000000000000000000000000000000000;;			t.Error("unexpected unblocking")
0000000000000000000000000000000000000000;;		case <-time.After(100 * time.Millisecond):
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// unlock
0000000000000000000000000000000000000000;;		err = dupl.Unlock()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the previously blocked routine should be unblocked
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-locked:
0000000000000000000000000000000000000000;;		case <-time.After(1 * time.Second):
0000000000000000000000000000000000000000;;			t.Error("unexpected blocking")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
