0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
58b3994076efb0a8e1e020de7f84b2367273e167;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/user"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsDirWriteable(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpdir, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected ioutil.TempDir error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpdir)
0000000000000000000000000000000000000000;;		if err = IsDirWriteable(tmpdir); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected IsDirWriteable error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = os.Chmod(tmpdir, 0444); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected os.Chmod error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		me, err := user.Current()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// err can be non-nil when cross compiled
0000000000000000000000000000000000000000;;			// http://stackoverflow.com/questions/20609415/cross-compiling-user-current-not-implemented-on-linux-amd64
0000000000000000000000000000000000000000;;			t.Skipf("failed to get current user: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if me.Name == "root" || me.Name == "Administrator" {
0000000000000000000000000000000000000000;;			// ideally we should check CAP_DAC_OVERRIDE.
0000000000000000000000000000000000000000;;			// but it does not matter for tests.
0000000000000000000000000000000000000000;;			t.Skipf("running as a superuser")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := IsDirWriteable(tmpdir); err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected IsDirWriteable to error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadDir(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpdir, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpdir)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected ioutil.TempDir error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		files := []string{"def", "abc", "xyz", "ghi"}
0000000000000000000000000000000000000000;;		for _, f := range files {
0000000000000000000000000000000000000000;;			var fh *os.File
0000000000000000000000000000000000000000;;			fh, err = os.Create(filepath.Join(tmpdir, f))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("error creating file: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = fh.Close(); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("error closing file: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fs, err := ReadDir(tmpdir)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error calling ReadDir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wfs := []string{"abc", "def", "ghi", "xyz"}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(fs, wfs) {
0000000000000000000000000000000000000000;;			t.Fatalf("ReadDir: got %v, want %v", fs, wfs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExist(t *testing.T) {
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile(os.TempDir(), "fileutil")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if g := Exist(f.Name()); g != true {
0000000000000000000000000000000000000000;;			t.Errorf("exist = %v, want true", g)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		os.Remove(f.Name())
0000000000000000000000000000000000000000;;		if g := Exist(f.Name()); g != false {
0000000000000000000000000000000000000000;;			t.Errorf("exist = %v, want false", g)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
