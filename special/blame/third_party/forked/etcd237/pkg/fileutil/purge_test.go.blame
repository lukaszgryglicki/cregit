0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
58b3994076efb0a8e1e020de7f84b2367273e167;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPurgeFile(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "purgefile")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 5; i++ {
0000000000000000000000000000000000000000;;			_, err = os.Create(path.Join(dir, fmt.Sprintf("%d.test", i)))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stop := make(chan struct{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// keep at most 3 most recent files
0000000000000000000000000000000000000000;;		errch := PurgeFile(dir, "test", 3, time.Millisecond, stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create 5 more files
0000000000000000000000000000000000000000;;		for i := 5; i < 10; i++ {
0000000000000000000000000000000000000000;;			_, err = os.Create(path.Join(dir, fmt.Sprintf("%d.test", i)))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(10 * time.Millisecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// purge routine should purge 7 out of 10 files and only keep the
0000000000000000000000000000000000000000;;		// 3 most recent ones.
0000000000000000000000000000000000000000;;		// wait for purging for at most 100ms.
0000000000000000000000000000000000000000;;		var fnames []string
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			fnames, err = ReadDir(dir)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(fnames) <= 3 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(10 * time.Millisecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wnames := []string{"7.test", "8.test", "9.test"}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(fnames, wnames) {
0000000000000000000000000000000000000000;;			t.Errorf("filenames = %v, want %v", fnames, wnames)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// no error should be reported from purge routine
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case err := <-errch:
0000000000000000000000000000000000000000;;			t.Errorf("unexpected purge error %v", err)
0000000000000000000000000000000000000000;;		case <-time.After(time.Millisecond):
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		close(stop)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPurgeFileHoldingLock(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "purgefile")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			_, err = os.Create(path.Join(dir, fmt.Sprintf("%d.test", i)))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create a purge barrier at 5
0000000000000000000000000000000000000000;;		l, err := NewLock(path.Join(dir, fmt.Sprintf("%d.test", 5)))
0000000000000000000000000000000000000000;;		err = l.Lock()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stop := make(chan struct{})
0000000000000000000000000000000000000000;;		errch := PurgeFile(dir, "test", 3, time.Millisecond, stop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var fnames []string
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			fnames, err = ReadDir(dir)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(fnames) <= 5 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(10 * time.Millisecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wnames := []string{"5.test", "6.test", "7.test", "8.test", "9.test"}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(fnames, wnames) {
0000000000000000000000000000000000000000;;			t.Errorf("filenames = %v, want %v", fnames, wnames)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case err = <-errch:
0000000000000000000000000000000000000000;;			t.Errorf("unexpected purge error %v", err)
0000000000000000000000000000000000000000;;		case <-time.After(time.Millisecond):
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// remove the purge barrier
0000000000000000000000000000000000000000;;		err = l.Unlock()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = l.Destroy()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			fnames, err = ReadDir(dir)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(fnames) <= 3 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time.Sleep(10 * time.Millisecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wnames = []string{"7.test", "8.test", "9.test"}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(fnames, wnames) {
0000000000000000000000000000000000000000;;			t.Errorf("filenames = %v, want %v", fnames, wnames)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case err := <-errch:
0000000000000000000000000000000000000000;;			t.Errorf("unexpected purge error %v", err)
0000000000000000000000000000000000000000;;		case <-time.After(time.Millisecond):
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		close(stop)
0000000000000000000000000000000000000000;;	}
