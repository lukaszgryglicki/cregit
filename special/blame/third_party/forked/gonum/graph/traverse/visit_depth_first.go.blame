0000000000000000000000000000000000000000;;	// Copyright Â©2015 The gonum Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
39aa38f4319b62b29c5e236780ece9ba8d35e569;;	
0000000000000000000000000000000000000000;;	// Package traverse provides basic graph traversal primitives.
0000000000000000000000000000000000000000;;	package traverse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"golang.org/x/tools/container/intsets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/third_party/forked/gonum/graph"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/third_party/forked/gonum/graph/internal/linear"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VisitableGraph
0000000000000000000000000000000000000000;;	type VisitableGraph interface {
0000000000000000000000000000000000000000;;		graph.Graph
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VisitFrom invokes visitor with all nodes that can be reached directly from the given node.
0000000000000000000000000000000000000000;;		// If visitor returns false, visiting is short-circuited.
0000000000000000000000000000000000000000;;		VisitFrom(from graph.Node, visitor func(graph.Node) (shouldContinue bool))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VisitingDepthFirst implements stateful depth-first graph traversal on a visitable graph.
0000000000000000000000000000000000000000;;	type VisitingDepthFirst struct {
0000000000000000000000000000000000000000;;		EdgeFilter func(graph.Edge) bool
0000000000000000000000000000000000000000;;		Visit      func(u, v graph.Node)
0000000000000000000000000000000000000000;;		stack      linear.NodeStack
0000000000000000000000000000000000000000;;		visited    *intsets.Sparse
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Walk performs a depth-first traversal of the graph g starting from the given node,
0000000000000000000000000000000000000000;;	// depending on the the EdgeFilter field and the until parameter if they are non-nil. The
0000000000000000000000000000000000000000;;	// traversal follows edges for which EdgeFilter(edge) is true and returns the first node
0000000000000000000000000000000000000000;;	// for which until(node) is true. During the traversal, if the Visit field is non-nil, it
0000000000000000000000000000000000000000;;	// is called with the nodes joined by each followed edge.
0000000000000000000000000000000000000000;;	func (d *VisitingDepthFirst) Walk(g VisitableGraph, from graph.Node, until func(graph.Node) bool) graph.Node {
0000000000000000000000000000000000000000;;		if d.visited == nil {
0000000000000000000000000000000000000000;;			d.visited = &intsets.Sparse{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		d.stack.Push(from)
0000000000000000000000000000000000000000;;		d.visited.Insert(from.ID())
0000000000000000000000000000000000000000;;		if until != nil && until(from) {
0000000000000000000000000000000000000000;;			return from
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var found graph.Node
0000000000000000000000000000000000000000;;		for d.stack.Len() > 0 {
0000000000000000000000000000000000000000;;			t := d.stack.Pop()
0000000000000000000000000000000000000000;;			g.VisitFrom(t, func(n graph.Node) (shouldContinue bool) {
0000000000000000000000000000000000000000;;				if d.EdgeFilter != nil && !d.EdgeFilter(g.Edge(t, n)) {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if d.visited.Has(n.ID()) {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if d.Visit != nil {
0000000000000000000000000000000000000000;;					d.Visit(t, n)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				d.visited.Insert(n.ID())
0000000000000000000000000000000000000000;;				d.stack.Push(n)
0000000000000000000000000000000000000000;;				if until != nil && until(n) {
0000000000000000000000000000000000000000;;					found = n
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if found != nil {
0000000000000000000000000000000000000000;;				return found
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Visited returned whether the node n was visited during a traverse.
0000000000000000000000000000000000000000;;	func (d *VisitingDepthFirst) Visited(n graph.Node) bool {
0000000000000000000000000000000000000000;;		return d.visited != nil && d.visited.Has(n.ID())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reset resets the state of the traverser for reuse.
0000000000000000000000000000000000000000;;	func (d *VisitingDepthFirst) Reset() {
0000000000000000000000000000000000000000;;		d.stack = d.stack[:0]
0000000000000000000000000000000000000000;;		if d.visited != nil {
0000000000000000000000000000000000000000;;			d.visited.Clear()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
