0000000000000000000000000000000000000000;;	package simple
3a89bcdd9902c0469cca94315a1373d1dd23d336;;	
0000000000000000000000000000000000000000;;	import "k8s.io/kubernetes/third_party/forked/gonum/graph"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// edgeHolder represents a set of edges, with no more than one edge to or from a particular neighbor node
0000000000000000000000000000000000000000;;	type edgeHolder interface {
0000000000000000000000000000000000000000;;		// Visit invokes visitor with each edge and the id of the neighbor node in the edge
0000000000000000000000000000000000000000;;		Visit(visitor func(neighbor int, edge graph.Edge))
0000000000000000000000000000000000000000;;		// Delete removes edges to or from the specified neighbor
0000000000000000000000000000000000000000;;		Delete(neighbor int) edgeHolder
0000000000000000000000000000000000000000;;		// Set stores the edge to or from the specified neighbor
0000000000000000000000000000000000000000;;		Set(neighbor int, edge graph.Edge) edgeHolder
0000000000000000000000000000000000000000;;		// Get returns the edge to or from the specified neighbor
0000000000000000000000000000000000000000;;		Get(neighbor int) (graph.Edge, bool)
0000000000000000000000000000000000000000;;		// Len returns the number of edges
0000000000000000000000000000000000000000;;		Len() int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sliceEdgeHolder holds a list of edges to or from self
0000000000000000000000000000000000000000;;	type sliceEdgeHolder struct {
0000000000000000000000000000000000000000;;		self  int
0000000000000000000000000000000000000000;;		edges []graph.Edge
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *sliceEdgeHolder) Visit(visitor func(neighbor int, edge graph.Edge)) {
0000000000000000000000000000000000000000;;		for _, edge := range e.edges {
0000000000000000000000000000000000000000;;			if edge.From().ID() == e.self {
0000000000000000000000000000000000000000;;				visitor(edge.To().ID(), edge)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				visitor(edge.From().ID(), edge)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e *sliceEdgeHolder) Delete(neighbor int) edgeHolder {
0000000000000000000000000000000000000000;;		edges := e.edges[:0]
0000000000000000000000000000000000000000;;		for i, edge := range e.edges {
0000000000000000000000000000000000000000;;			if edge.From().ID() == e.self {
0000000000000000000000000000000000000000;;				if edge.To().ID() == neighbor {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if edge.From().ID() == neighbor {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			edges = append(edges, e.edges[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.edges = edges
0000000000000000000000000000000000000000;;		return e
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e *sliceEdgeHolder) Set(neighbor int, newEdge graph.Edge) edgeHolder {
0000000000000000000000000000000000000000;;		for i, edge := range e.edges {
0000000000000000000000000000000000000000;;			if edge.From().ID() == e.self {
0000000000000000000000000000000000000000;;				if edge.To().ID() == neighbor {
0000000000000000000000000000000000000000;;					e.edges[i] = newEdge
0000000000000000000000000000000000000000;;					return e
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if edge.From().ID() == neighbor {
0000000000000000000000000000000000000000;;					e.edges[i] = newEdge
0000000000000000000000000000000000000000;;					return e
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(e.edges) < 4 {
0000000000000000000000000000000000000000;;			e.edges = append(e.edges, newEdge)
0000000000000000000000000000000000000000;;			return e
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		h := mapEdgeHolder(make(map[int]graph.Edge, len(e.edges)+1))
0000000000000000000000000000000000000000;;		for i, edge := range e.edges {
0000000000000000000000000000000000000000;;			if edge.From().ID() == e.self {
0000000000000000000000000000000000000000;;				h[edge.To().ID()] = e.edges[i]
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				h[edge.From().ID()] = e.edges[i]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		h[neighbor] = newEdge
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e *sliceEdgeHolder) Get(neighbor int) (graph.Edge, bool) {
0000000000000000000000000000000000000000;;		for _, edge := range e.edges {
0000000000000000000000000000000000000000;;			if edge.From().ID() == e.self {
0000000000000000000000000000000000000000;;				if edge.To().ID() == neighbor {
0000000000000000000000000000000000000000;;					return edge, true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if edge.From().ID() == neighbor {
0000000000000000000000000000000000000000;;					return edge, true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e *sliceEdgeHolder) Len() int {
0000000000000000000000000000000000000000;;		return len(e.edges)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mapEdgeHolder holds a map of neighbors to edges
0000000000000000000000000000000000000000;;	type mapEdgeHolder map[int]graph.Edge
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e mapEdgeHolder) Visit(visitor func(neighbor int, edge graph.Edge)) {
0000000000000000000000000000000000000000;;		for neighbor, edge := range e {
0000000000000000000000000000000000000000;;			visitor(neighbor, edge)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e mapEdgeHolder) Delete(neighbor int) edgeHolder {
0000000000000000000000000000000000000000;;		delete(e, neighbor)
0000000000000000000000000000000000000000;;		return e
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e mapEdgeHolder) Set(neighbor int, edge graph.Edge) edgeHolder {
0000000000000000000000000000000000000000;;		e[neighbor] = edge
0000000000000000000000000000000000000000;;		return e
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e mapEdgeHolder) Get(neighbor int) (graph.Edge, bool) {
0000000000000000000000000000000000000000;;		edge, ok := e[neighbor]
0000000000000000000000000000000000000000;;		return edge, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (e mapEdgeHolder) Len() int {
0000000000000000000000000000000000000000;;		return len(e)
0000000000000000000000000000000000000000;;	}
