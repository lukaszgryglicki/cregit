0000000000000000000000000000000000000000;;	// Copyright Â©2014 The gonum Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
774b4e9e7e7f8e00aca2c93e3cce9ed35d8c55fb;;	
0000000000000000000000000000000000000000;;	// Package simple provides a suite of simple graph implementations satisfying
0000000000000000000000000000000000000000;;	// the gonum/graph interfaces.
0000000000000000000000000000000000000000;;	package simple
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/third_party/forked/gonum/graph"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Node is a simple graph node.
0000000000000000000000000000000000000000;;	type Node int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ID returns the ID number of the node.
0000000000000000000000000000000000000000;;	func (n Node) ID() int {
0000000000000000000000000000000000000000;;		return int(n)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Edge is a simple graph edge.
0000000000000000000000000000000000000000;;	type Edge struct {
0000000000000000000000000000000000000000;;		F, T graph.Node
0000000000000000000000000000000000000000;;		W    float64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// From returns the from-node of the edge.
0000000000000000000000000000000000000000;;	func (e Edge) From() graph.Node { return e.F }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To returns the to-node of the edge.
0000000000000000000000000000000000000000;;	func (e Edge) To() graph.Node { return e.T }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Weight returns the weight of the edge.
0000000000000000000000000000000000000000;;	func (e Edge) Weight() float64 { return e.W }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// maxInt is the maximum value of the machine-dependent int type.
0000000000000000000000000000000000000000;;	const maxInt int = int(^uint(0) >> 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isSame returns whether two float64 values are the same where NaN values
0000000000000000000000000000000000000000;;	// are equalable.
0000000000000000000000000000000000000000;;	func isSame(a, b float64) bool {
0000000000000000000000000000000000000000;;		return a == b || (math.IsNaN(a) && math.IsNaN(b))
0000000000000000000000000000000000000000;;	}
