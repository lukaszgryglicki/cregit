0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
4e5e831b3402051f469dba7f21dd54b738e80b13;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		flag "github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		functionDest = flag.StringP("func-dest", "f", "-", "Output for swagger functions; '-' means stdout (default)")
0000000000000000000000000000000000000000;;		typeSrc      = flag.StringP("type-src", "s", "", "From where we are going to read the types")
0000000000000000000000000000000000000000;;		verify       = flag.BoolP("verify", "v", false, "Verifies if the given type-src file has documentation for every type")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if *typeSrc == "" {
0000000000000000000000000000000000000000;;			glog.Fatalf("Please define -s flag as it is the source file")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var funcOut io.Writer
0000000000000000000000000000000000000000;;		if *functionDest == "-" {
0000000000000000000000000000000000000000;;			funcOut = os.Stdout
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			file, err := os.Create(*functionDest)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Couldn't open %v: %v", *functionDest, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer file.Close()
0000000000000000000000000000000000000000;;			funcOut = file
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		docsForTypes := kruntime.ParseDocumentationFrom(*typeSrc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if *verify == true {
0000000000000000000000000000000000000000;;			rc, err := kruntime.VerifySwaggerDocsExist(docsForTypes, funcOut)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Fprintf(os.Stderr, "Error in verification process: %s\n", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			os.Exit(rc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if docsForTypes != nil && len(docsForTypes) > 0 {
0000000000000000000000000000000000000000;;			if err := kruntime.WriteSwaggerDocFunc(docsForTypes, funcOut); err != nil {
0000000000000000000000000000000000000000;;				fmt.Fprintf(os.Stderr, "Error when writing swagger documentation functions: %s\n", err)
0000000000000000000000000000000000000000;;				os.Exit(-1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
