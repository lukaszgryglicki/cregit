0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
135e5abb08bae4db986b763a24a494f226050e09;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package app implements a server that runs a set of active
0000000000000000000000000000000000000000;;	// components.  This includes replication controllers, service endpoints and
0000000000000000000000000000000000000000;;	// nodes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsControllerEnabled(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			name                         string
0000000000000000000000000000000000000000;;			controllerName               string
0000000000000000000000000000000000000000;;			controllers                  []string
0000000000000000000000000000000000000000;;			disabledByDefaultControllers []string
0000000000000000000000000000000000000000;;			expected                     bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                         "on by name",
0000000000000000000000000000000000000000;;				controllerName:               "bravo",
0000000000000000000000000000000000000000;;				controllers:                  []string{"alpha", "bravo", "-charlie"},
0000000000000000000000000000000000000000;;				disabledByDefaultControllers: []string{"delta", "echo"},
0000000000000000000000000000000000000000;;				expected:                     true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                         "off by name",
0000000000000000000000000000000000000000;;				controllerName:               "charlie",
0000000000000000000000000000000000000000;;				controllers:                  []string{"alpha", "bravo", "-charlie"},
0000000000000000000000000000000000000000;;				disabledByDefaultControllers: []string{"delta", "echo"},
0000000000000000000000000000000000000000;;				expected:                     false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                         "on by default",
0000000000000000000000000000000000000000;;				controllerName:               "alpha",
0000000000000000000000000000000000000000;;				controllers:                  []string{"*"},
0000000000000000000000000000000000000000;;				disabledByDefaultControllers: []string{"delta", "echo"},
0000000000000000000000000000000000000000;;				expected:                     true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                         "off by default",
0000000000000000000000000000000000000000;;				controllerName:               "delta",
0000000000000000000000000000000000000000;;				controllers:                  []string{"*"},
0000000000000000000000000000000000000000;;				disabledByDefaultControllers: []string{"delta", "echo"},
0000000000000000000000000000000000000000;;				expected:                     false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:                         "off by default implicit, no star",
0000000000000000000000000000000000000000;;				controllerName:               "foxtrot",
0000000000000000000000000000000000000000;;				controllers:                  []string{"alpha", "bravo", "-charlie"},
0000000000000000000000000000000000000000;;				disabledByDefaultControllers: []string{"delta", "echo"},
0000000000000000000000000000000000000000;;				expected:                     false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			actual := IsControllerEnabled(tc.controllerName, sets.NewString(tc.disabledByDefaultControllers...), tc.controllers...)
0000000000000000000000000000000000000000;;			if actual != tc.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", tc.name, tc.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
