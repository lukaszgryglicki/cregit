0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cbb45ae52ce68ec726ff4455c14f08ba76d28581;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package app implements a server that runs a set of active
0000000000000000000000000000000000000000;;	// components.  This includes replication controllers, service endpoints and
0000000000000000000000000000000000000000;;	// nodes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/podautoscaler"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/podautoscaler/metrics"
0000000000000000000000000000000000000000;;		resourceclient "k8s.io/metrics/pkg/client/clientset_generated/clientset/typed/metrics/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/metrics/pkg/client/custom_metrics"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func startHPAController(ctx ControllerContext) (bool, error) {
0000000000000000000000000000000000000000;;		if !ctx.AvailableResources[schema.GroupVersionResource{Group: "autoscaling", Version: "v1", Resource: "horizontalpodautoscalers"}] {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ctx.Options.HorizontalPodAutoscalerUseRESTClients {
0000000000000000000000000000000000000000;;			// use the new-style clients if support for custom metrics is enabled
0000000000000000000000000000000000000000;;			return startHPAControllerWithRESTClient(ctx)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return startHPAControllerWithLegacyClient(ctx)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func startHPAControllerWithRESTClient(ctx ControllerContext) (bool, error) {
0000000000000000000000000000000000000000;;		clientConfig := ctx.ClientBuilder.ConfigOrDie("horizontal-pod-autoscaler")
0000000000000000000000000000000000000000;;		metricsClient := metrics.NewRESTMetricsClient(
0000000000000000000000000000000000000000;;			resourceclient.NewForConfigOrDie(clientConfig),
0000000000000000000000000000000000000000;;			custom_metrics.NewForConfigOrDie(clientConfig),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return startHPAControllerWithMetricsClient(ctx, metricsClient)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func startHPAControllerWithLegacyClient(ctx ControllerContext) (bool, error) {
0000000000000000000000000000000000000000;;		hpaClient := ctx.ClientBuilder.ClientOrDie("horizontal-pod-autoscaler")
0000000000000000000000000000000000000000;;		metricsClient := metrics.NewHeapsterMetricsClient(
0000000000000000000000000000000000000000;;			hpaClient,
0000000000000000000000000000000000000000;;			metrics.DefaultHeapsterNamespace,
0000000000000000000000000000000000000000;;			metrics.DefaultHeapsterScheme,
0000000000000000000000000000000000000000;;			metrics.DefaultHeapsterService,
0000000000000000000000000000000000000000;;			metrics.DefaultHeapsterPort,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return startHPAControllerWithMetricsClient(ctx, metricsClient)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func startHPAControllerWithMetricsClient(ctx ControllerContext, metricsClient metrics.MetricsClient) (bool, error) {
0000000000000000000000000000000000000000;;		hpaClient := ctx.ClientBuilder.ClientOrDie("horizontal-pod-autoscaler")
0000000000000000000000000000000000000000;;		replicaCalc := podautoscaler.NewReplicaCalculator(metricsClient, hpaClient.Core())
0000000000000000000000000000000000000000;;		go podautoscaler.NewHorizontalController(
0000000000000000000000000000000000000000;;			ctx.ClientBuilder.ClientGoClientOrDie("horizontal-pod-autoscaler").Core(),
0000000000000000000000000000000000000000;;			hpaClient.Extensions(),
0000000000000000000000000000000000000000;;			hpaClient.Autoscaling(),
0000000000000000000000000000000000000000;;			replicaCalc,
0000000000000000000000000000000000000000;;			ctx.InformerFactory.Autoscaling().V1().HorizontalPodAutoscalers(),
0000000000000000000000000000000000000000;;			ctx.Options.HorizontalPodAutoscalerSyncPeriod.Duration,
0000000000000000000000000000000000000000;;			ctx.Options.HorizontalPodAutoscalerUpscaleForbiddenWindow.Duration,
0000000000000000000000000000000000000000;;			ctx.Options.HorizontalPodAutoscalerDownscaleForbiddenWindow.Duration,
0000000000000000000000000000000000000000;;		).Run(ctx.Stop)
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
