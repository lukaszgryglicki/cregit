0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cbb45ae52ce68ec726ff4455c14f08ba76d28581;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package app implements a server that runs a set of active
0000000000000000000000000000000000000000;;	// components.  This includes replication controllers, service endpoints and
0000000000000000000000000000000000000000;;	// nodes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/disruption"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func startDisruptionController(ctx ControllerContext) (bool, error) {
0000000000000000000000000000000000000000;;		var group = "policy"
0000000000000000000000000000000000000000;;		var version = "v1beta1"
0000000000000000000000000000000000000000;;		var resource = "poddisruptionbudgets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !ctx.AvailableResources[schema.GroupVersionResource{Group: group, Version: version, Resource: resource}] {
0000000000000000000000000000000000000000;;			glog.Infof(
0000000000000000000000000000000000000000;;				"Refusing to start disruption because resource %q in group %q is not available.",
0000000000000000000000000000000000000000;;				resource, group+"/"+version)
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go disruption.NewDisruptionController(
0000000000000000000000000000000000000000;;			ctx.InformerFactory.Core().V1().Pods(),
0000000000000000000000000000000000000000;;			ctx.InformerFactory.Policy().V1beta1().PodDisruptionBudgets(),
0000000000000000000000000000000000000000;;			ctx.InformerFactory.Core().V1().ReplicationControllers(),
0000000000000000000000000000000000000000;;			ctx.InformerFactory.Extensions().V1beta1().ReplicaSets(),
0000000000000000000000000000000000000000;;			ctx.InformerFactory.Extensions().V1beta1().Deployments(),
0000000000000000000000000000000000000000;;			ctx.InformerFactory.Apps().V1beta1().StatefulSets(),
0000000000000000000000000000000000000000;;			ctx.ClientBuilder.ClientOrDie("disruption-controller"),
0000000000000000000000000000000000000000;;		).Run(ctx.Stop)
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
