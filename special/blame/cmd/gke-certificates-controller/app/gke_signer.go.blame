0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
fb3b9e794a18c5cc51d95a9b3c0628ba86d23ed3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capi "k8s.io/api/certificates/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/webhook"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/apis/certificates/install"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/controller/certificates"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		groupVersions = []schema.GroupVersion{capi.SchemeGroupVersion}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GKESigner uses external calls to GKE in order to sign certificate signing
0000000000000000000000000000000000000000;;	// requests.
0000000000000000000000000000000000000000;;	type GKESigner struct {
0000000000000000000000000000000000000000;;		webhook        *webhook.GenericWebhook
0000000000000000000000000000000000000000;;		kubeConfigFile string
0000000000000000000000000000000000000000;;		retryBackoff   time.Duration
0000000000000000000000000000000000000000;;		recorder       record.EventRecorder
0000000000000000000000000000000000000000;;		client         clientset.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewGKESigner will create a new instance of a GKESigner.
0000000000000000000000000000000000000000;;	func NewGKESigner(kubeConfigFile string, retryBackoff time.Duration, recorder record.EventRecorder, client clientset.Interface) (*GKESigner, error) {
0000000000000000000000000000000000000000;;		webhook, err := webhook.NewGenericWebhook(api.Registry, api.Codecs, kubeConfigFile, groupVersions, retryBackoff)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &GKESigner{
0000000000000000000000000000000000000000;;			webhook:        webhook,
0000000000000000000000000000000000000000;;			kubeConfigFile: kubeConfigFile,
0000000000000000000000000000000000000000;;			retryBackoff:   retryBackoff,
0000000000000000000000000000000000000000;;			recorder:       recorder,
0000000000000000000000000000000000000000;;			client:         client,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *GKESigner) handle(csr *capi.CertificateSigningRequest) error {
0000000000000000000000000000000000000000;;		if !certificates.IsCertificateRequestApproved(csr) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		csr, err := s.sign(csr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error auto signing csr: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = s.client.Certificates().CertificateSigningRequests().UpdateStatus(csr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error updating signature for csr: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sign will make an external call to GKE order to sign the given
0000000000000000000000000000000000000000;;	// *capi.CertificateSigningRequest, using the GKESigner's
0000000000000000000000000000000000000000;;	// kubeConfigFile.
0000000000000000000000000000000000000000;;	func (s *GKESigner) sign(csr *capi.CertificateSigningRequest) (*capi.CertificateSigningRequest, error) {
0000000000000000000000000000000000000000;;		result := s.webhook.WithExponentialBackoff(func() rest.Result {
0000000000000000000000000000000000000000;;			return s.webhook.RestClient.Post().Body(csr).Do()
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := result.Error(); err != nil {
0000000000000000000000000000000000000000;;			if bodyErr := s.resultBodyError(result); bodyErr != nil {
0000000000000000000000000000000000000000;;				return nil, s.webhookError(csr, bodyErr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, s.webhookError(csr, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var statusCode int
0000000000000000000000000000000000000000;;		if result.StatusCode(&statusCode); statusCode < 200 || statusCode >= 300 {
0000000000000000000000000000000000000000;;			return nil, s.webhookError(csr, fmt.Errorf("received unsuccessful response code from webhook: %d", statusCode))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result_csr := &capi.CertificateSigningRequest{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := result.Into(result_csr); err != nil {
0000000000000000000000000000000000000000;;			return nil, s.webhookError(result_csr, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Keep the original CSR intact, and only update fields we expect to change.
0000000000000000000000000000000000000000;;		csr.Status.Certificate = result_csr.Status.Certificate
0000000000000000000000000000000000000000;;		return csr, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *GKESigner) webhookError(csr *capi.CertificateSigningRequest, err error) error {
0000000000000000000000000000000000000000;;		glog.V(2).Infof("error contacting webhook backend: %s", err)
0000000000000000000000000000000000000000;;		s.recorder.Eventf(csr, "Warning", "SigningError", "error while calling GKE: %v", err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// signResultError represents the structured response body of a failed call to
0000000000000000000000000000000000000000;;	// GKE's SignCertificate API.
0000000000000000000000000000000000000000;;	type signResultError struct {
0000000000000000000000000000000000000000;;		Error struct {
0000000000000000000000000000000000000000;;			Code    int
0000000000000000000000000000000000000000;;			Message string
0000000000000000000000000000000000000000;;			Status  string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// resultBodyError attempts to extract an error out of a response body.
0000000000000000000000000000000000000000;;	func (s *GKESigner) resultBodyError(result rest.Result) error {
0000000000000000000000000000000000000000;;		body, _ := result.Raw()
0000000000000000000000000000000000000000;;		var sre signResultError
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(body, &sre); err == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("server responded with error: %s", sre.Error.Message)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
