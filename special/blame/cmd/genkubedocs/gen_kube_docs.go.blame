0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
20ca63312060045bb101e4b8e893fb0518b28a07;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra/doc"
0000000000000000000000000000000000000000;;		ccmapp "k8s.io/kubernetes/cmd/cloud-controller-manager/app"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/genutils"
0000000000000000000000000000000000000000;;		apiservapp "k8s.io/kubernetes/cmd/kube-apiserver/app"
0000000000000000000000000000000000000000;;		cmapp "k8s.io/kubernetes/cmd/kube-controller-manager/app"
0000000000000000000000000000000000000000;;		proxyapp "k8s.io/kubernetes/cmd/kube-proxy/app"
0000000000000000000000000000000000000000;;		kubeletapp "k8s.io/kubernetes/cmd/kubelet/app"
0000000000000000000000000000000000000000;;		schapp "k8s.io/kubernetes/plugin/cmd/kube-scheduler/app"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		// use os.Args instead of "flags" because "flags" will mess up the man pages!
0000000000000000000000000000000000000000;;		path := ""
0000000000000000000000000000000000000000;;		module := ""
0000000000000000000000000000000000000000;;		if len(os.Args) == 3 {
0000000000000000000000000000000000000000;;			path = os.Args[1]
0000000000000000000000000000000000000000;;			module = os.Args[2]
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			fmt.Fprintf(os.Stderr, "usage: %s [output directory] [module] \n", os.Args[0])
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		outDir, err := genutils.OutDir(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Fprintf(os.Stderr, "failed to get output directory: %v\n", err)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch module {
0000000000000000000000000000000000000000;;		case "kube-apiserver":
0000000000000000000000000000000000000000;;			// generate docs for kube-apiserver
0000000000000000000000000000000000000000;;			apiserver := apiservapp.NewAPIServerCommand()
0000000000000000000000000000000000000000;;			doc.GenMarkdownTree(apiserver, outDir)
0000000000000000000000000000000000000000;;		case "kube-controller-manager":
0000000000000000000000000000000000000000;;			// generate docs for kube-controller-manager
0000000000000000000000000000000000000000;;			controllermanager := cmapp.NewControllerManagerCommand()
0000000000000000000000000000000000000000;;			doc.GenMarkdownTree(controllermanager, outDir)
0000000000000000000000000000000000000000;;		case "cloud-controller-manager":
0000000000000000000000000000000000000000;;			// generate docs for cloud-controller-manager
0000000000000000000000000000000000000000;;			cloudcontrollermanager := ccmapp.NewCloudControllerManagerCommand()
0000000000000000000000000000000000000000;;			doc.GenMarkdownTree(cloudcontrollermanager, outDir)
0000000000000000000000000000000000000000;;		case "kube-proxy":
0000000000000000000000000000000000000000;;			// generate docs for kube-proxy
0000000000000000000000000000000000000000;;			proxy := proxyapp.NewProxyCommand()
0000000000000000000000000000000000000000;;			doc.GenMarkdownTree(proxy, outDir)
0000000000000000000000000000000000000000;;		case "kube-scheduler":
0000000000000000000000000000000000000000;;			// generate docs for kube-scheduler
0000000000000000000000000000000000000000;;			scheduler := schapp.NewSchedulerCommand()
0000000000000000000000000000000000000000;;			doc.GenMarkdownTree(scheduler, outDir)
0000000000000000000000000000000000000000;;		case "kubelet":
0000000000000000000000000000000000000000;;			// generate docs for kubelet
0000000000000000000000000000000000000000;;			kubelet := kubeletapp.NewKubeletCommand()
0000000000000000000000000000000000000000;;			doc.GenMarkdownTree(kubelet, outDir)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			fmt.Fprintf(os.Stderr, "Module %s is not supported", module)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
