0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a75fe9ced51353eb210d50912d7715f2d3d0901c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/componentconfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValueOfAllocatableResources(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			kubeReserved   string
0000000000000000000000000000000000000000;;			systemReserved string
0000000000000000000000000000000000000000;;			errorExpected  bool
0000000000000000000000000000000000000000;;			name           string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   "cpu=200m,memory=-150G",
0000000000000000000000000000000000000000;;				systemReserved: "cpu=200m,memory=15Ki",
0000000000000000000000000000000000000000;;				errorExpected:  true,
0000000000000000000000000000000000000000;;				name:           "negative quantity value",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   "cpu=200m,memory=150Gi",
0000000000000000000000000000000000000000;;				systemReserved: "cpu=200m,memory=15Ky",
0000000000000000000000000000000000000000;;				errorExpected:  true,
0000000000000000000000000000000000000000;;				name:           "invalid quantity unit",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubeReserved:   "cpu=200m,memory=15G",
0000000000000000000000000000000000000000;;				systemReserved: "cpu=200m,memory=15Ki",
0000000000000000000000000000000000000000;;				errorExpected:  false,
0000000000000000000000000000000000000000;;				name:           "Valid resource quantity",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			kubeReservedCM := make(componentconfig.ConfigurationMap)
0000000000000000000000000000000000000000;;			systemReservedCM := make(componentconfig.ConfigurationMap)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			kubeReservedCM.Set(test.kubeReserved)
0000000000000000000000000000000000000000;;			systemReservedCM.Set(test.systemReserved)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, err1 := parseResourceList(kubeReservedCM)
0000000000000000000000000000000000000000;;			_, err2 := parseResourceList(systemReservedCM)
0000000000000000000000000000000000000000;;			if test.errorExpected {
0000000000000000000000000000000000000000;;				if err1 == nil && err2 == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: error expected", test.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err1 != nil || err2 != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected error: %v, %v", test.name, err1, err2)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
