0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
28d1b811f32f22d79e3d1a03efc572f4fe6fc926;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file exists to force the desired plugin implementations to be linked.
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		// Credential providers
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/credentialprovider/aws"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/credentialprovider/azure"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/credentialprovider/gcp"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/credentialprovider/rancher"
0000000000000000000000000000000000000000;;		// Network plugins
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/network"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/network/cni"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/network/kubenet"
0000000000000000000000000000000000000000;;		// Volume plugins
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/aws_ebs"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/azure_dd"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/azure_file"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/cephfs"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/cinder"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/configmap"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/downwardapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/empty_dir"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/fc"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/flexvolume"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/flocker"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/gce_pd"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/git_repo"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/glusterfs"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/host_path"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/iscsi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/local"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/nfs"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/photon_pd"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/portworx"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/projected"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/quobyte"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/rbd"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/scaleio"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/secret"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/storageos"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/vsphere_volume"
0000000000000000000000000000000000000000;;		// Cloud providers
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/cloudprovider/providers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProbeVolumePlugins collects all volume plugins into an easy to use list.
0000000000000000000000000000000000000000;;	// PluginDir specifies the directory to search for additional third party
0000000000000000000000000000000000000000;;	// volume plugins.
0000000000000000000000000000000000000000;;	func ProbeVolumePlugins(pluginDir string) []volume.VolumePlugin {
0000000000000000000000000000000000000000;;		allPlugins := []volume.VolumePlugin{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The list of plugins to probe is decided by the kubelet binary, not
0000000000000000000000000000000000000000;;		// by dynamic linking or other "magic".  Plugins will be analyzed and
0000000000000000000000000000000000000000;;		// initialized later.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Kubelet does not currently need to configure volume plugins.
0000000000000000000000000000000000000000;;		// If/when it does, see kube-controller-manager/app/plugins.go for example of using volume.VolumeConfig
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, aws_ebs.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, empty_dir.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, gce_pd.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, git_repo.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, host_path.ProbeVolumePlugins(volume.VolumeConfig{})...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, nfs.ProbeVolumePlugins(volume.VolumeConfig{})...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, secret.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, iscsi.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, glusterfs.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, rbd.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, cinder.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, quobyte.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, cephfs.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, downwardapi.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, fc.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, flocker.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, flexvolume.ProbeVolumePlugins(pluginDir)...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, azure_file.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, configmap.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, vsphere_volume.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, azure_dd.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, photon_pd.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, projected.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, portworx.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, scaleio.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, local.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, storageos.ProbeVolumePlugins()...)
0000000000000000000000000000000000000000;;		return allPlugins
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProbeNetworkPlugins collects all compiled-in plugins
0000000000000000000000000000000000000000;;	func ProbeNetworkPlugins(pluginDir, cniConfDir, cniBinDir string) []network.NetworkPlugin {
0000000000000000000000000000000000000000;;		allPlugins := []network.NetworkPlugin{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// for backwards-compat, allow pluginDir as a source of CNI config files
0000000000000000000000000000000000000000;;		if cniConfDir == "" {
0000000000000000000000000000000000000000;;			cniConfDir = pluginDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		binDir := cniBinDir
0000000000000000000000000000000000000000;;		if binDir == "" {
0000000000000000000000000000000000000000;;			binDir = pluginDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// for each existing plugin, add to the list
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, cni.ProbeNetworkPlugins(cniConfDir, binDir)...)
0000000000000000000000000000000000000000;;		allPlugins = append(allPlugins, kubenet.NewPlugin(binDir))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allPlugins
0000000000000000000000000000000000000000;;	}
