0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
802be154a30f3407913d017772177f28ec5c40cb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		clientgoclientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/client/metrics/prometheus" // for client metric registration
0000000000000000000000000000000000000000;;		cadvisortest "k8s.io/kubernetes/pkg/kubelet/cadvisor/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cm"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/libdocker"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubemark"
0000000000000000000000000000000000000000;;		fakeexec "k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;		fakeiptables "k8s.io/kubernetes/pkg/util/iptables/testing"
0000000000000000000000000000000000000000;;		fakesysctl "k8s.io/kubernetes/pkg/util/sysctl/testing"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/version/prometheus" // for version metric registration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HollowNodeConfig struct {
0000000000000000000000000000000000000000;;		KubeconfigPath      string
0000000000000000000000000000000000000000;;		KubeletPort         int
0000000000000000000000000000000000000000;;		KubeletReadOnlyPort int
0000000000000000000000000000000000000000;;		Morph               string
0000000000000000000000000000000000000000;;		NodeName            string
0000000000000000000000000000000000000000;;		ServerPort          int
0000000000000000000000000000000000000000;;		ContentType         string
0000000000000000000000000000000000000000;;		UseRealProxier      bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxPods     = 110
0000000000000000000000000000000000000000;;		podsPerCore = 0
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var knownMorphs = sets.NewString("kubelet", "proxy")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HollowNodeConfig) addFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		fs.StringVar(&c.KubeconfigPath, "kubeconfig", "/kubeconfig/kubeconfig", "Path to kubeconfig file.")
0000000000000000000000000000000000000000;;		fs.IntVar(&c.KubeletPort, "kubelet-port", 10250, "Port on which HollowKubelet should be listening.")
0000000000000000000000000000000000000000;;		fs.IntVar(&c.KubeletReadOnlyPort, "kubelet-read-only-port", 10255, "Read-only port on which Kubelet is listening.")
0000000000000000000000000000000000000000;;		fs.StringVar(&c.NodeName, "name", "fake-node", "Name of this Hollow Node.")
0000000000000000000000000000000000000000;;		fs.IntVar(&c.ServerPort, "api-server-port", 443, "Port on which API server is listening.")
0000000000000000000000000000000000000000;;		fs.StringVar(&c.Morph, "morph", "", fmt.Sprintf("Specifies into which Hollow component this binary should morph. Allowed values: %v", knownMorphs.List()))
0000000000000000000000000000000000000000;;		fs.StringVar(&c.ContentType, "kube-api-content-type", "application/vnd.kubernetes.protobuf", "ContentType of requests sent to apiserver.")
0000000000000000000000000000000000000000;;		fs.BoolVar(&c.UseRealProxier, "use-real-proxier", true, "Set to true if you want to use real proxier inside hollow-proxy.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HollowNodeConfig) createClientConfigFromFile() (*restclient.Config, error) {
0000000000000000000000000000000000000000;;		clientConfig, err := clientcmd.LoadFromFile(c.KubeconfigPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error while loading kubeconfig from file %v: %v", c.KubeconfigPath, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config, err := clientcmd.NewDefaultClientConfig(*clientConfig, &clientcmd.ConfigOverrides{}).ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error while creating kubeconfig: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.ContentType = c.ContentType
0000000000000000000000000000000000000000;;		config.QPS = 10
0000000000000000000000000000000000000000;;		config.Burst = 20
0000000000000000000000000000000000000000;;		return config, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		config := HollowNodeConfig{}
0000000000000000000000000000000000000000;;		config.addFlags(pflag.CommandLine)
0000000000000000000000000000000000000000;;		flag.InitFlags()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !knownMorphs.Has(config.Morph) {
0000000000000000000000000000000000000000;;			glog.Fatalf("Unknown morph: %v. Allowed values: %v", config.Morph, knownMorphs.List())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create a client to communicate with API server.
0000000000000000000000000000000000000000;;		clientConfig, err := config.createClientConfigFromFile()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Failed to create a ClientConfig: %v. Exiting.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset, err := clientset.NewForConfig(clientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Failed to create a ClientSet: %v. Exiting.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		internalClientset, err := internalclientset.NewForConfig(clientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Failed to create an internal ClientSet: %v. Exiting.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.Morph == "kubelet" {
0000000000000000000000000000000000000000;;			cadvisorInterface := new(cadvisortest.Fake)
0000000000000000000000000000000000000000;;			containerManager := cm.NewStubContainerManager()
0000000000000000000000000000000000000000;;			fakeDockerClient := libdocker.NewFakeDockerClient().WithTraceDisabled()
0000000000000000000000000000000000000000;;			fakeDockerClient.EnableSleep = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			hollowKubelet := kubemark.NewHollowKubelet(
0000000000000000000000000000000000000000;;				config.NodeName,
0000000000000000000000000000000000000000;;				clientset,
0000000000000000000000000000000000000000;;				cadvisorInterface,
0000000000000000000000000000000000000000;;				fakeDockerClient,
0000000000000000000000000000000000000000;;				config.KubeletPort,
0000000000000000000000000000000000000000;;				config.KubeletReadOnlyPort,
0000000000000000000000000000000000000000;;				containerManager,
0000000000000000000000000000000000000000;;				maxPods,
0000000000000000000000000000000000000000;;				podsPerCore,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			hollowKubelet.Run()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.Morph == "proxy" {
0000000000000000000000000000000000000000;;			eventClient, err := clientgoclientset.NewForConfig(clientConfig)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Failed to create API Server client: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			iptInterface := fakeiptables.NewFake()
0000000000000000000000000000000000000000;;			sysctl := fakesysctl.NewFake()
0000000000000000000000000000000000000000;;			execer := &fakeexec.FakeExec{}
0000000000000000000000000000000000000000;;			eventBroadcaster := record.NewBroadcaster()
0000000000000000000000000000000000000000;;			recorder := eventBroadcaster.NewRecorder(api.Scheme, clientv1.EventSource{Component: "kube-proxy", Host: config.NodeName})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			hollowProxy, err := kubemark.NewHollowProxyOrDie(
0000000000000000000000000000000000000000;;				config.NodeName,
0000000000000000000000000000000000000000;;				internalClientset,
0000000000000000000000000000000000000000;;				eventClient,
0000000000000000000000000000000000000000;;				iptInterface,
0000000000000000000000000000000000000000;;				sysctl,
0000000000000000000000000000000000000000;;				execer,
0000000000000000000000000000000000000000;;				eventBroadcaster,
0000000000000000000000000000000000000000;;				recorder,
0000000000000000000000000000000000000000;;				config.UseRealProxier,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Failed to create hollowProxy instance: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			hollowProxy.Run()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
