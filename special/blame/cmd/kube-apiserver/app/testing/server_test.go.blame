0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a89f149011a571b7ba37d2574665f81741ea71c6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		appsv1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		corev1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		networkingv1 "k8s.io/api/networking/v1"
0000000000000000000000000000000000000000;;		apiextensionsv1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		apiextensionsclientset "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/dynamic"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRun(t *testing.T) {
0000000000000000000000000000000000000000;;		config, tearDown := StartTestServerOrDie(t)
0000000000000000000000000000000000000000;;		defer tearDown()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client, err := kubernetes.NewForConfig(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// test whether the server is really healthy after /healthz told us so
0000000000000000000000000000000000000000;;		t.Logf("Creating Deployment directly after being healthy")
0000000000000000000000000000000000000000;;		var replicas int32 = 1
0000000000000000000000000000000000000000;;		_, err = client.AppsV1beta1().Deployments("default").Create(&appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind:       "Deployment",
0000000000000000000000000000000000000000;;				APIVersion: "apps/v1beta1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: "default",
0000000000000000000000000000000000000000;;				Name:      "test",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: &replicas,
0000000000000000000000000000000000000000;;				Strategy: appsv1beta1.DeploymentStrategy{
0000000000000000000000000000000000000000;;					Type: appsv1beta1.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Template: corev1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: corev1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []corev1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "foo",
0000000000000000000000000000000000000000;;								Image: "foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create deployment: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCRDShadowGroup(t *testing.T) {
0000000000000000000000000000000000000000;;		config, tearDown := StartTestServerOrDie(t)
0000000000000000000000000000000000000000;;		defer tearDown()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeclient, err := kubernetes.NewForConfig(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiextensionsclient, err := apiextensionsclientset.NewForConfig(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Creating a NetworkPolicy")
0000000000000000000000000000000000000000;;		nwPolicy, err := kubeclient.NetworkingV1().NetworkPolicies("default").Create(&networkingv1.NetworkPolicy{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;			Spec: networkingv1.NetworkPolicySpec{
0000000000000000000000000000000000000000;;				PodSelector: metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;				Ingress:     []networkingv1.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create NetworkPolicy: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Trying to shadow networking group")
0000000000000000000000000000000000000000;;		crd := &apiextensionsv1beta1.CustomResourceDefinition{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "foos." + networkingv1.GroupName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: apiextensionsv1beta1.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;				Group:   networkingv1.GroupName,
0000000000000000000000000000000000000000;;				Version: networkingv1.SchemeGroupVersion.Version,
0000000000000000000000000000000000000000;;				Scope:   apiextensionsv1beta1.ClusterScoped,
0000000000000000000000000000000000000000;;				Names: apiextensionsv1beta1.CustomResourceDefinitionNames{
0000000000000000000000000000000000000000;;					Plural: "foos",
0000000000000000000000000000000000000000;;					Kind:   "Foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = apiextensionsclient.ApiextensionsV1beta1().CustomResourceDefinitions().Create(crd); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create networking group CRD: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := waitForEstablishedCRD(apiextensionsclient, crd.Name); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to establish networking group CRD: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// wait to give aggregator time to update
0000000000000000000000000000000000000000;;		time.Sleep(2 * time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Checking that we still see the NetworkPolicy")
0000000000000000000000000000000000000000;;		_, err = kubeclient.NetworkingV1().NetworkPolicies(nwPolicy.Namespace).Get(nwPolicy.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to get NetworkPolocy: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Checking that crd resource does not show up in networking group")
0000000000000000000000000000000000000000;;		found, err := crdExistsInDiscovery(apiextensionsclient, crd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected discovery error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			t.Errorf("CRD resource shows up in discovery, but shouldn't.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCRD(t *testing.T) {
0000000000000000000000000000000000000000;;		config, tearDown := StartTestServerOrDie(t)
0000000000000000000000000000000000000000;;		defer tearDown()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiextensionsclient, err := apiextensionsclientset.NewForConfig(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Trying to create a custom resource without conflict")
0000000000000000000000000000000000000000;;		crd := &apiextensionsv1beta1.CustomResourceDefinition{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "foos.cr.bar.com",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: apiextensionsv1beta1.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;				Group:   "cr.bar.com",
0000000000000000000000000000000000000000;;				Version: "v1",
0000000000000000000000000000000000000000;;				Scope:   apiextensionsv1beta1.NamespaceScoped,
0000000000000000000000000000000000000000;;				Names: apiextensionsv1beta1.CustomResourceDefinitionNames{
0000000000000000000000000000000000000000;;					Plural: "foos",
0000000000000000000000000000000000000000;;					Kind:   "Foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = apiextensionsclient.ApiextensionsV1beta1().CustomResourceDefinitions().Create(crd); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to create foos.cr.bar.com CRD; %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := waitForEstablishedCRD(apiextensionsclient, crd.Name); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to establish foos.cr.bar.com CRD: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := wait.PollImmediate(500*time.Millisecond, 30*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			return crdExistsInDiscovery(apiextensionsclient, crd)
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to see foos.cr.bar.com in discovery: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Trying to access foos.cr.bar.com with dynamic client")
0000000000000000000000000000000000000000;;		barComConfig := *config
0000000000000000000000000000000000000000;;		barComConfig.GroupVersion = &schema.GroupVersion{Group: "cr.bar.com", Version: "v1"}
0000000000000000000000000000000000000000;;		barComConfig.APIPath = "/apis"
0000000000000000000000000000000000000000;;		barComClient, err := dynamic.NewClient(&barComConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = barComClient.Resource(&metav1.APIResource{Name: "foos", Namespaced: true}, "default").List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to list foos.cr.bar.com instances: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func waitForEstablishedCRD(client apiextensionsclientset.Interface, name string) error {
0000000000000000000000000000000000000000;;		return wait.PollImmediate(500*time.Millisecond, wait.ForeverTestTimeout, func() (bool, error) {
0000000000000000000000000000000000000000;;			crd, err := client.ApiextensionsV1beta1().CustomResourceDefinitions().Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, cond := range crd.Status.Conditions {
0000000000000000000000000000000000000000;;				switch cond.Type {
0000000000000000000000000000000000000000;;				case apiextensionsv1beta1.Established:
0000000000000000000000000000000000000000;;					if cond.Status == apiextensionsv1beta1.ConditionTrue {
0000000000000000000000000000000000000000;;						return true, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case apiextensionsv1beta1.NamesAccepted:
0000000000000000000000000000000000000000;;					if cond.Status == apiextensionsv1beta1.ConditionFalse {
0000000000000000000000000000000000000000;;						fmt.Printf("Name conflict: %v\n", cond.Reason)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func crdExistsInDiscovery(client apiextensionsclientset.Interface, crd *apiextensionsv1beta1.CustomResourceDefinition) (bool, error) {
0000000000000000000000000000000000000000;;		resourceList, err := client.Discovery().ServerResourcesForGroupVersion(crd.Spec.Group + "/" + crd.Spec.Version)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, resource := range resourceList.APIResources {
0000000000000000000000000000000000000000;;			if resource.Name == crd.Spec.Names.Plural {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
