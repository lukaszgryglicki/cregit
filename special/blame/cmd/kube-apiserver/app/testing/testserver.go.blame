0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a89f149011a571b7ba37d2574665f81741ea71c6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kube-apiserver/app"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kube-apiserver/app/options"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TearDownFunc is to be called to tear down a test server.
0000000000000000000000000000000000000000;;	type TearDownFunc func()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StartTestServer starts a etcd server and kube-apiserver. A rest client config and a tear-down func
0000000000000000000000000000000000000000;;	// are returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: we return a tear-down func instead of a stop channel because the later will leak temporariy
0000000000000000000000000000000000000000;;	// 		 files that becaues Golang testing's call to os.Exit will not give a stop channel go routine
0000000000000000000000000000000000000000;;	// 		 enough time to remove temporariy files.
0000000000000000000000000000000000000000;;	func StartTestServer(t *testing.T) (result *restclient.Config, tearDownForCaller TearDownFunc, err error) {
0000000000000000000000000000000000000000;;		var tmpDir string
0000000000000000000000000000000000000000;;		var etcdServer *etcdtesting.EtcdTestServer
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		tearDown := func() {
0000000000000000000000000000000000000000;;			close(stopCh)
0000000000000000000000000000000000000000;;			if etcdServer != nil {
0000000000000000000000000000000000000000;;				etcdServer.Terminate(t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(tmpDir) != 0 {
0000000000000000000000000000000000000000;;				os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if tearDownForCaller == nil {
0000000000000000000000000000000000000000;;				tearDown()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Starting etcd...")
0000000000000000000000000000000000000000;;		etcdServer, storageConfig := etcdtesting.NewUnsecuredEtcd3TestClientServer(t, api.Scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tmpDir, err = ioutil.TempDir("", "kubernetes-kube-apiserver")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, fmt.Errorf("Failed to create temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := options.NewServerRunOptions()
0000000000000000000000000000000000000000;;		s.InsecureServing.BindPort = 0
0000000000000000000000000000000000000000;;		s.SecureServing.BindPort = freePort()
0000000000000000000000000000000000000000;;		s.SecureServing.ServerCert.CertDirectory = tmpDir
0000000000000000000000000000000000000000;;		s.ServiceClusterIPRange.IP = net.IPv4(10, 0, 0, 0)
0000000000000000000000000000000000000000;;		s.ServiceClusterIPRange.Mask = net.CIDRMask(16, 32)
0000000000000000000000000000000000000000;;		s.Etcd.StorageConfig = *storageConfig
0000000000000000000000000000000000000000;;		s.Etcd.DefaultStorageMediaType = "application/json"
0000000000000000000000000000000000000000;;		s.Admission.PluginNames = strings.Split("Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds", ",")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Starting kube-apiserver...")
0000000000000000000000000000000000000000;;		runErrCh := make(chan error, 1)
0000000000000000000000000000000000000000;;		server, err := app.CreateServerChain(s, stopCh)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, fmt.Errorf("Failed to create server chain: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go func(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;			if err := server.PrepareRun().Run(stopCh); err != nil {
0000000000000000000000000000000000000000;;				t.Logf("kube-apiserver exited uncleanly: %v", err)
0000000000000000000000000000000000000000;;				runErrCh <- err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Logf("Waiting for /healthz to be ok...")
0000000000000000000000000000000000000000;;		client, err := kubernetes.NewForConfig(server.LoopbackClientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, fmt.Errorf("Failed to create a client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = wait.Poll(100*time.Millisecond, 30*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case err := <-runErrCh:
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result := client.CoreV1Client.RESTClient().Get().AbsPath("/healthz").Do()
0000000000000000000000000000000000000000;;			status := 0
0000000000000000000000000000000000000000;;			result.StatusCode(&status)
0000000000000000000000000000000000000000;;			if status == 200 {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, fmt.Errorf("Failed to wait for /healthz to return ok: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// from here the caller must call tearDown
0000000000000000000000000000000000000000;;		return server.LoopbackClientConfig, tearDown, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StartTestServerOrDie calls StartTestServer with up to 5 retries on bind error and dies with
0000000000000000000000000000000000000000;;	// t.Fatal if it does not succeed.
0000000000000000000000000000000000000000;;	func StartTestServerOrDie(t *testing.T) (*restclient.Config, TearDownFunc) {
0000000000000000000000000000000000000000;;		// retry test because the bind might fail due to a race with another process
0000000000000000000000000000000000000000;;		// binding to the port. We cannot listen to :0 (then the kernel would give us
0000000000000000000000000000000000000000;;		// a port which is free for sure), so we need this workaround.
0000000000000000000000000000000000000000;;		for retry := 0; retry < 5 && !t.Failed(); retry++ {
0000000000000000000000000000000000000000;;			config, td, err := StartTestServer(t)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return config, td
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil && !strings.Contains(err.Error(), "bind") {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Logf("Bind error, retrying...")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Fatalf("Failed to launch server")
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func freePort() int {
0000000000000000000000000000000000000000;;		addr, err := net.ResolveTCPAddr("tcp", "localhost:0")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := net.ListenTCP("tcp", addr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer l.Close()
0000000000000000000000000000000000000000;;		return l.Addr().(*net.TCPAddr).Port
0000000000000000000000000000000000000000;;	}
