0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
77b5cbc391c8b9ce98505abe874e1c6d93939d9f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package preflight
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilwait "k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseServerURIGood(t *testing.T) {
0000000000000000000000000000000000000000;;		host, err := parseServerURI("https://127.0.0.1:2379")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reference := "127.0.0.1:2379"
0000000000000000000000000000000000000000;;		if host != reference {
0000000000000000000000000000000000000000;;			t.Fatalf("server uri was not parsed correctly, host %s was invalid", host)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseServerURIBad(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := parseServerURI("-invalid uri$@#%")
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected bad uri to raise parse error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdConnection(t *testing.T) {
0000000000000000000000000000000000000000;;		etcd := new(EtcdConnection)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := etcd.serverReachable("-not a real network address-")
0000000000000000000000000000000000000000;;		if result {
0000000000000000000000000000000000000000;;			t.Fatal("checkConnection should not have succeeded")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCheckEtcdServersEmpty(t *testing.T) {
0000000000000000000000000000000000000000;;		etcd := new(EtcdConnection)
0000000000000000000000000000000000000000;;		result, err := etcd.CheckEtcdServers()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if result {
0000000000000000000000000000000000000000;;			t.Fatal("CheckEtcdServers should not have succeeded")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCheckEtcdServersUri(t *testing.T) {
0000000000000000000000000000000000000000;;		etcd := new(EtcdConnection)
0000000000000000000000000000000000000000;;		etcd.ServerList = []string{"-invalid uri$@#%"}
0000000000000000000000000000000000000000;;		result, err := etcd.CheckEtcdServers()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected bad uri to raise parse error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if result {
0000000000000000000000000000000000000000;;			t.Fatal("CheckEtcdServers should not have succeeded")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCheckEtcdServers(t *testing.T) {
0000000000000000000000000000000000000000;;		etcd := new(EtcdConnection)
0000000000000000000000000000000000000000;;		etcd.ServerList = []string{""}
0000000000000000000000000000000000000000;;		result, err := etcd.CheckEtcdServers()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if result {
0000000000000000000000000000000000000000;;			t.Fatal("CheckEtcdServers should not have succeeded")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPollCheckServer(t *testing.T) {
0000000000000000000000000000000000000000;;		err := utilwait.PollImmediate(1*time.Microsecond,
0000000000000000000000000000000000000000;;			2*time.Microsecond,
0000000000000000000000000000000000000000;;			EtcdConnection{ServerList: []string{""}}.CheckEtcdServers)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected check to time out")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
