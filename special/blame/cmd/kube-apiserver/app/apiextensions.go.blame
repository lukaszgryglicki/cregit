0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
413139fdd1f3ad66b1604ac5fb3b53476bd1f1c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package app does all of the work necessary to create a Kubernetes
0000000000000000000000000000000000000000;;	// APIServer by binding together the API, master and APIServer infrastructure.
0000000000000000000000000000000000000000;;	// It can be configured and called directly or via the hyperkube framework.
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		apiextensionsapiserver "k8s.io/apiextensions-apiserver/pkg/apiserver"
0000000000000000000000000000000000000000;;		apiextensionscmd "k8s.io/apiextensions-apiserver/pkg/cmd/server"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		genericoptions "k8s.io/apiserver/pkg/server/options"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kube-apiserver/app/options"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createAPIExtensionsConfig(kubeAPIServerConfig genericapiserver.Config, commandOptions *options.ServerRunOptions) (*apiextensionsapiserver.Config, error) {
0000000000000000000000000000000000000000;;		// make a shallow copy to let us twiddle a few things
0000000000000000000000000000000000000000;;		// most of the config actually remains the same.  We only need to mess with a couple items related to the particulars of the apiextensions
0000000000000000000000000000000000000000;;		genericConfig := kubeAPIServerConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// copy the etcd options so we don't mutate originals.
0000000000000000000000000000000000000000;;		etcdOptions := *commandOptions.Etcd
0000000000000000000000000000000000000000;;		etcdOptions.StorageConfig.Codec = apiextensionsapiserver.Codecs.LegacyCodec(v1beta1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		etcdOptions.StorageConfig.Copier = apiextensionsapiserver.Scheme
0000000000000000000000000000000000000000;;		genericConfig.RESTOptionsGetter = &genericoptions.SimpleRestOptionsFactory{Options: etcdOptions}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiextensionsConfig := &apiextensionsapiserver.Config{
0000000000000000000000000000000000000000;;			GenericConfig:        &genericConfig,
0000000000000000000000000000000000000000;;			CRDRESTOptionsGetter: apiextensionscmd.NewCRDRESTOptionsGetter(etcdOptions),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return apiextensionsConfig, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createAPIExtensionsServer(apiextensionsConfig *apiextensionsapiserver.Config, delegateAPIServer genericapiserver.DelegationTarget) (*apiextensionsapiserver.CustomResourceDefinitions, error) {
0000000000000000000000000000000000000000;;		apiextensionsServer, err := apiextensionsConfig.Complete().New(delegateAPIServer)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return apiextensionsServer, nil
0000000000000000000000000000000000000000;;	}
