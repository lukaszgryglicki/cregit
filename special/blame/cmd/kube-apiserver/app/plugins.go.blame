0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
e9c7c9f939fce6eaa13e3330f4498ca314738d66;cmd/apiserver/plugins.go[cmd/apiserver/plugins.go][cmd/kube-apiserver/app/plugins.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file exists to force the desired plugin implementations to be linked.
0000000000000000000000000000000000000000;;	// This should probably be part of some configuration fed into the build for a
0000000000000000000000000000000000000000;;	// given binary target.
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		// Cloud providers
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/cloudprovider/providers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Admission policies
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/admit"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/alwayspullimages"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/antiaffinity"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/defaulttolerationseconds"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/deny"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/exec"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/gc"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/imagepolicy"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/initialization"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/initialresources"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/limitranger"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/namespace/autoprovision"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/namespace/exists"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/noderestriction"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/persistentvolume/label"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/podnodeselector"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/podpreset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/podtolerationrestriction"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/resourcequota"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/security/podsecuritypolicy"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/securitycontext/scdeny"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/serviceaccount"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/storageclass/setdefault"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/admission/webhook"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// registerAllAdmissionPlugins registers all admission plugins
0000000000000000000000000000000000000000;;	func registerAllAdmissionPlugins(plugins *admission.Plugins) {
0000000000000000000000000000000000000000;;		admit.Register(plugins)
0000000000000000000000000000000000000000;;		alwayspullimages.Register(plugins)
0000000000000000000000000000000000000000;;		antiaffinity.Register(plugins)
0000000000000000000000000000000000000000;;		defaulttolerationseconds.Register(plugins)
0000000000000000000000000000000000000000;;		deny.Register(plugins)
0000000000000000000000000000000000000000;;		exec.Register(plugins)
0000000000000000000000000000000000000000;;		gc.Register(plugins)
0000000000000000000000000000000000000000;;		imagepolicy.Register(plugins)
0000000000000000000000000000000000000000;;		initialization.Register(plugins)
0000000000000000000000000000000000000000;;		initialresources.Register(plugins)
0000000000000000000000000000000000000000;;		limitranger.Register(plugins)
0000000000000000000000000000000000000000;;		autoprovision.Register(plugins)
0000000000000000000000000000000000000000;;		exists.Register(plugins)
0000000000000000000000000000000000000000;;		noderestriction.Register(plugins)
0000000000000000000000000000000000000000;;		label.Register(plugins)
0000000000000000000000000000000000000000;;		podnodeselector.Register(plugins)
0000000000000000000000000000000000000000;;		podpreset.Register(plugins)
0000000000000000000000000000000000000000;;		podtolerationrestriction.Register(plugins)
0000000000000000000000000000000000000000;;		resourcequota.Register(plugins)
0000000000000000000000000000000000000000;;		podsecuritypolicy.Register(plugins)
0000000000000000000000000000000000000000;;		scdeny.Register(plugins)
0000000000000000000000000000000000000000;;		serviceaccount.Register(plugins)
0000000000000000000000000000000000000000;;		setdefault.Register(plugins)
0000000000000000000000000000000000000000;;		webhook.Register(plugins)
0000000000000000000000000000000000000000;;	}
