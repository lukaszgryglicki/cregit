0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8b8970b5eab3701e64d13b7dedd36bce0ac25ea0;pkg/genericapiserver/validation/universal_validation.go[pkg/genericapiserver/validation/universal_validation.go][cmd/kube-apiserver/app/options/validation.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Longer term we should read this from some config store, rather than a flag.
0000000000000000000000000000000000000000;;	func validateClusterIPFlags(options *ServerRunOptions) []error {
0000000000000000000000000000000000000000;;		errors := []error{}
0000000000000000000000000000000000000000;;		if options.ServiceClusterIPRange.IP == nil {
0000000000000000000000000000000000000000;;			errors = append(errors, fmt.Errorf("no --service-cluster-ip-range specified"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var ones, bits = options.ServiceClusterIPRange.Mask.Size()
0000000000000000000000000000000000000000;;		if bits-ones > 20 {
0000000000000000000000000000000000000000;;			errors = append(errors, fmt.Errorf("specified --service-cluster-ip-range is too large"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateServiceNodePort(options *ServerRunOptions) []error {
0000000000000000000000000000000000000000;;		errors := []error{}
0000000000000000000000000000000000000000;;		if options.KubernetesServiceNodePort < 0 || options.KubernetesServiceNodePort > 65535 {
0000000000000000000000000000000000000000;;			errors = append(errors, fmt.Errorf("--kubernetes-service-node-port %v must be between 0 and 65535, inclusive. If 0, the Kubernetes master service will be of type ClusterIP", options.KubernetesServiceNodePort))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options.KubernetesServiceNodePort > 0 && !options.ServiceNodePortRange.Contains(options.KubernetesServiceNodePort) {
0000000000000000000000000000000000000000;;			errors = append(errors, fmt.Errorf("kubernetes service port range %v doesn't contain %v", options.ServiceNodePortRange, (options.KubernetesServiceNodePort)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate checks ServerRunOptions and return a slice of found errors.
0000000000000000000000000000000000000000;;	func (options *ServerRunOptions) Validate() []error {
0000000000000000000000000000000000000000;;		var errors []error
0000000000000000000000000000000000000000;;		if errs := options.Etcd.Validate(); len(errs) > 0 {
0000000000000000000000000000000000000000;;			errors = append(errors, errs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := validateClusterIPFlags(options); len(errs) > 0 {
0000000000000000000000000000000000000000;;			errors = append(errors, errs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := validateServiceNodePort(options); len(errs) > 0 {
0000000000000000000000000000000000000000;;			errors = append(errors, errs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := options.SecureServing.Validate(); len(errs) > 0 {
0000000000000000000000000000000000000000;;			errors = append(errors, errs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := options.Authentication.Validate(); len(errs) > 0 {
0000000000000000000000000000000000000000;;			errors = append(errors, errs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := options.Audit.Validate(); len(errs) > 0 {
0000000000000000000000000000000000000000;;			errors = append(errors, errs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := options.InsecureServing.Validate("insecure-port"); len(errs) > 0 {
0000000000000000000000000000000000000000;;			errors = append(errors, errs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.MasterCount <= 0 {
0000000000000000000000000000000000000000;;			errors = append(errors, fmt.Errorf("--apiserver-count should be a positive number, but value '%d' provided", options.MasterCount))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors
0000000000000000000000000000000000000000;;	}
