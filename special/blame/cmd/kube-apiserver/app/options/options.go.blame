0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
e9ffd3543b391b70b0dea21ed7ff0ea7dee03fc3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package options contains flags and options for initializing an apiserver
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		genericoptions "k8s.io/apiserver/pkg/server/options"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;		kubeoptions "k8s.io/kubernetes/pkg/kubeapiserver/options"
0000000000000000000000000000000000000000;;		kubeletclient "k8s.io/kubernetes/pkg/kubelet/client"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/master/ports"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// add the kubernetes feature gates
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/features"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultServiceNodePortRange is the default port range for NodePort services.
0000000000000000000000000000000000000000;;	var DefaultServiceNodePortRange = utilnet.PortRange{Base: 30000, Size: 2768}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerRunOptions runs a kubernetes api server.
0000000000000000000000000000000000000000;;	type ServerRunOptions struct {
0000000000000000000000000000000000000000;;		GenericServerRunOptions *genericoptions.ServerRunOptions
0000000000000000000000000000000000000000;;		Etcd                    *genericoptions.EtcdOptions
0000000000000000000000000000000000000000;;		SecureServing           *genericoptions.SecureServingOptions
0000000000000000000000000000000000000000;;		InsecureServing         *kubeoptions.InsecureServingOptions
0000000000000000000000000000000000000000;;		Audit                   *genericoptions.AuditOptions
0000000000000000000000000000000000000000;;		Features                *genericoptions.FeatureOptions
0000000000000000000000000000000000000000;;		Admission               *genericoptions.AdmissionOptions
0000000000000000000000000000000000000000;;		Authentication          *kubeoptions.BuiltInAuthenticationOptions
0000000000000000000000000000000000000000;;		Authorization           *kubeoptions.BuiltInAuthorizationOptions
0000000000000000000000000000000000000000;;		CloudProvider           *kubeoptions.CloudProviderOptions
0000000000000000000000000000000000000000;;		StorageSerialization    *kubeoptions.StorageSerializationOptions
0000000000000000000000000000000000000000;;		APIEnablement           *kubeoptions.APIEnablementOptions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllowPrivileged           bool
0000000000000000000000000000000000000000;;		EnableLogsHandler         bool
0000000000000000000000000000000000000000;;		EventTTL                  time.Duration
0000000000000000000000000000000000000000;;		KubeletConfig             kubeletclient.KubeletClientConfig
0000000000000000000000000000000000000000;;		KubernetesServiceNodePort int
0000000000000000000000000000000000000000;;		MasterCount               int
0000000000000000000000000000000000000000;;		MaxConnectionBytesPerSec  int64
0000000000000000000000000000000000000000;;		ServiceClusterIPRange     net.IPNet // TODO: make this a list
0000000000000000000000000000000000000000;;		ServiceNodePortRange      utilnet.PortRange
0000000000000000000000000000000000000000;;		SSHKeyfile                string
0000000000000000000000000000000000000000;;		SSHUser                   string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProxyClientCertFile string
0000000000000000000000000000000000000000;;		ProxyClientKeyFile  string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EnableAggregatorRouting bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServerRunOptions creates a new ServerRunOptions object with default parameters
0000000000000000000000000000000000000000;;	func NewServerRunOptions() *ServerRunOptions {
0000000000000000000000000000000000000000;;		s := ServerRunOptions{
0000000000000000000000000000000000000000;;			GenericServerRunOptions: genericoptions.NewServerRunOptions(),
0000000000000000000000000000000000000000;;			Etcd:                 genericoptions.NewEtcdOptions(storagebackend.NewDefaultConfig(kubeoptions.DefaultEtcdPathPrefix, api.Scheme, nil)),
0000000000000000000000000000000000000000;;			SecureServing:        kubeoptions.NewSecureServingOptions(),
0000000000000000000000000000000000000000;;			InsecureServing:      kubeoptions.NewInsecureServingOptions(),
0000000000000000000000000000000000000000;;			Audit:                genericoptions.NewAuditOptions(),
0000000000000000000000000000000000000000;;			Features:             genericoptions.NewFeatureOptions(),
0000000000000000000000000000000000000000;;			Admission:            genericoptions.NewAdmissionOptions(),
0000000000000000000000000000000000000000;;			Authentication:       kubeoptions.NewBuiltInAuthenticationOptions().WithAll(),
0000000000000000000000000000000000000000;;			Authorization:        kubeoptions.NewBuiltInAuthorizationOptions(),
0000000000000000000000000000000000000000;;			CloudProvider:        kubeoptions.NewCloudProviderOptions(),
0000000000000000000000000000000000000000;;			StorageSerialization: kubeoptions.NewStorageSerializationOptions(),
0000000000000000000000000000000000000000;;			APIEnablement:        kubeoptions.NewAPIEnablementOptions(),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			EnableLogsHandler: true,
0000000000000000000000000000000000000000;;			EventTTL:          1 * time.Hour,
0000000000000000000000000000000000000000;;			MasterCount:       1,
0000000000000000000000000000000000000000;;			KubeletConfig: kubeletclient.KubeletClientConfig{
0000000000000000000000000000000000000000;;				Port:         ports.KubeletPort,
0000000000000000000000000000000000000000;;				ReadOnlyPort: ports.KubeletReadOnlyPort,
0000000000000000000000000000000000000000;;				PreferredAddressTypes: []string{
0000000000000000000000000000000000000000;;					// --override-hostname
0000000000000000000000000000000000000000;;					string(api.NodeHostName),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// internal, preferring DNS if reported
0000000000000000000000000000000000000000;;					string(api.NodeInternalDNS),
0000000000000000000000000000000000000000;;					string(api.NodeInternalIP),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// external, preferring DNS if reported
0000000000000000000000000000000000000000;;					string(api.NodeExternalDNS),
0000000000000000000000000000000000000000;;					string(api.NodeExternalIP),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				EnableHttps: true,
0000000000000000000000000000000000000000;;				HTTPTimeout: time.Duration(5) * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ServiceNodePortRange: DefaultServiceNodePortRange,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Overwrite the default for storage data format.
0000000000000000000000000000000000000000;;		s.Etcd.DefaultStorageMediaType = "application/vnd.kubernetes.protobuf"
0000000000000000000000000000000000000000;;		// Set the default for admission plugins names
0000000000000000000000000000000000000000;;		s.Admission.PluginNames = []string{"AlwaysAdmit"}
0000000000000000000000000000000000000000;;		return &s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddFlags adds flags for a specific APIServer to the specified FlagSet
0000000000000000000000000000000000000000;;	func (s *ServerRunOptions) AddFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		// Add the generic flags.
0000000000000000000000000000000000000000;;		s.GenericServerRunOptions.AddUniversalFlags(fs)
0000000000000000000000000000000000000000;;		s.Etcd.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.SecureServing.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.SecureServing.AddDeprecatedFlags(fs)
0000000000000000000000000000000000000000;;		s.InsecureServing.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.InsecureServing.AddDeprecatedFlags(fs)
0000000000000000000000000000000000000000;;		s.Audit.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Features.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Authentication.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Authorization.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.CloudProvider.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.StorageSerialization.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.APIEnablement.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Admission.AddFlags(fs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Note: the weird ""+ in below lines seems to be the only way to get gofmt to
0000000000000000000000000000000000000000;;		// arrange these text blocks sensibly. Grrr.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.DurationVar(&s.EventTTL, "event-ttl", s.EventTTL,
0000000000000000000000000000000000000000;;			"Amount of time to retain events.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.BoolVar(&s.AllowPrivileged, "allow-privileged", s.AllowPrivileged,
0000000000000000000000000000000000000000;;			"If true, allow privileged containers.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.BoolVar(&s.EnableLogsHandler, "enable-logs-handler", s.EnableLogsHandler,
0000000000000000000000000000000000000000;;			"If true, install a /logs handler for the apiserver logs.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.SSHUser, "ssh-user", s.SSHUser,
0000000000000000000000000000000000000000;;			"If non-empty, use secure SSH proxy to the nodes, using this user name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.SSHKeyfile, "ssh-keyfile", s.SSHKeyfile,
0000000000000000000000000000000000000000;;			"If non-empty, use secure SSH proxy to the nodes, using this user keyfile")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.Int64Var(&s.MaxConnectionBytesPerSec, "max-connection-bytes-per-sec", s.MaxConnectionBytesPerSec, ""+
0000000000000000000000000000000000000000;;			"If non-zero, throttle each user connection to this number of bytes/sec. "+
0000000000000000000000000000000000000000;;			"Currently only applies to long-running requests.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IntVar(&s.MasterCount, "apiserver-count", s.MasterCount,
0000000000000000000000000000000000000000;;			"The number of apiservers running in the cluster, must be a positive number.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// See #14282 for details on how to test/try this option out.
0000000000000000000000000000000000000000;;		// TODO: remove this comment once this option is tested in CI.
0000000000000000000000000000000000000000;;		fs.IntVar(&s.KubernetesServiceNodePort, "kubernetes-service-node-port", s.KubernetesServiceNodePort, ""+
0000000000000000000000000000000000000000;;			"If non-zero, the Kubernetes master service (which apiserver creates/maintains) will be "+
0000000000000000000000000000000000000000;;			"of type NodePort, using this as the value of the port. If zero, the Kubernetes master "+
0000000000000000000000000000000000000000;;			"service will be of type ClusterIP.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IPNetVar(&s.ServiceClusterIPRange, "service-cluster-ip-range", s.ServiceClusterIPRange, ""+
0000000000000000000000000000000000000000;;			"A CIDR notation IP range from which to assign service cluster IPs. This must not "+
0000000000000000000000000000000000000000;;			"overlap with any IP ranges assigned to nodes for pods.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IPNetVar(&s.ServiceClusterIPRange, "portal-net", s.ServiceClusterIPRange,
0000000000000000000000000000000000000000;;			"DEPRECATED: see --service-cluster-ip-range instead.")
0000000000000000000000000000000000000000;;		fs.MarkDeprecated("portal-net", "see --service-cluster-ip-range instead")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.Var(&s.ServiceNodePortRange, "service-node-port-range", ""+
0000000000000000000000000000000000000000;;			"A port range to reserve for services with NodePort visibility. "+
0000000000000000000000000000000000000000;;			"Example: '30000-32767'. Inclusive at both ends of the range.")
0000000000000000000000000000000000000000;;		fs.Var(&s.ServiceNodePortRange, "service-node-ports", "DEPRECATED: see --service-node-port-range instead")
0000000000000000000000000000000000000000;;		fs.MarkDeprecated("service-node-ports", "see --service-node-port-range instead")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kubelet related flags:
0000000000000000000000000000000000000000;;		fs.BoolVar(&s.KubeletConfig.EnableHttps, "kubelet-https", s.KubeletConfig.EnableHttps,
0000000000000000000000000000000000000000;;			"Use https for kubelet connections.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringSliceVar(&s.KubeletConfig.PreferredAddressTypes, "kubelet-preferred-address-types", s.KubeletConfig.PreferredAddressTypes,
0000000000000000000000000000000000000000;;			"List of the preferred NodeAddressTypes to use for kubelet connections.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.UintVar(&s.KubeletConfig.Port, "kubelet-port", s.KubeletConfig.Port,
0000000000000000000000000000000000000000;;			"DEPRECATED: kubelet port.")
0000000000000000000000000000000000000000;;		fs.MarkDeprecated("kubelet-port", "kubelet-port is deprecated and will be removed.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.UintVar(&s.KubeletConfig.ReadOnlyPort, "kubelet-read-only-port", s.KubeletConfig.ReadOnlyPort,
0000000000000000000000000000000000000000;;			"DEPRECATED: kubelet port.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.DurationVar(&s.KubeletConfig.HTTPTimeout, "kubelet-timeout", s.KubeletConfig.HTTPTimeout,
0000000000000000000000000000000000000000;;			"Timeout for kubelet operations.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.KubeletConfig.CertFile, "kubelet-client-certificate", s.KubeletConfig.CertFile,
0000000000000000000000000000000000000000;;			"Path to a client cert file for TLS.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.KubeletConfig.KeyFile, "kubelet-client-key", s.KubeletConfig.KeyFile,
0000000000000000000000000000000000000000;;			"Path to a client key file for TLS.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.KubeletConfig.CAFile, "kubelet-certificate-authority", s.KubeletConfig.CAFile,
0000000000000000000000000000000000000000;;			"Path to a cert file for the certificate authority.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: delete this flag as soon as we identify and fix all clients that send malformed updates, like #14126.
0000000000000000000000000000000000000000;;		fs.BoolVar(&validation.RepairMalformedUpdates, "repair-malformed-updates", validation.RepairMalformedUpdates, ""+
0000000000000000000000000000000000000000;;			"If true, server will do its best to fix the update request to pass the validation, "+
0000000000000000000000000000000000000000;;			"e.g., setting empty UID in update request to its existing value. This flag can be turned off "+
0000000000000000000000000000000000000000;;			"after we fix all the clients that send malformed updates.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.ProxyClientCertFile, "proxy-client-cert-file", s.ProxyClientCertFile, ""+
0000000000000000000000000000000000000000;;			"Client certificate used to prove the identity of the aggregator or kube-apiserver "+
0000000000000000000000000000000000000000;;			"when it must call out during a request. This includes proxying requests to a user "+
0000000000000000000000000000000000000000;;			"api-server and calling out to webhook admission plugins. It is expected that this "+
0000000000000000000000000000000000000000;;			"cert includes a signature from the CA in the --requestheader-client-ca-file flag. "+
0000000000000000000000000000000000000000;;			"That CA is published in the 'extension-apiserver-authentication' configmap in "+
0000000000000000000000000000000000000000;;			"the kube-system namespace. Components recieving calls from kube-aggregator should "+
0000000000000000000000000000000000000000;;			"use that CA to perform their half of the mutual TLS verification.")
0000000000000000000000000000000000000000;;		fs.StringVar(&s.ProxyClientKeyFile, "proxy-client-key-file", s.ProxyClientKeyFile, ""+
0000000000000000000000000000000000000000;;			"Private key for the client certificate used to prove the identity of the aggregator or kube-apiserver "+
0000000000000000000000000000000000000000;;			"when it must call out during a request. This includes proxying requests to a user "+
0000000000000000000000000000000000000000;;			"api-server and calling out to webhook admission plugins.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.BoolVar(&s.EnableAggregatorRouting, "enable-aggregator-routing", s.EnableAggregatorRouting,
0000000000000000000000000000000000000000;;			"Turns on aggregator routing requests to endoints IP rather than cluster IP.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
