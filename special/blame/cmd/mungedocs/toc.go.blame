0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b619dc23f9a3fa01173352da429939e623eab109;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const tocMungeTag = "GENERATED_TOC"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var r = regexp.MustCompile("[^A-Za-z0-9-]")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// inserts/updates a table of contents in markdown file.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// First, builds a ToC.
0000000000000000000000000000000000000000;;	// Then, finds the magic macro block tags and replaces anything between those with
0000000000000000000000000000000000000000;;	// the ToC, thereby updating any previously inserted ToC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODO(erictune): put this in own package with tests
0000000000000000000000000000000000000000;;	func updateTOC(filePath string, mlines mungeLines) (mungeLines, error) {
0000000000000000000000000000000000000000;;		toc := buildTOC(mlines)
0000000000000000000000000000000000000000;;		updatedMarkdown, err := updateMacroBlock(mlines, tocMungeTag, toc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mlines, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return updatedMarkdown, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// builds table of contents for markdown file
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// First scans for all section headers (lines that begin with "#" but not within code quotes)
0000000000000000000000000000000000000000;;	// and builds a table of contents from those.  Assumes bookmarks for those will be
0000000000000000000000000000000000000000;;	// like #each-word-in-heading-in-lowercases-with-dashes-instead-of-spaces.
0000000000000000000000000000000000000000;;	// builds the ToC.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func buildTOC(mlines mungeLines) mungeLines {
0000000000000000000000000000000000000000;;		var out mungeLines
0000000000000000000000000000000000000000;;		bookmarks := map[string]int{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, mline := range mlines {
0000000000000000000000000000000000000000;;			if mline.preformatted || !mline.header {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Add a blank line after the munge start tag
0000000000000000000000000000000000000000;;			if len(out) == 0 {
0000000000000000000000000000000000000000;;				out = append(out, blankMungeLine)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			line := mline.data
0000000000000000000000000000000000000000;;			noSharps := strings.TrimLeft(line, "#")
0000000000000000000000000000000000000000;;			numSharps := len(line) - len(noSharps)
0000000000000000000000000000000000000000;;			heading := strings.Trim(noSharps, " \n")
0000000000000000000000000000000000000000;;			if numSharps > 0 {
0000000000000000000000000000000000000000;;				indent := strings.Repeat("  ", numSharps-1)
0000000000000000000000000000000000000000;;				bookmark := strings.Replace(strings.ToLower(heading), " ", "-", -1)
0000000000000000000000000000000000000000;;				// remove symbols (except for -) in bookmarks
0000000000000000000000000000000000000000;;				bookmark = r.ReplaceAllString(bookmark, "")
0000000000000000000000000000000000000000;;				// Incremental counter for duplicate bookmarks
0000000000000000000000000000000000000000;;				next := bookmarks[bookmark]
0000000000000000000000000000000000000000;;				bookmarks[bookmark] = next + 1
0000000000000000000000000000000000000000;;				if next > 0 {
0000000000000000000000000000000000000000;;					bookmark = fmt.Sprintf("%s-%d", bookmark, next)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				tocLine := fmt.Sprintf("%s- [%s](#%s)", indent, heading, bookmark)
0000000000000000000000000000000000000000;;				out = append(out, newMungeLine(tocLine))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Add a blank line before the munge end tag
0000000000000000000000000000000000000000;;		if len(out) != 0 {
0000000000000000000000000000000000000000;;			out = append(out, blankMungeLine)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
