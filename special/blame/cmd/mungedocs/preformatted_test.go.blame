0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
28a4376f4f7b75cb97db3c43675b12dbb86cc4e6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPreformatted(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			in       string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", ""},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"```\nbob\n```",
0000000000000000000000000000000000000000;;				"\n```\nbob\n```\n\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"```\nbob\n```\n```\nnotbob\n```\n",
0000000000000000000000000000000000000000;;				"\n```\nbob\n```\n\n```\nnotbob\n```\n\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"```bob```\n",
0000000000000000000000000000000000000000;;				"```bob```\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"    ```\n    bob\n    ```",
0000000000000000000000000000000000000000;;				"\n    ```\n    bob\n    ```\n\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			in := getMungeLines(c.in)
0000000000000000000000000000000000000000;;			expected := getMungeLines(c.expected)
0000000000000000000000000000000000000000;;			actual, err := updatePreformatted("filename.md", in)
0000000000000000000000000000000000000000;;			assert.NoError(t, err)
0000000000000000000000000000000000000000;;			if !actual.Equal(expected) {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected %q got %q", i, c.expected, actual.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPreformattedImbalance(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			in string
0000000000000000000000000000000000000000;;			ok bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", true},
0000000000000000000000000000000000000000;;			{"```\nin\n```", true},
0000000000000000000000000000000000000000;;			{"```\nin\n```\nout", true},
0000000000000000000000000000000000000000;;			{"```", false},
0000000000000000000000000000000000000000;;			{"```\nin\n```\nout\n```", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			in := getMungeLines(c.in)
0000000000000000000000000000000000000000;;			out, err := checkPreformatBalance("filename.md", in)
0000000000000000000000000000000000000000;;			if err != nil && c.ok {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected success", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && !c.ok {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected failure", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Even in case of misformat, return all the text,
0000000000000000000000000000000000000000;;			// so that the user's work is not lost.
0000000000000000000000000000000000000000;;			if !equalMungeLines(out, in) {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected munged text to be identical to input text", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func equalMungeLines(a, b mungeLines) bool {
0000000000000000000000000000000000000000;;		if len(a) != len(b) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range a {
0000000000000000000000000000000000000000;;			if a[i] != b[i] {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
