0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b619dc23f9a3fa01173352da429939e623eab109;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test_buildTOC(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			in       string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", ""},
0000000000000000000000000000000000000000;;			{"Lorem ipsum\ndolor sit amet\n", ""},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"# Title\nLorem ipsum \n## Section Heading\ndolor sit amet\n",
0000000000000000000000000000000000000000;;				"\n- [Title](#title)\n  - [Section Heading](#section-heading)\n\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"# Title\nLorem ipsum \n## Section Heading\ndolor sit amet\n```bash\n#!/bin/sh\n```",
0000000000000000000000000000000000000000;;				"\n- [Title](#title)\n  - [Section Heading](#section-heading)\n\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"# Title\nLorem ipsum \n## Section Heading\n### Ok, why doesn't this work? ...add 4 *more* `symbols`!\ndolor sit amet\n",
0000000000000000000000000000000000000000;;				"\n- [Title](#title)\n  - [Section Heading](#section-heading)\n    - [Ok, why doesn't this work? ...add 4 *more* `symbols`!](#ok-why-doesnt-this-work-add-4-more-symbols)\n\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			in := getMungeLines(c.in)
0000000000000000000000000000000000000000;;			expected := getMungeLines(c.expected)
0000000000000000000000000000000000000000;;			actual := buildTOC(in)
0000000000000000000000000000000000000000;;			if !expected.Equal(actual) {
0000000000000000000000000000000000000000;;				t.Errorf("Case[%d] Expected TOC '%v' but got '%v'", i, expected.String(), actual.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test_updateTOC(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			in       string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", ""},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"Lorem ipsum\ndolor sit amet\n",
0000000000000000000000000000000000000000;;				"Lorem ipsum\ndolor sit amet\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"# Title\nLorem ipsum \n**table of contents**\n<!-- BEGIN MUNGE: GENERATED_TOC -->\nold cruft\n<!-- END MUNGE: GENERATED_TOC -->\n## Section Heading\ndolor sit amet\n",
0000000000000000000000000000000000000000;;				"# Title\nLorem ipsum \n**table of contents**\n<!-- BEGIN MUNGE: GENERATED_TOC -->\n\n- [Title](#title)\n  - [Section Heading](#section-heading)\n\n<!-- END MUNGE: GENERATED_TOC -->\n## Section Heading\ndolor sit amet\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			in := getMungeLines(c.in)
0000000000000000000000000000000000000000;;			expected := getMungeLines(c.expected)
0000000000000000000000000000000000000000;;			actual, err := updateTOC("filename.md", in)
0000000000000000000000000000000000000000;;			assert.NoError(t, err)
0000000000000000000000000000000000000000;;			if !expected.Equal(actual) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected TOC '%v' but got '%v'", expected.String(), actual.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
