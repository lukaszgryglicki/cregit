0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
5a167d4f423b1b6c17f26a481e462c4e673a640b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const analyticsMungeTag = "GENERATED_ANALYTICS"
0000000000000000000000000000000000000000;;	const analyticsLinePrefix = "[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func updateAnalytics(fileName string, mlines mungeLines) (mungeLines, error) {
0000000000000000000000000000000000000000;;		var out mungeLines
0000000000000000000000000000000000000000;;		fileName, err := makeRepoRelative(fileName, fileName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mlines, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		link := fmt.Sprintf(analyticsLinePrefix+"%s?pixel)]()", fileName)
0000000000000000000000000000000000000000;;		insertLines := getMungeLines(link)
0000000000000000000000000000000000000000;;		mlines, err = removeMacroBlock(analyticsMungeTag, mlines)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mlines, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Remove floating analytics links not surrounded by the munge tags.
0000000000000000000000000000000000000000;;		for _, mline := range mlines {
0000000000000000000000000000000000000000;;			if mline.preformatted || mline.header || mline.beginTag || mline.endTag {
0000000000000000000000000000000000000000;;				out = append(out, mline)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strings.HasPrefix(mline.data, analyticsLinePrefix) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out = append(out, mline)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out = appendMacroBlock(out, analyticsMungeTag)
0000000000000000000000000000000000000000;;		out, err = updateMacroBlock(out, analyticsMungeTag, insertLines)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return mlines, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out, nil
0000000000000000000000000000000000000000;;	}
