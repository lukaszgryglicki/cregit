0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
1c71eacf5714484877a200c41dd73900f5e67cb0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var headerRegex = regexp.MustCompile(`^(#+)\s*(.*)$`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fixHeaderLine(mlines mungeLines, newlines mungeLines, linenum int) mungeLines {
0000000000000000000000000000000000000000;;		var out mungeLines
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mline := mlines[linenum]
0000000000000000000000000000000000000000;;		line := mlines[linenum].data
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matches := headerRegex.FindStringSubmatch(line)
0000000000000000000000000000000000000000;;		if matches == nil {
0000000000000000000000000000000000000000;;			out = append(out, mline)
0000000000000000000000000000000000000000;;			return out
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// There must be a blank line before the # (unless first line in file)
0000000000000000000000000000000000000000;;		if linenum != 0 {
0000000000000000000000000000000000000000;;			newlen := len(newlines)
0000000000000000000000000000000000000000;;			if newlines[newlen-1].data != "" {
0000000000000000000000000000000000000000;;				out = append(out, blankMungeLine)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// There must be a space AFTER the ##'s
0000000000000000000000000000000000000000;;		newline := fmt.Sprintf("%s %s", matches[1], matches[2])
0000000000000000000000000000000000000000;;		newmline := newMungeLine(newline)
0000000000000000000000000000000000000000;;		out = append(out, newmline)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The next line needs to be a blank line (unless last line in file)
0000000000000000000000000000000000000000;;		if len(mlines) > linenum+1 && mlines[linenum+1].data != "" {
0000000000000000000000000000000000000000;;			out = append(out, blankMungeLine)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header lines need whitespace around them and after the #s.
0000000000000000000000000000000000000000;;	func updateHeaderLines(filePath string, mlines mungeLines) (mungeLines, error) {
0000000000000000000000000000000000000000;;		var out mungeLines
0000000000000000000000000000000000000000;;		for i, mline := range mlines {
0000000000000000000000000000000000000000;;			if mline.preformatted {
0000000000000000000000000000000000000000;;				out = append(out, mline)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !mline.header {
0000000000000000000000000000000000000000;;				out = append(out, mline)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			newLines := fixHeaderLine(mlines, out, i)
0000000000000000000000000000000000000000;;			out = append(out, newLines...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out, nil
0000000000000000000000000000000000000000;;	}
