0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
9aca7814aad4c10b4a97754c1c64a0df124a8ccc;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Blocks of ``` need to have blank lines on both sides or they don't look
0000000000000000000000000000000000000000;;	// right in HTML.
0000000000000000000000000000000000000000;;	func updatePreformatted(filePath string, mlines mungeLines) (mungeLines, error) {
0000000000000000000000000000000000000000;;		var out mungeLines
0000000000000000000000000000000000000000;;		inpreformat := false
0000000000000000000000000000000000000000;;		for i, mline := range mlines {
0000000000000000000000000000000000000000;;			if !inpreformat && mline.preformatted {
0000000000000000000000000000000000000000;;				if i == 0 || out[len(out)-1].data != "" {
0000000000000000000000000000000000000000;;					out = append(out, blankMungeLine)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// start of a preformat block
0000000000000000000000000000000000000000;;				inpreformat = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out = append(out, mline)
0000000000000000000000000000000000000000;;			if inpreformat && !mline.preformatted {
0000000000000000000000000000000000000000;;				if i >= len(mlines)-2 || mlines[i+1].data != "" {
0000000000000000000000000000000000000000;;					out = append(out, blankMungeLine)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				inpreformat = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If the file ends on a preformatted line, there must have been an imbalance.
0000000000000000000000000000000000000000;;	func checkPreformatBalance(filePath string, mlines mungeLines) (mungeLines, error) {
0000000000000000000000000000000000000000;;		if len(mlines) > 0 && mlines[len(mlines)-1].preformatted {
0000000000000000000000000000000000000000;;			return mlines, fmt.Errorf("unbalanced triple backtick delimiters")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return mlines, nil
0000000000000000000000000000000000000000;;	}
