0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
28a4376f4f7b75cb97db3c43675b12dbb86cc4e6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = fmt.Printf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBadLinks(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			in string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"[NOTREADME](https://github.com/kubernetes/kubernetes/tree/master/NOTREADME.md)"},
0000000000000000000000000000000000000000;;			{"[NOTREADME](https://github.com/kubernetes/kubernetes/tree/master/docs/NOTREADME.md)"},
0000000000000000000000000000000000000000;;			{"[NOTREADME](../NOTREADME.md)"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			in := getMungeLines(c.in)
0000000000000000000000000000000000000000;;			_, err := updateLinks("filename.md", in)
0000000000000000000000000000000000000000;;			assert.Error(t, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestGoodLinks(t *testing.T) {
0000000000000000000000000000000000000000;;		var cases = []struct {
0000000000000000000000000000000000000000;;			in       string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", ""},
0000000000000000000000000000000000000000;;			{"[README](https://lwn.net)",
0000000000000000000000000000000000000000;;				"[README](https://lwn.net)"},
0000000000000000000000000000000000000000;;			// _ to -
0000000000000000000000000000000000000000;;			{"[README](https://github.com/kubernetes/kubernetes/tree/master/cmd/mungedocs/testdata/test_dashes.md)",
0000000000000000000000000000000000000000;;				"[README](../../cmd/mungedocs/testdata/test-dashes.md)"},
0000000000000000000000000000000000000000;;			// - to _
0000000000000000000000000000000000000000;;			{"[README](../../cmd/mungedocs/testdata/test-underscores.md)",
0000000000000000000000000000000000000000;;				"[README](../../cmd/mungedocs/testdata/test_underscores.md)"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Does this even make sense?  i dunno
0000000000000000000000000000000000000000;;			{"[README](/docs/README.md)",
0000000000000000000000000000000000000000;;				"[README](https://github.com/docs/README.md)"},
0000000000000000000000000000000000000000;;			{"[README](/kubernetes/kubernetes/tree/master/cmd/mungedocs/testdata/README.md)",
0000000000000000000000000000000000000000;;				"[README](../../cmd/mungedocs/testdata/README.md)"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			in := getMungeLines(c.in)
0000000000000000000000000000000000000000;;			expected := getMungeLines(c.expected)
0000000000000000000000000000000000000000;;			actual, err := updateLinks("filename.md", in)
0000000000000000000000000000000000000000;;			assert.NoError(t, err)
0000000000000000000000000000000000000000;;			if !actual.Equal(expected) {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected %q got %q", i, c.expected, actual.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
