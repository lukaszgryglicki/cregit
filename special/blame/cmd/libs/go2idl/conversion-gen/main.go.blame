0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1e8bf9d1df546495621c53c64e52ebc67c891610;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// conversion-gen is a tool for auto-generating Conversion functions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Given a list of input directories, it will scan for "peer" packages and
0000000000000000000000000000000000000000;;	// generate functions that efficiently convert between same-name types in each
0000000000000000000000000000000000000000;;	// package.  For any pair of types that has a
0000000000000000000000000000000000000000;;	//     `Convert_<pkg1>_<type>_To_<pkg2>_<Type()`
0000000000000000000000000000000000000000;;	// function (and its reciprocal), it will simply call that.  use standard value
0000000000000000000000000000000000000000;;	// assignment whenever possible.  The resulting file will be stored in the same
0000000000000000000000000000000000000000;;	// directory as the processed source package.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generation is governed by comment tags in the source.  Any package may
0000000000000000000000000000000000000000;;	// request Conversion generation by including a comment in the file-comments of
0000000000000000000000000000000000000000;;	// one file, of the form:
0000000000000000000000000000000000000000;;	//   // +k8s:conversion-gen=<import-path-of-peer-package>
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When generating for a package, individual types or fields of structs may opt
0000000000000000000000000000000000000000;;	// out of Conversion generation by specifying a comment on the of the form:
0000000000000000000000000000000000000000;;	//   // +k8s:conversion-gen=false
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/args"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/libs/go2idl/conversion-gen/generators"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		arguments := args.Default()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Override defaults.
0000000000000000000000000000000000000000;;		arguments.OutputFileBaseName = "conversion_generated"
0000000000000000000000000000000000000000;;		arguments.GoHeaderFilePath = filepath.Join(args.DefaultSourceTree(), "k8s.io/kubernetes/hack/boilerplate/boilerplate.go.txt")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Custom args.
0000000000000000000000000000000000000000;;		customArgs := &generators.CustomArgs{
0000000000000000000000000000000000000000;;			ExtraPeerDirs: []string{
0000000000000000000000000000000000000000;;				"k8s.io/kubernetes/pkg/api",
0000000000000000000000000000000000000000;;				"k8s.io/api/core/v1",
0000000000000000000000000000000000000000;;				"k8s.io/apimachinery/pkg/apis/meta/v1",
0000000000000000000000000000000000000000;;				"k8s.io/apimachinery/pkg/conversion",
0000000000000000000000000000000000000000;;				"k8s.io/apimachinery/pkg/runtime",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			SkipUnsafe: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pflag.CommandLine.StringSliceVar(&customArgs.ExtraPeerDirs, "extra-peer-dirs", customArgs.ExtraPeerDirs,
0000000000000000000000000000000000000000;;			"Comma-separated list of import paths which are considered, after tag-specified peers, for conversions.")
0000000000000000000000000000000000000000;;		pflag.CommandLine.BoolVar(&customArgs.SkipUnsafe, "skip-unsafe", customArgs.SkipUnsafe,
0000000000000000000000000000000000000000;;			"If true, will not generate code using unsafe pointer conversions; resulting code may be slower.")
0000000000000000000000000000000000000000;;		arguments.CustomArgs = customArgs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run it.
0000000000000000000000000000000000000000;;		if err := arguments.Execute(
0000000000000000000000000000000000000000;;			generators.NameSystems(),
0000000000000000000000000000000000000000;;			generators.DefaultNameSystem(),
0000000000000000000000000000000000000000;;			generators.Packages,
0000000000000000000000000000000000000000;;		); err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(2).Info("Completed successfully.")
0000000000000000000000000000000000000000;;	}
