0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
521172028719926b2a4213f5e74cb2966c19e8ba;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToGroupVersion turns "group/version" string into a GroupVersion struct. It reports error
0000000000000000000000000000000000000000;;	// if it cannot parse the string.
0000000000000000000000000000000000000000;;	func ToGroupVersion(gv string) (GroupVersion, error) {
0000000000000000000000000000000000000000;;		// this can be the internal version for the legacy kube types
0000000000000000000000000000000000000000;;		// TODO once we've cleared the last uses as strings, this special case should be removed.
0000000000000000000000000000000000000000;;		if (len(gv) == 0) || (gv == "/") {
0000000000000000000000000000000000000000;;			return GroupVersion{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch strings.Count(gv, "/") {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return GroupVersion{Group(gv), ""}, nil
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			i := strings.Index(gv, "/")
0000000000000000000000000000000000000000;;			return GroupVersion{Group(gv[:i]), Version(gv[i+1:])}, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return GroupVersion{}, fmt.Errorf("unexpected GroupVersion string: %v", gv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sortableSliceOfVersions []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a sortableSliceOfVersions) Len() int      { return len(a) }
0000000000000000000000000000000000000000;;	func (a sortableSliceOfVersions) Swap(i, j int) { a[i], a[j] = a[j], a[i] }
0000000000000000000000000000000000000000;;	func (a sortableSliceOfVersions) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		vi, vj := strings.TrimLeft(a[i], "v"), strings.TrimLeft(a[j], "v")
0000000000000000000000000000000000000000;;		major := regexp.MustCompile("^[0-9]+")
0000000000000000000000000000000000000000;;		viMajor, vjMajor := major.FindString(vi), major.FindString(vj)
0000000000000000000000000000000000000000;;		viRemaining, vjRemaining := strings.TrimLeft(vi, viMajor), strings.TrimLeft(vj, vjMajor)
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case len(viRemaining) == 0 && len(vjRemaining) == 0:
0000000000000000000000000000000000000000;;			return viMajor < vjMajor
0000000000000000000000000000000000000000;;		case len(viRemaining) == 0 && len(vjRemaining) != 0:
0000000000000000000000000000000000000000;;			// stable version is greater than unstable version
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		case len(viRemaining) != 0 && len(vjRemaining) == 0:
0000000000000000000000000000000000000000;;			// stable version is greater than unstable version
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// neither are stable versions
0000000000000000000000000000000000000000;;		if viMajor != vjMajor {
0000000000000000000000000000000000000000;;			return viMajor < vjMajor
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// assuming at most we have one alpha or one beta version, so if vi contains "alpha", it's the lesser one.
0000000000000000000000000000000000000000;;		return strings.Contains(viRemaining, "alpha")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Determine the default version among versions. If a user calls a group client
0000000000000000000000000000000000000000;;	// without specifying the version (e.g., c.Core(), instead of c.CoreV1()), the
0000000000000000000000000000000000000000;;	// default version will be returned.
0000000000000000000000000000000000000000;;	func defaultVersion(versions []Version) Version {
0000000000000000000000000000000000000000;;		var versionStrings []string
0000000000000000000000000000000000000000;;		for _, version := range versions {
0000000000000000000000000000000000000000;;			versionStrings = append(versionStrings, string(version))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(sortableSliceOfVersions(versionStrings))
0000000000000000000000000000000000000000;;		return Version(versionStrings[len(versionStrings)-1])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToGroupVersionPackages is a helper function used by generators for groups.
0000000000000000000000000000000000000000;;	func ToGroupVersionPackages(groups []GroupVersions) []GroupVersionPackage {
0000000000000000000000000000000000000000;;		var groupVersionPackages []GroupVersionPackage
0000000000000000000000000000000000000000;;		for _, group := range groups {
0000000000000000000000000000000000000000;;			defaultVersion := defaultVersion(group.Versions)
0000000000000000000000000000000000000000;;			for _, version := range group.Versions {
0000000000000000000000000000000000000000;;				groupVersionPackages = append(groupVersionPackages, GroupVersionPackage{
0000000000000000000000000000000000000000;;					Group:            Group(namer.IC(group.Group.NonEmpty())),
0000000000000000000000000000000000000000;;					Version:          Version(namer.IC(version.String())),
0000000000000000000000000000000000000000;;					GroupVersion:     namer.IC(group.Group.NonEmpty()) + namer.IC(version.String()),
0000000000000000000000000000000000000000;;					PackageName:      strings.ToLower(group.Group.NonEmpty() + version.NonEmpty()),
0000000000000000000000000000000000000000;;					IsDefaultVersion: version == defaultVersion && version != "",
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return groupVersionPackages
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ToGroupInstallPackages(groups []GroupVersions) []GroupInstallPackage {
0000000000000000000000000000000000000000;;		var groupInstallPackages []GroupInstallPackage
0000000000000000000000000000000000000000;;		for _, group := range groups {
0000000000000000000000000000000000000000;;			groupInstallPackages = append(groupInstallPackages, GroupInstallPackage{
0000000000000000000000000000000000000000;;				Group:              Group(namer.IC(group.Group.NonEmpty())),
0000000000000000000000000000000000000000;;				InstallPackageName: strings.ToLower(group.Group.NonEmpty()),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return groupInstallPackages
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NormalizeGroupVersion calls normalizes the GroupVersion.
0000000000000000000000000000000000000000;;	//func NormalizeGroupVersion(gv GroupVersion) GroupVersion {
0000000000000000000000000000000000000000;;	//	return GroupVersion{Group: gv.Group.NonEmpty(), Version: gv.Version, NonEmptyVersion: normalization.Version(gv.Version)}
0000000000000000000000000000000000000000;;	//}
