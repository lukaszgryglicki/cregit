0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2e39416015872cdb7fdac117be5185050ce529e9;cmd/libs/go2idl/client-gen/generators/normalization/normalization.go[cmd/libs/go2idl/client-gen/generators/normalization/normalization.go][cmd/libs/go2idl/client-gen/types/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Version string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v Version) String() string {
0000000000000000000000000000000000000000;;		return string(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v Version) NonEmpty() string {
0000000000000000000000000000000000000000;;		if v == "" {
0000000000000000000000000000000000000000;;			return "internalVersion"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Group string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g Group) String() string {
0000000000000000000000000000000000000000;;		return string(g)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g Group) NonEmpty() string {
0000000000000000000000000000000000000000;;		if g == "api" {
0000000000000000000000000000000000000000;;			return "core"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(g)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GroupVersion struct {
0000000000000000000000000000000000000000;;		Group   Group
0000000000000000000000000000000000000000;;		Version Version
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GroupVersions struct {
0000000000000000000000000000000000000000;;		Group    Group
0000000000000000000000000000000000000000;;		Versions []Version
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupVersionPackage contains group name, version name, and the package name client-gen will generate for this group version.
0000000000000000000000000000000000000000;;	type GroupVersionPackage struct {
0000000000000000000000000000000000000000;;		Group   Group
0000000000000000000000000000000000000000;;		Version Version
0000000000000000000000000000000000000000;;		// If a user calls a group client without specifying the version (e.g.,
0000000000000000000000000000000000000000;;		// c.Core(), instead of c.CoreV1()), the default version will be returned.
0000000000000000000000000000000000000000;;		IsDefaultVersion bool
0000000000000000000000000000000000000000;;		GroupVersion     string
0000000000000000000000000000000000000000;;		PackageName      string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GroupInstallPackage struct {
0000000000000000000000000000000000000000;;		Group              Group
0000000000000000000000000000000000000000;;		InstallPackageName string
0000000000000000000000000000000000000000;;	}
