0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1c6ce88b7675fdc6f7985c6177176d2139474487;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package test_internalclientset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ClientSetRateLimiterTest(t *testing.T) {
0000000000000000000000000000000000000000;;		rateLimiter := flowcontrol.NewTokenBucketRateLimiter(1.0, 10)
0000000000000000000000000000000000000000;;		config := restclient.Config{
0000000000000000000000000000000000000000;;			RateLimiter: rateLimiter,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := restclient.SetKubernetesDefaults(&config); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("setting defaults failed for %#v: %v", config, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clientSet, err := NewForConfig(&config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("creating clientset for config %v failed: %v", config, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testGroupThrottler := clientSet.Testgroup().RESTClient().GetRateLimiter()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if rateLimiter != testGroupThrottler {
0000000000000000000000000000000000000000;;			t.Errorf("Clients in client set should use rateLimiter passed in config:\noriginal: %v\ntestGroup: %v", rateLimiter, testGroupThrottler)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
