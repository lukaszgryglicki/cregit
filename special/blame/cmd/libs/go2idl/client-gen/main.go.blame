0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
09be7eecf899805a7bc59a2119b475307567b5d8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// client-gen makes the individual typed clients using go2idl.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/args"
0000000000000000000000000000000000000000;;		clientgenargs "k8s.io/kubernetes/cmd/libs/go2idl/client-gen/args"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/generators"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/types"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		flag "github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		test          = flag.BoolP("test", "t", false, "set this flag to generate the client code for the testdata")
0000000000000000000000000000000000000000;;		inputVersions = flag.StringSlice("input", []string{
0000000000000000000000000000000000000000;;			"api/",
0000000000000000000000000000000000000000;;			"admissionregistration/",
0000000000000000000000000000000000000000;;			"authentication/",
0000000000000000000000000000000000000000;;			"authorization/",
0000000000000000000000000000000000000000;;			"autoscaling/",
0000000000000000000000000000000000000000;;			"batch/",
0000000000000000000000000000000000000000;;			"certificates/",
0000000000000000000000000000000000000000;;			"extensions/",
0000000000000000000000000000000000000000;;			"rbac/",
0000000000000000000000000000000000000000;;			"storage/",
0000000000000000000000000000000000000000;;			"apps/",
0000000000000000000000000000000000000000;;			"policy/",
0000000000000000000000000000000000000000;;			"settings/",
0000000000000000000000000000000000000000;;			"networking/",
0000000000000000000000000000000000000000;;		}, "group/versions that client-gen will generate clients for. At most one version per group is allowed. Specified in the format \"group1/version1,group2/version2...\".")
0000000000000000000000000000000000000000;;		includedTypesOverrides = flag.StringSlice("included-types-overrides", []string{}, "list of group/version/type for which client should be generated. By default, client is generated for all types which have genclient=true in types.go. This overrides that. For each groupVersion in this list, only the types mentioned here will be included. The default check of genclient=true will be used for other group versions.")
0000000000000000000000000000000000000000;;		basePath               = flag.String("input-base", "k8s.io/kubernetes/pkg/apis", "base path to look for the api group.")
0000000000000000000000000000000000000000;;		clientsetName          = flag.StringP("clientset-name", "n", "internalclientset", "the name of the generated clientset package.")
0000000000000000000000000000000000000000;;		clientsetAPIPath       = flag.StringP("clientset-api-path", "", "", "the value of default API path.")
0000000000000000000000000000000000000000;;		clientsetPath          = flag.String("clientset-path", "k8s.io/kubernetes/pkg/client/clientset_generated/", "the generated clientset will be output to <clientset-path>/<clientset-name>.")
0000000000000000000000000000000000000000;;		clientsetOnly          = flag.Bool("clientset-only", false, "when set, client-gen only generates the clientset shell, without generating the individual typed clients")
0000000000000000000000000000000000000000;;		fakeClient             = flag.Bool("fake-clientset", true, "when set, client-gen will generate the fake clientset that can be used in tests")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func versionToPath(gvPath string, group string, version string) (path string) {
0000000000000000000000000000000000000000;;		// special case for the core group
0000000000000000000000000000000000000000;;		if group == "api" {
0000000000000000000000000000000000000000;;			path = filepath.Join(*basePath, "../api", version)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			path = filepath.Join(*basePath, gvPath, group, version)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseGroupVersionType(gvtString string) (gvString string, typeStr string, err error) {
0000000000000000000000000000000000000000;;		invalidFormatErr := fmt.Errorf("invalid value: %s, should be of the form group/version/type", gvtString)
0000000000000000000000000000000000000000;;		subs := strings.Split(gvtString, "/")
0000000000000000000000000000000000000000;;		length := len(subs)
0000000000000000000000000000000000000000;;		switch length {
0000000000000000000000000000000000000000;;		case 2:
0000000000000000000000000000000000000000;;			// gvtString of the form group/type, e.g. api/Service,extensions/ReplicaSet
0000000000000000000000000000000000000000;;			return subs[0] + "/", subs[1], nil
0000000000000000000000000000000000000000;;		case 3:
0000000000000000000000000000000000000000;;			return strings.Join(subs[:length-1], "/"), subs[length-1], nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", "", invalidFormatErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parsePathGroupVersion(pgvString string) (gvPath string, gvString string) {
0000000000000000000000000000000000000000;;		subs := strings.Split(pgvString, "/")
0000000000000000000000000000000000000000;;		length := len(subs)
0000000000000000000000000000000000000000;;		switch length {
0000000000000000000000000000000000000000;;		case 0, 1, 2:
0000000000000000000000000000000000000000;;			return "", pgvString
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return strings.Join(subs[:length-2], "/"), strings.Join(subs[length-2:], "/")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseInputVersions() (paths []string, groups []types.GroupVersions, gvToPath map[types.GroupVersion]string, err error) {
0000000000000000000000000000000000000000;;		var seenGroups = make(map[types.Group]*types.GroupVersions)
0000000000000000000000000000000000000000;;		gvToPath = make(map[types.GroupVersion]string)
0000000000000000000000000000000000000000;;		for _, input := range *inputVersions {
0000000000000000000000000000000000000000;;			gvPath, gvString := parsePathGroupVersion(input)
0000000000000000000000000000000000000000;;			gv, err := types.ToGroupVersion(gvString)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, nil, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if group, ok := seenGroups[gv.Group]; ok {
0000000000000000000000000000000000000000;;				(*seenGroups[gv.Group]).Versions = append(group.Versions, gv.Version)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				seenGroups[gv.Group] = &types.GroupVersions{
0000000000000000000000000000000000000000;;					Group:    gv.Group,
0000000000000000000000000000000000000000;;					Versions: []types.Version{gv.Version},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			path := versionToPath(gvPath, gv.Group.String(), gv.Version.String())
0000000000000000000000000000000000000000;;			paths = append(paths, path)
0000000000000000000000000000000000000000;;			gvToPath[gv] = path
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var groupNames []string
0000000000000000000000000000000000000000;;		for groupName := range seenGroups {
0000000000000000000000000000000000000000;;			groupNames = append(groupNames, groupName.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Strings(groupNames)
0000000000000000000000000000000000000000;;		for _, groupName := range groupNames {
0000000000000000000000000000000000000000;;			groups = append(groups, *seenGroups[types.Group(groupName)])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return paths, groups, gvToPath, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseIncludedTypesOverrides() (map[types.GroupVersion][]string, error) {
0000000000000000000000000000000000000000;;		overrides := make(map[types.GroupVersion][]string)
0000000000000000000000000000000000000000;;		for _, input := range *includedTypesOverrides {
0000000000000000000000000000000000000000;;			gvString, typeStr, err := parseGroupVersionType(input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			gv, err := types.ToGroupVersion(gvString)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			types, ok := overrides[gv]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				types = []string{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			types = append(types, typeStr)
0000000000000000000000000000000000000000;;			overrides[gv] = types
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return overrides, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		arguments := args.Default()
0000000000000000000000000000000000000000;;		arguments.GoHeaderFilePath = filepath.Join(args.DefaultSourceTree(), "k8s.io/kubernetes/hack/boilerplate/boilerplate.go.txt")
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;		var cmdArgs string
0000000000000000000000000000000000000000;;		flag.VisitAll(func(f *flag.Flag) {
0000000000000000000000000000000000000000;;			if !f.Changed || f.Name == "verify-only" {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cmdArgs = cmdArgs + fmt.Sprintf("--%s=%s ", f.Name, f.Value)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dependencies := []string{
0000000000000000000000000000000000000000;;			"k8s.io/apimachinery/pkg/fields",
0000000000000000000000000000000000000000;;			"k8s.io/apimachinery/pkg/labels",
0000000000000000000000000000000000000000;;			"k8s.io/apimachinery/pkg/watch",
0000000000000000000000000000000000000000;;			"k8s.io/apimachinery/pkg/apimachinery/registered",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if *test {
0000000000000000000000000000000000000000;;			arguments.InputDirs = append(dependencies, []string{
0000000000000000000000000000000000000000;;				"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup",
0000000000000000000000000000000000000000;;			}...)
0000000000000000000000000000000000000000;;			arguments.CustomArgs = clientgenargs.Args{
0000000000000000000000000000000000000000;;				Groups: []types.GroupVersions{{Group: "testgroup", Versions: []types.Version{""}}},
0000000000000000000000000000000000000000;;				GroupVersionToInputPath: map[types.GroupVersion]string{
0000000000000000000000000000000000000000;;					{Group: "testgroup", Version: ""}: "k8s.io/kubernetes/cmd/libs/go2idl/client-gen/test_apis/testgroup",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ClientsetName:       "test_internalclientset",
0000000000000000000000000000000000000000;;				ClientsetOutputPath: "k8s.io/kubernetes/cmd/libs/go2idl/client-gen/testoutput/clientset_generated/",
0000000000000000000000000000000000000000;;				ClientsetOnly:       false,
0000000000000000000000000000000000000000;;				FakeClient:          true,
0000000000000000000000000000000000000000;;				CmdArgs:             cmdArgs,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			inputPath, groups, gvToPath, err := parseInputVersions()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			includedTypesOverrides, err := parseIncludedTypesOverrides()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			glog.V(3).Infof("going to generate clientset from these input paths: %v", inputPath)
0000000000000000000000000000000000000000;;			arguments.InputDirs = append(inputPath, dependencies...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			arguments.CustomArgs = clientgenargs.Args{
0000000000000000000000000000000000000000;;				Groups:                  groups,
0000000000000000000000000000000000000000;;				GroupVersionToInputPath: gvToPath,
0000000000000000000000000000000000000000;;				ClientsetName:           *clientsetName,
0000000000000000000000000000000000000000;;				ClientsetAPIPath:        *clientsetAPIPath,
0000000000000000000000000000000000000000;;				ClientsetOutputPath:     *clientsetPath,
0000000000000000000000000000000000000000;;				ClientsetOnly:           *clientsetOnly,
0000000000000000000000000000000000000000;;				FakeClient:              *fakeClient,
0000000000000000000000000000000000000000;;				CmdArgs:                 cmdArgs,
0000000000000000000000000000000000000000;;				IncludedTypesOverrides:  includedTypesOverrides,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			glog.V(3).Infof("==arguments: %v\n", arguments)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := arguments.Execute(
0000000000000000000000000000000000000000;;			generators.NameSystems(),
0000000000000000000000000000000000000000;;			generators.DefaultNameSystem(),
0000000000000000000000000000000000000000;;			generators.Packages,
0000000000000000000000000000000000000000;;		); err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
