0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d411520f4df7bcb85546106000dcbeb792b636a7;cmd/libs/go2idl/client-gen/generators/fake/generator-fake-for-type.go[cmd/libs/go2idl/client-gen/generators/fake/generator-fake-for-type.go][cmd/libs/go2idl/client-gen/generators/fake/generator_fake_for_type.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/generator"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/path"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// genFakeForType produces a file for each top-level type.
0000000000000000000000000000000000000000;;	type genFakeForType struct {
0000000000000000000000000000000000000000;;		generator.DefaultGen
0000000000000000000000000000000000000000;;		outputPackage string
0000000000000000000000000000000000000000;;		group         string
0000000000000000000000000000000000000000;;		version       string
0000000000000000000000000000000000000000;;		inputPackage  string
0000000000000000000000000000000000000000;;		typeToMatch   *types.Type
0000000000000000000000000000000000000000;;		imports       namer.ImportTracker
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ generator.Generator = &genFakeForType{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter ignores all but one type because we're making a single file per type.
0000000000000000000000000000000000000000;;	func (g *genFakeForType) Filter(c *generator.Context, t *types.Type) bool { return t == g.typeToMatch }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genFakeForType) Namers(c *generator.Context) namer.NameSystems {
0000000000000000000000000000000000000000;;		return namer.NameSystems{
0000000000000000000000000000000000000000;;			"raw": namer.NewRawNamer(g.outputPackage, g.imports),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genFakeForType) Imports(c *generator.Context) (imports []string) {
0000000000000000000000000000000000000000;;		return g.imports.ImportLines()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ideally, we'd like genStatus to return true if there is a subresource path
0000000000000000000000000000000000000000;;	// registered for "status" in the API server, but we do not have that
0000000000000000000000000000000000000000;;	// information, so genStatus returns true if the type has a status field.
0000000000000000000000000000000000000000;;	func genStatus(t *types.Type) bool {
0000000000000000000000000000000000000000;;		// Default to true if we have a Status member
0000000000000000000000000000000000000000;;		hasStatus := false
0000000000000000000000000000000000000000;;		for _, m := range t.Members {
0000000000000000000000000000000000000000;;			if m.Name == "Status" {
0000000000000000000000000000000000000000;;				hasStatus = true
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Allow overriding via a comment on the type
0000000000000000000000000000000000000000;;		genStatus, err := types.ExtractSingleBoolCommentTag("+", "genclientstatus", hasStatus, t.SecondClosestCommentLines)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("error looking up +genclientstatus: %v\n", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return genStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// hasObjectMeta returns true if the type has a ObjectMeta field.
0000000000000000000000000000000000000000;;	func hasObjectMeta(t *types.Type) bool {
0000000000000000000000000000000000000000;;		for _, m := range t.Members {
0000000000000000000000000000000000000000;;			if m.Embedded == true && m.Name == "ObjectMeta" {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenerateType makes the body of a file implementing the individual typed client for type t.
0000000000000000000000000000000000000000;;	func (g *genFakeForType) GenerateType(c *generator.Context, t *types.Type, w io.Writer) error {
0000000000000000000000000000000000000000;;		sw := generator.NewSnippetWriter(w, c, "$", "$")
0000000000000000000000000000000000000000;;		pkg := filepath.Base(t.Name.Package)
0000000000000000000000000000000000000000;;		namespaced := !extractBoolTagOrDie("nonNamespaced", t.SecondClosestCommentLines)
0000000000000000000000000000000000000000;;		canonicalGroup := g.group
0000000000000000000000000000000000000000;;		if canonicalGroup == "core" {
0000000000000000000000000000000000000000;;			canonicalGroup = ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupName := g.group
0000000000000000000000000000000000000000;;		if g.group == "core" {
0000000000000000000000000000000000000000;;			groupName = ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// allow user to define a group name that's different from the one parsed from the directory.
0000000000000000000000000000000000000000;;		p := c.Universe.Package(path.Vendorless(g.inputPackage))
0000000000000000000000000000000000000000;;		if override := types.ExtractCommentTags("+", p.DocComments)["groupName"]; override != nil {
0000000000000000000000000000000000000000;;			groupName = override[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const pkgClientGoTesting = "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		m := map[string]interface{}{
0000000000000000000000000000000000000000;;			"type":                 t,
0000000000000000000000000000000000000000;;			"package":              pkg,
0000000000000000000000000000000000000000;;			"Package":              namer.IC(pkg),
0000000000000000000000000000000000000000;;			"namespaced":           namespaced,
0000000000000000000000000000000000000000;;			"Group":                namer.IC(g.group),
0000000000000000000000000000000000000000;;			"GroupVersion":         namer.IC(g.group) + namer.IC(g.version),
0000000000000000000000000000000000000000;;			"group":                canonicalGroup,
0000000000000000000000000000000000000000;;			"groupName":            groupName,
0000000000000000000000000000000000000000;;			"version":              g.version,
0000000000000000000000000000000000000000;;			"DeleteOptions":        c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/apis/meta/v1", Name: "DeleteOptions"}),
0000000000000000000000000000000000000000;;			"ListOptions":          c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/apis/meta/v1", Name: "ListOptions"}),
0000000000000000000000000000000000000000;;			"GetOptions":           c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/apis/meta/v1", Name: "GetOptions"}),
0000000000000000000000000000000000000000;;			"Everything":           c.Universe.Function(types.Name{Package: "k8s.io/apimachinery/pkg/labels", Name: "Everything"}),
0000000000000000000000000000000000000000;;			"GroupVersionResource": c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/runtime/schema", Name: "GroupVersionResource"}),
0000000000000000000000000000000000000000;;			"GroupVersionKind":     c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/runtime/schema", Name: "GroupVersionKind"}),
0000000000000000000000000000000000000000;;			"PatchType":            c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/types", Name: "PatchType"}),
0000000000000000000000000000000000000000;;			"watchInterface":       c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/watch", Name: "Interface"}),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"NewRootListAction":              c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootListAction"}),
0000000000000000000000000000000000000000;;			"NewListAction":                  c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewListAction"}),
0000000000000000000000000000000000000000;;			"NewRootGetAction":               c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootGetAction"}),
0000000000000000000000000000000000000000;;			"NewGetAction":                   c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewGetAction"}),
0000000000000000000000000000000000000000;;			"NewRootDeleteAction":            c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootDeleteAction"}),
0000000000000000000000000000000000000000;;			"NewDeleteAction":                c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewDeleteAction"}),
0000000000000000000000000000000000000000;;			"NewRootDeleteCollectionAction":  c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootDeleteCollectionAction"}),
0000000000000000000000000000000000000000;;			"NewDeleteCollectionAction":      c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewDeleteCollectionAction"}),
0000000000000000000000000000000000000000;;			"NewRootUpdateAction":            c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootUpdateAction"}),
0000000000000000000000000000000000000000;;			"NewUpdateAction":                c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewUpdateAction"}),
0000000000000000000000000000000000000000;;			"NewRootCreateAction":            c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootCreateAction"}),
0000000000000000000000000000000000000000;;			"NewCreateAction":                c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewCreateAction"}),
0000000000000000000000000000000000000000;;			"NewRootWatchAction":             c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootWatchAction"}),
0000000000000000000000000000000000000000;;			"NewWatchAction":                 c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewWatchAction"}),
0000000000000000000000000000000000000000;;			"NewUpdateSubresourceAction":     c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewUpdateSubresourceAction"}),
0000000000000000000000000000000000000000;;			"NewRootUpdateSubresourceAction": c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootUpdateSubresourceAction"}),
0000000000000000000000000000000000000000;;			"NewRootPatchAction":             c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootPatchAction"}),
0000000000000000000000000000000000000000;;			"NewPatchAction":                 c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewPatchAction"}),
0000000000000000000000000000000000000000;;			"NewRootPatchSubresourceAction":  c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewRootPatchSubresourceAction"}),
0000000000000000000000000000000000000000;;			"NewPatchSubresourceAction":      c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "NewPatchSubresourceAction"}),
0000000000000000000000000000000000000000;;			"ExtractFromListOptions":         c.Universe.Function(types.Name{Package: pkgClientGoTesting, Name: "ExtractFromListOptions"}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noMethods := extractBoolTagOrDie("noMethods", t.SecondClosestCommentLines) == true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		readonly := extractBoolTagOrDie("readonly", t.SecondClosestCommentLines) == true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if namespaced {
0000000000000000000000000000000000000000;;			sw.Do(structNamespaced, m)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			sw.Do(structNonNamespaced, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !noMethods {
0000000000000000000000000000000000000000;;			sw.Do(resource, m)
0000000000000000000000000000000000000000;;			sw.Do(kind, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !noMethods && !readonly {
0000000000000000000000000000000000000000;;			sw.Do(createTemplate, m)
0000000000000000000000000000000000000000;;			sw.Do(updateTemplate, m)
0000000000000000000000000000000000000000;;			// Generate the UpdateStatus method if the type has a status
0000000000000000000000000000000000000000;;			if genStatus(t) {
0000000000000000000000000000000000000000;;				sw.Do(updateStatusTemplate, m)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			sw.Do(deleteTemplate, m)
0000000000000000000000000000000000000000;;			sw.Do(deleteCollectionTemplate, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !noMethods {
0000000000000000000000000000000000000000;;			sw.Do(getTemplate, m)
0000000000000000000000000000000000000000;;			if hasObjectMeta(t) {
0000000000000000000000000000000000000000;;				sw.Do(listUsingOptionsTemplate, m)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				sw.Do(listTemplate, m)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			sw.Do(watchTemplate, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !noMethods && !readonly {
0000000000000000000000000000000000000000;;			sw.Do(patchTemplate, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sw.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// template for the struct that implements the type's interface
0000000000000000000000000000000000000000;;	var structNamespaced = `
0000000000000000000000000000000000000000;;	// Fake$.type|publicPlural$ implements $.type|public$Interface
0000000000000000000000000000000000000000;;	type Fake$.type|publicPlural$ struct {
0000000000000000000000000000000000000000;;		Fake *Fake$.GroupVersion$
0000000000000000000000000000000000000000;;		ns     string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// template for the struct that implements the type's interface
0000000000000000000000000000000000000000;;	var structNonNamespaced = `
0000000000000000000000000000000000000000;;	// Fake$.type|publicPlural$ implements $.type|public$Interface
0000000000000000000000000000000000000000;;	type Fake$.type|publicPlural$ struct {
0000000000000000000000000000000000000000;;		Fake *Fake$.GroupVersion$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var resource = `
0000000000000000000000000000000000000000;;	var $.type|allLowercasePlural$Resource = $.GroupVersionResource|raw${Group: "$.groupName$", Version: "$.version$", Resource: "$.type|resource$"}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var kind = `
0000000000000000000000000000000000000000;;	var $.type|allLowercasePlural$Kind = $.GroupVersionKind|raw${Group: "$.groupName$", Version: "$.version$", Kind: "$.type|public$"}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var listTemplate = `
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) List(opts $.ListOptions|raw$) (result *$.type|raw$List, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$Invokes($.NewListAction|raw$($.type|allLowercasePlural$Resource, $.type|allLowercasePlural$Kind, c.ns, opts), &$.type|raw$List{})
0000000000000000000000000000000000000000;;			$else$Invokes($.NewRootListAction|raw$($.type|allLowercasePlural$Resource, $.type|allLowercasePlural$Kind, opts), &$.type|raw$List{})$end$
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*$.type|raw$List), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var listUsingOptionsTemplate = `
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) List(opts $.ListOptions|raw$) (result *$.type|raw$List, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$Invokes($.NewListAction|raw$($.type|allLowercasePlural$Resource, $.type|allLowercasePlural$Kind, c.ns, opts), &$.type|raw$List{})
0000000000000000000000000000000000000000;;			$else$Invokes($.NewRootListAction|raw$($.type|allLowercasePlural$Resource, $.type|allLowercasePlural$Kind, opts), &$.type|raw$List{})$end$
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		label, _, _ := $.ExtractFromListOptions|raw$(opts)
0000000000000000000000000000000000000000;;		if label == nil {
0000000000000000000000000000000000000000;;			label = $.Everything|raw$()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		list := &$.type|raw$List{}
0000000000000000000000000000000000000000;;		for _, item := range obj.(*$.type|raw$List).Items {
0000000000000000000000000000000000000000;;			if label.Matches(labels.Set(item.Labels)) {
0000000000000000000000000000000000000000;;				list.Items = append(list.Items, item)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return list, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var getTemplate = `
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) Get(name string, options $.GetOptions|raw$) (result *$.type|raw$, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$Invokes($.NewGetAction|raw$($.type|allLowercasePlural$Resource, c.ns, name), &$.type|raw${})
0000000000000000000000000000000000000000;;			$else$Invokes($.NewRootGetAction|raw$($.type|allLowercasePlural$Resource, name), &$.type|raw${})$end$
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*$.type|raw$), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var deleteTemplate = `
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) Delete(name string, options *$.DeleteOptions|raw$) error {
0000000000000000000000000000000000000000;;		_, err := c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$Invokes($.NewDeleteAction|raw$($.type|allLowercasePlural$Resource, c.ns, name), &$.type|raw${})
0000000000000000000000000000000000000000;;			$else$Invokes($.NewRootDeleteAction|raw$($.type|allLowercasePlural$Resource, name), &$.type|raw${})$end$
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var deleteCollectionTemplate = `
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) DeleteCollection(options *$.DeleteOptions|raw$, listOptions $.ListOptions|raw$) error {
0000000000000000000000000000000000000000;;		$if .namespaced$action := $.NewDeleteCollectionAction|raw$($.type|allLowercasePlural$Resource, c.ns, listOptions)
0000000000000000000000000000000000000000;;		$else$action := $.NewRootDeleteCollectionAction|raw$($.type|allLowercasePlural$Resource, listOptions)
0000000000000000000000000000000000000000;;		$end$
0000000000000000000000000000000000000000;;		_, err := c.Fake.Invokes(action, &$.type|raw$List{})
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var createTemplate = `
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) Create($.type|private$ *$.type|raw$) (result *$.type|raw$, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$Invokes($.NewCreateAction|raw$($.type|allLowercasePlural$Resource, c.ns, $.type|private$), &$.type|raw${})
0000000000000000000000000000000000000000;;			$else$Invokes($.NewRootCreateAction|raw$($.type|allLowercasePlural$Resource, $.type|private$), &$.type|raw${})$end$
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*$.type|raw$), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var updateTemplate = `
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) Update($.type|private$ *$.type|raw$) (result *$.type|raw$, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$Invokes($.NewUpdateAction|raw$($.type|allLowercasePlural$Resource, c.ns, $.type|private$), &$.type|raw${})
0000000000000000000000000000000000000000;;			$else$Invokes($.NewRootUpdateAction|raw$($.type|allLowercasePlural$Resource, $.type|private$), &$.type|raw${})$end$
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*$.type|raw$), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var updateStatusTemplate = `
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) UpdateStatus($.type|private$ *$.type|raw$) (*$.type|raw$, error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$Invokes($.NewUpdateSubresourceAction|raw$($.type|allLowercasePlural$Resource, "status", c.ns, $.type|private$), &$.type|raw${})
0000000000000000000000000000000000000000;;			$else$Invokes($.NewRootUpdateSubresourceAction|raw$($.type|allLowercasePlural$Resource, "status", $.type|private$), &$.type|raw${})$end$
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*$.type|raw$), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var watchTemplate = `
0000000000000000000000000000000000000000;;	// Watch returns a $.watchInterface|raw$ that watches the requested $.type|privatePlural$.
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) Watch(opts $.ListOptions|raw$) ($.watchInterface|raw$, error) {
0000000000000000000000000000000000000000;;		return c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$InvokesWatch($.NewWatchAction|raw$($.type|allLowercasePlural$Resource, c.ns, opts))
0000000000000000000000000000000000000000;;			$else$InvokesWatch($.NewRootWatchAction|raw$($.type|allLowercasePlural$Resource, opts))$end$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var patchTemplate = `
0000000000000000000000000000000000000000;;	// Patch applies the patch and returns the patched $.type|private$.
0000000000000000000000000000000000000000;;	func (c *Fake$.type|publicPlural$) Patch(name string, pt $.PatchType|raw$, data []byte, subresources ...string) (result *$.type|raw$, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			$if .namespaced$Invokes($.NewPatchSubresourceAction|raw$($.type|allLowercasePlural$Resource, c.ns, name, data, subresources... ), &$.type|raw${})
0000000000000000000000000000000000000000;;			$else$Invokes($.NewRootPatchSubresourceAction|raw$($.type|allLowercasePlural$Resource, name, data, subresources...), &$.type|raw${})$end$
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*$.type|raw$), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
