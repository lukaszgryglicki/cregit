0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d411520f4df7bcb85546106000dcbeb792b636a7;cmd/libs/go2idl/client-gen/generators/fake/generator-fake-for-group.go[cmd/libs/go2idl/client-gen/generators/fake/generator-fake-for-group.go][cmd/libs/go2idl/client-gen/generators/fake/generator_fake_for_group.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/generator"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// genFakeForGroup produces a file for a group client, e.g. ExtensionsClient for the extension group.
0000000000000000000000000000000000000000;;	type genFakeForGroup struct {
0000000000000000000000000000000000000000;;		generator.DefaultGen
0000000000000000000000000000000000000000;;		outputPackage     string
0000000000000000000000000000000000000000;;		realClientPackage string
0000000000000000000000000000000000000000;;		group             string
0000000000000000000000000000000000000000;;		version           string
0000000000000000000000000000000000000000;;		// types in this group
0000000000000000000000000000000000000000;;		types   []*types.Type
0000000000000000000000000000000000000000;;		imports namer.ImportTracker
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ generator.Generator = &genFakeForGroup{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We only want to call GenerateType() once per group.
0000000000000000000000000000000000000000;;	func (g *genFakeForGroup) Filter(c *generator.Context, t *types.Type) bool {
0000000000000000000000000000000000000000;;		return t == g.types[0]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genFakeForGroup) Namers(c *generator.Context) namer.NameSystems {
0000000000000000000000000000000000000000;;		return namer.NameSystems{
0000000000000000000000000000000000000000;;			"raw": namer.NewRawNamer(g.outputPackage, g.imports),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genFakeForGroup) Imports(c *generator.Context) (imports []string) {
0000000000000000000000000000000000000000;;		imports = append(g.imports.ImportLines(), strings.ToLower(fmt.Sprintf("%s \"%s\"", filepath.Base(g.realClientPackage), g.realClientPackage)))
0000000000000000000000000000000000000000;;		return imports
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genFakeForGroup) GenerateType(c *generator.Context, t *types.Type, w io.Writer) error {
0000000000000000000000000000000000000000;;		sw := generator.NewSnippetWriter(w, c, "$", "$")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m := map[string]interface{}{
0000000000000000000000000000000000000000;;			"group":               g.group,
0000000000000000000000000000000000000000;;			"GroupVersion":        namer.IC(g.group) + namer.IC(g.version),
0000000000000000000000000000000000000000;;			"Fake":                c.Universe.Type(types.Name{Package: "k8s.io/client-go/testing", Name: "Fake"}),
0000000000000000000000000000000000000000;;			"RESTClientInterface": c.Universe.Type(types.Name{Package: "k8s.io/client-go/rest", Name: "Interface"}),
0000000000000000000000000000000000000000;;			"RESTClient":          c.Universe.Type(types.Name{Package: "k8s.io/client-go/rest", Name: "RESTClient"}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sw.Do(groupClientTemplate, m)
0000000000000000000000000000000000000000;;		for _, t := range g.types {
0000000000000000000000000000000000000000;;			wrapper := map[string]interface{}{
0000000000000000000000000000000000000000;;				"type":              t,
0000000000000000000000000000000000000000;;				"GroupVersion":      namer.IC(g.group) + namer.IC(g.version),
0000000000000000000000000000000000000000;;				"realClientPackage": strings.ToLower(filepath.Base(g.realClientPackage)),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			namespaced := !extractBoolTagOrDie("nonNamespaced", t.SecondClosestCommentLines)
0000000000000000000000000000000000000000;;			if namespaced {
0000000000000000000000000000000000000000;;				sw.Do(getterImplNamespaced, wrapper)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				sw.Do(getterImplNonNamespaced, wrapper)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sw.Do(getRESTClient, m)
0000000000000000000000000000000000000000;;		return sw.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var groupClientTemplate = `
0000000000000000000000000000000000000000;;	type Fake$.GroupVersion$ struct {
0000000000000000000000000000000000000000;;		*$.Fake|raw$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var getterImplNamespaced = `
0000000000000000000000000000000000000000;;	func (c *Fake$.GroupVersion$) $.type|publicPlural$(namespace string) $.realClientPackage$.$.type|public$Interface {
0000000000000000000000000000000000000000;;		return &Fake$.type|publicPlural${c, namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var getterImplNonNamespaced = `
0000000000000000000000000000000000000000;;	func (c *Fake$.GroupVersion$) $.type|publicPlural$() $.realClientPackage$.$.type|public$Interface {
0000000000000000000000000000000000000000;;		return &Fake$.type|publicPlural${c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var getRESTClient = `
0000000000000000000000000000000000000000;;	// RESTClient returns a RESTClient that is used to communicate
0000000000000000000000000000000000000000;;	// with API server by this client implementation.
0000000000000000000000000000000000000000;;	func (c *Fake$.GroupVersion$) RESTClient() $.RESTClientInterface|raw$ {
0000000000000000000000000000000000000000;;		var ret *$.RESTClient|raw$
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
