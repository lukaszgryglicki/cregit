0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2e39416015872cdb7fdac117be5185050ce529e9;cmd/libs/go2idl/client-gen/generators/fake/generator-fake-for-clientset.go[cmd/libs/go2idl/client-gen/generators/fake/generator-fake-for-clientset.go][cmd/libs/go2idl/client-gen/generators/fake/generator_fake_for_clientset.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/generator"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;		clientgentypes "k8s.io/kubernetes/cmd/libs/go2idl/client-gen/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// genClientset generates a package for a clientset.
0000000000000000000000000000000000000000;;	type genClientset struct {
0000000000000000000000000000000000000000;;		generator.DefaultGen
0000000000000000000000000000000000000000;;		groups               []clientgentypes.GroupVersions
0000000000000000000000000000000000000000;;		fakeClientsetPackage string
0000000000000000000000000000000000000000;;		outputPackage        string
0000000000000000000000000000000000000000;;		imports              namer.ImportTracker
0000000000000000000000000000000000000000;;		clientsetGenerated   bool
0000000000000000000000000000000000000000;;		// the import path of the generated real clientset.
0000000000000000000000000000000000000000;;		realClientsetPackage string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ generator.Generator = &genClientset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genClientset) Namers(c *generator.Context) namer.NameSystems {
0000000000000000000000000000000000000000;;		return namer.NameSystems{
0000000000000000000000000000000000000000;;			"raw": namer.NewRawNamer(g.outputPackage, g.imports),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We only want to call GenerateType() once.
0000000000000000000000000000000000000000;;	func (g *genClientset) Filter(c *generator.Context, t *types.Type) bool {
0000000000000000000000000000000000000000;;		ret := !g.clientsetGenerated
0000000000000000000000000000000000000000;;		g.clientsetGenerated = true
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genClientset) Imports(c *generator.Context) (imports []string) {
0000000000000000000000000000000000000000;;		imports = append(imports, g.imports.ImportLines()...)
0000000000000000000000000000000000000000;;		for _, group := range g.groups {
0000000000000000000000000000000000000000;;			for _, version := range group.Versions {
0000000000000000000000000000000000000000;;				groupClientPackage := filepath.Join(g.fakeClientsetPackage, "typed", group.Group.NonEmpty(), version.NonEmpty())
0000000000000000000000000000000000000000;;				fakeGroupClientPackage := filepath.Join(groupClientPackage, "fake")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				imports = append(imports, strings.ToLower(fmt.Sprintf("%s%s \"%s\"", group.Group.NonEmpty(), version.NonEmpty(), groupClientPackage)))
0000000000000000000000000000000000000000;;				imports = append(imports, strings.ToLower(fmt.Sprintf("fake%s%s \"%s\"", group.Group.NonEmpty(), version.NonEmpty(), fakeGroupClientPackage)))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// the package that has the clientset Interface
0000000000000000000000000000000000000000;;		imports = append(imports, fmt.Sprintf("clientset \"%s\"", g.realClientsetPackage))
0000000000000000000000000000000000000000;;		// imports for the code in commonTemplate
0000000000000000000000000000000000000000;;		imports = append(imports,
0000000000000000000000000000000000000000;;			"k8s.io/client-go/testing",
0000000000000000000000000000000000000000;;			"k8s.io/client-go/discovery",
0000000000000000000000000000000000000000;;			"fakediscovery \"k8s.io/client-go/discovery/fake\"",
0000000000000000000000000000000000000000;;			"k8s.io/apimachinery/pkg/runtime",
0000000000000000000000000000000000000000;;			"k8s.io/apimachinery/pkg/watch",
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genClientset) GenerateType(c *generator.Context, t *types.Type, w io.Writer) error {
0000000000000000000000000000000000000000;;		// TODO: We actually don't need any type information to generate the clientset,
0000000000000000000000000000000000000000;;		// perhaps we can adapt the go2ild framework to this kind of usage.
0000000000000000000000000000000000000000;;		sw := generator.NewSnippetWriter(w, c, "$", "$")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allGroups := clientgentypes.ToGroupVersionPackages(g.groups)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sw.Do(common, nil)
0000000000000000000000000000000000000000;;		sw.Do(checkImpl, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, g := range allGroups {
0000000000000000000000000000000000000000;;			sw.Do(clientsetInterfaceImplTemplate, g)
0000000000000000000000000000000000000000;;			// don't generated the default method if generating internalversion clientset
0000000000000000000000000000000000000000;;			if g.IsDefaultVersion && g.Version != "" {
0000000000000000000000000000000000000000;;				sw.Do(clientsetInterfaceDefaultVersionImpl, g)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sw.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This part of code is version-independent, unchanging.
0000000000000000000000000000000000000000;;	var common = `
0000000000000000000000000000000000000000;;	// NewSimpleClientset returns a clientset that will respond with the provided objects.
0000000000000000000000000000000000000000;;	// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
0000000000000000000000000000000000000000;;	// without applying any validations and/or defaults. It shouldn't be considered a replacement
0000000000000000000000000000000000000000;;	// for a real clientset and is mostly useful in simple unit tests.
0000000000000000000000000000000000000000;;	func NewSimpleClientset(objects ...runtime.Object) *Clientset {
0000000000000000000000000000000000000000;;		o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
0000000000000000000000000000000000000000;;		for _, obj := range objects {
0000000000000000000000000000000000000000;;			if err := o.Add(obj); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePtr := testing.Fake{}
0000000000000000000000000000000000000000;;		fakePtr.AddReactor("*", "*", testing.ObjectReaction(o))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePtr.AddWatchReactor("*", testing.DefaultWatchReactor(watch.NewFake(), nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Clientset{fakePtr}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clientset implements clientset.Interface. Meant to be embedded into a
0000000000000000000000000000000000000000;;	// struct to get a default implementation. This makes faking out just the method
0000000000000000000000000000000000000000;;	// you want to test easier.
0000000000000000000000000000000000000000;;	type Clientset struct {
0000000000000000000000000000000000000000;;		testing.Fake
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Clientset) Discovery() discovery.DiscoveryInterface {
0000000000000000000000000000000000000000;;		return &fakediscovery.FakeDiscovery{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var checkImpl = `
0000000000000000000000000000000000000000;;	var _ clientset.Interface = &Clientset{}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var clientsetInterfaceImplTemplate = `
0000000000000000000000000000000000000000;;	// $.GroupVersion$ retrieves the $.GroupVersion$Client
0000000000000000000000000000000000000000;;	func (c *Clientset) $.GroupVersion$() $.PackageName$.$.GroupVersion$Interface {
0000000000000000000000000000000000000000;;		return &fake$.PackageName$.Fake$.GroupVersion${Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var clientsetInterfaceDefaultVersionImpl = `
0000000000000000000000000000000000000000;;	// $.Group$ retrieves the $.GroupVersion$Client
0000000000000000000000000000000000000000;;	func (c *Clientset) $.Group$() $.PackageName$.$.GroupVersion$Interface {
0000000000000000000000000000000000000000;;		return &fake$.PackageName$.Fake$.GroupVersion${Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
