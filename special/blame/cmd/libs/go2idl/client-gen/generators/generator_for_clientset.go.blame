0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
453af0b200e42ad2618189b8aab05f168d002e3e;cmd/libs/go2idl/client-gen/generators/generator-for-clientset.go[cmd/libs/go2idl/client-gen/generators/generator-for-clientset.go][cmd/libs/go2idl/client-gen/generators/generator_for_clientset.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generators
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/generator"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;		clientgentypes "k8s.io/kubernetes/cmd/libs/go2idl/client-gen/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// genClientset generates a package for a clientset.
0000000000000000000000000000000000000000;;	type genClientset struct {
0000000000000000000000000000000000000000;;		generator.DefaultGen
0000000000000000000000000000000000000000;;		groups             []clientgentypes.GroupVersions
0000000000000000000000000000000000000000;;		clientsetPackage   string
0000000000000000000000000000000000000000;;		outputPackage      string
0000000000000000000000000000000000000000;;		imports            namer.ImportTracker
0000000000000000000000000000000000000000;;		clientsetGenerated bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ generator.Generator = &genClientset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genClientset) Namers(c *generator.Context) namer.NameSystems {
0000000000000000000000000000000000000000;;		return namer.NameSystems{
0000000000000000000000000000000000000000;;			"raw": namer.NewRawNamer(g.outputPackage, g.imports),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We only want to call GenerateType() once.
0000000000000000000000000000000000000000;;	func (g *genClientset) Filter(c *generator.Context, t *types.Type) bool {
0000000000000000000000000000000000000000;;		ret := !g.clientsetGenerated
0000000000000000000000000000000000000000;;		g.clientsetGenerated = true
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genClientset) Imports(c *generator.Context) (imports []string) {
0000000000000000000000000000000000000000;;		imports = append(imports, g.imports.ImportLines()...)
0000000000000000000000000000000000000000;;		for _, group := range g.groups {
0000000000000000000000000000000000000000;;			for _, version := range group.Versions {
0000000000000000000000000000000000000000;;				typedClientPath := filepath.Join(g.clientsetPackage, "typed", group.Group.NonEmpty(), version.NonEmpty())
0000000000000000000000000000000000000000;;				imports = append(imports, strings.ToLower(fmt.Sprintf("%s%s \"%s\"", group.Group.NonEmpty(), version.NonEmpty(), typedClientPath)))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genClientset) GenerateType(c *generator.Context, t *types.Type, w io.Writer) error {
0000000000000000000000000000000000000000;;		// TODO: We actually don't need any type information to generate the clientset,
0000000000000000000000000000000000000000;;		// perhaps we can adapt the go2ild framework to this kind of usage.
0000000000000000000000000000000000000000;;		sw := generator.NewSnippetWriter(w, c, "$", "$")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allGroups := clientgentypes.ToGroupVersionPackages(g.groups)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m := map[string]interface{}{
0000000000000000000000000000000000000000;;			"allGroups":                            allGroups,
0000000000000000000000000000000000000000;;			"Config":                               c.Universe.Type(types.Name{Package: "k8s.io/client-go/rest", Name: "Config"}),
0000000000000000000000000000000000000000;;			"DefaultKubernetesUserAgent":           c.Universe.Function(types.Name{Package: "k8s.io/client-go/rest", Name: "DefaultKubernetesUserAgent"}),
0000000000000000000000000000000000000000;;			"RESTClientInterface":                  c.Universe.Type(types.Name{Package: "k8s.io/client-go/rest", Name: "Interface"}),
0000000000000000000000000000000000000000;;			"DiscoveryInterface":                   c.Universe.Type(types.Name{Package: "k8s.io/client-go/discovery", Name: "DiscoveryInterface"}),
0000000000000000000000000000000000000000;;			"DiscoveryClient":                      c.Universe.Type(types.Name{Package: "k8s.io/client-go/discovery", Name: "DiscoveryClient"}),
0000000000000000000000000000000000000000;;			"NewDiscoveryClientForConfig":          c.Universe.Function(types.Name{Package: "k8s.io/client-go/discovery", Name: "NewDiscoveryClientForConfig"}),
0000000000000000000000000000000000000000;;			"NewDiscoveryClientForConfigOrDie":     c.Universe.Function(types.Name{Package: "k8s.io/client-go/discovery", Name: "NewDiscoveryClientForConfigOrDie"}),
0000000000000000000000000000000000000000;;			"NewDiscoveryClient":                   c.Universe.Function(types.Name{Package: "k8s.io/client-go/discovery", Name: "NewDiscoveryClient"}),
0000000000000000000000000000000000000000;;			"flowcontrolNewTokenBucketRateLimiter": c.Universe.Function(types.Name{Package: "k8s.io/client-go/util/flowcontrol", Name: "NewTokenBucketRateLimiter"}),
0000000000000000000000000000000000000000;;			"glogErrorf":                           c.Universe.Function(types.Name{Package: "github.com/golang/glog", Name: "Errorf"}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sw.Do(clientsetInterface, m)
0000000000000000000000000000000000000000;;		sw.Do(clientsetTemplate, m)
0000000000000000000000000000000000000000;;		for _, g := range allGroups {
0000000000000000000000000000000000000000;;			sw.Do(clientsetInterfaceImplTemplate, g)
0000000000000000000000000000000000000000;;			// don't generated the default method if generating internalversion clientset
0000000000000000000000000000000000000000;;			if g.IsDefaultVersion && g.Version != "" {
0000000000000000000000000000000000000000;;				sw.Do(clientsetInterfaceDefaultVersionImpl, g)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sw.Do(getDiscoveryTemplate, m)
0000000000000000000000000000000000000000;;		sw.Do(newClientsetForConfigTemplate, m)
0000000000000000000000000000000000000000;;		sw.Do(newClientsetForConfigOrDieTemplate, m)
0000000000000000000000000000000000000000;;		sw.Do(newClientsetForRESTClientTemplate, m)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sw.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var clientsetInterface = `
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		Discovery() $.DiscoveryInterface|raw$
0000000000000000000000000000000000000000;;	    $range .allGroups$$.GroupVersion$() $.PackageName$.$.GroupVersion$Interface
0000000000000000000000000000000000000000;;		$if .IsDefaultVersion$// Deprecated: please explicitly pick a version if possible.
0000000000000000000000000000000000000000;;		$.Group$() $.PackageName$.$.GroupVersion$Interface
0000000000000000000000000000000000000000;;		$end$$end$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var clientsetTemplate = `
0000000000000000000000000000000000000000;;	// Clientset contains the clients for groups. Each group has exactly one
0000000000000000000000000000000000000000;;	// version included in a Clientset.
0000000000000000000000000000000000000000;;	type Clientset struct {
0000000000000000000000000000000000000000;;		*$.DiscoveryClient|raw$
0000000000000000000000000000000000000000;;	    $range .allGroups$*$.PackageName$.$.GroupVersion$Client
0000000000000000000000000000000000000000;;	    $end$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var clientsetInterfaceImplTemplate = `
0000000000000000000000000000000000000000;;	// $.GroupVersion$ retrieves the $.GroupVersion$Client
0000000000000000000000000000000000000000;;	func (c *Clientset) $.GroupVersion$() $.PackageName$.$.GroupVersion$Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.$.GroupVersion$Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var clientsetInterfaceDefaultVersionImpl = `
0000000000000000000000000000000000000000;;	// Deprecated: $.Group$ retrieves the default version of $.Group$Client.
0000000000000000000000000000000000000000;;	// Please explicitly pick a version.
0000000000000000000000000000000000000000;;	func (c *Clientset) $.Group$() $.PackageName$.$.GroupVersion$Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.$.GroupVersion$Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var getDiscoveryTemplate = `
0000000000000000000000000000000000000000;;	// Discovery retrieves the DiscoveryClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Discovery() $.DiscoveryInterface|raw$ {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.DiscoveryClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var newClientsetForConfigTemplate = `
0000000000000000000000000000000000000000;;	// NewForConfig creates a new Clientset for the given config.
0000000000000000000000000000000000000000;;	func NewForConfig(c *$.Config|raw$) (*Clientset, error) {
0000000000000000000000000000000000000000;;		configShallowCopy := *c
0000000000000000000000000000000000000000;;		if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
0000000000000000000000000000000000000000;;			configShallowCopy.RateLimiter = $.flowcontrolNewTokenBucketRateLimiter|raw$(configShallowCopy.QPS, configShallowCopy.Burst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	$range .allGroups$    cs.$.GroupVersion$Client, err =$.PackageName$.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err!=nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	$end$
0000000000000000000000000000000000000000;;		cs.DiscoveryClient, err = $.NewDiscoveryClientForConfig|raw$(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err!=nil {
0000000000000000000000000000000000000000;;			$.glogErrorf|raw$("failed to create the DiscoveryClient: %v", err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &cs, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var newClientsetForConfigOrDieTemplate = `
0000000000000000000000000000000000000000;;	// NewForConfigOrDie creates a new Clientset for the given config and
0000000000000000000000000000000000000000;;	// panics if there is an error in the config.
0000000000000000000000000000000000000000;;	func NewForConfigOrDie(c *$.Config|raw$) *Clientset {
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;	$range .allGroups$    cs.$.GroupVersion$Client =$.PackageName$.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;	$end$
0000000000000000000000000000000000000000;;		cs.DiscoveryClient = $.NewDiscoveryClientForConfigOrDie|raw$(c)
0000000000000000000000000000000000000000;;		return &cs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var newClientsetForRESTClientTemplate = `
0000000000000000000000000000000000000000;;	// New creates a new Clientset for the given RESTClient.
0000000000000000000000000000000000000000;;	func New(c $.RESTClientInterface|raw$) *Clientset {
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;	$range .allGroups$    cs.$.GroupVersion$Client =$.PackageName$.New(c)
0000000000000000000000000000000000000000;;	$end$
0000000000000000000000000000000000000000;;		cs.DiscoveryClient = $.NewDiscoveryClient|raw$(c)
0000000000000000000000000000000000000000;;		return &cs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
