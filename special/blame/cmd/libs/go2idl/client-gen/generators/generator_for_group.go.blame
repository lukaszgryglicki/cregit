0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a9e0696ebcc973d884fa353339055fed10c93f3c;cmd/libs/go2idl/client-gen/generators/generator-for-group.go[cmd/libs/go2idl/client-gen/generators/generator-for-group.go][cmd/libs/go2idl/client-gen/generators/generator_for_group.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generators
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/generator"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/libs/go2idl/client-gen/path"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// genGroup produces a file for a group client, e.g. ExtensionsClient for the extension group.
0000000000000000000000000000000000000000;;	type genGroup struct {
0000000000000000000000000000000000000000;;		generator.DefaultGen
0000000000000000000000000000000000000000;;		outputPackage string
0000000000000000000000000000000000000000;;		group         string
0000000000000000000000000000000000000000;;		version       string
0000000000000000000000000000000000000000;;		apiPath       string
0000000000000000000000000000000000000000;;		// types in this group
0000000000000000000000000000000000000000;;		types            []*types.Type
0000000000000000000000000000000000000000;;		imports          namer.ImportTracker
0000000000000000000000000000000000000000;;		inputPackage     string
0000000000000000000000000000000000000000;;		clientsetPackage string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ generator.Generator = &genGroup{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We only want to call GenerateType() once per group.
0000000000000000000000000000000000000000;;	func (g *genGroup) Filter(c *generator.Context, t *types.Type) bool {
0000000000000000000000000000000000000000;;		return t == g.types[0]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genGroup) Namers(c *generator.Context) namer.NameSystems {
0000000000000000000000000000000000000000;;		return namer.NameSystems{
0000000000000000000000000000000000000000;;			"raw": namer.NewRawNamer(g.outputPackage, g.imports),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genGroup) Imports(c *generator.Context) (imports []string) {
0000000000000000000000000000000000000000;;		imports = append(imports, g.imports.ImportLines()...)
0000000000000000000000000000000000000000;;		imports = append(imports, filepath.Join(g.clientsetPackage, "scheme"))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *genGroup) GenerateType(c *generator.Context, t *types.Type, w io.Writer) error {
0000000000000000000000000000000000000000;;		sw := generator.NewSnippetWriter(w, c, "$", "$")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiPath := func(group string) string {
0000000000000000000000000000000000000000;;			if len(g.apiPath) > 0 {
0000000000000000000000000000000000000000;;				return `"` + g.apiPath + `"`
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if group == "core" {
0000000000000000000000000000000000000000;;				return `"/api"`
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return `"/apis"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupName := g.group
0000000000000000000000000000000000000000;;		if g.group == "core" {
0000000000000000000000000000000000000000;;			groupName = ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// allow user to define a group name that's different from the one parsed from the directory.
0000000000000000000000000000000000000000;;		p := c.Universe.Package(path.Vendorless(g.inputPackage))
0000000000000000000000000000000000000000;;		if override := types.ExtractCommentTags("+", p.DocComments)["groupName"]; override != nil {
0000000000000000000000000000000000000000;;			groupName = override[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m := map[string]interface{}{
0000000000000000000000000000000000000000;;			"group":                          g.group,
0000000000000000000000000000000000000000;;			"version":                        g.version,
0000000000000000000000000000000000000000;;			"GroupVersion":                   namer.IC(g.group) + namer.IC(g.version),
0000000000000000000000000000000000000000;;			"groupName":                      groupName,
0000000000000000000000000000000000000000;;			"types":                          g.types,
0000000000000000000000000000000000000000;;			"apiPath":                        apiPath(g.group),
0000000000000000000000000000000000000000;;			"schemaGroupVersion":             c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/runtime/schema", Name: "GroupVersion"}),
0000000000000000000000000000000000000000;;			"runtimeAPIVersionInternal":      c.Universe.Variable(types.Name{Package: "k8s.io/apimachinery/pkg/runtime", Name: "APIVersionInternal"}),
0000000000000000000000000000000000000000;;			"serializerDirectCodecFactory":   c.Universe.Type(types.Name{Package: "k8s.io/apimachinery/pkg/runtime/serializer", Name: "DirectCodecFactory"}),
0000000000000000000000000000000000000000;;			"restConfig":                     c.Universe.Type(types.Name{Package: "k8s.io/client-go/rest", Name: "Config"}),
0000000000000000000000000000000000000000;;			"restDefaultKubernetesUserAgent": c.Universe.Function(types.Name{Package: "k8s.io/client-go/rest", Name: "DefaultKubernetesUserAgent"}),
0000000000000000000000000000000000000000;;			"restRESTClientInterface":        c.Universe.Type(types.Name{Package: "k8s.io/client-go/rest", Name: "Interface"}),
0000000000000000000000000000000000000000;;			"restRESTClientFor":              c.Universe.Function(types.Name{Package: "k8s.io/client-go/rest", Name: "RESTClientFor"}),
0000000000000000000000000000000000000000;;			"SchemeGroupVersion":             c.Universe.Variable(types.Name{Package: path.Vendorless(g.inputPackage), Name: "SchemeGroupVersion"}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sw.Do(groupInterfaceTemplate, m)
0000000000000000000000000000000000000000;;		sw.Do(groupClientTemplate, m)
0000000000000000000000000000000000000000;;		for _, t := range g.types {
0000000000000000000000000000000000000000;;			wrapper := map[string]interface{}{
0000000000000000000000000000000000000000;;				"type":         t,
0000000000000000000000000000000000000000;;				"GroupVersion": namer.IC(g.group) + namer.IC(g.version),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			namespaced := !extractBoolTagOrDie("nonNamespaced", t.SecondClosestCommentLines)
0000000000000000000000000000000000000000;;			if namespaced {
0000000000000000000000000000000000000000;;				sw.Do(getterImplNamespaced, wrapper)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				sw.Do(getterImplNonNamespaced, wrapper)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sw.Do(newClientForConfigTemplate, m)
0000000000000000000000000000000000000000;;		sw.Do(newClientForConfigOrDieTemplate, m)
0000000000000000000000000000000000000000;;		sw.Do(newClientForRESTClientTemplate, m)
0000000000000000000000000000000000000000;;		if g.version == "" {
0000000000000000000000000000000000000000;;			sw.Do(setInternalVersionClientDefaultsTemplate, m)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			sw.Do(setClientDefaultsTemplate, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sw.Do(getRESTClient, m)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sw.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var groupInterfaceTemplate = `
0000000000000000000000000000000000000000;;	type $.GroupVersion$Interface interface {
0000000000000000000000000000000000000000;;	    RESTClient() $.restRESTClientInterface|raw$
0000000000000000000000000000000000000000;;	    $range .types$ $.|publicPlural$Getter
0000000000000000000000000000000000000000;;	    $end$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var groupClientTemplate = `
0000000000000000000000000000000000000000;;	// $.GroupVersion$Client is used to interact with features provided by the $.groupName$ group.
0000000000000000000000000000000000000000;;	type $.GroupVersion$Client struct {
0000000000000000000000000000000000000000;;		restClient $.restRESTClientInterface|raw$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var getterImplNamespaced = `
0000000000000000000000000000000000000000;;	func (c *$.GroupVersion$Client) $.type|publicPlural$(namespace string) $.type|public$Interface {
0000000000000000000000000000000000000000;;		return new$.type|publicPlural$(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var getterImplNonNamespaced = `
0000000000000000000000000000000000000000;;	func (c *$.GroupVersion$Client) $.type|publicPlural$() $.type|public$Interface {
0000000000000000000000000000000000000000;;		return new$.type|publicPlural$(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var newClientForConfigTemplate = `
0000000000000000000000000000000000000000;;	// NewForConfig creates a new $.GroupVersion$Client for the given config.
0000000000000000000000000000000000000000;;	func NewForConfig(c *$.restConfig|raw$) (*$.GroupVersion$Client, error) {
0000000000000000000000000000000000000000;;		config := *c
0000000000000000000000000000000000000000;;		if err := setConfigDefaults(&config); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client, err := $.restRESTClientFor|raw$(&config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &$.GroupVersion$Client{client}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var newClientForConfigOrDieTemplate = `
0000000000000000000000000000000000000000;;	// NewForConfigOrDie creates a new $.GroupVersion$Client for the given config and
0000000000000000000000000000000000000000;;	// panics if there is an error in the config.
0000000000000000000000000000000000000000;;	func NewForConfigOrDie(c *$.restConfig|raw$) *$.GroupVersion$Client {
0000000000000000000000000000000000000000;;		client, err := NewForConfig(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var getRESTClient = `
0000000000000000000000000000000000000000;;	// RESTClient returns a RESTClient that is used to communicate
0000000000000000000000000000000000000000;;	// with API server by this client implementation.
0000000000000000000000000000000000000000;;	func (c *$.GroupVersion$Client) RESTClient() $.restRESTClientInterface|raw$ {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.restClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var newClientForRESTClientTemplate = `
0000000000000000000000000000000000000000;;	// New creates a new $.GroupVersion$Client for the given RESTClient.
0000000000000000000000000000000000000000;;	func New(c $.restRESTClientInterface|raw$) *$.GroupVersion$Client {
0000000000000000000000000000000000000000;;		return &$.GroupVersion$Client{c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var setInternalVersionClientDefaultsTemplate = `
0000000000000000000000000000000000000000;;	func setConfigDefaults(config *$.restConfig|raw$) error {
0000000000000000000000000000000000000000;;		g, err := scheme.Registry.Group("$.groupName$")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config.APIPath = $.apiPath$
0000000000000000000000000000000000000000;;		if config.UserAgent == "" {
0000000000000000000000000000000000000000;;			config.UserAgent = $.restDefaultKubernetesUserAgent|raw$()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.GroupVersion == nil || config.GroupVersion.Group != g.GroupVersion.Group {
0000000000000000000000000000000000000000;;			gv := g.GroupVersion
0000000000000000000000000000000000000000;;			config.GroupVersion = &gv
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.NegotiatedSerializer = scheme.Codecs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.QPS == 0 {
0000000000000000000000000000000000000000;;			config.QPS = 5
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.Burst == 0 {
0000000000000000000000000000000000000000;;			config.Burst = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var setClientDefaultsTemplate = `
0000000000000000000000000000000000000000;;	func setConfigDefaults(config *$.restConfig|raw$) error {
0000000000000000000000000000000000000000;;		gv := $.SchemeGroupVersion|raw$
0000000000000000000000000000000000000000;;		config.GroupVersion =  &gv
0000000000000000000000000000000000000000;;		config.APIPath = $.apiPath$
0000000000000000000000000000000000000000;;		config.NegotiatedSerializer = $.serializerDirectCodecFactory|raw${CodecFactory: scheme.Codecs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.UserAgent == "" {
0000000000000000000000000000000000000000;;			config.UserAgent = $.restDefaultKubernetesUserAgent|raw$()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
