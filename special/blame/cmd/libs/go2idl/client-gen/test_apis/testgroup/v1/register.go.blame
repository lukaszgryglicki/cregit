0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
2342177e34461378a7b59220acde320a9644e59b;cmd/libs/go2idl/client-gen/testdata/apis/testgroup/v1/register.go[cmd/libs/go2idl/client-gen/testdata/apis/testgroup/v1/register.go][cmd/libs/go2idl/client-gen/test_apis/testgroup/v1/register.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var SchemeGroupVersion = schema.GroupVersion{Group: "testgroup.k8s.io", Version: "v1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// TODO: move SchemeBuilder with zz_generated.deepcopy.go to k8s.io/api.
0000000000000000000000000000000000000000;;		// localSchemeBuilder and AddToScheme will stay in k8s.io/kubernetes.
0000000000000000000000000000000000000000;;		SchemeBuilder      runtime.SchemeBuilder
0000000000000000000000000000000000000000;;		localSchemeBuilder = &SchemeBuilder
0000000000000000000000000000000000000000;;		AddToScheme        = localSchemeBuilder.AddToScheme
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// We only register manually written functions here. The registration of the
0000000000000000000000000000000000000000;;		// generated functions takes place in the generated files. The separation
0000000000000000000000000000000000000000;;		// makes the code compile even when the generated files are missing.
0000000000000000000000000000000000000000;;		localSchemeBuilder.Register(addKnownTypes)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds the list of known types to api.Scheme.
0000000000000000000000000000000000000000;;	func addKnownTypes(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&TestType{},
0000000000000000000000000000000000000000;;			&TestTypeList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&metav1.Status{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
