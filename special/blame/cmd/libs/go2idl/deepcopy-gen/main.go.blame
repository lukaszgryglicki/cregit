0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
362565086b8eb9d3142a56bbd4aec77f669fda90;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// deepcopy-gen is a tool for auto-generating DeepCopy functions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Given a list of input directories, it will generate functions that
0000000000000000000000000000000000000000;;	// efficiently perform a full deep-copy of each type.  For any type that
0000000000000000000000000000000000000000;;	// offers a `.DeepCopy()` method, it will simply call that.  Otherwise it will
0000000000000000000000000000000000000000;;	// use standard value assignment whenever possible.  If that is not possible it
0000000000000000000000000000000000000000;;	// will try to call its own generated copy function for the type, if the type is
0000000000000000000000000000000000000000;;	// within the allowed root packages.  Failing that, it will fall back on
0000000000000000000000000000000000000000;;	// `conversion.Cloner.DeepCopy(val)` to make the copy.  The resulting file will
0000000000000000000000000000000000000000;;	// be stored in the same directory as the processed source package.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generation is governed by comment tags in the source.  Any package may
0000000000000000000000000000000000000000;;	// request DeepCopy generation by including a comment in the file-comments of
0000000000000000000000000000000000000000;;	// one file, of the form:
0000000000000000000000000000000000000000;;	//   // +k8s:deepcopy-gen=package
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Packages can request that the generated DeepCopy functions be registered
0000000000000000000000000000000000000000;;	// with an `init()` function call to `Scheme.AddGeneratedDeepCopyFuncs()` by
0000000000000000000000000000000000000000;;	// changing the tag to:
0000000000000000000000000000000000000000;;	//   // +k8s:deepcopy-gen=package,register
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// DeepCopy functions can be generated for individual types, rather than the
0000000000000000000000000000000000000000;;	// entire package by specifying a comment on the type definion of the form:
0000000000000000000000000000000000000000;;	//   // +k8s:deepcopy-gen=true
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When generating for a whole package, individual types may opt out of
0000000000000000000000000000000000000000;;	// DeepCopy generation by specifying a comment on the of the form:
0000000000000000000000000000000000000000;;	//   // +k8s:deepcopy-gen=false
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note that registration is a whole-package option, and is not available for
0000000000000000000000000000000000000000;;	// individual types.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/args"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/examples/deepcopy-gen/generators"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		arguments := args.Default()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Override defaults.
0000000000000000000000000000000000000000;;		arguments.OutputFileBaseName = "deepcopy_generated"
0000000000000000000000000000000000000000;;		arguments.GoHeaderFilePath = filepath.Join(args.DefaultSourceTree(), "k8s.io/kubernetes/hack/boilerplate/boilerplate.go.txt")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Custom args.
0000000000000000000000000000000000000000;;		customArgs := &generators.CustomArgs{}
0000000000000000000000000000000000000000;;		pflag.CommandLine.StringSliceVar(&customArgs.BoundingDirs, "bounding-dirs", customArgs.BoundingDirs,
0000000000000000000000000000000000000000;;			"Comma-separated list of import paths which bound the types for which deep-copies will be generated.")
0000000000000000000000000000000000000000;;		arguments.CustomArgs = customArgs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run it.
0000000000000000000000000000000000000000;;		if err := arguments.Execute(
0000000000000000000000000000000000000000;;			generators.NameSystems(),
0000000000000000000000000000000000000000;;			generators.DefaultNameSystem(),
0000000000000000000000000000000000000000;;			generators.Packages,
0000000000000000000000000000000000000000;;		); err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(2).Info("Completed successfully.")
0000000000000000000000000000000000000000;;	}
