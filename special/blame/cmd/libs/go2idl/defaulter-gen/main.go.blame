0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
08a24a8f92424194502d0cd33da17eb3c05c681b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaulter-gen is a tool for auto-generating Defaulter functions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Given a list of input directories, it will scan for top level types
0000000000000000000000000000000000000000;;	// and generate efficient defaulters for an entire object from the sum
0000000000000000000000000000000000000000;;	// of the SetDefault_* methods contained in the object tree.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generation is governed by comment tags in the source.  Any package may
0000000000000000000000000000000000000000;;	// request defaulter generation by including one or more comment tags at
0000000000000000000000000000000000000000;;	// the package comment level:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   // +k8s:defaulter-gen=<field-name-to-flag>
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// which will create defaulters for any type that contains the provided
0000000000000000000000000000000000000000;;	// field name (if the type has defaulters). Any type may request explicit
0000000000000000000000000000000000000000;;	// defaulting by providing the comment tag:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   // +k8s:defaulter-gen=true|false
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An existing defaulter method (`SetDefaults_TYPE`) can provide the
0000000000000000000000000000000000000000;;	// comment tag:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   // +k8s:defaulter-gen=covers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// to indicate that the defaulter does not or should not call any nested
0000000000000000000000000000000000000000;;	// defaulters.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/args"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/examples/defaulter-gen/generators"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		arguments := args.Default()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Override defaults.
0000000000000000000000000000000000000000;;		arguments.OutputFileBaseName = "zz_generated.defaults"
0000000000000000000000000000000000000000;;		arguments.GoHeaderFilePath = filepath.Join(args.DefaultSourceTree(), "k8s.io/kubernetes/hack/boilerplate/boilerplate.go.txt")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Custom args.
0000000000000000000000000000000000000000;;		customArgs := &generators.CustomArgs{
0000000000000000000000000000000000000000;;			ExtraPeerDirs: []string{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pflag.CommandLine.StringSliceVar(&customArgs.ExtraPeerDirs, "extra-peer-dirs", customArgs.ExtraPeerDirs,
0000000000000000000000000000000000000000;;			"Comma-separated list of import paths which are considered, after tag-specified peers, for conversions.")
0000000000000000000000000000000000000000;;		arguments.CustomArgs = customArgs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run it.
0000000000000000000000000000000000000000;;		if err := arguments.Execute(
0000000000000000000000000000000000000000;;			generators.NameSystems(),
0000000000000000000000000000000000000000;;			generators.DefaultNameSystem(),
0000000000000000000000000000000000000000;;			generators.Packages,
0000000000000000000000000000000000000000;;		); err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(2).Info("Completed successfully.")
0000000000000000000000000000000000000000;;	}
