0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
90e753b7d893977fcb7246ab3277eaab11726cf4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generators
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/generator"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;		clientgentypes "k8s.io/kubernetes/cmd/libs/go2idl/client-gen/types"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// informerGenerator produces a file of listers for a given GroupVersion and
0000000000000000000000000000000000000000;;	// type.
0000000000000000000000000000000000000000;;	type informerGenerator struct {
0000000000000000000000000000000000000000;;		generator.DefaultGen
0000000000000000000000000000000000000000;;		outputPackage             string
0000000000000000000000000000000000000000;;		groupVersion              clientgentypes.GroupVersion
0000000000000000000000000000000000000000;;		typeToGenerate            *types.Type
0000000000000000000000000000000000000000;;		imports                   namer.ImportTracker
0000000000000000000000000000000000000000;;		clientSetPackage          string
0000000000000000000000000000000000000000;;		listersPackage            string
0000000000000000000000000000000000000000;;		internalInterfacesPackage string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ generator.Generator = &informerGenerator{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *informerGenerator) Filter(c *generator.Context, t *types.Type) bool {
0000000000000000000000000000000000000000;;		return t == g.typeToGenerate
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *informerGenerator) Namers(c *generator.Context) namer.NameSystems {
0000000000000000000000000000000000000000;;		return namer.NameSystems{
0000000000000000000000000000000000000000;;			"raw": namer.NewRawNamer(g.outputPackage, g.imports),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *informerGenerator) Imports(c *generator.Context) (imports []string) {
0000000000000000000000000000000000000000;;		imports = append(imports, g.imports.ImportLines()...)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *informerGenerator) GenerateType(c *generator.Context, t *types.Type, w io.Writer) error {
0000000000000000000000000000000000000000;;		sw := generator.NewSnippetWriter(w, c, "$", "$")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(5).Infof("processing type %v", t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//listerPackage := "k8s.io/kubernetes/pkg/client/listers/" + g.groupVersion.Group.NonEmpty() + "/" + strings.ToLower(g.groupVersion.Version.NonEmpty())
0000000000000000000000000000000000000000;;		listerPackage := fmt.Sprintf("%s/%s/%s", g.listersPackage, g.groupVersion.Group.NonEmpty(), strings.ToLower(g.groupVersion.Version.NonEmpty()))
0000000000000000000000000000000000000000;;		clientSetInterface := c.Universe.Type(types.Name{Package: g.clientSetPackage, Name: "Interface"})
0000000000000000000000000000000000000000;;		informerFor := "InformerFor"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m := map[string]interface{}{
0000000000000000000000000000000000000000;;			"apiScheme":                       c.Universe.Type(apiScheme),
0000000000000000000000000000000000000000;;			"cacheIndexers":                   c.Universe.Type(cacheIndexers),
0000000000000000000000000000000000000000;;			"cacheListWatch":                  c.Universe.Type(cacheListWatch),
0000000000000000000000000000000000000000;;			"cacheMetaNamespaceIndexFunc":     c.Universe.Function(cacheMetaNamespaceIndexFunc),
0000000000000000000000000000000000000000;;			"cacheNamespaceIndex":             c.Universe.Variable(cacheNamespaceIndex),
0000000000000000000000000000000000000000;;			"cacheNewSharedIndexInformer":     c.Universe.Function(cacheNewSharedIndexInformer),
0000000000000000000000000000000000000000;;			"cacheSharedIndexInformer":        c.Universe.Type(cacheSharedIndexInformer),
0000000000000000000000000000000000000000;;			"clientSetInterface":              clientSetInterface,
0000000000000000000000000000000000000000;;			"group":                           namer.IC(g.groupVersion.Group.NonEmpty()),
0000000000000000000000000000000000000000;;			"informerFor":                     informerFor,
0000000000000000000000000000000000000000;;			"interfacesSharedInformerFactory": c.Universe.Type(types.Name{Package: g.internalInterfacesPackage, Name: "SharedInformerFactory"}),
0000000000000000000000000000000000000000;;			"listOptions":                     c.Universe.Type(listOptions),
0000000000000000000000000000000000000000;;			"lister":                          c.Universe.Type(types.Name{Package: listerPackage, Name: t.Name.Name + "Lister"}),
0000000000000000000000000000000000000000;;			"namespaceAll":                    c.Universe.Type(metav1NamespaceAll),
0000000000000000000000000000000000000000;;			"namespaced":                      !extractBoolTagOrDie("nonNamespaced", t.SecondClosestCommentLines),
0000000000000000000000000000000000000000;;			"newLister":                       c.Universe.Function(types.Name{Package: listerPackage, Name: "New" + t.Name.Name + "Lister"}),
0000000000000000000000000000000000000000;;			"runtimeObject":                   c.Universe.Type(runtimeObject),
0000000000000000000000000000000000000000;;			"timeDuration":                    c.Universe.Type(timeDuration),
0000000000000000000000000000000000000000;;			"type":                            t,
0000000000000000000000000000000000000000;;			"v1ListOptions":                   c.Universe.Type(v1ListOptions),
0000000000000000000000000000000000000000;;			"version":                         namer.IC(g.groupVersion.Version.String()),
0000000000000000000000000000000000000000;;			"watchInterface":                  c.Universe.Type(watchInterface),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sw.Do(typeInformerInterface, m)
0000000000000000000000000000000000000000;;		sw.Do(typeInformerStruct, m)
0000000000000000000000000000000000000000;;		if len(g.groupVersion.Version) == 0 {
0000000000000000000000000000000000000000;;			sw.Do(typeInformerConstructorInternal, m)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			sw.Do(typeInformerConstructorVersioned, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sw.Do(typeInformerInformer, m)
0000000000000000000000000000000000000000;;		sw.Do(typeInformerLister, m)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sw.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeInformerInterface = `
0000000000000000000000000000000000000000;;	// $.type|public$Informer provides access to a shared informer and lister for
0000000000000000000000000000000000000000;;	// $.type|publicPlural$.
0000000000000000000000000000000000000000;;	type $.type|public$Informer interface {
0000000000000000000000000000000000000000;;		Informer() $.cacheSharedIndexInformer|raw$
0000000000000000000000000000000000000000;;		Lister() $.lister|raw$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeInformerStruct = `
0000000000000000000000000000000000000000;;	type $.type|private$Informer struct {
0000000000000000000000000000000000000000;;		factory $.interfacesSharedInformerFactory|raw$
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeInformerConstructorInternal = `
0000000000000000000000000000000000000000;;	func new$.type|public$Informer(client $.clientSetInterface|raw$, resyncPeriod $.timeDuration|raw$) $.cacheSharedIndexInformer|raw$ {
0000000000000000000000000000000000000000;;		sharedIndexInformer := $.cacheNewSharedIndexInformer|raw$(
0000000000000000000000000000000000000000;;			&$.cacheListWatch|raw${
0000000000000000000000000000000000000000;;				ListFunc: func(options $.v1ListOptions|raw$) ($.runtimeObject|raw$, error) {
0000000000000000000000000000000000000000;;					return client.$.group$$.version$().$.type|publicPlural$($if .namespaced$$.namespaceAll|raw$$end$).List(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				WatchFunc: func(options $.v1ListOptions|raw$) ($.watchInterface|raw$, error) {
0000000000000000000000000000000000000000;;					return client.$.group$$.version$().$.type|publicPlural$($if .namespaced$$.namespaceAll|raw$$end$).Watch(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&$.type|raw${},
0000000000000000000000000000000000000000;;			resyncPeriod,
0000000000000000000000000000000000000000;;			$.cacheIndexers|raw${$.cacheNamespaceIndex|raw$: $.cacheMetaNamespaceIndexFunc|raw$},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sharedIndexInformer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeInformerConstructorVersioned = `
0000000000000000000000000000000000000000;;	func new$.type|public$Informer(client $.clientSetInterface|raw$, resyncPeriod $.timeDuration|raw$) $.cacheSharedIndexInformer|raw$ {
0000000000000000000000000000000000000000;;		sharedIndexInformer := $.cacheNewSharedIndexInformer|raw$(
0000000000000000000000000000000000000000;;			&$.cacheListWatch|raw${
0000000000000000000000000000000000000000;;				ListFunc: func(options $.v1ListOptions|raw$) ($.runtimeObject|raw$, error) {
0000000000000000000000000000000000000000;;					return client.$.group$$.version$().$.type|publicPlural$($if .namespaced$$.namespaceAll|raw$$end$).List(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				WatchFunc: func(options $.v1ListOptions|raw$) ($.watchInterface|raw$, error) {
0000000000000000000000000000000000000000;;					return client.$.group$$.version$().$.type|publicPlural$($if .namespaced$$.namespaceAll|raw$$end$).Watch(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&$.type|raw${},
0000000000000000000000000000000000000000;;			resyncPeriod,
0000000000000000000000000000000000000000;;			$.cacheIndexers|raw${$.cacheNamespaceIndex|raw$: $.cacheMetaNamespaceIndexFunc|raw$},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sharedIndexInformer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeInformerInformer = `
0000000000000000000000000000000000000000;;	func (f *$.type|private$Informer) Informer() $.cacheSharedIndexInformer|raw$ {
0000000000000000000000000000000000000000;;		return f.factory.$.informerFor$(&$.type|raw${}, new$.type|public$Informer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeInformerLister = `
0000000000000000000000000000000000000000;;	func (f *$.type|private$Informer) Lister() $.lister|raw$ {
0000000000000000000000000000000000000000;;		return $.newLister|raw$(f.Informer().GetIndexer())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
