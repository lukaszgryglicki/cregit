0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ebf9cb8298907e456c57393b9ba4f41ee9ec0dec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The external controller manager is responsible for running controller loops that
0000000000000000000000000000000000000000;;	// are cloud provider dependent. It uses the API to listen to new events on resources.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/healthz"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/logs"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/cloud-controller-manager/app"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/cloud-controller-manager/app/options"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/client/metrics/prometheus" // for client metric registration
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/cloudprovider/providers"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/version/prometheus" // for version metric registration
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/version/verflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		healthz.DefaultHealthz()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		s := options.NewCloudControllerManagerServer()
0000000000000000000000000000000000000000;;		s.AddFlags(pflag.CommandLine)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flag.InitFlags()
0000000000000000000000000000000000000000;;		logs.InitLogs()
0000000000000000000000000000000000000000;;		defer logs.FlushLogs()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		verflag.PrintAndExitIfRequested()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s.CloudProvider == "" {
0000000000000000000000000000000000000000;;			glog.Errorf("--cloud-provider cannot be empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cloud, err := cloudprovider.InitCloudProvider(s.CloudProvider, s.CloudConfigFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Cloud provider could not be initialized: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := app.Run(s, cloud); err != nil {
0000000000000000000000000000000000000000;;			fmt.Fprintf(os.Stderr, "%v\n", err)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
