0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
690c7079c751763b67afda55ea832fce9e0a9e50;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A binary that can morph into all of the other kubernetes binaries. You can
0000000000000000000000000000000000000000;;	// also soft-link to it busybox style.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/client/metrics/prometheus" // for client metric registration
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/version/prometheus"        // for version metric registration
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		hk := HyperKube{
0000000000000000000000000000000000000000;;			Name: "hyperkube",
0000000000000000000000000000000000000000;;			Long: "This is an all-in-one binary that can run any of the various Kubernetes servers.",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hk.AddServer(NewKubectlServer())
0000000000000000000000000000000000000000;;		hk.AddServer(NewKubeAPIServer())
0000000000000000000000000000000000000000;;		hk.AddServer(NewKubeControllerManager())
0000000000000000000000000000000000000000;;		hk.AddServer(NewScheduler())
0000000000000000000000000000000000000000;;		hk.AddServer(NewKubelet())
0000000000000000000000000000000000000000;;		hk.AddServer(NewKubeProxy())
0000000000000000000000000000000000000000;;		hk.AddServer(NewKubeAggregator())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//Federation servers
0000000000000000000000000000000000000000;;		hk.AddServer(NewFederationAPIServer())
0000000000000000000000000000000000000000;;		hk.AddServer(NewFederationCMServer())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hk.RunToExit(os.Args)
0000000000000000000000000000000000000000;;	}
