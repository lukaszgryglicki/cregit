0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c33f8043700ee62659c752a261b38ef7f3261415;pkg/hyperkube/server.go[pkg/hyperkube/server.go][cmd/hyperkube/server.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type serverRunFunc func(s *Server, args []string) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Server describes a server that this binary can morph into.
0000000000000000000000000000000000000000;;	type Server struct {
0000000000000000000000000000000000000000;;		SimpleUsage     string        // One line description of the server.
0000000000000000000000000000000000000000;;		Long            string        // Longer free form description of the server
0000000000000000000000000000000000000000;;		Run             serverRunFunc // Run the server.  This is not expected to return.
0000000000000000000000000000000000000000;;		AlternativeName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flags *pflag.FlagSet // Flags for the command (and all dependents)
0000000000000000000000000000000000000000;;		name  string
0000000000000000000000000000000000000000;;		hk    *HyperKube
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Usage returns the full usage string including all of the flags.
0000000000000000000000000000000000000000;;	func (s *Server) Usage() error {
0000000000000000000000000000000000000000;;		tt := `{{if .Long}}{{.Long | trim | wrap ""}}
0000000000000000000000000000000000000000;;	{{end}}Usage:
0000000000000000000000000000000000000000;;	  {{.SimpleUsage}} [flags]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Available Flags:
0000000000000000000000000000000000000000;;	{{.Flags.FlagUsages}}`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return util.ExecuteTemplate(s.hk.Out(), tt, s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Name returns the name of the command as derived from the usage line.
0000000000000000000000000000000000000000;;	func (s *Server) Name() string {
0000000000000000000000000000000000000000;;		if s.name != "" {
0000000000000000000000000000000000000000;;			return s.name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		name := s.SimpleUsage
0000000000000000000000000000000000000000;;		i := strings.Index(name, " ")
0000000000000000000000000000000000000000;;		if i >= 0 {
0000000000000000000000000000000000000000;;			name = name[:i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Flags returns a flagset for this server
0000000000000000000000000000000000000000;;	func (s *Server) Flags() *pflag.FlagSet {
0000000000000000000000000000000000000000;;		if s.flags == nil {
0000000000000000000000000000000000000000;;			s.flags = pflag.NewFlagSet(s.Name(), pflag.ContinueOnError)
0000000000000000000000000000000000000000;;			s.flags.SetOutput(ioutil.Discard)
0000000000000000000000000000000000000000;;			s.flags.SetNormalizeFunc(flag.WordSepNormalizeFunc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.flags
0000000000000000000000000000000000000000;;	}
