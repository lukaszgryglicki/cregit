0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c33f8043700ee62659c752a261b38ef7f3261415;pkg/hyperkube/hyperkube_test.go[pkg/hyperkube/hyperkube_test.go][cmd/hyperkube/hyperkube_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type result struct {
0000000000000000000000000000000000000000;;		err    error
0000000000000000000000000000000000000000;;		output string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testServer(n string) *Server {
0000000000000000000000000000000000000000;;		return &Server{
0000000000000000000000000000000000000000;;			SimpleUsage: n,
0000000000000000000000000000000000000000;;			Long:        fmt.Sprintf("A simple server named %s", n),
0000000000000000000000000000000000000000;;			Run: func(s *Server, args []string) error {
0000000000000000000000000000000000000000;;				s.hk.Printf("%s Run\n", s.Name())
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func testServerError(n string) *Server {
0000000000000000000000000000000000000000;;		return &Server{
0000000000000000000000000000000000000000;;			SimpleUsage: n,
0000000000000000000000000000000000000000;;			Long:        fmt.Sprintf("A simple server named %s that returns an error", n),
0000000000000000000000000000000000000000;;			Run: func(s *Server, args []string) error {
0000000000000000000000000000000000000000;;				s.hk.Printf("%s Run\n", s.Name())
0000000000000000000000000000000000000000;;				return errors.New("server returning error")
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const defaultCobraMessage = "default message from cobra command"
0000000000000000000000000000000000000000;;	const defaultCobraSubMessage = "default sub-message from cobra command"
0000000000000000000000000000000000000000;;	const cobraMessageDesc = "message to print"
0000000000000000000000000000000000000000;;	const cobraSubMessageDesc = "sub-message to print"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testCobraCommand(n string) *Server {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var cobraServer *Server
0000000000000000000000000000000000000000;;		var msg string
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   n,
0000000000000000000000000000000000000000;;			Long:  n,
0000000000000000000000000000000000000000;;			Short: n,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				cobraServer.hk.Printf("msg: %s\n", msg)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.PersistentFlags().StringVar(&msg, "msg", defaultCobraMessage, cobraMessageDesc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var subMsg string
0000000000000000000000000000000000000000;;		subCmdName := "subcommand"
0000000000000000000000000000000000000000;;		subCmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   subCmdName,
0000000000000000000000000000000000000000;;			Long:  subCmdName,
0000000000000000000000000000000000000000;;			Short: subCmdName,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				cobraServer.hk.Printf("submsg: %s", subMsg)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		subCmd.PersistentFlags().StringVar(&subMsg, "submsg", defaultCobraSubMessage, cobraSubMessageDesc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.AddCommand(subCmd)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		localFlags := cmd.LocalFlags()
0000000000000000000000000000000000000000;;		localFlags.SetInterspersed(false)
0000000000000000000000000000000000000000;;		s := &Server{
0000000000000000000000000000000000000000;;			SimpleUsage: n,
0000000000000000000000000000000000000000;;			Long:        fmt.Sprintf("A server named %s which uses a cobra command", n),
0000000000000000000000000000000000000000;;			Run: func(s *Server, args []string) error {
0000000000000000000000000000000000000000;;				cobraServer = s
0000000000000000000000000000000000000000;;				cmd.SetOutput(s.hk.Out())
0000000000000000000000000000000000000000;;				cmd.SetArgs(args)
0000000000000000000000000000000000000000;;				return cmd.Execute()
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			flags: localFlags,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func runFull(t *testing.T, args string) *result {
0000000000000000000000000000000000000000;;		buf := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		hk := HyperKube{
0000000000000000000000000000000000000000;;			Name: "hyperkube",
0000000000000000000000000000000000000000;;			Long: "hyperkube is an all-in-one server binary.",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		hk.SetOut(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hk.AddServer(testServer("test1"))
0000000000000000000000000000000000000000;;		hk.AddServer(testServer("test2"))
0000000000000000000000000000000000000000;;		hk.AddServer(testServer("test3"))
0000000000000000000000000000000000000000;;		hk.AddServer(testServerError("test-error"))
0000000000000000000000000000000000000000;;		hk.AddServer(testCobraCommand("test-cobra-command"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a := strings.Split(args, " ")
0000000000000000000000000000000000000000;;		t.Logf("Running full with args: %q", a)
0000000000000000000000000000000000000000;;		err := hk.Run(a)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r := &result{err, buf.String()}
0000000000000000000000000000000000000000;;		t.Logf("Result err: %v, output: %q", r.err, r.output)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRun(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test1")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "test1 Run")
0000000000000000000000000000000000000000;;		assert.NoError(t, x.err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLinkRun(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "test1")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "test1 Run")
0000000000000000000000000000000000000000;;		assert.NoError(t, x.err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopNoArgs(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube")
0000000000000000000000000000000000000000;;		assert.EqualError(t, x.err, "no server specified")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBadServer(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube bad-server")
0000000000000000000000000000000000000000;;		assert.EqualError(t, x.err, "Server not found: bad-server")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "Usage")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopHelp(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube --help")
0000000000000000000000000000000000000000;;		assert.NoError(t, x.err)
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "all-in-one")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "A simple server named test1")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopFlags(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube --help test1")
0000000000000000000000000000000000000000;;		assert.NoError(t, x.err)
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "all-in-one")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "A simple server named test1")
0000000000000000000000000000000000000000;;		assert.NotContains(t, x.output, "test1 Run")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopFlagsBad(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube --bad-flag")
0000000000000000000000000000000000000000;;		assert.EqualError(t, x.err, "unknown flag: --bad-flag")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "all-in-one")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "A simple server named test1")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServerHelp(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test1 --help")
0000000000000000000000000000000000000000;;		assert.NoError(t, x.err)
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "A simple server named test1")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "-h, --help")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "help for hyperkube")
0000000000000000000000000000000000000000;;		assert.NotContains(t, x.output, "test1 Run")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServerFlagsBad(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test1 --bad-flag")
0000000000000000000000000000000000000000;;		assert.EqualError(t, x.err, "unknown flag: --bad-flag")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "A simple server named test1")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "-h, --help")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "help for hyperkube")
0000000000000000000000000000000000000000;;		assert.NotContains(t, x.output, "test1 Run")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServerError(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test-error")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "test-error Run")
0000000000000000000000000000000000000000;;		assert.EqualError(t, x.err, "server returning error")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCobraCommandHelp(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test-cobra-command --help")
0000000000000000000000000000000000000000;;		assert.NoError(t, x.err)
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "A server named test-cobra-command which uses a cobra command")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, cobraMessageDesc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestCobraCommandDefaultMessage(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test-cobra-command")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, fmt.Sprintf("msg: %s", defaultCobraMessage))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestCobraCommandMessage(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test-cobra-command --msg foobar")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "msg: foobar")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCobraSubCommandHelp(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test-cobra-command subcommand --help")
0000000000000000000000000000000000000000;;		assert.NoError(t, x.err)
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, cobraSubMessageDesc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestCobraSubCommandDefaultMessage(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test-cobra-command subcommand")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, fmt.Sprintf("submsg: %s", defaultCobraSubMessage))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestCobraSubCommandMessage(t *testing.T) {
0000000000000000000000000000000000000000;;		x := runFull(t, "hyperkube test-cobra-command subcommand --submsg foobar")
0000000000000000000000000000000000000000;;		assert.Contains(t, x.output, "submsg: foobar")
0000000000000000000000000000000000000000;;	}
