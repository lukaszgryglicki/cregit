0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
05ad4e807c3275b4391da1d14c79356a91946443;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubelet/app"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubelet/app/options"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewKubelet creates a new hyperkube Server object that includes the
0000000000000000000000000000000000000000;;	// description and flags.
0000000000000000000000000000000000000000;;	func NewKubelet() *Server {
0000000000000000000000000000000000000000;;		s := options.NewKubeletServer()
0000000000000000000000000000000000000000;;		hks := Server{
0000000000000000000000000000000000000000;;			name:        "kubelet",
0000000000000000000000000000000000000000;;			SimpleUsage: "kubelet",
0000000000000000000000000000000000000000;;			Long: `The kubelet binary is responsible for maintaining a set of containers on a
0000000000000000000000000000000000000000;;			particular node. It syncs data from a variety of sources including a
0000000000000000000000000000000000000000;;			Kubernetes API server, an etcd cluster, HTTP endpoint or local file. It then
0000000000000000000000000000000000000000;;			queries Docker to see what is currently running.  It synchronizes the
0000000000000000000000000000000000000000;;			configuration data, with the running set of containers by starting or stopping
0000000000000000000000000000000000000000;;			Docker containers.`,
0000000000000000000000000000000000000000;;			Run: func(_ *Server, _ []string) error {
0000000000000000000000000000000000000000;;				return app.Run(s, nil)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.AddFlags(hks.Flags())
0000000000000000000000000000000000000000;;		return &hks
0000000000000000000000000000000000000000;;	}
