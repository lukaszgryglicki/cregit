0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b31514160ce597825fe7e9fb2ad878d65a0dda01;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package images
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type getCoreImageTest struct {
0000000000000000000000000000000000000000;;		i string
0000000000000000000000000000000000000000;;		c *kubeadmapi.MasterConfiguration
0000000000000000000000000000000000000000;;		o string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		testversion = "1"
0000000000000000000000000000000000000000;;		gcrPrefix   = "gcr.io/google_containers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetCoreImage(t *testing.T) {
0000000000000000000000000000000000000000;;		var imageTest = []struct {
0000000000000000000000000000000000000000;;			t        getCoreImageTest
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{getCoreImageTest{o: "override"}, "override"},
0000000000000000000000000000000000000000;;			{getCoreImageTest{
0000000000000000000000000000000000000000;;				i: KubeEtcdImage,
0000000000000000000000000000000000000000;;				c: &kubeadmapi.MasterConfiguration{ImageRepository: gcrPrefix}},
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s/%s-%s:%s", gcrPrefix, "etcd", runtime.GOARCH, etcdVersion),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{getCoreImageTest{
0000000000000000000000000000000000000000;;				i: KubeAPIServerImage,
0000000000000000000000000000000000000000;;				c: &kubeadmapi.MasterConfiguration{ImageRepository: gcrPrefix, KubernetesVersion: testversion}},
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s/%s-%s:%s", gcrPrefix, "kube-apiserver", runtime.GOARCH, testversion),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{getCoreImageTest{
0000000000000000000000000000000000000000;;				i: KubeControllerManagerImage,
0000000000000000000000000000000000000000;;				c: &kubeadmapi.MasterConfiguration{ImageRepository: gcrPrefix, KubernetesVersion: testversion}},
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s/%s-%s:%s", gcrPrefix, "kube-controller-manager", runtime.GOARCH, testversion),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{getCoreImageTest{
0000000000000000000000000000000000000000;;				i: KubeSchedulerImage,
0000000000000000000000000000000000000000;;				c: &kubeadmapi.MasterConfiguration{ImageRepository: gcrPrefix, KubernetesVersion: testversion}},
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s/%s-%s:%s", gcrPrefix, "kube-scheduler", runtime.GOARCH, testversion),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{getCoreImageTest{
0000000000000000000000000000000000000000;;				i: KubeProxyImage,
0000000000000000000000000000000000000000;;				c: &kubeadmapi.MasterConfiguration{ImageRepository: gcrPrefix, KubernetesVersion: testversion}},
0000000000000000000000000000000000000000;;				fmt.Sprintf("%s/%s-%s:%s", gcrPrefix, "kube-proxy", runtime.GOARCH, testversion),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, it := range imageTest {
0000000000000000000000000000000000000000;;			actual := GetCoreImage(it.t.i, it.t.c, it.t.o)
0000000000000000000000000000000000000000;;			if actual != it.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed GetCoreImage:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					it.expected,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
