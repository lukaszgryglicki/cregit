0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
abbc5cc4b319286e99f52ea143208fa61484ae3d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package constants
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/version"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// KubernetesDir is the directory kubernetes owns for storing various configuration files
0000000000000000000000000000000000000000;;		KubernetesDir = "/etc/kubernetes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManifestsSubDirName = "manifests"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CACertAndKeyBaseName = "ca"
0000000000000000000000000000000000000000;;		CACertName           = "ca.crt"
0000000000000000000000000000000000000000;;		CAKeyName            = "ca.key"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		APIServerCertAndKeyBaseName = "apiserver"
0000000000000000000000000000000000000000;;		APIServerCertName           = "apiserver.crt"
0000000000000000000000000000000000000000;;		APIServerKeyName            = "apiserver.key"
0000000000000000000000000000000000000000;;		APIServerCertCommonName     = "kube-apiserver" //used as subject.commonname attribute (CN)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		APIServerKubeletClientCertAndKeyBaseName = "apiserver-kubelet-client"
0000000000000000000000000000000000000000;;		APIServerKubeletClientCertName           = "apiserver-kubelet-client.crt"
0000000000000000000000000000000000000000;;		APIServerKubeletClientKeyName            = "apiserver-kubelet-client.key"
0000000000000000000000000000000000000000;;		APIServerKubeletClientCertCommonName     = "kube-apiserver-kubelet-client" //used as subject.commonname attribute (CN)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceAccountKeyBaseName    = "sa"
0000000000000000000000000000000000000000;;		ServiceAccountPublicKeyName  = "sa.pub"
0000000000000000000000000000000000000000;;		ServiceAccountPrivateKeyName = "sa.key"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FrontProxyCACertAndKeyBaseName = "front-proxy-ca"
0000000000000000000000000000000000000000;;		FrontProxyCACertName           = "front-proxy-ca.crt"
0000000000000000000000000000000000000000;;		FrontProxyCAKeyName            = "front-proxy-ca.key"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FrontProxyClientCertAndKeyBaseName = "front-proxy-client"
0000000000000000000000000000000000000000;;		FrontProxyClientCertName           = "front-proxy-client.crt"
0000000000000000000000000000000000000000;;		FrontProxyClientKeyName            = "front-proxy-client.key"
0000000000000000000000000000000000000000;;		FrontProxyClientCertCommonName     = "front-proxy-client" //used as subject.commonname attribute (CN)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AdminKubeConfigFileName             = "admin.conf"
0000000000000000000000000000000000000000;;		KubeletKubeConfigFileName           = "kubelet.conf"
0000000000000000000000000000000000000000;;		ControllerManagerKubeConfigFileName = "controller-manager.conf"
0000000000000000000000000000000000000000;;		SchedulerKubeConfigFileName         = "scheduler.conf"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Some well-known users and groups in the core Kubernetes authorization system
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ControllerManagerUser   = "system:kube-controller-manager"
0000000000000000000000000000000000000000;;		SchedulerUser           = "system:kube-scheduler"
0000000000000000000000000000000000000000;;		MastersGroup            = "system:masters"
0000000000000000000000000000000000000000;;		NodesGroup              = "system:nodes"
0000000000000000000000000000000000000000;;		NodesClusterRoleBinding = "system:node"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Constants for what we name our ServiceAccounts with limited access to the cluster in case of RBAC
0000000000000000000000000000000000000000;;		KubeDNSServiceAccountName   = "kube-dns"
0000000000000000000000000000000000000000;;		KubeProxyServiceAccountName = "kube-proxy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// APICallRetryInterval defines how long kubeadm should wait before retrying a failed API operation
0000000000000000000000000000000000000000;;		APICallRetryInterval = 500 * time.Millisecond
0000000000000000000000000000000000000000;;		// DiscoveryRetryInterval specifies how long kubeadm should wait before retrying to connect to the master when doing discovery
0000000000000000000000000000000000000000;;		DiscoveryRetryInterval = 5 * time.Second
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Minimum amount of nodes the Service subnet should allow.
0000000000000000000000000000000000000000;;		// We need at least ten, because the DNS service is always at the tenth cluster clusterIP
0000000000000000000000000000000000000000;;		MinimumAddressesInServiceSubnet = 10
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultTokenDuration specifies the default amount of time that a bootstrap token will be valid
0000000000000000000000000000000000000000;;		// Default behaviour is "never expire" == 0
0000000000000000000000000000000000000000;;		DefaultTokenDuration = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LabelNodeRoleMaster specifies that a node is a master
0000000000000000000000000000000000000000;;		// It's copied over to kubeadm until it's merged in core: https://github.com/kubernetes/kubernetes/pull/39112
0000000000000000000000000000000000000000;;		LabelNodeRoleMaster = "node-role.kubernetes.io/master"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MinExternalEtcdVersion indicates minimum external etcd version which kubeadm supports
0000000000000000000000000000000000000000;;		MinExternalEtcdVersion = "3.0.14"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MasterToleration is the toleration to apply on the PodSpec for being able to run that Pod on the master
0000000000000000000000000000000000000000;;		MasterToleration = v1.Toleration{
0000000000000000000000000000000000000000;;			Key:    LabelNodeRoleMaster,
0000000000000000000000000000000000000000;;			Effect: v1.TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthorizationPolicyPath        = filepath.Join(KubernetesDir, "abac_policy.json")
0000000000000000000000000000000000000000;;		AuthorizationWebhookConfigPath = filepath.Join(KubernetesDir, "webhook_authz.conf")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultTokenUsages specifies the default functions a token will get
0000000000000000000000000000000000000000;;		DefaultTokenUsages = []string{"signing", "authentication"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MinimumControlPlaneVersion specifies the minimum control plane version kubeadm can deploy
0000000000000000000000000000000000000000;;		MinimumControlPlaneVersion = version.MustParseSemantic("v1.7.0")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BuildStaticManifestFilepath returns the location on the disk where the Static Pod should be present
0000000000000000000000000000000000000000;;	func BuildStaticManifestFilepath(componentName string) string {
0000000000000000000000000000000000000000;;		return filepath.Join(KubernetesDir, ManifestsSubDirName, componentName+".yaml")
0000000000000000000000000000000000000000;;	}
