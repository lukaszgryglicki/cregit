0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7bb3b7d27073303c96392a8f73831777626218a4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFor(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			d      kubeadm.NodeConfiguration
0000000000000000000000000000000000000000;;			expect bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{d: kubeadm.NodeConfiguration{}, expect: false},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				d: kubeadm.NodeConfiguration{
0000000000000000000000000000000000000000;;					DiscoveryFile: "notnil",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expect: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				d: kubeadm.NodeConfiguration{
0000000000000000000000000000000000000000;;					DiscoveryFile: "https://localhost",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expect: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				d: kubeadm.NodeConfiguration{
0000000000000000000000000000000000000000;;					DiscoveryFile: "notnil",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expect: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				d: kubeadm.NodeConfiguration{
0000000000000000000000000000000000000000;;					DiscoveryToken: "foo.bar@foobar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expect: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			_, actual := For(&rt.d)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expect {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed For:\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.expect,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
