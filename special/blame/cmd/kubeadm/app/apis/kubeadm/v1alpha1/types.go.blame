0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9db0eae9e9d83114763752acc01f8cf31dda41c2;pkg/kubeadm/api/types.go[pkg/kubeadm/api/types.go][cmd/kubeadm/app/apis/kubeadm/v1alpha1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MasterConfiguration struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		API                API        `json:"api"`
0000000000000000000000000000000000000000;;		Etcd               Etcd       `json:"etcd"`
0000000000000000000000000000000000000000;;		Networking         Networking `json:"networking"`
0000000000000000000000000000000000000000;;		KubernetesVersion  string     `json:"kubernetesVersion"`
0000000000000000000000000000000000000000;;		CloudProvider      string     `json:"cloudProvider"`
0000000000000000000000000000000000000000;;		NodeName           string     `json:"nodeName"`
0000000000000000000000000000000000000000;;		AuthorizationModes []string   `json:"authorizationModes"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token    string        `json:"token"`
0000000000000000000000000000000000000000;;		TokenTTL time.Duration `json:"tokenTTL"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SelfHosted enables an alpha deployment type where the apiserver, scheduler, and
0000000000000000000000000000000000000000;;		// controller manager are managed by Kubernetes itself. This option is likely to
0000000000000000000000000000000000000000;;		// become the default in the future.
0000000000000000000000000000000000000000;;		SelfHosted bool `json:"selfHosted"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		APIServerExtraArgs         map[string]string `json:"apiServerExtraArgs"`
0000000000000000000000000000000000000000;;		ControllerManagerExtraArgs map[string]string `json:"controllerManagerExtraArgs"`
0000000000000000000000000000000000000000;;		SchedulerExtraArgs         map[string]string `json:"schedulerExtraArgs"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// APIServerCertSANs sets extra Subject Alternative Names for the API Server signing cert
0000000000000000000000000000000000000000;;		APIServerCertSANs []string `json:"apiServerCertSANs"`
0000000000000000000000000000000000000000;;		// CertificatesDir specifies where to store or look for all required certificates
0000000000000000000000000000000000000000;;		CertificatesDir string `json:"certificatesDir"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageRepository what container registry to pull control plane images from
0000000000000000000000000000000000000000;;		ImageRepository string `json:"imageRepository"`
0000000000000000000000000000000000000000;;		// UnifiedControlPlaneImage specifies if a specific container image should be used for all control plane components
0000000000000000000000000000000000000000;;		UnifiedControlPlaneImage string `json:"unifiedControlPlaneImage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type API struct {
0000000000000000000000000000000000000000;;		// AdvertiseAddress sets the address for the API server to advertise.
0000000000000000000000000000000000000000;;		AdvertiseAddress string `json:"advertiseAddress"`
0000000000000000000000000000000000000000;;		// BindPort sets the secure port for the API Server to bind to
0000000000000000000000000000000000000000;;		BindPort int32 `json:"bindPort"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TokenDiscovery struct {
0000000000000000000000000000000000000000;;		ID        string   `json:"id"`
0000000000000000000000000000000000000000;;		Secret    string   `json:"secret"`
0000000000000000000000000000000000000000;;		Addresses []string `json:"addresses"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Networking struct {
0000000000000000000000000000000000000000;;		ServiceSubnet string `json:"serviceSubnet"`
0000000000000000000000000000000000000000;;		PodSubnet     string `json:"podSubnet"`
0000000000000000000000000000000000000000;;		DNSDomain     string `json:"dnsDomain"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Etcd struct {
0000000000000000000000000000000000000000;;		Endpoints []string          `json:"endpoints"`
0000000000000000000000000000000000000000;;		CAFile    string            `json:"caFile"`
0000000000000000000000000000000000000000;;		CertFile  string            `json:"certFile"`
0000000000000000000000000000000000000000;;		KeyFile   string            `json:"keyFile"`
0000000000000000000000000000000000000000;;		DataDir   string            `json:"dataDir"`
0000000000000000000000000000000000000000;;		ExtraArgs map[string]string `json:"extraArgs"`
0000000000000000000000000000000000000000;;		// Image specifies which container image to use for running etcd. If empty, automatically populated by kubeadm using the image repository and default etcd version
0000000000000000000000000000000000000000;;		Image string `json:"image"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NodeConfiguration struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CACertPath               string   `json:"caCertPath"`
0000000000000000000000000000000000000000;;		DiscoveryFile            string   `json:"discoveryFile"`
0000000000000000000000000000000000000000;;		DiscoveryToken           string   `json:"discoveryToken"`
0000000000000000000000000000000000000000;;		DiscoveryTokenAPIServers []string `json:"discoveryTokenAPIServers"`
0000000000000000000000000000000000000000;;		NodeName                 string   `json:"nodeName"`
0000000000000000000000000000000000000000;;		TLSBootstrapToken        string   `json:"tlsBootstrapToken"`
0000000000000000000000000000000000000000;;		Token                    string   `json:"token"`
0000000000000000000000000000000000000000;;	}
