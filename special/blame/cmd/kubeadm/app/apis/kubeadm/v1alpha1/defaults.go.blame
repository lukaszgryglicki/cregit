0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e59af44a2a1738a8da7bab4d234a2899ef5ca5e2;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubeadm/app/constants"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DefaultServiceDNSDomain   = "cluster.local"
0000000000000000000000000000000000000000;;		DefaultServicesSubnet     = "10.96.0.0/12"
0000000000000000000000000000000000000000;;		DefaultKubernetesVersion  = "stable-1.7"
0000000000000000000000000000000000000000;;		DefaultAPIBindPort        = 6443
0000000000000000000000000000000000000000;;		DefaultAuthorizationModes = "Node,RBAC"
0000000000000000000000000000000000000000;;		DefaultCACertPath         = "/etc/kubernetes/pki/ca.crt"
0000000000000000000000000000000000000000;;		DefaultCertificatesDir    = "/etc/kubernetes/pki"
0000000000000000000000000000000000000000;;		DefaultEtcdDataDir        = "/var/lib/etcd"
0000000000000000000000000000000000000000;;		DefaultImageRepository    = "gcr.io/google_containers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addDefaultingFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return RegisterDefaults(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_MasterConfiguration(obj *MasterConfiguration) {
0000000000000000000000000000000000000000;;		if obj.KubernetesVersion == "" {
0000000000000000000000000000000000000000;;			obj.KubernetesVersion = DefaultKubernetesVersion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.API.BindPort == 0 {
0000000000000000000000000000000000000000;;			obj.API.BindPort = DefaultAPIBindPort
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.Networking.ServiceSubnet == "" {
0000000000000000000000000000000000000000;;			obj.Networking.ServiceSubnet = DefaultServicesSubnet
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.Networking.DNSDomain == "" {
0000000000000000000000000000000000000000;;			obj.Networking.DNSDomain = DefaultServiceDNSDomain
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(obj.AuthorizationModes) == 0 {
0000000000000000000000000000000000000000;;			obj.AuthorizationModes = strings.Split(DefaultAuthorizationModes, ",")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.CertificatesDir == "" {
0000000000000000000000000000000000000000;;			obj.CertificatesDir = DefaultCertificatesDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.TokenTTL == 0 {
0000000000000000000000000000000000000000;;			obj.TokenTTL = constants.DefaultTokenDuration
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.ImageRepository == "" {
0000000000000000000000000000000000000000;;			obj.ImageRepository = DefaultImageRepository
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj.Etcd.DataDir == "" {
0000000000000000000000000000000000000000;;			obj.Etcd.DataDir = DefaultEtcdDataDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetDefaults_NodeConfiguration(obj *NodeConfiguration) {
0000000000000000000000000000000000000000;;		if obj.CACertPath == "" {
0000000000000000000000000000000000000000;;			obj.CACertPath = DefaultCACertPath
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(obj.TLSBootstrapToken) == 0 {
0000000000000000000000000000000000000000;;			obj.TLSBootstrapToken = obj.Token
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(obj.DiscoveryToken) == 0 && len(obj.DiscoveryFile) == 0 {
0000000000000000000000000000000000000000;;			obj.DiscoveryToken = obj.Token
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Make sure file URLs become paths
0000000000000000000000000000000000000000;;		if len(obj.DiscoveryFile) != 0 {
0000000000000000000000000000000000000000;;			u, err := url.Parse(obj.DiscoveryFile)
0000000000000000000000000000000000000000;;			if err == nil && u.Scheme == "file" {
0000000000000000000000000000000000000000;;				obj.DiscoveryFile = u.Path
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
