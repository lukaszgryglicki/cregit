0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9db0eae9e9d83114763752acc01f8cf31dda41c2;pkg/kubeadm/api/types.go[pkg/kubeadm/api/types.go][cmd/kubeadm/app/apis/kubeadm/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeadm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnvParams struct {
0000000000000000000000000000000000000000;;		KubernetesDir string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MasterConfiguration struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		API                API
0000000000000000000000000000000000000000;;		Etcd               Etcd
0000000000000000000000000000000000000000;;		Networking         Networking
0000000000000000000000000000000000000000;;		KubernetesVersion  string
0000000000000000000000000000000000000000;;		CloudProvider      string
0000000000000000000000000000000000000000;;		NodeName           string
0000000000000000000000000000000000000000;;		AuthorizationModes []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token    string
0000000000000000000000000000000000000000;;		TokenTTL time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SelfHosted enables an alpha deployment type where the apiserver, scheduler, and
0000000000000000000000000000000000000000;;		// controller manager are managed by Kubernetes itself. This option is likely to
0000000000000000000000000000000000000000;;		// become the default in the future.
0000000000000000000000000000000000000000;;		SelfHosted bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		APIServerExtraArgs         map[string]string
0000000000000000000000000000000000000000;;		ControllerManagerExtraArgs map[string]string
0000000000000000000000000000000000000000;;		SchedulerExtraArgs         map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// APIServerCertSANs sets extra Subject Alternative Names for the API Server signing cert
0000000000000000000000000000000000000000;;		APIServerCertSANs []string
0000000000000000000000000000000000000000;;		// CertificatesDir specifies where to store or look for all required certificates
0000000000000000000000000000000000000000;;		CertificatesDir string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageRepository what container registry to pull control plane images from
0000000000000000000000000000000000000000;;		ImageRepository string
0000000000000000000000000000000000000000;;		// UnifiedControlPlaneImage specifies if a specific container image should be used for all control plane components
0000000000000000000000000000000000000000;;		UnifiedControlPlaneImage string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type API struct {
0000000000000000000000000000000000000000;;		// AdvertiseAddress sets the address for the API server to advertise.
0000000000000000000000000000000000000000;;		AdvertiseAddress string
0000000000000000000000000000000000000000;;		// BindPort sets the secure port for the API Server to bind to
0000000000000000000000000000000000000000;;		BindPort int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TokenDiscovery struct {
0000000000000000000000000000000000000000;;		ID        string
0000000000000000000000000000000000000000;;		Secret    string
0000000000000000000000000000000000000000;;		Addresses []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Networking struct {
0000000000000000000000000000000000000000;;		ServiceSubnet string
0000000000000000000000000000000000000000;;		PodSubnet     string
0000000000000000000000000000000000000000;;		DNSDomain     string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Etcd struct {
0000000000000000000000000000000000000000;;		Endpoints []string
0000000000000000000000000000000000000000;;		CAFile    string
0000000000000000000000000000000000000000;;		CertFile  string
0000000000000000000000000000000000000000;;		KeyFile   string
0000000000000000000000000000000000000000;;		DataDir   string
0000000000000000000000000000000000000000;;		ExtraArgs map[string]string
0000000000000000000000000000000000000000;;		// Image specifies which container image to use for running etcd. If empty, automatically populated by kubeadm using the image repository and default etcd version
0000000000000000000000000000000000000000;;		Image string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NodeConfiguration struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CACertPath     string
0000000000000000000000000000000000000000;;		DiscoveryFile  string
0000000000000000000000000000000000000000;;		DiscoveryToken string
0000000000000000000000000000000000000000;;		// Currently we only pay attention to one api server but hope to support >1 in the future
0000000000000000000000000000000000000000;;		DiscoveryTokenAPIServers []string
0000000000000000000000000000000000000000;;		NodeName                 string
0000000000000000000000000000000000000000;;		TLSBootstrapToken        string
0000000000000000000000000000000000000000;;		Token                    string
0000000000000000000000000000000000000000;;	}
