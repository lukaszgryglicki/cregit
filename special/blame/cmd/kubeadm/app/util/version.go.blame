0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0a1a63bee53cddbe24c5dddaeecba8a7438a0c1d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		kubeReleaseBucketURL  = "https://storage.googleapis.com/kubernetes-release/release"
0000000000000000000000000000000000000000;;		kubeReleaseRegex      = regexp.MustCompile(`^v?(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)([-0-9a-zA-Z_\.+]*)?$`)
0000000000000000000000000000000000000000;;		kubeReleaseLabelRegex = regexp.MustCompile(`^[[:lower:]]+(-[-\w_\.]+)?$`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KubernetesReleaseVersion is helper function that can fetch
0000000000000000000000000000000000000000;;	// available version information from release servers based on
0000000000000000000000000000000000000000;;	// label names, like "stable" or "latest".
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If argument is already semantic version string, it
0000000000000000000000000000000000000000;;	// will return same string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In case of labels, it tries to fetch from release
0000000000000000000000000000000000000000;;	// servers and then return actual semantic version.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Available names on release servers:
0000000000000000000000000000000000000000;;	//  stable      (latest stable release)
0000000000000000000000000000000000000000;;	//  stable-1    (latest stable release in 1.x)
0000000000000000000000000000000000000000;;	//  stable-1.0  (and similarly 1.1, 1.2, 1.3, ...)
0000000000000000000000000000000000000000;;	//  latest      (latest release, including alpha/beta)
0000000000000000000000000000000000000000;;	//  latest-1    (latest release in 1.x, including alpha/beta)
0000000000000000000000000000000000000000;;	//  latest-1.0  (and similarly 1.1, 1.2, 1.3, ...)
0000000000000000000000000000000000000000;;	func KubernetesReleaseVersion(version string) (string, error) {
0000000000000000000000000000000000000000;;		if kubeReleaseRegex.MatchString(version) {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(version, "v") {
0000000000000000000000000000000000000000;;				return version, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return "v" + version, nil
0000000000000000000000000000000000000000;;		} else if kubeReleaseLabelRegex.MatchString(version) {
0000000000000000000000000000000000000000;;			url := fmt.Sprintf("%s/%s.txt", kubeReleaseBucketURL, version)
0000000000000000000000000000000000000000;;			resp, err := http.Get(url)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("unable to get URL %q: %s", url, err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer resp.Body.Close()
0000000000000000000000000000000000000000;;			if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("unable to fetch release information. URL: %q Status: %v", url, resp.Status)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			body, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("unable to read content of URL %q: %s", url, err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Re-validate received version and return.
0000000000000000000000000000000000000000;;			return KubernetesReleaseVersion(strings.Trim(string(body), " \t\n"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("version %q doesn't match patterns for neither semantic version nor labels (stable, latest, ...)", version)
0000000000000000000000000000000000000000;;	}
