0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ed8b6f48fe534cad27f0972bf5e70464a91d44b3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		validTmpl    = "image: {{ .ImageRepository }}/pause-{{ .Arch }}:3.0"
0000000000000000000000000000000000000000;;		validTmplOut = "image: gcr.io/google_containers/pause-amd64:3.0"
0000000000000000000000000000000000000000;;		doNothing    = "image: gcr.io/google_containers/pause-amd64:3.0"
0000000000000000000000000000000000000000;;		invalidTmpl1 = "{{ .baz }/d}"
0000000000000000000000000000000000000000;;		invalidTmpl2 = "{{ !foobar }}"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseTemplate(t *testing.T) {
0000000000000000000000000000000000000000;;		var tmplTests = []struct {
0000000000000000000000000000000000000000;;			template    string
0000000000000000000000000000000000000000;;			data        interface{}
0000000000000000000000000000000000000000;;			output      string
0000000000000000000000000000000000000000;;			errExpected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// should parse a valid template and set the right values
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				template: validTmpl,
0000000000000000000000000000000000000000;;				data: struct{ ImageRepository, Arch string }{
0000000000000000000000000000000000000000;;					ImageRepository: "gcr.io/google_containers",
0000000000000000000000000000000000000000;;					Arch:            "amd64",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output:      validTmplOut,
0000000000000000000000000000000000000000;;				errExpected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// should noop if there aren't any {{ .foo }} present
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				template: doNothing,
0000000000000000000000000000000000000000;;				data: struct{ ImageRepository, Arch string }{
0000000000000000000000000000000000000000;;					ImageRepository: "gcr.io/google_containers",
0000000000000000000000000000000000000000;;					Arch:            "amd64",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output:      doNothing,
0000000000000000000000000000000000000000;;				errExpected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid syntax, passing nil
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				template:    invalidTmpl1,
0000000000000000000000000000000000000000;;				data:        nil,
0000000000000000000000000000000000000000;;				output:      "",
0000000000000000000000000000000000000000;;				errExpected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid syntax
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				template:    invalidTmpl2,
0000000000000000000000000000000000000000;;				data:        struct{}{},
0000000000000000000000000000000000000000;;				output:      "",
0000000000000000000000000000000000000000;;				errExpected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tmplTests {
0000000000000000000000000000000000000000;;			outbytes, err := ParseTemplate(tt.template, tt.data)
0000000000000000000000000000000000000000;;			if tt.errExpected != (err != nil) {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed TestParseTemplate:\n\texpected err: %t\n\t  actual: %s",
0000000000000000000000000000000000000000;;					tt.errExpected,
0000000000000000000000000000000000000000;;					err,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tt.output != string(outbytes) {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed TestParseTemplate:\n\texpected bytes: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					tt.output,
0000000000000000000000000000000000000000;;					outbytes,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
