0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2e54a87bef7e31375e887425510aa5b945a62f68;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubeadm/app/preflight"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DefaultErrorExitCode = 1
0000000000000000000000000000000000000000;;		PreFlightExitCode    = 2
0000000000000000000000000000000000000000;;		ValidationExitCode   = 3
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type debugError interface {
0000000000000000000000000000000000000000;;		DebugError() (msg string, args []interface{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fatal prints the message if set and then exits.
0000000000000000000000000000000000000000;;	func fatal(msg string, code int) {
0000000000000000000000000000000000000000;;		if len(msg) > 0 {
0000000000000000000000000000000000000000;;			// add newline if needed
0000000000000000000000000000000000000000;;			if !strings.HasSuffix(msg, "\n") {
0000000000000000000000000000000000000000;;				msg += "\n"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fmt.Fprint(os.Stderr, msg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		os.Exit(code)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CheckErr prints a user friendly error to STDERR and exits with a non-zero
0000000000000000000000000000000000000000;;	// exit code. Unrecognized errors will be printed with an "error: " prefix.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This method is generic to the command in use and may be used by non-Kubectl
0000000000000000000000000000000000000000;;	// commands.
0000000000000000000000000000000000000000;;	func CheckErr(err error) {
0000000000000000000000000000000000000000;;		checkErr("", err, fatal)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// checkErr formats a given error as a string and calls the passed handleErr
0000000000000000000000000000000000000000;;	// func with that string and an kubectl exit code.
0000000000000000000000000000000000000000;;	func checkErr(prefix string, err error, handleErr func(string, int)) {
0000000000000000000000000000000000000000;;		switch err.(type) {
0000000000000000000000000000000000000000;;		case nil:
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		case *preflight.Error:
0000000000000000000000000000000000000000;;			handleErr(err.Error(), PreFlightExitCode)
0000000000000000000000000000000000000000;;		case utilerrors.Aggregate:
0000000000000000000000000000000000000000;;			handleErr(err.Error(), ValidationExitCode)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			handleErr(err.Error(), DefaultErrorExitCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
