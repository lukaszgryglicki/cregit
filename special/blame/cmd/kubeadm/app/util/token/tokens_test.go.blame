0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
046c710499199ba36b1c32273ed6b9131168608a;cmd/kubeadm/app/util/tokens_test.go[cmd/kubeadm/app/util/tokens_test.go][cmd/kubeadm/app/util/token/tokens_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package token
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTokenParse(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			token    string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{token: "1234567890123456789012", expected: false},   // invalid parcel size
0000000000000000000000000000000000000000;;			{token: "12345.1234567890123456", expected: false},   // invalid parcel size
0000000000000000000000000000000000000000;;			{token: ".1234567890123456", expected: false},        // invalid parcel size
0000000000000000000000000000000000000000;;			{token: "123456:1234567890.123456", expected: false}, // invalid separation
0000000000000000000000000000000000000000;;			{token: "abcdef:1234567890123456", expected: false},  // invalid separation
0000000000000000000000000000000000000000;;			{token: "Abcdef.1234567890123456", expected: false},  // invalid token id
0000000000000000000000000000000000000000;;			{token: "123456.AABBCCDDEEFFGGHH", expected: false},  // invalid token secret
0000000000000000000000000000000000000000;;			{token: "abcdef.1234567890123456", expected: true},
0000000000000000000000000000000000000000;;			{token: "123456.aabbccddeeffgghh", expected: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			_, _, actual := ParseToken(rt.token)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed ParseToken for this token: [%s]\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.token,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseTokenID(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			tokenID  string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{tokenID: "", expected: false},
0000000000000000000000000000000000000000;;			{tokenID: "1234567890123456789012", expected: false},
0000000000000000000000000000000000000000;;			{tokenID: "12345", expected: false},
0000000000000000000000000000000000000000;;			{tokenID: "Abcdef", expected: false},
0000000000000000000000000000000000000000;;			{tokenID: "abcdef", expected: true},
0000000000000000000000000000000000000000;;			{tokenID: "123456", expected: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			actual := ParseTokenID(rt.tokenID)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed ParseTokenID for this token ID: [%s]\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.tokenID,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateToken(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			token    *kubeadmapi.TokenDiscovery
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "", Secret: ""}, expected: false},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "1234567890123456789012", Secret: ""}, expected: false},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "", Secret: "1234567890123456789012"}, expected: false},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "12345", Secret: "1234567890123456"}, expected: false},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "Abcdef", Secret: "1234567890123456"}, expected: false},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "123456", Secret: "AABBCCDDEEFFGGHH"}, expected: false},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "abc*ef", Secret: "1234567890123456"}, expected: false},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "abcdef", Secret: "123456789*123456"}, expected: false},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "abcdef", Secret: "1234567890123456"}, expected: true},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "123456", Secret: "aabbccddeeffgghh"}, expected: true},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "abc456", Secret: "1234567890123456"}, expected: true},
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "abcdef", Secret: "123456ddeeffgghh"}, expected: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			valid, actual := ValidateToken(rt.token)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed ValidateToken for this token ID: [%s]\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.token,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if (valid == true) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed ValidateToken for this token ID: [%s]\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.token,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateToken(t *testing.T) {
0000000000000000000000000000000000000000;;		token, err := GenerateToken()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("GenerateToken returned an unexpected error: %+v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tokenID, tokenSecret, err := ParseToken(token)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("GenerateToken returned an unexpected error: %+v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(tokenID) != 6 {
0000000000000000000000000000000000000000;;			t.Errorf("failed GenerateToken first part length:\n\texpected: 6\n\t  actual: %d", len(tokenID))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(tokenSecret) != 16 {
0000000000000000000000000000000000000000;;			t.Errorf("failed GenerateToken second part length:\n\texpected: 16\n\t  actual: %d", len(tokenSecret))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRandBytes(t *testing.T) {
0000000000000000000000000000000000000000;;		var randTest = []int{
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;			1,
0000000000000000000000000000000000000000;;			2,
0000000000000000000000000000000000000000;;			3,
0000000000000000000000000000000000000000;;			100,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range randTest {
0000000000000000000000000000000000000000;;			actual, err := randBytes(rt)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("failed randBytes: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(actual) != rt*2 {
0000000000000000000000000000000000000000;;				t.Errorf("failed randBytes:\n\texpected: %d\n\t  actual: %d\n", rt*2, len(actual))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBearerToken(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			token    *kubeadmapi.TokenDiscovery
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "foo", Secret: "bar"}, expected: "foo.bar"}, // should use default
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			actual := BearerToken(rt.token)
0000000000000000000000000000000000000000;;			if actual != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed BearerToken:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
