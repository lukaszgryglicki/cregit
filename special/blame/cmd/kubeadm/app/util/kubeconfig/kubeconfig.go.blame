0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ec248bf14102c60ec927e108680c2a215567197f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateBasic creates a basic, general KubeConfig object that then can be extended
0000000000000000000000000000000000000000;;	func CreateBasic(serverURL string, clusterName string, userName string, caCert []byte) *clientcmdapi.Config {
0000000000000000000000000000000000000000;;		// Use the cluster and the username as the context name
0000000000000000000000000000000000000000;;		contextName := fmt.Sprintf("%s@%s", userName, clusterName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				clusterName: {
0000000000000000000000000000000000000000;;					Server: serverURL,
0000000000000000000000000000000000000000;;					CertificateAuthorityData: caCert,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				contextName: {
0000000000000000000000000000000000000000;;					Cluster:  clusterName,
0000000000000000000000000000000000000000;;					AuthInfo: userName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AuthInfos:      map[string]*clientcmdapi.AuthInfo{},
0000000000000000000000000000000000000000;;			CurrentContext: contextName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateWithCerts creates a KubeConfig object with access to the API server with client certificates
0000000000000000000000000000000000000000;;	func CreateWithCerts(serverURL, clusterName, userName string, caCert []byte, clientKey []byte, clientCert []byte) *clientcmdapi.Config {
0000000000000000000000000000000000000000;;		config := CreateBasic(serverURL, clusterName, userName, caCert)
0000000000000000000000000000000000000000;;		config.AuthInfos[userName] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			ClientKeyData:         clientKey,
0000000000000000000000000000000000000000;;			ClientCertificateData: clientCert,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateWithToken creates a KubeConfig object with access to the API server with a token
0000000000000000000000000000000000000000;;	func CreateWithToken(serverURL, clusterName, userName string, caCert []byte, token string) *clientcmdapi.Config {
0000000000000000000000000000000000000000;;		config := CreateBasic(serverURL, clusterName, userName, caCert)
0000000000000000000000000000000000000000;;		config.AuthInfos[userName] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Token: token,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClientSetFromFile returns a ready-to-use client from a KubeConfig file
0000000000000000000000000000000000000000;;	func ClientSetFromFile(path string) (*clientset.Clientset, error) {
0000000000000000000000000000000000000000;;		config, err := clientcmd.LoadFromFile(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to load admin kubeconfig [%v]", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return KubeConfigToClientSet(config)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KubeConfigToClientSet converts a KubeConfig object to a client
0000000000000000000000000000000000000000;;	func KubeConfigToClientSet(config *clientcmdapi.Config) (*clientset.Clientset, error) {
0000000000000000000000000000000000000000;;		clientConfig, err := clientcmd.NewDefaultClientConfig(*config, &clientcmd.ConfigOverrides{}).ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to create API client configuration from kubeconfig: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client, err := clientset.NewForConfig(clientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to create API client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteToDisk writes a KubeConfig object down to disk with mode 0600
0000000000000000000000000000000000000000;;	func WriteToDisk(filename string, kubeconfig *clientcmdapi.Config) error {
0000000000000000000000000000000000000000;;		err := clientcmd.WriteToFile(*kubeconfig, filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("[kubeconfig] Wrote KubeConfig file to disk: %q\n", filename)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetClusterFromKubeConfig returns the default Cluster of the specified KubeConfig
0000000000000000000000000000000000000000;;	func GetClusterFromKubeConfig(config *clientcmdapi.Config) *clientcmdapi.Cluster {
0000000000000000000000000000000000000000;;		// If there is an unnamed cluster object, use it
0000000000000000000000000000000000000000;;		if config.Clusters[""] != nil {
0000000000000000000000000000000000000000;;			return config.Clusters[""]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.Contexts[config.CurrentContext] != nil {
0000000000000000000000000000000000000000;;			return config.Clusters[config.Contexts[config.CurrentContext].Cluster]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
