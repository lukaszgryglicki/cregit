0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
fecd8e462ff922be6b4f23f8d04f55031bd51bb7;cmd/kubeadm/app/util/kubeconfig_test.go[cmd/kubeadm/app/util/kubeconfig_test.go][cmd/kubeadm/app/util/kubeconfig/kubeconfig_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		configOut1 = `apiVersion: v1
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    server: ""
0000000000000000000000000000000000000000;;	  name: k8s
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: k8s
0000000000000000000000000000000000000000;;	    user: user1
0000000000000000000000000000000000000000;;	  name: user1@k8s
0000000000000000000000000000000000000000;;	current-context: user1@k8s
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	preferences: {}
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: user1
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: abc
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;		configOut2 = `apiVersion: v1
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    server: localhost:8080
0000000000000000000000000000000000000000;;	  name: kubernetes
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: kubernetes
0000000000000000000000000000000000000000;;	    user: user2
0000000000000000000000000000000000000000;;	  name: user2@kubernetes
0000000000000000000000000000000000000000;;	current-context: user2@kubernetes
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	preferences: {}
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: user2
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: cba
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configClient struct {
0000000000000000000000000000000000000000;;		clusterName string
0000000000000000000000000000000000000000;;		userName    string
0000000000000000000000000000000000000000;;		serverURL   string
0000000000000000000000000000000000000000;;		caCert      []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configClientWithCerts struct {
0000000000000000000000000000000000000000;;		clientKey  []byte
0000000000000000000000000000000000000000;;		clientCert []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configClientWithToken struct {
0000000000000000000000000000000000000000;;		token string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateWithCerts(t *testing.T) {
0000000000000000000000000000000000000000;;		var createBasicTest = []struct {
0000000000000000000000000000000000000000;;			cc          configClient
0000000000000000000000000000000000000000;;			ccWithCerts configClientWithCerts
0000000000000000000000000000000000000000;;			expected    string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{configClient{}, configClientWithCerts{}, ""},
0000000000000000000000000000000000000000;;			{configClient{clusterName: "kubernetes"}, configClientWithCerts{}, ""},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range createBasicTest {
0000000000000000000000000000000000000000;;			cwc := CreateWithCerts(
0000000000000000000000000000000000000000;;				rt.cc.serverURL,
0000000000000000000000000000000000000000;;				rt.cc.clusterName,
0000000000000000000000000000000000000000;;				rt.cc.userName,
0000000000000000000000000000000000000000;;				rt.cc.caCert,
0000000000000000000000000000000000000000;;				rt.ccWithCerts.clientKey,
0000000000000000000000000000000000000000;;				rt.ccWithCerts.clientCert,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if cwc.Kind != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CreateWithCerts:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					cwc.Kind,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateWithToken(t *testing.T) {
0000000000000000000000000000000000000000;;		var createBasicTest = []struct {
0000000000000000000000000000000000000000;;			cc          configClient
0000000000000000000000000000000000000000;;			ccWithToken configClientWithToken
0000000000000000000000000000000000000000;;			expected    string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{configClient{}, configClientWithToken{}, ""},
0000000000000000000000000000000000000000;;			{configClient{clusterName: "kubernetes"}, configClientWithToken{}, ""},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range createBasicTest {
0000000000000000000000000000000000000000;;			cwc := CreateWithToken(
0000000000000000000000000000000000000000;;				rt.cc.serverURL,
0000000000000000000000000000000000000000;;				rt.cc.clusterName,
0000000000000000000000000000000000000000;;				rt.cc.userName,
0000000000000000000000000000000000000000;;				rt.cc.caCert,
0000000000000000000000000000000000000000;;				rt.ccWithToken.token,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if cwc.Kind != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CreateWithToken:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					cwc.Kind,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWriteKubeconfigToDisk(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpdir, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Couldn't create tmpdir")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpdir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// set up tmp GlobalEnvParams values for testing
0000000000000000000000000000000000000000;;		oldEnv := kubeadmapi.GlobalEnvParams
0000000000000000000000000000000000000000;;		kubeadmapi.GlobalEnvParams = kubeadmapi.SetEnvParams()
0000000000000000000000000000000000000000;;		kubeadmapi.GlobalEnvParams.KubernetesDir = fmt.Sprintf("%s/etc/kubernetes", tmpdir)
0000000000000000000000000000000000000000;;		defer func() { kubeadmapi.GlobalEnvParams = oldEnv }()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var writeConfig = []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			cc          configClient
0000000000000000000000000000000000000000;;			ccWithToken configClientWithToken
0000000000000000000000000000000000000000;;			expected    error
0000000000000000000000000000000000000000;;			file        []byte
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"test1", configClient{clusterName: "k8s", userName: "user1"}, configClientWithToken{token: "abc"}, nil, []byte(configOut1)},
0000000000000000000000000000000000000000;;			{"test2", configClient{clusterName: "kubernetes", userName: "user2", serverURL: "localhost:8080"}, configClientWithToken{token: "cba"}, nil, []byte(configOut2)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range writeConfig {
0000000000000000000000000000000000000000;;			c := CreateWithToken(
0000000000000000000000000000000000000000;;				rt.cc.serverURL,
0000000000000000000000000000000000000000;;				rt.cc.clusterName,
0000000000000000000000000000000000000000;;				rt.cc.userName,
0000000000000000000000000000000000000000;;				rt.cc.caCert,
0000000000000000000000000000000000000000;;				rt.ccWithToken.token,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			configPath := filepath.Join(kubeadmapi.GlobalEnvParams.KubernetesDir, fmt.Sprintf("%s.conf", rt.name))
0000000000000000000000000000000000000000;;			err := WriteToDisk(configPath, c)
0000000000000000000000000000000000000000;;			if err != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed WriteToDisk with an error:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					err,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			newFile, _ := ioutil.ReadFile(configPath)
0000000000000000000000000000000000000000;;			if !bytes.Equal(newFile, rt.file) {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed WriteToDisk config write:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					rt.file,
0000000000000000000000000000000000000000;;					newFile,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
