0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
2a3819e18e5801e6066e14e800f018eed6520041;cmd/kubeadm/app/cmd/defaults.go[cmd/kubeadm/app/cmd/defaults.go][cmd/kubeadm/app/util/config/masterconfig.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		netutil "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;		kubeadmconstants "k8s.io/kubernetes/cmd/kubeadm/app/constants"
0000000000000000000000000000000000000000;;		kubeadmutil "k8s.io/kubernetes/cmd/kubeadm/app/util"
0000000000000000000000000000000000000000;;		tokenutil "k8s.io/kubernetes/cmd/kubeadm/app/util/token"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/node"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/version"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetInitDynamicDefaults(cfg *kubeadmapi.MasterConfiguration) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Choose the right address for the API Server to advertise. If the advertise address is localhost or 0.0.0.0, the default interface's IP address is used
0000000000000000000000000000000000000000;;		// This is the same logic as the API Server uses
0000000000000000000000000000000000000000;;		ip, err := netutil.ChooseBindAddress(net.ParseIP(cfg.API.AdvertiseAddress))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.API.AdvertiseAddress = ip.String()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validate version argument
0000000000000000000000000000000000000000;;		ver, err := kubeadmutil.KubernetesReleaseVersion(cfg.KubernetesVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.KubernetesVersion = ver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parse the given kubernetes version and make sure it's higher than the lowest supported
0000000000000000000000000000000000000000;;		k8sVersion, err := version.ParseSemantic(cfg.KubernetesVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("couldn't parse kubernetes version %q: %v", cfg.KubernetesVersion, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if k8sVersion.LessThan(kubeadmconstants.MinimumControlPlaneVersion) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("this version of kubeadm only supports deploying clusters with the control plane version >= %s. Current version: %s", kubeadmconstants.MinimumControlPlaneVersion.String(), cfg.KubernetesVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfg.Token == "" {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			cfg.Token, err = tokenutil.GenerateToken()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("couldn't generate random token: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.NodeName = node.GetHostname(cfg.NodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TryLoadMasterConfiguration tries to loads a Master configuration from the given file (if defined)
0000000000000000000000000000000000000000;;	func TryLoadMasterConfiguration(cfgPath string, cfg *kubeadmapi.MasterConfiguration) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cfgPath != "" {
0000000000000000000000000000000000000000;;			b, err := ioutil.ReadFile(cfgPath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("unable to read config from %q [%v]", cfgPath, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := runtime.DecodeInto(api.Codecs.UniversalDecoder(), b, cfg); err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("unable to decode config from %q [%v]", cfgPath, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
