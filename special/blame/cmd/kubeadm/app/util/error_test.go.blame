0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
fecd8e462ff922be6b4f23f8d04f55031bd51bb7;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubeadm/app/preflight"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCheckErr(t *testing.T) {
0000000000000000000000000000000000000000;;		var codeReturned int
0000000000000000000000000000000000000000;;		errHandle := func(err string, code int) {
0000000000000000000000000000000000000000;;			codeReturned = code
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var tokenTest = []struct {
0000000000000000000000000000000000000000;;			e        error
0000000000000000000000000000000000000000;;			expected int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{nil, 0},
0000000000000000000000000000000000000000;;			{fmt.Errorf(""), DefaultErrorExitCode},
0000000000000000000000000000000000000000;;			{&preflight.Error{}, PreFlightExitCode},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range tokenTest {
0000000000000000000000000000000000000000;;			codeReturned = 0
0000000000000000000000000000000000000000;;			checkErr("", rt.e, errHandle)
0000000000000000000000000000000000000000;;			if codeReturned != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed checkErr:\n\texpected: %d\n\t  actual: %d",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					codeReturned,
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
