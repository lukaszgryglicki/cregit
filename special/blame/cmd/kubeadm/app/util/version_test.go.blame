0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
329f4dcc051a153ba72e3bddd3c2b79ed3f8b2c6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmptyVersion(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ver, err := KubernetesReleaseVersion("")
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Error("KubernetesReleaseVersion returned successfully, but error expected")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ver != "" {
0000000000000000000000000000000000000000;;			t.Error("KubernetesReleaseVersion returned value, expected only error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		validVersions := []string{
0000000000000000000000000000000000000000;;			"v1.3.0",
0000000000000000000000000000000000000000;;			"v1.4.0-alpha.0",
0000000000000000000000000000000000000000;;			"v1.4.5",
0000000000000000000000000000000000000000;;			"v1.4.0-beta.0",
0000000000000000000000000000000000000000;;			"v2.0.0",
0000000000000000000000000000000000000000;;			"v1.6.0-alpha.0.536+d60d9f3269288f",
0000000000000000000000000000000000000000;;			"v1.5.0-alpha.0.1078+1044b6822497da-pull",
0000000000000000000000000000000000000000;;			"v1.5.0-alpha.1.822+49b9e32fad9f32-pull-gke-gci",
0000000000000000000000000000000000000000;;			"v1.6.1_coreos.0",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range validVersions {
0000000000000000000000000000000000000000;;			ver, err := KubernetesReleaseVersion(s)
0000000000000000000000000000000000000000;;			t.Log("Valid: ", s, ver, err)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion unexpected error for version %q: %v", s, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ver != s {
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion should return same valid version string. %q != %q", s, ver)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInvalidVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		invalidVersions := []string{
0000000000000000000000000000000000000000;;			"v1.3",
0000000000000000000000000000000000000000;;			"1.4",
0000000000000000000000000000000000000000;;			"b1.4.0",
0000000000000000000000000000000000000000;;			"c1.4.5+git",
0000000000000000000000000000000000000000;;			"something1.2",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range invalidVersions {
0000000000000000000000000000000000000000;;			ver, err := KubernetesReleaseVersion(s)
0000000000000000000000000000000000000000;;			t.Log("Invalid: ", s, ver, err)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion error expected for version %q, but returned successfully", s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ver != "" {
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion should return empty string in case of error. Returned %q for version %q", ver, s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidConvenientForUserVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		validVersions := []string{
0000000000000000000000000000000000000000;;			"1.4.0",
0000000000000000000000000000000000000000;;			"1.4.5+git",
0000000000000000000000000000000000000000;;			"1.6.1_coreos.0",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range validVersions {
0000000000000000000000000000000000000000;;			ver, err := KubernetesReleaseVersion(s)
0000000000000000000000000000000000000000;;			t.Log("Valid: ", s, ver, err)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion unexpected error for version %q: %v", s, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ver != "v"+s {
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion should return semantic version string. %q vs. %q", s, ver)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVersionFromNetwork(t *testing.T) {
0000000000000000000000000000000000000000;;		type T struct {
0000000000000000000000000000000000000000;;			Content       string
0000000000000000000000000000000000000000;;			Status        int
0000000000000000000000000000000000000000;;			Expected      string
0000000000000000000000000000000000000000;;			ErrorExpected bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cases := map[string]T{
0000000000000000000000000000000000000000;;			"stable":     {"stable-1", http.StatusOK, "v1.4.6", false}, // recursive pointer to stable-1
0000000000000000000000000000000000000000;;			"stable-1":   {"v1.4.6", http.StatusOK, "v1.4.6", false},
0000000000000000000000000000000000000000;;			"stable-1.3": {"v1.3.10", http.StatusOK, "v1.3.10", false},
0000000000000000000000000000000000000000;;			"latest":     {"v1.6.0-alpha.0", http.StatusOK, "v1.6.0-alpha.0", false},
0000000000000000000000000000000000000000;;			"latest-1.3": {"v1.3.11-beta.0", http.StatusOK, "v1.3.11-beta.0", false},
0000000000000000000000000000000000000000;;			"empty":      {"", http.StatusOK, "", true},
0000000000000000000000000000000000000000;;			"garbage":    {"<?xml version='1.0'?><Error><Code>NoSuchKey</Code><Message>The specified key does not exist.</Message></Error>", http.StatusOK, "", true},
0000000000000000000000000000000000000000;;			"unknown":    {"The requested URL was not found on this server.", http.StatusNotFound, "", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			key := strings.TrimSuffix(path.Base(r.URL.Path), ".txt")
0000000000000000000000000000000000000000;;			res, found := cases[key]
0000000000000000000000000000000000000000;;			if found {
0000000000000000000000000000000000000000;;				http.Error(w, res.Content, res.Status)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				http.Error(w, "Unknown test case key!", http.StatusNotFound)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeReleaseBucketURL = server.URL
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range cases {
0000000000000000000000000000000000000000;;			ver, err := KubernetesReleaseVersion(k)
0000000000000000000000000000000000000000;;			t.Logf("Key: %q. Result: %q, Error: %v", k, ver, err)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err != nil && !v.ErrorExpected:
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion: unexpected error for %q. Error: %v", k, err)
0000000000000000000000000000000000000000;;			case err == nil && v.ErrorExpected:
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion: error expected for key %q, but result is %q", k, ver)
0000000000000000000000000000000000000000;;			case ver != v.Expected:
0000000000000000000000000000000000000000;;				t.Errorf("KubernetesReleaseVersion: unexpected result for key %q. Expected: %q Actual: %q", k, v.Expected, ver)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
