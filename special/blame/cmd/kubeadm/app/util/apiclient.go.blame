0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9db0eae9e9d83114763752acc01f8cf31dda41c2;pkg/kubeadm/master/apiclient.go[pkg/kubeadm/master/apiclient.go][cmd/kubeadm/app/util/apiclient.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		clientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		kubeadmconstants "k8s.io/kubernetes/cmd/kubeadm/app/constants"
0000000000000000000000000000000000000000;;		kubeconfigutil "k8s.io/kubernetes/cmd/kubeadm/app/util/kubeconfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateClientAndWaitForAPI takes a path to a kubeconfig file, makes a client of it and waits for the API to be healthy
0000000000000000000000000000000000000000;;	func CreateClientAndWaitForAPI(file string) (*clientset.Clientset, error) {
0000000000000000000000000000000000000000;;		client, err := kubeconfigutil.ClientSetFromFile(file)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Println("[apiclient] Created API client, waiting for the control plane to become ready")
0000000000000000000000000000000000000000;;		WaitForAPI(client)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return client, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitForAPI waits for the API Server's /healthz endpoint to report "ok"
0000000000000000000000000000000000000000;;	func WaitForAPI(client *clientset.Clientset) {
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		wait.PollInfinite(kubeadmconstants.APICallRetryInterval, func() (bool, error) {
0000000000000000000000000000000000000000;;			healthStatus := 0
0000000000000000000000000000000000000000;;			client.Discovery().RESTClient().Get().AbsPath("/healthz").Do().StatusCode(&healthStatus)
0000000000000000000000000000000000000000;;			if healthStatus != http.StatusOK {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fmt.Printf("[apiclient] All control plane components are healthy after %f seconds\n", time.Since(start).Seconds())
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitForPodsWithLabel will lookup pods with the given label and wait until they are all
0000000000000000000000000000000000000000;;	// reporting status as running.
0000000000000000000000000000000000000000;;	func WaitForPodsWithLabel(client *clientset.Clientset, labelKeyValPair string) {
0000000000000000000000000000000000000000;;		// TODO: Implement a timeout
0000000000000000000000000000000000000000;;		// TODO: Implement a verbosity switch
0000000000000000000000000000000000000000;;		wait.PollInfinite(kubeadmconstants.APICallRetryInterval, func() (bool, error) {
0000000000000000000000000000000000000000;;			listOpts := metav1.ListOptions{LabelSelector: labelKeyValPair}
0000000000000000000000000000000000000000;;			apiPods, err := client.CoreV1().Pods(metav1.NamespaceSystem).List(listOpts)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Printf("[apiclient] Error getting Pods with label selector %q [%v]\n", labelKeyValPair, err)
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(apiPods.Items) == 0 {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, pod := range apiPods.Items {
0000000000000000000000000000000000000000;;				fmt.Printf("[apiclient] Pod %s status: %s\n", pod.Name, pod.Status.Phase)
0000000000000000000000000000000000000000;;				if pod.Status.Phase != v1.PodRunning {
0000000000000000000000000000000000000000;;					return false, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
