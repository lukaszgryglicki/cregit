0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8bec0d41259e1a99db6b68f1f98c2c9c94067540;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		certsapi "k8s.io/api/certificates/v1beta1"
0000000000000000000000000000000000000000;;		clientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateAPIServer makes sure the server we're connecting to supports the Beta Certificates API
0000000000000000000000000000000000000000;;	func ValidateAPIServer(client *clientset.Clientset) error {
0000000000000000000000000000000000000000;;		version, err := client.DiscoveryClient.ServerVersion()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to check server version: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Printf("[bootstrap] Detected server version: %s\n", version.String())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check certificates API. If the server supports the version of the Certificates API we're using, we're good to go
0000000000000000000000000000000000000000;;		serverGroups, err := client.DiscoveryClient.ServerGroups()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("certificate API check failed: failed to retrieve a list of supported API objects [%v]", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, group := range serverGroups.Groups {
0000000000000000000000000000000000000000;;			if group.Name == certsapi.SchemeGroupVersion.Group {
0000000000000000000000000000000000000000;;				for _, version := range group.Versions {
0000000000000000000000000000000000000000;;					if version.Version == certsapi.SchemeGroupVersion.Version {
0000000000000000000000000000000000000000;;						fmt.Printf("[bootstrap] The server supports the Certificates API (%s/%s)\n", certsapi.SchemeGroupVersion.Group, certsapi.SchemeGroupVersion.Version)
0000000000000000000000000000000000000000;;						return nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("certificate API check failed: API server with version %s doesn't support Certificates API (%s/%s), use v1.6.0 or newer",
0000000000000000000000000000000000000000;;			version.String(), certsapi.SchemeGroupVersion.Group, certsapi.SchemeGroupVersion.Version)
0000000000000000000000000000000000000000;;	}
