0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8bec0d41259e1a99db6b68f1f98c2c9c94067540;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/version"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		clientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateAPIServer(t *testing.T) {
0000000000000000000000000000000000000000;;		expect := version.Info{
0000000000000000000000000000000000000000;;			Major:     "foo",
0000000000000000000000000000000000000000;;			Minor:     "bar",
0000000000000000000000000000000000000000;;			GitCommit: "baz",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			s      *httptest.Server
0000000000000000000000000000000000000000;;			expect bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				s:      httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {})),
0000000000000000000000000000000000000000;;				expect: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				s: httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					var obj interface{}
0000000000000000000000000000000000000000;;					switch req.URL.Path {
0000000000000000000000000000000000000000;;					case "/api":
0000000000000000000000000000000000000000;;						obj = &metav1.APIVersions{
0000000000000000000000000000000000000000;;							Versions: []string{
0000000000000000000000000000000000000000;;								"v1.6.0",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						output, err := json.Marshal(obj)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							t.Fatalf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;							return
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;						w.Write(output)
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						output, err := json.Marshal(expect)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;							return
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;						w.Write(output)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				})),
0000000000000000000000000000000000000000;;				expect: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				s: httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					var obj interface{}
0000000000000000000000000000000000000000;;					switch req.URL.Path {
0000000000000000000000000000000000000000;;					case "/api":
0000000000000000000000000000000000000000;;						obj = &metav1.APIVersions{
0000000000000000000000000000000000000000;;							Versions: []string{
0000000000000000000000000000000000000000;;								"v1.6.0",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						output, err := json.Marshal(obj)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							t.Fatalf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;							return
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;						w.Write(output)
0000000000000000000000000000000000000000;;					case "/apis":
0000000000000000000000000000000000000000;;						obj = &metav1.APIGroupList{
0000000000000000000000000000000000000000;;							Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name: "certificates.k8s.io",
0000000000000000000000000000000000000000;;									Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;										{GroupVersion: "certificates.k8s.io/v1beta1", Version: "v1beta1"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						output, err := json.Marshal(obj)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							t.Fatalf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;							return
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;						w.Write(output)
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						output, err := json.Marshal(expect)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;							return
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;						w.Write(output)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				})),
0000000000000000000000000000000000000000;;				expect: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			defer rt.s.Close()
0000000000000000000000000000000000000000;;			rc := &restclient.Config{Host: rt.s.URL}
0000000000000000000000000000000000000000;;			c, err := discovery.NewDiscoveryClientForConfig(rc)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("encountered an error while trying to get the new discovery client: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cs := &clientset.Clientset{DiscoveryClient: c}
0000000000000000000000000000000000000000;;			actual := ValidateAPIServer(cs)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expect {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed TestValidateAPIServer:\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.expect,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
