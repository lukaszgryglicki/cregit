0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9db0eae9e9d83114763752acc01f8cf31dda41c2;pkg/kubeadm/node/csr.go[pkg/kubeadm/node/csr.go][cmd/kubeadm/app/node/csr.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		certutil "k8s.io/client-go/util/cert"
0000000000000000000000000000000000000000;;		kubeconfigutil "k8s.io/kubernetes/cmd/kubeadm/app/util/kubeconfig"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/util/csr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const CSRContextAndUser = "kubelet-csr"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PerformTLSBootstrap executes a node certificate signing request.
0000000000000000000000000000000000000000;;	func PerformTLSBootstrap(cfg *clientcmdapi.Config, hostName string) error {
0000000000000000000000000000000000000000;;		client, err := kubeconfigutil.KubeConfigToClientSet(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Println("[csr] Created API client to obtain unique certificate for this node, generating keys and certificate signing request")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key, err := certutil.MakeEllipticPrivateKeyPEM()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to generate private key [%v]", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := csr.RequestNodeCertificate(client.CertificatesV1beta1().CertificateSigningRequests(), key, types.NodeName(hostName))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to request signed certificate from the API server [%v]", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println("[csr] Received signed certificate from the API server, generating KubeConfig...")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg.AuthInfos[CSRContextAndUser] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			ClientKeyData:         key,
0000000000000000000000000000000000000000;;			ClientCertificateData: cert,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.Contexts[CSRContextAndUser] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			AuthInfo: CSRContextAndUser,
0000000000000000000000000000000000000000;;			Cluster:  cfg.Contexts[cfg.CurrentContext].Cluster,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.CurrentContext = CSRContextAndUser
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
