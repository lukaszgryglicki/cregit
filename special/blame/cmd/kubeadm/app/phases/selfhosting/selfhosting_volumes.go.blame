0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0e747968c1d1a84875516315b14cefdbe08684de;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package selfhosting
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		clientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;		kubeadmconstants "k8s.io/kubernetes/cmd/kubeadm/app/constants"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type tlsKeyPair struct {
0000000000000000000000000000000000000000;;		name string
0000000000000000000000000000000000000000;;		cert string
0000000000000000000000000000000000000000;;		key  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func k8sSelfHostedVolumeMount() v1.VolumeMount {
0000000000000000000000000000000000000000;;		return v1.VolumeMount{
0000000000000000000000000000000000000000;;			Name:      "k8s",
0000000000000000000000000000000000000000;;			MountPath: kubeadmapi.GlobalEnvParams.KubernetesDir,
0000000000000000000000000000000000000000;;			ReadOnly:  true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func apiServerProjectedVolume(cfg *kubeadmapi.MasterConfiguration) v1.Volume {
0000000000000000000000000000000000000000;;		return v1.Volume{
0000000000000000000000000000000000000000;;			Name: "k8s",
0000000000000000000000000000000000000000;;			VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;				Projected: &v1.ProjectedVolumeSource{
0000000000000000000000000000000000000000;;					Sources: []v1.VolumeProjection{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.CACertAndKeyBaseName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Items: []v1.KeyToPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSCertKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.CACertName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSPrivateKeyKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.CAKeyName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.APIServerCertAndKeyBaseName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Items: []v1.KeyToPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSCertKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.APIServerCertName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSPrivateKeyKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.APIServerKeyName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.APIServerKubeletClientCertAndKeyBaseName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Items: []v1.KeyToPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSCertKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.APIServerKubeletClientCertName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSPrivateKeyKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.APIServerKubeletClientKeyName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.ServiceAccountKeyBaseName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Items: []v1.KeyToPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSCertKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.ServiceAccountPublicKeyName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSPrivateKeyKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.ServiceAccountPrivateKeyName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.FrontProxyCACertAndKeyBaseName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Items: []v1.KeyToPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSCertKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.FrontProxyCACertName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.FrontProxyClientCertAndKeyBaseName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Items: []v1.KeyToPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSCertKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.FrontProxyClientCertName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSPrivateKeyKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.FrontProxyClientKeyName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func schedulerProjectedVolume(cfg *kubeadmapi.MasterConfiguration) v1.Volume {
0000000000000000000000000000000000000000;;		return v1.Volume{
0000000000000000000000000000000000000000;;			Name: "k8s",
0000000000000000000000000000000000000000;;			VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;				Projected: &v1.ProjectedVolumeSource{
0000000000000000000000000000000000000000;;					Sources: []v1.VolumeProjection{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.SchedulerKubeConfigFileName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func controllerManagerProjectedVolume(cfg *kubeadmapi.MasterConfiguration) v1.Volume {
0000000000000000000000000000000000000000;;		return v1.Volume{
0000000000000000000000000000000000000000;;			Name: "k8s",
0000000000000000000000000000000000000000;;			VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;				Projected: &v1.ProjectedVolumeSource{
0000000000000000000000000000000000000000;;					Sources: []v1.VolumeProjection{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.ControllerManagerKubeConfigFileName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.CACertAndKeyBaseName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Items: []v1.KeyToPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSCertKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.CACertName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSPrivateKeyKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.CAKeyName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Secret: &v1.SecretProjection{
0000000000000000000000000000000000000000;;								LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;									Name: kubeadmconstants.ServiceAccountKeyBaseName,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								Items: []v1.KeyToPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Key:  v1.TLSPrivateKeyKey,
0000000000000000000000000000000000000000;;										Path: path.Join(path.Base(cfg.CertificatesDir), kubeadmconstants.ServiceAccountPrivateKeyName),
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createTLSSecrets(cfg *kubeadmapi.MasterConfiguration, client *clientset.Clientset) error {
0000000000000000000000000000000000000000;;		for _, tlsKeyPair := range getTLSKeyPairs() {
0000000000000000000000000000000000000000;;			secret, err := createTLSSecretFromFiles(
0000000000000000000000000000000000000000;;				tlsKeyPair.name,
0000000000000000000000000000000000000000;;				path.Join(cfg.CertificatesDir, tlsKeyPair.cert),
0000000000000000000000000000000000000000;;				path.Join(cfg.CertificatesDir, tlsKeyPair.key),
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := client.CoreV1().Secrets(metav1.NamespaceSystem).Create(secret); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Printf("[self-hosted] Created TLS secret %q from %s and %s\n", tlsKeyPair.name, tlsKeyPair.cert, tlsKeyPair.key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createOpaqueSecrets(cfg *kubeadmapi.MasterConfiguration, client *clientset.Clientset) error {
0000000000000000000000000000000000000000;;		files := []string{
0000000000000000000000000000000000000000;;			kubeadmconstants.SchedulerKubeConfigFileName,
0000000000000000000000000000000000000000;;			kubeadmconstants.ControllerManagerKubeConfigFileName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, file := range files {
0000000000000000000000000000000000000000;;			secret, err := createOpaqueSecretFromFile(
0000000000000000000000000000000000000000;;				file,
0000000000000000000000000000000000000000;;				path.Join(kubeadmapi.GlobalEnvParams.KubernetesDir, file),
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := client.CoreV1().Secrets(metav1.NamespaceSystem).Create(secret); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Printf("[self-hosted] Created secret %q\n", file)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createTLSSecretFromFiles(secretName, crt, key string) (*v1.Secret, error) {
0000000000000000000000000000000000000000;;		crtBytes, err := ioutil.ReadFile(crt)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		keyBytes, err := ioutil.ReadFile(key)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      secretName,
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: v1.SecretTypeTLS,
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				v1.TLSCertKey:       crtBytes,
0000000000000000000000000000000000000000;;				v1.TLSPrivateKeyKey: keyBytes,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createOpaqueSecretFromFile(secretName, file string) (*v1.Secret, error) {
0000000000000000000000000000000000000000;;		fileBytes, err := ioutil.ReadFile(file)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      secretName,
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: v1.SecretTypeOpaque,
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				path.Base(file): fileBytes,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTLSKeyPairs() []*tlsKeyPair {
0000000000000000000000000000000000000000;;		return []*tlsKeyPair{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: kubeadmconstants.CACertAndKeyBaseName,
0000000000000000000000000000000000000000;;				cert: kubeadmconstants.CACertName,
0000000000000000000000000000000000000000;;				key:  kubeadmconstants.CAKeyName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: kubeadmconstants.APIServerCertAndKeyBaseName,
0000000000000000000000000000000000000000;;				cert: kubeadmconstants.APIServerCertName,
0000000000000000000000000000000000000000;;				key:  kubeadmconstants.APIServerKeyName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: kubeadmconstants.APIServerKubeletClientCertAndKeyBaseName,
0000000000000000000000000000000000000000;;				cert: kubeadmconstants.APIServerKubeletClientCertName,
0000000000000000000000000000000000000000;;				key:  kubeadmconstants.APIServerKubeletClientKeyName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: kubeadmconstants.ServiceAccountKeyBaseName,
0000000000000000000000000000000000000000;;				cert: kubeadmconstants.ServiceAccountPublicKeyName,
0000000000000000000000000000000000000000;;				key:  kubeadmconstants.ServiceAccountPrivateKeyName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: kubeadmconstants.FrontProxyCACertAndKeyBaseName,
0000000000000000000000000000000000000000;;				cert: kubeadmconstants.FrontProxyCACertName,
0000000000000000000000000000000000000000;;				key:  kubeadmconstants.FrontProxyCAKeyName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: kubeadmconstants.FrontProxyClientCertAndKeyBaseName,
0000000000000000000000000000000000000000;;				cert: kubeadmconstants.FrontProxyClientCertName,
0000000000000000000000000000000000000000;;				key:  kubeadmconstants.FrontProxyClientKeyName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
