0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
36f0f88f177f3b39fb7f0b057b5216e4427469b4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package selfhosting
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;		kubeadmconstants "k8s.io/kubernetes/cmd/kubeadm/app/constants"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMutatePodSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			component string
0000000000000000000000000000000000000000;;			podSpec   *v1.PodSpec
0000000000000000000000000000000000000000;;			expected  v1.PodSpec
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				component: kubeAPIServer,
0000000000000000000000000000000000000000;;				podSpec:   &v1.PodSpec{},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;						kubeadmconstants.LabelNodeRoleMaster: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Tolerations: []v1.Toleration{
0000000000000000000000000000000000000000;;						kubeadmconstants.MasterToleration,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					DNSPolicy: v1.DNSClusterFirstWithHostNet,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				component: kubeControllerManager,
0000000000000000000000000000000000000000;;				podSpec:   &v1.PodSpec{},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;						kubeadmconstants.LabelNodeRoleMaster: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Tolerations: []v1.Toleration{
0000000000000000000000000000000000000000;;						kubeadmconstants.MasterToleration,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					DNSPolicy: v1.DNSClusterFirstWithHostNet,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				component: kubeScheduler,
0000000000000000000000000000000000000000;;				podSpec:   &v1.PodSpec{},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;						kubeadmconstants.LabelNodeRoleMaster: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Tolerations: []v1.Toleration{
0000000000000000000000000000000000000000;;						kubeadmconstants.MasterToleration,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					DNSPolicy: v1.DNSClusterFirstWithHostNet,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg := &kubeadmapi.MasterConfiguration{}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			mutatePodSpec(cfg, rt.component, rt.podSpec)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(*rt.podSpec, rt.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("failed mutatePodSpec:\nexpected:\n%v\nsaw:\n%v", rt.expected, *rt.podSpec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddNodeSelectorToPodSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			podSpec  *v1.PodSpec
0000000000000000000000000000000000000000;;			expected v1.PodSpec
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podSpec: &v1.PodSpec{},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;						kubeadmconstants.LabelNodeRoleMaster: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podSpec: &v1.PodSpec{
0000000000000000000000000000000000000000;;					NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "bar",
0000000000000000000000000000000000000000;;						kubeadmconstants.LabelNodeRoleMaster: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg := &kubeadmapi.MasterConfiguration{}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			addNodeSelectorToPodSpec(cfg, rt.podSpec)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(*rt.podSpec, rt.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("failed addNodeSelectorToPodSpec:\nexpected:\n%v\nsaw:\n%v", rt.expected, *rt.podSpec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetMasterTolerationOnPodSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			podSpec  *v1.PodSpec
0000000000000000000000000000000000000000;;			expected v1.PodSpec
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podSpec: &v1.PodSpec{},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					Tolerations: []v1.Toleration{
0000000000000000000000000000000000000000;;						kubeadmconstants.MasterToleration,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podSpec: &v1.PodSpec{
0000000000000000000000000000000000000000;;					Tolerations: []v1.Toleration{
0000000000000000000000000000000000000000;;						{Key: "foo", Value: "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					Tolerations: []v1.Toleration{
0000000000000000000000000000000000000000;;						{Key: "foo", Value: "bar"},
0000000000000000000000000000000000000000;;						kubeadmconstants.MasterToleration,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg := &kubeadmapi.MasterConfiguration{}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			setMasterTolerationOnPodSpec(cfg, rt.podSpec)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(*rt.podSpec, rt.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("failed setMasterTolerationOnPodSpec:\nexpected:\n%v\nsaw:\n%v", rt.expected, *rt.podSpec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetRightDNSPolicyOnPodSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			podSpec  *v1.PodSpec
0000000000000000000000000000000000000000;;			expected v1.PodSpec
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podSpec: &v1.PodSpec{},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					DNSPolicy: v1.DNSClusterFirstWithHostNet,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				podSpec: &v1.PodSpec{
0000000000000000000000000000000000000000;;					DNSPolicy: v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: v1.PodSpec{
0000000000000000000000000000000000000000;;					DNSPolicy: v1.DNSClusterFirstWithHostNet,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg := &kubeadmapi.MasterConfiguration{}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			setRightDNSPolicyOnPodSpec(cfg, rt.podSpec)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(*rt.podSpec, rt.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("failed setRightDNSPolicyOnPodSpec:\nexpected:\n%v\nsaw:\n%v", rt.expected, *rt.podSpec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
