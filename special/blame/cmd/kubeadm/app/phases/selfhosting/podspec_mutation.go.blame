0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bf686dc8b1b1ee0c13afcf5468e32cd7184d8e2c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package selfhosting
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;		kubeadmconstants "k8s.io/kubernetes/cmd/kubeadm/app/constants"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mutatePodSpec makes a Static Pod-hosted PodSpec suitable for self-hosting
0000000000000000000000000000000000000000;;	func mutatePodSpec(cfg *kubeadmapi.MasterConfiguration, name string, podSpec *v1.PodSpec) {
0000000000000000000000000000000000000000;;		mutators := map[string][]func(*kubeadmapi.MasterConfiguration, *v1.PodSpec){
0000000000000000000000000000000000000000;;			kubeAPIServer: {
0000000000000000000000000000000000000000;;				addNodeSelectorToPodSpec,
0000000000000000000000000000000000000000;;				setMasterTolerationOnPodSpec,
0000000000000000000000000000000000000000;;				setRightDNSPolicyOnPodSpec,
0000000000000000000000000000000000000000;;				setVolumesOnKubeAPIServerPodSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			kubeControllerManager: {
0000000000000000000000000000000000000000;;				addNodeSelectorToPodSpec,
0000000000000000000000000000000000000000;;				setMasterTolerationOnPodSpec,
0000000000000000000000000000000000000000;;				setRightDNSPolicyOnPodSpec,
0000000000000000000000000000000000000000;;				setVolumesOnKubeControllerManagerPodSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			kubeScheduler: {
0000000000000000000000000000000000000000;;				addNodeSelectorToPodSpec,
0000000000000000000000000000000000000000;;				setMasterTolerationOnPodSpec,
0000000000000000000000000000000000000000;;				setRightDNSPolicyOnPodSpec,
0000000000000000000000000000000000000000;;				setVolumesOnKubeSchedulerPodSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get the mutator functions for the component in question, then loop through and execute them
0000000000000000000000000000000000000000;;		mutatorsForComponent := mutators[name]
0000000000000000000000000000000000000000;;		for _, mutateFunc := range mutatorsForComponent {
0000000000000000000000000000000000000000;;			mutateFunc(cfg, podSpec)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// addNodeSelectorToPodSpec makes Pod require to be scheduled on a node marked with the master label
0000000000000000000000000000000000000000;;	func addNodeSelectorToPodSpec(cfg *kubeadmapi.MasterConfiguration, podSpec *v1.PodSpec) {
0000000000000000000000000000000000000000;;		if podSpec.NodeSelector == nil {
0000000000000000000000000000000000000000;;			podSpec.NodeSelector = map[string]string{kubeadmconstants.LabelNodeRoleMaster: ""}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podSpec.NodeSelector[kubeadmconstants.LabelNodeRoleMaster] = ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setMasterTolerationOnPodSpec makes the Pod tolerate the master taint
0000000000000000000000000000000000000000;;	func setMasterTolerationOnPodSpec(cfg *kubeadmapi.MasterConfiguration, podSpec *v1.PodSpec) {
0000000000000000000000000000000000000000;;		if podSpec.Tolerations == nil {
0000000000000000000000000000000000000000;;			podSpec.Tolerations = []v1.Toleration{kubeadmconstants.MasterToleration}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podSpec.Tolerations = append(podSpec.Tolerations, kubeadmconstants.MasterToleration)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setRightDNSPolicyOnPodSpec makes sure the self-hosted components can look up things via kube-dns if necessary
0000000000000000000000000000000000000000;;	func setRightDNSPolicyOnPodSpec(cfg *kubeadmapi.MasterConfiguration, podSpec *v1.PodSpec) {
0000000000000000000000000000000000000000;;		podSpec.DNSPolicy = v1.DNSClusterFirstWithHostNet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setVolumesOnKubeAPIServerPodSpec makes sure the self-hosted api server has the required files
0000000000000000000000000000000000000000;;	func setVolumesOnKubeAPIServerPodSpec(cfg *kubeadmapi.MasterConfiguration, podSpec *v1.PodSpec) {
0000000000000000000000000000000000000000;;		setK8sVolume(apiServerProjectedVolume, cfg, podSpec)
0000000000000000000000000000000000000000;;		for _, c := range podSpec.Containers {
0000000000000000000000000000000000000000;;			c.VolumeMounts = append(c.VolumeMounts, k8sSelfHostedVolumeMount())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setVolumesOnKubeControllerManagerPodSpec makes sure the self-hosted controller manager has the required files
0000000000000000000000000000000000000000;;	func setVolumesOnKubeControllerManagerPodSpec(cfg *kubeadmapi.MasterConfiguration, podSpec *v1.PodSpec) {
0000000000000000000000000000000000000000;;		setK8sVolume(controllerManagerProjectedVolume, cfg, podSpec)
0000000000000000000000000000000000000000;;		for _, c := range podSpec.Containers {
0000000000000000000000000000000000000000;;			c.VolumeMounts = append(c.VolumeMounts, k8sSelfHostedVolumeMount())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setVolumesOnKubeSchedulerPodSpec makes sure the self-hosted scheduler has the required files
0000000000000000000000000000000000000000;;	func setVolumesOnKubeSchedulerPodSpec(cfg *kubeadmapi.MasterConfiguration, podSpec *v1.PodSpec) {
0000000000000000000000000000000000000000;;		setK8sVolume(schedulerProjectedVolume, cfg, podSpec)
0000000000000000000000000000000000000000;;		for _, c := range podSpec.Containers {
0000000000000000000000000000000000000000;;			c.VolumeMounts = append(c.VolumeMounts, k8sSelfHostedVolumeMount())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setK8sVolume(cb func(cfg *kubeadmapi.MasterConfiguration) v1.Volume, cfg *kubeadmapi.MasterConfiguration, podSpec *v1.PodSpec) {
0000000000000000000000000000000000000000;;		for i, v := range podSpec.Volumes {
0000000000000000000000000000000000000000;;			if v.Name == "k8s" {
0000000000000000000000000000000000000000;;				podSpec.Volumes[i] = cb(cfg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
