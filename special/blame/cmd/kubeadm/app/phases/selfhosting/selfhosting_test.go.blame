0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
36f0f88f177f3b39fb7f0b057b5216e4427469b4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package selfhosting
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		testAPIServerPod = `
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Pod
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  annotations:
0000000000000000000000000000000000000000;;	    scheduler.alpha.kubernetes.io/critical-pod: ""
0000000000000000000000000000000000000000;;	  creationTimestamp: null
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    component: kube-apiserver
0000000000000000000000000000000000000000;;	    tier: control-plane
0000000000000000000000000000000000000000;;	  name: kube-apiserver
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  containers:
0000000000000000000000000000000000000000;;	  - command:
0000000000000000000000000000000000000000;;	    - kube-apiserver
0000000000000000000000000000000000000000;;	    - --client-ca-file=/etc/kubernetes/pki/ca.crt
0000000000000000000000000000000000000000;;	    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
0000000000000000000000000000000000000000;;	    - --allow-privileged=true
0000000000000000000000000000000000000000;;	    - --service-cluster-ip-range=10.96.0.0/12
0000000000000000000000000000000000000000;;	    - --service-account-key-file=/etc/kubernetes/pki/sa.pub
0000000000000000000000000000000000000000;;	    - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
0000000000000000000000000000000000000000;;	    - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
0000000000000000000000000000000000000000;;	    - --secure-port=6443
0000000000000000000000000000000000000000;;	    - --insecure-port=0
0000000000000000000000000000000000000000;;	    - --admission-control=Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota
0000000000000000000000000000000000000000;;	    - --requestheader-extra-headers-prefix=X-Remote-Extra-
0000000000000000000000000000000000000000;;	    - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
0000000000000000000000000000000000000000;;	    - --experimental-bootstrap-token-auth=true
0000000000000000000000000000000000000000;;	    - --requestheader-group-headers=X-Remote-Group
0000000000000000000000000000000000000000;;	    - --requestheader-allowed-names=front-proxy-client
0000000000000000000000000000000000000000;;	    - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
0000000000000000000000000000000000000000;;	    - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
0000000000000000000000000000000000000000;;	    - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
0000000000000000000000000000000000000000;;	    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
0000000000000000000000000000000000000000;;	    - --requestheader-username-headers=X-Remote-User
0000000000000000000000000000000000000000;;	    - --authorization-mode=Node,RBAC
0000000000000000000000000000000000000000;;	    - --advertise-address=192.168.200.101
0000000000000000000000000000000000000000;;	    - --etcd-servers=http://127.0.0.1:2379
0000000000000000000000000000000000000000;;	    image: gcr.io/google_containers/kube-apiserver-amd64:v1.7.0
0000000000000000000000000000000000000000;;	    livenessProbe:
0000000000000000000000000000000000000000;;	      failureThreshold: 8
0000000000000000000000000000000000000000;;	      httpGet:
0000000000000000000000000000000000000000;;	        host: 127.0.0.1
0000000000000000000000000000000000000000;;	        path: /healthz
0000000000000000000000000000000000000000;;	        port: 6443
0000000000000000000000000000000000000000;;	        scheme: HTTPS
0000000000000000000000000000000000000000;;	      initialDelaySeconds: 15
0000000000000000000000000000000000000000;;	      timeoutSeconds: 15
0000000000000000000000000000000000000000;;	    name: kube-apiserver
0000000000000000000000000000000000000000;;	    resources:
0000000000000000000000000000000000000000;;	      requests:
0000000000000000000000000000000000000000;;	        cpu: 250m
0000000000000000000000000000000000000000;;	    volumeMounts:
0000000000000000000000000000000000000000;;	    - mountPath: /etc/kubernetes
0000000000000000000000000000000000000000;;	      name: k8s
0000000000000000000000000000000000000000;;	      readOnly: true
0000000000000000000000000000000000000000;;	    - mountPath: /etc/ssl/certs
0000000000000000000000000000000000000000;;	      name: certs
0000000000000000000000000000000000000000;;	    - mountPath: /etc/pki
0000000000000000000000000000000000000000;;	      name: pki
0000000000000000000000000000000000000000;;	  hostNetwork: true
0000000000000000000000000000000000000000;;	  volumes:
0000000000000000000000000000000000000000;;	  - name: k8s
0000000000000000000000000000000000000000;;	    projected:
0000000000000000000000000000000000000000;;	      sources:
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          items:
0000000000000000000000000000000000000000;;	          - key: tls.crt
0000000000000000000000000000000000000000;;	            path: ca.crt
0000000000000000000000000000000000000000;;	          - key: tls.key
0000000000000000000000000000000000000000;;	            path: ca.key
0000000000000000000000000000000000000000;;	          name: ca
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          items:
0000000000000000000000000000000000000000;;	          - key: tls.crt
0000000000000000000000000000000000000000;;	            path: apiserver.crt
0000000000000000000000000000000000000000;;	          - key: tls.key
0000000000000000000000000000000000000000;;	            path: apiserver.key
0000000000000000000000000000000000000000;;	          name: apiserver
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          items:
0000000000000000000000000000000000000000;;	          - key: tls.crt
0000000000000000000000000000000000000000;;	            path: apiserver-kubelet-client.crt
0000000000000000000000000000000000000000;;	          - key: tls.key
0000000000000000000000000000000000000000;;	            path: apiserver-kubelet-client.key
0000000000000000000000000000000000000000;;	          name: apiserver-kubelet-client
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          items:
0000000000000000000000000000000000000000;;	          - key: tls.crt
0000000000000000000000000000000000000000;;	            path: sa.pub
0000000000000000000000000000000000000000;;	          - key: tls.key
0000000000000000000000000000000000000000;;	            path: sa.key
0000000000000000000000000000000000000000;;	          name: sa
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          items:
0000000000000000000000000000000000000000;;	          - key: tls.crt
0000000000000000000000000000000000000000;;	            path: front-proxy-ca.crt
0000000000000000000000000000000000000000;;	          name: front-proxy-ca
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          items:
0000000000000000000000000000000000000000;;	          - key: tls.crt
0000000000000000000000000000000000000000;;	            path: front-proxy-client.crt
0000000000000000000000000000000000000000;;	          - key: tls.key
0000000000000000000000000000000000000000;;	            path: front-proxy-client.key
0000000000000000000000000000000000000000;;	          name: front-proxy-client
0000000000000000000000000000000000000000;;	  - hostPath:
0000000000000000000000000000000000000000;;	      path: /etc/ssl/certs
0000000000000000000000000000000000000000;;	    name: certs
0000000000000000000000000000000000000000;;	  - hostPath:
0000000000000000000000000000000000000000;;	      path: /etc/pki
0000000000000000000000000000000000000000;;	    name: pki
0000000000000000000000000000000000000000;;	status: {}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testAPIServerDaemonSet = `metadata:
0000000000000000000000000000000000000000;;	  creationTimestamp: null
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    k8s-app: self-hosted-kube-apiserver
0000000000000000000000000000000000000000;;	  name: self-hosted-kube-apiserver
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  template:
0000000000000000000000000000000000000000;;	    metadata:
0000000000000000000000000000000000000000;;	      creationTimestamp: null
0000000000000000000000000000000000000000;;	      labels:
0000000000000000000000000000000000000000;;	        k8s-app: self-hosted-kube-apiserver
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      containers:
0000000000000000000000000000000000000000;;	      - command:
0000000000000000000000000000000000000000;;	        - kube-apiserver
0000000000000000000000000000000000000000;;	        - --client-ca-file=/etc/kubernetes/pki/ca.crt
0000000000000000000000000000000000000000;;	        - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
0000000000000000000000000000000000000000;;	        - --allow-privileged=true
0000000000000000000000000000000000000000;;	        - --service-cluster-ip-range=10.96.0.0/12
0000000000000000000000000000000000000000;;	        - --service-account-key-file=/etc/kubernetes/pki/sa.pub
0000000000000000000000000000000000000000;;	        - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
0000000000000000000000000000000000000000;;	        - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
0000000000000000000000000000000000000000;;	        - --secure-port=6443
0000000000000000000000000000000000000000;;	        - --insecure-port=0
0000000000000000000000000000000000000000;;	        - --admission-control=Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota
0000000000000000000000000000000000000000;;	        - --requestheader-extra-headers-prefix=X-Remote-Extra-
0000000000000000000000000000000000000000;;	        - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
0000000000000000000000000000000000000000;;	        - --experimental-bootstrap-token-auth=true
0000000000000000000000000000000000000000;;	        - --requestheader-group-headers=X-Remote-Group
0000000000000000000000000000000000000000;;	        - --requestheader-allowed-names=front-proxy-client
0000000000000000000000000000000000000000;;	        - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
0000000000000000000000000000000000000000;;	        - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
0000000000000000000000000000000000000000;;	        - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
0000000000000000000000000000000000000000;;	        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
0000000000000000000000000000000000000000;;	        - --requestheader-username-headers=X-Remote-User
0000000000000000000000000000000000000000;;	        - --authorization-mode=Node,RBAC
0000000000000000000000000000000000000000;;	        - --advertise-address=192.168.200.101
0000000000000000000000000000000000000000;;	        - --etcd-servers=http://127.0.0.1:2379
0000000000000000000000000000000000000000;;	        image: gcr.io/google_containers/kube-apiserver-amd64:v1.7.0
0000000000000000000000000000000000000000;;	        livenessProbe:
0000000000000000000000000000000000000000;;	          failureThreshold: 8
0000000000000000000000000000000000000000;;	          httpGet:
0000000000000000000000000000000000000000;;	            host: 127.0.0.1
0000000000000000000000000000000000000000;;	            path: /healthz
0000000000000000000000000000000000000000;;	            port: 6443
0000000000000000000000000000000000000000;;	            scheme: HTTPS
0000000000000000000000000000000000000000;;	          initialDelaySeconds: 15
0000000000000000000000000000000000000000;;	          timeoutSeconds: 15
0000000000000000000000000000000000000000;;	        name: kube-apiserver
0000000000000000000000000000000000000000;;	        resources:
0000000000000000000000000000000000000000;;	          requests:
0000000000000000000000000000000000000000;;	            cpu: 250m
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - mountPath: /etc/kubernetes
0000000000000000000000000000000000000000;;	          name: k8s
0000000000000000000000000000000000000000;;	          readOnly: true
0000000000000000000000000000000000000000;;	        - mountPath: /etc/ssl/certs
0000000000000000000000000000000000000000;;	          name: certs
0000000000000000000000000000000000000000;;	        - mountPath: /etc/pki
0000000000000000000000000000000000000000;;	          name: pki
0000000000000000000000000000000000000000;;	      dnsPolicy: ClusterFirstWithHostNet
0000000000000000000000000000000000000000;;	      hostNetwork: true
0000000000000000000000000000000000000000;;	      nodeSelector:
0000000000000000000000000000000000000000;;	        node-role.kubernetes.io/master: ""
0000000000000000000000000000000000000000;;	      tolerations:
0000000000000000000000000000000000000000;;	      - effect: NoSchedule
0000000000000000000000000000000000000000;;	        key: node-role.kubernetes.io/master
0000000000000000000000000000000000000000;;	      volumes:
0000000000000000000000000000000000000000;;	      - name: k8s
0000000000000000000000000000000000000000;;	        projected:
0000000000000000000000000000000000000000;;	          sources:
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              items:
0000000000000000000000000000000000000000;;	              - key: tls.crt
0000000000000000000000000000000000000000;;	                path: ca.crt
0000000000000000000000000000000000000000;;	              - key: tls.key
0000000000000000000000000000000000000000;;	                path: ca.key
0000000000000000000000000000000000000000;;	              name: ca
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              items:
0000000000000000000000000000000000000000;;	              - key: tls.crt
0000000000000000000000000000000000000000;;	                path: apiserver.crt
0000000000000000000000000000000000000000;;	              - key: tls.key
0000000000000000000000000000000000000000;;	                path: apiserver.key
0000000000000000000000000000000000000000;;	              name: apiserver
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              items:
0000000000000000000000000000000000000000;;	              - key: tls.crt
0000000000000000000000000000000000000000;;	                path: apiserver-kubelet-client.crt
0000000000000000000000000000000000000000;;	              - key: tls.key
0000000000000000000000000000000000000000;;	                path: apiserver-kubelet-client.key
0000000000000000000000000000000000000000;;	              name: apiserver-kubelet-client
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              items:
0000000000000000000000000000000000000000;;	              - key: tls.crt
0000000000000000000000000000000000000000;;	                path: sa.pub
0000000000000000000000000000000000000000;;	              - key: tls.key
0000000000000000000000000000000000000000;;	                path: sa.key
0000000000000000000000000000000000000000;;	              name: sa
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              items:
0000000000000000000000000000000000000000;;	              - key: tls.crt
0000000000000000000000000000000000000000;;	                path: front-proxy-ca.crt
0000000000000000000000000000000000000000;;	              name: front-proxy-ca
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              items:
0000000000000000000000000000000000000000;;	              - key: tls.crt
0000000000000000000000000000000000000000;;	                path: front-proxy-client.crt
0000000000000000000000000000000000000000;;	              - key: tls.key
0000000000000000000000000000000000000000;;	                path: front-proxy-client.key
0000000000000000000000000000000000000000;;	              name: front-proxy-client
0000000000000000000000000000000000000000;;	      - hostPath:
0000000000000000000000000000000000000000;;	          path: /etc/ssl/certs
0000000000000000000000000000000000000000;;	        name: certs
0000000000000000000000000000000000000000;;	      - hostPath:
0000000000000000000000000000000000000000;;	          path: /etc/pki
0000000000000000000000000000000000000000;;	        name: pki
0000000000000000000000000000000000000000;;	  updateStrategy: {}
0000000000000000000000000000000000000000;;	status:
0000000000000000000000000000000000000000;;	  currentNumberScheduled: 0
0000000000000000000000000000000000000000;;	  desiredNumberScheduled: 0
0000000000000000000000000000000000000000;;	  numberMisscheduled: 0
0000000000000000000000000000000000000000;;	  numberReady: 0
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testControllerManagerPod = `
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Pod
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  annotations:
0000000000000000000000000000000000000000;;	    scheduler.alpha.kubernetes.io/critical-pod: ""
0000000000000000000000000000000000000000;;	  creationTimestamp: null
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    component: kube-controller-manager
0000000000000000000000000000000000000000;;	    tier: control-plane
0000000000000000000000000000000000000000;;	  name: kube-controller-manager
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  containers:
0000000000000000000000000000000000000000;;	  - command:
0000000000000000000000000000000000000000;;	    - kube-controller-manager
0000000000000000000000000000000000000000;;	    - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
0000000000000000000000000000000000000000;;	    - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
0000000000000000000000000000000000000000;;	    - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
0000000000000000000000000000000000000000;;	    - --leader-elect=true
0000000000000000000000000000000000000000;;	    - --kubeconfig=/etc/kubernetes/controller-manager.conf
0000000000000000000000000000000000000000;;	    - --controllers=*,bootstrapsigner,tokencleaner
0000000000000000000000000000000000000000;;	    - --root-ca-file=/etc/kubernetes/pki/ca.crt
0000000000000000000000000000000000000000;;	    - --address=127.0.0.1
0000000000000000000000000000000000000000;;	    - --use-service-account-credentials=true
0000000000000000000000000000000000000000;;	    image: gcr.io/google_containers/kube-controller-manager-amd64:v1.7.0
0000000000000000000000000000000000000000;;	    livenessProbe:
0000000000000000000000000000000000000000;;	      failureThreshold: 8
0000000000000000000000000000000000000000;;	      httpGet:
0000000000000000000000000000000000000000;;	        host: 127.0.0.1
0000000000000000000000000000000000000000;;	        path: /healthz
0000000000000000000000000000000000000000;;	        port: 10252
0000000000000000000000000000000000000000;;	        scheme: HTTP
0000000000000000000000000000000000000000;;	      initialDelaySeconds: 15
0000000000000000000000000000000000000000;;	      timeoutSeconds: 15
0000000000000000000000000000000000000000;;	    name: kube-controller-manager
0000000000000000000000000000000000000000;;	    resources:
0000000000000000000000000000000000000000;;	      requests:
0000000000000000000000000000000000000000;;	        cpu: 200m
0000000000000000000000000000000000000000;;	    volumeMounts:
0000000000000000000000000000000000000000;;	    - mountPath: /etc/kubernetes
0000000000000000000000000000000000000000;;	      name: k8s
0000000000000000000000000000000000000000;;	      readOnly: true
0000000000000000000000000000000000000000;;	    - mountPath: /etc/ssl/certs
0000000000000000000000000000000000000000;;	      name: certs
0000000000000000000000000000000000000000;;	    - mountPath: /etc/pki
0000000000000000000000000000000000000000;;	      name: pki
0000000000000000000000000000000000000000;;	  hostNetwork: true
0000000000000000000000000000000000000000;;	  volumes:
0000000000000000000000000000000000000000;;	  - name: k8s
0000000000000000000000000000000000000000;;	    projected:
0000000000000000000000000000000000000000;;	      sources:
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          name: controller-manager.conf
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          items:
0000000000000000000000000000000000000000;;	          - key: tls.crt
0000000000000000000000000000000000000000;;	            path: ca.crt
0000000000000000000000000000000000000000;;	          - key: tls.key
0000000000000000000000000000000000000000;;	            path: ca.key
0000000000000000000000000000000000000000;;	          name: ca
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          items:
0000000000000000000000000000000000000000;;	          - key: tls.key
0000000000000000000000000000000000000000;;	            path: sa.key
0000000000000000000000000000000000000000;;	          name: sa
0000000000000000000000000000000000000000;;	  - hostPath:
0000000000000000000000000000000000000000;;	      path: /etc/ssl/certs
0000000000000000000000000000000000000000;;	    name: certs
0000000000000000000000000000000000000000;;	  - hostPath:
0000000000000000000000000000000000000000;;	      path: /etc/pki
0000000000000000000000000000000000000000;;	    name: pki
0000000000000000000000000000000000000000;;	status: {}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testControllerManagerDaemonSet = `metadata:
0000000000000000000000000000000000000000;;	  creationTimestamp: null
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    k8s-app: self-hosted-kube-controller-manager
0000000000000000000000000000000000000000;;	  name: self-hosted-kube-controller-manager
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  template:
0000000000000000000000000000000000000000;;	    metadata:
0000000000000000000000000000000000000000;;	      creationTimestamp: null
0000000000000000000000000000000000000000;;	      labels:
0000000000000000000000000000000000000000;;	        k8s-app: self-hosted-kube-controller-manager
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      containers:
0000000000000000000000000000000000000000;;	      - command:
0000000000000000000000000000000000000000;;	        - kube-controller-manager
0000000000000000000000000000000000000000;;	        - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
0000000000000000000000000000000000000000;;	        - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
0000000000000000000000000000000000000000;;	        - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
0000000000000000000000000000000000000000;;	        - --leader-elect=true
0000000000000000000000000000000000000000;;	        - --kubeconfig=/etc/kubernetes/controller-manager.conf
0000000000000000000000000000000000000000;;	        - --controllers=*,bootstrapsigner,tokencleaner
0000000000000000000000000000000000000000;;	        - --root-ca-file=/etc/kubernetes/pki/ca.crt
0000000000000000000000000000000000000000;;	        - --address=127.0.0.1
0000000000000000000000000000000000000000;;	        - --use-service-account-credentials=true
0000000000000000000000000000000000000000;;	        image: gcr.io/google_containers/kube-controller-manager-amd64:v1.7.0
0000000000000000000000000000000000000000;;	        livenessProbe:
0000000000000000000000000000000000000000;;	          failureThreshold: 8
0000000000000000000000000000000000000000;;	          httpGet:
0000000000000000000000000000000000000000;;	            host: 127.0.0.1
0000000000000000000000000000000000000000;;	            path: /healthz
0000000000000000000000000000000000000000;;	            port: 10252
0000000000000000000000000000000000000000;;	            scheme: HTTP
0000000000000000000000000000000000000000;;	          initialDelaySeconds: 15
0000000000000000000000000000000000000000;;	          timeoutSeconds: 15
0000000000000000000000000000000000000000;;	        name: kube-controller-manager
0000000000000000000000000000000000000000;;	        resources:
0000000000000000000000000000000000000000;;	          requests:
0000000000000000000000000000000000000000;;	            cpu: 200m
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - mountPath: /etc/kubernetes
0000000000000000000000000000000000000000;;	          name: k8s
0000000000000000000000000000000000000000;;	          readOnly: true
0000000000000000000000000000000000000000;;	        - mountPath: /etc/ssl/certs
0000000000000000000000000000000000000000;;	          name: certs
0000000000000000000000000000000000000000;;	        - mountPath: /etc/pki
0000000000000000000000000000000000000000;;	          name: pki
0000000000000000000000000000000000000000;;	      dnsPolicy: ClusterFirstWithHostNet
0000000000000000000000000000000000000000;;	      hostNetwork: true
0000000000000000000000000000000000000000;;	      nodeSelector:
0000000000000000000000000000000000000000;;	        node-role.kubernetes.io/master: ""
0000000000000000000000000000000000000000;;	      tolerations:
0000000000000000000000000000000000000000;;	      - effect: NoSchedule
0000000000000000000000000000000000000000;;	        key: node-role.kubernetes.io/master
0000000000000000000000000000000000000000;;	      volumes:
0000000000000000000000000000000000000000;;	      - name: k8s
0000000000000000000000000000000000000000;;	        projected:
0000000000000000000000000000000000000000;;	          sources:
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              name: controller-manager.conf
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              items:
0000000000000000000000000000000000000000;;	              - key: tls.crt
0000000000000000000000000000000000000000;;	                path: ca.crt
0000000000000000000000000000000000000000;;	              - key: tls.key
0000000000000000000000000000000000000000;;	                path: ca.key
0000000000000000000000000000000000000000;;	              name: ca
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              items:
0000000000000000000000000000000000000000;;	              - key: tls.key
0000000000000000000000000000000000000000;;	                path: sa.key
0000000000000000000000000000000000000000;;	              name: sa
0000000000000000000000000000000000000000;;	      - hostPath:
0000000000000000000000000000000000000000;;	          path: /etc/ssl/certs
0000000000000000000000000000000000000000;;	        name: certs
0000000000000000000000000000000000000000;;	      - hostPath:
0000000000000000000000000000000000000000;;	          path: /etc/pki
0000000000000000000000000000000000000000;;	        name: pki
0000000000000000000000000000000000000000;;	  updateStrategy: {}
0000000000000000000000000000000000000000;;	status:
0000000000000000000000000000000000000000;;	  currentNumberScheduled: 0
0000000000000000000000000000000000000000;;	  desiredNumberScheduled: 0
0000000000000000000000000000000000000000;;	  numberMisscheduled: 0
0000000000000000000000000000000000000000;;	  numberReady: 0
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testSchedulerPod = `
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Pod
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  annotations:
0000000000000000000000000000000000000000;;	    scheduler.alpha.kubernetes.io/critical-pod: ""
0000000000000000000000000000000000000000;;	  creationTimestamp: null
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    component: kube-scheduler
0000000000000000000000000000000000000000;;	    tier: control-plane
0000000000000000000000000000000000000000;;	  name: kube-scheduler
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  containers:
0000000000000000000000000000000000000000;;	  - command:
0000000000000000000000000000000000000000;;	    - kube-scheduler
0000000000000000000000000000000000000000;;	    - --address=127.0.0.1
0000000000000000000000000000000000000000;;	    - --leader-elect=true
0000000000000000000000000000000000000000;;	    - --kubeconfig=/etc/kubernetes/scheduler.conf
0000000000000000000000000000000000000000;;	    image: gcr.io/google_containers/kube-scheduler-amd64:v1.7.0
0000000000000000000000000000000000000000;;	    livenessProbe:
0000000000000000000000000000000000000000;;	      failureThreshold: 8
0000000000000000000000000000000000000000;;	      httpGet:
0000000000000000000000000000000000000000;;	        host: 127.0.0.1
0000000000000000000000000000000000000000;;	        path: /healthz
0000000000000000000000000000000000000000;;	        port: 10251
0000000000000000000000000000000000000000;;	        scheme: HTTP
0000000000000000000000000000000000000000;;	      initialDelaySeconds: 15
0000000000000000000000000000000000000000;;	      timeoutSeconds: 15
0000000000000000000000000000000000000000;;	    name: kube-scheduler
0000000000000000000000000000000000000000;;	    resources:
0000000000000000000000000000000000000000;;	      requests:
0000000000000000000000000000000000000000;;	        cpu: 100m
0000000000000000000000000000000000000000;;	    volumeMounts:
0000000000000000000000000000000000000000;;	    - mountPath: /etc/kubernetes
0000000000000000000000000000000000000000;;	      name: k8s
0000000000000000000000000000000000000000;;	      readOnly: true
0000000000000000000000000000000000000000;;	  hostNetwork: true
0000000000000000000000000000000000000000;;	  volumes:
0000000000000000000000000000000000000000;;	  - name: k8s
0000000000000000000000000000000000000000;;	    projected:
0000000000000000000000000000000000000000;;	      sources:
0000000000000000000000000000000000000000;;	      - secret:
0000000000000000000000000000000000000000;;	          name: scheduler.conf
0000000000000000000000000000000000000000;;	status: {}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testSchedulerDaemonSet = `metadata:
0000000000000000000000000000000000000000;;	  creationTimestamp: null
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    k8s-app: self-hosted-kube-scheduler
0000000000000000000000000000000000000000;;	  name: self-hosted-kube-scheduler
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  template:
0000000000000000000000000000000000000000;;	    metadata:
0000000000000000000000000000000000000000;;	      creationTimestamp: null
0000000000000000000000000000000000000000;;	      labels:
0000000000000000000000000000000000000000;;	        k8s-app: self-hosted-kube-scheduler
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      containers:
0000000000000000000000000000000000000000;;	      - command:
0000000000000000000000000000000000000000;;	        - kube-scheduler
0000000000000000000000000000000000000000;;	        - --address=127.0.0.1
0000000000000000000000000000000000000000;;	        - --leader-elect=true
0000000000000000000000000000000000000000;;	        - --kubeconfig=/etc/kubernetes/scheduler.conf
0000000000000000000000000000000000000000;;	        image: gcr.io/google_containers/kube-scheduler-amd64:v1.7.0
0000000000000000000000000000000000000000;;	        livenessProbe:
0000000000000000000000000000000000000000;;	          failureThreshold: 8
0000000000000000000000000000000000000000;;	          httpGet:
0000000000000000000000000000000000000000;;	            host: 127.0.0.1
0000000000000000000000000000000000000000;;	            path: /healthz
0000000000000000000000000000000000000000;;	            port: 10251
0000000000000000000000000000000000000000;;	            scheme: HTTP
0000000000000000000000000000000000000000;;	          initialDelaySeconds: 15
0000000000000000000000000000000000000000;;	          timeoutSeconds: 15
0000000000000000000000000000000000000000;;	        name: kube-scheduler
0000000000000000000000000000000000000000;;	        resources:
0000000000000000000000000000000000000000;;	          requests:
0000000000000000000000000000000000000000;;	            cpu: 100m
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - mountPath: /etc/kubernetes
0000000000000000000000000000000000000000;;	          name: k8s
0000000000000000000000000000000000000000;;	          readOnly: true
0000000000000000000000000000000000000000;;	      dnsPolicy: ClusterFirstWithHostNet
0000000000000000000000000000000000000000;;	      hostNetwork: true
0000000000000000000000000000000000000000;;	      nodeSelector:
0000000000000000000000000000000000000000;;	        node-role.kubernetes.io/master: ""
0000000000000000000000000000000000000000;;	      tolerations:
0000000000000000000000000000000000000000;;	      - effect: NoSchedule
0000000000000000000000000000000000000000;;	        key: node-role.kubernetes.io/master
0000000000000000000000000000000000000000;;	      volumes:
0000000000000000000000000000000000000000;;	      - name: k8s
0000000000000000000000000000000000000000;;	        projected:
0000000000000000000000000000000000000000;;	          sources:
0000000000000000000000000000000000000000;;	          - secret:
0000000000000000000000000000000000000000;;	              name: scheduler.conf
0000000000000000000000000000000000000000;;	  updateStrategy: {}
0000000000000000000000000000000000000000;;	status:
0000000000000000000000000000000000000000;;	  currentNumberScheduled: 0
0000000000000000000000000000000000000000;;	  desiredNumberScheduled: 0
0000000000000000000000000000000000000000;;	  numberMisscheduled: 0
0000000000000000000000000000000000000000;;	  numberReady: 0
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBuildDaemonSet(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			component string
0000000000000000000000000000000000000000;;			podBytes  []byte
0000000000000000000000000000000000000000;;			dsBytes   []byte
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				component: kubeAPIServer,
0000000000000000000000000000000000000000;;				podBytes:  []byte(testAPIServerPod),
0000000000000000000000000000000000000000;;				dsBytes:   []byte(testAPIServerDaemonSet),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				component: kubeControllerManager,
0000000000000000000000000000000000000000;;				podBytes:  []byte(testControllerManagerPod),
0000000000000000000000000000000000000000;;				dsBytes:   []byte(testControllerManagerDaemonSet),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				component: kubeScheduler,
0000000000000000000000000000000000000000;;				podBytes:  []byte(testSchedulerPod),
0000000000000000000000000000000000000000;;				dsBytes:   []byte(testSchedulerDaemonSet),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			tempFile, err := createTempFileWithContent(rt.podBytes)
0000000000000000000000000000000000000000;;			defer os.Remove(tempFile)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			podSpec, err := loadPodSpecFromFile(tempFile)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("couldn't load the specified Pod")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cfg := &kubeadmapi.MasterConfiguration{}
0000000000000000000000000000000000000000;;			ds := buildDaemonSet(cfg, rt.component, podSpec)
0000000000000000000000000000000000000000;;			dsBytes, err := yaml.Marshal(ds)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("failed to marshal daemonset to YAML: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !bytes.Equal(dsBytes, rt.dsBytes) {
0000000000000000000000000000000000000000;;				t.Errorf("failed TestBuildDaemonSet:\nexpected:\n%s\nsaw:\n%s", rt.dsBytes, dsBytes)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadPodSpecFromFile(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			content     string
0000000000000000000000000000000000000000;;			expectError bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Good YAML
0000000000000000000000000000000000000000;;				content: `
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Pod
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: testpod
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  containers:
0000000000000000000000000000000000000000;;	    - image: gcr.io/google_containers/busybox
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Good JSON
0000000000000000000000000000000000000000;;				content: `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "apiVersion": "v1",
0000000000000000000000000000000000000000;;	  "kind": "Pod",
0000000000000000000000000000000000000000;;	  "metadata": {
0000000000000000000000000000000000000000;;	    "name": "testpod"
0000000000000000000000000000000000000000;;	  },
0000000000000000000000000000000000000000;;	  "spec": {
0000000000000000000000000000000000000000;;	    "containers": [
0000000000000000000000000000000000000000;;	      {
0000000000000000000000000000000000000000;;	        "image": "gcr.io/google_containers/busybox"
0000000000000000000000000000000000000000;;	      }
0000000000000000000000000000000000000000;;	    ]
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}`,
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Bad PodSpec
0000000000000000000000000000000000000000;;				content: `
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Pod
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: testpod
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  - image: gcr.io/google_containers/busybox
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			tempFile, err := createTempFileWithContent([]byte(rt.content))
0000000000000000000000000000000000000000;;			defer os.Remove(tempFile)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, err = loadPodSpecFromFile(tempFile)
0000000000000000000000000000000000000000;;			if (err != nil) != rt.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("failed TestLoadPodSpecFromFile:\nexpected error:\n%t\nsaw:\n%v", rt.expectError, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createTempFileWithContent(content []byte) (string, error) {
0000000000000000000000000000000000000000;;		tempFile, err := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("cannot create temporary file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = tempFile.Write([]byte(content)); err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("cannot save temporary file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = tempFile.Close(); err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("cannot close temporary file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tempFile.Name(), nil
0000000000000000000000000000000000000000;;	}
