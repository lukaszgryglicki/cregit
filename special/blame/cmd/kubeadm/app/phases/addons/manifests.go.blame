0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
1cd561fae9761c79378ba65c61c10ff88f9c6fcf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package addons
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		KubeProxyConfigMap = `
0000000000000000000000000000000000000000;;	kind: ConfigMap
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: kube-proxy
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    app: kube-proxy
0000000000000000000000000000000000000000;;	data:
0000000000000000000000000000000000000000;;	  kubeconfig.conf: |
0000000000000000000000000000000000000000;;	    apiVersion: v1
0000000000000000000000000000000000000000;;	    kind: Config
0000000000000000000000000000000000000000;;	    clusters:
0000000000000000000000000000000000000000;;	    - cluster:
0000000000000000000000000000000000000000;;	        certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
0000000000000000000000000000000000000000;;	        server: {{ .MasterEndpoint }}
0000000000000000000000000000000000000000;;	      name: default
0000000000000000000000000000000000000000;;	    contexts:
0000000000000000000000000000000000000000;;	    - context:
0000000000000000000000000000000000000000;;	        cluster: default
0000000000000000000000000000000000000000;;	        namespace: default
0000000000000000000000000000000000000000;;	        user: default
0000000000000000000000000000000000000000;;	      name: default
0000000000000000000000000000000000000000;;	    current-context: default
0000000000000000000000000000000000000000;;	    users:
0000000000000000000000000000000000000000;;	    - name: default
0000000000000000000000000000000000000000;;	      user:
0000000000000000000000000000000000000000;;	        tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KubeProxyDaemonSet = `
0000000000000000000000000000000000000000;;	apiVersion: extensions/v1beta1
0000000000000000000000000000000000000000;;	kind: DaemonSet
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    k8s-app: kube-proxy
0000000000000000000000000000000000000000;;	  name: kube-proxy
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  selector:
0000000000000000000000000000000000000000;;	    matchLabels:
0000000000000000000000000000000000000000;;	      k8s-app: kube-proxy
0000000000000000000000000000000000000000;;	  updateStrategy:
0000000000000000000000000000000000000000;;	    type: RollingUpdate
0000000000000000000000000000000000000000;;	  template:
0000000000000000000000000000000000000000;;	    metadata:
0000000000000000000000000000000000000000;;	      labels:
0000000000000000000000000000000000000000;;	        k8s-app: kube-proxy
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      containers:
0000000000000000000000000000000000000000;;	      - name: kube-proxy
0000000000000000000000000000000000000000;;	        image: {{ .Image }}
0000000000000000000000000000000000000000;;	        imagePullPolicy: IfNotPresent
0000000000000000000000000000000000000000;;	        command:
0000000000000000000000000000000000000000;;	        - /usr/local/bin/kube-proxy
0000000000000000000000000000000000000000;;	        - --kubeconfig=/var/lib/kube-proxy/kubeconfig.conf
0000000000000000000000000000000000000000;;	        {{ .ClusterCIDR }}
0000000000000000000000000000000000000000;;	        securityContext:
0000000000000000000000000000000000000000;;	          privileged: true
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - mountPath: /var/lib/kube-proxy
0000000000000000000000000000000000000000;;	          name: kube-proxy
0000000000000000000000000000000000000000;;	        # TODO: Make this a file hostpath mount
0000000000000000000000000000000000000000;;	        - mountPath: /run/xtables.lock
0000000000000000000000000000000000000000;;	          name: xtables-lock
0000000000000000000000000000000000000000;;	          readOnly: false
0000000000000000000000000000000000000000;;	      hostNetwork: true
0000000000000000000000000000000000000000;;	      serviceAccountName: kube-proxy
0000000000000000000000000000000000000000;;	      tolerations:
0000000000000000000000000000000000000000;;	      - key: {{ .MasterTaintKey }}
0000000000000000000000000000000000000000;;	        effect: NoSchedule
0000000000000000000000000000000000000000;;	      volumes:
0000000000000000000000000000000000000000;;	      - name: kube-proxy
0000000000000000000000000000000000000000;;	        configMap:
0000000000000000000000000000000000000000;;	          name: kube-proxy
0000000000000000000000000000000000000000;;	      - name: xtables-lock
0000000000000000000000000000000000000000;;	        hostPath:
0000000000000000000000000000000000000000;;	          path: /run/xtables.lock
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KubeDNSVersion = "1.14.4"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KubeDNSDeployment = `
0000000000000000000000000000000000000000;;	apiVersion: extensions/v1beta1
0000000000000000000000000000000000000000;;	kind: Deployment
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: kube-dns
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    k8s-app: kube-dns
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  # replicas: not specified here:
0000000000000000000000000000000000000000;;	  # 1. In order to make Addon Manager do not reconcile this replicas parameter.
0000000000000000000000000000000000000000;;	  # 2. Default is 1.
0000000000000000000000000000000000000000;;	  # 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
0000000000000000000000000000000000000000;;	  strategy:
0000000000000000000000000000000000000000;;	    rollingUpdate:
0000000000000000000000000000000000000000;;	      maxSurge: 10%
0000000000000000000000000000000000000000;;	      maxUnavailable: 0
0000000000000000000000000000000000000000;;	  selector:
0000000000000000000000000000000000000000;;	    matchLabels:
0000000000000000000000000000000000000000;;	      k8s-app: kube-dns
0000000000000000000000000000000000000000;;	  template:
0000000000000000000000000000000000000000;;	    metadata:
0000000000000000000000000000000000000000;;	      labels:
0000000000000000000000000000000000000000;;	        k8s-app: kube-dns
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      volumes:
0000000000000000000000000000000000000000;;	      - name: kube-dns-config
0000000000000000000000000000000000000000;;	        configMap:
0000000000000000000000000000000000000000;;	          name: kube-dns
0000000000000000000000000000000000000000;;	          optional: true
0000000000000000000000000000000000000000;;	      containers:
0000000000000000000000000000000000000000;;	      - name: kubedns
0000000000000000000000000000000000000000;;	        image: {{ .ImageRepository }}/k8s-dns-kube-dns-{{ .Arch }}:{{ .Version }}
0000000000000000000000000000000000000000;;	        imagePullPolicy: IfNotPresent
0000000000000000000000000000000000000000;;	        resources:
0000000000000000000000000000000000000000;;	          # TODO: Set memory limits when we've profiled the container for large
0000000000000000000000000000000000000000;;	          # clusters, then set request = limit to keep this container in
0000000000000000000000000000000000000000;;	          # guaranteed class. Currently, this container falls into the
0000000000000000000000000000000000000000;;	          # "burstable" category so the kubelet doesn't backoff from restarting it.
0000000000000000000000000000000000000000;;	          limits:
0000000000000000000000000000000000000000;;	            memory: 170Mi
0000000000000000000000000000000000000000;;	          requests:
0000000000000000000000000000000000000000;;	            cpu: 100m
0000000000000000000000000000000000000000;;	            memory: 70Mi
0000000000000000000000000000000000000000;;	        livenessProbe:
0000000000000000000000000000000000000000;;	          httpGet:
0000000000000000000000000000000000000000;;	            path: /healthcheck/kubedns
0000000000000000000000000000000000000000;;	            port: 10054
0000000000000000000000000000000000000000;;	            scheme: HTTP
0000000000000000000000000000000000000000;;	          initialDelaySeconds: 60
0000000000000000000000000000000000000000;;	          timeoutSeconds: 5
0000000000000000000000000000000000000000;;	          successThreshold: 1
0000000000000000000000000000000000000000;;	          failureThreshold: 5
0000000000000000000000000000000000000000;;	        readinessProbe:
0000000000000000000000000000000000000000;;	          httpGet:
0000000000000000000000000000000000000000;;	            path: /readiness
0000000000000000000000000000000000000000;;	            port: 8081
0000000000000000000000000000000000000000;;	            scheme: HTTP
0000000000000000000000000000000000000000;;	          # we poll on pod startup for the Kubernetes master service and
0000000000000000000000000000000000000000;;	          # only setup the /readiness HTTP server once that's available.
0000000000000000000000000000000000000000;;	          initialDelaySeconds: 3
0000000000000000000000000000000000000000;;	          timeoutSeconds: 5
0000000000000000000000000000000000000000;;	        args:
0000000000000000000000000000000000000000;;	        - --domain={{ .DNSDomain }}.
0000000000000000000000000000000000000000;;	        - --dns-port=10053
0000000000000000000000000000000000000000;;	        - --config-dir=/kube-dns-config
0000000000000000000000000000000000000000;;	        - --v=2
0000000000000000000000000000000000000000;;	        env:
0000000000000000000000000000000000000000;;	        - name: PROMETHEUS_PORT
0000000000000000000000000000000000000000;;	          value: "10055"
0000000000000000000000000000000000000000;;	        ports:
0000000000000000000000000000000000000000;;	        - containerPort: 10053
0000000000000000000000000000000000000000;;	          name: dns-local
0000000000000000000000000000000000000000;;	          protocol: UDP
0000000000000000000000000000000000000000;;	        - containerPort: 10053
0000000000000000000000000000000000000000;;	          name: dns-tcp-local
0000000000000000000000000000000000000000;;	          protocol: TCP
0000000000000000000000000000000000000000;;	        - containerPort: 10055
0000000000000000000000000000000000000000;;	          name: metrics
0000000000000000000000000000000000000000;;	          protocol: TCP
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - name: kube-dns-config
0000000000000000000000000000000000000000;;	          mountPath: /kube-dns-config
0000000000000000000000000000000000000000;;	      - name: dnsmasq
0000000000000000000000000000000000000000;;	        image: {{ .ImageRepository }}/k8s-dns-dnsmasq-nanny-{{ .Arch }}:{{ .Version }}
0000000000000000000000000000000000000000;;	        imagePullPolicy: IfNotPresent
0000000000000000000000000000000000000000;;	        livenessProbe:
0000000000000000000000000000000000000000;;	          httpGet:
0000000000000000000000000000000000000000;;	            path: /healthcheck/dnsmasq
0000000000000000000000000000000000000000;;	            port: 10054
0000000000000000000000000000000000000000;;	            scheme: HTTP
0000000000000000000000000000000000000000;;	          initialDelaySeconds: 60
0000000000000000000000000000000000000000;;	          timeoutSeconds: 5
0000000000000000000000000000000000000000;;	          successThreshold: 1
0000000000000000000000000000000000000000;;	          failureThreshold: 5
0000000000000000000000000000000000000000;;	        args:
0000000000000000000000000000000000000000;;	        - -v=2
0000000000000000000000000000000000000000;;	        - -logtostderr
0000000000000000000000000000000000000000;;	        - -configDir=/etc/k8s/dns/dnsmasq-nanny
0000000000000000000000000000000000000000;;	        - -restartDnsmasq=true
0000000000000000000000000000000000000000;;	        - --
0000000000000000000000000000000000000000;;	        - -k
0000000000000000000000000000000000000000;;	        - --cache-size=1000
0000000000000000000000000000000000000000;;	        - --log-facility=-
0000000000000000000000000000000000000000;;	        - --server=/{{ .DNSDomain }}/127.0.0.1#10053
0000000000000000000000000000000000000000;;	        - --server=/in-addr.arpa/127.0.0.1#10053
0000000000000000000000000000000000000000;;	        - --server=/ip6.arpa/127.0.0.1#10053
0000000000000000000000000000000000000000;;	        ports:
0000000000000000000000000000000000000000;;	        - containerPort: 53
0000000000000000000000000000000000000000;;	          name: dns
0000000000000000000000000000000000000000;;	          protocol: UDP
0000000000000000000000000000000000000000;;	        - containerPort: 53
0000000000000000000000000000000000000000;;	          name: dns-tcp
0000000000000000000000000000000000000000;;	          protocol: TCP
0000000000000000000000000000000000000000;;	        # see: https://github.com/kubernetes/kubernetes/issues/29055 for details
0000000000000000000000000000000000000000;;	        resources:
0000000000000000000000000000000000000000;;	          requests:
0000000000000000000000000000000000000000;;	            cpu: 150m
0000000000000000000000000000000000000000;;	            memory: 20Mi
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - name: kube-dns-config
0000000000000000000000000000000000000000;;	          mountPath: /etc/k8s/dns/dnsmasq-nanny
0000000000000000000000000000000000000000;;	      - name: sidecar
0000000000000000000000000000000000000000;;	        image: {{ .ImageRepository }}/k8s-dns-sidecar-{{ .Arch }}:{{ .Version }}
0000000000000000000000000000000000000000;;	        imagePullPolicy: IfNotPresent
0000000000000000000000000000000000000000;;	        livenessProbe:
0000000000000000000000000000000000000000;;	          httpGet:
0000000000000000000000000000000000000000;;	            path: /metrics
0000000000000000000000000000000000000000;;	            port: 10054
0000000000000000000000000000000000000000;;	            scheme: HTTP
0000000000000000000000000000000000000000;;	          initialDelaySeconds: 60
0000000000000000000000000000000000000000;;	          timeoutSeconds: 5
0000000000000000000000000000000000000000;;	          successThreshold: 1
0000000000000000000000000000000000000000;;	          failureThreshold: 5
0000000000000000000000000000000000000000;;	        args:
0000000000000000000000000000000000000000;;	        - --v=2
0000000000000000000000000000000000000000;;	        - --logtostderr
0000000000000000000000000000000000000000;;	        - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.{{ .DNSDomain }},5,A
0000000000000000000000000000000000000000;;	        - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.{{ .DNSDomain }},5,A
0000000000000000000000000000000000000000;;	        ports:
0000000000000000000000000000000000000000;;	        - containerPort: 10054
0000000000000000000000000000000000000000;;	          name: metrics
0000000000000000000000000000000000000000;;	          protocol: TCP
0000000000000000000000000000000000000000;;	        resources:
0000000000000000000000000000000000000000;;	          requests:
0000000000000000000000000000000000000000;;	            memory: 20Mi
0000000000000000000000000000000000000000;;	            cpu: 10m
0000000000000000000000000000000000000000;;	      dnsPolicy: Default  # Don't use cluster DNS.
0000000000000000000000000000000000000000;;	      serviceAccountName: kube-dns
0000000000000000000000000000000000000000;;	      tolerations:
0000000000000000000000000000000000000000;;	      - key: CriticalAddonsOnly
0000000000000000000000000000000000000000;;	        operator: Exists
0000000000000000000000000000000000000000;;	      - key: {{ .MasterTaintKey }}
0000000000000000000000000000000000000000;;	        effect: NoSchedule
0000000000000000000000000000000000000000;;	      # TODO: Remove this affinity field as soon as we are using manifest lists
0000000000000000000000000000000000000000;;	      affinity:
0000000000000000000000000000000000000000;;	        nodeAffinity:
0000000000000000000000000000000000000000;;	          requiredDuringSchedulingIgnoredDuringExecution:
0000000000000000000000000000000000000000;;	            nodeSelectorTerms:
0000000000000000000000000000000000000000;;	            - matchExpressions:
0000000000000000000000000000000000000000;;	              - key: beta.kubernetes.io/arch
0000000000000000000000000000000000000000;;	                operator: In
0000000000000000000000000000000000000000;;	                values:
0000000000000000000000000000000000000000;;	                - {{ .Arch }}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KubeDNSService = `
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Service
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    k8s-app: kube-dns
0000000000000000000000000000000000000000;;	    kubernetes.io/cluster-service: "true"
0000000000000000000000000000000000000000;;	    kubernetes.io/name: "KubeDNS"
0000000000000000000000000000000000000000;;	  name: kube-dns
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	  # Without this resourceVersion value, an update of the Service between versions will yield:
0000000000000000000000000000000000000000;;	  #   Service "kube-dns" is invalid: metadata.resourceVersion: Invalid value: "": must be specified for an update
0000000000000000000000000000000000000000;;	  resourceVersion: "0"
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  clusterIP: {{ .DNSIP }}
0000000000000000000000000000000000000000;;	  ports:
0000000000000000000000000000000000000000;;	  - name: dns
0000000000000000000000000000000000000000;;	    port: 53
0000000000000000000000000000000000000000;;	    protocol: UDP
0000000000000000000000000000000000000000;;	    targetPort: 53
0000000000000000000000000000000000000000;;	  - name: dns-tcp
0000000000000000000000000000000000000000;;	    port: 53
0000000000000000000000000000000000000000;;	    protocol: TCP
0000000000000000000000000000000000000000;;	    targetPort: 53
0000000000000000000000000000000000000000;;	  selector:
0000000000000000000000000000000000000000;;	    k8s-app: kube-dns
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	)
