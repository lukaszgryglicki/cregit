0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e5a1c244558fb526e43d7ab756ed41fa375bcbd4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package addons
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeadmutil "k8s.io/kubernetes/cmd/kubeadm/app/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetClusterCIDR(t *testing.T) {
0000000000000000000000000000000000000000;;		emptyClusterCIDR := getClusterCIDR("")
0000000000000000000000000000000000000000;;		if emptyClusterCIDR != "" {
0000000000000000000000000000000000000000;;			t.Errorf("Invalid format: %s", emptyClusterCIDR)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterCIDR := getClusterCIDR("10.244.0.0/16")
0000000000000000000000000000000000000000;;		if clusterCIDR != "- --cluster-cidr=10.244.0.0/16" {
0000000000000000000000000000000000000000;;			t.Errorf("Invalid format: %s", clusterCIDR)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterIPv6CIDR := getClusterCIDR("2001:db8::/64")
0000000000000000000000000000000000000000;;		if clusterIPv6CIDR != "- --cluster-cidr=2001:db8::/64" {
0000000000000000000000000000000000000000;;			t.Errorf("Invalid format: %s", clusterIPv6CIDR)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCompileManifests(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			manifest string
0000000000000000000000000000000000000000;;			data     interface{}
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				manifest: KubeProxyConfigMap,
0000000000000000000000000000000000000000;;				data: struct{ MasterEndpoint string }{
0000000000000000000000000000000000000000;;					MasterEndpoint: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				manifest: KubeProxyDaemonSet,
0000000000000000000000000000000000000000;;				data: struct{ Image, ClusterCIDR, MasterTaintKey string }{
0000000000000000000000000000000000000000;;					Image:          "foo",
0000000000000000000000000000000000000000;;					ClusterCIDR:    "foo",
0000000000000000000000000000000000000000;;					MasterTaintKey: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				manifest: KubeDNSDeployment,
0000000000000000000000000000000000000000;;				data: struct{ ImageRepository, Arch, Version, DNSDomain, MasterTaintKey string }{
0000000000000000000000000000000000000000;;					ImageRepository: "foo",
0000000000000000000000000000000000000000;;					Arch:            "foo",
0000000000000000000000000000000000000000;;					Version:         "foo",
0000000000000000000000000000000000000000;;					DNSDomain:       "foo",
0000000000000000000000000000000000000000;;					MasterTaintKey:  "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				manifest: KubeDNSService,
0000000000000000000000000000000000000000;;				data: struct{ DNSIP string }{
0000000000000000000000000000000000000000;;					DNSIP: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			_, actual := kubeadmutil.ParseTemplate(rt.manifest, rt.data)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CompileManifests:\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
