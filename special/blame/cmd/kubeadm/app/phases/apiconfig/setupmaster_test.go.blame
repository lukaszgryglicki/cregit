0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d1881e41824874de271de11127199e4edaedc29e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		clientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		corev1 "k8s.io/client-go/kubernetes/typed/core/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		kubeadmconstants "k8s.io/kubernetes/cmd/kubeadm/app/constants"
0000000000000000000000000000000000000000;;		kubeletapis "k8s.io/kubernetes/pkg/kubelet/apis"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/node"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const masterLabel = kubeadmconstants.LabelNodeRoleMaster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var masterTaint = &apiv1.Taint{Key: kubeadmconstants.LabelNodeRoleMaster, Value: "", Effect: "NoSchedule"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateMasterRoleLabelsAndTaints(t *testing.T) {
0000000000000000000000000000000000000000;;		// Note: this test takes advantage of the deterministic marshalling of
0000000000000000000000000000000000000000;;		// JSON provided by strategicpatch so that "expectedPatch" can use a
0000000000000000000000000000000000000000;;		// string equality test instead of a logical JSON equality test. That
0000000000000000000000000000000000000000;;		// will need to change if strategicpatch's behavior changes in the
0000000000000000000000000000000000000000;;		// future.
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name          string
0000000000000000000000000000000000000000;;			existingLabel string
0000000000000000000000000000000000000000;;			existingTaint *apiv1.Taint
0000000000000000000000000000000000000000;;			expectedPatch string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"master label and taint missing",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				"{\"metadata\":{\"labels\":{\"node-role.kubernetes.io/master\":\"\"}},\"spec\":{\"taints\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\",\"timeAdded\":null}]}}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"master label missing",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				masterTaint,
0000000000000000000000000000000000000000;;				"{\"metadata\":{\"labels\":{\"node-role.kubernetes.io/master\":\"\"}}}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"master taint missing",
0000000000000000000000000000000000000000;;				masterLabel,
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				"{\"spec\":{\"taints\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\",\"timeAdded\":null}]}}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"nothing missing",
0000000000000000000000000000000000000000;;				masterLabel,
0000000000000000000000000000000000000000;;				masterTaint,
0000000000000000000000000000000000000000;;				"{}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			hostname := node.GetHostname("")
0000000000000000000000000000000000000000;;			masterNode := &apiv1.Node{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: hostname,
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						kubeletapis.LabelHostname: hostname,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.existingLabel != "" {
0000000000000000000000000000000000000000;;				masterNode.ObjectMeta.Labels[tc.existingLabel] = ""
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.existingTaint != nil {
0000000000000000000000000000000000000000;;				masterNode.Spec.Taints = append(masterNode.Spec.Taints, *tc.existingTaint)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			jsonNode, err := json.Marshal(masterNode)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("UpdateMasterRoleLabelsAndTaints(%s): unexpected encoding error: %v", tc.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var patchRequest string
0000000000000000000000000000000000000000;;			s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if req.URL.Path != "/api/v1/nodes/"+hostname {
0000000000000000000000000000000000000000;;					t.Errorf("UpdateMasterRoleLabelsAndTaints(%s): request for unexpected HTTP resource: %v", tc.name, req.URL.Path)
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				switch req.Method {
0000000000000000000000000000000000000000;;				case "GET":
0000000000000000000000000000000000000000;;				case "PATCH":
0000000000000000000000000000000000000000;;					patchRequest = toString(req.Body)
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Errorf("UpdateMasterRoleLabelsAndTaints(%s): request for unexpected HTTP verb: %v", tc.name, req.Method)
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;				w.Write(jsonNode)
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;			defer s.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cs, err := clientsetFromTestServer(s)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("UpdateMasterRoleLabelsAndTaints(%s): unexpected error building clientset: %v", tc.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = UpdateMasterRoleLabelsAndTaints(cs, hostname)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("UpdateMasterRoleLabelsAndTaints(%s) returned unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.expectedPatch != patchRequest {
0000000000000000000000000000000000000000;;				t.Errorf("UpdateMasterRoleLabelsAndTaints(%s) wanted patch %v, got %v", tc.name, tc.expectedPatch, patchRequest)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func clientsetFromTestServer(s *httptest.Server) (*clientset.Clientset, error) {
0000000000000000000000000000000000000000;;		rc := &restclient.Config{Host: s.URL}
0000000000000000000000000000000000000000;;		c, err := corev1.NewForConfig(rc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &clientset.Clientset{CoreV1Client: c}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toString(r io.Reader) string {
0000000000000000000000000000000000000000;;		buf := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		buf.ReadFrom(r)
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
