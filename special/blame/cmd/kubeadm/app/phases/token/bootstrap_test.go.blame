0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8951cf217715eb02d670eff56c1581cc4389a177;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package token
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		clientsetfake "k8s.io/client-go/kubernetes/fake"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const testConfig = `apiVersion: v1
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    server: https://10.128.0.6:6443
0000000000000000000000000000000000000000;;	  name: kubernetes
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: kubernetes
0000000000000000000000000000000000000000;;	    user: kubernetes-admin
0000000000000000000000000000000000000000;;	  name: kubernetes-admin@kubernetes
0000000000000000000000000000000000000000;;	current-context: kubernetes-admin@kubernetes
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	preferences: {}
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kubernetes-admin`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEncodeTokenSecretData(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			token *kubeadmapi.TokenDiscovery
0000000000000000000000000000000000000000;;			t     time.Duration
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "foo", Secret: "bar"}},                 // should use default
0000000000000000000000000000000000000000;;			{token: &kubeadmapi.TokenDiscovery{ID: "foo", Secret: "bar"}, t: time.Second}, // should use default
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			actual := encodeTokenSecretData(rt.token.ID, rt.token.Secret, rt.t, []string{}, "")
0000000000000000000000000000000000000000;;			if !bytes.Equal(actual["token-id"], []byte(rt.token.ID)) {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed EncodeTokenSecretData:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					rt.token.ID,
0000000000000000000000000000000000000000;;					actual["token-id"],
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !bytes.Equal(actual["token-secret"], []byte(rt.token.Secret)) {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed EncodeTokenSecretData:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					rt.token.Secret,
0000000000000000000000000000000000000000;;					actual["token-secret"],
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if rt.t > 0 {
0000000000000000000000000000000000000000;;				if actual["expiration"] == nil {
0000000000000000000000000000000000000000;;					t.Errorf(
0000000000000000000000000000000000000000;;						"failed EncodeTokenSecretData, duration was not added to time",
0000000000000000000000000000000000000000;;					)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateBootstrapConfigMapIfNotExists(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			createErr error
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"successful case should have no error",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"duplicate creation should have no error",
0000000000000000000000000000000000000000;;				apierrors.NewAlreadyExists(api.Resource("configmaps"), "test"),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"unexpected error should be returned",
0000000000000000000000000000000000000000;;				apierrors.NewUnauthorized("go away!"),
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		file, err := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("could not create tempfile: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(file.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		file.Write([]byte(testConfig))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			client := clientsetfake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			if tc.createErr != nil {
0000000000000000000000000000000000000000;;				client.PrependReactor("create", "configmaps", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;					return true, nil, tc.createErr
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = CreateBootstrapConfigMapIfNotExists(client, file.Name())
0000000000000000000000000000000000000000;;			if tc.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("CreateBootstrapConfigMapIfNotExists(%s) wanted error, got nil", tc.name)
0000000000000000000000000000000000000000;;			} else if !tc.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("CreateBootstrapConfigMapIfNotExists(%s) returned unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
