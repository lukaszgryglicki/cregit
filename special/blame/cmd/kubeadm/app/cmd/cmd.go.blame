0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9db0eae9e9d83114763752acc01f8cf31dda41c2;pkg/kubeadm/cmd/cmd.go[pkg/kubeadm/cmd/cmd.go][cmd/kubeadm/app/cmd/cmd.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/renstrom/dedent"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubeadm/app/cmd/phases"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewKubeadmCommand(f cmdutil.Factory, in io.Reader, out, err io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmds := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "kubeadm",
0000000000000000000000000000000000000000;;			Short: "kubeadm: easily bootstrap a secure Kubernetes cluster",
0000000000000000000000000000000000000000;;			Long: dedent.Dedent(`
0000000000000000000000000000000000000000;;				kubeadm: easily bootstrap a secure Kubernetes cluster.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				    ┌──────────────────────────────────────────────────────────┐
0000000000000000000000000000000000000000;;				    │ KUBEADM IS BETA, DO NOT USE IT FOR PRODUCTION CLUSTERS!  │
0000000000000000000000000000000000000000;;				    │                                                          │
0000000000000000000000000000000000000000;;				    │ But, please try it out! Give us feedback at:             │
0000000000000000000000000000000000000000;;				    │ https://github.com/kubernetes/kubeadm/issues             │
0000000000000000000000000000000000000000;;				    │ and at-mention @kubernetes/sig-cluster-lifecycle-misc    │
0000000000000000000000000000000000000000;;				    └──────────────────────────────────────────────────────────┘
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				Example usage:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				    Create a two-machine cluster with one master (which controls the cluster),
0000000000000000000000000000000000000000;;				    and one node (where your workloads, like Pods and ReplicaSets run).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				    ┌──────────────────────────────────────────────────────────┐
0000000000000000000000000000000000000000;;				    │ On the first machine                                     │
0000000000000000000000000000000000000000;;				    ├──────────────────────────────────────────────────────────┤
0000000000000000000000000000000000000000;;				    │ master# kubeadm init                                     │
0000000000000000000000000000000000000000;;				    └──────────────────────────────────────────────────────────┘
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				    ┌──────────────────────────────────────────────────────────┐
0000000000000000000000000000000000000000;;				    │ On the second machine                                    │
0000000000000000000000000000000000000000;;				    ├──────────────────────────────────────────────────────────┤
0000000000000000000000000000000000000000;;				    │ node# kubeadm join --token=<token> <ip-of-master>:<port> │
0000000000000000000000000000000000000000;;				    └──────────────────────────────────────────────────────────┘
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				    You can then repeat the second step on as many other machines as you like.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			`),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO(phase2+) figure out how to avoid running as root
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TODO(phase2) detect interactive vs non-interactive use and adjust output accordingly
0000000000000000000000000000000000000000;;		// i.e. make it automation friendly
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TODO(phase2) create an abstraction that defines files and the content that needs to
0000000000000000000000000000000000000000;;		// be written to disc and write it all in one go at the end as we have a lot of
0000000000000000000000000000000000000000;;		// crappy little files written from different parts of this code; this could also
0000000000000000000000000000000000000000;;		// be useful for testing by having this model we can allow users to create some files before
0000000000000000000000000000000000000000;;		// `kubeadm init` runs, e.g. PKI assets, we would then be able to look at files users has
0000000000000000000000000000000000000000;;		// given an diff or validate if those are sane, we could also warn if any of the files had been deprecated
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmds.ResetFlags()
0000000000000000000000000000000000000000;;		cmds.SetGlobalNormalizationFunc(flag.WarnWordSepNormalizeFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmds.AddCommand(NewCmdCompletion(out, ""))
0000000000000000000000000000000000000000;;		cmds.AddCommand(NewCmdInit(out))
0000000000000000000000000000000000000000;;		cmds.AddCommand(NewCmdJoin(out))
0000000000000000000000000000000000000000;;		cmds.AddCommand(NewCmdReset(out))
0000000000000000000000000000000000000000;;		cmds.AddCommand(NewCmdVersion(out))
0000000000000000000000000000000000000000;;		cmds.AddCommand(NewCmdToken(out, err))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Wrap not yet fully supported commands in an alpha subcommand
0000000000000000000000000000000000000000;;		experimentalCmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "alpha",
0000000000000000000000000000000000000000;;			Short: "Experimental sub-commands not yet fully functional.",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		experimentalCmd.AddCommand(phases.NewCmdPhase(out))
0000000000000000000000000000000000000000;;		cmds.AddCommand(experimentalCmd)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmds
0000000000000000000000000000000000000000;;	}
