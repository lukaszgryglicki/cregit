0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ee117292a78b12e4bd4f994e4be04960344792a4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package phases
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdPhase(out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "phase",
0000000000000000000000000000000000000000;;			Short: "Invoke subsets of kubeadm functions separately for a manual install.",
0000000000000000000000000000000000000000;;			RunE:  subCmdRunE("phase"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdKubeConfig(out))
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdCerts())
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdPreFlight())
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdSelfhosting())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// subCmdRunE returns a function that handles a case where a subcommand must be specified
0000000000000000000000000000000000000000;;	// Without this callback, if a user runs just the command without a subcommand,
0000000000000000000000000000000000000000;;	// or with an invalid subcommand, cobra will print usage information, but still exit cleanly.
0000000000000000000000000000000000000000;;	// We want to return an error code in these cases so that the
0000000000000000000000000000000000000000;;	// user knows that their command was invalid.
0000000000000000000000000000000000000000;;	func subCmdRunE(name string) func(*cobra.Command, []string) error {
0000000000000000000000000000000000000000;;		return func(_ *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;			if len(args) < 1 {
0000000000000000000000000000000000000000;;				return fmt.Errorf("missing subcommand; %q is not meant to be run on its own", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return fmt.Errorf("invalid subcommand: %q", args[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
