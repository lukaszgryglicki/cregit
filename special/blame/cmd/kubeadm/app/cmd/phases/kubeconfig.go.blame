0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ee117292a78b12e4bd4f994e4be04960344792a4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package phases
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeadmapiext "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1alpha1"
0000000000000000000000000000000000000000;;		kubeconfigphase "k8s.io/kubernetes/cmd/kubeadm/app/phases/kubeconfig"
0000000000000000000000000000000000000000;;		kubeadmutil "k8s.io/kubernetes/cmd/kubeadm/app/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdKubeConfig(out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "kubeconfig",
0000000000000000000000000000000000000000;;			Short: "Create KubeConfig files from given credentials.",
0000000000000000000000000000000000000000;;			RunE:  subCmdRunE("kubeconfig"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdToken(out))
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdClientCerts(out))
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdToken(out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		config := &kubeconfigphase.BuildConfigProperties{
0000000000000000000000000000000000000000;;			MakeClientCerts: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "token",
0000000000000000000000000000000000000000;;			Short: "Output a valid KubeConfig file to STDOUT with a token as the authentication method.",
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := RunCreateWithToken(out, config)
0000000000000000000000000000000000000000;;				kubeadmutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		addCommonFlags(cmd, config)
0000000000000000000000000000000000000000;;		cmd.Flags().StringVar(&config.Token, "token", "", "The path to the directory where the certificates are.")
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdClientCerts(out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		config := &kubeconfigphase.BuildConfigProperties{
0000000000000000000000000000000000000000;;			MakeClientCerts: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "client-certs",
0000000000000000000000000000000000000000;;			Short: "Output a valid KubeConfig file to STDOUT with a client certificates as the authentication method.",
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := RunCreateWithClientCerts(out, config)
0000000000000000000000000000000000000000;;				kubeadmutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		addCommonFlags(cmd, config)
0000000000000000000000000000000000000000;;		cmd.Flags().StringSliceVar(&config.Organization, "organization", []string{}, "The organization (group) the certificate should be in.")
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addCommonFlags(cmd *cobra.Command, config *kubeconfigphase.BuildConfigProperties) {
0000000000000000000000000000000000000000;;		cmd.Flags().StringVar(&config.CertDir, "cert-dir", kubeadmapiext.DefaultCertificatesDir, "The path to the directory where the certificates are.")
0000000000000000000000000000000000000000;;		cmd.Flags().StringVar(&config.ClientName, "client-name", "", "The name of the client for which the KubeConfig file will be generated.")
0000000000000000000000000000000000000000;;		cmd.Flags().StringVar(&config.APIServer, "server", "", "The location of the api server.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateCommonFlags(config *kubeconfigphase.BuildConfigProperties) error {
0000000000000000000000000000000000000000;;		if len(config.ClientName) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("The --client-name flag is required")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(config.APIServer) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("The --server flag is required")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunCreateWithToken generates a kubeconfig file from with a token as the authentication mechanism
0000000000000000000000000000000000000000;;	func RunCreateWithToken(out io.Writer, config *kubeconfigphase.BuildConfigProperties) error {
0000000000000000000000000000000000000000;;		if len(config.Token) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("The --token flag is required")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := validateCommonFlags(config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kubeConfigBytes, err := kubeconfigphase.GetKubeConfigBytesFromSpec(*config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Fprintln(out, string(kubeConfigBytes))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunCreateWithClientCerts generates a kubeconfig file from with client certs as the authentication mechanism
0000000000000000000000000000000000000000;;	func RunCreateWithClientCerts(out io.Writer, config *kubeconfigphase.BuildConfigProperties) error {
0000000000000000000000000000000000000000;;		if err := validateCommonFlags(config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kubeConfigBytes, err := kubeconfigphase.GetKubeConfigBytesFromSpec(*config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Fprintln(out, string(kubeConfigBytes))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
