0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
25b23d9d1766fffe4761ca3d2d80d070f1c9d536;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeadmconstants "k8s.io/kubernetes/cmd/kubeadm/app/constants"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubeadm/app/preflight"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertExists(t *testing.T, path string) {
0000000000000000000000000000000000000000;;		if _, err := os.Stat(path); os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			t.Errorf("file/dir does not exist error: %s", err)
0000000000000000000000000000000000000000;;			t.Errorf("file/dir does not exist: %s", path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertNotExists(t *testing.T, path string) {
0000000000000000000000000000000000000000;;		if _, err := os.Stat(path); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("file/dir exists: %s", path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// assertDirEmpty verifies a directory either does not exist, or is empty.
0000000000000000000000000000000000000000;;	func assertDirEmpty(t *testing.T, path string) {
0000000000000000000000000000000000000000;;		dac := preflight.DirAvailableCheck{Path: path}
0000000000000000000000000000000000000000;;		_, errors := dac.Check()
0000000000000000000000000000000000000000;;		if len(errors) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("directory not empty: [%v]", errors)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConfigDirCleaner(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			setupDirs       []string
0000000000000000000000000000000000000000;;			setupFiles      []string
0000000000000000000000000000000000000000;;			verifyExists    []string
0000000000000000000000000000000000000000;;			verifyNotExists []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"simple reset": {
0000000000000000000000000000000000000000;;				setupDirs: []string{
0000000000000000000000000000000000000000;;					"manifests",
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				setupFiles: []string{
0000000000000000000000000000000000000000;;					"manifests/etcd.yaml",
0000000000000000000000000000000000000000;;					"manifests/kube-apiserver.yaml",
0000000000000000000000000000000000000000;;					"pki/ca.pem",
0000000000000000000000000000000000000000;;					kubeadmconstants.AdminKubeConfigFileName,
0000000000000000000000000000000000000000;;					kubeadmconstants.KubeletKubeConfigFileName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				verifyExists: []string{
0000000000000000000000000000000000000000;;					"manifests",
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"partial reset": {
0000000000000000000000000000000000000000;;				setupDirs: []string{
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				setupFiles: []string{
0000000000000000000000000000000000000000;;					"pki/ca.pem",
0000000000000000000000000000000000000000;;					kubeadmconstants.KubeletKubeConfigFileName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				verifyExists: []string{
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				verifyNotExists: []string{
0000000000000000000000000000000000000000;;					"manifests",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"preserve cloud-config": {
0000000000000000000000000000000000000000;;				setupDirs: []string{
0000000000000000000000000000000000000000;;					"manifests",
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				setupFiles: []string{
0000000000000000000000000000000000000000;;					"manifests/etcd.yaml",
0000000000000000000000000000000000000000;;					"manifests/kube-apiserver.yaml",
0000000000000000000000000000000000000000;;					"pki/ca.pem",
0000000000000000000000000000000000000000;;					kubeadmconstants.AdminKubeConfigFileName,
0000000000000000000000000000000000000000;;					kubeadmconstants.KubeletKubeConfigFileName,
0000000000000000000000000000000000000000;;					"cloud-config",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				verifyExists: []string{
0000000000000000000000000000000000000000;;					"manifests",
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;					"cloud-config",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"preserve hidden files and directories": {
0000000000000000000000000000000000000000;;				setupDirs: []string{
0000000000000000000000000000000000000000;;					"manifests",
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;					".mydir",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				setupFiles: []string{
0000000000000000000000000000000000000000;;					"manifests/etcd.yaml",
0000000000000000000000000000000000000000;;					"manifests/kube-apiserver.yaml",
0000000000000000000000000000000000000000;;					"pki/ca.pem",
0000000000000000000000000000000000000000;;					kubeadmconstants.AdminKubeConfigFileName,
0000000000000000000000000000000000000000;;					kubeadmconstants.KubeletKubeConfigFileName,
0000000000000000000000000000000000000000;;					".cloud-config",
0000000000000000000000000000000000000000;;					".mydir/.myfile",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				verifyExists: []string{
0000000000000000000000000000000000000000;;					"manifests",
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;					".cloud-config",
0000000000000000000000000000000000000000;;					".mydir",
0000000000000000000000000000000000000000;;					".mydir/.myfile",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no-op reset": {
0000000000000000000000000000000000000000;;				verifyNotExists: []string{
0000000000000000000000000000000000000000;;					"pki",
0000000000000000000000000000000000000000;;					"manifests",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("Running test: %s", name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Create a temporary directory for our fake config dir:
0000000000000000000000000000000000000000;;			tmpDir, err := ioutil.TempDir("", "kubeadm-reset-test")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to create temp directory: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, createDir := range test.setupDirs {
0000000000000000000000000000000000000000;;				err := os.Mkdir(filepath.Join(tmpDir, createDir), 0700)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unable to setup test config directory: %s", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, createFile := range test.setupFiles {
0000000000000000000000000000000000000000;;				fullPath := filepath.Join(tmpDir, createFile)
0000000000000000000000000000000000000000;;				f, err := os.Create(fullPath)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unable to create test file: %s", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				defer f.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resetConfigDir(tmpDir, filepath.Join(tmpDir, "pki"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Verify the files we cleanup implicitly in every test:
0000000000000000000000000000000000000000;;			assertExists(t, tmpDir)
0000000000000000000000000000000000000000;;			assertNotExists(t, filepath.Join(tmpDir, kubeadmconstants.AdminKubeConfigFileName))
0000000000000000000000000000000000000000;;			assertNotExists(t, filepath.Join(tmpDir, kubeadmconstants.KubeletKubeConfigFileName))
0000000000000000000000000000000000000000;;			assertDirEmpty(t, filepath.Join(tmpDir, "manifests"))
0000000000000000000000000000000000000000;;			assertDirEmpty(t, filepath.Join(tmpDir, "pki"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Verify the files as requested by the test:
0000000000000000000000000000000000000000;;			for _, path := range test.verifyExists {
0000000000000000000000000000000000000000;;				assertExists(t, filepath.Join(tmpDir, path))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, path := range test.verifyNotExists {
0000000000000000000000000000000000000000;;				assertNotExists(t, filepath.Join(tmpDir, path))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
