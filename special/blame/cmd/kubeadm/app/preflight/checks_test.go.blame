0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3188e9dcd5875bd1e5bb996b7ecfbe00c8085c4f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package preflight
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/renstrom/dedent"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;		kubeadmapi "k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		externalEtcdRootCAFileContent = dedent.Dedent(`
0000000000000000000000000000000000000000;;			-----BEGIN CERTIFICATE-----
0000000000000000000000000000000000000000;;			MIIFrjCCA5agAwIBAgIUJAM5bQz/Ann8qye8T7Uyl+cAt3wwDQYJKoZIhvcNAQEN
0000000000000000000000000000000000000000;;			BQAwbzEOMAwGA1UEBhMFQ2hpbmExDzANBgNVBAgTBkhhaW5hbjEOMAwGA1UEBxMF
0000000000000000000000000000000000000000;;			U2FueWExDTALBgNVBAoTBGV0Y2QxFjAUBgNVBAsTDWV0Y2Qgc2VjdXJpdHkxFTAT
0000000000000000000000000000000000000000;;			BgNVBAMTDGV0Y2Qtcm9vdC1jYTAeFw0xNzAyMjIwNzEyMDBaFw0yMjAyMjEwNzEy
0000000000000000000000000000000000000000;;			MDBaMG8xDjAMBgNVBAYTBUNoaW5hMQ8wDQYDVQQIEwZIYWluYW4xDjAMBgNVBAcT
0000000000000000000000000000000000000000;;			BVNhbnlhMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIHNlY3VyaXR5MRUw
0000000000000000000000000000000000000000;;			EwYDVQQDEwxldGNkLXJvb3QtY2EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK
0000000000000000000000000000000000000000;;			AoICAQDD16VNTwvEvy1yd/vt8Eq2NwTw51mKHGYlZwsDqdqMEnEiWoJ7Iv9HZ+cl
0000000000000000000000000000000000000000;;			jX0FnahKnaV76j3xPO73L5WOvRYxnZ8MvU/aBdDO+Tct4ht3m7TJaav6s55otjDy
0000000000000000000000000000000000000000;;			dQNmlpBt4fFEB/nDozQaocfu2mqr5nyKJOjJpe+57Uw4h0LshreDOlzHEs8CkP6W
0000000000000000000000000000000000000000;;			/B9yGFARVyz84YgVtemUX8WTB3cVU49KEYMCuhqXY8s97xSTGT/4Tq/MruKb2V+w
0000000000000000000000000000000000000000;;			uUPjvyO5eIUcWetjBhgEGsS37NrsSFhoUNMp/PtIkth0LQoWb9sjnG069KIQqm61
0000000000000000000000000000000000000000;;			1PKxH7jgLYLf4q455iAuTFr0lF1OcmICTeJB+GiS+3ubOb1TH3AYICXvQUniNWJx
0000000000000000000000000000000000000000;;			sDz3qUUu4GLHk9wHtdNmX2FXYB8kHMZAidDM4Zw3IhZZap6n6BlGVVBV5h8sNM3t
0000000000000000000000000000000000000000;;			SB+pDLuAaZLx3/ah2ds6AwkfaMdYDsE/MWcWQqzBfhOp758Mx3dF16IY+6IQp0RS
0000000000000000000000000000000000000000;;			8qGKxgLDnTF9LgyHVOait2N/pT54faf8//ShSqTqzTK1wzHCkYwL6/B259zXWxeX
0000000000000000000000000000000000000000;;			z4gOpQOk4rO4pgm/65QW9aKzHoQnpQ7lFQL2cdsKJv2tyC7pDfVrFy2uHWaUibbP
0000000000000000000000000000000000000000;;			7pDw3OD8MQwR1TuhflK1AIicpMQe/kTAuRwH4fneeaGVdddBQQIDAQABo0IwQDAO
0000000000000000000000000000000000000000;;			BgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUtoqcReNJ
0000000000000000000000000000000000000000;;			p8z8Hz1/Q7XMK2fgi74wDQYJKoZIhvcNAQENBQADggIBADbh4HB//Gb0TUUEPoSw
0000000000000000000000000000000000000000;;			VMJSUK1pb6KVTqAITSCKPwGT8KfCvVpUxEjh9J3dm1L8wbdr48yffdjhdl96cx2F
0000000000000000000000000000000000000000;;			aGWdUIxRBIcpt5xvauBoj0OwfNcD5B9q1aKuh5XPNu4BndNeGw51vdJ8bJbtrZa8
0000000000000000000000000000000000000000;;			wKWF/PHciCo/wlzE/YgsemHeY5bYeXawXVP/+ocoLH82Fb8Aq0Af3ZABiA6fmawz
0000000000000000000000000000000000000000;;			FiZlnIrZnHVJYSap4yDhC/AQECXKY5gj7kjSnDebsIYds5OrW0D3LeRzs+q5nQXE
0000000000000000000000000000000000000000;;			xR35qg834kxUULS8AywqmR3+zjfeymm2FtsjT/PuzEImA80y29qpLZIpPg0meKHF
0000000000000000000000000000000000000000;;			pCMJkEHaRh4/JAinLaKCGLpnchqBy7CR6yvVnGkx93J0louIbVyUfn63R6mxCvd7
0000000000000000000000000000000000000000;;			kL16a2xBMKgV4RDFcu+VYjbJTFdWOTGFrxPBmd/rLdwD3XNiwPtI0vXGM7I35DDP
0000000000000000000000000000000000000000;;			SWwKVvR97F3uEnIQ1u8vHa1pNfQ1qSf/+hUJx2D9ypr7LTQ0LpLh1vUeTeUAVHmT
0000000000000000000000000000000000000000;;			EEpcqzDg6lsqXw6KHJ55kd3QR/hRXd/Vr6EWUawDEnGjxyFVV2dTBbunsbSobNI4
0000000000000000000000000000000000000000;;			eKV+60oCk3NMwrZoLw4Fv5qs2saS62dgJNfxbKqBX9ljSQxGzHjRwh+hVByCnG8m
0000000000000000000000000000000000000000;;			Z9JkQayesM6D7uwbQJXd5rgy
0000000000000000000000000000000000000000;;			-----END CERTIFICATE-----
0000000000000000000000000000000000000000;;		`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		externalEtcdCertFileContent = dedent.Dedent(`
0000000000000000000000000000000000000000;;			-----BEGIN CERTIFICATE-----
0000000000000000000000000000000000000000;;			MIIGEjCCA/qgAwIBAgIURHJFslbPveA1WwQ4FaPJg1x6B8YwDQYJKoZIhvcNAQEN
0000000000000000000000000000000000000000;;			BQAwbzEOMAwGA1UEBhMFQ2hpbmExDzANBgNVBAgTBkhhaW5hbjEOMAwGA1UEBxMF
0000000000000000000000000000000000000000;;			U2FueWExDTALBgNVBAoTBGV0Y2QxFjAUBgNVBAsTDWV0Y2Qgc2VjdXJpdHkxFTAT
0000000000000000000000000000000000000000;;			BgNVBAMTDGV0Y2Qtcm9vdC1jYTAeFw0xNzAyMjIwNzE0MDBaFw0yNzAyMjAwNzE0
0000000000000000000000000000000000000000;;			MDBaMGwxDjAMBgNVBAYTBUNoaW5hMQ8wDQYDVQQIEwZIYWluYW4xDjAMBgNVBAcT
0000000000000000000000000000000000000000;;			BVNhbnlhMQ0wCwYDVQQKEwRldGNkMRYwFAYDVQQLEw1ldGNkIHNlY3VyaXR5MRIw
0000000000000000000000000000000000000000;;			EAYDVQQDEwlteS1ldGNkLTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
0000000000000000000000000000000000000000;;			AQCmCR4OSRrUCES90sUbj5tvjF24lPCMj7qP9MBUxcVvWfaJM12o4AxqBr8OThgd
0000000000000000000000000000000000000000;;			lpNvlbKmRpfvbraXiDnuGty1vPa3z7RmKbwFgENfgKHz4fUw/MQ7CALOQ5PAvgf1
0000000000000000000000000000000000000000;;			rQ6Ii4cr49nWctpQmBXHtZRjvquBYnw70KrWfQ121DwPYy7cb/StuHLsTgqsgzhl
0000000000000000000000000000000000000000;;			ECILWCj9GNqcGQr5+ZvwUxa2yam2CS1M+PLbB6HxX/4RBBTWKAt8+kjt6TxxMaSE
0000000000000000000000000000000000000000;;			bNDHNDLWzQSpxg5qTLOQtrubFD4O3JT2E8DEj+LvXJKH7pJd1Z+r0m3ymQvBAIXr
0000000000000000000000000000000000000000;;			6OJs+sHbaaxKWS35k9m88NRojR+r5KPoEcBgxhtBtXUfMS5v5dTtcNsHl/mHmTC+
0000000000000000000000000000000000000000;;			gWiqpzA+tF55uUEWhRoA+pN7Ie2PviRhG43t99l7bsHVnrxZQqWsWlvCxMN1c2+7
0000000000000000000000000000000000000000;;			PRwhsYZFITyKcMSvd19Nb5HGc5hT7btZlWc2xKS2YNnDXbD8C5SdxZek5Cb/xRxL
0000000000000000000000000000000000000000;;			T8taf2c1bHs8sZrzIK2DCGvaN3471WEnmaCuRWr2fqyJeCPwsvvWeNDVmgPP6v7g
0000000000000000000000000000000000000000;;			ncyy+4QyyfNrdURTZFyw81ZbCiznPc070u7vtIYt3Sa0NXd0oEG1ybAZwBIYhMOY
0000000000000000000000000000000000000000;;			5ctepJLf7QxHXR70RdI0ksHEmZGZ1igk7gzhmHEgQM87pQIDAQABo4GoMIGlMA4G
0000000000000000000000000000000000000000;;			A1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYD
0000000000000000000000000000000000000000;;			VR0TAQH/BAIwADAdBgNVHQ4EFgQU0U/Zn4mc95UXm+LVO67wqJpL9gIwHwYDVR0j
0000000000000000000000000000000000000000;;			BBgwFoAUtoqcReNJp8z8Hz1/Q7XMK2fgi74wJgYDVR0RBB8wHYIJbG9jYWxob3N0
0000000000000000000000000000000000000000;;			hwR/AAABhwQKcjPGhwQKcgwwMA0GCSqGSIb3DQEBDQUAA4ICAQCikW5SNpndBxEz
0000000000000000000000000000000000000000;;			qblER72KkfSEXMFhQry3RZJeAw6rQiOl+PMJqMnylcepOAUrNi20emS270dQDh3z
0000000000000000000000000000000000000000;;			Hw/JBgKftZ1JrjbF9NF4oFUZcFUKmTgyWYnhLH0BskgwJf2u+DpugFa4U8niQf15
0000000000000000000000000000000000000000;;			ciZGoUfWCGOJbgVP7esdnyhH/P/DpOEObWf8vOfvfQ49r7MzATyzMESyJjdtAH/F
0000000000000000000000000000000000000000;;			c5JKACxpJhaYfTZ78F43jSw0vswBdLQ7fJWqg/sJBlTG0GBFJcEJzFVpwzYUxwZ4
0000000000000000000000000000000000000000;;			rUpAn4A02M2V9XDNlptrWvcQz/5Vs/aCmehz7GOiMJB6SLWcMSpJRLMqoJjaFVfO
0000000000000000000000000000000000000000;;			OPm7bWMMaVOUPedzvcBKRXmEAg7HQnm3ibkVNjTW8Hr66n34Yk/dO9WXD+6IXnOQ
0000000000000000000000000000000000000000;;			bMY+Mf9vpIsscSpGTO15sAKqiXCzHR9RWqNd4U3jvo3JtewkNMhIKzPThgYNfsO3
0000000000000000000000000000000000000000;;			7HSrlfffeEQKc59rDUaC3Y9YSc5ERJRMC+mdOqXNMy2iedZnNEsmgYlaVDg6xfG8
0000000000000000000000000000000000000000;;			65w9UkMOe+DTJtMHnMxP4rT6WE4cKysQeSYxkyo/jh+8rKEy9+AyuEntJAknABUc
0000000000000000000000000000000000000000;;			N5mizdYu8nrtiSu9jdLKhwO41gC2IlXPUHizylo6g24RFVBjHLlzYAAsVMMMSQW1
0000000000000000000000000000000000000000;;			XRMVQjawUTknbAgHuE7/rEX8c27WUA==
0000000000000000000000000000000000000000;;			-----END CERTIFICATE-----
0000000000000000000000000000000000000000;;		`)
0000000000000000000000000000000000000000;;		externalEtcdKeyFileContent = dedent.Dedent(`
0000000000000000000000000000000000000000;;			-----BEGIN RSA PRIVATE KEY-----
0000000000000000000000000000000000000000;;			MIIJKAIBAAKCAgEApgkeDkka1AhEvdLFG4+bb4xduJTwjI+6j/TAVMXFb1n2iTNd
0000000000000000000000000000000000000000;;			qOAMaga/Dk4YHZaTb5WypkaX7262l4g57hrctbz2t8+0Zim8BYBDX4Ch8+H1MPzE
0000000000000000000000000000000000000000;;			OwgCzkOTwL4H9a0OiIuHK+PZ1nLaUJgVx7WUY76rgWJ8O9Cq1n0NdtQ8D2Mu3G/0
0000000000000000000000000000000000000000;;			rbhy7E4KrIM4ZRAiC1go/RjanBkK+fmb8FMWtsmptgktTPjy2weh8V/+EQQU1igL
0000000000000000000000000000000000000000;;			fPpI7ek8cTGkhGzQxzQy1s0EqcYOakyzkLa7mxQ+DtyU9hPAxI/i71ySh+6SXdWf
0000000000000000000000000000000000000000;;			q9Jt8pkLwQCF6+jibPrB22msSlkt+ZPZvPDUaI0fq+Sj6BHAYMYbQbV1HzEub+XU
0000000000000000000000000000000000000000;;			7XDbB5f5h5kwvoFoqqcwPrReeblBFoUaAPqTeyHtj74kYRuN7ffZe27B1Z68WUKl
0000000000000000000000000000000000000000;;			rFpbwsTDdXNvuz0cIbGGRSE8inDEr3dfTW+RxnOYU+27WZVnNsSktmDZw12w/AuU
0000000000000000000000000000000000000000;;			ncWXpOQm/8UcS0/LWn9nNWx7PLGa8yCtgwhr2jd+O9VhJ5mgrkVq9n6siXgj8LL7
0000000000000000000000000000000000000000;;			1njQ1ZoDz+r+4J3MsvuEMsnza3VEU2RcsPNWWwos5z3NO9Lu77SGLd0mtDV3dKBB
0000000000000000000000000000000000000000;;			tcmwGcASGITDmOXLXqSS3+0MR10e9EXSNJLBxJmRmdYoJO4M4ZhxIEDPO6UCAwEA
0000000000000000000000000000000000000000;;			AQKCAgEAmr3OlDPP3CLkpiFEcJ5TmA+y3S96TRY7IqVRhvBXRKMMoOwNczF0gHBP
0000000000000000000000000000000000000000;;			Ka7gzNqkCA/1UwBh49VEOU/N5bqFTp+RNNhQYhKtWFck82H4Dkrd8EzzOa0KqF/U
0000000000000000000000000000000000000000;;			2YKB+pbR/7JCRUZypGmgTBKh4eG6LYfrYYd/D2Q3g/VCUigU3aZrayiwWiOYf+Fw
0000000000000000000000000000000000000000;;			Ez2slowFnpsIgHHkdCzmzPi0O7PEbJDgKXa+EInIFRg09renGwa5wKnLoyvEQm7o
0000000000000000000000000000000000000000;;			VPqWQJEFt1JPu1+R5ARhNPLNO6cCi9K+z60G65yXQNp0/u5A5o0TPn609DcHH11B
0000000000000000000000000000000000000000;;			1ht9tNL0C+tcNvhyiUw6C+uet3egDVu1TqptzAfb2Y3MQK6UV/by7KJxcFxBAzWl
0000000000000000000000000000000000000000;;			UQ4zDaQzCcU81T92zI+XeRSJuCPuOL61mH7zEiPZZPOLV8MbxBX/7lj+IJTBL+vJ
0000000000000000000000000000000000000000;;			Idq7Nn/+LRtuSy5PH2MzZ5DzIMmjkjQ/ScpzAr9Zpkm3dpTcGTpFV0uqHseE77Re
0000000000000000000000000000000000000000;;			55tz9uB7pxV1n6Gz4uMNnsioEYsFIRfzst4QWDdaQqcYJQuKvW9pXNmgRgSCIlft
0000000000000000000000000000000000000000;;			54DxQ98a1PVFmS40TT9mjUg0P66m+8bk5vEb58iAjoYJRcoriZhlT6cOcuPW6hos
0000000000000000000000000000000000000000;;			3PfA2gMXuWu61mAjzdP0zbzNBXCn5nRppqLNmWMVZCI0nLjmyZUCggEBAMEpCQu9
0000000000000000000000000000000000000000;;			cRWc/GjvmnfXHewvqQHu3A3J1HCLR0VqJo8rcIIvhSe7dPRAMtUFxV1R2eOfMvSZ
0000000000000000000000000000000000000000;;			Y4y69tMHZPVTgnp2t5TSavjpMqSQLvXyBkgL8FnGEl5l6HEQTm8y0C13Cm+CUB5a
0000000000000000000000000000000000000000;;			uxQnQflkX539SjWX0XdOmYuLORmrKGxgcDOd9652fDJcFSXYa0mx6KN2JZHh9psA
0000000000000000000000000000000000000000;;			9ldHhUIq1ngoVnrctlK53MptckPrFwMFdXRCKiMfkvpUkXTeXu4D7Z1VNh2V/3gF
0000000000000000000000000000000000000000;;			lmRNioXaxp7W8omBSQlwaHY5btPj5jktiC9/so4ORqJjHvbCURrIvdkPPaXi/YJy
0000000000000000000000000000000000000000;;			HdoOgHYFnn3p6M8CggEBANwNDtdbHWwwVC7Op6TNc8qK+SWAId5RqPOmM70XBVvg
0000000000000000000000000000000000000000;;			u9nxT7a5vmRTs81fcVoxtE0t+KWIfOXquxqTbk0ONqIsl2CLTiTFaNHoHlvwgFBT
0000000000000000000000000000000000000000;;			aYukORiGILIzOJr82RPugAw1+j8jmw3OsCOXnf2odGs+oC/V9vEd9NyZpDHPohtK
0000000000000000000000000000000000000000;;			a8Bk8p326mQam23ArUesIqnw31fG22KRpoLXuk/9nNcAAAZd1Qd9hGWf0HHxunXB
0000000000000000000000000000000000000000;;			wj6e3VTm0G4NPTli5vmVavYRPMFUUJpU5lwTHhlrHTSmANHTjZGnn0mEOfIrfodF
0000000000000000000000000000000000000000;;			ODwJjwoyq4rPls0fqOvyAyBCnhop4fC8yOd4cQcLSUsCggEAbv9Br3lhLmZTtYla
0000000000000000000000000000000000000000;;			XltDWqHYoL+9vD6q0TF39y+UkNkJggYEolxaTLFHhJoYXBPY/bBR+7TZO9mEVKf/
0000000000000000000000000000000000000000;;			H+qpI+5seByiU/7NlzszgSle6q/RogTsMUqmU7JnIAc3EalCWemsWIUS0/XrN4Cy
0000000000000000000000000000000000000000;;			YXtX1Yw0VjbYjROn8FQmmoCgeUjhN2Pm4pl/nYvLu0F8ydHurPIIX/IhnO4AaZFs
0000000000000000000000000000000000000000;;			RQgJCfki3E7pzXkvHFBPnPDaGcCbritKrodCPsI6EtQ3Cx4YRtAXScUMMv9MBrc9
0000000000000000000000000000000000000000;;			Q7GJFfMxITdzD9zZDvH7Lgg4JfNfi7owZMhI1su7B4UrczwK1PSncPpapR+IOkno
0000000000000000000000000000000000000000;;			VbrAiQKCAQB2xGV6PqdGuV72VHuPK4SPkSqf3uRoxdJWjyHlsQMnb8hz/RZ1HRNx
0000000000000000000000000000000000000000;;			uuuUsSrQ73rNHT7SuTQQM/0AfwpNdJpwNXkOlqF6n0HP6WRZYxkeQab5w409e0cy
0000000000000000000000000000000000000000;;			ZwrqPAY+B7/81zVV1rXdYe0XiMGxIraTG54Bs44w3WZHmnVQnSx1Zll54gJA1//y
0000000000000000000000000000000000000000;;			P5ocRp4/zNx4tJUXHzFRpiMlA6J/gfag5FMfHI3aGRjYcMVken+VBxr8CWqUZG+i
0000000000000000000000000000000000000000;;			tmqRCpx3oPm2Dd+oyQUoByK+F2NrfLCqtd5DYddLAhmq6D8OQgNspyOO4+ncKzUD
0000000000000000000000000000000000000000;;			Gr/dvnTBxEGDq/EBVhGoiXw10n/OuXy5AoIBAAUAoTyt4gQjjC0ddtMLN7+R1Ymp
0000000000000000000000000000000000000000;;			eNULpq2XTvidj7jaysIW9Q52ncvN6h2Vds/Z3Ujvdne2jMq7Q/C96fKcrhgMH9ca
0000000000000000000000000000000000000000;;			ADGLWtD+VkP4NgFjj7R2jabF8d9IQdJDXAgvR/kokojF0RsJuvD2hawN6lQkkj6S
0000000000000000000000000000000000000000;;			fNNGMBk4sGyt7gzAn3iO4Zoy+QjtALNnZcaH6s7oIg3UKf6OwskiBB60Q5P1U3/E
0000000000000000000000000000000000000000;;			RPtTxhex3jFuySNJ413JgyGkvcP+qjuzi6eyVDxkfiyNohQYGuZ8rieFX7QfQFAY
0000000000000000000000000000000000000000;;			TIXptchVUTxmGKWzcpLC3AfkwFvV2IPoMk8YnDSp270D30cqWiI9puSEcxQ=
0000000000000000000000000000000000000000;;			-----END RSA PRIVATE KEY-----
0000000000000000000000000000000000000000;;		`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type preflightCheckTest struct {
0000000000000000000000000000000000000000;;		msg string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pfct preflightCheckTest) Check() (warning, errors []error) {
0000000000000000000000000000000000000000;;		if pfct.msg == "warning" {
0000000000000000000000000000000000000000;;			return []error{fmt.Errorf("warning")}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pfct.msg != "" {
0000000000000000000000000000000000000000;;			return nil, []error{fmt.Errorf("fake error")}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunInitMasterChecks(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			cfg      *kubeadmapi.MasterConfiguration
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cfg: &kubeadmapi.MasterConfiguration{
0000000000000000000000000000000000000000;;					API: kubeadm.API{AdvertiseAddress: "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			actual := RunInitMasterChecks(rt.cfg)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed RunInitMasterChecks:\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual != nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunJoinNodeChecks(t *testing.T) {
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			cfg      *kubeadmapi.NodeConfiguration
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cfg:      &kubeadmapi.NodeConfiguration{},
0000000000000000000000000000000000000000;;				expected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			actual := RunJoinNodeChecks(rt.cfg)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed RunJoinNodeChecks:\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual != nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunChecks(t *testing.T) {
0000000000000000000000000000000000000000;;		var tokenTest = []struct {
0000000000000000000000000000000000000000;;			p        []Checker
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;			output   string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{[]Checker{}, true, ""},
0000000000000000000000000000000000000000;;			{[]Checker{preflightCheckTest{"warning"}}, true, "[preflight] WARNING: warning\n"}, // should just print warning
0000000000000000000000000000000000000000;;			{[]Checker{preflightCheckTest{"error"}}, false, ""},
0000000000000000000000000000000000000000;;			{[]Checker{preflightCheckTest{"test"}}, false, ""},
0000000000000000000000000000000000000000;;			{[]Checker{DirAvailableCheck{Path: "/does/not/exist"}}, true, ""},
0000000000000000000000000000000000000000;;			{[]Checker{DirAvailableCheck{Path: "/"}}, false, ""},
0000000000000000000000000000000000000000;;			{[]Checker{FileAvailableCheck{Path: "/does/not/exist"}}, true, ""},
0000000000000000000000000000000000000000;;			{[]Checker{FileContentCheck{Path: "/does/not/exist"}}, false, ""},
0000000000000000000000000000000000000000;;			{[]Checker{FileContentCheck{Path: "/"}}, true, ""},
0000000000000000000000000000000000000000;;			{[]Checker{FileContentCheck{Path: "/", Content: []byte("does not exist")}}, false, ""},
0000000000000000000000000000000000000000;;			{[]Checker{InPathCheck{executable: "foobarbaz"}}, true, "[preflight] WARNING: foobarbaz not found in system path\n"},
0000000000000000000000000000000000000000;;			{[]Checker{InPathCheck{executable: "foobarbaz", mandatory: true}}, false, ""},
0000000000000000000000000000000000000000;;			{[]Checker{ExtraArgsCheck{
0000000000000000000000000000000000000000;;				APIServerExtraArgs:         map[string]string{"secure-port": "1234"},
0000000000000000000000000000000000000000;;				ControllerManagerExtraArgs: map[string]string{"use-service-account-credentials": "true"},
0000000000000000000000000000000000000000;;				SchedulerExtraArgs:         map[string]string{"leader-elect": "true"},
0000000000000000000000000000000000000000;;			}}, true, ""},
0000000000000000000000000000000000000000;;			{[]Checker{ExtraArgsCheck{
0000000000000000000000000000000000000000;;				APIServerExtraArgs: map[string]string{"secure-port": "foo"},
0000000000000000000000000000000000000000;;			}}, true, "[preflight] WARNING: kube-apiserver: failed to parse extra argument --secure-port=foo\n"},
0000000000000000000000000000000000000000;;			{[]Checker{ExtraArgsCheck{
0000000000000000000000000000000000000000;;				APIServerExtraArgs: map[string]string{"invalid-argument": "foo"},
0000000000000000000000000000000000000000;;			}}, true, "[preflight] WARNING: kube-apiserver: failed to parse extra argument --invalid-argument=foo\n"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rt := range tokenTest {
0000000000000000000000000000000000000000;;			buf := new(bytes.Buffer)
0000000000000000000000000000000000000000;;			actual := RunChecks(rt.p, buf)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed RunChecks:\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf.String() != rt.output {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed RunChecks:\n\texpected: %s\n\t  actual: %s",
0000000000000000000000000000000000000000;;					rt.output,
0000000000000000000000000000000000000000;;					buf.String(),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestConfigRootCAs(t *testing.T) {
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile(os.TempDir(), "kubeadm-external-etcd-test-cafile")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("failed configRootCAs:\n\texpected: succeed creating temp CA file\n\tactual:%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(f.Name())
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(f.Name(), []byte(externalEtcdRootCAFileContent), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("failed configRootCAs:\n\texpected: succeed writing contents to temp CA file %s\n\tactual:%v", f.Name(), err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := ExternalEtcdVersionCheck{Etcd: kubeadmapi.Etcd{CAFile: f.Name()}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config, err := c.configRootCAs(nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf(
0000000000000000000000000000000000000000;;				"failed configRootCAs:\n\texpected: has no error\n\tactual:%v",
0000000000000000000000000000000000000000;;				err,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.RootCAs == nil {
0000000000000000000000000000000000000000;;			t.Errorf(
0000000000000000000000000000000000000000;;				"failed configRootCAs:\n\texpected: RootCAs not equal to nil\n\tactual:%v",
0000000000000000000000000000000000000000;;				config.RootCAs,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestConfigCertAndKey(t *testing.T) {
0000000000000000000000000000000000000000;;		certFile, err := ioutil.TempFile(os.TempDir(), "kubeadm-external-etcd-test-certfile")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf(
0000000000000000000000000000000000000000;;				"failed configCertAndKey:\n\texpected: succeed creating temp CertFile file\n\tactual:%v",
0000000000000000000000000000000000000000;;				err,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(certFile.Name())
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(certFile.Name(), []byte(externalEtcdCertFileContent), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf(
0000000000000000000000000000000000000000;;				"failed configCertAndKey:\n\texpected: succeed writing contents to temp CertFile file %s\n\tactual:%v",
0000000000000000000000000000000000000000;;				certFile.Name(),
0000000000000000000000000000000000000000;;				err,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keyFile, err := ioutil.TempFile(os.TempDir(), "kubeadm-external-etcd-test-keyfile")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf(
0000000000000000000000000000000000000000;;				"failed configCertAndKey:\n\texpected: succeed creating temp KeyFile file\n\tactual:%v",
0000000000000000000000000000000000000000;;				err,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(keyFile.Name())
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(keyFile.Name(), []byte(externalEtcdKeyFileContent), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf(
0000000000000000000000000000000000000000;;				"failed configCertAndKey:\n\texpected: succeed writing contents to temp KeyFile file %s\n\tactual:%v",
0000000000000000000000000000000000000000;;				keyFile.Name(),
0000000000000000000000000000000000000000;;				err,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := ExternalEtcdVersionCheck{Etcd: kubeadmapi.Etcd{
0000000000000000000000000000000000000000;;			CertFile: certFile.Name(),
0000000000000000000000000000000000000000;;			KeyFile:  keyFile.Name(),
0000000000000000000000000000000000000000;;		}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config, err := c.configCertAndKey(nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf(
0000000000000000000000000000000000000000;;				"failed configCertAndKey:\n\texpected: has no error\n\tactual:%v",
0000000000000000000000000000000000000000;;				err,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.Certificates == nil {
0000000000000000000000000000000000000000;;			t.Errorf(
0000000000000000000000000000000000000000;;				"failed configCertAndKey:\n\texpected: Certificates not equal to nil\n\tactual:%v",
0000000000000000000000000000000000000000;;				config.Certificates,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
