0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
422475bb066177f290f44f2d3abeeafe41bf6337;cmd/kubeadm/test/util.go[cmd/kubeadm/test/util.go][cmd/kubeadm/test/cmd/util.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeadm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Forked from test/e2e/framework because the e2e framework is quite bloated
0000000000000000000000000000000000000000;;	// for our purposes here, and modified to remove undesired logging.
0000000000000000000000000000000000000000;;	func RunCmd(command string, args ...string) (string, string, error) {
0000000000000000000000000000000000000000;;		var bout, berr bytes.Buffer
0000000000000000000000000000000000000000;;		cmd := exec.Command(command, args...)
0000000000000000000000000000000000000000;;		cmd.Stdout = &bout
0000000000000000000000000000000000000000;;		cmd.Stderr = &berr
0000000000000000000000000000000000000000;;		err := cmd.Run()
0000000000000000000000000000000000000000;;		stdout, stderr := bout.String(), berr.String()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("error running %s %v; \ngot error %v, \nstdout %q, \nstderr %q",
0000000000000000000000000000000000000000;;				command, args, err, stdout, stderr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return stdout, stderr, nil
0000000000000000000000000000000000000000;;	}
