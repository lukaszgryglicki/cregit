0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6863b83e3741be99c59f1d876af465bd15e04647;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeadm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// kubeadmReset executes "kubeadm reset" and restarts kubelet.
0000000000000000000000000000000000000000;;	func kubeadmReset() error {
0000000000000000000000000000000000000000;;		_, _, err := RunCmd(*kubeadmPath, "reset")
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdInitToken(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var initTest = []struct {
0000000000000000000000000000000000000000;;			args     string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"--discovery=token://abcd:1234567890abcd", false},     // invalid token size
0000000000000000000000000000000000000000;;			{"--discovery=token://Abcdef:1234567890abcdef", false}, // invalid token non-lowercase
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range initTest {
0000000000000000000000000000000000000000;;			_, _, actual := RunCmd(*kubeadmPath, "init", rt.args, "--skip-preflight-checks")
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CmdInitToken running 'kubeadm init %s' with an error: %v\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.args,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			kubeadmReset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdInitKubernetesVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var initTest = []struct {
0000000000000000000000000000000000000000;;			args     string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"--kubernetes-version=foobar", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range initTest {
0000000000000000000000000000000000000000;;			_, _, actual := RunCmd(*kubeadmPath, "init", rt.args, "--skip-preflight-checks")
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CmdInitKubernetesVersion running 'kubeadm init %s' with an error: %v\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.args,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			kubeadmReset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdInitConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var initTest = []struct {
0000000000000000000000000000000000000000;;			args     string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"--config=foobar", false},
0000000000000000000000000000000000000000;;			{"--config=/does/not/exist/foo/bar", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range initTest {
0000000000000000000000000000000000000000;;			_, _, actual := RunCmd(*kubeadmPath, "init", rt.args, "--skip-preflight-checks")
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CmdInitConfig running 'kubeadm init %s' with an error: %v\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.args,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			kubeadmReset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdInitAPIPort(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var initTest = []struct {
0000000000000000000000000000000000000000;;			args     string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"--api-port=foobar", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range initTest {
0000000000000000000000000000000000000000;;			_, _, actual := RunCmd(*kubeadmPath, "init", rt.args, "--skip-preflight-checks")
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CmdInitAPIPort running 'kubeadm init %s' with an error: %v\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.args,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			kubeadmReset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdInitArgsMixed(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var initTest = []struct {
0000000000000000000000000000000000000000;;			args     string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"--api-port=1000 --config=/etc/kubernets/kubeadm.config", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range initTest {
0000000000000000000000000000000000000000;;			_, _, actual := RunCmd(*kubeadmPath, "init", rt.args, "--skip-preflight-checks")
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CmdInitArgsMixed running 'kubeadm init %s' with an error: %v\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.args,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			kubeadmReset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
