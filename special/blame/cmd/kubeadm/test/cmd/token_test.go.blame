0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
422475bb066177f290f44f2d3abeeafe41bf6337;cmd/kubeadm/test/token_test.go[cmd/kubeadm/test/token_test.go][cmd/kubeadm/test/cmd/token_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeadm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TokenExpectedRegex = "^\\S{6}\\.\\S{16}\n$"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var kubeadmPath = flag.String("kubeadm-path", filepath.Join(os.Getenv("KUBE_ROOT"), "cluster/kubeadm.sh"), "Location of kubeadm")
0000000000000000000000000000000000000000;;	var kubeadmCmdSkip = flag.Bool("kubeadm-cmd-skip", false, "Skip kubeadm cmd tests")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdTokenGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stdout, _, err := RunCmd(*kubeadmPath, "token", "generate")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("'kubeadm token generate' exited uncleanly: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matched, err := regexp.MatchString(TokenExpectedRegex, stdout)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("encountered an error while trying to match 'kubeadm token generate' stdout: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !matched {
0000000000000000000000000000000000000000;;			t.Errorf("'kubeadm token generate' stdout did not match expected regex; wanted: [%q], got: [%s]", TokenExpectedRegex, stdout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdTokenGenerateTypoError(t *testing.T) {
0000000000000000000000000000000000000000;;		/*
0000000000000000000000000000000000000000;;			Since we expect users to do things like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				$ TOKEN=$(kubeadm token generate)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			we want to make sure that if they have a typo in their command, we exit
0000000000000000000000000000000000000000;;			with a non-zero status code after showing the command's usage, so that
0000000000000000000000000000000000000000;;			the usage itself isn't captured as a token without the user noticing.
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, err := RunCmd(*kubeadmPath, "token", "genorate") // subtle typo
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Error("'kubeadm token genorate' (a deliberate typo) exited without an error when we expected non-zero exit status")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestCmdTokenDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var tests = []struct {
0000000000000000000000000000000000000000;;			args     string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", false},       // no token provided
0000000000000000000000000000000000000000;;			{"foobar", false}, // invalid token
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range tests {
0000000000000000000000000000000000000000;;			_, _, actual := RunCmd(*kubeadmPath, "token", "delete", rt.args)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CmdTokenDelete running 'kubeadm token %s' with an error: %v\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.args,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			kubeadmReset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
