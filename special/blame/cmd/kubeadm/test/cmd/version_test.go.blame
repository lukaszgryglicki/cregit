0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
1877320cb390fa1a5ca8bc997d1d814d74c5d978;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubeadm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ShortExpectedRegex  = "^v.+\n$"
0000000000000000000000000000000000000000;;		NormalExpectedRegex = "^kubeadm version: &version\\.Info{Major:\".+\", Minor:\".+\", GitVersion:\".+\", GitCommit:\".+\", GitTreeState:\".+\", BuildDate:\".+\", GoVersion:\".+\", Compiler:\".+\", Platform:\".+\"}\n$"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		VersionInfo = []string{"major", "minor", "gitVersion", "gitCommit", "gitTreeState", "buildDate", "goVersion", "compiler", "platform"}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var versionTest = []struct {
0000000000000000000000000000000000000000;;			args     string
0000000000000000000000000000000000000000;;			regex    string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"--output=valid", "", false},
0000000000000000000000000000000000000000;;			{"--output=short", ShortExpectedRegex, true},
0000000000000000000000000000000000000000;;			{"", NormalExpectedRegex, true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range versionTest {
0000000000000000000000000000000000000000;;			stdout, _, actual := RunCmd(*kubeadmPath, "version", rt.args)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CmdVersion running 'kubeadm version %s' with an error: %v\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.args,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if rt.expected {
0000000000000000000000000000000000000000;;				matched, err := regexp.MatchString(rt.regex, stdout)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("encountered an error while trying to match 'kubeadm version %s' stdout: %v", rt.args, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !matched {
0000000000000000000000000000000000000000;;					t.Errorf("'kubeadm version %s' stdout did not match expected regex; wanted: [%q], got: [%s]", rt.args, rt.regex, stdout)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCmdVersionOutputJsonOrYaml(t *testing.T) {
0000000000000000000000000000000000000000;;		if *kubeadmCmdSkip {
0000000000000000000000000000000000000000;;			t.Log("kubeadm cmd tests being skipped")
0000000000000000000000000000000000000000;;			t.Skip()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var versionTest = []struct {
0000000000000000000000000000000000000000;;			args     string
0000000000000000000000000000000000000000;;			format   string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"--output=json", "json", true},
0000000000000000000000000000000000000000;;			{"--output=yaml", "yaml", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rt := range versionTest {
0000000000000000000000000000000000000000;;			stdout, _, actual := RunCmd(*kubeadmPath, "version", rt.args)
0000000000000000000000000000000000000000;;			if (actual == nil) != rt.expected {
0000000000000000000000000000000000000000;;				t.Errorf(
0000000000000000000000000000000000000000;;					"failed CmdVersion running 'kubeadm version %s' with an error: %v\n\texpected: %t\n\t  actual: %t",
0000000000000000000000000000000000000000;;					rt.args,
0000000000000000000000000000000000000000;;					actual,
0000000000000000000000000000000000000000;;					rt.expected,
0000000000000000000000000000000000000000;;					(actual == nil),
0000000000000000000000000000000000000000;;				)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if rt.expected {
0000000000000000000000000000000000000000;;				var obj interface{}
0000000000000000000000000000000000000000;;				switch rt.format {
0000000000000000000000000000000000000000;;				case "json":
0000000000000000000000000000000000000000;;					err := json.Unmarshal([]byte(stdout), &obj)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("failed to parse json from 'kubeadm version %s': %s", rt.args, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case "yaml":
0000000000000000000000000000000000000000;;					err := yaml.Unmarshal([]byte(stdout), &obj)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("failed to parse yaml from 'kubeadm version %s': %s", rt.args, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				m := obj.(map[string]interface{})
0000000000000000000000000000000000000000;;				if m["clientVersion"] == nil {
0000000000000000000000000000000000000000;;					t.Errorf("failed to get the infomation of clientVersion from 'kubeadm version %s'", rt.args)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				info := m["clientVersion"].(map[string]interface{})
0000000000000000000000000000000000000000;;				for _, key := range VersionInfo {
0000000000000000000000000000000000000000;;					if len(info[key].(string)) == 0 {
0000000000000000000000000000000000000000;;						t.Errorf("failed to get the infomation of %s from 'kubeadm version %s'", key, rt.args)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
