0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
24531da422580217edb10e5a6de7785eeb5d8300;examples/guestbook-go/src/main.go[examples/guestbook-go/src/main.go][examples/guestbook-go/main.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/codegangsta/negroni"
0000000000000000000000000000000000000000;;		"github.com/gorilla/mux"
0000000000000000000000000000000000000000;;		"github.com/xyproto/simpleredis"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		masterPool *simpleredis.ConnectionPool
0000000000000000000000000000000000000000;;		slavePool  *simpleredis.ConnectionPool
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ListRangeHandler(rw http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		key := mux.Vars(req)["key"]
0000000000000000000000000000000000000000;;		list := simpleredis.NewList(slavePool, key)
0000000000000000000000000000000000000000;;		members := HandleError(list.GetAll()).([]string)
0000000000000000000000000000000000000000;;		membersJSON := HandleError(json.MarshalIndent(members, "", "  ")).([]byte)
0000000000000000000000000000000000000000;;		rw.Write(membersJSON)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ListPushHandler(rw http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		key := mux.Vars(req)["key"]
0000000000000000000000000000000000000000;;		value := mux.Vars(req)["value"]
0000000000000000000000000000000000000000;;		list := simpleredis.NewList(masterPool, key)
0000000000000000000000000000000000000000;;		HandleError(nil, list.Add(value))
0000000000000000000000000000000000000000;;		ListRangeHandler(rw, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func InfoHandler(rw http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		info := HandleError(masterPool.Get(0).Do("INFO")).([]byte)
0000000000000000000000000000000000000000;;		rw.Write(info)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func EnvHandler(rw http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		environment := make(map[string]string)
0000000000000000000000000000000000000000;;		for _, item := range os.Environ() {
0000000000000000000000000000000000000000;;			splits := strings.Split(item, "=")
0000000000000000000000000000000000000000;;			key := splits[0]
0000000000000000000000000000000000000000;;			val := strings.Join(splits[1:], "=")
0000000000000000000000000000000000000000;;			environment[key] = val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		envJSON := HandleError(json.MarshalIndent(environment, "", "  ")).([]byte)
0000000000000000000000000000000000000000;;		rw.Write(envJSON)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func HandleError(result interface{}, err error) (r interface{}) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		masterPool = simpleredis.NewConnectionPoolHost("redis-master:6379")
0000000000000000000000000000000000000000;;		defer masterPool.Close()
0000000000000000000000000000000000000000;;		slavePool = simpleredis.NewConnectionPoolHost("redis-slave:6379")
0000000000000000000000000000000000000000;;		defer slavePool.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r := mux.NewRouter()
0000000000000000000000000000000000000000;;		r.Path("/lrange/{key}").Methods("GET").HandlerFunc(ListRangeHandler)
0000000000000000000000000000000000000000;;		r.Path("/rpush/{key}/{value}").Methods("GET").HandlerFunc(ListPushHandler)
0000000000000000000000000000000000000000;;		r.Path("/info").Methods("GET").HandlerFunc(InfoHandler)
0000000000000000000000000000000000000000;;		r.Path("/env").Methods("GET").HandlerFunc(EnvHandler)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		n := negroni.Classic()
0000000000000000000000000000000000000000;;		n.UseHandler(r)
0000000000000000000000000000000000000000;;		n.Run(":3000")
0000000000000000000000000000000000000000;;	}
