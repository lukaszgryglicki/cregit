0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script generates config.sh, which is a site-local config file that is not
0000000000000000000000000000000000000000;;	# checked into source control.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Select and configure Backup Storage Implementation.
0000000000000000000000000000000000000000;;	storage=gcs
0000000000000000000000000000000000000000;;	read -p "Backup Storage (file, gcs) [gcs]: "
0000000000000000000000000000000000000000;;	if [ -n "$REPLY" ]; then storage="$REPLY"; fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	case "$storage" in
0000000000000000000000000000000000000000;;	gcs)
0000000000000000000000000000000000000000;;	  # Google Cloud Storage
0000000000000000000000000000000000000000;;	  project=$(gcloud config list project | grep 'project\s*=' | sed -r 's/^.*=\s*(.*)$/\1/')
0000000000000000000000000000000000000000;;	  read -p "Google Developers Console Project [$project]: "
0000000000000000000000000000000000000000;;	  if [ -n "$REPLY" ]; then project="$REPLY"; fi
0000000000000000000000000000000000000000;;	  if [ -z "$project" ]; then
0000000000000000000000000000000000000000;;	    echo "ERROR: Project name must not be empty."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  read -p "Google Cloud Storage bucket for Vitess backups: " bucket
0000000000000000000000000000000000000000;;	  if [ -z "$bucket" ]; then
0000000000000000000000000000000000000000;;	    echo "ERROR: Bucket name must not be empty."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	  echo "NOTE: If you haven't already created this bucket, you can do so by running:"
0000000000000000000000000000000000000000;;	  echo "      gsutil mb gs://$bucket"
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  backup_flags=$(echo -backup_storage_implementation gcs \
0000000000000000000000000000000000000000;;	                      -gcs_backup_storage_project "'$project'" \
0000000000000000000000000000000000000000;;	                      -gcs_backup_storage_bucket "'$bucket'")
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	file)
0000000000000000000000000000000000000000;;	  # Mounted volume (e.g. NFS)
0000000000000000000000000000000000000000;;	  read -p "Root directory for backups (usually an NFS mount): " file_root
0000000000000000000000000000000000000000;;	  if [ -z "$file_root" ]; then
0000000000000000000000000000000000000000;;	    echo "ERROR: Root directory must not be empty."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	  echo "NOTE: You must add your NFS mount to the vtctld-controller-template"
0000000000000000000000000000000000000000;;	  echo "      and vttablet-pod-template as described in the Kubernetes docs:"
0000000000000000000000000000000000000000;;	  echo "      http://kubernetes.io/v1.0/docs/user-guide/volumes.html#nfs"
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  backup_flags=$(echo -backup_storage_implementation file \
0000000000000000000000000000000000000000;;	                      -file_backup_storage_root "'$file_root'")
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	*)
0000000000000000000000000000000000000000;;	  echo "ERROR: Unsupported backup storage implementation: $storage"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Saving config.sh..."
0000000000000000000000000000000000000000;;	echo "backup_flags=\"$backup_flags\"" > config.sh
0000000000000000000000000000000000000000;;	
