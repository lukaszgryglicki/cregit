0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This is an example script that creates etcd clusters.
0000000000000000000000000000000000000000;;	# Vitess requires a global cluster, as well as one for each cell.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# For automatic discovery, an etcd cluster can be bootstrapped from an
0000000000000000000000000000000000000000;;	# existing cluster. In this example, we use an externally-run discovery
0000000000000000000000000000000000000000;;	# service, but you can use your own. See the etcd docs for more:
0000000000000000000000000000000000000000;;	# https://github.com/coreos/etcd/blob/v2.0.13/Documentation/clustering.md
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	script_root=`dirname "${BASH_SOURCE}"`
0000000000000000000000000000000000000000;;	source $script_root/env.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	replicas=${ETCD_REPLICAS:-3}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CELLS=${CELLS:-'test'}
0000000000000000000000000000000000000000;;	cells=`echo $CELLS | tr ',' ' '`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for cell in 'global' $cells; do
0000000000000000000000000000000000000000;;	  # Generate a discovery token.
0000000000000000000000000000000000000000;;	  echo "Generating discovery token for $cell cell..."
0000000000000000000000000000000000000000;;	  discovery=$(curl -sL https://discovery.etcd.io/new?size=$replicas)
0000000000000000000000000000000000000000;;	  if [ -z "$discovery" ]; then
0000000000000000000000000000000000000000;;	    echo "Failed to get etcd discovery token for cell '$cell'."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Create the client service, which will load-balance across all replicas.
0000000000000000000000000000000000000000;;	  echo "Creating etcd service for $cell cell..."
0000000000000000000000000000000000000000;;	  cat etcd-service-template.yaml | \
0000000000000000000000000000000000000000;;	    sed -e "s/{{cell}}/$cell/g" | \
0000000000000000000000000000000000000000;;	    $KUBECTL create -f -
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Expand template variables
0000000000000000000000000000000000000000;;	  sed_script=""
0000000000000000000000000000000000000000;;	  for var in cell discovery replicas; do
0000000000000000000000000000000000000000;;	    sed_script+="s,{{$var}},${!var},g;"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Create the replication controller.
0000000000000000000000000000000000000000;;	  echo "Creating etcd replicationcontroller for $cell cell..."
0000000000000000000000000000000000000000;;	  cat etcd-controller-template.yaml | sed -e "$sed_script" | $KUBECTL create -f -
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
