0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This is an include file used by the other scripts in this directory.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Most clusters will just be accessed with 'kubectl' on $PATH.
0000000000000000000000000000000000000000;;	# However, some might require a different command. For example, GKE required
0000000000000000000000000000000000000000;;	# KUBECTL='gcloud beta container kubectl' for a while. Now that most of our
0000000000000000000000000000000000000000;;	# use cases just need KUBECTL=kubectl, we'll make that the default.
0000000000000000000000000000000000000000;;	KUBECTL=${KUBECTL:-kubectl}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This should match the nodePort in vtctld-service.yaml
0000000000000000000000000000000000000000;;	VTCTLD_PORT=${VTCTLD_PORT:-30001}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Customizable parameters
0000000000000000000000000000000000000000;;	SHARDS=${SHARDS:-'-80,80-'}
0000000000000000000000000000000000000000;;	TABLETS_PER_SHARD=${TABLETS_PER_SHARD:-2}
0000000000000000000000000000000000000000;;	RDONLY_COUNT=${RDONLY_COUNT:-0}
0000000000000000000000000000000000000000;;	MAX_TASK_WAIT_RETRIES=${MAX_TASK_WAIT_RETRIES:-300}
0000000000000000000000000000000000000000;;	MAX_VTTABLET_TOPO_WAIT_RETRIES=${MAX_VTTABLET_TOPO_WAIT_RETRIES:-180}
0000000000000000000000000000000000000000;;	VTTABLET_TEMPLATE=${VTTABLET_TEMPLATE:-'vttablet-pod-template.yaml'}
0000000000000000000000000000000000000000;;	VTGATE_TEMPLATE=${VTGATE_TEMPLATE:-'vtgate-controller-template.yaml'}
0000000000000000000000000000000000000000;;	VTGATE_COUNT=${VTGATE_COUNT:-1}
0000000000000000000000000000000000000000;;	CELLS=${CELLS:-'test'}
0000000000000000000000000000000000000000;;	ETCD_REPLICAS=3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	VTGATE_REPLICAS=$VTGATE_COUNT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Get the ExternalIP of any node.
0000000000000000000000000000000000000000;;	get_node_ip() {
0000000000000000000000000000000000000000;;	  $KUBECTL get -o template -t '{{range (index .items 0).status.addresses}}{{if eq .type "ExternalIP"}}{{.address}}{{end}}{{end}}' nodes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Try to find vtctld address if not provided.
0000000000000000000000000000000000000000;;	get_vtctld_addr() {
0000000000000000000000000000000000000000;;	  if [ -z "$VTCTLD_ADDR" ]; then
0000000000000000000000000000000000000000;;	    node_ip=$(get_node_ip)
0000000000000000000000000000000000000000;;	    if [ -n "$node_ip" ]; then
0000000000000000000000000000000000000000;;	      VTCTLD_ADDR="$node_ip:$VTCTLD_PORT"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "$VTCTLD_ADDR"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	config_file=`dirname "${BASH_SOURCE}"`/config.sh
0000000000000000000000000000000000000000;;	if [ ! -f $config_file ]; then
0000000000000000000000000000000000000000;;	  echo "Please run ./configure.sh first to generate config.sh file."
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source $config_file
0000000000000000000000000000000000000000;;	
