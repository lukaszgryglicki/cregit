0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
bb277ca29f6ef7714a70f851154274aad6a1bf00;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A tiny web server for viewing the environment kubernetes creates for your
0000000000000000000000000000000000000000;;	// containers. It exposes the filesystem and environment variables via http
0000000000000000000000000000000000000000;;	// server.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		port = flag.Int("port", 8080, "Port number to serve at.")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;		hostname, err := os.Hostname()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("Error getting hostname: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		links := []struct {
0000000000000000000000000000000000000000;;			link, desc string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"/fs/", "Complete file system as seen by this container."},
0000000000000000000000000000000000000000;;			{"/vars/", "Environment variables as seen by this container."},
0000000000000000000000000000000000000000;;			{"/hostname/", "Hostname as seen by this container."},
0000000000000000000000000000000000000000;;			{"/dns?q=google.com", "Explore DNS records seen by this container."},
0000000000000000000000000000000000000000;;			{"/quit", "Cause this container to exit."},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "<b> Kubernetes environment explorer </b><br/><br/>")
0000000000000000000000000000000000000000;;			for _, v := range links {
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, `<a href="%v">%v: %v</a><br/>`, v.link, v.link, v.desc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		http.Handle("/fs/", http.StripPrefix("/fs/", http.FileServer(http.Dir("/"))))
0000000000000000000000000000000000000000;;		http.HandleFunc("/vars/", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			for _, v := range os.Environ() {
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, "%v\n", v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		http.HandleFunc("/hostname/", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, hostname)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		http.HandleFunc("/quit", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			os.Exit(0)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		http.HandleFunc("/dns", dns)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go log.Fatal(http.ListenAndServe(fmt.Sprintf("0.0.0.0:%d", *port), nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func dns(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		q := r.URL.Query().Get("q")
0000000000000000000000000000000000000000;;		// Note that the below is NOT safe from input attacks, but that's OK
0000000000000000000000000000000000000000;;		// because this is just for debugging.
0000000000000000000000000000000000000000;;		fmt.Fprintf(w, `<html><body>
0000000000000000000000000000000000000000;;	<form action="/dns">
0000000000000000000000000000000000000000;;	<input name="q" type="text" value="%v"></input>
0000000000000000000000000000000000000000;;	<button type="submit">Lookup</button>
0000000000000000000000000000000000000000;;	</form>
0000000000000000000000000000000000000000;;	<br/><br/><pre>`, q)
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			res, err := net.LookupNS(q)
0000000000000000000000000000000000000000;;			spew.Fprintf(w, "LookupNS(%v):\nResult: %#v\nError: %v\n\n", q, res, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			res, err := net.LookupTXT(q)
0000000000000000000000000000000000000000;;			spew.Fprintf(w, "LookupTXT(%v):\nResult: %#v\nError: %v\n\n", q, res, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			cname, res, err := net.LookupSRV("", "", q)
0000000000000000000000000000000000000000;;			spew.Fprintf(w, `LookupSRV("", "", %v):
0000000000000000000000000000000000000000;;	cname: %v
0000000000000000000000000000000000000000;;	Result: %#v
0000000000000000000000000000000000000000;;	Error: %v
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`, q, cname, res, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			res, err := net.LookupHost(q)
0000000000000000000000000000000000000000;;			spew.Fprintf(w, "LookupHost(%v):\nResult: %#v\nError: %v\n\n", q, res, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			res, err := net.LookupIP(q)
0000000000000000000000000000000000000000;;			spew.Fprintf(w, "LookupIP(%v):\nResult: %#v\nError: %v\n\n", q, res, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			res, err := net.LookupMX(q)
0000000000000000000000000000000000000000;;			spew.Fprintf(w, "LookupMX(%v):\nResult: %#v\nError: %v\n\n", q, res, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Fprintf(w, `</pre>
0000000000000000000000000000000000000000;;	</body>
0000000000000000000000000000000000000000;;	</html>`)
0000000000000000000000000000000000000000;;	}
