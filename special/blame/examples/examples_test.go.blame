0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
264342f7615c8bae15212e80dcccf31c14ce47ca;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package examples_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/yaml"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;		appsvalidation "k8s.io/kubernetes/pkg/apis/apps/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		expvalidation "k8s.io/kubernetes/pkg/apis/extensions/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/capabilities"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/batch/job"
0000000000000000000000000000000000000000;;		schedulerapi "k8s.io/kubernetes/plugin/pkg/scheduler/api"
0000000000000000000000000000000000000000;;		schedulerapilatest "k8s.io/kubernetes/plugin/pkg/scheduler/api/latest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateObject(obj runtime.Object) (errors field.ErrorList) {
0000000000000000000000000000000000000000;;		switch t := obj.(type) {
0000000000000000000000000000000000000000;;		case *api.ReplicationController:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidateReplicationController(t)
0000000000000000000000000000000000000000;;		case *api.ReplicationControllerList:
0000000000000000000000000000000000000000;;			for i := range t.Items {
0000000000000000000000000000000000000000;;				errors = append(errors, validateObject(&t.Items[i])...)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *api.Service:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidateService(t)
0000000000000000000000000000000000000000;;		case *api.ServiceList:
0000000000000000000000000000000000000000;;			for i := range t.Items {
0000000000000000000000000000000000000000;;				errors = append(errors, validateObject(&t.Items[i])...)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *api.Pod:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidatePod(t)
0000000000000000000000000000000000000000;;		case *api.PodList:
0000000000000000000000000000000000000000;;			for i := range t.Items {
0000000000000000000000000000000000000000;;				errors = append(errors, validateObject(&t.Items[i])...)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *api.PersistentVolume:
0000000000000000000000000000000000000000;;			errors = validation.ValidatePersistentVolume(t)
0000000000000000000000000000000000000000;;		case *api.PersistentVolumeClaim:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidatePersistentVolumeClaim(t)
0000000000000000000000000000000000000000;;		case *api.PodTemplate:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidatePodTemplate(t)
0000000000000000000000000000000000000000;;		case *api.Endpoints:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidateEndpoints(t)
0000000000000000000000000000000000000000;;		case *api.Namespace:
0000000000000000000000000000000000000000;;			errors = validation.ValidateNamespace(t)
0000000000000000000000000000000000000000;;		case *api.Secret:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidateSecret(t)
0000000000000000000000000000000000000000;;		case *api.LimitRange:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidateLimitRange(t)
0000000000000000000000000000000000000000;;		case *api.ResourceQuota:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = validation.ValidateResourceQuota(t)
0000000000000000000000000000000000000000;;		case *extensions.Deployment:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = expvalidation.ValidateDeployment(t)
0000000000000000000000000000000000000000;;		case *batch.Job:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Job needs generateSelector called before validation, and job.Validate does this.
0000000000000000000000000000000000000000;;			// See: https://github.com/kubernetes/kubernetes/issues/20951#issuecomment-187787040
0000000000000000000000000000000000000000;;			t.ObjectMeta.UID = types.UID("fakeuid")
0000000000000000000000000000000000000000;;			errors = job.Strategy.Validate(nil, t)
0000000000000000000000000000000000000000;;		case *extensions.Ingress:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = expvalidation.ValidateIngress(t)
0000000000000000000000000000000000000000;;		case *extensions.DaemonSet:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = expvalidation.ValidateDaemonSet(t)
0000000000000000000000000000000000000000;;		case *apps.StatefulSet:
0000000000000000000000000000000000000000;;			if t.Namespace == "" {
0000000000000000000000000000000000000000;;				t.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = appsvalidation.ValidateStatefulSet(t)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			errors = field.ErrorList{}
0000000000000000000000000000000000000000;;			errors = append(errors, field.InternalError(field.NewPath(""), fmt.Errorf("no validation defined for %#v", obj)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func walkJSONFiles(inDir string, fn func(name, path string, data []byte)) error {
0000000000000000000000000000000000000000;;		return filepath.Walk(inDir, func(path string, info os.FileInfo, err error) error {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if info.IsDir() && path != inDir {
0000000000000000000000000000000000000000;;				return filepath.SkipDir
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			file := filepath.Base(path)
0000000000000000000000000000000000000000;;			if ext := filepath.Ext(file); ext == ".json" || ext == ".yaml" {
0000000000000000000000000000000000000000;;				glog.Infof("Testing %s", path)
0000000000000000000000000000000000000000;;				data, err := ioutil.ReadFile(path)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				name := strings.TrimSuffix(file, ext)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if ext == ".yaml" {
0000000000000000000000000000000000000000;;					out, err := yaml.ToJSON(data)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return fmt.Errorf("%s: %v", path, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					data = out
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				fn(name, path, data)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExampleObjectSchemas(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := map[string]map[string]runtime.Object{
0000000000000000000000000000000000000000;;			"../examples/guestbook": {
0000000000000000000000000000000000000000;;				"frontend-deployment":     &extensions.Deployment{},
0000000000000000000000000000000000000000;;				"redis-slave-deployment":  &extensions.Deployment{},
0000000000000000000000000000000000000000;;				"redis-master-deployment": &extensions.Deployment{},
0000000000000000000000000000000000000000;;				"frontend-service":        &api.Service{},
0000000000000000000000000000000000000000;;				"redis-master-service":    &api.Service{},
0000000000000000000000000000000000000000;;				"redis-slave-service":     &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/guestbook/legacy": {
0000000000000000000000000000000000000000;;				"frontend-controller":     &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"redis-slave-controller":  &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"redis-master-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/guestbook-go": {
0000000000000000000000000000000000000000;;				"guestbook-controller":    &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"redis-slave-controller":  &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"redis-master-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"guestbook-service":       &api.Service{},
0000000000000000000000000000000000000000;;				"redis-master-service":    &api.Service{},
0000000000000000000000000000000000000000;;				"redis-slave-service":     &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/iscsi": {
0000000000000000000000000000000000000000;;				"chap-secret": &api.Secret{},
0000000000000000000000000000000000000000;;				"iscsi":       &api.Pod{},
0000000000000000000000000000000000000000;;				"iscsi-chap":  &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/glusterfs": {
0000000000000000000000000000000000000000;;				"glusterfs-pod":       &api.Pod{},
0000000000000000000000000000000000000000;;				"glusterfs-endpoints": &api.Endpoints{},
0000000000000000000000000000000000000000;;				"glusterfs-service":   &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples": {
0000000000000000000000000000000000000000;;				"scheduler-policy-config":               &schedulerapi.Policy{},
0000000000000000000000000000000000000000;;				"scheduler-policy-config-with-extender": &schedulerapi.Policy{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/rbd/secret": {
0000000000000000000000000000000000000000;;				"ceph-secret": &api.Secret{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/rbd": {
0000000000000000000000000000000000000000;;				"rbd":             &api.Pod{},
0000000000000000000000000000000000000000;;				"rbd-with-secret": &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/storage/cassandra": {
0000000000000000000000000000000000000000;;				"cassandra-daemonset":   &extensions.DaemonSet{},
0000000000000000000000000000000000000000;;				"cassandra-controller":  &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"cassandra-service":     &api.Service{},
0000000000000000000000000000000000000000;;				"cassandra-statefulset": &apps.StatefulSet{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/cluster-dns": {
0000000000000000000000000000000000000000;;				"dns-backend-rc":      &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"dns-backend-service": &api.Service{},
0000000000000000000000000000000000000000;;				"dns-frontend-pod":    &api.Pod{},
0000000000000000000000000000000000000000;;				"namespace-dev":       &api.Namespace{},
0000000000000000000000000000000000000000;;				"namespace-prod":      &api.Namespace{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/elasticsearch": {
0000000000000000000000000000000000000000;;				"es-rc":           &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"es-svc":          &api.Service{},
0000000000000000000000000000000000000000;;				"service-account": nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/explorer": {
0000000000000000000000000000000000000000;;				"pod": &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/storage/hazelcast": {
0000000000000000000000000000000000000000;;				"hazelcast-deployment": &extensions.Deployment{},
0000000000000000000000000000000000000000;;				"hazelcast-service":    &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/meteor": {
0000000000000000000000000000000000000000;;				"meteor-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"meteor-service":    &api.Service{},
0000000000000000000000000000000000000000;;				"mongo-pod":         &api.Pod{},
0000000000000000000000000000000000000000;;				"mongo-service":     &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/mysql-wordpress-pd": {
0000000000000000000000000000000000000000;;				"gce-volumes":          &api.PersistentVolume{},
0000000000000000000000000000000000000000;;				"local-volumes":        &api.PersistentVolume{},
0000000000000000000000000000000000000000;;				"mysql-deployment":     &api.Service{},
0000000000000000000000000000000000000000;;				"wordpress-deployment": &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/nfs": {
0000000000000000000000000000000000000000;;				"nfs-busybox-rc":     &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"nfs-server-rc":      &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"nfs-server-service": &api.Service{},
0000000000000000000000000000000000000000;;				"nfs-pv":             &api.PersistentVolume{},
0000000000000000000000000000000000000000;;				"nfs-pvc":            &api.PersistentVolumeClaim{},
0000000000000000000000000000000000000000;;				"nfs-web-rc":         &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"nfs-web-service":    &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/openshift-origin": {
0000000000000000000000000000000000000000;;				"openshift-origin-namespace": &api.Namespace{},
0000000000000000000000000000000000000000;;				"openshift-controller":       &extensions.Deployment{},
0000000000000000000000000000000000000000;;				"openshift-service":          &api.Service{},
0000000000000000000000000000000000000000;;				"etcd-controller":            &extensions.Deployment{},
0000000000000000000000000000000000000000;;				"etcd-service":               &api.Service{},
0000000000000000000000000000000000000000;;				"etcd-discovery-controller":  &extensions.Deployment{},
0000000000000000000000000000000000000000;;				"etcd-discovery-service":     &api.Service{},
0000000000000000000000000000000000000000;;				"secret":                     nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/phabricator": {
0000000000000000000000000000000000000000;;				"phabricator-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"phabricator-service":    &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/storage/redis": {
0000000000000000000000000000000000000000;;				"redis-controller":          &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"redis-master":              &api.Pod{},
0000000000000000000000000000000000000000;;				"redis-sentinel-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"redis-sentinel-service":    &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/storage/rethinkdb": {
0000000000000000000000000000000000000000;;				"admin-pod":      &api.Pod{},
0000000000000000000000000000000000000000;;				"admin-service":  &api.Service{},
0000000000000000000000000000000000000000;;				"driver-service": &api.Service{},
0000000000000000000000000000000000000000;;				"rc":             &api.ReplicationController{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/spark": {
0000000000000000000000000000000000000000;;				"namespace-spark-cluster":   &api.Namespace{},
0000000000000000000000000000000000000000;;				"spark-master-controller":   &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"spark-master-service":      &api.Service{},
0000000000000000000000000000000000000000;;				"spark-ui-proxy-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"spark-ui-proxy-service":    &api.Service{},
0000000000000000000000000000000000000000;;				"spark-worker-controller":   &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"zeppelin-controller":       &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"zeppelin-service":          &api.Service{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/spark/spark-gluster": {
0000000000000000000000000000000000000000;;				"spark-master-service":    &api.Service{},
0000000000000000000000000000000000000000;;				"spark-master-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"spark-worker-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"glusterfs-endpoints":     &api.Endpoints{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/storm": {
0000000000000000000000000000000000000000;;				"storm-nimbus-service":    &api.Service{},
0000000000000000000000000000000000000000;;				"storm-nimbus":            &api.Pod{},
0000000000000000000000000000000000000000;;				"storm-worker-controller": &api.ReplicationController{},
0000000000000000000000000000000000000000;;				"zookeeper-service":       &api.Service{},
0000000000000000000000000000000000000000;;				"zookeeper":               &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/cephfs/": {
0000000000000000000000000000000000000000;;				"cephfs":             &api.Pod{},
0000000000000000000000000000000000000000;;				"cephfs-with-secret": &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/fibre_channel": {
0000000000000000000000000000000000000000;;				"fc": &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/javaweb-tomcat-sidecar": {
0000000000000000000000000000000000000000;;				"javaweb":   &api.Pod{},
0000000000000000000000000000000000000000;;				"javaweb-2": &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/azure_file": {
0000000000000000000000000000000000000000;;				"azure": &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"../examples/volumes/azure_disk": {
0000000000000000000000000000000000000000;;				"azure": &api.Pod{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capabilities.SetForTests(capabilities.Capabilities{
0000000000000000000000000000000000000000;;			AllowPrivileged: true,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for path, expected := range cases {
0000000000000000000000000000000000000000;;			tested := 0
0000000000000000000000000000000000000000;;			err := walkJSONFiles(path, func(name, path string, data []byte) {
0000000000000000000000000000000000000000;;				expectedType, found := expected[name]
0000000000000000000000000000000000000000;;				if !found {
0000000000000000000000000000000000000000;;					t.Errorf("%s: %s does not have a test case defined", path, name)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				tested++
0000000000000000000000000000000000000000;;				if expectedType == nil {
0000000000000000000000000000000000000000;;					t.Logf("skipping : %s/%s\n", path, name)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if strings.Contains(name, "scheduler-policy-config") {
0000000000000000000000000000000000000000;;					if err := runtime.DecodeInto(schedulerapilatest.Codec, data, expectedType); err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("%s did not decode correctly: %v\n%s", path, err, string(data))
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					//TODO: Add validate method for &schedulerapi.Policy
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					codec, err := testapi.GetCodecForObject(expectedType)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("Could not get codec for %s: %s", expectedType, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if err := runtime.DecodeInto(codec, data, expectedType); err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("%s did not decode correctly: %v\n%s", path, err, string(data))
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if errors := validateObject(expectedType); len(errors) > 0 {
0000000000000000000000000000000000000000;;						t.Errorf("%s did not validate correctly: %v", path, errors)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Expected no error, Got %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tested != len(expected) {
0000000000000000000000000000000000000000;;				t.Errorf("Directory %v: Expected %d examples, Got %d", path, len(expected), tested)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This regex is tricky, but it works.  For future me, here is the decode:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Flags: (?ms) = multiline match, allow . to match \n
0000000000000000000000000000000000000000;;	// 1) Look for a line that starts with ``` (a markdown code block)
0000000000000000000000000000000000000000;;	// 2) (?: ... ) = non-capturing group
0000000000000000000000000000000000000000;;	// 3) (P<name>) = capture group as "name"
0000000000000000000000000000000000000000;;	// 4) Look for #1 followed by either:
0000000000000000000000000000000000000000;;	// 4a)    "yaml" followed by any word-characters followed by a newline (e.g. ```yamlfoo\n)
0000000000000000000000000000000000000000;;	// 4b)    "any word-characters followed by a newline (e.g. ```json\n)
0000000000000000000000000000000000000000;;	// 5) Look for either:
0000000000000000000000000000000000000000;;	// 5a)    #4a followed by one or more characters (non-greedy)
0000000000000000000000000000000000000000;;	// 5b)    #4b followed by { followed by one or more characters (non-greedy) followed by }
0000000000000000000000000000000000000000;;	// 6) Look for #5 followed by a newline followed by ``` (end of the code block)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This could probably be simplified, but is already too delicate.  Before any
0000000000000000000000000000000000000000;;	// real changes, we should have a testscase that just tests this regex.
0000000000000000000000000000000000000000;;	var sampleRegexp = regexp.MustCompile("(?ms)^```(?:(?P<type>yaml)\\w*\\n(?P<content>.+?)|\\w*\\n(?P<content>\\{.+?\\}))\\n^```")
0000000000000000000000000000000000000000;;	var subsetRegexp = regexp.MustCompile("(?ms)\\.{3}")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadme(t *testing.T) {
0000000000000000000000000000000000000000;;		paths := []struct {
0000000000000000000000000000000000000000;;			file         string
0000000000000000000000000000000000000000;;			expectedType []runtime.Object
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"../README.md", []runtime.Object{&api.Pod{}}},
0000000000000000000000000000000000000000;;			{"../examples/volumes/iscsi/README.md", []runtime.Object{&api.Secret{}}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, path := range paths {
0000000000000000000000000000000000000000;;			data, err := ioutil.ReadFile(path.file)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to read file %s: %v", path, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			matches := sampleRegexp.FindAllStringSubmatch(string(data), -1)
0000000000000000000000000000000000000000;;			if matches == nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ix := 0
0000000000000000000000000000000000000000;;			for _, match := range matches {
0000000000000000000000000000000000000000;;				var content, subtype string
0000000000000000000000000000000000000000;;				for i, name := range sampleRegexp.SubexpNames() {
0000000000000000000000000000000000000000;;					if name == "type" {
0000000000000000000000000000000000000000;;						subtype = match[i]
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if name == "content" && match[i] != "" {
0000000000000000000000000000000000000000;;						content = match[i]
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if subtype == "yaml" && subsetRegexp.FindString(content) != "" {
0000000000000000000000000000000000000000;;					t.Logf("skipping (%s): \n%s", subtype, content)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				var expectedType runtime.Object
0000000000000000000000000000000000000000;;				if len(path.expectedType) == 1 {
0000000000000000000000000000000000000000;;					expectedType = path.expectedType[0]
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					expectedType = path.expectedType[ix]
0000000000000000000000000000000000000000;;					ix++
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				json, err := yaml.ToJSON([]byte(content))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s could not be converted to JSON: %v\n%s", path, err, string(content))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := runtime.DecodeInto(testapi.Default.Codec(), json, expectedType); err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s did not decode correctly: %v\n%s", path, err, string(content))
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if errors := validateObject(expectedType); len(errors) > 0 {
0000000000000000000000000000000000000000;;					t.Errorf("%s did not validate correctly: %v", path, errors)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				_, err = runtime.Encode(testapi.Default.Codec(), expectedType)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Could not encode object: %v", err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
