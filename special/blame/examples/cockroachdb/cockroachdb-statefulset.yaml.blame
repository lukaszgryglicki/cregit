0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Service
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  # This service is meant to be used by clients of the database. It exposes a ClusterIP that will
0000000000000000000000000000000000000000;;	  # automatically load balance connections to the different database pods.
0000000000000000000000000000000000000000;;	  name: cockroachdb-public
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    app: cockroachdb
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  ports:
0000000000000000000000000000000000000000;;	  # The main port, served by gRPC, serves Postgres-flavor SQL, internode
0000000000000000000000000000000000000000;;	  # traffic and the cli.
0000000000000000000000000000000000000000;;	  - port: 26257
0000000000000000000000000000000000000000;;	    targetPort: 26257
0000000000000000000000000000000000000000;;	    name: grpc
0000000000000000000000000000000000000000;;	  # The secondary port serves the UI as well as health and debug endpoints.
0000000000000000000000000000000000000000;;	  - port: 8080
0000000000000000000000000000000000000000;;	    targetPort: 8080
0000000000000000000000000000000000000000;;	    name: http
0000000000000000000000000000000000000000;;	  selector:
0000000000000000000000000000000000000000;;	    app: cockroachdb
0000000000000000000000000000000000000000;;	---
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Service
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  # This service only exists to create DNS entries for each pod in the stateful
0000000000000000000000000000000000000000;;	  # set such that they can resolve each other's IP addresses. It does not
0000000000000000000000000000000000000000;;	  # create a load-balanced ClusterIP and should not be used directly by clients
0000000000000000000000000000000000000000;;	  # in most circumstances.
0000000000000000000000000000000000000000;;	  name: cockroachdb
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    app: cockroachdb
0000000000000000000000000000000000000000;;	  annotations:
0000000000000000000000000000000000000000;;	    # This is needed to make the peer-finder work properly and to help avoid
0000000000000000000000000000000000000000;;	    # edge cases where instance 0 comes up after losing its data and needs to
0000000000000000000000000000000000000000;;	    # decide whether it should create a new cluster or try to join an existing
0000000000000000000000000000000000000000;;	    # one. If it creates a new cluster when it should have joined an existing
0000000000000000000000000000000000000000;;	    # one, we'd end up with two separate clusters listening at the same service
0000000000000000000000000000000000000000;;	    # endpoint, which would be very bad.
0000000000000000000000000000000000000000;;	    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
0000000000000000000000000000000000000000;;	    # Enable automatic monitoring of all instances when Prometheus is running in the cluster.
0000000000000000000000000000000000000000;;	    prometheus.io/scrape: "true"
0000000000000000000000000000000000000000;;	    prometheus.io/path: "_status/vars"
0000000000000000000000000000000000000000;;	    prometheus.io/port: "8080"
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  ports:
0000000000000000000000000000000000000000;;	  - port: 26257
0000000000000000000000000000000000000000;;	    targetPort: 26257
0000000000000000000000000000000000000000;;	    name: grpc
0000000000000000000000000000000000000000;;	  - port: 8080
0000000000000000000000000000000000000000;;	    targetPort: 8080
0000000000000000000000000000000000000000;;	    name: http
0000000000000000000000000000000000000000;;	  clusterIP: None
0000000000000000000000000000000000000000;;	  selector:
0000000000000000000000000000000000000000;;	    app: cockroachdb
0000000000000000000000000000000000000000;;	---
0000000000000000000000000000000000000000;;	apiVersion: policy/v1beta1
0000000000000000000000000000000000000000;;	kind: PodDisruptionBudget
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: cockroachdb-budget
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    app: cockroachdb
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  selector:
0000000000000000000000000000000000000000;;	    matchLabels:
0000000000000000000000000000000000000000;;	      app: cockroachdb
0000000000000000000000000000000000000000;;	  minAvailable: 67%
0000000000000000000000000000000000000000;;	---
0000000000000000000000000000000000000000;;	apiVersion: apps/v1beta1
0000000000000000000000000000000000000000;;	kind: StatefulSet
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: cockroachdb
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  serviceName: "cockroachdb"
0000000000000000000000000000000000000000;;	  replicas: 3
0000000000000000000000000000000000000000;;	  template:
0000000000000000000000000000000000000000;;	    metadata:
0000000000000000000000000000000000000000;;	      labels:
0000000000000000000000000000000000000000;;	        app: cockroachdb
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      # Init containers are run only once in the lifetime of a pod, before
0000000000000000000000000000000000000000;;	      # it's started up for the first time. It has to exit successfully
0000000000000000000000000000000000000000;;	      # before the pod's main containers are allowed to start.
0000000000000000000000000000000000000000;;	      # This particular init container does a DNS lookup for other pods in
0000000000000000000000000000000000000000;;	      # the set to help determine whether or not a cluster already exists.
0000000000000000000000000000000000000000;;	      # If any other pods exist, it creates a file in the cockroach-data
0000000000000000000000000000000000000000;;	      # directory to pass that information along to the primary container that
0000000000000000000000000000000000000000;;	      # has to decide what command-line flags to use when starting CockroachDB.
0000000000000000000000000000000000000000;;	      # This only matters when a pod's persistent volume is empty - if it has
0000000000000000000000000000000000000000;;	      # data from a previous execution, that data will always be used.
0000000000000000000000000000000000000000;;	      #
0000000000000000000000000000000000000000;;	      # If your Kubernetes cluster uses a custom DNS domain, you will have
0000000000000000000000000000000000000000;;	      # to add an additional arg to this pod: "-domain=<your-custom-domain>"
0000000000000000000000000000000000000000;;	      initContainers:
0000000000000000000000000000000000000000;;	      - name: bootstrap
0000000000000000000000000000000000000000;;	        image: cockroachdb/cockroach-k8s-init:0.2
0000000000000000000000000000000000000000;;	        imagePullPolicy: IfNotPresent
0000000000000000000000000000000000000000;;	        args:
0000000000000000000000000000000000000000;;	        - "-on-start=/on-start.sh"
0000000000000000000000000000000000000000;;	        - "-service=cockroachdb"
0000000000000000000000000000000000000000;;	        env:
0000000000000000000000000000000000000000;;	        - name: POD_NAMESPACE
0000000000000000000000000000000000000000;;	          valueFrom:
0000000000000000000000000000000000000000;;	            fieldRef:
0000000000000000000000000000000000000000;;	              fieldPath: metadata.namespace
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - name: datadir
0000000000000000000000000000000000000000;;	          mountPath: "/cockroach/cockroach-data"
0000000000000000000000000000000000000000;;	      affinity:
0000000000000000000000000000000000000000;;	        podAntiAffinity:
0000000000000000000000000000000000000000;;	          preferredDuringSchedulingIgnoredDuringExecution:
0000000000000000000000000000000000000000;;	          - weight: 100
0000000000000000000000000000000000000000;;	            podAffinityTerm:
0000000000000000000000000000000000000000;;	              labelSelector:
0000000000000000000000000000000000000000;;	                matchExpressions:
0000000000000000000000000000000000000000;;	                - key: app
0000000000000000000000000000000000000000;;	                  operator: In
0000000000000000000000000000000000000000;;	                  values:
0000000000000000000000000000000000000000;;	                  - cockroachdb
0000000000000000000000000000000000000000;;	              topologyKey: kubernetes.io/hostname
0000000000000000000000000000000000000000;;	      containers:
0000000000000000000000000000000000000000;;	      - name: cockroachdb
0000000000000000000000000000000000000000;;	        image: cockroachdb/cockroach:v1.0.1
0000000000000000000000000000000000000000;;	        imagePullPolicy: IfNotPresent
0000000000000000000000000000000000000000;;	        ports:
0000000000000000000000000000000000000000;;	        - containerPort: 26257
0000000000000000000000000000000000000000;;	          name: grpc
0000000000000000000000000000000000000000;;	        - containerPort: 8080
0000000000000000000000000000000000000000;;	          name: http
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - name: datadir
0000000000000000000000000000000000000000;;	          mountPath: /cockroach/cockroach-data
0000000000000000000000000000000000000000;;	        command:
0000000000000000000000000000000000000000;;	          - "/bin/bash"
0000000000000000000000000000000000000000;;	          - "-ecx"
0000000000000000000000000000000000000000;;	          - |
0000000000000000000000000000000000000000;;	            # The use of qualified `hostname -f` is crucial:
0000000000000000000000000000000000000000;;	            # Other nodes aren't able to look up the unqualified hostname.
0000000000000000000000000000000000000000;;	            CRARGS=("start" "--logtostderr" "--insecure" "--host" "$(hostname -f)" "--http-host" "0.0.0.0")
0000000000000000000000000000000000000000;;	            # We only want to initialize a new cluster (by omitting the join flag)
0000000000000000000000000000000000000000;;	            # if we're sure that we're the first node (i.e. index 0) and that
0000000000000000000000000000000000000000;;	            # there aren't any other nodes running as part of the cluster that
0000000000000000000000000000000000000000;;	            # this is supposed to be a part of (which indicates that a cluster
0000000000000000000000000000000000000000;;	            # already exists and we should make sure not to create a new one).
0000000000000000000000000000000000000000;;	            # It's fine to run without --join on a restart if there aren't any
0000000000000000000000000000000000000000;;	            # other nodes.
0000000000000000000000000000000000000000;;	            if [ ! "$(hostname)" == "cockroachdb-0" ] || \
0000000000000000000000000000000000000000;;	               [ -e "/cockroach/cockroach-data/cluster_exists_marker" ]
0000000000000000000000000000000000000000;;	            then
0000000000000000000000000000000000000000;;	              # We don't join cockroachdb in order to avoid a node attempting
0000000000000000000000000000000000000000;;	              # to join itself, which currently doesn't work
0000000000000000000000000000000000000000;;	              # (https://github.com/cockroachdb/cockroach/issues/9625).
0000000000000000000000000000000000000000;;	              CRARGS+=("--join" "cockroachdb-public")
0000000000000000000000000000000000000000;;	            fi
0000000000000000000000000000000000000000;;	            exec /cockroach/cockroach ${CRARGS[*]}
0000000000000000000000000000000000000000;;	      # No pre-stop hook is required, a SIGTERM plus some time is all that's
0000000000000000000000000000000000000000;;	      # needed for graceful shutdown of a node.
0000000000000000000000000000000000000000;;	      terminationGracePeriodSeconds: 60
0000000000000000000000000000000000000000;;	      volumes:
0000000000000000000000000000000000000000;;	      - name: datadir
0000000000000000000000000000000000000000;;	        persistentVolumeClaim:
0000000000000000000000000000000000000000;;	          claimName: datadir
0000000000000000000000000000000000000000;;	  volumeClaimTemplates:
0000000000000000000000000000000000000000;;	  - metadata:
0000000000000000000000000000000000000000;;	      name: datadir
0000000000000000000000000000000000000000;;	      annotations:
0000000000000000000000000000000000000000;;	        volume.alpha.kubernetes.io/storage-class: anything
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      accessModes:
0000000000000000000000000000000000000000;;	        - "ReadWriteOnce"
0000000000000000000000000000000000000000;;	      resources:
0000000000000000000000000000000000000000;;	        requests:
0000000000000000000000000000000000000000;;	          storage: 1Gi
