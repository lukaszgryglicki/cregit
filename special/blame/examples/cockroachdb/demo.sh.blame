0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -euo pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function sql() {
0000000000000000000000000000000000000000;;	  # TODO(knz): Why does the more idiomatic read from stdin not produce any
0000000000000000000000000000000000000000;;	  # output?
0000000000000000000000000000000000000000;;	  kubectl exec "cockroachdb-${1}" -- /cockroach/cockroach sql \
0000000000000000000000000000000000000000;;	      --host "cockroachdb-${1}.cockroachdb" \
0000000000000000000000000000000000000000;;	      --insecure \
0000000000000000000000000000000000000000;;	      -e "$(cat /dev/stdin)"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function kill() {
0000000000000000000000000000000000000000;;	  ! kubectl exec -t "cockroachdb-${1}" -- /bin/bash -c "while true; do kill 1; done" &> /dev/null
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create database on second node (idempotently for convenience).
0000000000000000000000000000000000000000;;	cat <<EOF | sql 1
0000000000000000000000000000000000000000;;	CREATE DATABASE IF NOT EXISTS foo;
0000000000000000000000000000000000000000;;	CREATE TABLE IF NOT EXISTS foo.bar (k STRING PRIMARY KEY, v STRING); 
0000000000000000000000000000000000000000;;	UPSERT INTO foo.bar VALUES ('Kuber', 'netes'), ('Cockroach', 'DB');
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Kill the node we just created the table on.
0000000000000000000000000000000000000000;;	kill 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Read the data from all other nodes (we could also read from the one we just
0000000000000000000000000000000000000000;;	# killed, but it's awkward to wait for it to respawn).
0000000000000000000000000000000000000000;;	for i in 0 2 3 4; do
0000000000000000000000000000000000000000;;	  cat <<EOF | sql "${i}"
0000000000000000000000000000000000000000;;	SELECT CONCAT(k, v) FROM foo.bar;
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	done
