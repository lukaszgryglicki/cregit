0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Creates resources from the example, assumed to be run from Kubernetes repo root
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	echo "===> Initializing:"
0000000000000000000000000000000000000000;;	if [ ! $(which python) ]
0000000000000000000000000000000000000000;;	then
0000000000000000000000000000000000000000;;		echo "Python is a prerequisite for running this script. Please install Python and try running again."
0000000000000000000000000000000000000000;;		exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ ! $(which gcloud) ]
0000000000000000000000000000000000000000;;	then
0000000000000000000000000000000000000000;;		echo "gcloud is a prerequisite for running this script. Please install gcloud and try running again."
0000000000000000000000000000000000000000;;		exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	gcloud_instances=$(gcloud compute instances list | grep "\-master")
0000000000000000000000000000000000000000;;	if [ -z "$gcloud_instances" ] || [ -z "${KUBE_GCE_INSTANCE_PREFIX}" ]
0000000000000000000000000000000000000000;;	then
0000000000000000000000000000000000000000;;		echo "This script is only able to supply the necessary serviceaccount key if you are running on Google"
0000000000000000000000000000000000000000;;		echo "Compute Engine using a cluster/kube-up.sh script with KUBE_GCE_INSTANCE_PREFIX set. If this is not"
0000000000000000000000000000000000000000;;		echo "the case, be ready to supply a path to the serviceaccount public key."
0000000000000000000000000000000000000000;;		if [ -z "${KUBE_GCE_INSTANCE_PREFIX}" ]
0000000000000000000000000000000000000000;;		then
0000000000000000000000000000000000000000;;			echo "Please provide your KUBE_GCE_INSTANCE_PREFIX now:"
0000000000000000000000000000000000000000;;			read KUBE_GCE_INSTANCE_PREFIX
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	export OPENSHIFT_EXAMPLE=$(pwd)/examples/openshift-origin
0000000000000000000000000000000000000000;;	echo Set OPENSHIFT_EXAMPLE=${OPENSHIFT_EXAMPLE}
0000000000000000000000000000000000000000;;	export OPENSHIFT_CONFIG=${OPENSHIFT_EXAMPLE}/config
0000000000000000000000000000000000000000;;	echo Set OPENSHIFT_CONFIG=${OPENSHIFT_CONFIG}
0000000000000000000000000000000000000000;;	mkdir ${OPENSHIFT_CONFIG}
0000000000000000000000000000000000000000;;	echo Made dir ${OPENSHIFT_CONFIG}
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "===> Setting up OpenShift-Origin namespace:"
0000000000000000000000000000000000000000;;	kubectl create -f ${OPENSHIFT_EXAMPLE}/openshift-origin-namespace.yaml
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "===> Setting up etcd-discovery:"
0000000000000000000000000000000000000000;;	# A token etcd uses to generate unique cluster ID and member ID. Conforms to [a-z0-9]{40}
0000000000000000000000000000000000000000;;	export ETCD_INITIAL_CLUSTER_TOKEN=$(python -c "import string; import random; print(''.join(random.SystemRandom().choice(string.ascii_lowercase + string.digits) for _ in range(40)))")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A unique token used by the discovery service. Conforms to etcd-cluster-[a-z0-9]{5}
0000000000000000000000000000000000000000;;	export ETCD_DISCOVERY_TOKEN=$(python -c "import string; import random; print(\"etcd-cluster-\" + ''.join(random.SystemRandom().choice(string.ascii_lowercase + string.digits) for _ in range(5)))")
0000000000000000000000000000000000000000;;	sed -i.bak -e "s/INSERT_ETCD_INITIAL_CLUSTER_TOKEN/\"${ETCD_INITIAL_CLUSTER_TOKEN}\"/g" -e "s/INSERT_ETCD_DISCOVERY_TOKEN/\"${ETCD_DISCOVERY_TOKEN}\"/g" ${OPENSHIFT_EXAMPLE}/etcd-controller.yaml
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kubectl create -f ${OPENSHIFT_EXAMPLE}/etcd-discovery-controller.yaml --namespace='openshift-origin'
0000000000000000000000000000000000000000;;	kubectl create -f ${OPENSHIFT_EXAMPLE}/etcd-discovery-service.yaml --namespace='openshift-origin'
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "===> Setting up etcd:"
0000000000000000000000000000000000000000;;	kubectl create -f ${OPENSHIFT_EXAMPLE}/etcd-controller.yaml --namespace='openshift-origin'
0000000000000000000000000000000000000000;;	kubectl create -f ${OPENSHIFT_EXAMPLE}/etcd-service.yaml --namespace='openshift-origin'
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "===> Setting up openshift-origin:"
0000000000000000000000000000000000000000;;	kubectl config view --output=yaml --flatten=true --minify=true > ${OPENSHIFT_CONFIG}/kubeconfig
0000000000000000000000000000000000000000;;	kubectl create -f ${OPENSHIFT_EXAMPLE}/openshift-service.yaml --namespace='openshift-origin'
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	export PUBLIC_OPENSHIFT_IP=""
0000000000000000000000000000000000000000;;	echo "===> Waiting for public IP to be set for the OpenShift Service."
0000000000000000000000000000000000000000;;	echo "Mistakes in service setup can cause this to loop infinitely if an"
0000000000000000000000000000000000000000;;	echo "external IP is never set. Ensure that the OpenShift service"
0000000000000000000000000000000000000000;;	echo "is set to use an external load balancer. This process may take" 
0000000000000000000000000000000000000000;;	echo "a few minutes. Errors can be found in the log file found at:"
0000000000000000000000000000000000000000;;	echo ${OPENSHIFT_EXAMPLE}/openshift-startup.log
0000000000000000000000000000000000000000;;	echo "" > ${OPENSHIFT_EXAMPLE}/openshift-startup.log
0000000000000000000000000000000000000000;;	while [ ${#PUBLIC_OPENSHIFT_IP} -lt 1 ]; do
0000000000000000000000000000000000000000;;		echo -n .
0000000000000000000000000000000000000000;;		sleep 1
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			export PUBLIC_OPENSHIFT_IP=$(kubectl get services openshift --namespace="openshift-origin" --template="{{ index .status.loadBalancer.ingress 0 \"ip\" }}")
0000000000000000000000000000000000000000;;		} >> ${OPENSHIFT_EXAMPLE}/openshift-startup.log 2>&1
0000000000000000000000000000000000000000;;		if [[ ! ${PUBLIC_OPENSHIFT_IP} =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
0000000000000000000000000000000000000000;;			export PUBLIC_OPENSHIFT_IP=""
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	echo "Public OpenShift IP set to: ${PUBLIC_OPENSHIFT_IP}"
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "===> Configuring OpenShift:"
0000000000000000000000000000000000000000;;	docker run --privileged -v ${OPENSHIFT_CONFIG}:/config openshift/origin start master --write-config=/config --kubeconfig=/config/kubeconfig --master=https://localhost:8443 --public-master=https://${PUBLIC_OPENSHIFT_IP}:8443 --etcd=http://etcd:2379
0000000000000000000000000000000000000000;;	sudo -E chown -R ${USER} ${OPENSHIFT_CONFIG}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The following assumes GCE and that KUBE_GCE_INSTANCE_PREFIX is set
0000000000000000000000000000000000000000;;	export ZONE=$(gcloud compute instances list | grep "${KUBE_GCE_INSTANCE_PREFIX}\-master" | awk '{print $2}' | head -1)
0000000000000000000000000000000000000000;;	echo "sudo cat /srv/kubernetes/server.key; exit;" | gcloud compute ssh ${KUBE_GCE_INSTANCE_PREFIX}-master --zone ${ZONE} | grep -Ex "(^\-.*\-$|^\S+$)" > ${OPENSHIFT_CONFIG}/serviceaccounts.private.key
0000000000000000000000000000000000000000;;	# The following insertion will fail if indentation changes
0000000000000000000000000000000000000000;;	sed -i -e 's/publicKeyFiles:.*$/publicKeyFiles:/g' -e '/publicKeyFiles:/a \ \ - serviceaccounts.private.key' ${OPENSHIFT_CONFIG}/master-config.yaml
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	docker run -it --privileged -e="KUBECONFIG=/config/admin.kubeconfig" -v ${OPENSHIFT_CONFIG}:/config openshift/origin cli secrets new openshift-config /config -o json &> ${OPENSHIFT_EXAMPLE}/secret.json
0000000000000000000000000000000000000000;;	kubectl create -f ${OPENSHIFT_EXAMPLE}/secret.json --namespace='openshift-origin'
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "===> Running OpenShift Master:"
0000000000000000000000000000000000000000;;	kubectl create -f ${OPENSHIFT_EXAMPLE}/openshift-controller.yaml --namespace='openshift-origin'
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo Done.
