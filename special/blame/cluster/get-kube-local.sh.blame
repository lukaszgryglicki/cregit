0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script will download latest version of kubectl command line tool and will
0000000000000000000000000000000000000000;;	# bring up a local Kubernetes cluster with a single node.
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_HOST=${KUBE_HOST:-localhost}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	declare -r RED="\033[0;31m"
0000000000000000000000000000000000000000;;	declare -r GREEN="\033[0;32m"
0000000000000000000000000000000000000000;;	declare -r YELLOW="\033[0;33m"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function echo_green {
0000000000000000000000000000000000000000;;	  echo -e "${GREEN}$1"; tput sgr0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function echo_red {
0000000000000000000000000000000000000000;;	  echo -e "${RED}$1"; tput sgr0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function echo_yellow {
0000000000000000000000000000000000000000;;	  echo -e "${YELLOW}$1"; tput sgr0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run {
0000000000000000000000000000000000000000;;	  # For a moment we need to change bash options to capture message if a command fails.
0000000000000000000000000000000000000000;;	  set +o errexit
0000000000000000000000000000000000000000;;	  output=$($1 2>&1)
0000000000000000000000000000000000000000;;	  exit_code=$?
0000000000000000000000000000000000000000;;	  set -o errexit
0000000000000000000000000000000000000000;;	  if [ $exit_code -eq 0 ]; then
0000000000000000000000000000000000000000;;	    echo_green "SUCCESS"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo_red "FAILED"
0000000000000000000000000000000000000000;;	    echo $output >&2
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create_cluster {
0000000000000000000000000000000000000000;;	  echo "Creating a local cluster:"
0000000000000000000000000000000000000000;;	  echo -e -n "\tStarting kubelet..."
0000000000000000000000000000000000000000;;	  run "docker run \
0000000000000000000000000000000000000000;;	  --volume=/:/rootfs:ro \
0000000000000000000000000000000000000000;;	  --volume=/sys:/sys:ro \
0000000000000000000000000000000000000000;;	  --volume=/var/lib/docker/:/var/lib/docker:rw \
0000000000000000000000000000000000000000;;	  --volume=/var/lib/kubelet/:/var/lib/kubelet:rw \
0000000000000000000000000000000000000000;;	  --volume=/var/run:/var/run:rw \
0000000000000000000000000000000000000000;;	  --volume=/run/xtables.lock:/run/xtables.lock:rw \
0000000000000000000000000000000000000000;;	  --net=host \
0000000000000000000000000000000000000000;;	  --pid=host \
0000000000000000000000000000000000000000;;	  --privileged=true \
0000000000000000000000000000000000000000;;	  -d \
0000000000000000000000000000000000000000;;	  gcr.io/google_containers/hyperkube-${arch}:${release} \
0000000000000000000000000000000000000000;;	    /hyperkube kubelet \
0000000000000000000000000000000000000000;;	      --containerized \
0000000000000000000000000000000000000000;;	      --hostname-override="127.0.0.1" \
0000000000000000000000000000000000000000;;	      --address="0.0.0.0" \
0000000000000000000000000000000000000000;;	      --api-servers=http://localhost:8080 \
0000000000000000000000000000000000000000;;	      --pod-manifest-path=/etc/kubernetes/manifests \
0000000000000000000000000000000000000000;;	      --allow-privileged=true \
0000000000000000000000000000000000000000;;	      --cluster-dns=10.0.0.10 \
0000000000000000000000000000000000000000;;	      --cluster-domain=cluster.local \
0000000000000000000000000000000000000000;;	      --v=2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo -e -n "\tWaiting for master components to start..."
0000000000000000000000000000000000000000;;	  while true; do
0000000000000000000000000000000000000000;;	    local running_count=$(kubectl -s=http://${KUBE_HOST}:8080 get pods --no-headers --namespace=kube-system 2>/dev/null | grep "Running" | wc -l)
0000000000000000000000000000000000000000;;	    # We expect to have 3 running pods - etcd, master and kube-proxy.
0000000000000000000000000000000000000000;;	    if [ "$running_count" -ge 3 ]; then
0000000000000000000000000000000000000000;;	      break
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    echo -n "."
0000000000000000000000000000000000000000;;	    sleep 1
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  echo_green "SUCCESS"
0000000000000000000000000000000000000000;;	  echo_green "Cluster created!"
0000000000000000000000000000000000000000;;	  echo ""
0000000000000000000000000000000000000000;;	  kubectl -s http://${KUBE_HOST}:8080 clusterinfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function get_latest_version_number {
0000000000000000000000000000000000000000;;	  local -r latest_url="https://storage.googleapis.com/kubernetes-release/release/stable.txt"
0000000000000000000000000000000000000000;;	  if [[ $(which wget) ]]; then
0000000000000000000000000000000000000000;;	    wget -qO- ${latest_url}
0000000000000000000000000000000000000000;;	  elif [[ $(which curl) ]]; then
0000000000000000000000000000000000000000;;	    curl -Ss ${latest_url}
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo_red "Couldn't find curl or wget.  Bailing out."
0000000000000000000000000000000000000000;;	    exit 4
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	latest_release=$(get_latest_version_number)
0000000000000000000000000000000000000000;;	release=${KUBE_VERSION:-${latest_release}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	uname=$(uname)
0000000000000000000000000000000000000000;;	if [[ "${uname}" == "Darwin" ]]; then
0000000000000000000000000000000000000000;;	  platform="darwin"
0000000000000000000000000000000000000000;;	elif [[ "${uname}" == "Linux" ]]; then
0000000000000000000000000000000000000000;;	  platform="linux"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  echo_red "Unknown, unsupported platform: (${uname})."
0000000000000000000000000000000000000000;;	  echo_red "Supported platforms: Linux, Darwin."
0000000000000000000000000000000000000000;;	  echo_red "Bailing out."
0000000000000000000000000000000000000000;;	  exit 2
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	machine=$(uname -m)
0000000000000000000000000000000000000000;;	if [[ "${machine}" == "x86_64" ]]; then
0000000000000000000000000000000000000000;;	  arch="amd64"
0000000000000000000000000000000000000000;;	elif [[ "${machine}" == "i686" ]]; then
0000000000000000000000000000000000000000;;	  arch="386"
0000000000000000000000000000000000000000;;	elif [[ "${machine}" == "arm*" ]]; then
0000000000000000000000000000000000000000;;	  arch="arm"
0000000000000000000000000000000000000000;;	elif [[ "${machine}" == "s390x*" ]]; then
0000000000000000000000000000000000000000;;	  arch="s390x"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  echo_red "Unknown, unsupported architecture (${machine})."
0000000000000000000000000000000000000000;;	  echo_red "Supported architectures x86_64, i686, arm, s390x."
0000000000000000000000000000000000000000;;	  echo_red "Bailing out."
0000000000000000000000000000000000000000;;	  exit 3
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kubectl_url="https://storage.googleapis.com/kubernetes-release/release/${release}/bin/${platform}/${arch}/kubectl"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ $(ls . | grep ^kubectl$ | wc -l) -lt 1 ]]; then
0000000000000000000000000000000000000000;;	  echo -n "Downloading kubectl binary..."
0000000000000000000000000000000000000000;;	  if [[ $(which wget) ]]; then
0000000000000000000000000000000000000000;;	    run "wget ${kubectl_url}"
0000000000000000000000000000000000000000;;	  elif [[ $(which curl) ]]; then
0000000000000000000000000000000000000000;;	    run "curl -OL ${kubectl_url}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo_red "Couldn't find curl or wget.  Bailing out."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  chmod a+x kubectl
0000000000000000000000000000000000000000;;	  echo ""
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  # TODO: We should detect version of kubectl binary if it too old
0000000000000000000000000000000000000000;;	  # download newer version.
0000000000000000000000000000000000000000;;	  echo "Detected existing kubectl binary. Skipping download."
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	create_cluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo ""
0000000000000000000000000000000000000000;;	echo ""
0000000000000000000000000000000000000000;;	echo "To list the nodes in your cluster run"
0000000000000000000000000000000000000000;;	echo_yellow "\tkubectl -s=http://${KUBE_HOST}:8080 get nodes"
0000000000000000000000000000000000000000;;	echo ""
0000000000000000000000000000000000000000;;	echo "To run your first pod run"
0000000000000000000000000000000000000000;;	echo_yellow "\tkubectl -s http://${KUBE_HOST}:8080 run nginx --image=nginx --port=80"
