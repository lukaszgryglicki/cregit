0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Download the flannel, etcd, docker, bridge-utils and K8s binaries automatically 
0000000000000000000000000000000000000000;;	# and store into binaries directory.
0000000000000000000000000000000000000000;;	# Run as sudoers only
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# author @kevin-wangzefeng
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly ROOT=$(dirname "${BASH_SOURCE}")
0000000000000000000000000000000000000000;;	source ${ROOT}/config-build.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# ensure $RELEASES_DIR is an absolute file path
0000000000000000000000000000000000000000;;	mkdir -p ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	RELEASES_DIR=$(cd ${RELEASES_DIR}; pwd)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# get absolute file path of binaries
0000000000000000000000000000000000000000;;	BINARY_DIR=$(cd ${ROOT}; pwd)/binaries
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function clean-up() {
0000000000000000000000000000000000000000;;	  rm -rf ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	  rm -rf ${BINARY_DIR}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function download-releases() {
0000000000000000000000000000000000000000;;	  rm -rf ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	  mkdir -p ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Download flannel release v${FLANNEL_VERSION} ..."
0000000000000000000000000000000000000000;;	  curl -L ${FLANNEL_DOWNLOAD_URL} -o ${RELEASES_DIR}/flannel.tar.gz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Download etcd release v${ETCD_VERSION} ..."
0000000000000000000000000000000000000000;;	  curl -L ${ETCD_DOWNLOAD_URL} -o ${RELEASES_DIR}/etcd.tar.gz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Download kubernetes release v${K8S_VERSION} ..."
0000000000000000000000000000000000000000;;	  curl -L ${K8S_CLIENT_DOWNLOAD_URL} -o ${RELEASES_DIR}/kubernetes-client-linux-amd64.tar.gz
0000000000000000000000000000000000000000;;	  curl -L ${K8S_SERVER_DOWNLOAD_URL} -o ${RELEASES_DIR}/kubernetes-server-linux-amd64.tar.gz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Download docker release v${DOCKER_VERSION} ..."
0000000000000000000000000000000000000000;;	  curl -L ${DOCKER_DOWNLOAD_URL} -o ${RELEASES_DIR}/docker.tar.gz
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function unpack-releases() {
0000000000000000000000000000000000000000;;	  rm -rf ${BINARY_DIR}
0000000000000000000000000000000000000000;;	  mkdir -p ${BINARY_DIR}/master/bin
0000000000000000000000000000000000000000;;	  mkdir -p ${BINARY_DIR}/node/bin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # flannel
0000000000000000000000000000000000000000;;	  if [[ -f ${RELEASES_DIR}/flannel.tar.gz ]] ; then
0000000000000000000000000000000000000000;;	    tar xzf ${RELEASES_DIR}/flannel.tar.gz -C ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	    cp ${RELEASES_DIR}/flanneld ${BINARY_DIR}/master/bin
0000000000000000000000000000000000000000;;	    cp ${RELEASES_DIR}/flanneld ${BINARY_DIR}/node/bin
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # etcd
0000000000000000000000000000000000000000;;	  if [[ -f ${RELEASES_DIR}/etcd.tar.gz ]] ; then
0000000000000000000000000000000000000000;;	    tar xzf ${RELEASES_DIR}/etcd.tar.gz -C ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	    ETCD="etcd-v${ETCD_VERSION}-linux-amd64"
0000000000000000000000000000000000000000;;	    cp ${RELEASES_DIR}/$ETCD/etcd \
0000000000000000000000000000000000000000;;	       ${RELEASES_DIR}/$ETCD/etcdctl ${BINARY_DIR}/master/bin
0000000000000000000000000000000000000000;;	    cp ${RELEASES_DIR}/$ETCD/etcd \
0000000000000000000000000000000000000000;;	       ${RELEASES_DIR}/$ETCD/etcdctl ${BINARY_DIR}/node/bin
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # k8s
0000000000000000000000000000000000000000;;	  if [[ -f ${RELEASES_DIR}/kubernetes-client-linux-amd64.tar.gz ]] ; then
0000000000000000000000000000000000000000;;	    tar xzf ${RELEASES_DIR}/kubernetes-client-linux-amd64.tar.gz -C ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	    cp ${RELEASES_DIR}/kubernetes/client/bin/kubectl ${BINARY_DIR}
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -f ${RELEASES_DIR}/kubernetes-server-linux-amd64.tar.gz ]] ; then
0000000000000000000000000000000000000000;;	    tar xzf ${RELEASES_DIR}/kubernetes-server-linux-amd64.tar.gz -C ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	    cp ${RELEASES_DIR}/kubernetes/server/bin/kube-apiserver \
0000000000000000000000000000000000000000;;	       ${RELEASES_DIR}/kubernetes/server/bin/kube-controller-manager \
0000000000000000000000000000000000000000;;	       ${RELEASES_DIR}/kubernetes/server/bin/kube-scheduler ${BINARY_DIR}/master/bin
0000000000000000000000000000000000000000;;	    cp ${RELEASES_DIR}/kubernetes/server/bin/kubelet \
0000000000000000000000000000000000000000;;	       ${RELEASES_DIR}/kubernetes/server/bin/kube-proxy ${BINARY_DIR}/node/bin
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # docker
0000000000000000000000000000000000000000;;	  if [[ -f ${RELEASES_DIR}/docker.tar.gz ]]; then
0000000000000000000000000000000000000000;;	    tar xzf ${RELEASES_DIR}/docker.tar.gz -C ${RELEASES_DIR}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cp ${RELEASES_DIR}/docker/docker* ${BINARY_DIR}/node/bin
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  chmod -R +x ${BINARY_DIR}
0000000000000000000000000000000000000000;;	  echo "Done! All binaries are stored in ${BINARY_DIR}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function parse-opt() {
0000000000000000000000000000000000000000;;	  local opt=${1-}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  case $opt in
0000000000000000000000000000000000000000;;	    download)
0000000000000000000000000000000000000000;;	      download-releases
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    unpack)
0000000000000000000000000000000000000000;;	      unpack-releases
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    clean)
0000000000000000000000000000000000000000;;	      clean-up
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    all)
0000000000000000000000000000000000000000;;	      download-releases
0000000000000000000000000000000000000000;;	      unpack-releases
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    *)
0000000000000000000000000000000000000000;;	      echo "Usage: "
0000000000000000000000000000000000000000;;	      echo "   build.sh <command>"
0000000000000000000000000000000000000000;;	      echo "Commands:"
0000000000000000000000000000000000000000;;	      echo "   clean      Clean up downloaded releases and unpacked binaries."
0000000000000000000000000000000000000000;;	      echo "   download   Download releases to \"${RELEASES_DIR}\"."
0000000000000000000000000000000000000000;;	      echo "   unpack     Unpack releases downloaded in \"${RELEASES_DIR}\", and copy binaries to \"${BINARY_DIR}\"."
0000000000000000000000000000000000000000;;	      echo "   all        Download releases and unpack them."
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	parse-opt $@
