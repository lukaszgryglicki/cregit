0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	MASTER_ADDRESS=${1:-"8.8.8.18"}
0000000000000000000000000000000000000000;;	NODE_ADDRESS=${2:-"8.8.8.20"}
0000000000000000000000000000000000000000;;	DNS_SERVER_IP=${3:-"192.168.3.100"}
0000000000000000000000000000000000000000;;	DNS_DOMAIN=${4:-"cluster.local"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat <<EOF >/opt/kubernetes/cfg/kubelet
0000000000000000000000000000000000000000;;	# --logtostderr=true: log to standard error instead of files
0000000000000000000000000000000000000000;;	KUBE_LOGTOSTDERR="--logtostderr=true"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#  --v=0: log level for V logs
0000000000000000000000000000000000000000;;	KUBE_LOG_LEVEL="--v=4"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# --address=0.0.0.0: The IP address for the Kubelet to serve on (set to 0.0.0.0 for all interfaces)
0000000000000000000000000000000000000000;;	NODE_ADDRESS="--address=${NODE_ADDRESS}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# --port=10250: The port for the Kubelet to serve on. Note that "kubectl logs" will not work if you set this flag.
0000000000000000000000000000000000000000;;	NODE_PORT="--port=10250"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# --hostname-override="": If non-empty, will use this string as identification instead of the actual hostname.
0000000000000000000000000000000000000000;;	NODE_HOSTNAME="--hostname-override=${NODE_ADDRESS}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# --api-servers=[]: List of Kubernetes API servers for publishing events,
0000000000000000000000000000000000000000;;	# and reading pods and services. (ip:port), comma separated.
0000000000000000000000000000000000000000;;	KUBELET_API_SERVER="--api-servers=${MASTER_ADDRESS}:8080"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# --allow-privileged=false: If true, allow containers to request privileged mode. [default=false]
0000000000000000000000000000000000000000;;	KUBE_ALLOW_PRIV="--allow-privileged=false"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# DNS info
0000000000000000000000000000000000000000;;	KUBELET__DNS_IP="--cluster-dns=${DNS_SERVER_IP}"
0000000000000000000000000000000000000000;;	KUBELET_DNS_DOMAIN="--cluster-domain=${DNS_DOMAIN}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Add your own!
0000000000000000000000000000000000000000;;	KUBELET_ARGS=""
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_PROXY_OPTS="   \${KUBE_LOGTOSTDERR}     \\
0000000000000000000000000000000000000000;;	                    \${KUBE_LOG_LEVEL}       \\
0000000000000000000000000000000000000000;;	                    \${NODE_ADDRESS}         \\
0000000000000000000000000000000000000000;;	                    \${NODE_PORT}            \\
0000000000000000000000000000000000000000;;	                    \${NODE_HOSTNAME}        \\
0000000000000000000000000000000000000000;;	                    \${KUBELET_API_SERVER}   \\
0000000000000000000000000000000000000000;;	                    \${KUBE_ALLOW_PRIV}      \\
0000000000000000000000000000000000000000;;	                    \${KUBELET__DNS_IP}      \\
0000000000000000000000000000000000000000;;	                    \${KUBELET_DNS_DOMAIN}      \\
0000000000000000000000000000000000000000;;	                    \$KUBELET_ARGS"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat <<EOF >/usr/lib/systemd/system/kubelet.service
0000000000000000000000000000000000000000;;	[Unit]
0000000000000000000000000000000000000000;;	Description=Kubernetes Kubelet
0000000000000000000000000000000000000000;;	After=docker.service
0000000000000000000000000000000000000000;;	Requires=docker.service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Service]
0000000000000000000000000000000000000000;;	EnvironmentFile=-/opt/kubernetes/cfg/kubelet
0000000000000000000000000000000000000000;;	ExecStart=/opt/kubernetes/bin/kubelet ${KUBE_PROXY_OPTS}
0000000000000000000000000000000000000000;;	Restart=on-failure
0000000000000000000000000000000000000000;;	KillMode=process
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Install]
0000000000000000000000000000000000000000;;	WantedBy=multi-user.target
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	systemctl daemon-reload
0000000000000000000000000000000000000000;;	systemctl enable kubelet
0000000000000000000000000000000000000000;;	systemctl restart kubelet
