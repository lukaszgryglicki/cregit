0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Generate Docker daemon options based on flannel env file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# exit on any error
0000000000000000000000000000000000000000;;	set -e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	usage() {
0000000000000000000000000000000000000000;;	  echo "$0 [-f FLANNEL-ENV-FILE] [-d DOCKER-ENV-FILE] [-i] [-c] [-m] [-k COMBINED-KEY]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Generate Docker daemon options based on flannel env file
0000000000000000000000000000000000000000;;	OPTIONS:
0000000000000000000000000000000000000000;;	    -f  Path to flannel env file. Defaults to /run/flannel/subnet.env
0000000000000000000000000000000000000000;;	    -d  Path to Docker env file to write to. Defaults to /run/docker_opts.env
0000000000000000000000000000000000000000;;	    -i  Output each Docker option as individual var. e.g. DOCKER_OPT_MTU=1500
0000000000000000000000000000000000000000;;	    -c  Output combined Docker options into DOCKER_OPTS var
0000000000000000000000000000000000000000;;	    -k  Set the combined options key to this value (default DOCKER_OPTS=)
0000000000000000000000000000000000000000;;	    -m  Do not output --ip-masq (useful for older Docker version)
0000000000000000000000000000000000000000;;	" >/dev/stderr 
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	flannel_env="/run/flannel/subnet.env"
0000000000000000000000000000000000000000;;	docker_env="/run/docker_opts.env"
0000000000000000000000000000000000000000;;	combined_opts_key="DOCKER_OPTS"
0000000000000000000000000000000000000000;;	indiv_opts=false
0000000000000000000000000000000000000000;;	combined_opts=false
0000000000000000000000000000000000000000;;	ipmasq=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	while getopts "f:d:ick:" opt; do
0000000000000000000000000000000000000000;;	  case $opt in
0000000000000000000000000000000000000000;;	    f)
0000000000000000000000000000000000000000;;	      flannel_env=$OPTARG
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    d)
0000000000000000000000000000000000000000;;	      docker_env=$OPTARG
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    i)
0000000000000000000000000000000000000000;;	      indiv_opts=true
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    c)
0000000000000000000000000000000000000000;;	      combined_opts=true
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    m)
0000000000000000000000000000000000000000;;	      ipmasq=false
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    k)
0000000000000000000000000000000000000000;;	      combined_opts_key=$OPTARG
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    \?)
0000000000000000000000000000000000000000;;	      usage
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ $indiv_opts = false ]] && [[ $combined_opts = false ]]; then
0000000000000000000000000000000000000000;;	  indiv_opts=true
0000000000000000000000000000000000000000;;	  combined_opts=true
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -f "$flannel_env" ]]; then
0000000000000000000000000000000000000000;;	  source $flannel_env
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -n "$FLANNEL_SUBNET" ]]; then
0000000000000000000000000000000000000000;;	  DOCKER_OPT_BIP="--bip=$FLANNEL_SUBNET"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -n "$FLANNEL_MTU" ]]; then
0000000000000000000000000000000000000000;;	  DOCKER_OPT_MTU="--mtu=$FLANNEL_MTU"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "$FLANNEL_IPMASQ" = true ]] && [[ $ipmasq = true ]]; then
0000000000000000000000000000000000000000;;	  DOCKER_OPT_IPMASQ="--ip-masq=false"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	eval docker_opts="\$${combined_opts_key}"
0000000000000000000000000000000000000000;;	docker_opts+=" "
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo -n "" >$docker_env
0000000000000000000000000000000000000000;;	for opt in $(compgen -v DOCKER_OPT_); do
0000000000000000000000000000000000000000;;	  eval val=\$$opt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ "$indiv_opts" = true ]]; then
0000000000000000000000000000000000000000;;	    echo "$opt=\"$val\"" >>$docker_env
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  docker_opts+="$val "
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "$combined_opts" = true ]]; then
0000000000000000000000000000000000000000;;	  echo "${combined_opts_key}=\"${docker_opts}\"" >>$docker_env
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
