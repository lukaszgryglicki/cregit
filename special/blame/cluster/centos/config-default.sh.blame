0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly root=$(dirname "${BASH_SOURCE}")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contains configuration values for the CentOS cluster
0000000000000000000000000000000000000000;;	# The user should have sudo privilege
0000000000000000000000000000000000000000;;	export MASTER=${MASTER:-"centos@172.10.0.11"}
0000000000000000000000000000000000000000;;	export MASTER_IP=${MASTER#*@}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Define all your master nodes,
0000000000000000000000000000000000000000;;	# And separated with blank space like <user_1@ip_1> <user_2@ip_2> <user_3@ip_3>.
0000000000000000000000000000000000000000;;	# The user should have sudo privilege
0000000000000000000000000000000000000000;;	export MASTERS="${MASTERS:-$MASTER}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# length-of <arg0>
0000000000000000000000000000000000000000;;	# Get the length of specific arg0, could be a space-separate string or array.
0000000000000000000000000000000000000000;;	function length-of() {
0000000000000000000000000000000000000000;;	  local len=0
0000000000000000000000000000000000000000;;	  for part in $1; do
0000000000000000000000000000000000000000;;	    let ++len
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  echo $len
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	# Number of nodes in your cluster.
0000000000000000000000000000000000000000;;	export NUM_MASTERS="${NUM_MASTERS:-$(length-of "$MASTERS")}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Get default master advertise address: first master node.
0000000000000000000000000000000000000000;;	function default-advertise-address() {
0000000000000000000000000000000000000000;;	  # get the first master node
0000000000000000000000000000000000000000;;	  local masters_array=(${MASTERS})
0000000000000000000000000000000000000000;;	  local master=${masters_array[0]}
0000000000000000000000000000000000000000;;	  echo ${master#*@}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Define advertise address of masters, could be a load balancer address.
0000000000000000000000000000000000000000;;	# If not provided, the default is ip of first master node.
0000000000000000000000000000000000000000;;	export MASTER_ADVERTISE_ADDRESS="${MASTER_ADVERTISE_ADDRESS:-$(default-advertise-address)}"
0000000000000000000000000000000000000000;;	export MASTER_ADVERTISE_IP="${MASTER_ADVERTISE_IP:-$(getent hosts "${MASTER_ADVERTISE_ADDRESS}" | awk '{print $1; exit}')}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Define all your minion nodes,
0000000000000000000000000000000000000000;;	# And separated with blank space like <user_1@ip_1> <user_2@ip_2> <user_3@ip_3>.
0000000000000000000000000000000000000000;;	# The user should have sudo privilege
0000000000000000000000000000000000000000;;	export NODES="${NODES:-"centos@172.10.0.12 centos@172.10.0.13"}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Number of nodes in your cluster.
0000000000000000000000000000000000000000;;	export NUM_NODES="${NUM_NODES:-$(length-of "$NODES")}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Should be removed when NUM_NODES is deprecated in validate-cluster.sh
0000000000000000000000000000000000000000;;	export NUM_NODES="${NUM_NODES}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# By default, the cluster will use the etcd installed on master.
0000000000000000000000000000000000000000;;	function concat-etcd-servers() {
0000000000000000000000000000000000000000;;	  local etcd_servers=""
0000000000000000000000000000000000000000;;	  for master in ${MASTERS}; do
0000000000000000000000000000000000000000;;	    local master_ip=${master#*@}
0000000000000000000000000000000000000000;;	    local prefix=""
0000000000000000000000000000000000000000;;	    if [ -n "$etcd_servers" ]; then
0000000000000000000000000000000000000000;;	      prefix="${etcd_servers},"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    etcd_servers="${prefix}https://${master_ip}:2379"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "$etcd_servers"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	export ETCD_SERVERS="$(concat-etcd-servers)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# By default, etcd cluster will use runtime configuration
0000000000000000000000000000000000000000;;	#   https://coreos.com/etcd/docs/latest/v2/runtime-configuration.html
0000000000000000000000000000000000000000;;	# Get etc initial cluster and store in ETCD_INITIAL_CLUSTER
0000000000000000000000000000000000000000;;	function concat-etcd-initial-cluster() {
0000000000000000000000000000000000000000;;	  local etcd_initial_cluster=""
0000000000000000000000000000000000000000;;	  local num_infra=0
0000000000000000000000000000000000000000;;	  for master in ${MASTERS}; do
0000000000000000000000000000000000000000;;	    local master_ip="${master#*@}"
0000000000000000000000000000000000000000;;	    if [ -n "$etcd_initial_cluster" ]; then
0000000000000000000000000000000000000000;;	      etcd_initial_cluster+=","
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    etcd_initial_cluster+="infra${num_infra}=https://${master_ip}:2380"
0000000000000000000000000000000000000000;;	    let ++num_infra
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "$etcd_initial_cluster"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	export ETCD_INITIAL_CLUSTER="$(concat-etcd-initial-cluster)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CERT_DIR="${CERT_DIR:-${root}/ca-cert}"
0000000000000000000000000000000000000000;;	mkdir -p "${CERT_DIR}"
0000000000000000000000000000000000000000;;	# CERT_DIR path must be absolute.
0000000000000000000000000000000000000000;;	export CERT_DIR="$(cd "${CERT_DIR}"; pwd)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# define the IP range used for service cluster IPs.
0000000000000000000000000000000000000000;;	# according to rfc 1918 ref: https://tools.ietf.org/html/rfc1918 choose a private ip range here.
0000000000000000000000000000000000000000;;	export SERVICE_CLUSTER_IP_RANGE=${SERVICE_CLUSTER_IP_RANGE:-"192.168.3.0/24"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: Install cluster DNS.
0000000000000000000000000000000000000000;;	ENABLE_CLUSTER_DNS="${KUBE_ENABLE_CLUSTER_DNS:-true}"
0000000000000000000000000000000000000000;;	# DNS_SERVER_IP must be a IP in SERVICE_CLUSTER_IP_RANGE
0000000000000000000000000000000000000000;;	DNS_SERVER_IP=${DNS_SERVER_IP:-"192.168.3.100"}
0000000000000000000000000000000000000000;;	DNS_DOMAIN=${DNS_DOMAIN:-"cluster.local"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: Install Kubernetes UI
0000000000000000000000000000000000000000;;	ENABLE_CLUSTER_UI="${KUBE_ENABLE_CLUSTER_UI:-true}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# define the IP range used for flannel overlay network, should not conflict with above SERVICE_CLUSTER_IP_RANGE
0000000000000000000000000000000000000000;;	export FLANNEL_NET=${FLANNEL_NET:-"172.16.0.0/16"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Admission Controllers to invoke prior to persisting objects in cluster
0000000000000000000000000000000000000000;;	# If we included ResourceQuota, we should keep it at the end of the list to prevent incrementing quota usage prematurely.
0000000000000000000000000000000000000000;;	export ADMISSION_CONTROL=${ADMISSION_CONTROL:-"Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultTolerationSeconds,ResourceQuota"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Extra options to set on the Docker command line.
0000000000000000000000000000000000000000;;	# This is useful for setting --insecure-registry for local registries.
0000000000000000000000000000000000000000;;	export DOCKER_OPTS=${DOCKER_OPTS:-""}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Timeouts for process checking on master and minion
0000000000000000000000000000000000000000;;	export PROCESS_CHECK_TIMEOUT=${PROCESS_CHECK_TIMEOUT:-180} # seconds.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	unset -f default-advertise-address concat-etcd-servers length-of concat-etcd-initial-cluster
