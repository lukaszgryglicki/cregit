0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# deploy the add-on services after the cluster is available
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	source "config-default.sh"
0000000000000000000000000000000000000000;;	KUBECTL="${KUBE_ROOT}/cluster/kubectl.sh"
0000000000000000000000000000000000000000;;	export KUBECTL_PATH="${KUBE_ROOT}/cluster/centos/binaries/kubectl"
0000000000000000000000000000000000000000;;	export KUBE_CONFIG_FILE=${KUBE_CONFIG_FILE:-${KUBE_ROOT}/cluster/centos/config-default.sh}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function deploy_dns {
0000000000000000000000000000000000000000;;	  echo "Deploying DNS on Kubernetes"
0000000000000000000000000000000000000000;;	  sed -e "s/\\\$DNS_DOMAIN/${DNS_DOMAIN}/g" "${KUBE_ROOT}/cluster/addons/dns/kubedns-controller.yaml.sed" > kubedns-controller.yaml
0000000000000000000000000000000000000000;;	  sed -e "s/\\\$DNS_SERVER_IP/${DNS_SERVER_IP}/g" "${KUBE_ROOT}/cluster/addons/dns/kubedns-svc.yaml.sed" > kubedns-svc.yaml
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  KUBEDNS=`eval "${KUBECTL} get services --namespace=kube-system | grep kube-dns | cat"`
0000000000000000000000000000000000000000;;	      
0000000000000000000000000000000000000000;;	  if [ ! "$KUBEDNS" ]; then
0000000000000000000000000000000000000000;;	    # use kubectl to create kube-dns deployment and service
0000000000000000000000000000000000000000;;	    ${KUBECTL} --namespace=kube-system create -f kubedns-sa.yaml
0000000000000000000000000000000000000000;;	    ${KUBECTL} --namespace=kube-system create -f kubedns-cm.yaml
0000000000000000000000000000000000000000;;	    ${KUBECTL} --namespace=kube-system create -f kubedns-controller.yaml
0000000000000000000000000000000000000000;;	    ${KUBECTL} --namespace=kube-system create -f kubedns-svc.yaml
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    echo "Kube-dns deployment and service is successfully deployed."
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Kube-dns deployment and service is already deployed. Skipping."
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function deploy_dashboard {
0000000000000000000000000000000000000000;;	    if ${KUBECTL} get rc -l k8s-app=kubernetes-dashboard --namespace=kube-system | grep kubernetes-dashboard-v &> /dev/null; then
0000000000000000000000000000000000000000;;	        echo "Kubernetes Dashboard replicationController already exists"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	        echo "Creating Kubernetes Dashboard replicationController"
0000000000000000000000000000000000000000;;	        ${KUBECTL} create -f ${KUBE_ROOT}/cluster/addons/dashboard/dashboard-controller.yaml
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if ${KUBECTL} get service/kubernetes-dashboard --namespace=kube-system &> /dev/null; then
0000000000000000000000000000000000000000;;	        echo "Kubernetes Dashboard service already exists"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	        echo "Creating Kubernetes Dashboard service"
0000000000000000000000000000000000000000;;	        ${KUBECTL} create -f ${KUBE_ROOT}/cluster/addons/dashboard/dashboard-service.yaml
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ "${ENABLE_CLUSTER_DNS}" == true ]; then
0000000000000000000000000000000000000000;;	  deploy_dns
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ "${ENABLE_CLUSTER_UI}" == true ]; then
0000000000000000000000000000000000000000;;	  deploy_dashboard
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
