0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Stop the bleeding, turn off the warning until we fix token gen.
0000000000000000000000000000000000000000;;	# echo "-=-=-=-=-=-=-=-=-=-="
0000000000000000000000000000000000000000;;	# echo "NOTE:"
0000000000000000000000000000000000000000;;	# echo "kubectl.sh is deprecated and will be removed soon."
0000000000000000000000000000000000000000;;	# echo "please replace all usage with calls to the kubectl"
0000000000000000000000000000000000000000;;	# echo "binary and ensure that it is in your PATH." 
0000000000000000000000000000000000000000;;	# echo ""
0000000000000000000000000000000000000000;;	# echo "Please see 'kubectl help config' for more details"
0000000000000000000000000000000000000000;;	# echo "about configuring kubectl for your cluster."
0000000000000000000000000000000000000000;;	# echo "-=-=-=-=-=-=-=-=-=-="
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=${KUBE_ROOT:-$(dirname "${BASH_SOURCE}")/..}
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/kube-util.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/clientbin.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If KUBECTL_PATH isn't set, gather up the list of likely places and use ls
0000000000000000000000000000000000000000;;	# to find the latest one.
0000000000000000000000000000000000000000;;	if [[ -z "${KUBECTL_PATH:-}" ]]; then
0000000000000000000000000000000000000000;;	  kubectl=$( get_bin "kubectl" "cmd/kubectl" )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ ! -x "$kubectl" ]]; then
0000000000000000000000000000000000000000;;	    print_error "kubectl"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	elif [[ ! -x "${KUBECTL_PATH}" ]]; then
0000000000000000000000000000000000000000;;	  {
0000000000000000000000000000000000000000;;	    echo "KUBECTL_PATH environment variable set to '${KUBECTL_PATH}', but "
0000000000000000000000000000000000000000;;	    echo "this doesn't seem to be a valid executable."
0000000000000000000000000000000000000000;;	  } >&2
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	kubectl="${KUBECTL_PATH:-${kubectl}}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "$KUBERNETES_PROVIDER" == "gke" ]]; then
0000000000000000000000000000000000000000;;	  detect-project &> /dev/null
0000000000000000000000000000000000000000;;	elif [[ "$KUBERNETES_PROVIDER" == "ubuntu" ]]; then
0000000000000000000000000000000000000000;;	  detect-master > /dev/null
0000000000000000000000000000000000000000;;	  config=(
0000000000000000000000000000000000000000;;	    "--server=http://${KUBE_MASTER_IP}:8080"
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if false; then
0000000000000000000000000000000000000000;;	  # disable these debugging messages by default
0000000000000000000000000000000000000000;;	  echo "current-context: \"$(${kubectl} "${config[@]:+${config[@]}}" config view -o template --template='{{index . "current-context"}}')\"" >&2
0000000000000000000000000000000000000000;;	  echo "Running:" "${kubectl}" "${config[@]:+${config[@]}}" "${@+$@}" >&2
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${1:-}" =~ ^(path)$ ]]; then
0000000000000000000000000000000000000000;;	  echo "${kubectl}"
0000000000000000000000000000000000000000;;	  exit 0
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	"${kubectl}" "${config[@]:+${config[@]}}" "${@+$@}"
0000000000000000000000000000000000000000;;	
