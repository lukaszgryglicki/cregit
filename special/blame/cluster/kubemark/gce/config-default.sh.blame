0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A configuration for Kubemark cluster. It doesn't need to be kept in
0000000000000000000000000000000000000000;;	# sync with gce/config-default.sh (except the filename, because I'm reusing
0000000000000000000000000000000000000000;;	# gce/util.sh script which assumes config filename), but if some things that
0000000000000000000000000000000000000000;;	# are enabled by default should not run in hollow clusters, they should be disabled here.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/gce/config-common.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	GCLOUD=gcloud
0000000000000000000000000000000000000000;;	ZONE=${KUBE_GCE_ZONE:-us-central1-b}
0000000000000000000000000000000000000000;;	REGION=${ZONE%-*}
0000000000000000000000000000000000000000;;	# KUBEMARK_NUM_NODES overrides NUM_NODES if set
0000000000000000000000000000000000000000;;	NUM_NODES=${KUBEMARK_NUM_NODES:-${NUM_NODES:-10}}
0000000000000000000000000000000000000000;;	# KUBEMARK_MASTER_SIZE overrides MASTER_SIZE if set
0000000000000000000000000000000000000000;;	MASTER_SIZE=${KUBEMARK_MASTER_SIZE:-${MASTER_SIZE:-n1-standard-$(get-master-size)}}
0000000000000000000000000000000000000000;;	MASTER_DISK_TYPE=pd-ssd
0000000000000000000000000000000000000000;;	MASTER_DISK_SIZE=${MASTER_DISK_SIZE:-20GB}
0000000000000000000000000000000000000000;;	MASTER_ROOT_DISK_SIZE=${KUBEMARK_MASTER_ROOT_DISK_SIZE:-10GB}
0000000000000000000000000000000000000000;;	REGISTER_MASTER_KUBELET=${REGISTER_MASTER:-false}
0000000000000000000000000000000000000000;;	PREEMPTIBLE_NODE=${PREEMPTIBLE_NODE:-false}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	MASTER_OS_DISTRIBUTION=${KUBE_MASTER_OS_DISTRIBUTION:-gci}
0000000000000000000000000000000000000000;;	NODE_OS_DISTRIBUTION=${KUBE_NODE_OS_DISTRIBUTION:-gci}
0000000000000000000000000000000000000000;;	MASTER_IMAGE=${KUBE_GCE_MASTER_IMAGE:-cos-stable-59-9460-64-0}
0000000000000000000000000000000000000000;;	MASTER_IMAGE_PROJECT=${KUBE_GCE_MASTER_PROJECT:-cos-cloud}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	NETWORK=${KUBE_GCE_NETWORK:-e2e}
0000000000000000000000000000000000000000;;	INSTANCE_PREFIX="${INSTANCE_PREFIX:-"default"}"
0000000000000000000000000000000000000000;;	MASTER_NAME="${INSTANCE_PREFIX}-kubemark-master"
0000000000000000000000000000000000000000;;	AGGREGATOR_MASTER_NAME="${INSTANCE_PREFIX}-kubemark-aggregator"
0000000000000000000000000000000000000000;;	MASTER_TAG="kubemark-master"
0000000000000000000000000000000000000000;;	EVENT_STORE_NAME="${INSTANCE_PREFIX}-event-store"
0000000000000000000000000000000000000000;;	MASTER_IP_RANGE="${MASTER_IP_RANGE:-10.246.0.0/24}"
0000000000000000000000000000000000000000;;	CLUSTER_IP_RANGE="${CLUSTER_IP_RANGE:-10.224.0.0/11}"
0000000000000000000000000000000000000000;;	RUNTIME_CONFIG="${KUBE_RUNTIME_CONFIG:-}"
0000000000000000000000000000000000000000;;	TERMINATED_POD_GC_THRESHOLD=${TERMINATED_POD_GC_THRESHOLD:-100}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Set etcd image (e.g. 3.0.17-alpha.1) and version (e.g. 3.0.17) if you need
0000000000000000000000000000000000000000;;	# non-default version.
0000000000000000000000000000000000000000;;	ETCD_IMAGE="${TEST_ETCD_IMAGE:-}"
0000000000000000000000000000000000000000;;	ETCD_VERSION="${TEST_ETCD_VERSION:-}"
0000000000000000000000000000000000000000;;	# Storage backend. 'etcd2' supported, 'etcd3' experimental.
0000000000000000000000000000000000000000;;	STORAGE_BACKEND=${STORAGE_BACKEND:-}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Default Log level for all components in test clusters and variables to override it in specific components.
0000000000000000000000000000000000000000;;	TEST_CLUSTER_LOG_LEVEL="${TEST_CLUSTER_LOG_LEVEL:---v=2}"
0000000000000000000000000000000000000000;;	KUBELET_TEST_LOG_LEVEL="${KUBELET_TEST_LOG_LEVEL:-$TEST_CLUSTER_LOG_LEVEL}"
0000000000000000000000000000000000000000;;	API_SERVER_TEST_LOG_LEVEL="${API_SERVER_TEST_LOG_LEVEL:-$TEST_CLUSTER_LOG_LEVEL}"
0000000000000000000000000000000000000000;;	CONTROLLER_MANAGER_TEST_LOG_LEVEL="${CONTROLLER_MANAGER_TEST_LOG_LEVEL:-$TEST_CLUSTER_LOG_LEVEL}"
0000000000000000000000000000000000000000;;	SCHEDULER_TEST_LOG_LEVEL="${SCHEDULER_TEST_LOG_LEVEL:-$TEST_CLUSTER_LOG_LEVEL}"
0000000000000000000000000000000000000000;;	KUBEPROXY_TEST_LOG_LEVEL="${KUBEPROXY_TEST_LOG_LEVEL:-$TEST_CLUSTER_LOG_LEVEL}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	TEST_CLUSTER_DELETE_COLLECTION_WORKERS="${TEST_CLUSTER_DELETE_COLLECTION_WORKERS:---delete-collection-workers=16}"
0000000000000000000000000000000000000000;;	TEST_CLUSTER_MAX_REQUESTS_INFLIGHT="${TEST_CLUSTER_MAX_REQUESTS_INFLIGHT:-}"
0000000000000000000000000000000000000000;;	TEST_CLUSTER_RESYNC_PERIOD="${TEST_CLUSTER_RESYNC_PERIOD:-}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBEMARK_MASTER_COMPONENTS_QPS_LIMITS="${KUBEMARK_MASTER_COMPONENTS_QPS_LIMITS:-}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# ContentType used by all components to communicate with apiserver.
0000000000000000000000000000000000000000;;	TEST_CLUSTER_API_CONTENT_TYPE="${TEST_CLUSTER_API_CONTENT_TYPE:-}"
0000000000000000000000000000000000000000;;	# ContentType used to store objects in underlying database.
0000000000000000000000000000000000000000;;	TEST_CLUSTER_STORAGE_MEDIA_TYPE=""
0000000000000000000000000000000000000000;;	if [ -n "${STORAGE_MEDIA_TYPE:-}" ]; then
0000000000000000000000000000000000000000;;	  TEST_CLUSTER_STORAGE_MEDIA_TYPE="--storage-media-type=${STORAGE_MEDIA_TYPE}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	ENABLE_GARBAGE_COLLECTOR=${ENABLE_GARBAGE_COLLECTOR:-true}
0000000000000000000000000000000000000000;;	USE_REAL_PROXIER=${USE_REAL_PROXIER:-true}  # for hollow-proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CUSTOM_ADMISSION_PLUGINS="${CUSTOM_ADMISSION_PLUGINS:-Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,PodPreset,DefaultTolerationSeconds,NodeRestriction,ResourceQuota}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBELET_TEST_ARGS="--max-pods=100 $TEST_CLUSTER_LOG_LEVEL ${TEST_CLUSTER_API_CONTENT_TYPE}"
0000000000000000000000000000000000000000;;	APISERVER_TEST_ARGS="--runtime-config=extensions/v1beta1 ${API_SERVER_TEST_LOG_LEVEL} ${TEST_CLUSTER_STORAGE_MEDIA_TYPE} ${TEST_CLUSTER_MAX_REQUESTS_INFLIGHT} ${TEST_CLUSTER_DELETE_COLLECTION_WORKERS} --enable-garbage-collector=${ENABLE_GARBAGE_COLLECTOR}"
0000000000000000000000000000000000000000;;	CONTROLLER_MANAGER_TEST_ARGS="${CONTROLLER_MANAGER_TEST_LOG_LEVEL} ${TEST_CLUSTER_RESYNC_PERIOD} ${TEST_CLUSTER_API_CONTENT_TYPE} ${KUBEMARK_MASTER_COMPONENTS_QPS_LIMITS} --enable-garbage-collector=${ENABLE_GARBAGE_COLLECTOR}"
0000000000000000000000000000000000000000;;	SCHEDULER_TEST_ARGS="${SCHEDULER_TEST_LOG_LEVEL} ${TEST_CLUSTER_API_CONTENT_TYPE} ${KUBEMARK_MASTER_COMPONENTS_QPS_LIMITS}"
0000000000000000000000000000000000000000;;	KUBEPROXY_TEST_ARGS="${KUBEPROXY_TEST_LOG_LEVEL} ${TEST_CLUSTER_API_CONTENT_TYPE}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	SERVICE_CLUSTER_IP_RANGE="10.0.0.0/16"  # formerly PORTAL_NET
0000000000000000000000000000000000000000;;	ALLOCATE_NODE_CIDRS=true
