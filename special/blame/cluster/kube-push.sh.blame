0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Push a new release to the cluster.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# This will find the release tar, cause it to be downloaded, unpacked, installed
0000000000000000000000000000000000000000;;	# and enacted.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "kube-push.sh is currently broken; see https://github.com/kubernetes/kubernetes/issues/17397"
0000000000000000000000000000000000000000;;	exit 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ -f "${KUBE_ROOT}/cluster/env.sh" ]; then
0000000000000000000000000000000000000000;;	    source "${KUBE_ROOT}/cluster/env.sh"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/kube-util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function usage() {
0000000000000000000000000000000000000000;;	  echo "${0} [-m|-n <node id>] <version>"
0000000000000000000000000000000000000000;;	  echo "  Updates Kubernetes binaries. Can be done for all components (by default), master(-m) or specified node(-n)."
0000000000000000000000000000000000000000;;	  echo "  If the version is not specified will try to use local binaries."
0000000000000000000000000000000000000000;;	  echo "  Warning: upgrading single node is experimental"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	push_to_master=false
0000000000000000000000000000000000000000;;	push_to_node=false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	while getopts "mn:h" opt; do
0000000000000000000000000000000000000000;;	  case ${opt} in
0000000000000000000000000000000000000000;;	    m)
0000000000000000000000000000000000000000;;	      push_to_master=true;;
0000000000000000000000000000000000000000;;	    n)
0000000000000000000000000000000000000000;;	      push_to_node=true
0000000000000000000000000000000000000000;;	      node_id="$OPTARG";;
0000000000000000000000000000000000000000;;	    h)
0000000000000000000000000000000000000000;;	      usage
0000000000000000000000000000000000000000;;	      exit 0;;
0000000000000000000000000000000000000000;;	    \?)
0000000000000000000000000000000000000000;;	      echo "Invalid option: -$OPTARG" >&2
0000000000000000000000000000000000000000;;	      usage
0000000000000000000000000000000000000000;;	      exit 1;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	shift $((OPTIND-1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${push_to_master}" == "true" ]] && [[ "${push_to_node}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  echo "Only one of options -m -n should be specified"
0000000000000000000000000000000000000000;;	  usage
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	verify-prereqs
0000000000000000000000000000000000000000;;	verify-kube-binaries
0000000000000000000000000000000000000000;;	KUBE_VERSION=${1-}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${push_to_master}" == "false" ]] && [[ "${push_to_node}" == "false" ]]; then
0000000000000000000000000000000000000000;;	  echo "Updating cluster using provider: $KUBERNETES_PROVIDER"
0000000000000000000000000000000000000000;;	  kube-push
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${push_to_master}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  echo "Updating master to version ${KUBE_VERSION:-"dev"}"
0000000000000000000000000000000000000000;;	  prepare-push false
0000000000000000000000000000000000000000;;	  push-master
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${push_to_node}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  echo "Updating node $node_id to version ${KUBE_VERSION:-"dev"}"
0000000000000000000000000000000000000000;;	  prepare-push true
0000000000000000000000000000000000000000;;	  push-node $node_id
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Validating cluster post-push..."
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	"${KUBE_ROOT}/cluster/validate-cluster.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Done"
