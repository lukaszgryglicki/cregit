0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script will source the default skeleton helper functions, then sources
0000000000000000000000000000000000000000;;	# cluster/${KUBERNETES_PROVIDER}/util.sh where KUBERNETES_PROVIDER, if unset,
0000000000000000000000000000000000000000;;	# will use its default value (gce).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/skeleton/util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -n "${KUBERNETES_CONFORMANCE_TEST:-}" ]]; then
0000000000000000000000000000000000000000;;	    KUBERNETES_PROVIDER=""
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	    KUBERNETES_PROVIDER="${KUBERNETES_PROVIDER:-gce}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# PROVIDER_VARS is a list of cloud provider specific variables. Note:
0000000000000000000000000000000000000000;;	# this is a list of the _names_ of the variables, not the value of the
0000000000000000000000000000000000000000;;	# variables. Providers can add variables to be appended to kube-env.
0000000000000000000000000000000000000000;;	# (see `build-kube-env`).
0000000000000000000000000000000000000000;;	PROVIDER_VARS=""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	PROVIDER_UTILS="${KUBE_ROOT}/cluster/${KUBERNETES_PROVIDER}/util.sh"
0000000000000000000000000000000000000000;;	if [ -f ${PROVIDER_UTILS} ]; then
0000000000000000000000000000000000000000;;	    source "${PROVIDER_UTILS}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Federation utils
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Sets the kubeconfig context value for the current cluster.
0000000000000000000000000000000000000000;;	# Args:
0000000000000000000000000000000000000000;;	#   $1: zone (required)
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Vars set:
0000000000000000000000000000000000000000;;	#   CLUSTER_CONTEXT
0000000000000000000000000000000000000000;;	function kubeconfig-federation-context() {
0000000000000000000000000000000000000000;;	  if [[ -z "${1:-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "zone parameter is required"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  CLUSTER_CONTEXT="federation-e2e-${KUBERNETES_PROVIDER}-${1}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Should NOT be called within the global scope, unless setting the desired global zone vars
0000000000000000000000000000000000000000;;	# This function is currently NOT USED in the global scope
0000000000000000000000000000000000000000;;	function set-federation-zone-vars {
0000000000000000000000000000000000000000;;	  zone="$1"
0000000000000000000000000000000000000000;;	  kubeconfig-federation-context "${zone}"
0000000000000000000000000000000000000000;;	  export OVERRIDE_CONTEXT="${CLUSTER_CONTEXT}"
0000000000000000000000000000000000000000;;	  echo "Setting zone vars to: $OVERRIDE_CONTEXT"
0000000000000000000000000000000000000000;;	  if [[ "$KUBERNETES_PROVIDER" == "gce"  ]];then
0000000000000000000000000000000000000000;;	    # This needs a revamp, but for now e2e zone name is used as the unique
0000000000000000000000000000000000000000;;	    # cluster identifier in our e2e tests and we will continue to use that
0000000000000000000000000000000000000000;;	    # pattern.
0000000000000000000000000000000000000000;;	    export CLUSTER_NAME="${zone}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    export KUBE_GCE_ZONE="${zone}"
0000000000000000000000000000000000000000;;	    # gcloud has a 61 character limit, and for firewall rules this
0000000000000000000000000000000000000000;;	    # prefix gets appended to itself, with some extra information
0000000000000000000000000000000000000000;;	    # need tot keep it short
0000000000000000000000000000000000000000;;	    export KUBE_GCE_INSTANCE_PREFIX="${USER}-${zone}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  elif [[ "$KUBERNETES_PROVIDER" == "gke"  ]];then
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    export CLUSTER_NAME="${USER}-${zone}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  elif [[ "$KUBERNETES_PROVIDER" == "aws"  ]];then
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    export KUBE_AWS_ZONE="$zone"
0000000000000000000000000000000000000000;;	    export KUBE_AWS_INSTANCE_PREFIX="${USER}-${zone}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # WARNING: This is hack
0000000000000000000000000000000000000000;;	    # After KUBE_AWS_INSTANCE_PREFIX is changed,
0000000000000000000000000000000000000000;;	    # we need to make sure the config-xxx.sh file is
0000000000000000000000000000000000000000;;	    # re-sourced so the change propogates to dependent computed values
0000000000000000000000000000000000000000;;	    # (eg: MASTER_SG_NAME, NODE_SG_NAME, etc)
0000000000000000000000000000000000000000;;	    source "${KUBE_ROOT}/cluster/aws/util.sh"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Provider \"${KUBERNETES_PROVIDER}\" is not supported"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
