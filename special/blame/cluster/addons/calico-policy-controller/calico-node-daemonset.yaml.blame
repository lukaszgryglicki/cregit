0000000000000000000000000000000000000000;;	kind: DaemonSet
0000000000000000000000000000000000000000;;	apiVersion: extensions/v1beta1
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: calico-node
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    kubernetes.io/cluster-service: "true"
0000000000000000000000000000000000000000;;	    addonmanager.kubernetes.io/mode: Reconcile
0000000000000000000000000000000000000000;;	    k8s-app: calico-node
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  selector:
0000000000000000000000000000000000000000;;	    matchLabels:
0000000000000000000000000000000000000000;;	      k8s-app: calico-node
0000000000000000000000000000000000000000;;	  updateStrategy:
0000000000000000000000000000000000000000;;	    type: RollingUpdate
0000000000000000000000000000000000000000;;	  template:
0000000000000000000000000000000000000000;;	    metadata:
0000000000000000000000000000000000000000;;	      labels:
0000000000000000000000000000000000000000;;	        k8s-app: calico-node
0000000000000000000000000000000000000000;;	      annotations:
0000000000000000000000000000000000000000;;	        scheduler.alpha.kubernetes.io/critical-pod: ''
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      nodeSelector:
0000000000000000000000000000000000000000;;	        projectcalico.org/ds-ready: "true"
0000000000000000000000000000000000000000;;	      hostNetwork: true
0000000000000000000000000000000000000000;;	      containers:
0000000000000000000000000000000000000000;;	        # Runs calico/node container on each Kubernetes node.  This
0000000000000000000000000000000000000000;;	        # container programs network policy and routes on each
0000000000000000000000000000000000000000;;	        # host.
0000000000000000000000000000000000000000;;	        - name: calico-node
0000000000000000000000000000000000000000;;	          image: calico/node:v1.3.0
0000000000000000000000000000000000000000;;	          env:
0000000000000000000000000000000000000000;;	            - name: CALICO_DISABLE_FILE_LOGGING
0000000000000000000000000000000000000000;;	              value: "true"
0000000000000000000000000000000000000000;;	            - name: CALICO_NETWORKING_BACKEND
0000000000000000000000000000000000000000;;	              value: "none"
0000000000000000000000000000000000000000;;	            - name: DATASTORE_TYPE
0000000000000000000000000000000000000000;;	              value: "kubernetes"
0000000000000000000000000000000000000000;;	            - name: FELIX_TYPHAK8SSERVICENAME
0000000000000000000000000000000000000000;;	              value: "calico-typha"
0000000000000000000000000000000000000000;;	            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
0000000000000000000000000000000000000000;;	              value: "ACCEPT"
0000000000000000000000000000000000000000;;	            - name: FELIX_IPV6SUPPORT
0000000000000000000000000000000000000000;;	              value: "false"
0000000000000000000000000000000000000000;;	            - name: FELIX_LOGSEVERITYSYS
0000000000000000000000000000000000000000;;	              value: "none"
0000000000000000000000000000000000000000;;	            - name: FELIX_PROMETHEUSMETRICSENABLED
0000000000000000000000000000000000000000;;	              value: "true"
0000000000000000000000000000000000000000;;	            - name: IP
0000000000000000000000000000000000000000;;	              value: ""
0000000000000000000000000000000000000000;;	            - name: NO_DEFAULT_POOLS
0000000000000000000000000000000000000000;;	              value: "true"
0000000000000000000000000000000000000000;;	            - name: NODENAME
0000000000000000000000000000000000000000;;	              valueFrom:
0000000000000000000000000000000000000000;;	                fieldRef:
0000000000000000000000000000000000000000;;	                  fieldPath: spec.nodeName
0000000000000000000000000000000000000000;;	            - name: WAIT_FOR_DATASTORE
0000000000000000000000000000000000000000;;	              value: "true"
0000000000000000000000000000000000000000;;	          securityContext:
0000000000000000000000000000000000000000;;	            privileged: true
0000000000000000000000000000000000000000;;	          resources:
0000000000000000000000000000000000000000;;	            requests:
0000000000000000000000000000000000000000;;	              cpu: __CALICO_NODE_CPU__
0000000000000000000000000000000000000000;;	          volumeMounts:
0000000000000000000000000000000000000000;;	            - mountPath: /lib/modules
0000000000000000000000000000000000000000;;	              name: lib-modules
0000000000000000000000000000000000000000;;	              readOnly: true
0000000000000000000000000000000000000000;;	            - mountPath: /etc/calico
0000000000000000000000000000000000000000;;	              name: etc-calico
0000000000000000000000000000000000000000;;	              readOnly: true
0000000000000000000000000000000000000000;;	        # This container installs the Calico CNI binaries
0000000000000000000000000000000000000000;;	        # and CNI network config file on each node.
0000000000000000000000000000000000000000;;	        - name: install-cni
0000000000000000000000000000000000000000;;	          image: calico/cni:v1.9.1
0000000000000000000000000000000000000000;;	          command: ["/install-cni.sh"]
0000000000000000000000000000000000000000;;	          env:
0000000000000000000000000000000000000000;;	            - name: CNI_CONF_NAME
0000000000000000000000000000000000000000;;	              value: "10-calico.conflist"
0000000000000000000000000000000000000000;;	            - name: CNI_NETWORK_CONFIG
0000000000000000000000000000000000000000;;	              value: |-
0000000000000000000000000000000000000000;;	                {
0000000000000000000000000000000000000000;;	                  "name": "k8s-pod-network",
0000000000000000000000000000000000000000;;	                  "cniVersion": "0.3.0",
0000000000000000000000000000000000000000;;	                  "plugins": [
0000000000000000000000000000000000000000;;	                    {
0000000000000000000000000000000000000000;;	                      "type": "calico",
0000000000000000000000000000000000000000;;	                      "log_level": "debug",
0000000000000000000000000000000000000000;;	                      "datastore_type": "kubernetes",
0000000000000000000000000000000000000000;;	                      "nodename": "__KUBERNETES_NODE_NAME__",
0000000000000000000000000000000000000000;;	                      "ipam": {
0000000000000000000000000000000000000000;;	                        "type": "host-local",
0000000000000000000000000000000000000000;;	                        "subnet": "usePodCidr"
0000000000000000000000000000000000000000;;	                      },
0000000000000000000000000000000000000000;;	                      "policy": {
0000000000000000000000000000000000000000;;	                        "type": "k8s",
0000000000000000000000000000000000000000;;	                        "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
0000000000000000000000000000000000000000;;	                      },
0000000000000000000000000000000000000000;;	                      "kubernetes": {
0000000000000000000000000000000000000000;;	                        "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
0000000000000000000000000000000000000000;;	                        "kubeconfig": "__KUBECONFIG_FILEPATH__"
0000000000000000000000000000000000000000;;	                      }
0000000000000000000000000000000000000000;;	                    },
0000000000000000000000000000000000000000;;	                    {
0000000000000000000000000000000000000000;;	                      "type": "portmap",
0000000000000000000000000000000000000000;;	                      "capabilities": {"portMappings": true},
0000000000000000000000000000000000000000;;	                      "noSnat": true
0000000000000000000000000000000000000000;;	                    }
0000000000000000000000000000000000000000;;	                  ]
0000000000000000000000000000000000000000;;	                }
0000000000000000000000000000000000000000;;	            - name: KUBERNETES_NODE_NAME
0000000000000000000000000000000000000000;;	              valueFrom:
0000000000000000000000000000000000000000;;	                fieldRef:
0000000000000000000000000000000000000000;;	                  fieldPath: spec.nodeName
0000000000000000000000000000000000000000;;	          volumeMounts:
0000000000000000000000000000000000000000;;	            - mountPath: /host/opt/cni/bin
0000000000000000000000000000000000000000;;	              name: cni-bin-dir
0000000000000000000000000000000000000000;;	            - mountPath: /host/etc/cni/net.d
0000000000000000000000000000000000000000;;	              name: cni-net-dir
0000000000000000000000000000000000000000;;	      volumes:
0000000000000000000000000000000000000000;;	        # Used to ensure proper kmods are installed.
0000000000000000000000000000000000000000;;	        - name: lib-modules
0000000000000000000000000000000000000000;;	          hostPath:
0000000000000000000000000000000000000000;;	            path: /lib/modules
0000000000000000000000000000000000000000;;	        # Mount in the Felix config file from the host.
0000000000000000000000000000000000000000;;	        - name: etc-calico
0000000000000000000000000000000000000000;;	          hostPath:
0000000000000000000000000000000000000000;;	            path: /etc/calico
0000000000000000000000000000000000000000;;	        # Used to install CNI binaries.
0000000000000000000000000000000000000000;;	        - name: cni-bin-dir
0000000000000000000000000000000000000000;;	          hostPath:
0000000000000000000000000000000000000000;;	            path: __CALICO_CNI_DIR__
0000000000000000000000000000000000000000;;	        # Used to install CNI network config.
0000000000000000000000000000000000000000;;	        - name: cni-net-dir
0000000000000000000000000000000000000000;;	          hostPath:
0000000000000000000000000000000000000000;;	            path: /etc/cni/net.d
0000000000000000000000000000000000000000;;	      tolerations:
0000000000000000000000000000000000000000;;	        - key: "CriticalAddonsOnly"
0000000000000000000000000000000000000000;;	          operator: "Exists"
