0000000000000000000000000000000000000000;;	kind: ConfigMap
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	data:
0000000000000000000000000000000000000000;;	  containers.input.conf: |-
0000000000000000000000000000000000000000;;	    # This configuration file for Fluentd is used
0000000000000000000000000000000000000000;;	    # to watch changes to Docker log files that live in the
0000000000000000000000000000000000000000;;	    # directory /var/lib/docker/containers/ and are symbolically
0000000000000000000000000000000000000000;;	    # linked to from the /var/log/containers directory using names that capture the
0000000000000000000000000000000000000000;;	    # pod name and container name. These logs are then submitted to
0000000000000000000000000000000000000000;;	    # Google Cloud Logging which assumes the installation of the cloud-logging plug-in.
0000000000000000000000000000000000000000;;	    #
0000000000000000000000000000000000000000;;	    # Example
0000000000000000000000000000000000000000;;	    # =======
0000000000000000000000000000000000000000;;	    # A line in the Docker log file might look like this JSON:
0000000000000000000000000000000000000000;;	    #
0000000000000000000000000000000000000000;;	    # {"log":"2014/09/25 21:15:03 Got request with path wombat\\n",
0000000000000000000000000000000000000000;;	    #  "stream":"stderr",
0000000000000000000000000000000000000000;;	    #   "time":"2014-09-25T21:15:03.499185026Z"}
0000000000000000000000000000000000000000;;	    #
0000000000000000000000000000000000000000;;	    # The record reformer is used to write the tag to focus on the pod name
0000000000000000000000000000000000000000;;	    # and the Kubernetes container name. For example a Docker container's logs
0000000000000000000000000000000000000000;;	    # might be in the directory:
0000000000000000000000000000000000000000;;	    #  /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b
0000000000000000000000000000000000000000;;	    # and in the file:
0000000000000000000000000000000000000000;;	    #  997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log
0000000000000000000000000000000000000000;;	    # where 997599971ee6... is the Docker ID of the running container.
0000000000000000000000000000000000000000;;	    # The Kubernetes kubelet makes a symbolic link to this file on the host machine
0000000000000000000000000000000000000000;;	    # in the /var/log/containers directory which includes the pod name and the Kubernetes
0000000000000000000000000000000000000000;;	    # container name:
0000000000000000000000000000000000000000;;	    #    synthetic-logger-0.25lps-pod_default-synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
0000000000000000000000000000000000000000;;	    #    ->
0000000000000000000000000000000000000000;;	    #    /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log
0000000000000000000000000000000000000000;;	    # The /var/log directory on the host is mapped to the /var/log directory in the container
0000000000000000000000000000000000000000;;	    # running this instance of Fluentd and we end up collecting the file:
0000000000000000000000000000000000000000;;	    #   /var/log/containers/synthetic-logger-0.25lps-pod_default-synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
0000000000000000000000000000000000000000;;	    # This results in the tag:
0000000000000000000000000000000000000000;;	    #  var.log.containers.synthetic-logger-0.25lps-pod_default-synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
0000000000000000000000000000000000000000;;	    # The record reformer is used is discard the var.log.containers prefix and
0000000000000000000000000000000000000000;;	    # the Docker container ID suffix and "kubernetes." is pre-pended giving the tag:
0000000000000000000000000000000000000000;;	    #   kubernetes.synthetic-logger-0.25lps-pod_default-synth-lgr
0000000000000000000000000000000000000000;;	    # Tag is then parsed by google_cloud plugin and translated to the metadata,
0000000000000000000000000000000000000000;;	    # visible in the log viewer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # {"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"}
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format json
0000000000000000000000000000000000000000;;	      time_key time
0000000000000000000000000000000000000000;;	      path /var/log/containers/*.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-containers.log.pos
0000000000000000000000000000000000000000;;	      time_format %Y-%m-%dT%H:%M:%S.%N%Z
0000000000000000000000000000000000000000;;	      tag reform.*
0000000000000000000000000000000000000000;;	      read_from_head true
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    <filter reform.**>
0000000000000000000000000000000000000000;;	      type parser
0000000000000000000000000000000000000000;;	      format /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<log>.*)/
0000000000000000000000000000000000000000;;	      reserve_data true
0000000000000000000000000000000000000000;;	      suppress_parse_error_log true
0000000000000000000000000000000000000000;;	      key_name log
0000000000000000000000000000000000000000;;	    </filter>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    <match reform.**>
0000000000000000000000000000000000000000;;	      type record_reformer
0000000000000000000000000000000000000000;;	      enable_ruby true
0000000000000000000000000000000000000000;;	      tag raw.kubernetes.${tag_suffix[4].split('-')[0..-2].join('-')}
0000000000000000000000000000000000000000;;	    </match>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Detect exceptions in the log output and forward them as one log entry.
0000000000000000000000000000000000000000;;	    <match raw.kubernetes.**>
0000000000000000000000000000000000000000;;	      @type detect_exceptions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      remove_tag_prefix raw
0000000000000000000000000000000000000000;;	      message log
0000000000000000000000000000000000000000;;	      stream stream
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5
0000000000000000000000000000000000000000;;	      max_bytes 500000
0000000000000000000000000000000000000000;;	      max_lines 1000
0000000000000000000000000000000000000000;;	    </match>
0000000000000000000000000000000000000000;;	  system.input.conf: |-
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format /^(?<time>[^ ]* [^ ,]*)[^\[]*\[[^\]]*\]\[(?<severity>[^ \]]*) *\] (?<message>.*)$/
0000000000000000000000000000000000000000;;	      time_format %Y-%m-%d %H:%M:%S
0000000000000000000000000000000000000000;;	      path /var/log/salt/minion
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-salt.pos
0000000000000000000000000000000000000000;;	      tag salt
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format syslog
0000000000000000000000000000000000000000;;	      path /var/log/startupscript.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-startupscript.log.pos
0000000000000000000000000000000000000000;;	      tag startupscript
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Examples:
0000000000000000000000000000000000000000;;	    # time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"
0000000000000000000000000000000000000000;;	    # time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format /^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
0000000000000000000000000000000000000000;;	      path /var/log/docker.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-docker.log.pos
0000000000000000000000000000000000000000;;	      tag docker
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      # Not parsing this, because it doesn't have anything particularly useful to
0000000000000000000000000000000000000000;;	      # parse out of it (like severities).
0000000000000000000000000000000000000000;;	      format none
0000000000000000000000000000000000000000;;	      path /var/log/etcd.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-etcd.log.pos
0000000000000000000000000000000000000000;;	      tag etcd
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Multi-line parsing is required for all the kube logs because very large log
0000000000000000000000000000000000000000;;	    # statements, such as those that include entire object bodies, get split into
0000000000000000000000000000000000000000;;	    # multiple lines by glog.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\w\d{4}/
0000000000000000000000000000000000000000;;	      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
0000000000000000000000000000000000000000;;	      time_format %m%d %H:%M:%S.%N
0000000000000000000000000000000000000000;;	      path /var/log/kubelet.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-kubelet.log.pos
0000000000000000000000000000000000000000;;	      tag kubelet
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # I1118 21:26:53.975789       6 proxier.go:1096] Port "nodePort for kube-system/default-http-backend:http" (:31429/tcp) was open before and is still needed
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\w\d{4}/
0000000000000000000000000000000000000000;;	      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
0000000000000000000000000000000000000000;;	      time_format %m%d %H:%M:%S.%N
0000000000000000000000000000000000000000;;	      path /var/log/kube-proxy.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-kube-proxy.log.pos
0000000000000000000000000000000000000000;;	      tag kube-proxy
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\w\d{4}/
0000000000000000000000000000000000000000;;	      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
0000000000000000000000000000000000000000;;	      time_format %m%d %H:%M:%S.%N
0000000000000000000000000000000000000000;;	      path /var/log/kube-apiserver.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-kube-apiserver.log.pos
0000000000000000000000000000000000000000;;	      tag kube-apiserver
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # 2017-02-09T00:15:57.992775796Z AUDIT: id="90c73c7c-97d6-4b65-9461-f94606ff825f" ip="104.132.1.72" method="GET" user="kubecfg" as="<self>" asgroups="<lookup>" namespace="default" uri="/api/v1/namespaces/default/pods"
0000000000000000000000000000000000000000;;	    # 2017-02-09T00:15:57.993528822Z AUDIT: id="90c73c7c-97d6-4b65-9461-f94606ff825f" response="200"
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\S+\s+AUDIT:/
0000000000000000000000000000000000000000;;	      # Fields must be explicitly captured by name to be parsed into the record.
0000000000000000000000000000000000000000;;	      # Fields may not always be present, and order may change, so this just looks
0000000000000000000000000000000000000000;;	      # for a list of key="\"quoted\" value" pairs separated by spaces.
0000000000000000000000000000000000000000;;	      # Unknown fields are ignored.
0000000000000000000000000000000000000000;;	      # Note: We can't separate query/response lines as format1/format2 because
0000000000000000000000000000000000000000;;	      #       they don't always come one after the other for a given query.
0000000000000000000000000000000000000000;;	      # TODO: Maybe add a JSON output mode to audit log so we can get rid of this?
0000000000000000000000000000000000000000;;	      format1 /^(?<time>\S+) AUDIT:(?: (?:id="(?<id>(?:[^"\\]|\\.)*)"|ip="(?<ip>(?:[^"\\]|\\.)*)"|method="(?<method>(?:[^"\\]|\\.)*)"|user="(?<user>(?:[^"\\]|\\.)*)"|groups="(?<groups>(?:[^"\\]|\\.)*)"|as="(?<as>(?:[^"\\]|\\.)*)"|asgroups="(?<asgroups>(?:[^"\\]|\\.)*)"|namespace="(?<namespace>(?:[^"\\]|\\.)*)"|uri="(?<uri>(?:[^"\\]|\\.)*)"|response="(?<response>(?:[^"\\]|\\.)*)"|\w+="(?:[^"\\]|\\.)*"))*/
0000000000000000000000000000000000000000;;	      time_format %FT%T.%L%Z
0000000000000000000000000000000000000000;;	      path /var/log/kube-apiserver-audit.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-kube-apiserver-audit.log.pos
0000000000000000000000000000000000000000;;	      tag kube-apiserver-audit
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\w\d{4}/
0000000000000000000000000000000000000000;;	      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
0000000000000000000000000000000000000000;;	      time_format %m%d %H:%M:%S.%N
0000000000000000000000000000000000000000;;	      path /var/log/kube-controller-manager.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-kube-controller-manager.log.pos
0000000000000000000000000000000000000000;;	      tag kube-controller-manager
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\w\d{4}/
0000000000000000000000000000000000000000;;	      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
0000000000000000000000000000000000000000;;	      time_format %m%d %H:%M:%S.%N
0000000000000000000000000000000000000000;;	      path /var/log/kube-scheduler.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-kube-scheduler.log.pos
0000000000000000000000000000000000000000;;	      tag kube-scheduler
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # I1104 10:36:20.242766       5 rescheduler.go:73] Running Rescheduler
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\w\d{4}/
0000000000000000000000000000000000000000;;	      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
0000000000000000000000000000000000000000;;	      time_format %m%d %H:%M:%S.%N
0000000000000000000000000000000000000000;;	      path /var/log/rescheduler.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-rescheduler.log.pos
0000000000000000000000000000000000000000;;	      tag rescheduler
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\w\d{4}/
0000000000000000000000000000000000000000;;	      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
0000000000000000000000000000000000000000;;	      time_format %m%d %H:%M:%S.%N
0000000000000000000000000000000000000000;;	      path /var/log/glbc.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-glbc.log.pos
0000000000000000000000000000000000000000;;	      tag glbc
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Example:
0000000000000000000000000000000000000000;;	    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type tail
0000000000000000000000000000000000000000;;	      format multiline
0000000000000000000000000000000000000000;;	      multiline_flush_interval 5s
0000000000000000000000000000000000000000;;	      format_firstline /^\w\d{4}/
0000000000000000000000000000000000000000;;	      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
0000000000000000000000000000000000000000;;	      time_format %m%d %H:%M:%S.%N
0000000000000000000000000000000000000000;;	      path /var/log/cluster-autoscaler.log
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-cluster-autoscaler.log.pos
0000000000000000000000000000000000000000;;	      tag cluster-autoscaler
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Logs from systemd-journal for interesting services.
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type systemd
0000000000000000000000000000000000000000;;	      filters [{ "_SYSTEMD_UNIT": "docker.service" }]
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-journald-docker.pos
0000000000000000000000000000000000000000;;	      read_from_head true
0000000000000000000000000000000000000000;;	      tag docker
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      type systemd
0000000000000000000000000000000000000000;;	      filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
0000000000000000000000000000000000000000;;	      pos_file /var/log/gcp-journald-kubelet.pos
0000000000000000000000000000000000000000;;	      read_from_head true
0000000000000000000000000000000000000000;;	      tag kubelet
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	  monitoring.conf: |-
0000000000000000000000000000000000000000;;	    # Prometheus monitoring
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      @type prometheus
0000000000000000000000000000000000000000;;	      port 31337
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      @type prometheus_monitor
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # This source is used to acquire approximate process start timestamp,
0000000000000000000000000000000000000000;;	    # which purpose is explained before the corresponding output plugin.
0000000000000000000000000000000000000000;;	    <source>
0000000000000000000000000000000000000000;;	      @type exec
0000000000000000000000000000000000000000;;	      command /bin/sh -c 'date +%s'
0000000000000000000000000000000000000000;;	      tag process_start
0000000000000000000000000000000000000000;;	      time_format %Y-%m-%d %H:%M:%S
0000000000000000000000000000000000000000;;	      keys process_start_timestamp
0000000000000000000000000000000000000000;;	    </source>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # This filter is used to convert process start timestamp to integer
0000000000000000000000000000000000000000;;	    # value for correct ingestion in the prometheus output plugin.
0000000000000000000000000000000000000000;;	    <filter process_start>
0000000000000000000000000000000000000000;;	      @type record_transformer
0000000000000000000000000000000000000000;;	      enable_ruby true
0000000000000000000000000000000000000000;;	      auto_typecast true
0000000000000000000000000000000000000000;;	      <record>
0000000000000000000000000000000000000000;;	        process_start_timestamp ${record["process_start_timestamp"].to_i}
0000000000000000000000000000000000000000;;	      </record>
0000000000000000000000000000000000000000;;	    </filter>
0000000000000000000000000000000000000000;;	  output.conf: |-
0000000000000000000000000000000000000000;;	    # This match is placed before the all-matching output to provide metric
0000000000000000000000000000000000000000;;	    # exporter with a process start timestamp for correct exporting of
0000000000000000000000000000000000000000;;	    # cumulative metrics to Stackdriver.
0000000000000000000000000000000000000000;;	    <match process_start>
0000000000000000000000000000000000000000;;	      @type prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      <metric>
0000000000000000000000000000000000000000;;	        type gauge
0000000000000000000000000000000000000000;;	        name process_start_time_seconds
0000000000000000000000000000000000000000;;	        desc Timestamp of the process start in seconds
0000000000000000000000000000000000000000;;	        key process_start_timestamp
0000000000000000000000000000000000000000;;	      </metric>
0000000000000000000000000000000000000000;;	    </match>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # We use 2 output stanzas - one to handle the container logs and one to handle
0000000000000000000000000000000000000000;;	    # the node daemon logs, the latter of which explicitly sends its logs to the
0000000000000000000000000000000000000000;;	    # compute.googleapis.com service rather than container.googleapis.com to keep
0000000000000000000000000000000000000000;;	    # them separate since most users don't care about the node logs.
0000000000000000000000000000000000000000;;	    <match kubernetes.**>
0000000000000000000000000000000000000000;;	      @type google_cloud
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      # Collect metrics in Prometheus registry about plugin activity.
0000000000000000000000000000000000000000;;	      enable_monitoring true
0000000000000000000000000000000000000000;;	      monitoring_type prometheus
0000000000000000000000000000000000000000;;	      # Set the buffer type to file to improve the reliability and reduce the memory consumption
0000000000000000000000000000000000000000;;	      buffer_type file
0000000000000000000000000000000000000000;;	      buffer_path /var/log/fluentd-buffers/kubernetes.containers.buffer
0000000000000000000000000000000000000000;;	      # Set queue_full action to block because we want to pause gracefully
0000000000000000000000000000000000000000;;	      # in case of the off-the-limits load instead of throwing an exception
0000000000000000000000000000000000000000;;	      buffer_queue_full_action block
0000000000000000000000000000000000000000;;	      # Set the chunk limit conservatively to avoid exceeding the GCL limit
0000000000000000000000000000000000000000;;	      # of 10MiB per write request.
0000000000000000000000000000000000000000;;	      buffer_chunk_limit 2M
0000000000000000000000000000000000000000;;	      # Cap the combined memory usage of this buffer and the one below to
0000000000000000000000000000000000000000;;	      # 2MiB/chunk * (6 + 2) chunks = 16 MiB
0000000000000000000000000000000000000000;;	      buffer_queue_limit 6
0000000000000000000000000000000000000000;;	      # Never wait more than 5 seconds before flushing logs in the non-error case.
0000000000000000000000000000000000000000;;	      flush_interval 5s
0000000000000000000000000000000000000000;;	      # Never wait longer than 30 seconds between retries.
0000000000000000000000000000000000000000;;	      max_retry_wait 30
0000000000000000000000000000000000000000;;	      # Disable the limit on the number of retries (retry forever).
0000000000000000000000000000000000000000;;	      disable_retry_limit
0000000000000000000000000000000000000000;;	      # Use multiple threads for processing.
0000000000000000000000000000000000000000;;	      num_threads 2
0000000000000000000000000000000000000000;;	    </match>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Keep a smaller buffer here since these logs are less important than the user's
0000000000000000000000000000000000000000;;	    # container logs.
0000000000000000000000000000000000000000;;	    <match **>
0000000000000000000000000000000000000000;;	      @type google_cloud
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      enable_monitoring true
0000000000000000000000000000000000000000;;	      monitoring_type prometheus
0000000000000000000000000000000000000000;;	      detect_subservice false
0000000000000000000000000000000000000000;;	      buffer_type file
0000000000000000000000000000000000000000;;	      buffer_path /var/log/fluentd-buffers/kubernetes.system.buffer
0000000000000000000000000000000000000000;;	      buffer_queue_full_action block
0000000000000000000000000000000000000000;;	      buffer_chunk_limit 2M
0000000000000000000000000000000000000000;;	      buffer_queue_limit 2
0000000000000000000000000000000000000000;;	      flush_interval 5s
0000000000000000000000000000000000000000;;	      max_retry_wait 30
0000000000000000000000000000000000000000;;	      disable_retry_limit
0000000000000000000000000000000000000000;;	      num_threads 2
0000000000000000000000000000000000000000;;	    </match>
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: fluentd-gcp-config-v1.1
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    addonmanager.kubernetes.io/mode: Reconcile
