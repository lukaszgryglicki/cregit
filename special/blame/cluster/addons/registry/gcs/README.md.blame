0000000000000000000000000000000000000000;;	# Kube-Registry with GCS storage backend
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Besides local file system, docker registry also supports a number of cloud storage backends. Full list of supported backend can be found [here](https://docs.docker.com/registry/configuration/#storage). This document describes how to enable GCS for kube-registry as storage backend. 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A few preparation steps are needed. 
0000000000000000000000000000000000000000;;	 1. Create a bucket named kube-registry in GCS.
0000000000000000000000000000000000000000;;	 1. Create a service account for GCS access and create key file in json format. Detail instruction can be found [here](https://cloud.google.com/storage/docs/authentication#service_accounts).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Pack Keyfile into a Secret
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Assuming you have downloaded the keyfile as `keyfile.json`. Create secret with the `keyfile.json`...
0000000000000000000000000000000000000000;;	```console
0000000000000000000000000000000000000000;;	$ kubectl --namespace=kube-system create secret generic gcs-key-secret --from-file=keyfile=keyfile.json
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Run Registry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	<!-- BEGIN MUNGE: EXAMPLE registry-gcs-rc.yaml -->
0000000000000000000000000000000000000000;;	```yaml
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: ReplicationController
0000000000000000000000000000000000000000;;	metadata:
0000000000000000000000000000000000000000;;	  name: kube-registry-v0
0000000000000000000000000000000000000000;;	  namespace: kube-system
0000000000000000000000000000000000000000;;	  labels:
0000000000000000000000000000000000000000;;	    k8s-app: kube-registry
0000000000000000000000000000000000000000;;	    version: v0
0000000000000000000000000000000000000000;;	#    kubernetes.io/cluster-service: "true"
0000000000000000000000000000000000000000;;	spec:
0000000000000000000000000000000000000000;;	  replicas: 1
0000000000000000000000000000000000000000;;	  selector:
0000000000000000000000000000000000000000;;	    k8s-app: kube-registry
0000000000000000000000000000000000000000;;	    version: v0
0000000000000000000000000000000000000000;;	  template:
0000000000000000000000000000000000000000;;	    metadata:
0000000000000000000000000000000000000000;;	      labels:
0000000000000000000000000000000000000000;;	        k8s-app: kube-registry
0000000000000000000000000000000000000000;;	        version: v0
0000000000000000000000000000000000000000;;	#        kubernetes.io/cluster-service: "true"
0000000000000000000000000000000000000000;;	    spec:
0000000000000000000000000000000000000000;;	      containers:
0000000000000000000000000000000000000000;;	      - name: registry
0000000000000000000000000000000000000000;;	        image: registry:2
0000000000000000000000000000000000000000;;	        resources:
0000000000000000000000000000000000000000;;	          # keep request = limit to keep this container in guaranteed class
0000000000000000000000000000000000000000;;	          limits:
0000000000000000000000000000000000000000;;	            cpu: 100m
0000000000000000000000000000000000000000;;	            memory: 100Mi
0000000000000000000000000000000000000000;;	          requests:
0000000000000000000000000000000000000000;;	            cpu: 100m
0000000000000000000000000000000000000000;;	            memory: 100Mi
0000000000000000000000000000000000000000;;	        env:
0000000000000000000000000000000000000000;;	        - name: REGISTRY_HTTP_ADDR
0000000000000000000000000000000000000000;;	          value: :5000
0000000000000000000000000000000000000000;;	        - name: REGISTRY_STORAGE
0000000000000000000000000000000000000000;;	          value: gcs
0000000000000000000000000000000000000000;;	        - name: REGISTRY_STORAGE_GCS_BUCKET
0000000000000000000000000000000000000000;;	          value: kube-registry
0000000000000000000000000000000000000000;;	        - name: REGISTRY_STORAGE_GCS_KEYFILE
0000000000000000000000000000000000000000;;	          value: /gcs/keyfile
0000000000000000000000000000000000000000;;	        ports:
0000000000000000000000000000000000000000;;	        - containerPort: 5000
0000000000000000000000000000000000000000;;	          name: registry
0000000000000000000000000000000000000000;;	          protocol: TCP
0000000000000000000000000000000000000000;;	        volumeMounts:
0000000000000000000000000000000000000000;;	        - name: gcs-key
0000000000000000000000000000000000000000;;	          mountPath: /gcs
0000000000000000000000000000000000000000;;	      volumes:
0000000000000000000000000000000000000000;;	      - name: gcs-key
0000000000000000000000000000000000000000;;	        secret:
0000000000000000000000000000000000000000;;	          secretName: gcs-key-secret
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	<!-- END MUNGE: EXAMPLE registry-gcs-rc.yaml -->
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	No changes are needed for other components (kube-registry service and proxy). 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/cluster/addons/registry/gcs/README.md?pixel)]()
