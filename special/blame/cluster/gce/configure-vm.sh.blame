0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If we have any arguments at all, this is a push and not just setup.
0000000000000000000000000000000000000000;;	is_push=$@
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function ensure-basic-networking() {
0000000000000000000000000000000000000000;;	  # Deal with GCE networking bring-up race. (We rely on DNS for a lot,
0000000000000000000000000000000000000000;;	  # and it's just not worth doing a whole lot of startup work if this
0000000000000000000000000000000000000000;;	  # isn't ready yet.)
0000000000000000000000000000000000000000;;	  until getent hosts metadata.google.internal &>/dev/null; do
0000000000000000000000000000000000000000;;	    echo 'Waiting for functional DNS (trying to resolve metadata.google.internal)...'
0000000000000000000000000000000000000000;;	    sleep 3
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  until getent hosts $(hostname -f || echo _error_) &>/dev/null; do
0000000000000000000000000000000000000000;;	    echo 'Waiting for functional DNS (trying to resolve my own FQDN)...'
0000000000000000000000000000000000000000;;	    sleep 3
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  until getent hosts $(hostname -i || echo _error_) &>/dev/null; do
0000000000000000000000000000000000000000;;	    echo 'Waiting for functional DNS (trying to resolve my own IP)...'
0000000000000000000000000000000000000000;;	    sleep 3
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Networking functional on $(hostname) ($(hostname -i))"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A hookpoint for installing any needed packages
0000000000000000000000000000000000000000;;	ensure-packages() {
0000000000000000000000000000000000000000;;	  :
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-node-pki {
0000000000000000000000000000000000000000;;	  echo "Creating node pki files"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r pki_dir="/etc/kubernetes/pki"
0000000000000000000000000000000000000000;;	  mkdir -p "${pki_dir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -z "${CA_CERT_BUNDLE:-}" ]]; then
0000000000000000000000000000000000000000;;	    CA_CERT_BUNDLE="${CA_CERT}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  CA_CERT_BUNDLE_PATH="${pki_dir}/ca-certificates.crt"
0000000000000000000000000000000000000000;;	  echo "${CA_CERT_BUNDLE}" | base64 --decode > "${CA_CERT_BUNDLE_PATH}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ ! -z "${KUBELET_CERT:-}" && ! -z "${KUBELET_KEY:-}" ]]; then
0000000000000000000000000000000000000000;;	    KUBELET_CERT_PATH="${pki_dir}/kubelet.crt"
0000000000000000000000000000000000000000;;	    echo "${KUBELET_CERT}" | base64 --decode > "${KUBELET_CERT_PATH}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    KUBELET_KEY_PATH="${pki_dir}/kubelet.key"
0000000000000000000000000000000000000000;;	    echo "${KUBELET_KEY}" | base64 --decode > "${KUBELET_KEY_PATH}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # TODO(mikedanese): remove this when we don't support downgrading to versions
0000000000000000000000000000000000000000;;	  # < 1.6.
0000000000000000000000000000000000000000;;	  ln -sf "${CA_CERT_BUNDLE_PATH}" /etc/kubernetes/ca.crt
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A hookpoint for setting up local devices
0000000000000000000000000000000000000000;;	ensure-local-disks() {
0000000000000000000000000000000000000000;;	 for ssd in /dev/disk/by-id/google-local-ssd-*; do
0000000000000000000000000000000000000000;;	    if [ -e "$ssd" ]; then
0000000000000000000000000000000000000000;;	      ssdnum=`echo $ssd | sed -e 's/\/dev\/disk\/by-id\/google-local-ssd-\([0-9]*\)/\1/'`
0000000000000000000000000000000000000000;;	      echo "Formatting and mounting local SSD $ssd to /mnt/disks/ssd$ssdnum"
0000000000000000000000000000000000000000;;	      mkdir -p /mnt/disks/ssd$ssdnum
0000000000000000000000000000000000000000;;	      /usr/share/google/safe_format_and_mount -m "mkfs.ext4 -F" "${ssd}" /mnt/disks/ssd$ssdnum &>/var/log/local-ssd-$ssdnum-mount.log || \
0000000000000000000000000000000000000000;;	      { echo "Local SSD $ssdnum mount failed, review /var/log/local-ssd-$ssdnum-mount.log"; return 1; }
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      echo "No local SSD disks found."
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function config-ip-firewall {
0000000000000000000000000000000000000000;;	  echo "Configuring IP firewall rules"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  iptables -N KUBE-METADATA-SERVER
0000000000000000000000000000000000000000;;	  iptables -I FORWARD -p tcp -d 169.254.169.254 --dport 80 -j KUBE-METADATA-SERVER
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_FIREWALL_METADATA_SERVER:-}" ]]; then
0000000000000000000000000000000000000000;;	    iptables -A KUBE-METADATA-SERVER -j DROP
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function ensure-install-dir() {
0000000000000000000000000000000000000000;;	  INSTALL_DIR="/var/cache/kubernetes-install"
0000000000000000000000000000000000000000;;	  mkdir -p ${INSTALL_DIR}
0000000000000000000000000000000000000000;;	  cd ${INSTALL_DIR}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function salt-apiserver-timeout-grain() {
0000000000000000000000000000000000000000;;	    cat <<EOF >>/etc/salt/minion.d/grains.conf
0000000000000000000000000000000000000000;;	  minRequestTimeout: '$1'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function set-broken-motd() {
0000000000000000000000000000000000000000;;	  echo -e '\nBroken (or in progress) Kubernetes node setup! Suggested first step:\n  tail /var/log/startupscript.log\n' > /etc/motd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function reset-motd() {
0000000000000000000000000000000000000000;;	  # kubelet is installed both on the master and nodes, and the version is easy to parse (unlike kubectl)
0000000000000000000000000000000000000000;;	  local -r version="$(/usr/local/bin/kubelet --version=true | cut -f2 -d " ")"
0000000000000000000000000000000000000000;;	  # This logic grabs either a release tag (v1.2.1 or v1.2.1-alpha.1),
0000000000000000000000000000000000000000;;	  # or the git hash that's in the build info.
0000000000000000000000000000000000000000;;	  local gitref="$(echo "${version}" | sed -r "s/(v[0-9]+\.[0-9]+\.[0-9]+)(-[a-z]+\.[0-9]+)?.*/\1\2/g")"
0000000000000000000000000000000000000000;;	  local devel=""
0000000000000000000000000000000000000000;;	  if [[ "${gitref}" != "${version}" ]]; then
0000000000000000000000000000000000000000;;	    devel="
0000000000000000000000000000000000000000;;	Note: This looks like a development version, which might not be present on GitHub.
0000000000000000000000000000000000000000;;	If it isn't, the closest tag is at:
0000000000000000000000000000000000000000;;	  https://github.com/kubernetes/kubernetes/tree/${gitref}
0000000000000000000000000000000000000000;;	"
0000000000000000000000000000000000000000;;	    gitref="${version//*+/}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  cat > /etc/motd <<EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Welcome to Kubernetes ${version}!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can find documentation for Kubernetes at:
0000000000000000000000000000000000000000;;	  http://docs.kubernetes.io/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The source for this release can be found at:
0000000000000000000000000000000000000000;;	  /usr/local/share/doc/kubernetes/kubernetes-src.tar.gz
0000000000000000000000000000000000000000;;	Or you can download it at:
0000000000000000000000000000000000000000;;	  https://storage.googleapis.com/kubernetes-release/release/${version}/kubernetes-src.tar.gz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is based on the Kubernetes source at:
0000000000000000000000000000000000000000;;	  https://github.com/kubernetes/kubernetes/tree/${gitref}
0000000000000000000000000000000000000000;;	${devel}
0000000000000000000000000000000000000000;;	For Kubernetes copyright and licensing information, see:
0000000000000000000000000000000000000000;;	  /usr/local/share/doc/kubernetes/LICENSES
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function curl-metadata() {
0000000000000000000000000000000000000000;;	  curl --fail --retry 5 --silent -H 'Metadata-Flavor: Google' "http://metadata/computeMetadata/v1/instance/attributes/${1}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function set-kube-env() {
0000000000000000000000000000000000000000;;	  local kube_env_yaml="${INSTALL_DIR}/kube_env.yaml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  until curl-metadata kube-env > "${kube_env_yaml}"; do
0000000000000000000000000000000000000000;;	    echo 'Waiting for kube-env...'
0000000000000000000000000000000000000000;;	    sleep 3
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # kube-env has all the environment variables we care about, in a flat yaml format
0000000000000000000000000000000000000000;;	  eval "$(python -c '
0000000000000000000000000000000000000000;;	import pipes,sys,yaml
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for k,v in yaml.load(sys.stdin).iteritems():
0000000000000000000000000000000000000000;;	  print("""readonly {var}={value}""".format(var = k, value = pipes.quote(str(v))))
0000000000000000000000000000000000000000;;	  print("""export {var}""".format(var = k))
0000000000000000000000000000000000000000;;	  ' < """${kube_env_yaml}""")"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function remove-docker-artifacts() {
0000000000000000000000000000000000000000;;	  echo "== Deleting docker0 =="
0000000000000000000000000000000000000000;;	  apt-get-install bridge-utils
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Remove docker artifacts on minion nodes, if present
0000000000000000000000000000000000000000;;	  iptables -t nat -F || true
0000000000000000000000000000000000000000;;	  ifconfig docker0 down || true
0000000000000000000000000000000000000000;;	  brctl delbr docker0 || true
0000000000000000000000000000000000000000;;	  echo "== Finished deleting docker0 =="
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Retry a download until we get it. Takes a hash and a set of URLs.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# $1 is the sha1 of the URL. Can be "" if the sha1 is unknown.
0000000000000000000000000000000000000000;;	# $2+ are the URLs to download.
0000000000000000000000000000000000000000;;	download-or-bust() {
0000000000000000000000000000000000000000;;	  local -r hash="$1"
0000000000000000000000000000000000000000;;	  shift 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  urls=( $* )
0000000000000000000000000000000000000000;;	  while true; do
0000000000000000000000000000000000000000;;	    for url in "${urls[@]}"; do
0000000000000000000000000000000000000000;;	      local file="${url##*/}"
0000000000000000000000000000000000000000;;	      rm -f "${file}"
0000000000000000000000000000000000000000;;	      if ! curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 "${url}"; then
0000000000000000000000000000000000000000;;	        echo "== Failed to download ${url}. Retrying. =="
0000000000000000000000000000000000000000;;	      elif [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
0000000000000000000000000000000000000000;;	        echo "== Hash validation of ${url} failed. Retrying. =="
0000000000000000000000000000000000000000;;	      else
0000000000000000000000000000000000000000;;	        if [[ -n "${hash}" ]]; then
0000000000000000000000000000000000000000;;	          echo "== Downloaded ${url} (SHA1 = ${hash}) =="
0000000000000000000000000000000000000000;;	        else
0000000000000000000000000000000000000000;;	          echo "== Downloaded ${url} =="
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	        return
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	validate-hash() {
0000000000000000000000000000000000000000;;	  local -r file="$1"
0000000000000000000000000000000000000000;;	  local -r expected="$2"
0000000000000000000000000000000000000000;;	  local actual
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  actual=$(sha1sum ${file} | awk '{ print $1 }') || true
0000000000000000000000000000000000000000;;	  if [[ "${actual}" != "${expected}" ]]; then
0000000000000000000000000000000000000000;;	    echo "== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} =="
0000000000000000000000000000000000000000;;	    return 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	apt-get-install() {
0000000000000000000000000000000000000000;;	  local -r packages=( $@ )
0000000000000000000000000000000000000000;;	  installed=true
0000000000000000000000000000000000000000;;	  for package in "${packages[@]}"; do
0000000000000000000000000000000000000000;;	    if ! dpkg -s "${package}" &>/dev/null; then
0000000000000000000000000000000000000000;;	      installed=false
0000000000000000000000000000000000000000;;	      break
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  if [[ "${installed}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    echo "== ${packages[@]} already installed, skipped apt-get install ${packages[@]} =="
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  apt-get-update
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Forcibly install packages (options borrowed from Salt logs).
0000000000000000000000000000000000000000;;	  until apt-get -q -y -o DPkg::Options::=--force-confold -o DPkg::Options::=--force-confdef install $@; do
0000000000000000000000000000000000000000;;	    echo "== install of packages $@ failed, retrying =="
0000000000000000000000000000000000000000;;	    sleep 5
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	apt-get-update() {
0000000000000000000000000000000000000000;;	  echo "== Refreshing package database =="
0000000000000000000000000000000000000000;;	  until apt-get update; do
0000000000000000000000000000000000000000;;	    echo "== apt-get update failed, retrying =="
0000000000000000000000000000000000000000;;	    sleep 5
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Restart any services that need restarting due to a library upgrade
0000000000000000000000000000000000000000;;	# Uses needrestart
0000000000000000000000000000000000000000;;	restart-updated-services() {
0000000000000000000000000000000000000000;;	  # We default to restarting services, because this is only done as part of an update
0000000000000000000000000000000000000000;;	  if [[ "${AUTO_RESTART_SERVICES:-true}" != "true" ]]; then
0000000000000000000000000000000000000000;;	    echo "Auto restart of services prevented by AUTO_RESTART_SERVICES=${AUTO_RESTART_SERVICES}"
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "Restarting services with updated libraries (needrestart -r a)"
0000000000000000000000000000000000000000;;	  # The pipes make sure that needrestart doesn't think it is running with a TTY
0000000000000000000000000000000000000000;;	  # Debian bug #803249; fixed but not necessarily in package repos yet
0000000000000000000000000000000000000000;;	  echo "" | needrestart -r a 2>&1 | tee /dev/null
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Reboot the machine if /var/run/reboot-required exists
0000000000000000000000000000000000000000;;	reboot-if-required() {
0000000000000000000000000000000000000000;;	  if [[ ! -e "/var/run/reboot-required" ]]; then
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Reboot is required (/var/run/reboot-required detected)"
0000000000000000000000000000000000000000;;	  if [[ -e "/var/run/reboot-required.pkgs" ]]; then
0000000000000000000000000000000000000000;;	    echo "Packages that triggered reboot:"
0000000000000000000000000000000000000000;;	    cat /var/run/reboot-required.pkgs
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # We default to rebooting the machine because this is only done as part of an update
0000000000000000000000000000000000000000;;	  if [[ "${AUTO_REBOOT:-true}" != "true" ]]; then
0000000000000000000000000000000000000000;;	    echo "Reboot prevented by AUTO_REBOOT=${AUTO_REBOOT}"
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  rm -f /var/run/reboot-required
0000000000000000000000000000000000000000;;	  rm -f /var/run/reboot-required.pkgs
0000000000000000000000000000000000000000;;	  echo "Triggering reboot"
0000000000000000000000000000000000000000;;	  init 6
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Install upgrades using unattended-upgrades, then reboot or restart services
0000000000000000000000000000000000000000;;	auto-upgrade() {
0000000000000000000000000000000000000000;;	  # We default to not installing upgrades
0000000000000000000000000000000000000000;;	  if [[ "${AUTO_UPGRADE:-false}" != "true" ]]; then
0000000000000000000000000000000000000000;;	    echo "AUTO_UPGRADE not set to true; won't auto-upgrade"
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  apt-get-install unattended-upgrades needrestart
0000000000000000000000000000000000000000;;	  unattended-upgrade --debug
0000000000000000000000000000000000000000;;	  reboot-if-required # We may reboot the machine right here
0000000000000000000000000000000000000000;;	  restart-updated-services
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Install salt from GCS.  See README.md for instructions on how to update these
0000000000000000000000000000000000000000;;	# debs.
0000000000000000000000000000000000000000;;	install-salt() {
0000000000000000000000000000000000000000;;	  if dpkg -s salt-minion &>/dev/null; then
0000000000000000000000000000000000000000;;	    echo "== SaltStack already installed, skipping install step =="
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "== Refreshing package database =="
0000000000000000000000000000000000000000;;	  until apt-get update; do
0000000000000000000000000000000000000000;;	    echo "== apt-get update failed, retrying =="
0000000000000000000000000000000000000000;;	    sleep 5
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /var/cache/salt-install
0000000000000000000000000000000000000000;;	  cd /var/cache/salt-install
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  DEBS=(
0000000000000000000000000000000000000000;;	    libzmq3_3.2.3+dfsg-1~bpo70~dst+1_amd64.deb
0000000000000000000000000000000000000000;;	    python-zmq_13.1.0-1~bpo70~dst+1_amd64.deb
0000000000000000000000000000000000000000;;	    salt-common_2014.1.13+ds-1~bpo70+1_all.deb
0000000000000000000000000000000000000000;;	    salt-minion_2014.1.13+ds-1~bpo70+1_all.deb
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  URL_BASE="https://storage.googleapis.com/kubernetes-release/salt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for deb in "${DEBS[@]}"; do
0000000000000000000000000000000000000000;;	    if [ ! -e "${deb}" ]; then
0000000000000000000000000000000000000000;;	      download-or-bust "" "${URL_BASE}/${deb}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Based on
0000000000000000000000000000000000000000;;	  # https://major.io/2014/06/26/install-debian-packages-without-starting-daemons/
0000000000000000000000000000000000000000;;	  # We do this to prevent Salt from starting the salt-minion
0000000000000000000000000000000000000000;;	  # daemon. The other packages don't have relevant daemons. (If you
0000000000000000000000000000000000000000;;	  # add a package that needs a daemon started, add it to a different
0000000000000000000000000000000000000000;;	  # list.)
0000000000000000000000000000000000000000;;	  cat > /usr/sbin/policy-rc.d <<EOF
0000000000000000000000000000000000000000;;	#!/bin/sh
0000000000000000000000000000000000000000;;	echo "Salt shall not start." >&2
0000000000000000000000000000000000000000;;	exit 101
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  chmod 0755 /usr/sbin/policy-rc.d
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for deb in "${DEBS[@]}"; do
0000000000000000000000000000000000000000;;	    echo "== Installing ${deb}, ignore dependency complaints (will fix later) =="
0000000000000000000000000000000000000000;;	    dpkg --skip-same-version --force-depends -i "${deb}"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # This will install any of the unmet dependencies from above.
0000000000000000000000000000000000000000;;	  echo "== Installing unmet dependencies =="
0000000000000000000000000000000000000000;;	  until apt-get install -f -y; do
0000000000000000000000000000000000000000;;	    echo "== apt-get install failed, retrying =="
0000000000000000000000000000000000000000;;	    sleep 5
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  rm /usr/sbin/policy-rc.d
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Log a timestamp
0000000000000000000000000000000000000000;;	  echo "== Finished installing Salt =="
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Ensure salt-minion isn't running and never runs
0000000000000000000000000000000000000000;;	stop-salt-minion() {
0000000000000000000000000000000000000000;;	  if [[ -e /etc/init/salt-minion.override ]]; then
0000000000000000000000000000000000000000;;	    # Assume this has already run (upgrade, or baked into containervm)
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # This ensures it on next reboot
0000000000000000000000000000000000000000;;	  echo manual > /etc/init/salt-minion.override
0000000000000000000000000000000000000000;;	  update-rc.d salt-minion disable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  while service salt-minion status >/dev/null; do
0000000000000000000000000000000000000000;;	    echo "salt-minion found running, stopping"
0000000000000000000000000000000000000000;;	    service salt-minion stop
0000000000000000000000000000000000000000;;	    sleep 1
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Finds the master PD device; returns it in MASTER_PD_DEVICE
0000000000000000000000000000000000000000;;	find-master-pd() {
0000000000000000000000000000000000000000;;	  MASTER_PD_DEVICE=""
0000000000000000000000000000000000000000;;	  if [[ ! -e /dev/disk/by-id/google-master-pd ]]; then
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  device_info=$(ls -l /dev/disk/by-id/google-master-pd)
0000000000000000000000000000000000000000;;	  relative_path=${device_info##* }
0000000000000000000000000000000000000000;;	  MASTER_PD_DEVICE="/dev/disk/by-id/${relative_path}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create the overlay files for the salt tree.  We create these in a separate
0000000000000000000000000000000000000000;;	# place so that we can blow away the rest of the salt configs on a kube-push and
0000000000000000000000000000000000000000;;	# re-apply these.
0000000000000000000000000000000000000000;;	function create-salt-pillar() {
0000000000000000000000000000000000000000;;	  # Always overwrite the cluster-params.sls (even on a push, we have
0000000000000000000000000000000000000000;;	  # these variables)
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/pillar
0000000000000000000000000000000000000000;;	  cat <<EOF >/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	instance_prefix: '$(echo "$INSTANCE_PREFIX" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	node_tags: '$(echo "$NODE_TAGS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	node_instance_prefix: '$(echo "$NODE_INSTANCE_PREFIX" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	cluster_cidr: '$(echo "$CLUSTER_IP_RANGE" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	allocate_node_cidrs: '$(echo "$ALLOCATE_NODE_CIDRS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	non_masquerade_cidr: '$(echo "$NON_MASQUERADE_CIDR" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	service_cluster_ip_range: '$(echo "$SERVICE_CLUSTER_IP_RANGE" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_monitoring: '$(echo "$ENABLE_CLUSTER_MONITORING" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_logging: '$(echo "$ENABLE_CLUSTER_LOGGING" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_ui: '$(echo "$ENABLE_CLUSTER_UI" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_node_problem_detector: '$(echo "$ENABLE_NODE_PROBLEM_DETECTOR" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_l7_loadbalancing: '$(echo "$ENABLE_L7_LOADBALANCING" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_node_logging: '$(echo "$ENABLE_NODE_LOGGING" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_metadata_proxy: '$(echo "$ENABLE_METADATA_PROXY" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_rescheduler: '$(echo "$ENABLE_RESCHEDULER" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	logging_destination: '$(echo "$LOGGING_DESTINATION" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	elasticsearch_replicas: '$(echo "$ELASTICSEARCH_LOGGING_REPLICAS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_dns: '$(echo "$ENABLE_CLUSTER_DNS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_registry: '$(echo "$ENABLE_CLUSTER_REGISTRY" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	dns_server: '$(echo "$DNS_SERVER_IP" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	dns_domain: '$(echo "$DNS_DOMAIN" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_dns_horizontal_autoscaler: '$(echo "$ENABLE_DNS_HORIZONTAL_AUTOSCALER" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	admission_control: '$(echo "$ADMISSION_CONTROL" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	network_provider: '$(echo "$NETWORK_PROVIDER" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	prepull_e2e_images: '$(echo "$PREPULL_E2E_IMAGES" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	hairpin_mode: '$(echo "$HAIRPIN_MODE" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	softlockup_panic: '$(echo "$SOFTLOCKUP_PANIC" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	opencontrail_tag: '$(echo "$OPENCONTRAIL_TAG" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	opencontrail_kubernetes_tag: '$(echo "$OPENCONTRAIL_KUBERNETES_TAG")'
0000000000000000000000000000000000000000;;	opencontrail_public_subnet: '$(echo "$OPENCONTRAIL_PUBLIC_SUBNET")'
0000000000000000000000000000000000000000;;	network_policy_provider: '$(echo "$NETWORK_POLICY_PROVIDER" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_manifest_url: '$(echo "${ENABLE_MANIFEST_URL:-}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	manifest_url: '$(echo "${MANIFEST_URL:-}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	manifest_url_header: '$(echo "${MANIFEST_URL_HEADER:-}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	num_nodes: $(echo "${NUM_NODES:-}" | sed -e "s/'/''/g")
0000000000000000000000000000000000000000;;	e2e_storage_test_environment: '$(echo "$E2E_STORAGE_TEST_ENVIRONMENT" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	kube_uid: '$(echo "${KUBE_UID}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	initial_etcd_cluster: '$(echo "${INITIAL_ETCD_CLUSTER:-}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	initial_etcd_cluster_state: '$(echo "${INITIAL_ETCD_CLUSTER_STATE:-}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	ca_cert_bundle_path: '$(echo "${CA_CERT_BUNDLE_PATH:-}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	hostname: $(hostname -s)
0000000000000000000000000000000000000000;;	enable_default_storage_class: '$(echo "$ENABLE_DEFAULT_STORAGE_CLASS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    if [ -n "${STORAGE_BACKEND:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	storage_backend: '$(echo "$STORAGE_BACKEND" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${STORAGE_MEDIA_TYPE:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	storage_media_type: '$(echo "$STORAGE_MEDIA_TYPE" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${ADMISSION_CONTROL:-}" ] && [ ${ADMISSION_CONTROL} == *"ImagePolicyWebhook"* ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	admission-control-config-file: /etc/admission_controller.config
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${KUBELET_PORT:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	kubelet_port: '$(echo "$KUBELET_PORT" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${ETCD_IMAGE:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	etcd_docker_tag: '$(echo "$ETCD_IMAGE" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${ETCD_VERSION:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	etcd_version: '$(echo "$ETCD_VERSION" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [[ -n "${ETCD_CA_KEY:-}" && -n "${ETCD_CA_CERT:-}" && -n "${ETCD_PEER_KEY:-}" && -n "${ETCD_PEER_CERT:-}" ]]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	etcd_over_ssl: 'true'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	etcd_over_ssl: 'false'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${ETCD_QUORUM_READ:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	etcd_quorum_read: '$(echo "${ETCD_QUORUM_READ}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    # Configuration changes for test clusters
0000000000000000000000000000000000000000;;	    if [ -n "${APISERVER_TEST_ARGS:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	apiserver_test_args: '$(echo "$APISERVER_TEST_ARGS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${API_SERVER_TEST_LOG_LEVEL:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	api_server_test_log_level: '$(echo "$API_SERVER_TEST_LOG_LEVEL" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${KUBELET_TEST_ARGS:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	kubelet_test_args: '$(echo "$KUBELET_TEST_ARGS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${KUBELET_TEST_LOG_LEVEL:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	kubelet_test_log_level: '$(echo "$KUBELET_TEST_LOG_LEVEL" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${DOCKER_TEST_LOG_LEVEL:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	docker_test_log_level: '$(echo "$DOCKER_TEST_LOG_LEVEL" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${CONTROLLER_MANAGER_TEST_ARGS:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	controller_manager_test_args: '$(echo "$CONTROLLER_MANAGER_TEST_ARGS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${CONTROLLER_MANAGER_TEST_LOG_LEVEL:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	controller_manager_test_log_level: '$(echo "$CONTROLLER_MANAGER_TEST_LOG_LEVEL" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${SCHEDULER_TEST_ARGS:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	scheduler_test_args: '$(echo "$SCHEDULER_TEST_ARGS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${SCHEDULER_TEST_LOG_LEVEL:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	scheduler_test_log_level: '$(echo "$SCHEDULER_TEST_LOG_LEVEL" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${KUBEPROXY_TEST_ARGS:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	kubeproxy_test_args: '$(echo "$KUBEPROXY_TEST_ARGS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${KUBEPROXY_TEST_LOG_LEVEL:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	kubeproxy_test_log_level: '$(echo "$KUBEPROXY_TEST_LOG_LEVEL" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    # TODO: Replace this  with a persistent volume (and create it).
0000000000000000000000000000000000000000;;	    if [[ "${ENABLE_CLUSTER_REGISTRY}" == true && -n "${CLUSTER_REGISTRY_DISK}" ]]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	cluster_registry_disk_type: gce
0000000000000000000000000000000000000000;;	cluster_registry_disk_size: $(echo $(convert-bytes-gce-kube ${CLUSTER_REGISTRY_DISK_SIZE}) | sed -e "s/'/''/g")
0000000000000000000000000000000000000000;;	cluster_registry_disk_name: $(echo ${CLUSTER_REGISTRY_DISK} | sed -e "s/'/''/g")
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${TERMINATED_POD_GC_THRESHOLD:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	terminated_pod_gc_threshold: '$(echo "${TERMINATED_POD_GC_THRESHOLD}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${ENABLE_CUSTOM_METRICS:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	enable_custom_metrics: '$(echo "${ENABLE_CUSTOM_METRICS}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${NODE_LABELS:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	node_labels: '$(echo "${NODE_LABELS}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${NODE_TAINTS:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	node_taints: '$(echo "${NODE_TAINTS}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi    
0000000000000000000000000000000000000000;;	    if [ -n "${EVICTION_HARD:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	eviction_hard: '$(echo "${EVICTION_HARD}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [[ "${ENABLE_CLUSTER_AUTOSCALER:-false}" == "true" ]]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	enable_cluster_autoscaler: '$(echo "${ENABLE_CLUSTER_AUTOSCALER}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	autoscaler_mig_config: '$(echo "${AUTOSCALER_MIG_CONFIG}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	autoscaler_expander_config: '$(echo "${AUTOSCALER_EXPANDER_CONFIG}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${SCHEDULING_ALGORITHM_PROVIDER:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	scheduling_algorithm_provider: '$(echo "${SCHEDULING_ALGORITHM_PROVIDER}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [ -n "${ENABLE_IP_ALIASES:-}" ]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	enable_ip_aliases: '$(echo "$ENABLE_IP_ALIASES" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The job of this function is simple, but the basic regular expression syntax makes
0000000000000000000000000000000000000000;;	# this difficult to read. What we want to do is convert from [0-9]+B, KB, KiB, MB, etc
0000000000000000000000000000000000000000;;	# into [0-9]+, Ki, Mi, Gi, etc.
0000000000000000000000000000000000000000;;	# This is done in two steps:
0000000000000000000000000000000000000000;;	#   1. Convert from [0-9]+X?i?B into [0-9]X? (X denotes the prefix, ? means the field
0000000000000000000000000000000000000000;;	#      is optional.
0000000000000000000000000000000000000000;;	#   2. Attach an 'i' to the end of the string if we find a letter.
0000000000000000000000000000000000000000;;	# The two step process is needed to handle the edge case in which we want to convert
0000000000000000000000000000000000000000;;	# a raw byte count, as the result should be a simple number (e.g. 5B -> 5).
0000000000000000000000000000000000000000;;	function convert-bytes-gce-kube() {
0000000000000000000000000000000000000000;;	  local -r storage_space=$1
0000000000000000000000000000000000000000;;	  echo "${storage_space}" | sed -e 's/^\([0-9]\+\)\([A-Z]\)\?i\?B$/\1\2/g' -e 's/\([A-Z]\)$/\1i/'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This should happen both on cluster initialization and node upgrades.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#  - Uses KUBELET_CA_CERT (falling back to CA_CERT), KUBELET_CERT, and
0000000000000000000000000000000000000000;;	#    KUBELET_KEY to generate a kubeconfig file for the kubelet to securely
0000000000000000000000000000000000000000;;	#    connect to the apiserver.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-salt-kubelet-auth() {
0000000000000000000000000000000000000000;;	  local -r kubelet_kubeconfig_file="/srv/salt-overlay/salt/kubelet/bootstrap-kubeconfig"
0000000000000000000000000000000000000000;;	  if [ ! -e "${kubelet_kubeconfig_file}" ]; then
0000000000000000000000000000000000000000;;	    mkdir -p /srv/salt-overlay/salt/kubelet
0000000000000000000000000000000000000000;;	    (umask 077;
0000000000000000000000000000000000000000;;	      cat > "${kubelet_kubeconfig_file}" <<EOF
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kubelet
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    client-certificate: ${KUBELET_CERT_PATH}
0000000000000000000000000000000000000000;;	    client-key: ${KUBELET_KEY_PATH}
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- name: local
0000000000000000000000000000000000000000;;	  cluster:
0000000000000000000000000000000000000000;;	    server: https://${KUBERNETES_MASTER_NAME}
0000000000000000000000000000000000000000;;	    certificate-authority: ${CA_CERT_BUNDLE_PATH}
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kubelet
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This should happen both on cluster initialization and node upgrades.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#  - Uses the CA_CERT and KUBE_PROXY_TOKEN to generate a kubeconfig file for
0000000000000000000000000000000000000000;;	#    the kube-proxy to securely connect to the apiserver.
0000000000000000000000000000000000000000;;	function create-salt-kubeproxy-auth() {
0000000000000000000000000000000000000000;;	  local -r kube_proxy_kubeconfig_file="/srv/salt-overlay/salt/kube-proxy/kubeconfig"
0000000000000000000000000000000000000000;;	  if [ ! -e "${kube_proxy_kubeconfig_file}" ]; then
0000000000000000000000000000000000000000;;	    mkdir -p /srv/salt-overlay/salt/kube-proxy
0000000000000000000000000000000000000000;;	    (umask 077;
0000000000000000000000000000000000000000;;	        cat > "${kube_proxy_kubeconfig_file}" <<EOF
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kube-proxy
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: ${KUBE_PROXY_TOKEN}
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- name: local
0000000000000000000000000000000000000000;;	  cluster:
0000000000000000000000000000000000000000;;	    certificate-authority-data: ${CA_CERT_BUNDLE}
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kube-proxy
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function split-commas() {
0000000000000000000000000000000000000000;;	  echo $1 | tr "," "\n"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function try-download-release() {
0000000000000000000000000000000000000000;;	  # TODO(zmerlynn): Now we REALLy have no excuse not to do the reboot
0000000000000000000000000000000000000000;;	  # optimization.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r server_binary_tar_urls=( $(split-commas "${SERVER_BINARY_TAR_URL}") )
0000000000000000000000000000000000000000;;	  local -r server_binary_tar="${server_binary_tar_urls[0]##*/}"
0000000000000000000000000000000000000000;;	  if [[ -n "${SERVER_BINARY_TAR_HASH:-}" ]]; then
0000000000000000000000000000000000000000;;	    local -r server_binary_tar_hash="${SERVER_BINARY_TAR_HASH}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Downloading binary release sha1 (not found in env)"
0000000000000000000000000000000000000000;;	    download-or-bust "" "${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}"
0000000000000000000000000000000000000000;;	    local -r server_binary_tar_hash=$(cat "${server_binary_tar}.sha1")
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Downloading binary release tar (${server_binary_tar_urls[@]})"
0000000000000000000000000000000000000000;;	  download-or-bust "${server_binary_tar_hash}" "${server_binary_tar_urls[@]}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r salt_tar_urls=( $(split-commas "${SALT_TAR_URL}") )
0000000000000000000000000000000000000000;;	  local -r salt_tar="${salt_tar_urls[0]##*/}"
0000000000000000000000000000000000000000;;	  if [[ -n "${SALT_TAR_HASH:-}" ]]; then
0000000000000000000000000000000000000000;;	    local -r salt_tar_hash="${SALT_TAR_HASH}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Downloading Salt tar sha1 (not found in env)"
0000000000000000000000000000000000000000;;	    download-or-bust "" "${salt_tar_urls[@]/.tar.gz/.tar.gz.sha1}"
0000000000000000000000000000000000000000;;	    local -r salt_tar_hash=$(cat "${salt_tar}.sha1")
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Downloading Salt tar (${salt_tar_urls[@]})"
0000000000000000000000000000000000000000;;	  download-or-bust "${salt_tar_hash}" "${salt_tar_urls[@]}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Unpacking Salt tree and checking integrity of binary release tar"
0000000000000000000000000000000000000000;;	  rm -rf kubernetes
0000000000000000000000000000000000000000;;	  tar xzf "${salt_tar}" && tar tzf "${server_binary_tar}" > /dev/null
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function download-release() {
0000000000000000000000000000000000000000;;	  # In case of failure checking integrity of release, retry.
0000000000000000000000000000000000000000;;	  until try-download-release; do
0000000000000000000000000000000000000000;;	    sleep 15
0000000000000000000000000000000000000000;;	    echo "Couldn't download release. Retrying..."
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Running release install script"
0000000000000000000000000000000000000000;;	  kubernetes/saltbase/install.sh "${SERVER_BINARY_TAR_URL##*/}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function fix-apt-sources() {
0000000000000000000000000000000000000000;;	  sed -i -e "\|^deb.*http://http.debian.net/debian| s/^/#/" /etc/apt/sources.list
0000000000000000000000000000000000000000;;	  sed -i -e "\|^deb.*http://ftp.debian.org/debian| s/^/#/" /etc/apt/sources.list.d/backports.list
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function salt-run-local() {
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/salt/minion.d/local.conf
0000000000000000000000000000000000000000;;	file_client: local
0000000000000000000000000000000000000000;;	file_roots:
0000000000000000000000000000000000000000;;	  base:
0000000000000000000000000000000000000000;;	    - /srv/salt
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function salt-debug-log() {
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/salt/minion.d/log-level-debug.conf
0000000000000000000000000000000000000000;;	log_level: debug
0000000000000000000000000000000000000000;;	log_level_logfile: debug
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function salt-node-role() {
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/salt/minion.d/grains.conf
0000000000000000000000000000000000000000;;	grains:
0000000000000000000000000000000000000000;;	  roles:
0000000000000000000000000000000000000000;;	    - kubernetes-pool
0000000000000000000000000000000000000000;;	  cloud: gce
0000000000000000000000000000000000000000;;	  api_servers: '${KUBERNETES_MASTER_NAME}'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function env-to-grains {
0000000000000000000000000000000000000000;;	  local key=$1
0000000000000000000000000000000000000000;;	  local env_key=`echo $key | tr '[:lower:]' '[:upper:]'`
0000000000000000000000000000000000000000;;	  local value=${!env_key:-}
0000000000000000000000000000000000000000;;	  if [[ -n "${value}" ]]; then
0000000000000000000000000000000000000000;;	    # Note this is yaml, so indentation matters
0000000000000000000000000000000000000000;;	    cat <<EOF >>/etc/salt/minion.d/grains.conf
0000000000000000000000000000000000000000;;	  ${key}: '$(echo "${value}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function node-docker-opts() {
0000000000000000000000000000000000000000;;	  if [[ -n "${EXTRA_DOCKER_OPTS-}" ]]; then
0000000000000000000000000000000000000000;;	    DOCKER_OPTS="${DOCKER_OPTS:-} ${EXTRA_DOCKER_OPTS}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Decide whether to enable a docker registry mirror. This is taken from
0000000000000000000000000000000000000000;;	  # the "kube-env" metadata value.
0000000000000000000000000000000000000000;;	  if [[ -n "${DOCKER_REGISTRY_MIRROR_URL:-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "Enable docker registry mirror at: ${DOCKER_REGISTRY_MIRROR_URL}"
0000000000000000000000000000000000000000;;	    DOCKER_OPTS="${DOCKER_OPTS:-} --registry-mirror=${DOCKER_REGISTRY_MIRROR_URL}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function salt-grains() {
0000000000000000000000000000000000000000;;	  env-to-grains "docker_opts"
0000000000000000000000000000000000000000;;	  env-to-grains "docker_root"
0000000000000000000000000000000000000000;;	  env-to-grains "kubelet_root"
0000000000000000000000000000000000000000;;	  env-to-grains "feature_gates"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function configure-salt() {
0000000000000000000000000000000000000000;;	  mkdir -p /etc/salt/minion.d
0000000000000000000000000000000000000000;;	  salt-run-local
0000000000000000000000000000000000000000;;	  salt-node-role
0000000000000000000000000000000000000000;;	  node-docker-opts
0000000000000000000000000000000000000000;;	  salt-grains
0000000000000000000000000000000000000000;;	  install-salt
0000000000000000000000000000000000000000;;	  stop-salt-minion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run-salt() {
0000000000000000000000000000000000000000;;	  echo "== Calling Salt =="
0000000000000000000000000000000000000000;;	  local rc=0
0000000000000000000000000000000000000000;;	  for i in {0..6}; do
0000000000000000000000000000000000000000;;	    salt-call --retcode-passthrough --local state.highstate && rc=0 || rc=$?
0000000000000000000000000000000000000000;;	    if [[ "${rc}" == 0 ]]; then
0000000000000000000000000000000000000000;;	      return 0
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  echo "Salt failed to run repeatedly" >&2
0000000000000000000000000000000000000000;;	  return "${rc}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run-user-script() {
0000000000000000000000000000000000000000;;	  if curl-metadata k8s-user-startup-script > "${INSTALL_DIR}/k8s-user-script.sh"; then
0000000000000000000000000000000000000000;;	    user_script=$(cat "${INSTALL_DIR}/k8s-user-script.sh")
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ ! -z ${user_script:-} ]]; then
0000000000000000000000000000000000000000;;	    chmod u+x "${INSTALL_DIR}/k8s-user-script.sh"
0000000000000000000000000000000000000000;;	    echo "== running user startup script =="
0000000000000000000000000000000000000000;;	    "${INSTALL_DIR}/k8s-user-script.sh"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  echo "Support for debian master has been removed"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z "${is_push}" ]]; then
0000000000000000000000000000000000000000;;	  echo "== kube-up node config starting =="
0000000000000000000000000000000000000000;;	  set-broken-motd
0000000000000000000000000000000000000000;;	  config-ip-firewall
0000000000000000000000000000000000000000;;	  ensure-basic-networking
0000000000000000000000000000000000000000;;	  fix-apt-sources
0000000000000000000000000000000000000000;;	  ensure-install-dir
0000000000000000000000000000000000000000;;	  ensure-packages
0000000000000000000000000000000000000000;;	  set-kube-env
0000000000000000000000000000000000000000;;	  auto-upgrade
0000000000000000000000000000000000000000;;	  ensure-local-disks
0000000000000000000000000000000000000000;;	  create-node-pki
0000000000000000000000000000000000000000;;	  create-salt-pillar
0000000000000000000000000000000000000000;;	  create-salt-kubelet-auth
0000000000000000000000000000000000000000;;	  create-salt-kubeproxy-auth
0000000000000000000000000000000000000000;;	  download-release
0000000000000000000000000000000000000000;;	  configure-salt
0000000000000000000000000000000000000000;;	  remove-docker-artifacts
0000000000000000000000000000000000000000;;	  run-salt
0000000000000000000000000000000000000000;;	  reset-motd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  run-user-script
0000000000000000000000000000000000000000;;	  echo "== kube-up node config done =="
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  echo "== kube-push node config starting =="
0000000000000000000000000000000000000000;;	  ensure-basic-networking
0000000000000000000000000000000000000000;;	  ensure-install-dir
0000000000000000000000000000000000000000;;	  set-kube-env
0000000000000000000000000000000000000000;;	  create-salt-pillar
0000000000000000000000000000000000000000;;	  download-release
0000000000000000000000000000000000000000;;	  reset-motd
0000000000000000000000000000000000000000;;	  run-salt
0000000000000000000000000000000000000000;;	  echo "== kube-push node config done =="
0000000000000000000000000000000000000000;;	fi
