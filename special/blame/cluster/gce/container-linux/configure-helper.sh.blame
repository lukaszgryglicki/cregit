0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script is for configuring kubernetes master and node instances. It is
0000000000000000000000000000000000000000;;	# uploaded in the manifests tar ball.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO: this script duplicates templating logic from cluster/saltbase/salt
0000000000000000000000000000000000000000;;	# using sed. It should use an actual template parser on the manifest
0000000000000000000000000000000000000000;;	# files, or the manifest files should not be templated salt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-dirs {
0000000000000000000000000000000000000000;;	  echo "Creating required directories"
0000000000000000000000000000000000000000;;	  mkdir -p /var/lib/kubelet
0000000000000000000000000000000000000000;;	  mkdir -p /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	  if [[ "${KUBERNETES_MASTER:-}" == "false" ]]; then
0000000000000000000000000000000000000000;;	    mkdir -p /var/lib/kube-proxy
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Vars assumed:
0000000000000000000000000000000000000000;;	#   NUM_NODES
0000000000000000000000000000000000000000;;	function get-calico-node-cpu {
0000000000000000000000000000000000000000;;	  local suggested_calico_cpus=100m
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "10" ]]; then
0000000000000000000000000000000000000000;;	    suggested_calico_cpus=250m
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "100" ]]; then
0000000000000000000000000000000000000000;;	    suggested_calico_cpus=500m
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "500" ]]; then
0000000000000000000000000000000000000000;;	    suggested_calico_cpus=1000m
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "${suggested_calico_cpus}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Vars assumed:
0000000000000000000000000000000000000000;;	#    NUM_NODES
0000000000000000000000000000000000000000;;	function get-calico-typha-replicas {
0000000000000000000000000000000000000000;;	  local typha_count=1
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "10" ]]; then
0000000000000000000000000000000000000000;;	    typha_count=2
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "100" ]]; then
0000000000000000000000000000000000000000;;	    typha_count=3
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "250" ]]; then
0000000000000000000000000000000000000000;;	    typha_count=4
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "500" ]]; then
0000000000000000000000000000000000000000;;	    typha_count=5
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "${typha_count}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Vars assumed:
0000000000000000000000000000000000000000;;	#    NUM_NODES
0000000000000000000000000000000000000000;;	function get-calico-typha-cpu {
0000000000000000000000000000000000000000;;	  local typha_cpu=200m
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "10" ]]; then
0000000000000000000000000000000000000000;;	    typha_cpu=500m
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${NUM_NODES}" -gt "100" ]]; then
0000000000000000000000000000000000000000;;	    typha_cpu=1000m
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "${typha_cpu}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create directories referenced in the kube-controller-manager manifest for
0000000000000000000000000000000000000000;;	# bindmounts. This is used under the rkt runtime to work around
0000000000000000000000000000000000000000;;	# https://github.com/kubernetes/kubernetes/issues/26816
0000000000000000000000000000000000000000;;	function create-kube-controller-manager-dirs {
0000000000000000000000000000000000000000;;	  mkdir -p /etc/srv/kubernetes /var/ssl /etc/{ssl,openssl,pki}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Formats the given device ($1) if needed and mounts it at given mount point
0000000000000000000000000000000000000000;;	# ($2).
0000000000000000000000000000000000000000;;	function safe-format-and-mount() {
0000000000000000000000000000000000000000;;	  device=$1
0000000000000000000000000000000000000000;;	  mountpoint=$2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Format only if the disk is not already formatted.
0000000000000000000000000000000000000000;;	  if ! tune2fs -l "${device}" ; then
0000000000000000000000000000000000000000;;	    echo "Formatting '${device}'"
0000000000000000000000000000000000000000;;	    mkfs.ext4 -F -E lazy_itable_init=0,lazy_journal_init=0,discard "${device}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p "${mountpoint}"
0000000000000000000000000000000000000000;;	  echo "Mounting '${device}' at '${mountpoint}'"
0000000000000000000000000000000000000000;;	  mount -o discard,defaults "${device}" "${mountpoint}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Local ssds, if present, are mounted at /mnt/disks/ssdN.
0000000000000000000000000000000000000000;;	function ensure-local-ssds() {
0000000000000000000000000000000000000000;;	  for ssd in /dev/disk/by-id/google-local-ssd-*; do
0000000000000000000000000000000000000000;;	    if [ -e "${ssd}" ]; then
0000000000000000000000000000000000000000;;	      ssdnum=`echo ${ssd} | sed -e 's/\/dev\/disk\/by-id\/google-local-ssd-\([0-9]*\)/\1/'`
0000000000000000000000000000000000000000;;	      ssdmount="/mnt/disks/ssd${ssdnum}/"
0000000000000000000000000000000000000000;;	      mkdir -p ${ssdmount}
0000000000000000000000000000000000000000;;	      safe-format-and-mount "${ssd}" ${ssdmount}
0000000000000000000000000000000000000000;;	      echo "Mounted local SSD $ssd at ${ssdmount}"
0000000000000000000000000000000000000000;;	      chmod a+w ${ssdmount}
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      echo "No local SSD disks found."
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Finds the master PD device; returns it in MASTER_PD_DEVICE
0000000000000000000000000000000000000000;;	function find-master-pd {
0000000000000000000000000000000000000000;;	  MASTER_PD_DEVICE=""
0000000000000000000000000000000000000000;;	  if [[ ! -e /dev/disk/by-id/google-master-pd ]]; then
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  device_info=$(ls -l /dev/disk/by-id/google-master-pd)
0000000000000000000000000000000000000000;;	  relative_path=${device_info##* }
0000000000000000000000000000000000000000;;	  MASTER_PD_DEVICE="/dev/disk/by-id/${relative_path}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Mounts a persistent disk (formatting if needed) to store the persistent data
0000000000000000000000000000000000000000;;	# on the master -- etcd's data, a few settings, and security certs/keys/tokens.
0000000000000000000000000000000000000000;;	# safe-format-and-mount only formats an unformatted disk, and mkdir -p will
0000000000000000000000000000000000000000;;	# leave a directory be if it already exists.
0000000000000000000000000000000000000000;;	function mount-master-pd {
0000000000000000000000000000000000000000;;	  find-master-pd
0000000000000000000000000000000000000000;;	  if [[ -z "${MASTER_PD_DEVICE:-}" ]]; then
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Mounting master-pd"
0000000000000000000000000000000000000000;;	  local -r pd_path="/dev/disk/by-id/google-master-pd"
0000000000000000000000000000000000000000;;	  local -r mount_point="/mnt/disks/master-pd"
0000000000000000000000000000000000000000;;	  # Format and mount the disk, create directories on it for all of the master's
0000000000000000000000000000000000000000;;	  # persistent data, and link them to where they're used.
0000000000000000000000000000000000000000;;	  mkdir -p "${mount_point}"
0000000000000000000000000000000000000000;;	  safe-format-and-mount "${pd_path}" "${mount_point}"
0000000000000000000000000000000000000000;;	  echo "Mounted master-pd '${pd_path}' at '${mount_point}'"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # NOTE: These locations on the PD store persistent data, so to maintain
0000000000000000000000000000000000000000;;	  # upgradeability, these locations should not change.  If they do, take care
0000000000000000000000000000000000000000;;	  # to maintain a migration path from these locations to whatever new
0000000000000000000000000000000000000000;;	  # locations.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Contains all the data stored in etcd.
0000000000000000000000000000000000000000;;	  mkdir -m 700 -p "${mount_point}/var/etcd"
0000000000000000000000000000000000000000;;	  ln -s -f "${mount_point}/var/etcd" /var/etcd
0000000000000000000000000000000000000000;;	  mkdir -p /etc/srv
0000000000000000000000000000000000000000;;	  # Contains the dynamically generated apiserver auth certs and keys.
0000000000000000000000000000000000000000;;	  mkdir -p "${mount_point}/srv/kubernetes"
0000000000000000000000000000000000000000;;	  ln -s -f "${mount_point}/srv/kubernetes" /etc/srv/kubernetes
0000000000000000000000000000000000000000;;	  # Directory for kube-apiserver to store SSH key (if necessary).
0000000000000000000000000000000000000000;;	  mkdir -p "${mount_point}/srv/sshproxy"
0000000000000000000000000000000000000000;;	  ln -s -f "${mount_point}/srv/sshproxy" /etc/srv/sshproxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if ! id etcd &>/dev/null; then
0000000000000000000000000000000000000000;;	    useradd -s /sbin/nologin -d /var/etcd etcd
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  chown -R etcd "${mount_point}/var/etcd"
0000000000000000000000000000000000000000;;	  chgrp -R etcd "${mount_point}/var/etcd"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# replace_prefixed_line ensures:
0000000000000000000000000000000000000000;;	# 1. the specified file exists
0000000000000000000000000000000000000000;;	# 2. existing lines with the specified ${prefix} are removed
0000000000000000000000000000000000000000;;	# 3. a new line with the specified ${prefix}${suffix} is appended
0000000000000000000000000000000000000000;;	function replace_prefixed_line {
0000000000000000000000000000000000000000;;	  local -r file="${1:-}"
0000000000000000000000000000000000000000;;	  local -r prefix="${2:-}"
0000000000000000000000000000000000000000;;	  local -r suffix="${3:-}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  touch "${file}"
0000000000000000000000000000000000000000;;	  awk "substr(\$0,0,length(\"${prefix}\")) != \"${prefix}\" { print }" "${file}" > "${file}.filtered"  && mv "${file}.filtered" "${file}"
0000000000000000000000000000000000000000;;	  echo "${prefix}${suffix}" >> "${file}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# After the first boot and on upgrade, these files exist on the master-pd
0000000000000000000000000000000000000000;;	# and should never be touched again (except perhaps an additional service
0000000000000000000000000000000000000000;;	# account, see NB below.)
0000000000000000000000000000000000000000;;	function create-master-auth {
0000000000000000000000000000000000000000;;	  echo "Creating master auth files"
0000000000000000000000000000000000000000;;	  local -r auth_dir="/etc/srv/kubernetes"
0000000000000000000000000000000000000000;;	  if [[ ! -e "${auth_dir}/ca.crt" && ! -z "${CA_CERT:-}" && ! -z "${MASTER_CERT:-}" && ! -z "${MASTER_KEY:-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "${CA_CERT}" | base64 --decode > "${auth_dir}/ca.crt"
0000000000000000000000000000000000000000;;	    echo "${MASTER_CERT}" | base64 --decode > "${auth_dir}/server.cert"
0000000000000000000000000000000000000000;;	    echo "${MASTER_KEY}" | base64 --decode > "${auth_dir}/server.key"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local -r basic_auth_csv="${auth_dir}/basic_auth.csv"
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_PASSWORD:-}" && -n "${KUBE_USER:-}" ]]; then
0000000000000000000000000000000000000000;;	    replace_prefixed_line "${basic_auth_csv}" "${KUBE_PASSWORD},${KUBE_USER}," "admin,system:masters"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local -r known_tokens_csv="${auth_dir}/known_tokens.csv"
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_BEARER_TOKEN:-}" ]]; then
0000000000000000000000000000000000000000;;	    replace_prefixed_line "${known_tokens_csv}" "${KUBE_BEARER_TOKEN},"             "admin,admin,system:masters"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_CONTROLLER_MANAGER_TOKEN:-}" ]]; then
0000000000000000000000000000000000000000;;	    replace_prefixed_line "${known_tokens_csv}" "${KUBE_CONTROLLER_MANAGER_TOKEN}," "system:kube-controller-manager,uid:system:kube-controller-manager"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_SCHEDULER_TOKEN:-}" ]]; then
0000000000000000000000000000000000000000;;	    replace_prefixed_line "${known_tokens_csv}" "${KUBE_SCHEDULER_TOKEN},"          "system:kube-scheduler,uid:system:kube-scheduler"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBELET_TOKEN:-}" ]]; then
0000000000000000000000000000000000000000;;	    replace_prefixed_line "${known_tokens_csv}" "${KUBELET_TOKEN},"                 "kubelet,uid:kubelet,system:nodes"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_PROXY_TOKEN:-}" ]]; then
0000000000000000000000000000000000000000;;	    replace_prefixed_line "${known_tokens_csv}" "${KUBE_PROXY_TOKEN},"              "system:kube-proxy,uid:kube_proxy"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local use_cloud_config="false"
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/gce.conf
0000000000000000000000000000000000000000;;	[global]
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  if [[ -n "${GCE_API_ENDPOINT:-}" ]]; then
0000000000000000000000000000000000000000;;	    cat <<EOF >>/etc/gce.conf
0000000000000000000000000000000000000000;;	api-endpoint = ${GCE_API_ENDPOINT}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${PROJECT_ID:-}" && -n "${TOKEN_URL:-}" && -n "${TOKEN_BODY:-}" && -n "${NODE_NETWORK:-}" ]]; then
0000000000000000000000000000000000000000;;	    use_cloud_config="true"
0000000000000000000000000000000000000000;;	    cat <<EOF >>/etc/gce.conf
0000000000000000000000000000000000000000;;	token-url = ${TOKEN_URL}
0000000000000000000000000000000000000000;;	token-body = ${TOKEN_BODY}
0000000000000000000000000000000000000000;;	project-id = ${PROJECT_ID}
0000000000000000000000000000000000000000;;	network-name = ${NODE_NETWORK}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    if [[ -n "${NETWORK_PROJECT_ID:-}" ]]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/etc/gce.conf
0000000000000000000000000000000000000000;;	network-project-id = ${NETWORK_PROJECT_ID}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    if [[ -n "${NODE_SUBNETWORK:-}" ]]; then
0000000000000000000000000000000000000000;;	      cat <<EOF >>/etc/gce.conf
0000000000000000000000000000000000000000;;	subnetwork-name = ${NODE_SUBNETWORK}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${NODE_INSTANCE_PREFIX:-}" ]]; then
0000000000000000000000000000000000000000;;	    use_cloud_config="true"
0000000000000000000000000000000000000000;;	    if [[ -n "${NODE_TAGS:-}" ]]; then
0000000000000000000000000000000000000000;;	      local -r node_tags="${NODE_TAGS}"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      local -r node_tags="${NODE_INSTANCE_PREFIX}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    cat <<EOF >>/etc/gce.conf
0000000000000000000000000000000000000000;;	node-tags = ${node_tags}
0000000000000000000000000000000000000000;;	node-instance-prefix = ${NODE_INSTANCE_PREFIX}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${MULTIZONE:-}" ]]; then
0000000000000000000000000000000000000000;;	    use_cloud_config="true"
0000000000000000000000000000000000000000;;	    cat <<EOF >>/etc/gce.conf
0000000000000000000000000000000000000000;;	multizone = ${MULTIZONE}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${use_cloud_config}" != "true" ]]; then
0000000000000000000000000000000000000000;;	    rm -f /etc/gce.conf
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n "${GCP_AUTHN_URL:-}" ]]; then
0000000000000000000000000000000000000000;;	    cat <<EOF >/etc/gcp_authn.config
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	  - name: gcp-authentication-server
0000000000000000000000000000000000000000;;	    cluster:
0000000000000000000000000000000000000000;;	      server: ${GCP_AUTHN_URL}
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	  - name: kube-apiserver
0000000000000000000000000000000000000000;;	    user:
0000000000000000000000000000000000000000;;	      auth-provider:
0000000000000000000000000000000000000000;;	        name: gcp
0000000000000000000000000000000000000000;;	current-context: webhook
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: gcp-authentication-server
0000000000000000000000000000000000000000;;	    user: kube-apiserver
0000000000000000000000000000000000000000;;	  name: webhook
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n "${GCP_AUTHZ_URL:-}" ]]; then
0000000000000000000000000000000000000000;;	    cat <<EOF >/etc/gcp_authz.config
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	  - name: gcp-authorization-server
0000000000000000000000000000000000000000;;	    cluster:
0000000000000000000000000000000000000000;;	      server: ${GCP_AUTHZ_URL}
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	  - name: kube-apiserver
0000000000000000000000000000000000000000;;	    user:
0000000000000000000000000000000000000000;;	      auth-provider:
0000000000000000000000000000000000000000;;	        name: gcp
0000000000000000000000000000000000000000;;	current-context: webhook
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: gcp-authorization-server
0000000000000000000000000000000000000000;;	    user: kube-apiserver
0000000000000000000000000000000000000000;;	  name: webhook
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -n "${GCP_IMAGE_VERIFICATION_URL:-}" ]]; then
0000000000000000000000000000000000000000;;	    # This is the config file for the image review webhook.
0000000000000000000000000000000000000000;;	    cat <<EOF >/etc/gcp_image_review.config
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	  - name: gcp-image-review-server
0000000000000000000000000000000000000000;;	    cluster:
0000000000000000000000000000000000000000;;	      server: ${GCP_IMAGE_VERIFICATION_URL}
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	  - name: kube-apiserver
0000000000000000000000000000000000000000;;	    user:
0000000000000000000000000000000000000000;;	      auth-provider:
0000000000000000000000000000000000000000;;	        name: gcp
0000000000000000000000000000000000000000;;	current-context: webhook
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: gcp-image-review-server
0000000000000000000000000000000000000000;;	    user: kube-apiserver
0000000000000000000000000000000000000000;;	  name: webhook
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    # This is the config for the image review admission controller.
0000000000000000000000000000000000000000;;	    cat <<EOF >/etc/admission_controller.config
0000000000000000000000000000000000000000;;	imagePolicy:
0000000000000000000000000000000000000000;;	  kubeConfigFile: /etc/gcp_image_review.config
0000000000000000000000000000000000000000;;	  allowTTL: 30
0000000000000000000000000000000000000000;;	  denyTTL: 30
0000000000000000000000000000000000000000;;	  retryBackoff: 500
0000000000000000000000000000000000000000;;	  defaultAllow: true
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-kubelet-kubeconfig {
0000000000000000000000000000000000000000;;	  echo "Creating kubelet kubeconfig file"
0000000000000000000000000000000000000000;;	  if [[ -z "${KUBELET_CA_CERT:-}" ]]; then
0000000000000000000000000000000000000000;;	    KUBELET_CA_CERT="${CA_CERT}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  cat <<EOF >/var/lib/kubelet/kubeconfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kubelet
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    client-certificate-data: ${KUBELET_CERT}
0000000000000000000000000000000000000000;;	    client-key-data: ${KUBELET_KEY}
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- name: local
0000000000000000000000000000000000000000;;	  cluster:
0000000000000000000000000000000000000000;;	    certificate-authority-data: ${KUBELET_CA_CERT}
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kubelet
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Uses KUBELET_CA_CERT (falling back to CA_CERT), KUBELET_CERT, and KUBELET_KEY
0000000000000000000000000000000000000000;;	# to generate a kubeconfig file for the kubelet to securely connect to the apiserver.
0000000000000000000000000000000000000000;;	# Set REGISTER_MASTER_KUBELET to true if kubelet on the master node
0000000000000000000000000000000000000000;;	# should register to the apiserver.
0000000000000000000000000000000000000000;;	function create-master-kubelet-auth {
0000000000000000000000000000000000000000;;	  # Only configure the kubelet on the master if the required variables are
0000000000000000000000000000000000000000;;	  # set in the environment.
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBELET_APISERVER:-}" && -n "${KUBELET_CERT:-}" && -n "${KUBELET_KEY:-}" ]]; then
0000000000000000000000000000000000000000;;	    REGISTER_MASTER_KUBELET="true"
0000000000000000000000000000000000000000;;	    create-kubelet-kubeconfig
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-kubeproxy-kubeconfig {
0000000000000000000000000000000000000000;;	  echo "Creating kube-proxy kubeconfig file"
0000000000000000000000000000000000000000;;	  cat <<EOF >/var/lib/kube-proxy/kubeconfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kube-proxy
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: ${KUBE_PROXY_TOKEN}
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- name: local
0000000000000000000000000000000000000000;;	  cluster:
0000000000000000000000000000000000000000;;	    certificate-authority-data: ${CA_CERT}
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kube-proxy
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-kubecontrollermanager-kubeconfig {
0000000000000000000000000000000000000000;;	  echo "Creating kube-controller-manager kubeconfig file"
0000000000000000000000000000000000000000;;	  mkdir -p /etc/srv/kubernetes/kube-controller-manager
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/srv/kubernetes/kube-controller-manager/kubeconfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kube-controller-manager
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: ${KUBE_CONTROLLER_MANAGER_TOKEN}
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- name: local
0000000000000000000000000000000000000000;;	  cluster:
0000000000000000000000000000000000000000;;	    insecure-skip-tls-verify: true
0000000000000000000000000000000000000000;;	    server: https://localhost:443
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kube-controller-manager
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-kubescheduler-kubeconfig {
0000000000000000000000000000000000000000;;	  echo "Creating kube-scheduler kubeconfig file"
0000000000000000000000000000000000000000;;	  mkdir -p /etc/srv/kubernetes/kube-scheduler
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/srv/kubernetes/kube-scheduler/kubeconfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kube-scheduler
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: ${KUBE_SCHEDULER_TOKEN}
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- name: local
0000000000000000000000000000000000000000;;	  cluster:
0000000000000000000000000000000000000000;;	    insecure-skip-tls-verify: true
0000000000000000000000000000000000000000;;	    server: https://localhost:443
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kube-scheduler
0000000000000000000000000000000000000000;;	  name: kube-scheduler
0000000000000000000000000000000000000000;;	current-context: kube-scheduler
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-master-etcd-auth {
0000000000000000000000000000000000000000;;	  if [[ -n "${ETCD_CA_CERT:-}" && -n "${ETCD_PEER_KEY:-}" && -n "${ETCD_PEER_CERT:-}" ]]; then
0000000000000000000000000000000000000000;;	    local -r auth_dir="/etc/srv/kubernetes"
0000000000000000000000000000000000000000;;	    echo "${ETCD_CA_CERT}" | base64 --decode | gunzip > "${auth_dir}/etcd-ca.crt"
0000000000000000000000000000000000000000;;	    echo "${ETCD_PEER_KEY}" | base64 --decode > "${auth_dir}/etcd-peer.key"
0000000000000000000000000000000000000000;;	    echo "${ETCD_PEER_CERT}" | base64 --decode | gunzip > "${auth_dir}/etcd-peer.crt"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function configure-docker-daemon {
0000000000000000000000000000000000000000;;	  echo "Configuring the Docker daemon"
0000000000000000000000000000000000000000;;	  local docker_opts="-p /var/run/docker.pid --iptables=false --ip-masq=false"
0000000000000000000000000000000000000000;;	  if [[ "${TEST_CLUSTER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    docker_opts+=" --log-level=debug"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    docker_opts+=" --log-level=warn"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local use_net_plugin="true"
0000000000000000000000000000000000000000;;	  if [[ "${NETWORK_PROVIDER:-}" == "kubenet" || "${NETWORK_PROVIDER:-}" == "cni" ]]; then
0000000000000000000000000000000000000000;;	    # set docker0 cidr to private ip address range to avoid conflict with cbr0 cidr range
0000000000000000000000000000000000000000;;	    docker_opts+=" --bip=169.254.123.1/24"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    use_net_plugin="false"
0000000000000000000000000000000000000000;;	    docker_opts+=" --bridge=cbr0"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Decide whether to enable a docker registry mirror. This is taken from
0000000000000000000000000000000000000000;;	  # the "kube-env" metadata value.
0000000000000000000000000000000000000000;;	  if [[ -n "${DOCKER_REGISTRY_MIRROR_URL:-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "Enable docker registry mirror at: ${DOCKER_REGISTRY_MIRROR_URL}"
0000000000000000000000000000000000000000;;	    docker_opts+=" --registry-mirror=${DOCKER_REGISTRY_MIRROR_URL}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /etc/systemd/system/docker.service.d/
0000000000000000000000000000000000000000;;	  local kubernetes_conf_dropin="/etc/systemd/system/docker.service.d/00_kubelet.conf"
0000000000000000000000000000000000000000;;	  cat > "${kubernetes_conf_dropin}" <<EOF
0000000000000000000000000000000000000000;;	[Service]
0000000000000000000000000000000000000000;;	Environment="DOCKER_OPTS=${docker_opts} ${EXTRA_DOCKER_OPTS:-}"
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  # Always restart to get the cbr0 change
0000000000000000000000000000000000000000;;	  echo "Docker daemon options updated. Restarting docker..."
0000000000000000000000000000000000000000;;	  systemctl daemon-reload
0000000000000000000000000000000000000000;;	  systemctl restart docker
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	# A helper function for loading a docker image. It keeps trying up to 5 times.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# $1: Full path of the docker image
0000000000000000000000000000000000000000;;	function try-load-docker-image {
0000000000000000000000000000000000000000;;	  local -r img=$1
0000000000000000000000000000000000000000;;	  echo "Try to load docker image file ${img}"
0000000000000000000000000000000000000000;;	  # Temporarily turn off errexit, because we don't want to exit on first failure.
0000000000000000000000000000000000000000;;	  set +e
0000000000000000000000000000000000000000;;	  local -r max_attempts=5
0000000000000000000000000000000000000000;;	  local -i attempt_num=1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ "${CONTAINER_RUNTIME:-}" == "rkt" ]]; then
0000000000000000000000000000000000000000;;	    for attempt_num in $(seq 1 "${max_attempts}"); do
0000000000000000000000000000000000000000;;	      local aci_tmpdir="$(mktemp -t -d docker2aci.XXXXX)"
0000000000000000000000000000000000000000;;	      (cd "${aci_tmpdir}"; timeout 40 "${DOCKER2ACI_BIN}" "$1")
0000000000000000000000000000000000000000;;	      local aci_success=$?
0000000000000000000000000000000000000000;;	      timeout 40 "${RKT_BIN}" fetch --insecure-options=image "${aci_tmpdir}"/*.aci
0000000000000000000000000000000000000000;;	      local fetch_success=$?
0000000000000000000000000000000000000000;;	      rm -f "${aci_tmpdir}"/*.aci
0000000000000000000000000000000000000000;;	      rmdir "${aci_tmpdir}"
0000000000000000000000000000000000000000;;	      if [[ ${fetch_success} && ${aci_success} ]]; then
0000000000000000000000000000000000000000;;	        echo "rkt: Loaded ${img}"
0000000000000000000000000000000000000000;;	        break
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      if [[ "${attempt}" == "${max_attempts}" ]]; then
0000000000000000000000000000000000000000;;	        echo "rkt: Failed to load image file ${img} after ${max_attempts} retries."
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      sleep 5
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    until timeout 30 docker load -i "${img}"; do
0000000000000000000000000000000000000000;;	      if [[ "${attempt_num}" == "${max_attempts}" ]]; then
0000000000000000000000000000000000000000;;	        echo "Fail to load docker image file ${img} after ${max_attempts} retries."
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	      else
0000000000000000000000000000000000000000;;	        attempt_num=$((attempt_num+1))
0000000000000000000000000000000000000000;;	        sleep 5
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  # Re-enable errexit.
0000000000000000000000000000000000000000;;	  set -e
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Loads kube-system docker images. It is better to do it before starting kubelet,
0000000000000000000000000000000000000000;;	# as kubelet will restart docker daemon, which may interfere with loading images.
0000000000000000000000000000000000000000;;	function load-docker-images {
0000000000000000000000000000000000000000;;	  echo "Start loading kube-system docker images"
0000000000000000000000000000000000000000;;	  local -r img_dir="${KUBE_HOME}/kube-docker-files"
0000000000000000000000000000000000000000;;	  if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    try-load-docker-image "${img_dir}/kube-apiserver.tar"
0000000000000000000000000000000000000000;;	    try-load-docker-image "${img_dir}/kube-controller-manager.tar"
0000000000000000000000000000000000000000;;	    try-load-docker-image "${img_dir}/kube-scheduler.tar"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    try-load-docker-image "${img_dir}/kube-proxy.tar"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This function assembles the kubelet systemd service file and starts it
0000000000000000000000000000000000000000;;	# using systemctl.
0000000000000000000000000000000000000000;;	function start-kubelet {
0000000000000000000000000000000000000000;;	  echo "Start kubelet"
0000000000000000000000000000000000000000;;	  local kubelet_bin="${KUBE_HOME}/bin/kubelet"
0000000000000000000000000000000000000000;;	  local -r version="$("${kubelet_bin}" --version=true | cut -f2 -d " ")"
0000000000000000000000000000000000000000;;	  echo "Using kubelet binary at ${kubelet_bin}"
0000000000000000000000000000000000000000;;	  local flags="${KUBELET_TEST_LOG_LEVEL:-"--v=2"} ${KUBELET_TEST_ARGS:-}"
0000000000000000000000000000000000000000;;	  flags+=" --allow-privileged=true"
0000000000000000000000000000000000000000;;	  flags+=" --cgroup-root=/"
0000000000000000000000000000000000000000;;	  flags+=" --cloud-provider=gce"
0000000000000000000000000000000000000000;;	  flags+=" --cluster-dns=${DNS_SERVER_IP}"
0000000000000000000000000000000000000000;;	  flags+=" --cluster-domain=${DNS_DOMAIN}"
0000000000000000000000000000000000000000;;	  flags+=" --pod-manifest-path=/etc/kubernetes/manifests"
0000000000000000000000000000000000000000;;	  flags+=" --experimental-check-node-capabilities-before-mount=true"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBELET_PORT:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --port=${KUBELET_PORT}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --enable-debugging-handlers=false"
0000000000000000000000000000000000000000;;	    flags+=" --hairpin-mode=none"
0000000000000000000000000000000000000000;;	    if [[ "${REGISTER_MASTER_KUBELET:-false}" == "true" ]]; then
0000000000000000000000000000000000000000;;	      flags+=" --api-servers=https://${KUBELET_APISERVER}"
0000000000000000000000000000000000000000;;	      flags+=" --register-schedulable=false"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      # Standalone mode (not widely used?)
0000000000000000000000000000000000000000;;	      flags+=" --pod-cidr=${MASTER_IP_RANGE}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  else # For nodes
0000000000000000000000000000000000000000;;	    flags+=" --enable-debugging-handlers=true"
0000000000000000000000000000000000000000;;	    flags+=" --api-servers=https://${KUBERNETES_MASTER_NAME}"
0000000000000000000000000000000000000000;;	    if [[ "${HAIRPIN_MODE:-}" == "promiscuous-bridge" ]] || \
0000000000000000000000000000000000000000;;	       [[ "${HAIRPIN_MODE:-}" == "hairpin-veth" ]] || \
0000000000000000000000000000000000000000;;	       [[ "${HAIRPIN_MODE:-}" == "none" ]]; then
0000000000000000000000000000000000000000;;	      flags+=" --hairpin-mode=${HAIRPIN_MODE}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  # Network plugin
0000000000000000000000000000000000000000;;	  if [[ -n "${NETWORK_PROVIDER:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --cni-bin-dir=/opt/kubernetes/bin"
0000000000000000000000000000000000000000;;	    flags+=" --network-plugin=${NETWORK_PROVIDER}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${NON_MASQUERADE_CIDR:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --non-masquerade-cidr=${NON_MASQUERADE_CIDR}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_MANIFEST_URL:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --manifest-url=${MANIFEST_URL}"
0000000000000000000000000000000000000000;;	    flags+=" --manifest-url-header=${MANIFEST_URL_HEADER}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${ENABLE_CUSTOM_METRICS:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --enable-custom-metrics=${ENABLE_CUSTOM_METRICS}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${NODE_LABELS:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --node-labels=${NODE_LABELS}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${NODE_TAINTS:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --register-with-taints=${NODE_TAINTS}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${EVICTION_HARD:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --eviction-hard=${EVICTION_HARD}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${FEATURE_GATES:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --feature-gates=${FEATURE_GATES}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${CONTAINER_RUNTIME:-}" ]]; then
0000000000000000000000000000000000000000;;	    flags+=" --container-runtime=${CONTAINER_RUNTIME}"
0000000000000000000000000000000000000000;;	    flags+=" --rkt-path=${KUBE_HOME}/bin/rkt"
0000000000000000000000000000000000000000;;	    flags+=" --rkt-stage1-image=${RKT_STAGE1_IMAGE}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r kubelet_env_file="/etc/kubelet-env"
0000000000000000000000000000000000000000;;	  echo "KUBELET_OPTS=\"${flags}\"" > "${kubelet_env_file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Write the systemd service file for kubelet.
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/systemd/system/kubelet.service
0000000000000000000000000000000000000000;;	[Unit]
0000000000000000000000000000000000000000;;	Description=Kubernetes kubelet
0000000000000000000000000000000000000000;;	Requires=network-online.target
0000000000000000000000000000000000000000;;	After=network-online.target
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Service]
0000000000000000000000000000000000000000;;	Restart=always
0000000000000000000000000000000000000000;;	RestartSec=10
0000000000000000000000000000000000000000;;	EnvironmentFile=${kubelet_env_file}
0000000000000000000000000000000000000000;;	ExecStart=${kubelet_bin} \$KUBELET_OPTS
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Install]
0000000000000000000000000000000000000000;;	WantedBy=multi-user.target
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Flush iptables nat table
0000000000000000000000000000000000000000;;	  iptables -t nat -F || true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  systemctl start kubelet.service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create the log file and set its properties.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# $1 is the file to create.
0000000000000000000000000000000000000000;;	function prepare-log-file {
0000000000000000000000000000000000000000;;	  touch $1
0000000000000000000000000000000000000000;;	  chmod 644 $1
0000000000000000000000000000000000000000;;	  chown root:root $1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts kube-proxy pod.
0000000000000000000000000000000000000000;;	function start-kube-proxy {
0000000000000000000000000000000000000000;;	  echo "Start kube-proxy pod"
0000000000000000000000000000000000000000;;	  prepare-log-file /var/log/kube-proxy.log
0000000000000000000000000000000000000000;;	  local -r src_file="${KUBE_HOME}/kube-manifests/kubernetes/kube-proxy.manifest"
0000000000000000000000000000000000000000;;	  remove-salt-config-comments "${src_file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r kubeconfig="--kubeconfig=/var/lib/kube-proxy/kubeconfig"
0000000000000000000000000000000000000000;;	  local kube_docker_registry="gcr.io/google_containers"
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_DOCKER_REGISTRY:-}" ]]; then
0000000000000000000000000000000000000000;;	    kube_docker_registry=${KUBE_DOCKER_REGISTRY}
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local -r kube_proxy_docker_tag=$(cat /opt/kubernetes/kube-docker-files/kube-proxy.docker_tag)
0000000000000000000000000000000000000000;;	  local api_servers="--master=https://${KUBERNETES_MASTER_NAME}"
0000000000000000000000000000000000000000;;	  local params="${KUBEPROXY_TEST_LOG_LEVEL:-"--v=2"}"
0000000000000000000000000000000000000000;;	  if [[ -n "${FEATURE_GATES:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --feature-gates=${FEATURE_GATES}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  params+=" --iptables-sync-period=1m --iptables-min-sync-period=10s"
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBEPROXY_TEST_ARGS:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" ${KUBEPROXY_TEST_ARGS}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local container_env=""
0000000000000000000000000000000000000000;;	  if [[ -n "${ENABLE_CACHE_MUTATION_DETECTOR:-}" ]]; then
0000000000000000000000000000000000000000;;	    container_env="env:\n    - name: KUBE_CACHE_MUTATION_DETECTOR\n    value: \"${ENABLE_CACHE_MUTATION_DETECTOR}\""
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{kubeconfig}}@${kubeconfig}@g" ${src_file}
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['kube_docker_registry'\]}}@${kube_docker_registry}@g" ${src_file}
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['kube-proxy_docker_tag'\]}}@${kube_proxy_docker_tag}@g" ${src_file}
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{params}}@${params}@g" ${src_file}
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{container_env}}@${container_env}@g" ${src_file}
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ cpurequest }}@100m@g" ${src_file}
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{api_servers_with_port}}@${api_servers}@g" ${src_file}
0000000000000000000000000000000000000000;;	  if [[ -n "${CLUSTER_IP_RANGE:-}" ]]; then
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{cluster_cidr}}@--cluster-cidr=${CLUSTER_IP_RANGE}@g" ${src_file}
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${CONTAINER_RUNTIME:-}" == "rkt" ]]; then
0000000000000000000000000000000000000000;;	    # Work arounds for https://github.com/coreos/rkt/issues/3245 and https://github.com/coreos/rkt/issues/3264
0000000000000000000000000000000000000000;;	    # This is an incredibly hacky workaround. It's fragile too. If the kube-proxy command changes too much, this breaks
0000000000000000000000000000000000000000;;	    # TODO, this could be done much better in many other places, such as an
0000000000000000000000000000000000000000;;	    # init script within the container, or even within kube-proxy's code.
0000000000000000000000000000000000000000;;	    local extra_workaround_cmd="ln -sf /proc/self/mounts /etc/mtab; \
0000000000000000000000000000000000000000;;	      mount -o remount,rw /proc; \
0000000000000000000000000000000000000000;;	      mount -o remount,rw /proc/sys; \
0000000000000000000000000000000000000000;;	      mount -o remount,rw /sys; "
0000000000000000000000000000000000000000;;	    sed -i -e "s@-\\s\\+kube-proxy@- ${extra_workaround_cmd} kube-proxy@g" "${src_file}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  cp "${src_file}" /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Replaces the variables in the etcd manifest file with the real values, and then
0000000000000000000000000000000000000000;;	# copy the file to the manifest dir
0000000000000000000000000000000000000000;;	# $1: value for variable 'suffix'
0000000000000000000000000000000000000000;;	# $2: value for variable 'port'
0000000000000000000000000000000000000000;;	# $3: value for variable 'server_port'
0000000000000000000000000000000000000000;;	# $4: value for variable 'cpulimit'
0000000000000000000000000000000000000000;;	# $5: pod name, which should be either etcd or etcd-events
0000000000000000000000000000000000000000;;	function prepare-etcd-manifest {
0000000000000000000000000000000000000000;;	  local host_name=$(hostname -s)
0000000000000000000000000000000000000000;;	  local etcd_cluster=""
0000000000000000000000000000000000000000;;	  local cluster_state="new"
0000000000000000000000000000000000000000;;	  local etcd_protocol="http"
0000000000000000000000000000000000000000;;	  local etcd_creds=""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n "${ETCD_CA_KEY:-}" && -n "${ETCD_CA_CERT:-}" && -n "${ETCD_PEER_KEY:-}" && -n "${ETCD_PEER_CERT:-}" ]]; then
0000000000000000000000000000000000000000;;	    etcd_creds=" --peer-trusted-ca-file /etc/srv/kubernetes/etcd-ca.crt --peer-cert-file /etc/srv/kubernetes/etcd-peer.crt --peer-key-file /etc/srv/kubernetes/etcd-peer.key -peer-client-cert-auth "
0000000000000000000000000000000000000000;;	    etcd_protocol="https"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for host in $(echo "${INITIAL_ETCD_CLUSTER:-${host_name}}" | tr "," "\n"); do
0000000000000000000000000000000000000000;;	    etcd_host="etcd-${host}=${etcd_protocol}://${host}:$3"
0000000000000000000000000000000000000000;;	    if [[ -n "${etcd_cluster}" ]]; then
0000000000000000000000000000000000000000;;	      etcd_cluster+=","
0000000000000000000000000000000000000000;;	      cluster_state="existing"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    etcd_cluster+="${etcd_host}"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r temp_file="/tmp/$5"
0000000000000000000000000000000000000000;;	  cp "${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/etcd.manifest" "${temp_file}"
0000000000000000000000000000000000000000;;	  remove-salt-config-comments "${temp_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *suffix *}}@$1@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *port *}}@$2@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *server_port *}}@$3@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *cpulimit *}}@\"$4\"@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *hostname *}}@$host_name@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *srv_kube_path *}}@/etc/srv/kubernetes@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *etcd_cluster *}}@$etcd_cluster@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  # Get default storage backend from manifest file.
0000000000000000000000000000000000000000;;	  local -r default_storage_backend=$(cat "${temp_file}" | \
0000000000000000000000000000000000000000;;	    grep -o "{{ *pillar\.get('storage_backend', '\(.*\)') *}}" | \
0000000000000000000000000000000000000000;;	    sed -e "s@{{ *pillar\.get('storage_backend', '\(.*\)') *}}@\1@g")
0000000000000000000000000000000000000000;;	  if [[ -n "${STORAGE_BACKEND:-}" ]]; then
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\.get('storage_backend', '\(.*\)') *}}@${STORAGE_BACKEND}@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\.get('storage_backend', '\(.*\)') *}}@\1@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${STORAGE_BACKEND:-${default_storage_backend}}" == "etcd3" ]]; then
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *quota_bytes *}}@--quota-backend-bytes=4294967296@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *quota_bytes *}}@@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *cluster_state *}}@$cluster_state@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  if [[ -n "${ETCD_IMAGE:-}" ]]; then
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\.get('etcd_docker_tag', '\(.*\)') *}}@${ETCD_IMAGE}@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\.get('etcd_docker_tag', '\(.*\)') *}}@\1@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *etcd_protocol *}}@$etcd_protocol@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{ *etcd_creds *}}@$etcd_creds@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  if [[ -n "${ETCD_VERSION:-}" ]]; then
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\.get('etcd_version', '\(.*\)') *}}@${ETCD_VERSION}@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\.get('etcd_version', '\(.*\)') *}}@\1@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  # Replace the volume host path.
0000000000000000000000000000000000000000;;	  sed -i -e "s@/mnt/master-pd/var/etcd@/mnt/disks/master-pd/var/etcd@g" "${temp_file}"
0000000000000000000000000000000000000000;;	  mv "${temp_file}" /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function start-etcd-empty-dir-cleanup-pod {
0000000000000000000000000000000000000000;;	  cp "${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/etcd-empty-dir-cleanup/etcd-empty-dir-cleanup.yaml" "/etc/kubernetes/manifests"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts etcd server pod (and etcd-events pod if needed).
0000000000000000000000000000000000000000;;	# More specifically, it prepares dirs and files, sets the variable value
0000000000000000000000000000000000000000;;	# in the manifests, and copies them to /etc/kubernetes/manifests.
0000000000000000000000000000000000000000;;	function start-etcd-servers {
0000000000000000000000000000000000000000;;	  echo "Start etcd pods"
0000000000000000000000000000000000000000;;	  if [[ -d /etc/etcd ]]; then
0000000000000000000000000000000000000000;;	    rm -rf /etc/etcd
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -e /etc/default/etcd ]]; then
0000000000000000000000000000000000000000;;	    rm -f /etc/default/etcd
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -e /etc/systemd/system/etcd.service ]]; then
0000000000000000000000000000000000000000;;	    rm -f /etc/systemd/system/etcd.service
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -e /etc/init.d/etcd ]]; then
0000000000000000000000000000000000000000;;	    rm -f /etc/init.d/etcd
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  prepare-log-file /var/log/etcd.log
0000000000000000000000000000000000000000;;	  prepare-etcd-manifest "" "2379" "2380" "200m" "etcd.manifest"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  prepare-log-file /var/log/etcd-events.log
0000000000000000000000000000000000000000;;	  prepare-etcd-manifest "-events" "4002" "2381" "100m" "etcd-events.manifest"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Calculates the following variables based on env variables, which will be used
0000000000000000000000000000000000000000;;	# by the manifests of several kube-master components.
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_OPT
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_VOLUME
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_MOUNT
0000000000000000000000000000000000000000;;	#   DOCKER_REGISTRY
0000000000000000000000000000000000000000;;	function compute-master-manifest-variables {
0000000000000000000000000000000000000000;;	  CLOUD_CONFIG_OPT=""
0000000000000000000000000000000000000000;;	  CLOUD_CONFIG_VOLUME=""
0000000000000000000000000000000000000000;;	  CLOUD_CONFIG_MOUNT=""
0000000000000000000000000000000000000000;;	  if [[ -f /etc/gce.conf ]]; then
0000000000000000000000000000000000000000;;	    CLOUD_CONFIG_OPT="--cloud-config=/etc/gce.conf"
0000000000000000000000000000000000000000;;	    CLOUD_CONFIG_VOLUME="{\"name\": \"cloudconfigmount\",\"hostPath\": {\"path\": \"/etc/gce.conf\"}},"
0000000000000000000000000000000000000000;;	    CLOUD_CONFIG_MOUNT="{\"name\": \"cloudconfigmount\",\"mountPath\": \"/etc/gce.conf\", \"readOnly\": true},"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  DOCKER_REGISTRY="gcr.io/google_containers"
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_DOCKER_REGISTRY:-}" ]]; then
0000000000000000000000000000000000000000;;	    DOCKER_REGISTRY="${KUBE_DOCKER_REGISTRY}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A helper function for removing salt configuration and comments from a file.
0000000000000000000000000000000000000000;;	# This is mainly for preparing a manifest file.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# $1: Full path of the file to manipulate
0000000000000000000000000000000000000000;;	function remove-salt-config-comments {
0000000000000000000000000000000000000000;;	  # Remove salt configuration.
0000000000000000000000000000000000000000;;	  sed -i "/^[ |\t]*{[#|%]/d" $1
0000000000000000000000000000000000000000;;	  # Remove comments.
0000000000000000000000000000000000000000;;	  sed -i "/^[ |\t]*#/d" $1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts kubernetes apiserver.
0000000000000000000000000000000000000000;;	# It prepares the log file, loads the docker image, calculates variables, sets them
0000000000000000000000000000000000000000;;	# in the manifest file, and then copies the manifest file to /etc/kubernetes/manifests.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars (which are calculated in function compute-master-manifest-variables)
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_OPT
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_VOLUME
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_MOUNT
0000000000000000000000000000000000000000;;	#   DOCKER_REGISTRY
0000000000000000000000000000000000000000;;	function start-kube-apiserver {
0000000000000000000000000000000000000000;;	  echo "Start kubernetes api-server"
0000000000000000000000000000000000000000;;	  prepare-log-file /var/log/kube-apiserver.log
0000000000000000000000000000000000000000;;	  prepare-log-file /var/log/kube-apiserver-audit.log
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Calculate variables and assemble the command line.
0000000000000000000000000000000000000000;;	  local params="${API_SERVER_TEST_LOG_LEVEL:-"--v=2"} ${APISERVER_TEST_ARGS:-} ${CLOUD_CONFIG_OPT}"
0000000000000000000000000000000000000000;;	  params+=" --address=127.0.0.1"
0000000000000000000000000000000000000000;;	  params+=" --allow-privileged=true"
0000000000000000000000000000000000000000;;	  params+=" --cloud-provider=gce"
0000000000000000000000000000000000000000;;	  params+=" --client-ca-file=/etc/srv/kubernetes/ca.crt"
0000000000000000000000000000000000000000;;	  params+=" --etcd-servers=http://127.0.0.1:2379"
0000000000000000000000000000000000000000;;	  params+=" --etcd-servers-overrides=/events#http://127.0.0.1:4002"
0000000000000000000000000000000000000000;;	  params+=" --secure-port=443"
0000000000000000000000000000000000000000;;	  params+=" --tls-cert-file=/etc/srv/kubernetes/server.cert"
0000000000000000000000000000000000000000;;	  params+=" --tls-private-key-file=/etc/srv/kubernetes/server.key"
0000000000000000000000000000000000000000;;	  params+=" --token-auth-file=/etc/srv/kubernetes/known_tokens.csv"
0000000000000000000000000000000000000000;;	  params+=" --enable-aggregator-routing=true"
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_PASSWORD:-}" && -n "${KUBE_USER:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --basic-auth-file=/etc/srv/kubernetes/basic_auth.csv"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${STORAGE_BACKEND:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --storage-backend=${STORAGE_BACKEND}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${STORAGE_MEDIA_TYPE:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --storage-media-type=${STORAGE_MEDIA_TYPE}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${ENABLE_GARBAGE_COLLECTOR:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --enable-garbage-collector=${ENABLE_GARBAGE_COLLECTOR}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${NUM_NODES:-}" ]]; then
0000000000000000000000000000000000000000;;	    # If the cluster is large, increase max-requests-inflight limit in apiserver.
0000000000000000000000000000000000000000;;	    if [[ "${NUM_NODES}" -ge 1000 ]]; then
0000000000000000000000000000000000000000;;	      params+=" --max-requests-inflight=1500 --max-mutating-requests-inflight=500"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    # Set amount of memory available for apiserver based on number of nodes.
0000000000000000000000000000000000000000;;	    # TODO: Once we start setting proper requests and limits for apiserver
0000000000000000000000000000000000000000;;	    # we should reuse the same logic here instead of current heuristic.
0000000000000000000000000000000000000000;;	    params+=" --target-ram-mb=$((${NUM_NODES} * 60))"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${SERVICE_CLUSTER_IP_RANGE:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --service-cluster-ip-range=${SERVICE_CLUSTER_IP_RANGE}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${ETCD_QUORUM_READ:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --etcd-quorum-read=${ETCD_QUORUM_READ}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_APISERVER_BASIC_AUDIT:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    # We currently only support enabling with a fixed path and with built-in log
0000000000000000000000000000000000000000;;	    # rotation "disabled" (large value) so it behaves like kube-apiserver.log.
0000000000000000000000000000000000000000;;	    # External log rotation should be set up the same as for kube-apiserver.log.
0000000000000000000000000000000000000000;;	    params+=" --audit-log-path=/var/log/kube-apiserver-audit.log"
0000000000000000000000000000000000000000;;	    params+=" --audit-log-maxage=0"
0000000000000000000000000000000000000000;;	    params+=" --audit-log-maxbackup=0"
0000000000000000000000000000000000000000;;	    # Lumberjack doesn't offer any way to disable size-based rotation. It also
0000000000000000000000000000000000000000;;	    # has an in-memory counter that doesn't notice if you truncate the file.
0000000000000000000000000000000000000000;;	    # 2000000000 (in MiB) is a large number that fits in 31 bits. If the log
0000000000000000000000000000000000000000;;	    # grows at 10MiB/s (~30K QPS), it will rotate after ~6 years if apiserver
0000000000000000000000000000000000000000;;	    # never restarts. Please manually restart apiserver before this time.
0000000000000000000000000000000000000000;;	    params+=" --audit-log-maxsize=2000000000"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_APISERVER_LOGS_HANDLER:-}" == "false" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --enable-logs-handler=false"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local admission_controller_config_mount=""
0000000000000000000000000000000000000000;;	  local admission_controller_config_volume=""
0000000000000000000000000000000000000000;;	  local image_policy_webhook_config_mount=""
0000000000000000000000000000000000000000;;	  local image_policy_webhook_config_volume=""
0000000000000000000000000000000000000000;;	  if [[ -n "${ADMISSION_CONTROL:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --admission-control=${ADMISSION_CONTROL}"
0000000000000000000000000000000000000000;;	    if [[ ${ADMISSION_CONTROL} == *"ImagePolicyWebhook"* ]]; then
0000000000000000000000000000000000000000;;	      params+=" --admission-control-config-file=/etc/admission_controller.config"
0000000000000000000000000000000000000000;;	      # Mount the file to configure admission controllers if ImagePolicyWebhook is set.
0000000000000000000000000000000000000000;;	      admission_controller_config_mount="{\"name\": \"admissioncontrollerconfigmount\",\"mountPath\": \"/etc/admission_controller.config\", \"readOnly\": false},"
0000000000000000000000000000000000000000;;	      admission_controller_config_volume="{\"name\": \"admissioncontrollerconfigmount\",\"hostPath\": {\"path\": \"/etc/admission_controller.config\"}},"
0000000000000000000000000000000000000000;;	      # Mount the file to configure the ImagePolicyWebhook's webhook.
0000000000000000000000000000000000000000;;	      image_policy_webhook_config_mount="{\"name\": \"imagepolicywebhookconfigmount\",\"mountPath\": \"/etc/gcp_image_review.config\", \"readOnly\": false},"
0000000000000000000000000000000000000000;;	      image_policy_webhook_config_volume="{\"name\": \"imagepolicywebhookconfigmount\",\"hostPath\": {\"path\": \"/etc/gcp_image_review.config\"}},"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_APISERVER_REQUEST_TIMEOUT:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --min-request-timeout=${KUBE_APISERVER_REQUEST_TIMEOUT}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${RUNTIME_CONFIG:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --runtime-config=${RUNTIME_CONFIG}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${FEATURE_GATES:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --feature-gates=${FEATURE_GATES}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${PROJECT_ID:-}" && -n "${TOKEN_URL:-}" && -n "${TOKEN_BODY:-}" && -n "${NODE_NETWORK:-}" ]]; then
0000000000000000000000000000000000000000;;	    local -r vm_external_ip=$(curl --retry 5 --retry-delay 3 --fail --silent -H 'Metadata-Flavor: Google' "http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip")
0000000000000000000000000000000000000000;;	    params+=" --advertise-address=${vm_external_ip}"
0000000000000000000000000000000000000000;;	    params+=" --ssh-user=${PROXY_SSH_USER}"
0000000000000000000000000000000000000000;;	    params+=" --ssh-keyfile=/etc/srv/sshproxy/.sshkeyfile"
0000000000000000000000000000000000000000;;	  elif [ -n "${MASTER_ADVERTISE_ADDRESS:-}" ]; then
0000000000000000000000000000000000000000;;	    params="${params} --advertise-address=${MASTER_ADVERTISE_ADDRESS}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local webhook_authn_config_mount=""
0000000000000000000000000000000000000000;;	  local webhook_authn_config_volume=""
0000000000000000000000000000000000000000;;	  if [[ -n "${GCP_AUTHN_URL:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --authentication-token-webhook-config-file=/etc/gcp_authn.config"
0000000000000000000000000000000000000000;;	    webhook_authn_config_mount="{\"name\": \"webhookauthnconfigmount\",\"mountPath\": \"/etc/gcp_authn.config\", \"readOnly\": false},"
0000000000000000000000000000000000000000;;	    webhook_authn_config_volume="{\"name\": \"webhookauthnconfigmount\",\"hostPath\": {\"path\": \"/etc/gcp_authn.config\"}},"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local authorization_mode="RBAC"
0000000000000000000000000000000000000000;;	  local -r src_dir="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Enable ABAC mode unless the user explicitly opts out with ENABLE_LEGACY_ABAC=false
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_LEGACY_ABAC:-}" != "false" ]]; then
0000000000000000000000000000000000000000;;	    echo "Warning: Enabling legacy ABAC policy. All service accounts will have superuser API access. Set ENABLE_LEGACY_ABAC=false to disable this."
0000000000000000000000000000000000000000;;	    # Create the ABAC file if it doesn't exist yet, or if we have a KUBE_USER set (to ensure the right user is given permissions)
0000000000000000000000000000000000000000;;	    if [[ -n "${KUBE_USER:-}" || ! -e /etc/srv/kubernetes/abac-authz-policy.jsonl ]]; then
0000000000000000000000000000000000000000;;	      local -r abac_policy_json="${src_dir}/abac-authz-policy.jsonl"
0000000000000000000000000000000000000000;;	      remove-salt-config-comments "${abac_policy_json}"
0000000000000000000000000000000000000000;;	      if [[ -n "${KUBE_USER:-}" ]]; then
0000000000000000000000000000000000000000;;	        sed -i -e "s/{{kube_user}}/${KUBE_USER}/g" "${abac_policy_json}"
0000000000000000000000000000000000000000;;	      else
0000000000000000000000000000000000000000;;	        sed -i -e "/{{kube_user}}/d" "${abac_policy_json}"
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      cp "${abac_policy_json}" /etc/srv/kubernetes/
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    params+=" --authorization-policy-file=/etc/srv/kubernetes/abac-authz-policy.jsonl"
0000000000000000000000000000000000000000;;	    authorization_mode+=",ABAC"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local webhook_config_mount=""
0000000000000000000000000000000000000000;;	  local webhook_config_volume=""
0000000000000000000000000000000000000000;;	  if [[ -n "${GCP_AUTHZ_URL:-}" ]]; then
0000000000000000000000000000000000000000;;	    authorization_mode+=",Webhook"
0000000000000000000000000000000000000000;;	    params+=" --authorization-webhook-config-file=/etc/gcp_authz.config"
0000000000000000000000000000000000000000;;	    webhook_config_mount="{\"name\": \"webhookconfigmount\",\"mountPath\": \"/etc/gcp_authz.config\", \"readOnly\": false},"
0000000000000000000000000000000000000000;;	    webhook_config_volume="{\"name\": \"webhookconfigmount\",\"hostPath\": {\"path\": \"/etc/gcp_authz.config\"}},"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  params+=" --authorization-mode=${authorization_mode}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local container_env=""
0000000000000000000000000000000000000000;;	  if [[ -n "${ENABLE_CACHE_MUTATION_DETECTOR:-}" ]]; then
0000000000000000000000000000000000000000;;	    container_env="\"name\": \"KUBE_CACHE_MUTATION_DETECTOR\", \"value\": \"${ENABLE_CACHE_MUTATION_DETECTOR}\""
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${ENABLE_PATCH_CONVERSION_DETECTOR:-}" ]]; then
0000000000000000000000000000000000000000;;	    if [[ -n "${container_env}" ]]; then
0000000000000000000000000000000000000000;;	      container_env="${container_env}, "
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    container_env="\"name\": \"KUBE_PATCH_CONVERSION_DETECTOR\", \"value\": \"${ENABLE_PATCH_CONVERSION_DETECTOR}\""
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${container_env}" ]]; then
0000000000000000000000000000000000000000;;	    container_env="\"env\":[{${container_env}}],"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  src_file="${src_dir}/kube-apiserver.manifest"
0000000000000000000000000000000000000000;;	  remove-salt-config-comments "${src_file}"
0000000000000000000000000000000000000000;;	  # Evaluate variables.
0000000000000000000000000000000000000000;;	  local -r kube_apiserver_docker_tag=$(cat /opt/kubernetes/kube-docker-files/kube-apiserver.docker_tag)
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{params}}@${params}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{container_env}}@${container_env}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{srv_kube_path}}@/etc/srv/kubernetes@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{srv_sshproxy_path}}@/etc/srv/sshproxy@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{cloud_config_mount}}@${CLOUD_CONFIG_MOUNT}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{cloud_config_volume}}@${CLOUD_CONFIG_VOLUME}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['kube_docker_registry'\]}}@${DOCKER_REGISTRY}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['kube-apiserver_docker_tag'\]}}@${kube_apiserver_docker_tag}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['allow_privileged'\]}}@true@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{secure_port}}@443@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{secure_port}}@8080@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{additional_cloud_config_mount}}@@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{additional_cloud_config_volume}}@@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{webhook_authn_config_mount}}@${webhook_authn_config_mount}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{webhook_authn_config_volume}}@${webhook_authn_config_volume}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{webhook_config_mount}}@${webhook_config_mount}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{webhook_config_volume}}@${webhook_config_volume}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{admission_controller_config_mount}}@${admission_controller_config_mount}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{admission_controller_config_volume}}@${admission_controller_config_volume}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{image_policy_webhook_config_mount}}@${image_policy_webhook_config_mount}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{image_policy_webhook_config_volume}}@${image_policy_webhook_config_volume}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  cp "${src_file}" /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts kubernetes controller manager.
0000000000000000000000000000000000000000;;	# It prepares the log file, loads the docker image, calculates variables, sets them
0000000000000000000000000000000000000000;;	# in the manifest file, and then copies the manifest file to /etc/kubernetes/manifests.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars (which are calculated in function compute-master-manifest-variables)
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_OPT
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_VOLUME
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_MOUNT
0000000000000000000000000000000000000000;;	#   DOCKER_REGISTRY
0000000000000000000000000000000000000000;;	function start-kube-controller-manager {
0000000000000000000000000000000000000000;;	  echo "Start kubernetes controller-manager"
0000000000000000000000000000000000000000;;	  create-kubecontrollermanager-kubeconfig
0000000000000000000000000000000000000000;;	  prepare-log-file /var/log/kube-controller-manager.log
0000000000000000000000000000000000000000;;	  # Calculate variables and assemble the command line.
0000000000000000000000000000000000000000;;	  local params="${CONTROLLER_MANAGER_TEST_LOG_LEVEL:-"--v=2"} ${CONTROLLER_MANAGER_TEST_ARGS:-} ${CLOUD_CONFIG_OPT}"
0000000000000000000000000000000000000000;;	  params+=" --use-service-account-credentials"
0000000000000000000000000000000000000000;;	  params+=" --cloud-provider=gce"
0000000000000000000000000000000000000000;;	  params+=" --kubeconfig=/etc/srv/kubernetes/kube-controller-manager/kubeconfig"
0000000000000000000000000000000000000000;;	  params+=" --root-ca-file=/etc/srv/kubernetes/ca.crt"
0000000000000000000000000000000000000000;;	  params+=" --service-account-private-key-file=/etc/srv/kubernetes/server.key"
0000000000000000000000000000000000000000;;	  if [[ -n "${ENABLE_GARBAGE_COLLECTOR:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --enable-garbage-collector=${ENABLE_GARBAGE_COLLECTOR}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${INSTANCE_PREFIX:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --cluster-name=${INSTANCE_PREFIX}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${CLUSTER_IP_RANGE:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --cluster-cidr=${CLUSTER_IP_RANGE}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${SERVICE_CLUSTER_IP_RANGE:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --service-cluster-ip-range=${SERVICE_CLUSTER_IP_RANGE}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${NETWORK_PROVIDER:-}" == "kubenet" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --allocate-node-cidrs=true"
0000000000000000000000000000000000000000;;	  elif [[ -n "${ALLOCATE_NODE_CIDRS:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --allocate-node-cidrs=${ALLOCATE_NODE_CIDRS}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${TERMINATED_POD_GC_THRESHOLD:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --terminated-pod-gc-threshold=${TERMINATED_POD_GC_THRESHOLD}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_IP_ALIASES:-}" == 'true' ]]; then
0000000000000000000000000000000000000000;;	    params+=" --cidr-allocator-type=CloudAllocator"
0000000000000000000000000000000000000000;;	    params+=" --configure-cloud-routes=false"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${FEATURE_GATES:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --feature-gates=${FEATURE_GATES}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local -r kube_rc_docker_tag=$(cat /opt/kubernetes/kube-docker-files/kube-controller-manager.docker_tag)
0000000000000000000000000000000000000000;;	  local container_env=""
0000000000000000000000000000000000000000;;	  if [[ -n "${ENABLE_CACHE_MUTATION_DETECTOR:-}" ]]; then
0000000000000000000000000000000000000000;;	    container_env="\"env\":[{\"name\": \"KUBE_CACHE_MUTATION_DETECTOR\", \"value\": \"${ENABLE_CACHE_MUTATION_DETECTOR}\"}],"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r src_file="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/kube-controller-manager.manifest"
0000000000000000000000000000000000000000;;	  remove-salt-config-comments "${src_file}"
0000000000000000000000000000000000000000;;	  # Evaluate variables.
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{srv_kube_path}}@/etc/srv/kubernetes@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['kube_docker_registry'\]}}@${DOCKER_REGISTRY}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['kube-controller-manager_docker_tag'\]}}@${kube_rc_docker_tag}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{params}}@${params}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{container_env}}@${container_env}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{cloud_config_mount}}@${CLOUD_CONFIG_MOUNT}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{cloud_config_volume}}@${CLOUD_CONFIG_VOLUME}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{additional_cloud_config_mount}}@@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{additional_cloud_config_volume}}@@g" "${src_file}"
0000000000000000000000000000000000000000;;	  cp "${src_file}" /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts kubernetes scheduler.
0000000000000000000000000000000000000000;;	# It prepares the log file, loads the docker image, calculates variables, sets them
0000000000000000000000000000000000000000;;	# in the manifest file, and then copies the manifest file to /etc/kubernetes/manifests.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars (which are calculated in compute-master-manifest-variables)
0000000000000000000000000000000000000000;;	#   DOCKER_REGISTRY
0000000000000000000000000000000000000000;;	function start-kube-scheduler {
0000000000000000000000000000000000000000;;	  echo "Start kubernetes scheduler"
0000000000000000000000000000000000000000;;	  create-kubescheduler-kubeconfig
0000000000000000000000000000000000000000;;	  prepare-log-file /var/log/kube-scheduler.log
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Calculate variables and set them in the manifest.
0000000000000000000000000000000000000000;;	  params="${SCHEDULER_TEST_LOG_LEVEL:-"--v=2"} ${SCHEDULER_TEST_ARGS:-}"
0000000000000000000000000000000000000000;;	  params+=" --kubeconfig=/etc/srv/kubernetes/kube-scheduler/kubeconfig"
0000000000000000000000000000000000000000;;	  if [[ -n "${FEATURE_GATES:-}" ]]; then
0000000000000000000000000000000000000000;;	    params+=" --feature-gates=${FEATURE_GATES}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ -n "${SCHEDULING_ALGORITHM_PROVIDER:-}"  ]]; then
0000000000000000000000000000000000000000;;	    params+=" --algorithm-provider=${SCHEDULING_ALGORITHM_PROVIDER}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local -r kube_scheduler_docker_tag=$(cat "${KUBE_HOME}/kube-docker-files/kube-scheduler.docker_tag")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Remove salt comments and replace variables with values.
0000000000000000000000000000000000000000;;	  local -r src_file="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/kube-scheduler.manifest"
0000000000000000000000000000000000000000;;	  remove-salt-config-comments "${src_file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{srv_kube_path}}@/etc/srv/kubernetes@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{params}}@${params}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['kube_docker_registry'\]}}@${DOCKER_REGISTRY}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  sed -i -e "s@{{pillar\['kube-scheduler_docker_tag'\]}}@${kube_scheduler_docker_tag}@g" "${src_file}"
0000000000000000000000000000000000000000;;	  cp "${src_file}" /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts cluster autoscaler.
0000000000000000000000000000000000000000;;	# Assumed vars (which are calculated in function compute-master-manifest-variables)
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_OPT
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_VOLUME
0000000000000000000000000000000000000000;;	#   CLOUD_CONFIG_MOUNT
0000000000000000000000000000000000000000;;	function start-cluster-autoscaler {
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_CLUSTER_AUTOSCALER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    echo "Start kubernetes cluster autoscaler"
0000000000000000000000000000000000000000;;	    prepare-log-file /var/log/cluster-autoscaler.log
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Remove salt comments and replace variables with values
0000000000000000000000000000000000000000;;	    local -r src_file="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/cluster-autoscaler.manifest"
0000000000000000000000000000000000000000;;	    remove-salt-config-comments "${src_file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    local params="${AUTOSCALER_MIG_CONFIG} ${CLOUD_CONFIG_OPT} ${AUTOSCALER_EXPANDER_CONFIG:-}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{params}}@${params}@g" "${src_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{cloud_config_mount}}@${CLOUD_CONFIG_MOUNT}@g" "${src_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{cloud_config_volume}}@${CLOUD_CONFIG_VOLUME}@g" "${src_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{%.*%}@@g" "${src_file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cp "${src_file}" /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A helper function for copying addon manifests and set dir/files
0000000000000000000000000000000000000000;;	# permissions.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# $1: addon category under /etc/kubernetes
0000000000000000000000000000000000000000;;	# $2: manifest source dir
0000000000000000000000000000000000000000;;	function setup-addon-manifests {
0000000000000000000000000000000000000000;;	  local -r src_dir="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/$2"
0000000000000000000000000000000000000000;;	  local -r dst_dir="/etc/kubernetes/$1/$2"
0000000000000000000000000000000000000000;;	  if [[ ! -d "${dst_dir}" ]]; then
0000000000000000000000000000000000000000;;	    mkdir -p "${dst_dir}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local files=$(find "${src_dir}" -maxdepth 1 -name "*.yaml")
0000000000000000000000000000000000000000;;	  if [[ -n "${files}" ]]; then
0000000000000000000000000000000000000000;;	    cp "${src_dir}/"*.yaml "${dst_dir}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  files=$(find "${src_dir}" -maxdepth 1 -name "*.json")
0000000000000000000000000000000000000000;;	  if [[ -n "${files}" ]]; then
0000000000000000000000000000000000000000;;	    cp "${src_dir}/"*.json "${dst_dir}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  files=$(find "${src_dir}" -maxdepth 1 -name "*.yaml.in")
0000000000000000000000000000000000000000;;	  if [[ -n "${files}" ]]; then
0000000000000000000000000000000000000000;;	    cp "${src_dir}/"*.yaml.in "${dst_dir}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  chown -R root:root "${dst_dir}"
0000000000000000000000000000000000000000;;	  chmod 755 "${dst_dir}"
0000000000000000000000000000000000000000;;	  chmod 644 "${dst_dir}"/*
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Prepares the manifests of k8s addons, and starts the addon manager.
0000000000000000000000000000000000000000;;	# Vars assumed:
0000000000000000000000000000000000000000;;	#   CLUSTER_NAME
0000000000000000000000000000000000000000;;	function start-kube-addons {
0000000000000000000000000000000000000000;;	  echo "Prepare kube-addons manifests and start kube addon manager"
0000000000000000000000000000000000000000;;	  local -r src_dir="${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty"
0000000000000000000000000000000000000000;;	  local -r dst_dir="/etc/kubernetes/addons"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # prep addition kube-up specific rbac objects
0000000000000000000000000000000000000000;;	  setup-addon-manifests "addons" "rbac"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Set up manifests of other addons.
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_CLUSTER_MONITORING:-}" == "influxdb" ]] || \
0000000000000000000000000000000000000000;;	     [[ "${ENABLE_CLUSTER_MONITORING:-}" == "google" ]] || \
0000000000000000000000000000000000000000;;	     [[ "${ENABLE_CLUSTER_MONITORING:-}" == "stackdriver" ]] || \
0000000000000000000000000000000000000000;;	     [[ "${ENABLE_CLUSTER_MONITORING:-}" == "standalone" ]] || \
0000000000000000000000000000000000000000;;	     [[ "${ENABLE_CLUSTER_MONITORING:-}" == "googleinfluxdb" ]]; then
0000000000000000000000000000000000000000;;	    local -r file_dir="cluster-monitoring/${ENABLE_CLUSTER_MONITORING}"
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "cluster-monitoring"
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "${file_dir}"
0000000000000000000000000000000000000000;;	    # Replace the salt configurations with variable values.
0000000000000000000000000000000000000000;;	    base_metrics_memory="140Mi"
0000000000000000000000000000000000000000;;	    base_eventer_memory="190Mi"
0000000000000000000000000000000000000000;;	    base_metrics_cpu="80m"
0000000000000000000000000000000000000000;;	    nanny_memory="90Mi"
0000000000000000000000000000000000000000;;	    local -r metrics_memory_per_node="4"
0000000000000000000000000000000000000000;;	    local -r metrics_cpu_per_node="0.5"
0000000000000000000000000000000000000000;;	    local -r eventer_memory_per_node="500"
0000000000000000000000000000000000000000;;	    local -r nanny_memory_per_node="200"
0000000000000000000000000000000000000000;;	    if [[ -n "${NUM_NODES:-}" && "${NUM_NODES}" -ge 1 ]]; then
0000000000000000000000000000000000000000;;	      num_kube_nodes="$((${NUM_NODES}+1))"
0000000000000000000000000000000000000000;;	      nanny_memory="$((${num_kube_nodes} * ${nanny_memory_per_node} + 90 * 1024))Ki"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    controller_yaml="${dst_dir}/${file_dir}"
0000000000000000000000000000000000000000;;	    if [[ "${ENABLE_CLUSTER_MONITORING:-}" == "googleinfluxdb" ]]; then
0000000000000000000000000000000000000000;;	      controller_yaml="${controller_yaml}/heapster-controller-combined.yaml"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      controller_yaml="${controller_yaml}/heapster-controller.yaml"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    remove-salt-config-comments "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ cluster_name }}@${CLUSTER_NAME}@g" "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *base_metrics_memory *}}@${base_metrics_memory}@g" "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *base_metrics_cpu *}}@${base_metrics_cpu}@g" "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *base_eventer_memory *}}@${base_eventer_memory}@g" "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *metrics_memory_per_node *}}@${metrics_memory_per_node}@g" "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *eventer_memory_per_node *}}@${eventer_memory_per_node}@g" "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *nanny_memory *}}@${nanny_memory}@g" "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *metrics_cpu_per_node *}}@${metrics_cpu_per_node}@g" "${controller_yaml}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_CLUSTER_DNS:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "dns"
0000000000000000000000000000000000000000;;	    local -r dns_controller_file="${dst_dir}/dns/kubedns-controller.yaml"
0000000000000000000000000000000000000000;;	    local -r dns_svc_file="${dst_dir}/dns/kubedns-svc.yaml"
0000000000000000000000000000000000000000;;	    mv "${dst_dir}/dns/kubedns-controller.yaml.in" "${dns_controller_file}"
0000000000000000000000000000000000000000;;	    mv "${dst_dir}/dns/kubedns-svc.yaml.in" "${dns_svc_file}"
0000000000000000000000000000000000000000;;	    # Replace the salt configurations with variable values.
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\['dns_domain'\] *}}@${DNS_DOMAIN}@g" "${dns_controller_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\['dns_server'\] *}}@${DNS_SERVER_IP}@g" "${dns_svc_file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if [[ "${ENABLE_DNS_HORIZONTAL_AUTOSCALER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	      setup-addon-manifests "addons" "dns-horizontal-autoscaler"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_CLUSTER_REGISTRY:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "registry"
0000000000000000000000000000000000000000;;	    local -r registry_pv_file="${dst_dir}/registry/registry-pv.yaml"
0000000000000000000000000000000000000000;;	    local -r registry_pvc_file="${dst_dir}/registry/registry-pvc.yaml"
0000000000000000000000000000000000000000;;	    mv "${dst_dir}/registry/registry-pv.yaml.in" "${registry_pv_file}"
0000000000000000000000000000000000000000;;	    mv "${dst_dir}/registry/registry-pvc.yaml.in" "${registry_pvc_file}"
0000000000000000000000000000000000000000;;	    # Replace the salt configurations with variable values.
0000000000000000000000000000000000000000;;	    remove-salt-config-comments "${controller_yaml}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\['cluster_registry_disk_size'\] *}}@${CLUSTER_REGISTRY_DISK_SIZE}@g" "${registry_pv_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\['cluster_registry_disk_size'\] *}}@${CLUSTER_REGISTRY_DISK_SIZE}@g" "${registry_pvc_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@{{ *pillar\['cluster_registry_disk_name'\] *}}@${CLUSTER_REGISTRY_DISK}@g" "${registry_pvc_file}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_NODE_LOGGING:-}" == "true" ]] && \
0000000000000000000000000000000000000000;;	     [[ "${LOGGING_DESTINATION:-}" == "elasticsearch" ]] && \
0000000000000000000000000000000000000000;;	     [[ "${ENABLE_CLUSTER_LOGGING:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "fluentd-elasticsearch"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_NODE_LOGGING:-}" == "true" ]] && \
0000000000000000000000000000000000000000;;	     [[ "${LOGGING_DESTINATION:-}" == "gcp" ]]; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "fluentd-gcp"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_CLUSTER_UI:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "dashboard"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_NODE_PROBLEM_DETECTOR:-}" == "daemonset" ]]; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "node-problem-detector"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if echo "${ADMISSION_CONTROL:-}" | grep -q "LimitRanger"; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "admission-controls" "limit-range"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${NETWORK_POLICY_PROVIDER:-}" == "calico" ]]; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "calico-policy-controller"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Configure Calico based on cluster size and image type. 
0000000000000000000000000000000000000000;;	    local -r ds_file="${dst_dir}/calico-policy-controller/calico-node-daemonset.yaml"
0000000000000000000000000000000000000000;;	    local -r typha_dep_file="${dst_dir}/calico-policy-controller/typha-deployment.yaml"
0000000000000000000000000000000000000000;;	    sed -i -e "s@__CALICO_CNI_DIR__@/opt/cni/bin@g" "${ds_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@__CALICO_NODE_CPU__@$(get-calico-node-cpu)@g" "${ds_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@__CALICO_TYPHA_CPU__@$(get-calico-typha-cpu)@g" "${typha_dep_file}"
0000000000000000000000000000000000000000;;	    sed -i -e "s@__CALICO_TYPHA_REPLICAS__@$(get-calico-typha-replicas)@g" "${typha_dep_file}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    # If not configured to use Calico, the set the typha replica count to 0, but only if the 
0000000000000000000000000000000000000000;;	    # addon is present.
0000000000000000000000000000000000000000;;	    local -r typha_dep_file="${dst_dir}/calico-policy-controller/typha-deployment.yaml"
0000000000000000000000000000000000000000;;	    if [[ -e $typha_dep_file ]]; then
0000000000000000000000000000000000000000;;	      sed -i -e "s@__CALICO_TYPHA_REPLICAS__@0@g" "${typha_dep_file}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_DEFAULT_STORAGE_CLASS:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "storage-class/gce"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Place addon manager pod manifest.
0000000000000000000000000000000000000000;;	  cp "${src_dir}/kube-addon-manager.yaml" /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts an image-puller - used in test clusters.
0000000000000000000000000000000000000000;;	function start-image-puller {
0000000000000000000000000000000000000000;;	  echo "Start image-puller"
0000000000000000000000000000000000000000;;	  cp "${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/e2e-image-puller.manifest" \
0000000000000000000000000000000000000000;;	    /etc/kubernetes/manifests/
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts kube-registry proxy
0000000000000000000000000000000000000000;;	function start-kube-registry-proxy {
0000000000000000000000000000000000000000;;	  echo "Start kube-registry-proxy"
0000000000000000000000000000000000000000;;	  cp "${KUBE_HOME}/kube-manifests/kubernetes/kube-registry-proxy.yaml" /etc/kubernetes/manifests
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts a l7 loadbalancing controller for ingress.
0000000000000000000000000000000000000000;;	function start-lb-controller {
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_L7_LOADBALANCING:-}" == "glbc" ]]; then
0000000000000000000000000000000000000000;;	    echo "Start GCE L7 pod"
0000000000000000000000000000000000000000;;	    prepare-log-file /var/log/glbc.log
0000000000000000000000000000000000000000;;	    setup-addon-manifests "addons" "cluster-loadbalancing/glbc"
0000000000000000000000000000000000000000;;	    cp "${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/glbc.manifest" \
0000000000000000000000000000000000000000;;	       /etc/kubernetes/manifests/
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts rescheduler.
0000000000000000000000000000000000000000;;	function start-rescheduler {
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_RESCHEDULER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    echo "Start Rescheduler"
0000000000000000000000000000000000000000;;	    prepare-log-file /var/log/rescheduler.log
0000000000000000000000000000000000000000;;	    cp "${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty/rescheduler.manifest" \
0000000000000000000000000000000000000000;;	       /etc/kubernetes/manifests/
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Install and setup rkt
0000000000000000000000000000000000000000;;	# TODO(euank): There should be a toggle to use the distro-provided rkt binary
0000000000000000000000000000000000000000;;	# Sets the following variables:
0000000000000000000000000000000000000000;;	#   RKT_BIN: the path to the rkt binary
0000000000000000000000000000000000000000;;	function setup-rkt {
0000000000000000000000000000000000000000;;	    local rkt_bin="${KUBE_HOME}/bin/rkt"
0000000000000000000000000000000000000000;;	    if [[ -x "${rkt_bin}" ]]; then
0000000000000000000000000000000000000000;;	      # idempotency, skip downloading this time
0000000000000000000000000000000000000000;;	      # TODO(euank): this might get in the way of updates, but 'file busy'
0000000000000000000000000000000000000000;;	      # because of rkt-api would too
0000000000000000000000000000000000000000;;	      RKT_BIN="${rkt_bin}"
0000000000000000000000000000000000000000;;	      return
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    mkdir -p /etc/rkt "${KUBE_HOME}/download/"
0000000000000000000000000000000000000000;;	    local rkt_tar="${KUBE_HOME}/download/rkt.tar.gz"
0000000000000000000000000000000000000000;;	    local rkt_tmpdir=$(mktemp -d "${KUBE_HOME}/rkt_download.XXXXX")
0000000000000000000000000000000000000000;;	    curl --retry 5 --retry-delay 3 --fail --silent --show-error \
0000000000000000000000000000000000000000;;	      --location --create-dirs --output "${rkt_tar}" \
0000000000000000000000000000000000000000;;	      https://github.com/coreos/rkt/releases/download/v${RKT_VERSION}/rkt-v${RKT_VERSION}.tar.gz
0000000000000000000000000000000000000000;;	    tar --strip-components=1 -xf "${rkt_tar}" -C "${rkt_tmpdir}" --overwrite
0000000000000000000000000000000000000000;;	    mv "${rkt_tmpdir}/rkt" "${rkt_bin}"
0000000000000000000000000000000000000000;;	    if [[ ! -x "${rkt_bin}" ]]; then
0000000000000000000000000000000000000000;;	      echo "Could not download requested rkt binary"
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    RKT_BIN="${rkt_bin}"
0000000000000000000000000000000000000000;;	    # Cache rkt stage1 images for speed
0000000000000000000000000000000000000000;;	    "${RKT_BIN}" fetch --insecure-options=image "${rkt_tmpdir}"/*.aci
0000000000000000000000000000000000000000;;	    rm -rf "${rkt_tmpdir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cat > /etc/systemd/system/rkt-api.service <<EOF
0000000000000000000000000000000000000000;;	[Unit]
0000000000000000000000000000000000000000;;	Description=rkt api service
0000000000000000000000000000000000000000;;	Documentation=http://github.com/coreos/rkt
0000000000000000000000000000000000000000;;	After=network.target
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Service]
0000000000000000000000000000000000000000;;	ExecStart=${RKT_BIN} api-service --listen=127.0.0.1:15441
0000000000000000000000000000000000000000;;	Restart=on-failure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Install]
0000000000000000000000000000000000000000;;	WantedBy=multi-user.target
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    systemctl enable rkt-api.service
0000000000000000000000000000000000000000;;	    systemctl start rkt-api.service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Install docker2aci, needed to load server images if using rkt runtime
0000000000000000000000000000000000000000;;	# This should be removed once rkt can fetch on-disk docker tarballs directly
0000000000000000000000000000000000000000;;	# Sets the following variables:
0000000000000000000000000000000000000000;;	#   DOCKER2ACI_BIN: the path to the docker2aci binary
0000000000000000000000000000000000000000;;	function install-docker2aci {
0000000000000000000000000000000000000000;;	  local tar_path="${KUBE_HOME}/download/docker2aci.tar.gz"
0000000000000000000000000000000000000000;;	  local tmp_path="${KUBE_HOME}/docker2aci"
0000000000000000000000000000000000000000;;	  mkdir -p "${KUBE_HOME}/download/" "${tmp_path}"
0000000000000000000000000000000000000000;;	  curl --retry 5 --retry-delay 3 --fail --silent --show-error \
0000000000000000000000000000000000000000;;	    --location --create-dirs --output "${tar_path}" \
0000000000000000000000000000000000000000;;	    https://github.com/appc/docker2aci/releases/download/v0.14.0/docker2aci-v0.14.0.tar.gz
0000000000000000000000000000000000000000;;	  tar --strip-components=1 -xf "${tar_path}" -C "${tmp_path}" --overwrite
0000000000000000000000000000000000000000;;	  DOCKER2ACI_BIN="${KUBE_HOME}/bin/docker2aci"
0000000000000000000000000000000000000000;;	  mv "${tmp_path}/docker2aci" "${DOCKER2ACI_BIN}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	########### Main Function ###########
0000000000000000000000000000000000000000;;	echo "Start to configure instance for kubernetes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Note: this name doesn't make as much sense here as in gci where it's actually
0000000000000000000000000000000000000000;;	# /home/kubernetes, but for ease of diff-ing, retain the same variable name
0000000000000000000000000000000000000000;;	KUBE_HOME="/opt/kubernetes"
0000000000000000000000000000000000000000;;	if [[ ! -e "${KUBE_HOME}/kube-env" ]]; then
0000000000000000000000000000000000000000;;	  echo "The ${KUBE_HOME}/kube-env file does not exist!! Terminate cluster initialization."
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_HOME}/kube-env"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -n "${KUBE_USER:-}" ]]; then
0000000000000000000000000000000000000000;;	  if ! [[ "${KUBE_USER}" =~ ^[-._@a-zA-Z0-9]+$ ]]; then
0000000000000000000000000000000000000000;;	    echo "Bad KUBE_USER format."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# generate the controller manager and scheduler tokens here since they are only used on the master.
0000000000000000000000000000000000000000;;	KUBE_CONTROLLER_MANAGER_TOKEN=$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null)
0000000000000000000000000000000000000000;;	KUBE_SCHEDULER_TOKEN=$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# KUBERNETES_CONTAINER_RUNTIME is set by the `kube-env` file, but it's a bit of a mouthful
0000000000000000000000000000000000000000;;	if [[ "${CONTAINER_RUNTIME:-}" == "" ]]; then
0000000000000000000000000000000000000000;;	  CONTAINER_RUNTIME="${KUBERNETES_CONTAINER_RUNTIME:-docker}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	create-dirs
0000000000000000000000000000000000000000;;	ensure-local-ssds
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  mount-master-pd
0000000000000000000000000000000000000000;;	  create-master-auth
0000000000000000000000000000000000000000;;	  create-master-kubelet-auth
0000000000000000000000000000000000000000;;	  create-master-etcd-auth
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  create-kubelet-kubeconfig
0000000000000000000000000000000000000000;;	  create-kubeproxy-kubeconfig
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${CONTAINER_RUNTIME:-}" == "rkt" ]]; then
0000000000000000000000000000000000000000;;	  systemctl stop docker
0000000000000000000000000000000000000000;;	  systemctl disable docker
0000000000000000000000000000000000000000;;	  setup-rkt
0000000000000000000000000000000000000000;;	  install-docker2aci
0000000000000000000000000000000000000000;;	  create-kube-controller-manager-dirs
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  configure-docker-daemon
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	load-docker-images
0000000000000000000000000000000000000000;;	start-kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  compute-master-manifest-variables
0000000000000000000000000000000000000000;;	  start-etcd-servers
0000000000000000000000000000000000000000;;	  start-etcd-empty-dir-cleanup-pod
0000000000000000000000000000000000000000;;	  start-kube-apiserver
0000000000000000000000000000000000000000;;	  start-kube-controller-manager
0000000000000000000000000000000000000000;;	  start-kube-scheduler
0000000000000000000000000000000000000000;;	  start-kube-addons
0000000000000000000000000000000000000000;;	  start-cluster-autoscaler
0000000000000000000000000000000000000000;;	  start-lb-controller
0000000000000000000000000000000000000000;;	  start-rescheduler
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  start-kube-proxy
0000000000000000000000000000000000000000;;	  # Kube-registry-proxy.
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_CLUSTER_REGISTRY:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    start-kube-registry-proxy
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${PREPULL_E2E_IMAGES:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    start-image-puller
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	echo "Done for the configuration for kubernetes"
