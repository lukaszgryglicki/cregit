0000000000000000000000000000000000000000;;	#!/bin/sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Due to the GCE custom metadata size limit, we split the entire script into two
0000000000000000000000000000000000000000;;	# files configure.sh and configure-helper.sh. The functionality of downloading
0000000000000000000000000000000000000000;;	# kubernetes configuration, manifests, docker images, and binary files are
0000000000000000000000000000000000000000;;	# put in configure.sh, which is uploaded via GCE custom metadata.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	RKT_VERSION="v1.18.0"
0000000000000000000000000000000000000000;;	DOCKER2ACI_VERSION="v0.13.0"
0000000000000000000000000000000000000000;;	MOUNTER_VERSION=$1
0000000000000000000000000000000000000000;;	DOCKER_IMAGE=docker://$2
0000000000000000000000000000000000000000;;	MOUNTER_ACI_IMAGE=gci-mounter-${MOUNTER_VERSION}.aci
0000000000000000000000000000000000000000;;	RKT_GCS_DIR=gs://kubernetes-release/rkt/
0000000000000000000000000000000000000000;;	MOUNTER_GCS_DIR=gs://kubernetes-release/gci-mounter/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	TMPDIR=/tmp
0000000000000000000000000000000000000000;;	# Setup a working directory
0000000000000000000000000000000000000000;;	DOWNLOAD_DIR=$(mktemp --tmpdir=${TMPDIR} -d gci-mounter-build.XXXXXXXXXX)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Setup a staging directory
0000000000000000000000000000000000000000;;	STAGING_DIR=$(mktemp --tmpdir=${TMPDIR} -d gci-mounter-staging.XXXXXXXXXX)
0000000000000000000000000000000000000000;;	RKT_DIR=${STAGING_DIR}/${RKT_VERSION}
0000000000000000000000000000000000000000;;	ACI_DIR=${STAGING_DIR}/gci-mounter
0000000000000000000000000000000000000000;;	CWD=${PWD}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Cleanup the temporary directories
0000000000000000000000000000000000000000;;	function cleanup {
0000000000000000000000000000000000000000;;	    rm -rf ${DOWNLOAD_DIR}
0000000000000000000000000000000000000000;;	    rm -rf ${STAGING_DIR}
0000000000000000000000000000000000000000;;	    cd ${CWD}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Delete temporary directories on exit
0000000000000000000000000000000000000000;;	trap cleanup EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	mkdir ${RKT_DIR}
0000000000000000000000000000000000000000;;	mkdir ${ACI_DIR}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Download rkt
0000000000000000000000000000000000000000;;	cd ${DOWNLOAD_DIR}
0000000000000000000000000000000000000000;;	echo "Downloading rkt ${RKT_VERSION}"
0000000000000000000000000000000000000000;;	wget "https://github.com/coreos/rkt/releases/download/${RKT_VERSION}/rkt-${RKT_VERSION}.tar.gz" &> /dev/null
0000000000000000000000000000000000000000;;	echo "Extracting rkt ${RKT_VERSION}"
0000000000000000000000000000000000000000;;	tar xzf rkt-${RKT_VERSION}.tar.gz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Stage rkt into working directory
0000000000000000000000000000000000000000;;	cp rkt-${RKT_VERSION}/rkt ${RKT_DIR}/rkt
0000000000000000000000000000000000000000;;	cp rkt-${RKT_VERSION}/stage1-fly.aci ${RKT_DIR}/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Convert docker image to aci and stage it
0000000000000000000000000000000000000000;;	echo "Downloading docker2aci ${DOCKER2ACI_VERSION}"
0000000000000000000000000000000000000000;;	wget "https://github.com/appc/docker2aci/releases/download/${DOCKER2ACI_VERSION}/docker2aci-${DOCKER2ACI_VERSION}.tar.gz" &> /dev/null
0000000000000000000000000000000000000000;;	echo "Extracting docker2aci ${DOCKER2ACI_VERSION}"
0000000000000000000000000000000000000000;;	tar xzf docker2aci-${DOCKER2ACI_VERSION}.tar.gz
0000000000000000000000000000000000000000;;	ACI_IMAGE=$(${DOWNLOAD_DIR}/docker2aci-${DOCKER2ACI_VERSION}/docker2aci ${DOCKER_IMAGE} 2>/dev/null | tail -n 1)
0000000000000000000000000000000000000000;;	cp ${ACI_IMAGE} ${ACI_DIR}/${MOUNTER_ACI_IMAGE}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Upload the contents to gcs
0000000000000000000000000000000000000000;;	echo "Uploading rkt artifacts in ${RKT_DIR} to ${RKT_GCS_DIR}"
0000000000000000000000000000000000000000;;	gsutil cp -R ${RKT_DIR} ${RKT_GCS_DIR}
0000000000000000000000000000000000000000;;	echo "Uploading gci mounter ACI in ${ACI_DIR} to ${MOUNTER_GCS_DIR}"
0000000000000000000000000000000000000000;;	gsutil cp ${ACI_DIR}/${MOUNTER_ACI_IMAGE} ${MOUNTER_GCS_DIR}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Upload completed"
0000000000000000000000000000000000000000;;	echo "Update rkt, stag1-fly.aci & gci-mounter ACI versions and SHA1 in cluster/gce/gci/configure.sh"
0000000000000000000000000000000000000000;;	echo "${RKT_VERSION}/rkt sha1: $(sha1sum ${RKT_DIR}/rkt)"
0000000000000000000000000000000000000000;;	echo "${RKT_VERSION}/stage1-fly.aci sha1: $(sha1sum ${RKT_DIR}/stage1-fly.aci)"
0000000000000000000000000000000000000000;;	echo "${MOUNTER_ACI_IMAGE} hash: $(sha1sum ${ACI_DIR}/${MOUNTER_ACI_IMAGE})"
