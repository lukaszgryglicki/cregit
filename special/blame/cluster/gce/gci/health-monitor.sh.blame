0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script is for master and node instance health monitoring, which is
0000000000000000000000000000000000000000;;	# packed in kube-manifest tarball. It is executed through a systemd service
0000000000000000000000000000000000000000;;	# in cluster/gce/gci/<master/node>.yaml. The env variables come from an env
0000000000000000000000000000000000000000;;	# file provided by the systemd service.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# We simply kill the process when there is a failure. Another systemd service will
0000000000000000000000000000000000000000;;	# automatically restart the process.
0000000000000000000000000000000000000000;;	function docker_monitoring {
0000000000000000000000000000000000000000;;	  while [ 1 ]; do
0000000000000000000000000000000000000000;;	    if ! timeout 60 docker ps > /dev/null; then
0000000000000000000000000000000000000000;;	      echo "Docker daemon failed!"
0000000000000000000000000000000000000000;;	      pkill docker
0000000000000000000000000000000000000000;;	      # Wait for a while, as we don't want to kill it again before it is really up.
0000000000000000000000000000000000000000;;	      sleep 30
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      sleep "${SLEEP_SECONDS}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function kubelet_monitoring {
0000000000000000000000000000000000000000;;	  echo "Wait for 2 minutes for kubelet to be functional"
0000000000000000000000000000000000000000;;	  # TODO(andyzheng0831): replace it with a more reliable method if possible.
0000000000000000000000000000000000000000;;	  sleep 120
0000000000000000000000000000000000000000;;	  local -r max_seconds=10
0000000000000000000000000000000000000000;;	  local output=""
0000000000000000000000000000000000000000;;	  while [ 1 ]; do
0000000000000000000000000000000000000000;;	    if ! output=$(curl -m "${max_seconds}" -f -s -S http://127.0.0.1:10255/healthz 2>&1); then
0000000000000000000000000000000000000000;;	      # Print the response and/or errors.
0000000000000000000000000000000000000000;;	      echo $output
0000000000000000000000000000000000000000;;	      echo "Kubelet is unhealthy!"
0000000000000000000000000000000000000000;;	      pkill kubelet
0000000000000000000000000000000000000000;;	      # Wait for a while, as we don't want to kill it again before it is really up.
0000000000000000000000000000000000000000;;	      sleep 60
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      sleep "${SLEEP_SECONDS}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	############## Main Function ################
0000000000000000000000000000000000000000;;	if [[ "$#" -ne 1 ]]; then
0000000000000000000000000000000000000000;;	  echo "Usage: health-monitor.sh <docker/kubelet>"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ENV="/home/kubernetes/kube-env"
0000000000000000000000000000000000000000;;	if [[ ! -e "${KUBE_ENV}" ]]; then
0000000000000000000000000000000000000000;;	  echo "The ${KUBE_ENV} file does not exist!! Terminate health monitoring"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	SLEEP_SECONDS=10
0000000000000000000000000000000000000000;;	component=$1
0000000000000000000000000000000000000000;;	echo "Start kubernetes health monitoring for ${component}"
0000000000000000000000000000000000000000;;	source "${KUBE_ENV}"
0000000000000000000000000000000000000000;;	if [[ "${component}" == "docker" ]]; then
0000000000000000000000000000000000000000;;	  docker_monitoring 
0000000000000000000000000000000000000000;;	elif [[ "${component}" == "kubelet" ]]; then
0000000000000000000000000000000000000000;;	  kubelet_monitoring
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  echo "Health monitoring for component "${component}" is not supported!"
0000000000000000000000000000000000000000;;	fi
