0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A library of helper functions and constant for GCI distro
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/gce/gci/helper.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# create-master-instance creates the master instance. If called with
0000000000000000000000000000000000000000;;	# an argument, the argument is used as the name to a reserved IP
0000000000000000000000000000000000000000;;	# address for the master. (In the case of upgrade/repair, we re-use
0000000000000000000000000000000000000000;;	# the same IP.)
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# It requires a whole slew of assumed variables, partially due to to
0000000000000000000000000000000000000000;;	# the call to write-master-env. Listing them would be rather
0000000000000000000000000000000000000000;;	# futile. Instead, we list the required calls to ensure any additional
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# variables are set:
0000000000000000000000000000000000000000;;	#   ensure-temp-dir
0000000000000000000000000000000000000000;;	#   detect-project
0000000000000000000000000000000000000000;;	#   get-bearer-token
0000000000000000000000000000000000000000;;	function create-master-instance {
0000000000000000000000000000000000000000;;	  local address=""
0000000000000000000000000000000000000000;;	  [[ -n ${1:-} ]] && address="${1}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  write-master-env
0000000000000000000000000000000000000000;;	  ensure-gci-metadata-files
0000000000000000000000000000000000000000;;	  create-master-instance-internal "${MASTER_NAME}" "${address}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function replicate-master-instance() {
0000000000000000000000000000000000000000;;	  local existing_master_zone="${1}"
0000000000000000000000000000000000000000;;	  local existing_master_name="${2}"
0000000000000000000000000000000000000000;;	  local existing_master_replicas="${3}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local kube_env="$(get-metadata "${existing_master_zone}" "${existing_master_name}" kube-env)"
0000000000000000000000000000000000000000;;	  # Substitute INITIAL_ETCD_CLUSTER to enable etcd clustering.
0000000000000000000000000000000000000000;;	  kube_env="$(echo "${kube_env}" | grep -v "INITIAL_ETCD_CLUSTER")"
0000000000000000000000000000000000000000;;	  kube_env="$(echo -e "${kube_env}\nINITIAL_ETCD_CLUSTER: '${existing_master_replicas},${REPLICA_NAME}'")"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Substitute INITIAL_ETCD_CLUSTER_STATE
0000000000000000000000000000000000000000;;	  kube_env="$(echo "${kube_env}" | grep -v "INITIAL_ETCD_CLUSTER_STATE")"
0000000000000000000000000000000000000000;;	  kube_env="$(echo -e "${kube_env}\nINITIAL_ETCD_CLUSTER_STATE: 'existing'")"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ETCD_CA_KEY="$(echo "${kube_env}" | grep "ETCD_CA_KEY" |  sed "s/^.*: '//" | sed "s/'$//")"
0000000000000000000000000000000000000000;;	  ETCD_CA_CERT="$(echo "${kube_env}" | grep "ETCD_CA_CERT" |  sed "s/^.*: '//" | sed "s/'$//")"
0000000000000000000000000000000000000000;;	  create-etcd-certs "${REPLICA_NAME}" "${ETCD_CA_CERT}" "${ETCD_CA_KEY}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_env="$(echo "${kube_env}" | grep -v "ETCD_PEER_KEY")"
0000000000000000000000000000000000000000;;	  kube_env="$(echo -e "${kube_env}\nETCD_PEER_KEY: '${ETCD_PEER_KEY_BASE64}'")"
0000000000000000000000000000000000000000;;	  kube_env="$(echo "${kube_env}" | grep -v "ETCD_PEER_CERT")"
0000000000000000000000000000000000000000;;	  kube_env="$(echo -e "${kube_env}\nETCD_PEER_CERT: '${ETCD_PEER_CERT_BASE64}'")"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "${kube_env}" > ${KUBE_TEMP}/master-kube-env.yaml
0000000000000000000000000000000000000000;;	  get-metadata "${existing_master_zone}" "${existing_master_name}" cluster-name > "${KUBE_TEMP}/cluster-name.txt"
0000000000000000000000000000000000000000;;	  get-metadata "${existing_master_zone}" "${existing_master_name}" gci-update-strategy > "${KUBE_TEMP}/gci-update.txt"
0000000000000000000000000000000000000000;;	  get-metadata "${existing_master_zone}" "${existing_master_name}" gci-ensure-gke-docker > "${KUBE_TEMP}/gci-ensure-gke-docker.txt"
0000000000000000000000000000000000000000;;	  get-metadata "${existing_master_zone}" "${existing_master_name}" gci-docker-version > "${KUBE_TEMP}/gci-docker-version.txt"
0000000000000000000000000000000000000000;;	  get-metadata "${existing_master_zone}" "${existing_master_name}" kube-master-certs > "${KUBE_TEMP}/kube-master-certs.yaml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  create-master-instance-internal "${REPLICA_NAME}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-master-instance-internal() {
0000000000000000000000000000000000000000;;	  local gcloud="gcloud"
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_IP_ALIASES:-}" == 'true' ]]; then
0000000000000000000000000000000000000000;;	    gcloud="gcloud beta"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r master_name="${1}"
0000000000000000000000000000000000000000;;	  local -r address="${2:-}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local preemptible_master=""
0000000000000000000000000000000000000000;;	  if [[ "${PREEMPTIBLE_MASTER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    preemptible_master="--preemptible --maintenance-policy TERMINATE"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local network=$(make-gcloud-network-argument \
0000000000000000000000000000000000000000;;	    "${NETWORK}" "${address:-}" \
0000000000000000000000000000000000000000;;	    "${ENABLE_IP_ALIASES:-}" "${IP_ALIAS_SUBNETWORK:-}" "${IP_ALIAS_SIZE:-}")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local metadata="kube-env=${KUBE_TEMP}/master-kube-env.yaml"
0000000000000000000000000000000000000000;;	  metadata="${metadata},user-data=${KUBE_ROOT}/cluster/gce/gci/master.yaml"
0000000000000000000000000000000000000000;;	  metadata="${metadata},configure-sh=${KUBE_ROOT}/cluster/gce/gci/configure.sh"
0000000000000000000000000000000000000000;;	  metadata="${metadata},cluster-name=${KUBE_TEMP}/cluster-name.txt"
0000000000000000000000000000000000000000;;	  metadata="${metadata},gci-update-strategy=${KUBE_TEMP}/gci-update.txt"
0000000000000000000000000000000000000000;;	  metadata="${metadata},gci-ensure-gke-docker=${KUBE_TEMP}/gci-ensure-gke-docker.txt"
0000000000000000000000000000000000000000;;	  metadata="${metadata},gci-docker-version=${KUBE_TEMP}/gci-docker-version.txt"
0000000000000000000000000000000000000000;;	  metadata="${metadata},kube-master-certs=${KUBE_TEMP}/kube-master-certs.yaml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local disk="name=${master_name}-pd"
0000000000000000000000000000000000000000;;	  disk="${disk},device-name=master-pd"
0000000000000000000000000000000000000000;;	  disk="${disk},mode=rw"
0000000000000000000000000000000000000000;;	  disk="${disk},boot=no"
0000000000000000000000000000000000000000;;	  disk="${disk},auto-delete=no"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ${gcloud} compute instances create "${master_name}" \
0000000000000000000000000000000000000000;;	    --project "${PROJECT}" \
0000000000000000000000000000000000000000;;	    --zone "${ZONE}" \
0000000000000000000000000000000000000000;;	    --machine-type "${MASTER_SIZE}" \
0000000000000000000000000000000000000000;;	    --image-project="${MASTER_IMAGE_PROJECT}" \
0000000000000000000000000000000000000000;;	    --image "${MASTER_IMAGE}" \
0000000000000000000000000000000000000000;;	    --tags "${MASTER_TAG}" \
0000000000000000000000000000000000000000;;	    --scopes "storage-ro,compute-rw,monitoring,logging-write" \
0000000000000000000000000000000000000000;;	    --metadata-from-file "${metadata}" \
0000000000000000000000000000000000000000;;	    --disk "${disk}" \
0000000000000000000000000000000000000000;;	    --boot-disk-size "${MASTER_ROOT_DISK_SIZE:-10}" \
0000000000000000000000000000000000000000;;	    ${preemptible_master} \
0000000000000000000000000000000000000000;;	    ${network}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function get-metadata() {
0000000000000000000000000000000000000000;;	  local zone="${1}"
0000000000000000000000000000000000000000;;	  local name="${2}"
0000000000000000000000000000000000000000;;	  local key="${3}"
0000000000000000000000000000000000000000;;	  gcloud compute ssh "${name}" \
0000000000000000000000000000000000000000;;	    --project "${PROJECT}" \
0000000000000000000000000000000000000000;;	    --zone "${zone}" \
0000000000000000000000000000000000000000;;	    --command "curl \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/${key}\" -H \"Metadata-Flavor: Google\"" 2>/dev/null
0000000000000000000000000000000000000000;;	}
