0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Due to the GCE custom metadata size limit, we split the entire script into two
0000000000000000000000000000000000000000;;	# files configure.sh and configure-helper.sh. The functionality of downloading
0000000000000000000000000000000000000000;;	# kubernetes configuration, manifests, docker images, and binary files are
0000000000000000000000000000000000000000;;	# put in configure.sh, which is uploaded via GCE custom metadata.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function set-broken-motd {
0000000000000000000000000000000000000000;;	  cat > /etc/motd <<EOF
0000000000000000000000000000000000000000;;	Broken (or in progress) Kubernetes node setup! Check the cluster initialization status
0000000000000000000000000000000000000000;;	using the following commands.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Master instance:
0000000000000000000000000000000000000000;;	  - sudo systemctl status kube-master-installation
0000000000000000000000000000000000000000;;	  - sudo systemctl status kube-master-configuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Node instance:
0000000000000000000000000000000000000000;;	  - sudo systemctl status kube-node-installation
0000000000000000000000000000000000000000;;	  - sudo systemctl status kube-node-configuration
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function download-kube-env {
0000000000000000000000000000000000000000;;	  # Fetch kube-env from GCE metadata server.
0000000000000000000000000000000000000000;;	  local -r tmp_kube_env="/tmp/kube-env.yaml"
0000000000000000000000000000000000000000;;	  curl --fail --retry 5 --retry-delay 3 --silent --show-error \
0000000000000000000000000000000000000000;;	    -H "X-Google-Metadata-Request: True" \
0000000000000000000000000000000000000000;;	    -o "${tmp_kube_env}" \
0000000000000000000000000000000000000000;;	    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env
0000000000000000000000000000000000000000;;	  # Convert the yaml format file into a shell-style file.
0000000000000000000000000000000000000000;;	  eval $(python -c '''
0000000000000000000000000000000000000000;;	import pipes,sys,yaml
0000000000000000000000000000000000000000;;	for k,v in yaml.load(sys.stdin).iteritems():
0000000000000000000000000000000000000000;;	  print("readonly {var}={value}".format(var = k, value = pipes.quote(str(v))))
0000000000000000000000000000000000000000;;	''' < "${tmp_kube_env}" > "${KUBE_HOME}/kube-env")
0000000000000000000000000000000000000000;;	  rm -f "${tmp_kube_env}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function download-kube-master-certs {
0000000000000000000000000000000000000000;;	  # Fetch kube-env from GCE metadata server.
0000000000000000000000000000000000000000;;	  local -r tmp_kube_master_certs="/tmp/kube-master-certs.yaml"
0000000000000000000000000000000000000000;;	  curl --fail --retry 5 --retry-delay 3 --silent --show-error \
0000000000000000000000000000000000000000;;	    -H "X-Google-Metadata-Request: True" \
0000000000000000000000000000000000000000;;	    -o "${tmp_kube_master_certs}" \
0000000000000000000000000000000000000000;;	    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs
0000000000000000000000000000000000000000;;	  # Convert the yaml format file into a shell-style file.
0000000000000000000000000000000000000000;;	  eval $(python -c '''
0000000000000000000000000000000000000000;;	import pipes,sys,yaml
0000000000000000000000000000000000000000;;	for k,v in yaml.load(sys.stdin).iteritems():
0000000000000000000000000000000000000000;;	  print("readonly {var}={value}".format(var = k, value = pipes.quote(str(v))))
0000000000000000000000000000000000000000;;	''' < "${tmp_kube_master_certs}" > "${KUBE_HOME}/kube-master-certs")
0000000000000000000000000000000000000000;;	  rm -f "${tmp_kube_master_certs}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function validate-hash {
0000000000000000000000000000000000000000;;	  local -r file="$1"
0000000000000000000000000000000000000000;;	  local -r expected="$2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  actual=$(sha1sum ${file} | awk '{ print $1 }') || true
0000000000000000000000000000000000000000;;	  if [[ "${actual}" != "${expected}" ]]; then
0000000000000000000000000000000000000000;;	    echo "== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} =="
0000000000000000000000000000000000000000;;	    return 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Retry a download until we get it. Takes a hash and a set of URLs.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# $1 is the sha1 of the URL. Can be "" if the sha1 is unknown.
0000000000000000000000000000000000000000;;	# $2+ are the URLs to download.
0000000000000000000000000000000000000000;;	function download-or-bust {
0000000000000000000000000000000000000000;;	  local -r hash="$1"
0000000000000000000000000000000000000000;;	  shift 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r urls=( $* )
0000000000000000000000000000000000000000;;	  while true; do
0000000000000000000000000000000000000000;;	    for url in "${urls[@]}"; do
0000000000000000000000000000000000000000;;	      local file="${url##*/}"
0000000000000000000000000000000000000000;;	      rm -f "${file}"
0000000000000000000000000000000000000000;;	      if ! curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 "${url}"; then
0000000000000000000000000000000000000000;;	        echo "== Failed to download ${url}. Retrying. =="
0000000000000000000000000000000000000000;;	      elif [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
0000000000000000000000000000000000000000;;	        echo "== Hash validation of ${url} failed. Retrying. =="
0000000000000000000000000000000000000000;;	      else
0000000000000000000000000000000000000000;;	        if [[ -n "${hash}" ]]; then
0000000000000000000000000000000000000000;;	          echo "== Downloaded ${url} (SHA1 = ${hash}) =="
0000000000000000000000000000000000000000;;	        else
0000000000000000000000000000000000000000;;	          echo "== Downloaded ${url} =="
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	        return
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function split-commas {
0000000000000000000000000000000000000000;;	  echo $1 | tr "," "\n"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function install-gci-mounter-tools {
0000000000000000000000000000000000000000;;	  CONTAINERIZED_MOUNTER_HOME="${KUBE_HOME}/containerized_mounter"
0000000000000000000000000000000000000000;;	  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}"
0000000000000000000000000000000000000000;;	  chmod a+x "${CONTAINERIZED_MOUNTER_HOME}"
0000000000000000000000000000000000000000;;	  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}/rootfs"
0000000000000000000000000000000000000000;;	  local -r mounter_tar_sha="8003b798cf33c7f91320cd6ee5cec4fa22244571"
0000000000000000000000000000000000000000;;	  download-or-bust "${mounter_tar_sha}" "https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar"
0000000000000000000000000000000000000000;;	  cp "${dst_dir}/kubernetes/gci-trusty/gci-mounter" "${CONTAINERIZED_MOUNTER_HOME}/mounter"
0000000000000000000000000000000000000000;;	  chmod a+x "${CONTAINERIZED_MOUNTER_HOME}/mounter"
0000000000000000000000000000000000000000;;	  mv "${KUBE_HOME}/mounter.tar" /tmp/mounter.tar
0000000000000000000000000000000000000000;;	  tar xvf /tmp/mounter.tar -C "${CONTAINERIZED_MOUNTER_HOME}/rootfs"
0000000000000000000000000000000000000000;;	  rm /tmp/mounter.tar
0000000000000000000000000000000000000000;;	  mkdir -p "${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Install node problem detector binary.
0000000000000000000000000000000000000000;;	function install-node-problem-detector {
0000000000000000000000000000000000000000;;	  if [[ -n "${NODE_PROBLEM_DETECTOR_VERSION:-}" ]]; then
0000000000000000000000000000000000000000;;	      local -r npd_version="${NODE_PROBLEM_DETECTOR_VERSION}"
0000000000000000000000000000000000000000;;	      local -r npd_sha1="${NODE_PROBLEM_DETECTOR_TAR_HASH}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	      local -r npd_version="v0.4.1"
0000000000000000000000000000000000000000;;	      local -r npd_sha1="a57a3fe64cab8a18ec654f5cef0aec59dae62568"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local -r npd_release_path="https://storage.googleapis.com/kubernetes-release"
0000000000000000000000000000000000000000;;	  local -r npd_tar="node-problem-detector-${npd_version}.tar.gz"
0000000000000000000000000000000000000000;;	  download-or-bust "${npd_sha1}" "${npd_release_path}/node-problem-detector/${npd_tar}"
0000000000000000000000000000000000000000;;	  local -r npd_dir="${KUBE_HOME}/node-problem-detector"
0000000000000000000000000000000000000000;;	  mkdir -p "${npd_dir}"
0000000000000000000000000000000000000000;;	  tar xzf "${KUBE_HOME}/${npd_tar}" -C "${npd_dir}" --overwrite
0000000000000000000000000000000000000000;;	  mv "${npd_dir}/bin"/* "${KUBE_HOME}/bin"
0000000000000000000000000000000000000000;;	  chmod a+x "${KUBE_HOME}/bin/node-problem-detector"
0000000000000000000000000000000000000000;;	  rmdir "${npd_dir}/bin"
0000000000000000000000000000000000000000;;	  rm -f "${KUBE_HOME}/${npd_tar}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,
0000000000000000000000000000000000000000;;	# and places them into suitable directories. Files are placed in /home/kubernetes.
0000000000000000000000000000000000000000;;	function install-kube-binary-config {
0000000000000000000000000000000000000000;;	  cd "${KUBE_HOME}"
0000000000000000000000000000000000000000;;	  local -r server_binary_tar_urls=( $(split-commas "${SERVER_BINARY_TAR_URL}") )
0000000000000000000000000000000000000000;;	  local -r server_binary_tar="${server_binary_tar_urls[0]##*/}"
0000000000000000000000000000000000000000;;	  if [[ -n "${SERVER_BINARY_TAR_HASH:-}" ]]; then
0000000000000000000000000000000000000000;;	    local -r server_binary_tar_hash="${SERVER_BINARY_TAR_HASH}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Downloading binary release sha1 (not found in env)"
0000000000000000000000000000000000000000;;	    download-or-bust "" "${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}"
0000000000000000000000000000000000000000;;	    local -r server_binary_tar_hash=$(cat "${server_binary_tar}.sha1")
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "Downloading binary release tar"
0000000000000000000000000000000000000000;;	  download-or-bust "${server_binary_tar_hash}" "${server_binary_tar_urls[@]}"
0000000000000000000000000000000000000000;;	  tar xzf "${KUBE_HOME}/${server_binary_tar}" -C "${KUBE_HOME}" --overwrite
0000000000000000000000000000000000000000;;	  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.
0000000000000000000000000000000000000000;;	  src_dir="${KUBE_HOME}/kubernetes/server/bin"
0000000000000000000000000000000000000000;;	  dst_dir="${KUBE_HOME}/kube-docker-files"
0000000000000000000000000000000000000000;;	  mkdir -p "${dst_dir}"
0000000000000000000000000000000000000000;;	  cp "${src_dir}/"*.docker_tag "${dst_dir}"
0000000000000000000000000000000000000000;;	  if [[ "${KUBERNETES_MASTER:-}" == "false" ]]; then
0000000000000000000000000000000000000000;;	    cp "${src_dir}/kube-proxy.tar" "${dst_dir}"
0000000000000000000000000000000000000000;;	    if [[ "${ENABLE_NODE_PROBLEM_DETECTOR:-}" == "standalone" ]]; then
0000000000000000000000000000000000000000;;	      install-node-problem-detector
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    cp "${src_dir}/kube-apiserver.tar" "${dst_dir}"
0000000000000000000000000000000000000000;;	    cp "${src_dir}/kube-controller-manager.tar" "${dst_dir}"
0000000000000000000000000000000000000000;;	    cp "${src_dir}/kube-scheduler.tar" "${dst_dir}"
0000000000000000000000000000000000000000;;	    cp -r "${KUBE_HOME}/kubernetes/addons" "${dst_dir}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local -r kube_bin="${KUBE_HOME}/bin"
0000000000000000000000000000000000000000;;	  mv "${src_dir}/kubelet" "${kube_bin}"
0000000000000000000000000000000000000000;;	  mv "${src_dir}/kubectl" "${kube_bin}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ "${NETWORK_PROVIDER:-}" == "kubenet" ]] || \
0000000000000000000000000000000000000000;;	     [[ "${NETWORK_PROVIDER:-}" == "cni" ]]; then
0000000000000000000000000000000000000000;;	    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.
0000000000000000000000000000000000000000;;	    local -r cni_tar="cni-0799f5732f2a11b329d9e3d51b9c8f2e3759f2ff.tar.gz"
0000000000000000000000000000000000000000;;	    local -r cni_sha1="1d9788b0f5420e1a219aad2cb8681823fc515e7c"
0000000000000000000000000000000000000000;;	    download-or-bust "${cni_sha1}" "https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}"
0000000000000000000000000000000000000000;;	    local -r cni_dir="${KUBE_HOME}/cni"
0000000000000000000000000000000000000000;;	    mkdir -p "${cni_dir}"
0000000000000000000000000000000000000000;;	    tar xzf "${KUBE_HOME}/${cni_tar}" -C "${cni_dir}" --overwrite
0000000000000000000000000000000000000000;;	    mv "${cni_dir}/bin"/* "${kube_bin}"
0000000000000000000000000000000000000000;;	    rmdir "${cni_dir}/bin"
0000000000000000000000000000000000000000;;	    rm -f "${KUBE_HOME}/${cni_tar}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mv "${KUBE_HOME}/kubernetes/LICENSES" "${KUBE_HOME}"
0000000000000000000000000000000000000000;;	  mv "${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz" "${KUBE_HOME}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.
0000000000000000000000000000000000000000;;	  dst_dir="${KUBE_HOME}/kube-manifests"
0000000000000000000000000000000000000000;;	  mkdir -p "${dst_dir}"
0000000000000000000000000000000000000000;;	  local -r manifests_tar_urls=( $(split-commas "${KUBE_MANIFESTS_TAR_URL}") )
0000000000000000000000000000000000000000;;	  local -r manifests_tar="${manifests_tar_urls[0]##*/}"
0000000000000000000000000000000000000000;;	  if [ -n "${KUBE_MANIFESTS_TAR_HASH:-}" ]; then
0000000000000000000000000000000000000000;;	    local -r manifests_tar_hash="${KUBE_MANIFESTS_TAR_HASH}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Downloading k8s manifests sha1 (not found in env)"
0000000000000000000000000000000000000000;;	    download-or-bust "" "${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}"
0000000000000000000000000000000000000000;;	    local -r manifests_tar_hash=$(cat "${manifests_tar}.sha1")
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "Downloading k8s manifests tar"
0000000000000000000000000000000000000000;;	  download-or-bust "${manifests_tar_hash}" "${manifests_tar_urls[@]}"
0000000000000000000000000000000000000000;;	  tar xzf "${KUBE_HOME}/${manifests_tar}" -C "${dst_dir}" --overwrite
0000000000000000000000000000000000000000;;	  local -r kube_addon_registry="${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}"
0000000000000000000000000000000000000000;;	  if [[ "${kube_addon_registry}" != "gcr.io/google_containers" ]]; then
0000000000000000000000000000000000000000;;	    find "${dst_dir}" -name \*.yaml -or -name \*.yaml.in | \
0000000000000000000000000000000000000000;;	      xargs sed -ri "s@(image:\s.*)gcr.io/google_containers@\1${kube_addon_registry}@"
0000000000000000000000000000000000000000;;	    find "${dst_dir}" -name \*.manifest -or -name \*.json | \
0000000000000000000000000000000000000000;;	      xargs sed -ri "s@(image\":\s+\")gcr.io/google_containers@\1${kube_addon_registry}@"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  cp "${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh" "${KUBE_HOME}/bin/configure-helper.sh"
0000000000000000000000000000000000000000;;	  cp "${dst_dir}/kubernetes/gci-trusty/health-monitor.sh" "${KUBE_HOME}/bin/health-monitor.sh"
0000000000000000000000000000000000000000;;	  chmod -R 755 "${kube_bin}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Install gci mounter related artifacts to allow mounting storage volumes in GCI
0000000000000000000000000000000000000000;;	  install-gci-mounter-tools
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  # Clean up.
0000000000000000000000000000000000000000;;	  rm -rf "${KUBE_HOME}/kubernetes"
0000000000000000000000000000000000000000;;	  rm -f "${KUBE_HOME}/${server_binary_tar}"
0000000000000000000000000000000000000000;;	  rm -f "${KUBE_HOME}/${server_binary_tar}.sha1"
0000000000000000000000000000000000000000;;	  rm -f "${KUBE_HOME}/${manifests_tar}"
0000000000000000000000000000000000000000;;	  rm -f "${KUBE_HOME}/${manifests_tar}.sha1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	######### Main Function ##########
0000000000000000000000000000000000000000;;	echo "Start to install kubernetes files"
0000000000000000000000000000000000000000;;	set-broken-motd
0000000000000000000000000000000000000000;;	KUBE_HOME="/home/kubernetes"
0000000000000000000000000000000000000000;;	download-kube-env
0000000000000000000000000000000000000000;;	source "${KUBE_HOME}/kube-env"
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_MASTER:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  download-kube-master-certs
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	install-kube-binary-config
0000000000000000000000000000000000000000;;	echo "Done for installing kubernetes files"
0000000000000000000000000000000000000000;;	
