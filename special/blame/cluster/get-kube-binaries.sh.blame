0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script downloads and installs the Kubernetes client and server
0000000000000000000000000000000000000000;;	# (and optionally test) binaries,
0000000000000000000000000000000000000000;;	# It is intended to be called from an extracted Kubernetes release tarball.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# We automatically choose the correct client binaries to download.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Options:
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_SERVER_ARCH to choose the server (Kubernetes cluster)
0000000000000000000000000000000000000000;;	#  architecture to download:
0000000000000000000000000000000000000000;;	#    * amd64 [default]
0000000000000000000000000000000000000000;;	#    * arm
0000000000000000000000000000000000000000;;	#    * arm64
0000000000000000000000000000000000000000;;	#    * ppc64le
0000000000000000000000000000000000000000;;	#    * s390x
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_SKIP_CONFIRM to skip the installation confirmation prompt.
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_RELEASE_URL to choose where to download binaries from.
0000000000000000000000000000000000000000;;	#    (Defaults to https://storage.googleapis.com/kubernetes-release/release).
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_DOWNLOAD_TESTS to additionally download and extract the test
0000000000000000000000000000000000000000;;	#    binaries tarball.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(cd $(dirname "${BASH_SOURCE}")/.. && pwd)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBERNETES_RELEASE_URL="${KUBERNETES_RELEASE_URL:-https://dl.k8s.io}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function detect_kube_release() {
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_VERSION:-}" ]]; then
0000000000000000000000000000000000000000;;	    return 0  # Allow caller to explicitly set version
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ ! -e "${KUBE_ROOT}/version" ]]; then
0000000000000000000000000000000000000000;;	    echo "Can't determine Kubernetes release." >&2
0000000000000000000000000000000000000000;;	    echo "${BASH_SOURCE} should only be run from a prebuilt Kubernetes release." >&2
0000000000000000000000000000000000000000;;	    echo "Did you mean to use get-kube.sh instead?" >&2
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  KUBE_VERSION=$(cat "${KUBE_ROOT}/version")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function detect_client_info() {
0000000000000000000000000000000000000000;;	  local kernel=$(uname -s)
0000000000000000000000000000000000000000;;	  case "${kernel}" in
0000000000000000000000000000000000000000;;	    Darwin)
0000000000000000000000000000000000000000;;	      CLIENT_PLATFORM="darwin"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    Linux)
0000000000000000000000000000000000000000;;	      CLIENT_PLATFORM="linux"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    *)
0000000000000000000000000000000000000000;;	      echo "Unknown, unsupported platform: ${kernel}." >&2
0000000000000000000000000000000000000000;;	      echo "Supported platforms: Linux, Darwin." >&2
0000000000000000000000000000000000000000;;	      echo "Bailing out." >&2
0000000000000000000000000000000000000000;;	      exit 2
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # TODO: migrate the kube::util::host_platform function out of hack/lib and
0000000000000000000000000000000000000000;;	  # use it here.
0000000000000000000000000000000000000000;;	  local machine=$(uname -m)
0000000000000000000000000000000000000000;;	  case "${machine}" in
0000000000000000000000000000000000000000;;	    x86_64*|i?86_64*|amd64*)
0000000000000000000000000000000000000000;;	      CLIENT_ARCH="amd64"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    aarch64*|arm64*)
0000000000000000000000000000000000000000;;	      CLIENT_ARCH="arm64"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    arm*)
0000000000000000000000000000000000000000;;	      CLIENT_ARCH="arm"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    i?86*)
0000000000000000000000000000000000000000;;	      CLIENT_ARCH="386"
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	    s390x*)
0000000000000000000000000000000000000000;;	      CLIENT_ARCH="s390x"
0000000000000000000000000000000000000000;;	      ;;	  
0000000000000000000000000000000000000000;;	    *)
0000000000000000000000000000000000000000;;	      echo "Unknown, unsupported architecture (${machine})." >&2
0000000000000000000000000000000000000000;;	      echo "Supported architectures x86_64, i686, arm, arm64, s390x." >&2
0000000000000000000000000000000000000000;;	      echo "Bailing out." >&2
0000000000000000000000000000000000000000;;	      exit 3
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function md5sum_file() {
0000000000000000000000000000000000000000;;	  if which md5 >/dev/null 2>&1; then
0000000000000000000000000000000000000000;;	    md5 -q "$1"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    md5sum "$1" | awk '{ print $1 }'
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function sha1sum_file() {
0000000000000000000000000000000000000000;;	  if which sha1sum >/dev/null 2>&1; then
0000000000000000000000000000000000000000;;	    sha1sum "$1" | awk '{ print $1 }'
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    shasum -a1 "$1" | awk '{ print $1 }'
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function download_tarball() {
0000000000000000000000000000000000000000;;	  local -r download_path="$1"
0000000000000000000000000000000000000000;;	  local -r file="$2"
0000000000000000000000000000000000000000;;	  url="${DOWNLOAD_URL_PREFIX}/${file}"
0000000000000000000000000000000000000000;;	  mkdir -p "${download_path}"
0000000000000000000000000000000000000000;;	  if [[ $(which curl) ]]; then
0000000000000000000000000000000000000000;;	    curl -fL --retry 3 --keepalive-time 2 "${url}" -o "${download_path}/${file}"
0000000000000000000000000000000000000000;;	  elif [[ $(which wget) ]]; then
0000000000000000000000000000000000000000;;	    wget "${url}" -O "${download_path}/${file}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Couldn't find curl or wget.  Bailing out." >&2
0000000000000000000000000000000000000000;;	    exit 4
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	  local md5sum=$(md5sum_file "${download_path}/${file}")
0000000000000000000000000000000000000000;;	  echo "md5sum(${file})=${md5sum}"
0000000000000000000000000000000000000000;;	  local sha1sum=$(sha1sum_file "${download_path}/${file}")
0000000000000000000000000000000000000000;;	  echo "sha1sum(${file})=${sha1sum}"
0000000000000000000000000000000000000000;;	  echo
0000000000000000000000000000000000000000;;	  # TODO: add actual verification
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function extract_arch_tarball() {
0000000000000000000000000000000000000000;;	  local -r tarfile="$1"
0000000000000000000000000000000000000000;;	  local -r platform="$2"
0000000000000000000000000000000000000000;;	  local -r arch="$3"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  platforms_dir="${KUBE_ROOT}/platforms/${platform}/${arch}"
0000000000000000000000000000000000000000;;	  echo "Extracting ${tarfile} into ${platforms_dir}"
0000000000000000000000000000000000000000;;	  mkdir -p "${platforms_dir}"
0000000000000000000000000000000000000000;;	  # Tarball looks like kubernetes/{client,server}/bin/BINARY"
0000000000000000000000000000000000000000;;	  tar -xzf "${tarfile}" --strip-components 3 -C "${platforms_dir}"
0000000000000000000000000000000000000000;;	  # Create convenience symlink
0000000000000000000000000000000000000000;;	  ln -sf "${platforms_dir}" "$(dirname ${tarfile})/bin"
0000000000000000000000000000000000000000;;	  echo "Add '$(dirname ${tarfile})/bin' to your PATH to use newly-installed binaries."
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	detect_kube_release
0000000000000000000000000000000000000000;;	DOWNLOAD_URL_PREFIX="${KUBERNETES_RELEASE_URL}/${KUBE_VERSION}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	SERVER_PLATFORM="linux"
0000000000000000000000000000000000000000;;	SERVER_ARCH="${KUBERNETES_SERVER_ARCH:-amd64}"
0000000000000000000000000000000000000000;;	SERVER_TAR="kubernetes-server-${SERVER_PLATFORM}-${SERVER_ARCH}.tar.gz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	detect_client_info
0000000000000000000000000000000000000000;;	CLIENT_TAR="kubernetes-client-${CLIENT_PLATFORM}-${CLIENT_ARCH}.tar.gz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Kubernetes release: ${KUBE_VERSION}"
0000000000000000000000000000000000000000;;	echo "Server: ${SERVER_PLATFORM}/${SERVER_ARCH}  (to override, set KUBERNETES_SERVER_ARCH)"
0000000000000000000000000000000000000000;;	echo "Client: ${CLIENT_PLATFORM}/${CLIENT_ARCH}  (autodetected)"
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO: remove this check and default to true when we stop shipping server
0000000000000000000000000000000000000000;;	# tarballs in kubernetes.tar.gz
0000000000000000000000000000000000000000;;	DOWNLOAD_SERVER_TAR=false
0000000000000000000000000000000000000000;;	if [[ ! -e "${KUBE_ROOT}/server/${SERVER_TAR}" ]]; then
0000000000000000000000000000000000000000;;	  DOWNLOAD_SERVER_TAR=true
0000000000000000000000000000000000000000;;	  echo "Will download ${SERVER_TAR} from ${DOWNLOAD_URL_PREFIX}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO: remove this check and default to true when we stop shipping kubectl
0000000000000000000000000000000000000000;;	# in kubernetes.tar.gz
0000000000000000000000000000000000000000;;	DOWNLOAD_CLIENT_TAR=false
0000000000000000000000000000000000000000;;	if [[ ! -x "${KUBE_ROOT}/platforms/${CLIENT_PLATFORM}/${CLIENT_ARCH}/kubectl" ]]; then
0000000000000000000000000000000000000000;;	  DOWNLOAD_CLIENT_TAR=true
0000000000000000000000000000000000000000;;	  echo "Will download and extract ${CLIENT_TAR} from ${DOWNLOAD_URL_PREFIX}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	TESTS_TAR="kubernetes-test.tar.gz"
0000000000000000000000000000000000000000;;	DOWNLOAD_TESTS_TAR=false
0000000000000000000000000000000000000000;;	if [[ -n "${KUBERNETES_DOWNLOAD_TESTS-}" ]]; then
0000000000000000000000000000000000000000;;	  DOWNLOAD_TESTS_TAR=true
0000000000000000000000000000000000000000;;	  echo "Will download and extract ${TESTS_TAR} from ${DOWNLOAD_URL_PREFIX}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${DOWNLOAD_CLIENT_TAR}" == false && \
0000000000000000000000000000000000000000;;	      "${DOWNLOAD_SERVER_TAR}" == false && \
0000000000000000000000000000000000000000;;	      "${DOWNLOAD_TESTS_TAR}" == false ]]; then
0000000000000000000000000000000000000000;;	  echo "Nothing additional to download."
0000000000000000000000000000000000000000;;	  exit 0
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z "${KUBERNETES_SKIP_CONFIRM-}" ]]; then
0000000000000000000000000000000000000000;;	  echo "Is this ok? [Y]/n"
0000000000000000000000000000000000000000;;	  read confirm
0000000000000000000000000000000000000000;;	  if [[ "${confirm}" =~ ^[nN]$ ]]; then
0000000000000000000000000000000000000000;;	    echo "Aborting."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if "${DOWNLOAD_SERVER_TAR}"; then
0000000000000000000000000000000000000000;;	  download_tarball "${KUBE_ROOT}/server" "${SERVER_TAR}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if "${DOWNLOAD_CLIENT_TAR}"; then
0000000000000000000000000000000000000000;;	  download_tarball "${KUBE_ROOT}/client" "${CLIENT_TAR}"
0000000000000000000000000000000000000000;;	  extract_arch_tarball "${KUBE_ROOT}/client/${CLIENT_TAR}" "${CLIENT_PLATFORM}" "${CLIENT_ARCH}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if "${DOWNLOAD_TESTS_TAR}"; then
0000000000000000000000000000000000000000;;	  download_tarball "${KUBE_ROOT}/test" "${TESTS_TAR}"
0000000000000000000000000000000000000000;;	  echo "Extracting ${TESTS_TAR} into ${KUBE_ROOT}"
0000000000000000000000000000000000000000;;	  # Strip leading "kubernetes/"
0000000000000000000000000000000000000000;;	  tar -xzf "${KUBE_ROOT}/test/${TESTS_TAR}" --strip-components 1 -C "${KUBE_ROOT}"
0000000000000000000000000000000000000000;;	fi
