0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A library of helper functions that each provider hosting Kubernetes must implement to use cluster/kube-*.sh scripts.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# exit on any error
0000000000000000000000000000000000000000;;	set -e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Use the config file specified in $KUBE_CONFIG_FILE, or default to
0000000000000000000000000000000000000000;;	# config-default.sh.
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	readonly ROOT=$(dirname "${BASH_SOURCE}")
0000000000000000000000000000000000000000;;	source "${ROOT}/${KUBE_CONFIG_FILE:-"config-default.sh"}"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/common.sh"
0000000000000000000000000000000000000000;;	if [ $CREATE_IMAGE = true ]; then
0000000000000000000000000000000000000000;;	source "${ROOT}/config-image.sh"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Verify prereqs on host machine
0000000000000000000000000000000000000000;;	function verify-prereqs() {
0000000000000000000000000000000000000000;;	 # Check the OpenStack command-line clients
0000000000000000000000000000000000000000;;	 for client in swift glance nova heat openstack;
0000000000000000000000000000000000000000;;	 do
0000000000000000000000000000000000000000;;	  if which $client >/dev/null 2>&1; then
0000000000000000000000000000000000000000;;	    echo "${client} client installed"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "${client} client does not exist"
0000000000000000000000000000000000000000;;	    echo "Please install ${client} client, and retry."
0000000000000000000000000000000000000000;;	    echo "Documentation for installing ${client} can be found at"
0000000000000000000000000000000000000000;;	    echo "http://docs.openstack.org/user-guide/common/cli-install-openstack-command-line-clients.html"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	 done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Instantiate a kubernetes cluster
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   KUBERNETES_PROVIDER
0000000000000000000000000000000000000000;;	function kube-up() {
0000000000000000000000000000000000000000;;	    echo "kube-up for provider ${KUBERNETES_PROVIDER}"
0000000000000000000000000000000000000000;;	    create-stack
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Periodically checks if cluster is created
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   STACK_CREATE_TIMEOUT
0000000000000000000000000000000000000000;;	#   STACK_NAME
0000000000000000000000000000000000000000;;	function validate-cluster() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  while (( --$STACK_CREATE_TIMEOUT >= 0)) ;do
0000000000000000000000000000000000000000;;	     local status=$(openstack stack show "${STACK_NAME}" | awk '$2=="stack_status" {print $4}')
0000000000000000000000000000000000000000;;	     if [[ $status ]]; then
0000000000000000000000000000000000000000;;	        echo "Cluster status ${status}"
0000000000000000000000000000000000000000;;	        if [ $status = "CREATE_COMPLETE" ]; then
0000000000000000000000000000000000000000;;	          configure-kubectl
0000000000000000000000000000000000000000;;	          break
0000000000000000000000000000000000000000;;	        elif [ $status = "CREATE_FAILED" ]; then
0000000000000000000000000000000000000000;;	          echo "Cluster not created. Please check stack logs to find the problem"
0000000000000000000000000000000000000000;;	          break
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	     else
0000000000000000000000000000000000000000;;	       echo "Cluster not created. Please verify if process started correctly"
0000000000000000000000000000000000000000;;	       break
0000000000000000000000000000000000000000;;	     fi
0000000000000000000000000000000000000000;;	     sleep 60
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create stack
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   OPENSTACK
0000000000000000000000000000000000000000;;	#   OPENSTACK_TEMP
0000000000000000000000000000000000000000;;	#   DNS_SERVER
0000000000000000000000000000000000000000;;	#   OPENSTACK_IP
0000000000000000000000000000000000000000;;	#   OPENRC_FILE
0000000000000000000000000000000000000000;;	function create-stack() {
0000000000000000000000000000000000000000;;	  echo "[INFO] Execute commands to create Kubernetes cluster"
0000000000000000000000000000000000000000;;	  # It is required for some cloud provider like CityCloud where swift client has different credentials
0000000000000000000000000000000000000000;;	  source "${ROOT}/openrc-swift.sh"
0000000000000000000000000000000000000000;;	  upload-resources
0000000000000000000000000000000000000000;;	  source "${ROOT}/openrc-default.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  create-glance-image
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  add-keypair
0000000000000000000000000000000000000000;;	  run-heat-script
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Upload kubernetes release tars and heat templates.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   ROOT
0000000000000000000000000000000000000000;;	#   KUBERNETES_RELEASE_TAR
0000000000000000000000000000000000000000;;	function upload-resources() {
0000000000000000000000000000000000000000;;	  swift post ${SWIFT_OBJECT_STORE} --read-acl '.r:*,.rlistings'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  locations=(
0000000000000000000000000000000000000000;;	    "${ROOT}/../../_output/release-tars/${KUBERNETES_RELEASE_TAR}"
0000000000000000000000000000000000000000;;	    "${ROOT}/../../server/${KUBERNETES_RELEASE_TAR}"
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  RELEASE_TAR_LOCATION=$( (ls -t "${locations[@]}" 2>/dev/null || true) | head -1 )
0000000000000000000000000000000000000000;;	  RELEASE_TAR_PATH=$(dirname ${RELEASE_TAR_LOCATION})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "[INFO] Uploading ${KUBERNETES_RELEASE_TAR}"
0000000000000000000000000000000000000000;;	  swift upload ${SWIFT_OBJECT_STORE} ${RELEASE_TAR_PATH}/${KUBERNETES_RELEASE_TAR} \
0000000000000000000000000000000000000000;;	    --object-name kubernetes-server.tar.gz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "[INFO] Uploading kubernetes-salt.tar.gz"
0000000000000000000000000000000000000000;;	  swift upload ${SWIFT_OBJECT_STORE} ${RELEASE_TAR_PATH}/kubernetes-salt.tar.gz \
0000000000000000000000000000000000000000;;	    --object-name kubernetes-salt.tar.gz
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a new key pair for use with servers.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   KUBERNETES_KEYPAIR_NAME
0000000000000000000000000000000000000000;;	#   CLIENT_PUBLIC_KEY_PATH
0000000000000000000000000000000000000000;;	function add-keypair() {
0000000000000000000000000000000000000000;;	  local status=$(nova keypair-show ${KUBERNETES_KEYPAIR_NAME})
0000000000000000000000000000000000000000;;	  if [[ ! $status ]]; then
0000000000000000000000000000000000000000;;	    nova keypair-add ${KUBERNETES_KEYPAIR_NAME} --pub-key ${CLIENT_PUBLIC_KEY_PATH}
0000000000000000000000000000000000000000;;	    echo "[INFO] Key pair created"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "[INFO] Key pair already exists"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a new glance image.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   IMAGE_FILE
0000000000000000000000000000000000000000;;	#   IMAGE_PATH
0000000000000000000000000000000000000000;;	#   OPENSTACK_IMAGE_NAME
0000000000000000000000000000000000000000;;	function create-glance-image() {
0000000000000000000000000000000000000000;;	  if [[ ${CREATE_IMAGE} == "true" ]]; then
0000000000000000000000000000000000000000;;	    local image_status=$(openstack image show ${OPENSTACK_IMAGE_NAME} | awk '$2=="id" {print $4}')
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if [[ ! $image_status ]]; then
0000000000000000000000000000000000000000;;	      if [[ "${DOWNLOAD_IMAGE}" == "true" ]]; then
0000000000000000000000000000000000000000;;	        mkdir -p ${IMAGE_PATH}
0000000000000000000000000000000000000000;;	        curl -L ${IMAGE_URL_PATH}/${IMAGE_FILE} -o ${IMAGE_PATH}/${IMAGE_FILE} -z ${IMAGE_PATH}/${IMAGE_FILE}
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	      echo "[INFO] Create image ${OPENSTACK_IMAGE_NAME}"
0000000000000000000000000000000000000000;;	      glance image-create --name ${OPENSTACK_IMAGE_NAME} --disk-format ${IMAGE_FORMAT} \
0000000000000000000000000000000000000000;;	        --container-format ${CONTAINER_FORMAT} --file ${IMAGE_PATH}/${IMAGE_FILE}
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      echo "[INFO] Image ${OPENSTACK_IMAGE_NAME} already exists"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a new kubernetes stack.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   STACK_NAME
0000000000000000000000000000000000000000;;	#   KUBERNETES_KEYPAIR_NAME
0000000000000000000000000000000000000000;;	#   DNS_SERVER
0000000000000000000000000000000000000000;;	#   SWIFT_SERVER_URL
0000000000000000000000000000000000000000;;	#   OPENSTACK_IMAGE_NAME
0000000000000000000000000000000000000000;;	#   EXTERNAL_NETWORK
0000000000000000000000000000000000000000;;	#   IMAGE_ID
0000000000000000000000000000000000000000;;	#   MASTER_FLAVOR
0000000000000000000000000000000000000000;;	#   MINION_FLAVOR
0000000000000000000000000000000000000000;;	#   NUMBER_OF_MINIONS
0000000000000000000000000000000000000000;;	#   MAX_NUMBER_OF_MINIONS
0000000000000000000000000000000000000000;;	#   DNS_SERVER
0000000000000000000000000000000000000000;;	#   STACK_NAME
0000000000000000000000000000000000000000;;	function run-heat-script() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local stack_status=$(openstack stack show ${STACK_NAME})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Automatically detect swift url if it wasn't specified
0000000000000000000000000000000000000000;;	  if [[ -z $SWIFT_SERVER_URL ]]; then
0000000000000000000000000000000000000000;;	    local rgx=""
0000000000000000000000000000000000000000;;	    if [ "$OS_IDENTITY_API_VERSION" = "3" ]; then
0000000000000000000000000000000000000000;;	      rgx="public: (.+)$"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      rgx="publicURL: (.+)$"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    SWIFT_SERVER_URL=$(openstack catalog show object-store --format value | egrep -o "$rgx" | cut -d" " -f2 | head -n 1)
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  local swift_repo_url="${SWIFT_SERVER_URL}/${SWIFT_OBJECT_STORE}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [ $CREATE_IMAGE = true ]; then
0000000000000000000000000000000000000000;;	    echo "[INFO] Retrieve new image ID"
0000000000000000000000000000000000000000;;	    IMAGE_ID=$(openstack image show ${OPENSTACK_IMAGE_NAME} | awk '$2=="id" {print $4}')
0000000000000000000000000000000000000000;;	    echo "[INFO] Image Id ${IMAGE_ID}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ ! $stack_status ]]; then
0000000000000000000000000000000000000000;;	    echo "[INFO] Create stack ${STACK_NAME}"
0000000000000000000000000000000000000000;;	    (
0000000000000000000000000000000000000000;;	      cd ${ROOT}/kubernetes-heat
0000000000000000000000000000000000000000;;	      openstack stack create --timeout 60 \
0000000000000000000000000000000000000000;;	      --parameter external_network=${EXTERNAL_NETWORK} \
0000000000000000000000000000000000000000;;	      --parameter lbaas_version=${LBAAS_VERSION} \
0000000000000000000000000000000000000000;;	      --parameter fixed_network_cidr=${FIXED_NETWORK_CIDR} \
0000000000000000000000000000000000000000;;	      --parameter ssh_key_name=${KUBERNETES_KEYPAIR_NAME} \
0000000000000000000000000000000000000000;;	      --parameter server_image=${IMAGE_ID} \
0000000000000000000000000000000000000000;;	      --parameter master_flavor=${MASTER_FLAVOR} \
0000000000000000000000000000000000000000;;	      --parameter minion_flavor=${MINION_FLAVOR} \
0000000000000000000000000000000000000000;;	      --parameter number_of_minions=${NUMBER_OF_MINIONS} \
0000000000000000000000000000000000000000;;	      --parameter max_number_of_minions=${MAX_NUMBER_OF_MINIONS} \
0000000000000000000000000000000000000000;;	      --parameter dns_nameserver=${DNS_SERVER} \
0000000000000000000000000000000000000000;;	      --parameter kubernetes_salt_url=${swift_repo_url}/kubernetes-salt.tar.gz \
0000000000000000000000000000000000000000;;	      --parameter kubernetes_server_url=${swift_repo_url}/kubernetes-server.tar.gz \
0000000000000000000000000000000000000000;;	      --parameter os_auth_url=${OS_AUTH_URL} \
0000000000000000000000000000000000000000;;	      --parameter os_username=${OS_USERNAME} \
0000000000000000000000000000000000000000;;	      --parameter os_password=${OS_PASSWORD} \
0000000000000000000000000000000000000000;;	      --parameter os_region_name=${OS_REGION_NAME} \
0000000000000000000000000000000000000000;;	      --parameter os_tenant_name=${OS_TENANT_NAME} \
0000000000000000000000000000000000000000;;	      --parameter os_user_domain_name=${OS_USER_DOMAIN_NAME} \
0000000000000000000000000000000000000000;;	      --parameter enable_proxy=${ENABLE_PROXY} \
0000000000000000000000000000000000000000;;	      --parameter ftp_proxy="${FTP_PROXY}" \
0000000000000000000000000000000000000000;;	      --parameter http_proxy="${HTTP_PROXY}" \
0000000000000000000000000000000000000000;;	      --parameter https_proxy="${HTTPS_PROXY}" \
0000000000000000000000000000000000000000;;	      --parameter socks_proxy="${SOCKS_PROXY}" \
0000000000000000000000000000000000000000;;	      --parameter no_proxy="${NO_PROXY}" \
0000000000000000000000000000000000000000;;	      --parameter assign_floating_ip="${ASSIGN_FLOATING_IP}" \
0000000000000000000000000000000000000000;;	      --template kubecluster.yaml \
0000000000000000000000000000000000000000;;	      ${STACK_NAME}
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "[INFO] Stack ${STACK_NAME} already exists"
0000000000000000000000000000000000000000;;	    openstack stack show ${STACK_NAME}
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Configure kubectl.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   STACK_NAME
0000000000000000000000000000000000000000;;	function configure-kubectl() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  export KUBE_MASTER_IP=$(nova show "${STACK_NAME}"-master | awk '$3=="network" {print $6}')
0000000000000000000000000000000000000000;;	  export CONTEXT="openstack-${STACK_NAME}"
0000000000000000000000000000000000000000;;	  export KUBE_BEARER_TOKEN="TokenKubelet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ "${ENABLE_PROXY:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	    echo 'export NO_PROXY=$NO_PROXY,'"${KUBE_MASTER_IP}" > /tmp/kube-proxy-env
0000000000000000000000000000000000000000;;	    echo 'export no_proxy=$NO_PROXY,'"${KUBE_MASTER_IP}" >> /tmp/kube-proxy-env
0000000000000000000000000000000000000000;;	    . /tmp/kube-proxy-env
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  create-kubeconfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Delete a kubernetes cluster
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Assumed vars:
0000000000000000000000000000000000000000;;	#   STACK_NAME
0000000000000000000000000000000000000000;;	function kube-down {
0000000000000000000000000000000000000000;;	  source "${ROOT}/openrc-default.sh"
0000000000000000000000000000000000000000;;	  openstack stack delete ${STACK_NAME}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Perform preparations required to run e2e tests
0000000000000000000000000000000000000000;;	function prepare-e2e {
0000000000000000000000000000000000000000;;	  echo "TODO: prepare-e2e" 1>&2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function test-build-release {
0000000000000000000000000000000000000000;;	  echo "test-build-release() " 1>&2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Must ensure that the following ENV vars are set
0000000000000000000000000000000000000000;;	function detect-master {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  source "${ROOT}/${KUBE_CONFIG_FILE:-"config-default.sh"}"
0000000000000000000000000000000000000000;;	  source "${ROOT}/openrc-default.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  export KUBE_MASTER_IP=$(nova show "${STACK_NAME}"-master | awk '$3=="network" {print $6}')
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "KUBE_MASTER_IP: ${KUBE_MASTER_IP}" 1>&2
0000000000000000000000000000000000000000;;	}
