0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contains configuration values for the Openstack cluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Stack name
0000000000000000000000000000000000000000;;	STACK_NAME=${STACK_NAME:-kube-stack}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Keypair for kubernetes stack
0000000000000000000000000000000000000000;;	KUBERNETES_KEYPAIR_NAME=${KUBERNETES_KEYPAIR_NAME:-kubernetes_keypair}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Kubernetes release tar file
0000000000000000000000000000000000000000;;	KUBERNETES_RELEASE_TAR=${KUBERNETES_RELEASE_TAR:-kubernetes-server-linux-amd64.tar.gz}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	NUMBER_OF_MINIONS=${NUMBER_OF_MINIONS-3}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	MAX_NUMBER_OF_MINIONS=${MAX_NUMBER_OF_MINIONS:-3}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	MASTER_FLAVOR=${MASTER_FLAVOR:-m1.medium}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	MINION_FLAVOR=${MINION_FLAVOR:-m1.medium}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	EXTERNAL_NETWORK=${EXTERNAL_NETWORK:-public}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	LBAAS_VERSION=${LBAAS_VERSION:-}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	FIXED_NETWORK_CIDR=${FIXED_NETWORK_CIDR:-10.0.0.0/24}
0000000000000000000000000000000000000000;;	SERVICE_CLUSTER_IP_RANGE=${SERVICE_CLUSTER_IP_RANGE:-10.0.0.0/16}
0000000000000000000000000000000000000000;;	CLUSTER_IP_RANGE=${CLUSTER_IP_RANGE:-10.244.0.0/16}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	SWIFT_SERVER_URL=${SWIFT_SERVER_URL:-}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The name of the object store container to use
0000000000000000000000000000000000000000;;	SWIFT_OBJECT_STORE=${SWIFT_OBJECT_STORE:-kubernetes}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Flag indicates if new image must be created. If 'false' then image with IMAGE_ID will be used.
0000000000000000000000000000000000000000;;	# If 'true' then new image will be created from file config-image.sh
0000000000000000000000000000000000000000;;	CREATE_IMAGE=${CREATE_IMAGE:-true} # use "true" for devstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Flag indicates if image should be downloaded
0000000000000000000000000000000000000000;;	DOWNLOAD_IMAGE=${DOWNLOAD_IMAGE:-true}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Image id which will be used for kubernetes stack
0000000000000000000000000000000000000000;;	IMAGE_ID=${IMAGE_ID:-f0f394b1-5546-4b68-b2bc-8abe8a7e6b8b}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# DNS server address
0000000000000000000000000000000000000000;;	DNS_SERVER=${DNS_SERVER:-8.8.8.8}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Public RSA key path
0000000000000000000000000000000000000000;;	CLIENT_PUBLIC_KEY_PATH=${CLIENT_PUBLIC_KEY_PATH:-~/.ssh/id_rsa.pub}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Max time period for stack provisioning. Time in minutes.
0000000000000000000000000000000000000000;;	STACK_CREATE_TIMEOUT=${STACK_CREATE_TIMEOUT:-60}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Enable Proxy, if true kube-up will apply your current proxy settings(defined by *_PROXY environment variables) to the deployment.
0000000000000000000000000000000000000000;;	ENABLE_PROXY=${ENABLE_PROXY:-false}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Per-protocol proxy settings.
0000000000000000000000000000000000000000;;	FTP_PROXY=${FTP_PROXY:-}
0000000000000000000000000000000000000000;;	HTTP_PROXY=${HTTP_PROXY:-}
0000000000000000000000000000000000000000;;	HTTPS_PROXY=${HTTPS_PROXY:-}
0000000000000000000000000000000000000000;;	SOCKS_PROXY=${SOCKS_PROXY:-}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# IPs and Domains that bypass the proxy.
0000000000000000000000000000000000000000;;	NO_PROXY=${NO_PROXY:-}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Whether to assign floating IPs to minions
0000000000000000000000000000000000000000;;	ASSIGN_FLOATING_IP=${ASSIGN_FLOATING_IP:-true}
