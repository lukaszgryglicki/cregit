0000000000000000000000000000000000000000;;	heat_template_version: 2016-10-14
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	description: >
0000000000000000000000000000000000000000;;	  Kubernetes cluster with one master and one or more worker nodes
0000000000000000000000000000000000000000;;	  (as specified by the number_of_minions parameter, which defaults to 3).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	parameters:
0000000000000000000000000000000000000000;;	  ssh_key_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: name of ssh key to be provisioned on our server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  external_network:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: uuid/name of a network to use for floating ip addresses
0000000000000000000000000000000000000000;;	    default: public
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  lbaas_version:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: version of OpenStack LBaaS service. not specifying means auto detect
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  server_image:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: glance image used to boot the server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  master_flavor:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    default: m1.small
0000000000000000000000000000000000000000;;	    description: flavor to use when booting the server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  minion_flavor:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    default: m1.small
0000000000000000000000000000000000000000;;	    description: flavor to use when booting the server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  dns_nameserver:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: address of a dns nameserver reachable in your environment
0000000000000000000000000000000000000000;;	    default: 8.8.8.8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  number_of_minions:
0000000000000000000000000000000000000000;;	    type: number
0000000000000000000000000000000000000000;;	    description: how many kubernetes minions to spawn initially
0000000000000000000000000000000000000000;;	    default: 3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  max_number_of_minions:
0000000000000000000000000000000000000000;;	    type: number
0000000000000000000000000000000000000000;;	    description: maximum number of kubernetes minions to spawn
0000000000000000000000000000000000000000;;	    default: 10
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  fixed_network_cidr:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: network range for fixed ip network
0000000000000000000000000000000000000000;;	    default: 10.0.0.0/24
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  cluster_cidr:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: network range for pod IPs
0000000000000000000000000000000000000000;;	    default: 10.244.0.0/16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  service_cluster_cidr:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: network range for service IPs
0000000000000000000000000000000000000000;;	    default: 10.10.0.0/16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  master_pod_cidr:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: >-
0000000000000000000000000000000000000000;;	      network range for master pod IPs (ignored, but must not conflict
0000000000000000000000000000000000000000;;	      with other subnets)
0000000000000000000000000000000000000000;;	    default: 10.245.1.0/24
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kubernetes_server_url:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: URL of kubernetes server binary. Must be tar.gz.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kubernetes_salt_url:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: URL of kubernetes salt scripts. Must be tar.gz.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  apiserver_user:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: User name used for api-server
0000000000000000000000000000000000000000;;	    default: user
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  apiserver_password:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Password used for api-server
0000000000000000000000000000000000000000;;	    default: password
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  token_kubelet:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Token used by kubelet
0000000000000000000000000000000000000000;;	    default: TokenKubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  token_kube_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Token used by kube-proxy
0000000000000000000000000000000000000000;;	    default: TokenKubeproxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  wait_condition_timeout:
0000000000000000000000000000000000000000;;	    type: number
0000000000000000000000000000000000000000;;	    description : >
0000000000000000000000000000000000000000;;	      timeout for the Wait Conditions
0000000000000000000000000000000000000000;;	    default: 6000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_auth_url:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Auth URL
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_username:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Username
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_password:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Password
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_region_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Region Name
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_tenant_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Tenant Name
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_user_domain_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack User Domain Name (Domain-level authorization scope for keystone v3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  enable_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Whether or not to enable proxy settings
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ftp_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: FTP Proxy URL
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  http_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: HTTP Proxy URL
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  https_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: HTTPS Proxy URL
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  socks_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: SOCKS Proxy URL
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  no_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Comma seperated list of domains/addresses that bypass proxying.
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	    
0000000000000000000000000000000000000000;;	  assign_floating_ip:
0000000000000000000000000000000000000000;;	    type: boolean
0000000000000000000000000000000000000000;;	    description: Indicates whether floating IPs will be generated for minions
0000000000000000000000000000000000000000;;	    default: true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	resources:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  master_wait_handle:
0000000000000000000000000000000000000000;;	    type: OS::Heat::WaitConditionHandle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  master_wait_condition:
0000000000000000000000000000000000000000;;	    type: OS::Heat::WaitCondition
0000000000000000000000000000000000000000;;	    depends_on: kube_master
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      handle: {get_resource: master_wait_handle}
0000000000000000000000000000000000000000;;	      timeout: {get_param: wait_condition_timeout}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ######################################################################
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # network resources.  allocate a network and router for our server.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  fixed_network:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::Net
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  fixed_subnet:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::Subnet
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      cidr: {get_param: fixed_network_cidr}
0000000000000000000000000000000000000000;;	      network: {get_resource: fixed_network}
0000000000000000000000000000000000000000;;	      dns_nameservers:
0000000000000000000000000000000000000000;;	        - {get_param: dns_nameserver}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  extrouter:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::Router
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      external_gateway_info:
0000000000000000000000000000000000000000;;	        network: {get_param: external_network}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  extrouter_inside:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::RouterInterface
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      router_id: {get_resource: extrouter}
0000000000000000000000000000000000000000;;	      subnet: {get_resource: fixed_subnet}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ######################################################################
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # security groups.  we need to permit network traffic of various
0000000000000000000000000000000000000000;;	  # sorts.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  secgroup_base:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::SecurityGroup
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      rules:
0000000000000000000000000000000000000000;;	        - protocol: icmp
0000000000000000000000000000000000000000;;	        - protocol: tcp
0000000000000000000000000000000000000000;;	          port_range_min: 22
0000000000000000000000000000000000000000;;	          port_range_max: 22
0000000000000000000000000000000000000000;;	        - remote_mode: remote_group_id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  secgroup_master:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::SecurityGroup
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      rules:
0000000000000000000000000000000000000000;;	        - protocol: tcp # api-server
0000000000000000000000000000000000000000;;	          port_range_min: 443
0000000000000000000000000000000000000000;;	          port_range_max: 443
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  secgroup_node:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::SecurityGroup
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      rules:
0000000000000000000000000000000000000000;;	        - protocol: icmp
0000000000000000000000000000000000000000;;	        - protocol: tcp
0000000000000000000000000000000000000000;;	        - protocol: udp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ######################################################################
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # software configs.  these are components that are combined into
0000000000000000000000000000000000000000;;	  # a multipart MIME user-data archive.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  write_heat_params:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/write-heat-params.yaml}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$KUBERNETES_SERVER_URL": {get_param: kubernetes_server_url}
0000000000000000000000000000000000000000;;	            "$KUBERNETES_SALT_URL": {get_param: kubernetes_salt_url}
0000000000000000000000000000000000000000;;	            "$MASTER_IP": {get_attr: [kube_master_eth0, fixed_ips, 0, ip_address]}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  proxy_config:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/configure-proxy.sh}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$ENABLE_PROXY": {get_param: enable_proxy }
0000000000000000000000000000000000000000;;	            "$FTP_PROXY": {get_param: ftp_proxy }
0000000000000000000000000000000000000000;;	            "$HTTP_PROXY": {get_param: http_proxy }
0000000000000000000000000000000000000000;;	            "$HTTPS_PROXY": {get_param: https_proxy }
0000000000000000000000000000000000000000;;	            "$SOCKS_PROXY": {get_param: socks_proxy }
0000000000000000000000000000000000000000;;	            "$NO_PROXY": {get_param: no_proxy }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  hostname_hack:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config: {get_file: fragments/hostname-hack.yaml}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  hostname_hack_script:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config: {get_file: fragments/hostname-hack.sh}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_user:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config: {get_file: fragments/kube-user.yaml}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  provision_network_master:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config: {get_file: fragments/provision-network-master.sh}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  deploy_kube_auth_files_master:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/deploy-kube-auth-files-master.yaml}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$apiserver_user": {get_param: apiserver_user}
0000000000000000000000000000000000000000;;	            "$apiserver_password": {get_param: apiserver_password}
0000000000000000000000000000000000000000;;	            "$token_kubelet": {get_param: token_kubelet}
0000000000000000000000000000000000000000;;	            "$token_kube_proxy": {get_param: token_kube_proxy}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  configure_salt_master:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/configure-salt.yaml}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$MASTER_IP": {get_attr: [kube_master_eth0, fixed_ips, 0, ip_address]}
0000000000000000000000000000000000000000;;	            "$OS_AUTH_URL": {get_param: os_auth_url}
0000000000000000000000000000000000000000;;	            "$OS_USERNAME": {get_param: os_username}
0000000000000000000000000000000000000000;;	            "$OS_PASSWORD": {get_param: os_password}
0000000000000000000000000000000000000000;;	            "$OS_REGION_NAME": {get_param: os_region_name}
0000000000000000000000000000000000000000;;	            "$OS_TENANT_NAME": {get_param: os_tenant_name}
0000000000000000000000000000000000000000;;	            "$OS_USER_DOMAIN_NAME": {get_param: os_user_domain_name}
0000000000000000000000000000000000000000;;	            "$LBAAS_VERSION": {get_param: lbaas_version}
0000000000000000000000000000000000000000;;	            "$SUBNET_ID": {get_resource: fixed_subnet}
0000000000000000000000000000000000000000;;	            "$FLOATING_NETWORK_ID": {get_attr: [kube_master_floating, floating_network_id]}
0000000000000000000000000000000000000000;;	            "$role": "kubernetes-master"
0000000000000000000000000000000000000000;;	            "$router_id": {get_resource: extrouter}
0000000000000000000000000000000000000000;;	            "$cluster_cidr": {get_param: cluster_cidr}
0000000000000000000000000000000000000000;;	            "$MASTER_IP_RANGE": {get_param: master_pod_cidr}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  run_salt:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/run-salt.sh}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$$wc_notify": {get_attr: [master_wait_handle, curl_cli]}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_master_init:
0000000000000000000000000000000000000000;;	    type: OS::Heat::MultipartMime
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      parts:
0000000000000000000000000000000000000000;;	        - config: {get_resource: write_heat_params}
0000000000000000000000000000000000000000;;	        - config: {get_resource: proxy_config}
0000000000000000000000000000000000000000;;	        - config: {get_resource: hostname_hack}
0000000000000000000000000000000000000000;;	        - config: {get_resource: hostname_hack_script}
0000000000000000000000000000000000000000;;	        - config: {get_resource: kube_user}
0000000000000000000000000000000000000000;;	        - config: {get_resource: provision_network_master}
0000000000000000000000000000000000000000;;	        - config: {get_resource: deploy_kube_auth_files_master}
0000000000000000000000000000000000000000;;	        - config: {get_resource: configure_salt_master}
0000000000000000000000000000000000000000;;	        - config: {get_resource: run_salt}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ######################################################################
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # kubernetes master server.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_master:
0000000000000000000000000000000000000000;;	    type: OS::Nova::Server
0000000000000000000000000000000000000000;;	    depends_on:
0000000000000000000000000000000000000000;;	      - extrouter_inside
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      image: {get_param: server_image}
0000000000000000000000000000000000000000;;	      flavor: {get_param: master_flavor}
0000000000000000000000000000000000000000;;	      key_name: {get_param: ssh_key_name}
0000000000000000000000000000000000000000;;	      user_data_format: RAW
0000000000000000000000000000000000000000;;	      user_data: {get_resource: kube_master_init}
0000000000000000000000000000000000000000;;	      networks:
0000000000000000000000000000000000000000;;	        - port: {get_resource: kube_master_eth0}
0000000000000000000000000000000000000000;;	      name:
0000000000000000000000000000000000000000;;	        list_join: [-, [{get_param: "OS::stack_name"}, master]]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_master_eth0:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::Port
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      network: {get_resource: fixed_network}
0000000000000000000000000000000000000000;;	      security_groups:
0000000000000000000000000000000000000000;;	        - {get_resource: secgroup_base}
0000000000000000000000000000000000000000;;	        - {get_resource: secgroup_master}
0000000000000000000000000000000000000000;;	      fixed_ips:
0000000000000000000000000000000000000000;;	        - subnet: {get_resource: fixed_subnet}
0000000000000000000000000000000000000000;;	      allowed_address_pairs:
0000000000000000000000000000000000000000;;	        - ip_address: 10.246.0.0/16
0000000000000000000000000000000000000000;;	      replacement_policy: AUTO
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_master_floating:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::FloatingIP
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      floating_network: {get_param: external_network}
0000000000000000000000000000000000000000;;	      port_id: {get_resource: kube_master_eth0}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ######################################################################
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # kubernetes minions. This is an autoscaling group that will initially
0000000000000000000000000000000000000000;;	  # create <number_of_minions> minions, and will scale up to
0000000000000000000000000000000000000000;;	  # <max_number_of_minions> based on CPU utilization.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minions:
0000000000000000000000000000000000000000;;	    type: OS::Heat::AutoScalingGroup
0000000000000000000000000000000000000000;;	    depends_on:
0000000000000000000000000000000000000000;;	      - extrouter_inside
0000000000000000000000000000000000000000;;	      - master_wait_condition
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      resource:
0000000000000000000000000000000000000000;;	        type: kubeminion.yaml
0000000000000000000000000000000000000000;;	        properties:
0000000000000000000000000000000000000000;;	          kubernetes_server_url: {get_param: kubernetes_server_url}
0000000000000000000000000000000000000000;;	          kubernetes_salt_url: {get_param: kubernetes_salt_url}
0000000000000000000000000000000000000000;;	          ssh_key_name: {get_param: ssh_key_name}
0000000000000000000000000000000000000000;;	          server_image: {get_param: server_image}
0000000000000000000000000000000000000000;;	          minion_flavor: {get_param: minion_flavor}
0000000000000000000000000000000000000000;;	          token_kubelet: {get_param: token_kubelet}
0000000000000000000000000000000000000000;;	          token_kube_proxy: {get_param: token_kube_proxy}
0000000000000000000000000000000000000000;;	          fixed_network: {get_resource: fixed_network}
0000000000000000000000000000000000000000;;	          fixed_subnet: {get_resource: fixed_subnet}
0000000000000000000000000000000000000000;;	          cluster_cidr: {get_param: cluster_cidr}
0000000000000000000000000000000000000000;;	          kube_master_ip: {get_attr: [kube_master_eth0, fixed_ips, 0, ip_address]}
0000000000000000000000000000000000000000;;	          external_network: {get_param: external_network}
0000000000000000000000000000000000000000;;	          wait_condition_timeout: {get_param: wait_condition_timeout}
0000000000000000000000000000000000000000;;	          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
0000000000000000000000000000000000000000;;	          cluster_name: {get_param: "OS::stack_name"}
0000000000000000000000000000000000000000;;	          secgroup_base: {get_resource: secgroup_base}
0000000000000000000000000000000000000000;;	          secgroup_node: {get_resource: secgroup_node}
0000000000000000000000000000000000000000;;	          os_auth_url: {get_param: os_auth_url}
0000000000000000000000000000000000000000;;	          os_username: {get_param: os_username}
0000000000000000000000000000000000000000;;	          os_password: {get_param: os_password}
0000000000000000000000000000000000000000;;	          os_region_name: {get_param: os_region_name}
0000000000000000000000000000000000000000;;	          os_tenant_name: {get_param: os_tenant_name}
0000000000000000000000000000000000000000;;	          os_user_domain_name: {get_param: os_user_domain_name}
0000000000000000000000000000000000000000;;	          enable_proxy: {get_param: enable_proxy }
0000000000000000000000000000000000000000;;	          ftp_proxy: {get_param: ftp_proxy }
0000000000000000000000000000000000000000;;	          http_proxy: {get_param: http_proxy }
0000000000000000000000000000000000000000;;	          https_proxy: {get_param: https_proxy }
0000000000000000000000000000000000000000;;	          socks_proxy: {get_param: socks_proxy }
0000000000000000000000000000000000000000;;	          no_proxy: {get_param: no_proxy }
0000000000000000000000000000000000000000;;	          assign_floating_ip: {get_param: assign_floating_ip }
0000000000000000000000000000000000000000;;	      min_size: {get_param: number_of_minions}
0000000000000000000000000000000000000000;;	      desired_capacity: {get_param: number_of_minions}
0000000000000000000000000000000000000000;;	      max_size: {get_param: max_number_of_minions}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	outputs:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_master:
0000000000000000000000000000000000000000;;	    value: {get_attr: [kube_master_floating, floating_ip_address]}
0000000000000000000000000000000000000000;;	    description: >
0000000000000000000000000000000000000000;;	      This is the "public" IP address of the Kubernetes master node. Use this IP address
0000000000000000000000000000000000000000;;	      to log in to the Kubernetes master via ssh or to access the Kubernetes API
0000000000000000000000000000000000000000;;	      from outside the cluster.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minions:
0000000000000000000000000000000000000000;;	    value: {get_attr: [kube_minions, outputs_list, kube_minion_ip]}
0000000000000000000000000000000000000000;;	    description: >
0000000000000000000000000000000000000000;;	      Here is the list of the "private" addresses of all Kubernetes worker nodes.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minions_external:
0000000000000000000000000000000000000000;;	    value: {get_attr: [kube_minions, outputs_list, kube_minion_external_ip]}
0000000000000000000000000000000000000000;;	    description: >
0000000000000000000000000000000000000000;;	      Here is the list of the "public" addresses of all Kubernetes worker nodes.
