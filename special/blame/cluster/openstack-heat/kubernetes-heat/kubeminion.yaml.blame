0000000000000000000000000000000000000000;;	heat_template_version: 2016-10-14
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	description: >
0000000000000000000000000000000000000000;;	  This is a nested stack that defines a single Kubernetes minion, This stack is
0000000000000000000000000000000000000000;;	  included by an AutoScalingGroup resource in the parent template
0000000000000000000000000000000000000000;;	  (kubecluster.yaml).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	parameters:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  server_image:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: glance image used to boot the server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  minion_flavor:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    default: m1.small
0000000000000000000000000000000000000000;;	    description: flavor to use when booting the server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ssh_key_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: name of ssh key to be provisioned on our server
0000000000000000000000000000000000000000;;	    default: lars
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  external_network:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: uuid/name of a network to use for floating ip addresses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kubernetes_server_url:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: URL of kubernetes server binary. Must be tar.gz.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kubernetes_salt_url:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: URL of kubernetes salt scripts. Must be tar.gz.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  token_kubelet:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Token used by kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  token_kube_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Token used by kube-proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_auth_url:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Auth URL
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_username:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Username
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_password:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Password
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_region_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Region Name
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_tenant_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack Tenant Name
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  os_user_domain_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: OpenStack User Domain Name (Domain-level authorization scope for keystone v3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  enable_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Whether or not to enable proxy settings
0000000000000000000000000000000000000000;;	    default: false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ftp_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: FTP Proxy URL
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  http_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: HTTP Proxy URL
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  https_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: HTTPS Proxy URL
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  socks_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: SOCKS Proxy URL
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  no_proxy:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Comma seperated list of domains/addresses that bypass proxying.
0000000000000000000000000000000000000000;;	    default: localhost
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  assign_floating_ip:
0000000000000000000000000000000000000000;;	    type: boolean
0000000000000000000000000000000000000000;;	    description: Indicates whether floating IPs will be generated for minions
0000000000000000000000000000000000000000;;	    default: true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # The following are all generated in the parent template.
0000000000000000000000000000000000000000;;	  kube_master_ip:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: IP address of the Kubernetes master server.
0000000000000000000000000000000000000000;;	  fixed_network:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Network from which to allocate fixed addresses.
0000000000000000000000000000000000000000;;	  fixed_subnet:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Subnet from which to allocate fixed addresses.
0000000000000000000000000000000000000000;;	  cluster_cidr:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	    description: Subnet from which to allocate pod subnets.
0000000000000000000000000000000000000000;;	  wait_condition_timeout:
0000000000000000000000000000000000000000;;	    type: number
0000000000000000000000000000000000000000;;	    description : >
0000000000000000000000000000000000000000;;	      timeout for the Wait Conditions
0000000000000000000000000000000000000000;;	  metadata:
0000000000000000000000000000000000000000;;	    type: json
0000000000000000000000000000000000000000;;	    description: metadata for ceilometer query
0000000000000000000000000000000000000000;;	  cluster_name:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	  secgroup_base:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	  secgroup_node:
0000000000000000000000000000000000000000;;	    type: string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	conditions:
0000000000000000000000000000000000000000;;	  assign_floating_ip: {equals : [{get_param: assign_floating_ip}, true]}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	resources:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  minion_wait_handle:
0000000000000000000000000000000000000000;;	    type: OS::Heat::WaitConditionHandle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  minion_wait_condition:
0000000000000000000000000000000000000000;;	    type: OS::Heat::WaitCondition
0000000000000000000000000000000000000000;;	    depends_on: kube_minion
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      handle: {get_resource: minion_wait_handle}
0000000000000000000000000000000000000000;;	      timeout: {get_param: wait_condition_timeout}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ######################################################################
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # software configs.  these are components that are combined into
0000000000000000000000000000000000000000;;	  # a multipart MIME user-data archive.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  write_heat_params:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/write-heat-params.yaml}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$KUBERNETES_SERVER_URL": {get_param: kubernetes_server_url}
0000000000000000000000000000000000000000;;	            "$KUBERNETES_SALT_URL": {get_param: kubernetes_salt_url}
0000000000000000000000000000000000000000;;	            "$MASTER_IP": {get_param: kube_master_ip}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  proxy_config:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/configure-proxy.sh}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$ENABLE_PROXY": {get_param: enable_proxy }
0000000000000000000000000000000000000000;;	            "$FTP_PROXY": {get_param: ftp_proxy }
0000000000000000000000000000000000000000;;	            "$HTTP_PROXY": {get_param: http_proxy }
0000000000000000000000000000000000000000;;	            "$HTTPS_PROXY": {get_param: https_proxy }
0000000000000000000000000000000000000000;;	            "$SOCKS_PROXY": {get_param: socks_proxy }
0000000000000000000000000000000000000000;;	            "$NO_PROXY": {get_param: no_proxy }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  hostname_hack:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config: {get_file: fragments/hostname-hack.yaml}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  hostname_hack_script:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config: {get_file: fragments/hostname-hack.sh}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_user:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config: {get_file: fragments/kube-user.yaml}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  provision_network_node:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config: {get_file: fragments/provision-network-node.sh}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  deploy_kube_auth_files_node:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/deploy-kube-auth-files-node.yaml}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$token_kubelet": {get_param: token_kubelet}
0000000000000000000000000000000000000000;;	            "$token_kube_proxy": {get_param: token_kube_proxy}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  configure_salt_node:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/configure-salt.yaml}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$MASTER_IP": {get_param: kube_master_ip}
0000000000000000000000000000000000000000;;	            "$OS_AUTH_URL": {get_param: os_auth_url}
0000000000000000000000000000000000000000;;	            "$OS_USERNAME": {get_param: os_username}
0000000000000000000000000000000000000000;;	            "$OS_PASSWORD": {get_param: os_password}
0000000000000000000000000000000000000000;;	            "$OS_REGION_NAME": {get_param: os_region_name}
0000000000000000000000000000000000000000;;	            "$OS_TENANT_NAME": {get_param: os_tenant_name}
0000000000000000000000000000000000000000;;	            "$OS_USER_DOMAIN_NAME": {get_param: os_user_domain_name}
0000000000000000000000000000000000000000;;	            "$role": "kubernetes-pool"
0000000000000000000000000000000000000000;;	            "$cluster_cidr": {get_param: cluster_cidr}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  run_salt:
0000000000000000000000000000000000000000;;	    type: OS::Heat::SoftwareConfig
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      group: ungrouped
0000000000000000000000000000000000000000;;	      config:
0000000000000000000000000000000000000000;;	        str_replace:
0000000000000000000000000000000000000000;;	          template: {get_file: fragments/run-salt.sh}
0000000000000000000000000000000000000000;;	          params:
0000000000000000000000000000000000000000;;	            "$$wc_notify": {get_attr: [minion_wait_handle, curl_cli]}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minion_init:
0000000000000000000000000000000000000000;;	    type: OS::Heat::MultipartMime
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      parts:
0000000000000000000000000000000000000000;;	        - config: {get_resource: write_heat_params}
0000000000000000000000000000000000000000;;	        - config: {get_resource: proxy_config}
0000000000000000000000000000000000000000;;	        - config: {get_resource: hostname_hack}
0000000000000000000000000000000000000000;;	        - config: {get_resource: hostname_hack_script}
0000000000000000000000000000000000000000;;	        - config: {get_resource: kube_user}
0000000000000000000000000000000000000000;;	        - config: {get_resource: provision_network_node}
0000000000000000000000000000000000000000;;	        - config: {get_resource: deploy_kube_auth_files_node}
0000000000000000000000000000000000000000;;	        - config: {get_resource: configure_salt_node}
0000000000000000000000000000000000000000;;	        - config: {get_resource: run_salt}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ######################################################################
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # a single kubernetes minion.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  server_name_post_fix:
0000000000000000000000000000000000000000;;	    type: OS::Heat::RandomString
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      character_classes: [{'class': 'lowercase', 'min': 1}]
0000000000000000000000000000000000000000;;	      length: 8
0000000000000000000000000000000000000000;;	      character_classes:
0000000000000000000000000000000000000000;;	        - class: lowercase
0000000000000000000000000000000000000000;;	        - class: digits
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minion:
0000000000000000000000000000000000000000;;	    type: OS::Nova::Server
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      image: {get_param: server_image}
0000000000000000000000000000000000000000;;	      flavor: {get_param: minion_flavor}
0000000000000000000000000000000000000000;;	      key_name: {get_param: ssh_key_name}
0000000000000000000000000000000000000000;;	      metadata: {get_param: metadata}
0000000000000000000000000000000000000000;;	      user_data_format: RAW
0000000000000000000000000000000000000000;;	      user_data: {get_resource: kube_minion_init}
0000000000000000000000000000000000000000;;	      networks:
0000000000000000000000000000000000000000;;	        - port: {get_resource: kube_minion_eth0}
0000000000000000000000000000000000000000;;	      name:
0000000000000000000000000000000000000000;;	        list_join: [-, [{get_param: cluster_name}, node, {get_resource: server_name_post_fix}]]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minion_eth0:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::Port
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      network: {get_param: fixed_network}
0000000000000000000000000000000000000000;;	      security_groups:
0000000000000000000000000000000000000000;;	        - {get_param: secgroup_base}
0000000000000000000000000000000000000000;;	        - {get_param: secgroup_node}
0000000000000000000000000000000000000000;;	      fixed_ips:
0000000000000000000000000000000000000000;;	        - subnet: {get_param: fixed_subnet}
0000000000000000000000000000000000000000;;	      allowed_address_pairs:
0000000000000000000000000000000000000000;;	        - ip_address: 10.246.0.0/16
0000000000000000000000000000000000000000;;	      replacement_policy: AUTO
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minion_floating:
0000000000000000000000000000000000000000;;	    type: OS::Neutron::FloatingIP
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      floating_network: {get_param: external_network}
0000000000000000000000000000000000000000;;	      port_id: {get_resource: kube_minion_eth0}
0000000000000000000000000000000000000000;;	    condition: assign_floating_ip
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	outputs:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minion_ip:
0000000000000000000000000000000000000000;;	    value: {get_attr: [kube_minion_eth0, fixed_ips, 0, ip_address]}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube_minion_external_ip:
0000000000000000000000000000000000000000;;	    value: {get_attr: [kube_minion_floating, floating_ip_address]}
0000000000000000000000000000000000000000;;	    condition: assign_floating_ip
