0000000000000000000000000000000000000000;;	# Kubernetes end to end
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	End-to-end (e2e) tests for Kubernetes provide a mechanism to test end-to-end
0000000000000000000000000000000000000000;;	behavior of the system, and is the last signal to ensure end user operations
0000000000000000000000000000000000000000;;	match developer specifications. Although unit and integration tests provide a
0000000000000000000000000000000000000000;;	good signal, in a distributed system like Kubernetes it is not uncommon that a
0000000000000000000000000000000000000000;;	minor change may pass all unit and integration tests, but cause unforeseen
0000000000000000000000000000000000000000;;	changes at the system level.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The primary objectives of the e2e tests are to ensure a consistent and reliable
0000000000000000000000000000000000000000;;	behavior of the kubernetes code base, and to catch hard-to-test bugs before
0000000000000000000000000000000000000000;;	users do, when unit and integration tests are insufficient.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To deploy the end-to-end test suite, it is best to deploy the
0000000000000000000000000000000000000000;;	[kubernetes-core bundle](https://github.com/juju-solutions/bundle-kubernetes-core)
0000000000000000000000000000000000000000;;	and then relate the `kubernetes-e2e` charm.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	juju deploy kubernetes-core
0000000000000000000000000000000000000000;;	juju deploy cs:~containers/kubernetes-e2e
0000000000000000000000000000000000000000;;	juju add-relation kubernetes-e2e:kube-control kubernetes-master:kube-control
0000000000000000000000000000000000000000;;	juju add-relation kubernetes-e2e:kubernetes-master kubernetes-master:kube-api-endpoint
0000000000000000000000000000000000000000;;	juju add-relation kubernetes-e2e easyrsa
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once the relations have settled, and the `kubernetes-e2e` charm reports
0000000000000000000000000000000000000000;;	 `Ready to test.` - you may kick off an end to end validation test.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Running the e2e test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The e2e test is encapsulated as an action to ensure consistent runs of the
0000000000000000000000000000000000000000;;	end to end test. The defaults are sensible for most deployments.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	juju run-action kubernetes-e2e/0 test
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Tuning the e2e test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The e2e test is configurable. By default it will focus on or skip the declared
0000000000000000000000000000000000000000;;	conformance tests in a cloud agnostic way. Default behaviors are configurable.
0000000000000000000000000000000000000000;;	This allows the operator to test only a subset of the conformance tests, or to
0000000000000000000000000000000000000000;;	test more behaviors not enabled by default. You can see all tunable options on
0000000000000000000000000000000000000000;;	the charm by inspecting the schema output of the actions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	$ juju actions kubernetes-e2e --format=yaml --schema
0000000000000000000000000000000000000000;;	test:
0000000000000000000000000000000000000000;;	  description: Run end-to-end validation test suite
0000000000000000000000000000000000000000;;	  properties:
0000000000000000000000000000000000000000;;	    focus:
0000000000000000000000000000000000000000;;	      default: \[Conformance\]
0000000000000000000000000000000000000000;;	      description: Regex focus for executing the test
0000000000000000000000000000000000000000;;	      type: string
0000000000000000000000000000000000000000;;	    skip:
0000000000000000000000000000000000000000;;	      default: \[Flaky\]
0000000000000000000000000000000000000000;;	      description: Regex of tests to skip
0000000000000000000000000000000000000000;;	      type: string
0000000000000000000000000000000000000000;;	    timeout:
0000000000000000000000000000000000000000;;	      default: 30000
0000000000000000000000000000000000000000;;	      description: Timeout in nanoseconds
0000000000000000000000000000000000000000;;	      type: integer
0000000000000000000000000000000000000000;;	  title: test
0000000000000000000000000000000000000000;;	  type: object
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	As an example, you can run a more limited set of tests for rapid validation of
0000000000000000000000000000000000000000;;	a deployed cluster. The following example will skip the `Flaky`, `Slow`, and
0000000000000000000000000000000000000000;;	`Feature` labeled tests:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	juju run-action kubernetes-e2e/0 test skip='\[(Flaky|Slow|Feature:.*)\]'
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	> Note: the escaping of the regex due to how bash handles brackets.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To see the different types of tests the Kubernetes end-to-end charm has access
0000000000000000000000000000000000000000;;	to, we encourage you to see the upstream documentation on the different types
0000000000000000000000000000000000000000;;	of tests, and to strongly understand what subsets of the tests you are running.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[Kinds of tests](https://github.com/kubernetes/kubernetes/blob/master/docs/devel/e2e-tests.md#kinds-of-tests)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### More information on end-to-end testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Along with the above descriptions, end-to-end testing is a much larger subject
0000000000000000000000000000000000000000;;	than this readme can encapsulate. There is far more information in the
0000000000000000000000000000000000000000;;	[end-to-end testing guide](https://github.com/kubernetes/kubernetes/blob/master/docs/devel/e2e-tests.md).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Evaluating end-to-end results
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is not enough to just simply run the test. Result output is stored in two
0000000000000000000000000000000000000000;;	places. The raw output of the e2e run is available in the `juju show-action-output`
0000000000000000000000000000000000000000;;	command, as well as a flat file on disk on the `kubernetes-e2e` unit that
0000000000000000000000000000000000000000;;	executed the test.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	> Note: The results will only be available once the action has
0000000000000000000000000000000000000000;;	completed the test run. End-to-end testing can be quite time intensive. Often
0000000000000000000000000000000000000000;;	times taking **greater than 1 hour**, depending on configuration.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	##### Flat file
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	$ juju run-action kubernetes-e2e/0 test
0000000000000000000000000000000000000000;;	Action queued with id: 4ceed33a-d96d-465a-8f31-20d63442e51b
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	$ juju scp kubernetes-e2e/0:4ceed33a-d96d-465a-8f31-20d63442e51b.log .
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	##### Action result output
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	$ juju run-action kubernetes-e2e/0 test
0000000000000000000000000000000000000000;;	Action queued with id: 4ceed33a-d96d-465a-8f31-20d63442e51b
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	$ juju show-action-output 4ceed33a-d96d-465a-8f31-20d63442e51b
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Known issues
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The e2e test suite assumes egress network access. It will pull container
0000000000000000000000000000000000000000;;	images from `gcr.io`. You will need to have this registry unblocked in your
0000000000000000000000000000000000000000;;	firewall to successfully run e2e test results. Or you may use the exposed
0000000000000000000000000000000000000000;;	proxy settings [properly configured](https://github.com/juju-solutions/bundle-canonical-kubernetes#proxy-configuration)
0000000000000000000000000000000000000000;;	on the kubernetes-worker units.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contact information
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Primary Authors: The ~containers team at Canonical
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- [Matt Bruzek &lt;matthew.bruzek@canonical.com&gt;](mailto:matthew.bruzek@canonical.com)
0000000000000000000000000000000000000000;;	- [Charles Butler &lt;charles.butler@canonical.com&gt;](mailto:charles.butler@canonical.com)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	More resources for help:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- [Bug Tracker](https://github.com/juju-solutions/bundle-canonical-kubernetes/issues)
0000000000000000000000000000000000000000;;	- [Github Repository](https://github.com/kubernetes/kubernetes/)
0000000000000000000000000000000000000000;;	- [Mailing List](mailto:juju@lists.ubuntu.com)
