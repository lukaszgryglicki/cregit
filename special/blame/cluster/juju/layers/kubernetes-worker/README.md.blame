0000000000000000000000000000000000000000;;	# Kubernetes Worker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This charm deploys a container runtime, and additionally stands up the Kubernetes
0000000000000000000000000000000000000000;;	worker applications: kubelet, and kube-proxy.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In order for this charm to be useful, it should be deployed with its companion
0000000000000000000000000000000000000000;;	charm [kubernetes-master](https://jujucharms.com/u/containers/kubernetes-master)
0000000000000000000000000000000000000000;;	and linked with an SDN-Plugin.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This charm has also been bundled up for your convenience so you can skip the
0000000000000000000000000000000000000000;;	above steps, and deploy it with a single command:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	juju deploy canonical-kubernetes
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For more information about [Canonical Kubernetes](https://jujucharms.com/canonical-kubernetes)
0000000000000000000000000000000000000000;;	consult the bundle `README.md` file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Scale out
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To add additional compute capacity to your Kubernetes workers, you may
0000000000000000000000000000000000000000;;	`juju add-unit` scale the cluster of applications. They will automatically
0000000000000000000000000000000000000000;;	join any related kubernetes-master, and enlist themselves as ready once the
0000000000000000000000000000000000000000;;	deployment is complete.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Operational actions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The kubernetes-worker charm supports the following Operational Actions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Pause
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Pausing the workload enables administrators to both [drain](http://kubernetes.io/docs/user-guide/kubectl/kubectl_drain/) and [cordon](http://kubernetes.io/docs/user-guide/kubectl/kubectl_cordon/)
0000000000000000000000000000000000000000;;	a unit for maintenance.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Resume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Resuming the workload will [uncordon](http://kubernetes.io/docs/user-guide/kubectl/kubectl_uncordon/) a paused unit. Workloads will automatically migrate unless otherwise directed via their application declaration.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Private registry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	With the "registry" action that is part for the kubernetes-worker charm, you can very easily create a private docker registry, with authentication, and available over TLS. Please note that the registry deployed with the action is not HA, and uses storage tied to the kubernetes node where the pod is running. So if the registry pod changes is migrated from one node to another for whatever reason, you will need to re-publish the images.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Example usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Create the relevant authentication files. Let's say you want user `userA` to authenticate with the password `passwordA`. Then you'll do :
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    echo "userA:passwordA" > htpasswd-plain
0000000000000000000000000000000000000000;;	    htpasswd -c -b -B htpasswd userA passwordA
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	(the `htpasswd` program comes with the `apache2-utils` package)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Supposing your registry will be reachable at `myregistry.company.com`, and that you already have your TLS key in the `registry.key` file, and your TLS certificate (with `myregistry.company.com` as Common Name) in the `registry.crt` file, you would then run :
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    juju run-action kubernetes-worker/0 registry domain=myregistry.company.com htpasswd="$(base64 -w0 htpasswd)" htpasswd-plain="$(base64 -w0 htpasswd-plain)" tlscert="$(base64 -w0 registry.crt)" tlskey="$(base64 -w0 registry.key)" ingress=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you then decide that you want do delete the registry, just run :
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    juju run-action kubernetes-worker/0 registry delete=true ingress=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Known Limitations
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Kubernetes workers currently only support 'phaux' HA scenarios. Even when configured with an HA cluster string, they will only ever contact the first unit in the cluster map. To enable a proper HA story, kubernetes-worker units are encouraged to proxy through a [kubeapi-load-balancer](https://jujucharms.com/kubeapi-load-balancer)
0000000000000000000000000000000000000000;;	application. This enables a HA deployment without the need to
0000000000000000000000000000000000000000;;	re-render configuration and disrupt the worker services.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	External access to pods must be performed through a [Kubernetes
0000000000000000000000000000000000000000;;	Ingress Resource](http://kubernetes.io/docs/user-guide/ingress/).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	When using NodePort type networking, there is no automation in exposing the
0000000000000000000000000000000000000000;;	ports selected by kubernetes or chosen by the user. They will need to be
0000000000000000000000000000000000000000;;	opened manually and can be performed across an entire worker pool.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If your NodePort service port selected is `30510` you can open this across all
0000000000000000000000000000000000000000;;	members of a worker pool named `kubernetes-worker` like so:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	juju run --application kubernetes-worker open-port 30510/tcp
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Don't forget to expose the kubernetes-worker application if its not already
0000000000000000000000000000000000000000;;	exposed, as this can cause confusion once the port has been opened and the
0000000000000000000000000000000000000000;;	service is not reachable.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note: When debugging connection issues with NodePort services, its important
0000000000000000000000000000000000000000;;	to first check the kube-proxy service on the worker units. If kube-proxy is not
0000000000000000000000000000000000000000;;	running, the associated port-mapping will not be configured in the iptables
0000000000000000000000000000000000000000;;	rulechains. 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you need to close the NodePort once a workload has been terminated, you can
0000000000000000000000000000000000000000;;	follow the same steps inversely.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	juju run --application kubernetes-worker close-port 30510
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
