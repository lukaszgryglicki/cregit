0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#generate token files
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBELET_TOKEN=$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null)
0000000000000000000000000000000000000000;;	KUBE_PROXY_TOKEN=$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null)
0000000000000000000000000000000000000000;;	known_tokens_file="/srv/salt-overlay/salt/kube-apiserver/known_tokens.csv"
0000000000000000000000000000000000000000;;	if [[ ! -f "${known_tokens_file}" ]]; then
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/salt/kube-apiserver
0000000000000000000000000000000000000000;;	  known_tokens_file="/srv/salt-overlay/salt/kube-apiserver/known_tokens.csv"
0000000000000000000000000000000000000000;;	  (umask u=rw,go= ;
0000000000000000000000000000000000000000;;	   echo "$KUBELET_TOKEN,kubelet,kubelet" > $known_tokens_file;
0000000000000000000000000000000000000000;;	   echo "$KUBE_PROXY_TOKEN,kube_proxy,kube_proxy" >> $known_tokens_file)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/salt/kubelet
0000000000000000000000000000000000000000;;	  kubelet_auth_file="/srv/salt-overlay/salt/kubelet/kubernetes_auth"
0000000000000000000000000000000000000000;;	  (umask u=rw,go= ; echo "{\"BearerToken\": \"$KUBELET_TOKEN\", \"Insecure\": true }" > $kubelet_auth_file)
0000000000000000000000000000000000000000;;	  kubelet_kubeconfig_file="/srv/salt-overlay/salt/kubelet/kubeconfig"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/salt/kubelet
0000000000000000000000000000000000000000;;	  (umask 077;
0000000000000000000000000000000000000000;;	  cat > "${kubelet_kubeconfig_file}" << EOF
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    insecure-skip-tls-verify: true
0000000000000000000000000000000000000000;;	  name: local
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kubelet
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kubelet
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: ${KUBELET_TOKEN}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/salt/kube-proxy
0000000000000000000000000000000000000000;;	  kube_proxy_kubeconfig_file="/srv/salt-overlay/salt/kube-proxy/kubeconfig"
0000000000000000000000000000000000000000;;	  # Make a kubeconfig file with the token.
0000000000000000000000000000000000000000;;	  # TODO(etune): put apiserver certs into secret too, and reference from authfile,
0000000000000000000000000000000000000000;;	  # so that "Insecure" is not needed.
0000000000000000000000000000000000000000;;	  (umask 077;
0000000000000000000000000000000000000000;;	  cat > "${kube_proxy_kubeconfig_file}" << EOF
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    insecure-skip-tls-verify: true
0000000000000000000000000000000000000000;;	  name: local
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kube-proxy
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kube-proxy
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: ${KUBE_PROXY_TOKEN}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Generate tokens for other "service accounts".  Append to known_tokens.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # NB: If this list ever changes, this script actually has to
0000000000000000000000000000000000000000;;	  # change to detect the existence of this file, kill any deleted
0000000000000000000000000000000000000000;;	  # old tokens and add any new tokens (to handle the upgrade case).
0000000000000000000000000000000000000000;;	  service_accounts=("system:scheduler" "system:controller_manager" "system:logging" "system:monitoring" "system:dns")
0000000000000000000000000000000000000000;;	  for account in "${service_accounts[@]}"; do
0000000000000000000000000000000000000000;;	    token=$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null)
0000000000000000000000000000000000000000;;	    echo "${token},${account},${account}" >> "${known_tokens_file}"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly BASIC_AUTH_FILE="/srv/salt-overlay/salt/kube-apiserver/basic_auth.csv"
0000000000000000000000000000000000000000;;	if [[ ! -e "${BASIC_AUTH_FILE}" ]]; then
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/salt/kube-apiserver
0000000000000000000000000000000000000000;;	  (umask 077;
0000000000000000000000000000000000000000;;	    echo "${KUBE_PASSWORD},${KUBE_USER},admin" > "${BASIC_AUTH_FILE}")
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create the overlay files for the salt tree.  We create these in a separate
0000000000000000000000000000000000000000;;	# place so that we can blow away the rest of the salt configs on a kube-push and
0000000000000000000000000000000000000000;;	# re-apply these.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	mkdir -p /srv/salt-overlay/pillar
0000000000000000000000000000000000000000;;	cat <<EOF >/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	instance_prefix: '$(echo "$INSTANCE_PREFIX" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	node_instance_prefix: $NODE_INSTANCE_PREFIX
0000000000000000000000000000000000000000;;	service_cluster_ip_range: $SERVICE_CLUSTER_IP_RANGE
0000000000000000000000000000000000000000;;	enable_cluster_monitoring: "${ENABLE_CLUSTER_MONITORING:-none}"
0000000000000000000000000000000000000000;;	enable_cluster_logging: "${ENABLE_CLUSTER_LOGGING:false}"
0000000000000000000000000000000000000000;;	enable_cluster_ui: "${ENABLE_CLUSTER_UI:true}"
0000000000000000000000000000000000000000;;	enable_node_logging: "${ENABLE_NODE_LOGGING:false}"
0000000000000000000000000000000000000000;;	logging_destination: $LOGGING_DESTINATION
0000000000000000000000000000000000000000;;	elasticsearch_replicas: $ELASTICSEARCH_LOGGING_REPLICAS
0000000000000000000000000000000000000000;;	enable_cluster_dns: "${ENABLE_CLUSTER_DNS:-false}"
0000000000000000000000000000000000000000;;	dns_server: $DNS_SERVER_IP
0000000000000000000000000000000000000000;;	dns_domain: $DNS_DOMAIN
0000000000000000000000000000000000000000;;	e2e_storage_test_environment: "${E2E_STORAGE_TEST_ENVIRONMENT:-false}"
0000000000000000000000000000000000000000;;	cluster_cidr: "$NODE_IP_RANGES"
0000000000000000000000000000000000000000;;	allocate_node_cidrs: "${ALLOCATE_NODE_CIDRS:-true}"
0000000000000000000000000000000000000000;;	admission_control: Initializers,NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,ResourceQuota
0000000000000000000000000000000000000000;;	EOF
