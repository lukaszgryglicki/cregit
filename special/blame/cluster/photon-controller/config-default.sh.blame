0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	##########################################################
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Common parameters for Kubernetes
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	##########################################################
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Default number of nodes to make. You can change this as needed
0000000000000000000000000000000000000000;;	NUM_NODES=3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Range of IPs assigned to pods
0000000000000000000000000000000000000000;;	NODE_IP_RANGES="10.244.0.0/16"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# IPs used by Kubernetes master
0000000000000000000000000000000000000000;;	MASTER_IP_RANGE="${MASTER_IP_RANGE:-10.246.0.0/24}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Range of IPs assigned by Kubernetes to services
0000000000000000000000000000000000000000;;	SERVICE_CLUSTER_IP_RANGE="10.244.240.0/20"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	##########################################################
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Advanced parameters for Kubernetes
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	##########################################################
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The instance prefix is the beginning of the name given to each VM we create
0000000000000000000000000000000000000000;;	# If this is changed, you can have multiple kubernetes clusters per project
0000000000000000000000000000000000000000;;	# Note that even if you don't change it, each tenant/project can have its own
0000000000000000000000000000000000000000;;	# Kubernetes cluster
0000000000000000000000000000000000000000;;	INSTANCE_PREFIX=kubernetes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Name of the user used to configure the VM
0000000000000000000000000000000000000000;;	# We use cloud-init to create the user
0000000000000000000000000000000000000000;;	VM_USER=kube
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# SSH options for how we connect to the Kubernetes VMs
0000000000000000000000000000000000000000;;	# We set the user known hosts file to /dev/null because we are connecting to new VMs.
0000000000000000000000000000000000000000;;	# When working in an environment where there is a lot of VM churn, VM IP addresses
0000000000000000000000000000000000000000;;	# will be reused, and the ssh keys will be different. This prevents us from seeing error
0000000000000000000000000000000000000000;;	# due to this, and it will not save the SSH key to the known_hosts file, so users will
0000000000000000000000000000000000000000;;	# still have standard ssh security checks.
0000000000000000000000000000000000000000;;	SSH_OPTS="-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oLogLevel=ERROR -C"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: Enable node logging.
0000000000000000000000000000000000000000;;	# Note: currently untested
0000000000000000000000000000000000000000;;	ENABLE_NODE_LOGGING=false
0000000000000000000000000000000000000000;;	LOGGING_DESTINATION=elasticsearch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: When set to true, Elasticsearch and Kibana will be setup
0000000000000000000000000000000000000000;;	# Note: currently untested
0000000000000000000000000000000000000000;;	ENABLE_CLUSTER_LOGGING=false
0000000000000000000000000000000000000000;;	ELASTICSEARCH_LOGGING_REPLICAS=1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: Cluster monitoring to setup as part of the cluster bring up:
0000000000000000000000000000000000000000;;	#   none     - No cluster monitoring setup
0000000000000000000000000000000000000000;;	#   influxdb - Heapster, InfluxDB, and Grafana
0000000000000000000000000000000000000000;;	#   google   - Heapster, Google Cloud Monitoring, and Google Cloud Logging
0000000000000000000000000000000000000000;;	# Note: currently untested
0000000000000000000000000000000000000000;;	ENABLE_CLUSTER_MONITORING="${KUBE_ENABLE_CLUSTER_MONITORING:-influxdb}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: Install cluster DNS.
0000000000000000000000000000000000000000;;	ENABLE_CLUSTER_DNS="${KUBE_ENABLE_CLUSTER_DNS:-true}"
0000000000000000000000000000000000000000;;	DNS_SERVER_IP="10.244.240.240"
0000000000000000000000000000000000000000;;	DNS_DOMAIN="cluster.local"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: Enable DNS horizontal autoscaler
0000000000000000000000000000000000000000;;	ENABLE_DNS_HORIZONTAL_AUTOSCALER="${KUBE_ENABLE_DNS_HORIZONTAL_AUTOSCALER:-false}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: Install Kubernetes UI
0000000000000000000000000000000000000000;;	ENABLE_CLUSTER_UI=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# We need to configure subject alternate names (SANs) for the master's certificate
0000000000000000000000000000000000000000;;	# we generate.  While users will connect via the external IP, pods (like the UI)
0000000000000000000000000000000000000000;;	# will connect via the cluster IP, from the SERVICE_CLUSTER_IP_RANGE.
0000000000000000000000000000000000000000;;	# In addition to the extra SANS here, we'll also add one for for the service IP.
0000000000000000000000000000000000000000;;	MASTER_EXTRA_SANS="DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.${DNS_DOMAIN}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Optional: if set to true, kube-up will configure the cluster to run e2e tests.
0000000000000000000000000000000000000000;;	E2E_STORAGE_TEST_ENVIRONMENT=${KUBE_E2E_STORAGE_TEST_ENVIRONMENT:-false}
