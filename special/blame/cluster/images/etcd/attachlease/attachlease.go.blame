0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5c0f89320baa872e0f54f1ac8ec80d580d4f657f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/clientv3"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		etcdAddress   = flag.String("etcd-address", "", "Etcd address")
0000000000000000000000000000000000000000;;		ttlKeysPrefix = flag.String("ttl-keys-prefix", "", "Prefix for TTL keys")
0000000000000000000000000000000000000000;;		leaseDuration = flag.Duration("lease-duration", time.Hour, "Lease duration (seconds granularity)")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if *etcdAddress == "" {
0000000000000000000000000000000000000000;;			glog.Fatalf("--etcd-address flag is required")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client, err := clientv3.New(clientv3.Config{Endpoints: []string{*etcdAddress}})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error while creating etcd client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure that ttlKeysPrefix is ended with "/" so that we only get children "directories".
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(*ttlKeysPrefix, "/") {
0000000000000000000000000000000000000000;;			*ttlKeysPrefix += "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx := context.Background()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		objectsResp, err := client.KV.Get(ctx, *ttlKeysPrefix, clientv3.WithPrefix())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error while getting objects to attach to the lease")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		lease, err := client.Lease.Grant(ctx, int64(*leaseDuration/time.Second))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error while creating lease: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.Infof("Lease with TTL: %v created", lease.TTL)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Infof("Attaching lease to %d entries", len(objectsResp.Kvs))
0000000000000000000000000000000000000000;;		for _, kv := range objectsResp.Kvs {
0000000000000000000000000000000000000000;;			_, err := client.KV.Put(ctx, string(kv.Key), string(kv.Value), clientv3.WithLease(lease.ID))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Error while attaching lease to: %s", string(kv.Key))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
