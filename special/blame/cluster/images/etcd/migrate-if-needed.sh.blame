0000000000000000000000000000000000000000;;	#!/bin/sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# NOTES
0000000000000000000000000000000000000000;;	# This script performs etcd upgrade based on the following environmental
0000000000000000000000000000000000000000;;	# variables:
0000000000000000000000000000000000000000;;	# TARGET_STORAGE - API of etcd to be used (supported: 'etcd2', 'etcd3')
0000000000000000000000000000000000000000;;	# TARGET_VERSION - etcd release to be used (supported: '2.2.1', '2.3.7', '3.0.17')
0000000000000000000000000000000000000000;;	# DATA_DIRECTORY - directory with etcd data
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# The current etcd version and storage format is detected based on the
0000000000000000000000000000000000000000;;	# contents of "${DATA_DIRECTORY}/version.txt" file (if the file doesn't
0000000000000000000000000000000000000000;;	# exist, we default it to "2.2.1/etcd2".
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# The update workflow support the following upgrade steps:
0000000000000000000000000000000000000000;;	# - 2.2.1/etcd2 -> 2.3.7/etcd2
0000000000000000000000000000000000000000;;	# - 2.3.7/etcd2 -> 3.0.17/etcd2
0000000000000000000000000000000000000000;;	# - 3.0.17/etcd2 -> 3.0.17/etcd3
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# NOTE: The releases supported in this script has to match release binaries
0000000000000000000000000000000000000000;;	# present in the etcd image (to make this script work correctly).
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Based on the current etcd version and storage format we detect what
0000000000000000000000000000000000000000;;	# upgrade step from this should be done to get reach target configuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ -z "${TARGET_STORAGE:-}" ]; then
0000000000000000000000000000000000000000;;	  echo "TARGET_STORAGE variable unset - unexpected failure"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	if [ -z "${TARGET_VERSION:-}" ]; then
0000000000000000000000000000000000000000;;	  echo "TARGET_VERSION variable unset - unexpected failure"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	if [ -z "${DATA_DIRECTORY:-}" ]; then
0000000000000000000000000000000000000000;;	  echo "DATA_DIRECTORY variable unset - unexpected failure"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "$(date +'%Y-%m-%d %H:%M:%S') Detecting if migration is needed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ "${TARGET_STORAGE}" != "etcd2" -a "${TARGET_STORAGE}" != "etcd3" ]; then
0000000000000000000000000000000000000000;;	  echo "Not supported version of storage: ${TARGET_STORAGE}"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Correctly support upgrade and rollback to non-default version.
0000000000000000000000000000000000000000;;	if [ "${DO_NOT_MOVE_BINARIES:-}" != "true" ]; then
0000000000000000000000000000000000000000;;	  cp "/usr/local/bin/etcd-${TARGET_VERSION}" "/usr/local/bin/etcd"
0000000000000000000000000000000000000000;;	  cp "/usr/local/bin/etcdctl-${TARGET_VERSION}" "/usr/local/bin/etcdctl"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# NOTE: SUPPORTED_VERSION has to match release binaries present in the
0000000000000000000000000000000000000000;;	# etcd image (to make this script work correctly).
0000000000000000000000000000000000000000;;	# We cannot use array since sh doesn't support it.
0000000000000000000000000000000000000000;;	SUPPORTED_VERSIONS_STRING="2.2.1 2.3.7 3.0.17"
0000000000000000000000000000000000000000;;	SUPPORTED_VERSIONS=$(echo "${SUPPORTED_VERSIONS_STRING}" | tr " " "\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	VERSION_FILE="version.txt"
0000000000000000000000000000000000000000;;	CURRENT_STORAGE="etcd2"
0000000000000000000000000000000000000000;;	CURRENT_VERSION="2.2.1"
0000000000000000000000000000000000000000;;	if [ -e "${DATA_DIRECTORY}/${VERSION_FILE}" ]; then
0000000000000000000000000000000000000000;;	  VERSION_CONTENTS="$(cat ${DATA_DIRECTORY}/${VERSION_FILE})"
0000000000000000000000000000000000000000;;	  # Example usage: if contents of VERSION_FILE is 2.3.7/etcd2, then
0000000000000000000000000000000000000000;;	  # - CURRENT_VERSION would be '2.3.7'
0000000000000000000000000000000000000000;;	  # - CURRENT_STORAGE would be 'etcd2'
0000000000000000000000000000000000000000;;	  CURRENT_VERSION="$(echo $VERSION_CONTENTS | cut -d '/' -f 1)"
0000000000000000000000000000000000000000;;	  CURRENT_STORAGE="$(echo $VERSION_CONTENTS | cut -d '/' -f 2)"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If there is no data in DATA_DIRECTORY, this means that we are
0000000000000000000000000000000000000000;;	# starting etcd from scratch. In that case, we don't need to do
0000000000000000000000000000000000000000;;	# any migration.
0000000000000000000000000000000000000000;;	if [ ! -d "${DATA_DIRECTORY}" ]; then
0000000000000000000000000000000000000000;;	  mkdir -p "${DATA_DIRECTORY}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	if [ -z "$(ls -A ${DATA_DIRECTORY})" ]; then
0000000000000000000000000000000000000000;;	  echo "${DATA_DIRECTORY} is empty - skipping migration"
0000000000000000000000000000000000000000;;	  echo "${TARGET_VERSION}/${TARGET_STORAGE}" > "${DATA_DIRECTORY}/${VERSION_FILE}"
0000000000000000000000000000000000000000;;	  exit 0
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Starts 'etcd' version ${START_VERSION} and writes to it:
0000000000000000000000000000000000000000;;	# 'etcd_version' -> "${START_VERSION}"
0000000000000000000000000000000000000000;;	# Successful write confirms that etcd is up and running.
0000000000000000000000000000000000000000;;	# Sets ETCD_PID at the end.
0000000000000000000000000000000000000000;;	# Returns 0 if etcd was successfully started, non-0 otherwise.
0000000000000000000000000000000000000000;;	start_etcd() {
0000000000000000000000000000000000000000;;	  # Use random ports, so that apiserver cannot connect to etcd.
0000000000000000000000000000000000000000;;	  ETCD_PORT=18629
0000000000000000000000000000000000000000;;	  ETCD_PEER_PORT=2380
0000000000000000000000000000000000000000;;	  # Avoid collisions between etcd and event-etcd.
0000000000000000000000000000000000000000;;	  case "${DATA_DIRECTORY}" in
0000000000000000000000000000000000000000;;	    *event*)
0000000000000000000000000000000000000000;;	      ETCD_PORT=18631
0000000000000000000000000000000000000000;;	      ETCD_PEER_PORT=2381
0000000000000000000000000000000000000000;;	      ;;
0000000000000000000000000000000000000000;;	  esac
0000000000000000000000000000000000000000;;	  local ETCD_CMD="${ETCD:-/usr/local/bin/etcd-${START_VERSION}}"
0000000000000000000000000000000000000000;;	  local ETCDCTL_CMD="${ETCDCTL:-/usr/local/bin/etcdctl-${START_VERSION}}"
0000000000000000000000000000000000000000;;	  local API_VERSION="$(echo ${START_STORAGE} | cut -c5-5)"
0000000000000000000000000000000000000000;;	  if [ "${API_VERSION}" = "2" ]; then
0000000000000000000000000000000000000000;;	    ETCDCTL_CMD="${ETCDCTL_CMD} --debug --endpoint=http://127.0.0.1:${ETCD_PORT} set"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    ETCDCTL_CMD="${ETCDCTL_CMD} --endpoints=http://127.0.0.1:${ETCD_PORT} put"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  ${ETCD_CMD} \
0000000000000000000000000000000000000000;;	    --name="etcd-$(hostname)" \
0000000000000000000000000000000000000000;;	    --debug \
0000000000000000000000000000000000000000;;	    --force-new-cluster \
0000000000000000000000000000000000000000;;	    --data-dir=${DATA_DIRECTORY} \
0000000000000000000000000000000000000000;;	    --listen-client-urls http://127.0.0.1:${ETCD_PORT} \
0000000000000000000000000000000000000000;;	    --advertise-client-urls http://127.0.0.1:${ETCD_PORT} \
0000000000000000000000000000000000000000;;	    --listen-peer-urls http://127.0.0.1:${ETCD_PEER_PORT} \
0000000000000000000000000000000000000000;;	    --initial-advertise-peer-urls http://127.0.0.1:${ETCD_PEER_PORT} &
0000000000000000000000000000000000000000;;	  ETCD_PID=$!
0000000000000000000000000000000000000000;;	  # Wait until we can write to etcd.
0000000000000000000000000000000000000000;;	  for i in $(seq 240); do
0000000000000000000000000000000000000000;;	    sleep 0.5
0000000000000000000000000000000000000000;;	    ETCDCTL_API="${API_VERSION}" ${ETCDCTL_CMD} 'etcd_version' ${START_VERSION}
0000000000000000000000000000000000000000;;	    if [ "$?" -eq "0" ]; then
0000000000000000000000000000000000000000;;	      echo "Etcd on port ${ETCD_PORT} is up."
0000000000000000000000000000000000000000;;	      return 0
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  echo "Timeout while waiting for etcd on port ${ETCD_PORT}"
0000000000000000000000000000000000000000;;	  return 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Stops etcd with ${ETCD_PID} pid.
0000000000000000000000000000000000000000;;	stop_etcd() {
0000000000000000000000000000000000000000;;	  kill "${ETCD_PID-}" >/dev/null 2>&1 || :
0000000000000000000000000000000000000000;;	  wait "${ETCD_PID-}" >/dev/null 2>&1 || :
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	ATTACHLEASE="${ATTACHLEASE:-/usr/local/bin/attachlease}"
0000000000000000000000000000000000000000;;	ROLLBACK="${ROLLBACK:-/usr/local/bin/rollback}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If we are upgrading from 2.2.1 and this is the first try for upgrade,
0000000000000000000000000000000000000000;;	# do the backup to allow restoring from it in case of failed upgrade.
0000000000000000000000000000000000000000;;	BACKUP_DIR="${DATA_DIRECTORY}/migration-backup"
0000000000000000000000000000000000000000;;	if [ "${CURRENT_VERSION}" = "2.2.1" -a ! "${CURRENT_VERSION}" != "${TARGET_VERSION}" -a -d "${BACKUP_DIR}" ]; then
0000000000000000000000000000000000000000;;	  echo "Backup etcd before starting migration"
0000000000000000000000000000000000000000;;	  mkdir ${BACKUP_DIR}
0000000000000000000000000000000000000000;;	  ETCDCTL_CMD="/usr/local/bin/etcdctl-2.2.1"
0000000000000000000000000000000000000000;;	  ETCDCTL_API=2 ${ETCDCTL_CMD} --debug backup --data-dir=${DATA_DIRECTORY} \
0000000000000000000000000000000000000000;;	    --backup-dir=${BACKUP_DIR}
0000000000000000000000000000000000000000;;	  echo "Backup done in ${BACKUP_DIR}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Do the roll-forward migration if needed.
0000000000000000000000000000000000000000;;	# The migration goes as following:
0000000000000000000000000000000000000000;;	# 1. for all versions starting one after the current version of etcd
0000000000000000000000000000000000000000;;	#    we do "start, wait until healthy and stop etcd". This is the
0000000000000000000000000000000000000000;;	#    procedure that etcd documentation suggests for upgrading binaries.
0000000000000000000000000000000000000000;;	# 2. For the first 3.0.x version that we encounter, if we are still in
0000000000000000000000000000000000000000;;	#    v2 API, we do upgrade to v3 API using the "etcdct migrate" and
0000000000000000000000000000000000000000;;	#    attachlease commands.
0000000000000000000000000000000000000000;;	SKIP_STEP=true
0000000000000000000000000000000000000000;;	for step in ${SUPPORTED_VERSIONS}; do
0000000000000000000000000000000000000000;;	  if [ "${step}" = "${CURRENT_VERSION}" ]; then
0000000000000000000000000000000000000000;;	    SKIP_STEP=false
0000000000000000000000000000000000000000;;	  elif [ "${SKIP_STEP}" != "true" ]; then
0000000000000000000000000000000000000000;;	    # Do the migration step, by just starting etcd in this version.
0000000000000000000000000000000000000000;;	    START_VERSION="${step}"
0000000000000000000000000000000000000000;;	    START_STORAGE="${CURRENT_STORAGE}"
0000000000000000000000000000000000000000;;	    if ! start_etcd; then
0000000000000000000000000000000000000000;;	      # Migration failed.
0000000000000000000000000000000000000000;;	      echo "Starting etcd ${step} failed"
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    # Kill etcd and wait until this is down.
0000000000000000000000000000000000000000;;	    stop_etcd
0000000000000000000000000000000000000000;;	    CURRENT_VERSION=${step}
0000000000000000000000000000000000000000;;	    echo "${CURRENT_VERSION}/${CURRENT_STORAGE}" > "${DATA_DIRECTORY}/${VERSION_FILE}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [ "$(echo ${CURRENT_VERSION} | cut -c1-2)" = "3." -a "${CURRENT_VERSION}" = "${step}" -a "${CURRENT_STORAGE}" = "etcd2" -a "${TARGET_STORAGE}" = "etcd3" ]; then
0000000000000000000000000000000000000000;;	    # If it is the first 3.x release in the list and we are migrating
0000000000000000000000000000000000000000;;	    # also from 'etcd2' to 'etcd3', do the migration now.
0000000000000000000000000000000000000000;;	    echo "Performing etcd2 -> etcd3 migration"
0000000000000000000000000000000000000000;;	    START_VERSION="${step}"
0000000000000000000000000000000000000000;;	    START_STORAGE="etcd3"
0000000000000000000000000000000000000000;;	    ETCDCTL_CMD="${ETCDCTL:-/usr/local/bin/etcdctl-${START_VERSION}}"
0000000000000000000000000000000000000000;;	    ETCDCTL_API=3 ${ETCDCTL_CMD} migrate --data-dir=${DATA_DIRECTORY}
0000000000000000000000000000000000000000;;	    echo "Attaching leases to TTL entries"
0000000000000000000000000000000000000000;;	    # Now attach lease to all keys.
0000000000000000000000000000000000000000;;	    # To do it, we temporarily start etcd on a random port (so that
0000000000000000000000000000000000000000;;	    # apiserver actually cannot access it).
0000000000000000000000000000000000000000;;	    if ! start_etcd; then
0000000000000000000000000000000000000000;;	      echo "Starting etcd ${step} in v3 mode failed"
0000000000000000000000000000000000000000;;	      exit 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    # Create a lease and attach all keys to it.
0000000000000000000000000000000000000000;;	    ${ATTACHLEASE} \
0000000000000000000000000000000000000000;;	      --etcd-address http://127.0.0.1:${ETCD_PORT} \
0000000000000000000000000000000000000000;;	      --ttl-keys-prefix "${TTL_KEYS_DIRECTORY:-/registry/events}" \
0000000000000000000000000000000000000000;;	      --lease-duration 1h
0000000000000000000000000000000000000000;;	    # Kill etcd and wait until this is down.
0000000000000000000000000000000000000000;;	    stop_etcd
0000000000000000000000000000000000000000;;	    CURRENT_STORAGE="etcd3"
0000000000000000000000000000000000000000;;	    echo "${CURRENT_VERSION}/${CURRENT_STORAGE}" > "${DATA_DIRECTORY}/${VERSION_FILE}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [ "${CURRENT_VERSION}" = "${TARGET_VERSION}" -a "${CURRENT_STORAGE}" = "${TARGET_STORAGE}" ]; then
0000000000000000000000000000000000000000;;	    break
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Do the rollback of needed.
0000000000000000000000000000000000000000;;	# NOTE: Rollback is only supported from "3.0.x" version in 'etcd3' mode to
0000000000000000000000000000000000000000;;	# "2.2.1" version in 'etcd2' mode.
0000000000000000000000000000000000000000;;	if [ "${CURRENT_STORAGE}" = "etcd3" -a "${TARGET_STORAGE}" = "etcd2" ]; then
0000000000000000000000000000000000000000;;	  if [ "$(echo ${CURRENT_VERSION} | cut -c1-4)" != "3.0." -o "${TARGET_VERSION}" != "2.2.1" ]; then
0000000000000000000000000000000000000000;;	    echo "etcd3 -> etcd2 downgrade is supported only between 3.0.x and 2.2.1"
0000000000000000000000000000000000000000;;	    return 0
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "Backup and remove all existing v2 data"
0000000000000000000000000000000000000000;;	  ROLLBACK_BACKUP_DIR="${DATA_DIRECTORY}.bak"
0000000000000000000000000000000000000000;;	  rm -rf "${ROLLBACK_BACKUP_DIR}"
0000000000000000000000000000000000000000;;	  mkdir -p "${ROLLBACK_BACKUP_DIR}"
0000000000000000000000000000000000000000;;	  cp -r "${DATA_DIRECTORY}" "${ROLLBACK_BACKUP_DIR}"
0000000000000000000000000000000000000000;;	  echo "Performing etcd3 -> etcd2 rollback"
0000000000000000000000000000000000000000;;	  ${ROLLBACK} --data-dir "${DATA_DIRECTORY}"
0000000000000000000000000000000000000000;;	  if [ "$?" -ne "0" ]; then
0000000000000000000000000000000000000000;;	    echo "Rollback to etcd2 failed"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  CURRENT_STORAGE="etcd2"
0000000000000000000000000000000000000000;;	  CURRENT_VERSION="2.2.1"
0000000000000000000000000000000000000000;;	  echo "${CURRENT_VERSION}/${CURRENT_STORAGE}" > "${DATA_DIRECTORY}/${VERSION_FILE}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "$(date +'%Y-%m-%d %H:%M:%S') Migration finished"
