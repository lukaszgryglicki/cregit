0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Bring up a Kubernetes cluster.
0000000000000000000000000000000000000000;;	# Usage:
0000000000000000000000000000000000000000;;	#   wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	# or
0000000000000000000000000000000000000000;;	#   curl -fsSL https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Advanced options
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_PROVIDER to choose between different providers:
0000000000000000000000000000000000000000;;	#  Google Compute Engine [default]
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=gce; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#  Google Container Engine
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=gke; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#  Amazon EC2
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=aws; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#  Libvirt (with CoreOS as a guest operating system)
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=libvirt-coreos; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#  Microsoft Azure
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=azure-legacy; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#  Vagrant (local virtual machines)
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=vagrant; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#  VMWare Photon Controller
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=photon-controller; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#  Rackspace
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=rackspace; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#  OpenStack-Heat
0000000000000000000000000000000000000000;;	#   * export KUBERNETES_PROVIDER=openstack-heat; wget -q -O - https://get.k8s.io | bash
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_RELEASE to choose a specific release instead of the current
0000000000000000000000000000000000000000;;	#    stable release, (e.g. 'v1.3.7').
0000000000000000000000000000000000000000;;	#    See https://github.com/kubernetes/kubernetes/releases for release options.
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_RELEASE_URL to choose where to download binaries from.
0000000000000000000000000000000000000000;;	#    (Defaults to https://storage.googleapis.com/kubernetes-release/release).
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_SERVER_ARCH to choose the server (Kubernetes cluster)
0000000000000000000000000000000000000000;;	#  architecture to download:
0000000000000000000000000000000000000000;;	#    * amd64 [default]
0000000000000000000000000000000000000000;;	#    * arm
0000000000000000000000000000000000000000;;	#    * arm64
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_SKIP_DOWNLOAD to skip downloading a release.
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_SKIP_CONFIRM to skip the installation confirmation prompt.
0000000000000000000000000000000000000000;;	#  Set KUBERNETES_SKIP_CREATE_CLUSTER to skip starting a cluster.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If KUBERNETES_RELEASE_URL is overridden but KUBERNETES_CI_RELEASE_URL is not then set KUBERNETES_CI_RELEASE_URL to KUBERNETES_RELEASE_URL.
0000000000000000000000000000000000000000;;	KUBERNETES_CI_RELEASE_URL="${KUBERNETES_CI_RELEASE_URL:-${KUBERNETES_RELEASE_URL:-https://dl.k8s.io/ci}}"
0000000000000000000000000000000000000000;;	KUBERNETES_RELEASE_URL="${KUBERNETES_RELEASE_URL:-https://dl.k8s.io}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_RELEASE_VERSION_REGEX="^v(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(-([a-zA-Z0-9]+)\\.(0|[1-9][0-9]*))?$"
0000000000000000000000000000000000000000;;	KUBE_CI_VERSION_REGEX="^v(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)-([a-zA-Z0-9]+)\\.(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*)\\+[-0-9a-z]*)?$"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Sets KUBE_VERSION variable if an explicit version number was provided (e.g. "v1.0.6",
0000000000000000000000000000000000000000;;	# "v1.2.0-alpha.1.881+376438b69c7612") or resolves the "published" version
0000000000000000000000000000000000000000;;	# <path>/<version> (e.g. "release/stable",' "ci/latest-1") by reading from GCS.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# See the docs on getting builds for more information about version
0000000000000000000000000000000000000000;;	# publication.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Args:
0000000000000000000000000000000000000000;;	#   $1 version string from command line
0000000000000000000000000000000000000000;;	# Vars set:
0000000000000000000000000000000000000000;;	#   KUBE_VERSION
0000000000000000000000000000000000000000;;	function set_binary_version() {
0000000000000000000000000000000000000000;;	  if [[ "${1}" =~ "/" ]]; then
0000000000000000000000000000000000000000;;	    export KUBE_VERSION=$(curl -fsSL --retry 5 "https://dl.k8s.io/${1}.txt")
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    export KUBE_VERSION=${1}
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Use the script from inside the Kubernetes tarball to fetch the client and
0000000000000000000000000000000000000000;;	# server binaries (if not included in kubernetes.tar.gz).
0000000000000000000000000000000000000000;;	function download_kube_binaries {
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    cd kubernetes
0000000000000000000000000000000000000000;;	    if [[ -x ./cluster/get-kube-binaries.sh ]]; then
0000000000000000000000000000000000000000;;	      # Make sure to use the same download URL in get-kube-binaries.sh
0000000000000000000000000000000000000000;;	      KUBERNETES_RELEASE_URL="${KUBERNETES_RELEASE_URL}" \
0000000000000000000000000000000000000000;;	        ./cluster/get-kube-binaries.sh
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create_cluster {
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBERNETES_SKIP_CREATE_CLUSTER-}" ]]; then
0000000000000000000000000000000000000000;;	    exit 0
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "Creating a kubernetes on ${KUBERNETES_PROVIDER:-gce}..."
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    cd kubernetes
0000000000000000000000000000000000000000;;	    ./cluster/kube-up.sh
0000000000000000000000000000000000000000;;	    echo "Kubernetes binaries at ${PWD}/cluster/"
0000000000000000000000000000000000000000;;	    if [[ ":$PATH:" != *":${PWD}/cluster:"* ]]; then
0000000000000000000000000000000000000000;;	      echo "You may want to add this directory to your PATH in \$HOME/.profile"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    echo "Installation successful!"
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -n "${KUBERNETES_SKIP_DOWNLOAD-}" ]]; then
0000000000000000000000000000000000000000;;	  create_cluster
0000000000000000000000000000000000000000;;	  exit 0
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -d "./kubernetes" ]]; then
0000000000000000000000000000000000000000;;	  if [[ -z "${KUBERNETES_SKIP_CONFIRM-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "'kubernetes' directory already exist. Should we skip download step and start to create cluster based on it? [Y]/n"
0000000000000000000000000000000000000000;;	    read confirm
0000000000000000000000000000000000000000;;	    if [[ ! "${confirm}" =~ ^[nN]$ ]]; then
0000000000000000000000000000000000000000;;	      echo "Skipping download step."
0000000000000000000000000000000000000000;;	      create_cluster
0000000000000000000000000000000000000000;;	      exit 0
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO: remove client checks once kubernetes.tar.gz no longer includes client
0000000000000000000000000000000000000000;;	# binaries by default.
0000000000000000000000000000000000000000;;	kernel=$(uname -s)
0000000000000000000000000000000000000000;;	case "${kernel}" in
0000000000000000000000000000000000000000;;	  Darwin)
0000000000000000000000000000000000000000;;	    platform="darwin"
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  Linux)
0000000000000000000000000000000000000000;;	    platform="linux"
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  *)
0000000000000000000000000000000000000000;;	    echo "Unknown, unsupported platform: ${kernel}." >&2
0000000000000000000000000000000000000000;;	    echo "Supported platforms: Linux, Darwin." >&2
0000000000000000000000000000000000000000;;	    echo "Bailing out." >&2
0000000000000000000000000000000000000000;;	    exit 2
0000000000000000000000000000000000000000;;	esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	machine=$(uname -m)
0000000000000000000000000000000000000000;;	case "${machine}" in
0000000000000000000000000000000000000000;;	  x86_64*|i?86_64*|amd64*)
0000000000000000000000000000000000000000;;	    arch="amd64"
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  aarch64*|arm64*)
0000000000000000000000000000000000000000;;	    arch="arm64"
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  arm*)
0000000000000000000000000000000000000000;;	    arch="arm"
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  i?86*)
0000000000000000000000000000000000000000;;	    arch="386"
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  *)
0000000000000000000000000000000000000000;;	    echo "Unknown, unsupported architecture (${machine})." >&2
0000000000000000000000000000000000000000;;	    echo "Supported architectures x86_64, i686, arm, arm64." >&2
0000000000000000000000000000000000000000;;	    echo "Bailing out." >&2
0000000000000000000000000000000000000000;;	    exit 3
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	file=kubernetes.tar.gz
0000000000000000000000000000000000000000;;	release=${KUBERNETES_RELEASE:-"release/stable"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Validate Kubernetes release version.
0000000000000000000000000000000000000000;;	# Translate a published version <bucket>/<version> (e.g. "release/stable") to version number.
0000000000000000000000000000000000000000;;	set_binary_version "${release}"
0000000000000000000000000000000000000000;;	if [[ ${KUBE_VERSION} =~ ${KUBE_CI_VERSION_REGEX} ]]; then
0000000000000000000000000000000000000000;;	  # Override KUBERNETES_RELEASE_URL to point to the CI bucket;
0000000000000000000000000000000000000000;;	  # this will be used by get-kube-binaries.sh.
0000000000000000000000000000000000000000;;	  KUBERNETES_RELEASE_URL="${KUBERNETES_CI_RELEASE_URL}"
0000000000000000000000000000000000000000;;	elif ! [[ ${KUBE_VERSION} =~ ${KUBE_RELEASE_VERSION_REGEX} ]]; then
0000000000000000000000000000000000000000;;	  echo "Version doesn't match regexp" >&2
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	kubernetes_tar_url="${KUBERNETES_RELEASE_URL}/${KUBE_VERSION}/${file}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	need_download=true
0000000000000000000000000000000000000000;;	if [[ -r "${PWD}/${file}" ]]; then
0000000000000000000000000000000000000000;;	  downloaded_version=$(tar -xzOf "${PWD}/${file}" kubernetes/version 2>/dev/null || true)
0000000000000000000000000000000000000000;;	  echo "Found preexisting ${file}, release ${downloaded_version}"
0000000000000000000000000000000000000000;;	  if [[ "${downloaded_version}" == "${KUBE_VERSION}" ]]; then
0000000000000000000000000000000000000000;;	    echo "Using preexisting kubernetes.tar.gz"
0000000000000000000000000000000000000000;;	    need_download=false
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if "${need_download}"; then
0000000000000000000000000000000000000000;;	  echo "Downloading kubernetes release ${KUBE_VERSION}"
0000000000000000000000000000000000000000;;	  echo "  from ${kubernetes_tar_url}"
0000000000000000000000000000000000000000;;	  echo "  to ${PWD}/${file}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -e "${PWD}/kubernetes" ]]; then
0000000000000000000000000000000000000000;;	  # Let's try not to accidentally nuke something that isn't a kubernetes
0000000000000000000000000000000000000000;;	  # release dir.
0000000000000000000000000000000000000000;;	  if [[ ! -f "${PWD}/kubernetes/version" ]]; then
0000000000000000000000000000000000000000;;	    echo "${PWD}/kubernetes exists but does not look like a Kubernetes release."
0000000000000000000000000000000000000000;;	    echo "Aborting!"
0000000000000000000000000000000000000000;;	    exit 5
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "Will also delete preexisting 'kubernetes' directory."
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z "${KUBERNETES_SKIP_CONFIRM-}" ]]; then
0000000000000000000000000000000000000000;;	  echo "Is this ok? [Y]/n"
0000000000000000000000000000000000000000;;	  read confirm
0000000000000000000000000000000000000000;;	  if [[ "${confirm}" =~ ^[nN]$ ]]; then
0000000000000000000000000000000000000000;;	    echo "Aborting."
0000000000000000000000000000000000000000;;	    exit 0
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if "${need_download}"; then
0000000000000000000000000000000000000000;;	  if [[ $(which curl) ]]; then
0000000000000000000000000000000000000000;;	    curl -fL --retry 5 --keepalive-time 2 "${kubernetes_tar_url}" -o "${file}"
0000000000000000000000000000000000000000;;	  elif [[ $(which wget) ]]; then
0000000000000000000000000000000000000000;;	    wget "${kubernetes_tar_url}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    echo "Couldn't find curl or wget.  Bailing out."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "Unpacking kubernetes release ${KUBE_VERSION}"
0000000000000000000000000000000000000000;;	rm -rf "${PWD}/kubernetes"
0000000000000000000000000000000000000000;;	tar -xzf ${file}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	download_kube_binaries
0000000000000000000000000000000000000000;;	create_cluster
