0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Bring up a Kubernetes cluster.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# If the full release name (gs://<bucket>/<release>) is passed in then we take
0000000000000000000000000000000000000000;;	# that directly.  If not then we assume we are doing development stuff and take
0000000000000000000000000000000000000000;;	# the defaults in the release config.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/..
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ -f "${KUBE_ROOT}/cluster/env.sh" ]; then
0000000000000000000000000000000000000000;;	    source "${KUBE_ROOT}/cluster/env.sh"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/kube-util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ -z "${ZONE-}" ]; then
0000000000000000000000000000000000000000;;	  echo "... Starting cluster using provider: ${KUBERNETES_PROVIDER}" >&2
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  echo "... Starting cluster in ${ZONE} using provider ${KUBERNETES_PROVIDER}" >&2
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "... calling verify-prereqs" >&2
0000000000000000000000000000000000000000;;	verify-prereqs
0000000000000000000000000000000000000000;;	echo "... calling verify-kube-binaries" >&2
0000000000000000000000000000000000000000;;	verify-kube-binaries
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${KUBE_STAGE_IMAGES:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  echo "... staging images" >&2
0000000000000000000000000000000000000000;;	  stage-images
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "... calling kube-up" >&2
0000000000000000000000000000000000000000;;	kube-up
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "... calling validate-cluster" >&2
0000000000000000000000000000000000000000;;	# Override errexit
0000000000000000000000000000000000000000;;	(validate-cluster) && validate_result="$?" || validate_result="$?"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# We have two different failure modes from validate cluster:
0000000000000000000000000000000000000000;;	# - 1: fatal error - cluster won't be working correctly
0000000000000000000000000000000000000000;;	# - 2: weak error - something went wrong, but cluster probably will be working correctly
0000000000000000000000000000000000000000;;	# We just print an error message in case 2).
0000000000000000000000000000000000000000;;	if [[ "${validate_result}" == "1" ]]; then
0000000000000000000000000000000000000000;;		exit 1
0000000000000000000000000000000000000000;;	elif [[ "${validate_result}" == "2" ]]; then
0000000000000000000000000000000000000000;;		echo "...ignoring non-fatal errors in validate-cluster" >&2
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${ENABLE_PROXY:-}" == "true" ]]; then
0000000000000000000000000000000000000000;;	  . /tmp/kube-proxy-env
0000000000000000000000000000000000000000;;	  echo ""
0000000000000000000000000000000000000000;;	  echo "*** Please run the following to add the kube-apiserver endpoint to your proxy white-list ***"
0000000000000000000000000000000000000000;;	  cat /tmp/kube-proxy-env
0000000000000000000000000000000000000000;;	  echo "***                                                                                      ***"
0000000000000000000000000000000000000000;;	  echo ""
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo -e "Done, listing cluster services:\n" >&2
0000000000000000000000000000000000000000;;	"${KUBE_ROOT}/cluster/kubectl.sh" cluster-info
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	exit 0
