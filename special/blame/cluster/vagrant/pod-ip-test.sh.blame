0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echoOK() {
0000000000000000000000000000000000000000;;	    TC='\e['
0000000000000000000000000000000000000000;;	    RegB="${TC}0m"
0000000000000000000000000000000000000000;;	    if [ "$1" -eq "0" ]; then
0000000000000000000000000000000000000000;;	        Green="${TC}32m"
0000000000000000000000000000000000000000;;	        echo -e "[${Green}OK${RegB}]"
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	        Red="${TC}31m"
0000000000000000000000000000000000000000;;	        echo -e "[${Red}FAIL${RegB}]"
0000000000000000000000000000000000000000;;	        echo "Check log file."
0000000000000000000000000000000000000000;;	        exit 1
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	usage() {
0000000000000000000000000000000000000000;;	    echo "Usage options: [--logfile <path to file>]"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	logfile=/dev/null
0000000000000000000000000000000000000000;;	while [[ $# > 0 ]]; do
0000000000000000000000000000000000000000;;	    key="$1"
0000000000000000000000000000000000000000;;	    shift
0000000000000000000000000000000000000000;;	    case $key in
0000000000000000000000000000000000000000;;	       -l|--logfile)
0000000000000000000000000000000000000000;;	         logfile="$1"
0000000000000000000000000000000000000000;;	         if [ "$logfile" == "" ]; then
0000000000000000000000000000000000000000;;	             usage
0000000000000000000000000000000000000000;;	             exit 1
0000000000000000000000000000000000000000;;	         fi
0000000000000000000000000000000000000000;;	         shift
0000000000000000000000000000000000000000;;	         ;;
0000000000000000000000000000000000000000;;	       *)
0000000000000000000000000000000000000000;;	         # unknown option
0000000000000000000000000000000000000000;;	         usage
0000000000000000000000000000000000000000;;	         exit 1
0000000000000000000000000000000000000000;;	         ;;
0000000000000000000000000000000000000000;;	       esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	cd "${KUBE_ROOT}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo All verbose output will be redirected to $logfile, use --logfile option to change.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	printf "Start the cluster with 2 nodes .. "
0000000000000000000000000000000000000000;;	export NUM_NODES=2
0000000000000000000000000000000000000000;;	export KUBERNETES_PROVIDER=vagrant
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	(cluster/kube-up.sh >>"$logfile" 2>&1) || true
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	printf "Check if node-1 can reach kubernetes master .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-1 -- ping -c 10 kubernetes-master >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	printf "Check if node-2 can reach kubernetes master .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-2 -- ping -c 10 kubernetes-master >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	printf "Pull an image that runs a web server on node-1 .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-1 -- 'sudo docker pull kubernetes/serve_hostname' >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	printf "Pull an image that runs a web server on node-2 .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-2 -- 'sudo docker pull kubernetes/serve_hostname' >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	printf "Run the server on node-1 .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-1 -- sudo docker run -d kubernetes/serve_hostname >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	printf "Run the server on node-2 .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-2 -- sudo docker run -d kubernetes/serve_hostname >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	printf "Run ping from node-1 to docker bridges and to the containers on both nodes .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-1 -- 'ping -c 20 10.246.0.1 && ping -c 20 10.246.1.1 && ping -c 20 10.246.0.2 && ping -c 20 10.246.1.2' >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	printf "Same pinch from node-2 .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-2 -- 'ping -c 20 10.246.0.1 && ping -c 20 10.246.1.1 && ping -c 20 10.246.0.2 && ping -c 20 10.246.1.2' >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	printf "tcp check, curl to both the running webservers from node-1 .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-1 -- 'curl -sS 10.246.0.2:9376  && curl -sS 10.246.1.2:9376' >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	printf "tcp check, curl to both the running webservers from node-2 .. "
0000000000000000000000000000000000000000;;	vagrant ssh node-2 -- 'curl -sS 10.246.0.2:9376  && curl -sS 10.246.1.2:9376' >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	printf "All good, destroy the cluster .. "
0000000000000000000000000000000000000000;;	vagrant destroy -f >>"$logfile" 2>&1
0000000000000000000000000000000000000000;;	echoOK $?
