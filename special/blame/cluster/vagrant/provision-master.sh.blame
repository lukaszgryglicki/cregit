0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Set the host name explicitly
0000000000000000000000000000000000000000;;	# See: https://github.com/mitchellh/vagrant/issues/2430
0000000000000000000000000000000000000000;;	hostnamectl set-hostname ${MASTER_NAME}
0000000000000000000000000000000000000000;;	# Set the variable to empty value explicitly
0000000000000000000000000000000000000000;;	if_to_edit=""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "$(grep 'VERSION_ID' /etc/os-release)" =~ ^VERSION_ID=23 ]]; then
0000000000000000000000000000000000000000;;	  # Disable network interface being managed by Network Manager (needed for Fedora 21+)
0000000000000000000000000000000000000000;;	  NETWORK_CONF_PATH=/etc/sysconfig/network-scripts/
0000000000000000000000000000000000000000;;	  if_to_edit=$( find ${NETWORK_CONF_PATH}ifcfg-* | xargs grep -l VAGRANT-BEGIN )
0000000000000000000000000000000000000000;;	  for if_conf in ${if_to_edit}; do
0000000000000000000000000000000000000000;;	    grep -q ^NM_CONTROLLED= ${if_conf} || echo 'NM_CONTROLLED=no' >> ${if_conf}
0000000000000000000000000000000000000000;;	    sed -i 's/#^NM_CONTROLLED=.*/NM_CONTROLLED=no/' ${if_conf}
0000000000000000000000000000000000000000;;	  done;
0000000000000000000000000000000000000000;;	  systemctl restart network
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# needed for vsphere support
0000000000000000000000000000000000000000;;	# handle the case when no 'VAGRANT-BEGIN' comment was defined in network-scripts
0000000000000000000000000000000000000000;;	# set the NETWORK_IF_NAME to have a default value in such case
0000000000000000000000000000000000000000;;	NETWORK_IF_NAME=`echo ${if_to_edit} | awk -F- '{ print $3 }'`
0000000000000000000000000000000000000000;;	if [[ -z "$NETWORK_IF_NAME" ]]; then
0000000000000000000000000000000000000000;;	  NETWORK_IF_NAME=${DEFAULT_NETWORK_IF_NAME}
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Setup hosts file to support ping by hostname to each node in the cluster from apiserver
0000000000000000000000000000000000000000;;	for (( i=0; i<${#NODE_NAMES[@]}; i++)); do
0000000000000000000000000000000000000000;;	  node=${NODE_NAMES[$i]}
0000000000000000000000000000000000000000;;	  ip=${NODE_IPS[$i]}
0000000000000000000000000000000000000000;;	  if [ ! "$(cat /etc/hosts | grep $node)" ]; then
0000000000000000000000000000000000000000;;	    echo "Adding $node to hosts file"
0000000000000000000000000000000000000000;;	    echo "$ip $node" >> /etc/hosts
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	echo "127.0.0.1 localhost" >> /etc/hosts # enables cmds like 'kubectl get pods' on master.
0000000000000000000000000000000000000000;;	echo "$MASTER_IP $MASTER_NAME" >> /etc/hosts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	enable-accounting
0000000000000000000000000000000000000000;;	prepare-package-manager
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Configure the master network
0000000000000000000000000000000000000000;;	if [ "${NETWORK_PROVIDER}" != "kubenet" ]; then
0000000000000000000000000000000000000000;;	  provision-network-master
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	write-salt-config kubernetes-master
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Generate and distribute a shared secret (bearer token) to
0000000000000000000000000000000000000000;;	# apiserver and kubelet so that kubelet can authenticate to
0000000000000000000000000000000000000000;;	# apiserver to send events.
0000000000000000000000000000000000000000;;	known_tokens_file="/srv/salt-overlay/salt/kube-apiserver/known_tokens.csv"
0000000000000000000000000000000000000000;;	if [[ ! -f "${known_tokens_file}" ]]; then
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/salt/kube-apiserver
0000000000000000000000000000000000000000;;	  known_tokens_file="/srv/salt-overlay/salt/kube-apiserver/known_tokens.csv"
0000000000000000000000000000000000000000;;	  (umask u=rw,go= ;
0000000000000000000000000000000000000000;;	   echo "$KUBELET_TOKEN,kubelet,kubelet" > $known_tokens_file;
0000000000000000000000000000000000000000;;	   echo "$KUBE_PROXY_TOKEN,kube_proxy,kube_proxy" >> $known_tokens_file;
0000000000000000000000000000000000000000;;	   echo "$KUBE_BEARER_TOKEN,admin,admin" >> $known_tokens_file)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/salt/kubelet
0000000000000000000000000000000000000000;;	  kubelet_auth_file="/srv/salt-overlay/salt/kubelet/kubernetes_auth"
0000000000000000000000000000000000000000;;	  (umask u=rw,go= ; echo "{\"BearerToken\": \"$KUBELET_TOKEN\", \"Insecure\": true }" > $kubelet_auth_file)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  create-salt-kubelet-auth
0000000000000000000000000000000000000000;;	  create-salt-kubeproxy-auth
0000000000000000000000000000000000000000;;	  # Generate tokens for other "service accounts".  Append to known_tokens.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # NB: If this list ever changes, this script actually has to
0000000000000000000000000000000000000000;;	  # change to detect the existence of this file, kill any deleted
0000000000000000000000000000000000000000;;	  # old tokens and add any new tokens (to handle the upgrade case).
0000000000000000000000000000000000000000;;	  service_accounts=("system:scheduler" "system:controller_manager" "system:logging" "system:monitoring" "system:dns")
0000000000000000000000000000000000000000;;	  for account in "${service_accounts[@]}"; do
0000000000000000000000000000000000000000;;	    token=$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null)
0000000000000000000000000000000000000000;;	    echo "${token},${account},${account}" >> "${known_tokens_file}"
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly BASIC_AUTH_FILE="/srv/salt-overlay/salt/kube-apiserver/basic_auth.csv"
0000000000000000000000000000000000000000;;	if [ ! -e "${BASIC_AUTH_FILE}" ]; then
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/salt/kube-apiserver
0000000000000000000000000000000000000000;;	  (umask 077;
0000000000000000000000000000000000000000;;	    echo "${MASTER_PASSWD},${MASTER_USER},admin" > "${BASIC_AUTH_FILE}")
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Enable Fedora Cockpit on host to support Kubernetes administration
0000000000000000000000000000000000000000;;	# Access it by going to <master-ip>:9090 and login as vagrant/vagrant
0000000000000000000000000000000000000000;;	if ! which /usr/libexec/cockpit-ws &>/dev/null; then
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  pushd /etc/yum.repos.d
0000000000000000000000000000000000000000;;	    curl -OL https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/fedora-23/msuchy-cockpit-preview-fedora-23.repo
0000000000000000000000000000000000000000;;	    dnf install -y cockpit cockpit-kubernetes docker socat ethtool
0000000000000000000000000000000000000000;;	  popd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  systemctl enable cockpit.socket
0000000000000000000000000000000000000000;;	  systemctl start cockpit.socket
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	install-salt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	run-salt
