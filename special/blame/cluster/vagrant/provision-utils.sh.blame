0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function enable-accounting() {
0000000000000000000000000000000000000000;;	  mkdir -p /etc/systemd/system.conf.d/
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/systemd/system.conf.d/kubernetes-accounting.conf
0000000000000000000000000000000000000000;;	[Manager]
0000000000000000000000000000000000000000;;	DefaultCPUAccounting=yes
0000000000000000000000000000000000000000;;	DefaultMemoryAccounting=yes  
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  systemctl daemon-reload
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function prepare-package-manager() {
0000000000000000000000000000000000000000;;	  echo "Prepare package manager"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Useful if a mirror is broken or slow
0000000000000000000000000000000000000000;;	  if [ -z "$CUSTOM_FEDORA_REPOSITORY_URL" ]; then
0000000000000000000000000000000000000000;;	      echo "fastestmirror=True" >> /etc/dnf/dnf.conf
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	      # remove trailing slash from URL if it's present
0000000000000000000000000000000000000000;;	      CUSTOM_FEDORA_REPOSITORY_URL="${CUSTOM_FEDORA_REPOSITORY_URL%/}"
0000000000000000000000000000000000000000;;	      sed -i -e "/^metalink=/d" /etc/yum.repos.d/*.repo
0000000000000000000000000000000000000000;;	      sed -i -e "s@^#baseurl=http://download.fedoraproject.org/pub/fedora@baseurl=$CUSTOM_FEDORA_REPOSITORY_URL@" /etc/yum.repos.d/*.repo
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function add-volume-support() {
0000000000000000000000000000000000000000;;	  echo "Adding nfs volume support"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # we need nfs-utils to support volumes
0000000000000000000000000000000000000000;;	  dnf install -y nfs-utils
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function write-salt-config() {
0000000000000000000000000000000000000000;;	  local role="$1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Update salt configuration
0000000000000000000000000000000000000000;;	  mkdir -p /etc/salt/minion.d
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p /srv/salt-overlay/pillar
0000000000000000000000000000000000000000;;	  cat <<EOF >/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	service_cluster_ip_range: '$(echo "$SERVICE_CLUSTER_IP_RANGE" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	cert_ip: '$(echo "$MASTER_IP" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_monitoring: '$(echo "$ENABLE_CLUSTER_MONITORING" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_logging: '$(echo "$ENABLE_CLUSTER_LOGGING" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_ui: '$(echo "$ENABLE_CLUSTER_UI" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_node_logging: '$(echo "$ENABLE_NODE_LOGGING" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	logging_destination: '$(echo "$LOGGING_DESTINATION" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	elasticsearch_replicas: '$(echo "$ELASTICSEARCH_LOGGING_REPLICAS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cluster_dns: '$(echo "$ENABLE_CLUSTER_DNS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	dns_server: '$(echo "$DNS_SERVER_IP" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	dns_domain: '$(echo "$DNS_DOMAIN" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	instance_prefix: '$(echo "$INSTANCE_PREFIX" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	admission_control: '$(echo "$ADMISSION_CONTROL" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_cpu_cfs_quota: '$(echo "$ENABLE_CPU_CFS_QUOTA" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	network_provider: '$(echo "$NETWORK_PROVIDER" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	cluster_cidr: '$(echo "$CLUSTER_IP_RANGE" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	opencontrail_tag: '$(echo "$OPENCONTRAIL_TAG" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	opencontrail_kubernetes_tag: '$(echo "$OPENCONTRAIL_KUBERNETES_TAG" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	opencontrail_public_subnet: '$(echo "$OPENCONTRAIL_PUBLIC_SUBNET" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	e2e_storage_test_environment: '$(echo "$E2E_STORAGE_TEST_ENVIRONMENT" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	enable_hostpath_provisioner: '$(echo "$ENABLE_HOSTPATH_PROVISIONER" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ -n "${EVICTION_HARD:-}" ]; then
0000000000000000000000000000000000000000;;	  cat <<EOF >>/srv/salt-overlay/pillar/cluster-params.sls
0000000000000000000000000000000000000000;;	eviction_hard: '$(echo "${EVICTION_HARD}" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/salt/minion.d/log-level-debug.conf
0000000000000000000000000000000000000000;;	log_level: warning
0000000000000000000000000000000000000000;;	log_level_logfile: warning
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  cat <<EOF >/etc/salt/minion.d/grains.conf
0000000000000000000000000000000000000000;;	grains:
0000000000000000000000000000000000000000;;	  node_ip: '$(echo "$MASTER_IP" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	  publicAddressOverride: '$(echo "$MASTER_IP" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	  network_mode: openvswitch
0000000000000000000000000000000000000000;;	  networkInterfaceName: '$(echo "$NETWORK_IF_NAME" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	  api_servers: '$(echo "$MASTER_IP" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	  cloud: vagrant
0000000000000000000000000000000000000000;;	  roles:
0000000000000000000000000000000000000000;;	    - $role
0000000000000000000000000000000000000000;;	  runtime_config: '$(echo "$RUNTIME_CONFIG" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	  docker_opts: '$(echo "$DOCKER_OPTS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	  master_extra_sans: '$(echo "$MASTER_EXTRA_SANS" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	  keep_host_etcd: true
0000000000000000000000000000000000000000;;	  kube_user: '$(echo "$KUBE_USER" | sed -e "s/'/''/g")'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function release_not_found() {
0000000000000000000000000000000000000000;;	  echo "It looks as if you don't have a compiled version of Kubernetes.  If you" >&2
0000000000000000000000000000000000000000;;	  echo "are running from a clone of the git repo, please run 'make quick-release'." >&2
0000000000000000000000000000000000000000;;	  echo "Note that this requires having Docker installed.  If you are running " >&2
0000000000000000000000000000000000000000;;	  echo "from a release tarball, something is wrong.  Look at " >&2
0000000000000000000000000000000000000000;;	  echo "http://kubernetes.io/ for information on how to contact the development team for help." >&2
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function install-salt() {
0000000000000000000000000000000000000000;;	  server_binary_tar="/vagrant/server/kubernetes-server-linux-amd64.tar.gz"
0000000000000000000000000000000000000000;;	  if [[ ! -f "$server_binary_tar" ]]; then
0000000000000000000000000000000000000000;;	    server_binary_tar="/vagrant/_output/release-tars/kubernetes-server-linux-amd64.tar.gz"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ ! -f "$server_binary_tar" ]]; then
0000000000000000000000000000000000000000;;	    release_not_found
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  salt_tar="/vagrant/server/kubernetes-salt.tar.gz"
0000000000000000000000000000000000000000;;	  if [[ ! -f "$salt_tar" ]]; then
0000000000000000000000000000000000000000;;	    salt_tar="/vagrant/_output/release-tars/kubernetes-salt.tar.gz"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ ! -f "$salt_tar" ]]; then
0000000000000000000000000000000000000000;;	    release_not_found
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Running release install script"
0000000000000000000000000000000000000000;;	  rm -rf /kube-install
0000000000000000000000000000000000000000;;	  mkdir -p /kube-install
0000000000000000000000000000000000000000;;	  pushd /kube-install
0000000000000000000000000000000000000000;;	  tar xzf "$salt_tar"
0000000000000000000000000000000000000000;;	  cp "$server_binary_tar" .
0000000000000000000000000000000000000000;;	  ./kubernetes/saltbase/install.sh "${server_binary_tar##*/}"
0000000000000000000000000000000000000000;;	  popd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if ! which salt-call >/dev/null 2>&1; then
0000000000000000000000000000000000000000;;	    # Install salt from official repositories.
0000000000000000000000000000000000000000;;	    # Need to enable testing-repos to get version of salt with fix for dnf-core-plugins
0000000000000000000000000000000000000000;;	    dnf config-manager --set-enabled updates-testing
0000000000000000000000000000000000000000;;	    dnf install -y salt-minion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Fedora >= 23 includes salt packages but the bootstrap is
0000000000000000000000000000000000000000;;	    # creating configuration for a (non-existent) salt repo anyway.
0000000000000000000000000000000000000000;;	    # Remove the invalid repo to prevent dnf from warning about it on
0000000000000000000000000000000000000000;;	    # every update.  Assume this problem is specific to Fedora 23 and
0000000000000000000000000000000000000000;;	    # will fixed by the time another version of Fedora lands.
0000000000000000000000000000000000000000;;	    local fedora_version=$(grep 'VERSION_ID' /etc/os-release | sed 's+VERSION_ID=++')
0000000000000000000000000000000000000000;;	    if [[ "${fedora_version}" = '23' ]]; then
0000000000000000000000000000000000000000;;	      local repo_file='/etc/yum.repos.d/saltstack-salt-fedora-23.repo'
0000000000000000000000000000000000000000;;	      if [[ -f "${repo_file}" ]]; then
0000000000000000000000000000000000000000;;	        rm "${repo_file}"
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function run-salt() {
0000000000000000000000000000000000000000;;	  echo "  Now waiting for the Salt provisioning process to complete on this machine."
0000000000000000000000000000000000000000;;	  echo "  This can take some time based on your network, disk, and cpu speed."
0000000000000000000000000000000000000000;;	  salt-call --local state.highstate
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-salt-kubelet-auth() {
0000000000000000000000000000000000000000;;	  local -r kubelet_kubeconfig_folder="/srv/salt-overlay/salt/kubelet"
0000000000000000000000000000000000000000;;	  mkdir -p "${kubelet_kubeconfig_folder}"
0000000000000000000000000000000000000000;;	  (umask 077;
0000000000000000000000000000000000000000;;	  cat > "${kubelet_kubeconfig_folder}/kubeconfig" << EOF
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    insecure-skip-tls-verify: true
0000000000000000000000000000000000000000;;	  name: local
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kubelet
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kubelet
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: ${KUBELET_TOKEN}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function create-salt-kubeproxy-auth() {
0000000000000000000000000000000000000000;;	  kube_proxy_kubeconfig_folder="/srv/salt-overlay/salt/kube-proxy"
0000000000000000000000000000000000000000;;	  mkdir -p "${kube_proxy_kubeconfig_folder}"
0000000000000000000000000000000000000000;;	  (umask 077;
0000000000000000000000000000000000000000;;	  cat > "${kube_proxy_kubeconfig_folder}/kubeconfig" << EOF
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    insecure-skip-tls-verify: true
0000000000000000000000000000000000000000;;	  name: local
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: local
0000000000000000000000000000000000000000;;	    user: kube-proxy
0000000000000000000000000000000000000000;;	  name: service-account-context
0000000000000000000000000000000000000000;;	current-context: service-account-context
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: kube-proxy
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: ${KUBE_PROXY_TOKEN}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	}
