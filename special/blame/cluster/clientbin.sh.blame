0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=${KUBE_ROOT:-$(dirname "${BASH_SOURCE}")/..}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Detect the OS name/arch so that we can find our binary
0000000000000000000000000000000000000000;;	case "$(uname -s)" in
0000000000000000000000000000000000000000;;	  Darwin)
0000000000000000000000000000000000000000;;	    host_os=darwin
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  Linux)
0000000000000000000000000000000000000000;;	    host_os=linux
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  *)
0000000000000000000000000000000000000000;;	    echo "Unsupported host OS.  Must be Linux or Mac OS X." >&2
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	case "$(uname -m)" in
0000000000000000000000000000000000000000;;	  x86_64*)
0000000000000000000000000000000000000000;;	    host_arch=amd64
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  i?86_64*)
0000000000000000000000000000000000000000;;	    host_arch=amd64
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  amd64*)
0000000000000000000000000000000000000000;;	    host_arch=amd64
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  arm*)
0000000000000000000000000000000000000000;;	    host_arch=arm
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  i?86*)
0000000000000000000000000000000000000000;;	    host_arch=386
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  s390x*)
0000000000000000000000000000000000000000;;	    host_arch=s390x
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  ppc64le*)
0000000000000000000000000000000000000000;;	    host_arch=ppc64le
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	  *)
0000000000000000000000000000000000000000;;	    echo "Unsupported host arch. Must be x86_64, 386, arm, s390x or ppc64le." >&2
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	    ;;
0000000000000000000000000000000000000000;;	esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Get the absolute path of the directory component of a file, i.e. the
0000000000000000000000000000000000000000;;	# absolute path of the dirname of $1.
0000000000000000000000000000000000000000;;	get_absolute_dirname() {
0000000000000000000000000000000000000000;;	  echo "$(cd "$(dirname "$1")" && pwd)"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function get_bin() {
0000000000000000000000000000000000000000;;	  bin="${1:-}"
0000000000000000000000000000000000000000;;	  srcdir="${2:-}"
0000000000000000000000000000000000000000;;	  if [[ "${bin}" == "" ]]; then
0000000000000000000000000000000000000000;;	    echo "Binary name is required"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  if [[ "${srcdir}" == "" ]]; then
0000000000000000000000000000000000000000;;	    echo "Source directory path is required"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  locations=(
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/_output/bin/${bin}"
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/_output/dockerized/bin/${host_os}/${host_arch}/${bin}"
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/_output/local/bin/${host_os}/${host_arch}/${bin}"
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/bazel-bin/${srcdir}/${bin}"
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/platforms/${host_os}/${host_arch}/${bin}"
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  echo $( (ls -t "${locations[@]}" 2>/dev/null || true) | head -1 )
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function print_error() {
0000000000000000000000000000000000000000;;	  {
0000000000000000000000000000000000000000;;	    echo "It looks as if you don't have a compiled ${1:-} binary"
0000000000000000000000000000000000000000;;	    echo
0000000000000000000000000000000000000000;;	    echo "If you are running from a clone of the git repo, please run"
0000000000000000000000000000000000000000;;	    echo "'./build/run.sh make cross'. Note that this requires having"
0000000000000000000000000000000000000000;;	    echo "Docker installed."
0000000000000000000000000000000000000000;;	    echo
0000000000000000000000000000000000000000;;	    echo "If you are running from a binary release tarball, something is wrong. "
0000000000000000000000000000000000000000;;	    echo "Look at http://kubernetes.io/ for information on how to contact the "
0000000000000000000000000000000000000000;;	    echo "development team for help."
0000000000000000000000000000000000000000;;	  } >&2
0000000000000000000000000000000000000000;;	}
