0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# loadedImageFlags is a bit-flag to track which docker images loaded successfully.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function load-docker-images() {
0000000000000000000000000000000000000000;;	  let loadedImageFlags=0
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  while true; do
0000000000000000000000000000000000000000;;	    restart_docker=false
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	    if which docker 1>/dev/null 2>&1; then
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	      timeout 120 docker load -i /srv/salt/kube-bins/kube-apiserver.tar 1>/dev/null 2>&1
0000000000000000000000000000000000000000;;	      rc=$?
0000000000000000000000000000000000000000;;	      if [[ $rc == 0 ]]; then
0000000000000000000000000000000000000000;;	        let loadedImageFlags="$loadedImageFlags|1"
0000000000000000000000000000000000000000;;	      elif [[ $rc == 124 ]]; then
0000000000000000000000000000000000000000;;	        restart_docker=true
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	      timeout 120 docker load -i /srv/salt/kube-bins/kube-scheduler.tar 1>/dev/null 2>&1
0000000000000000000000000000000000000000;;	      rc=$?
0000000000000000000000000000000000000000;;	      if [[ $rc == 0 ]]; then
0000000000000000000000000000000000000000;;	        let loadedImageFlags="$loadedImageFlags|2"
0000000000000000000000000000000000000000;;	      elif [[ $rc == 124 ]]; then
0000000000000000000000000000000000000000;;	        restart_docker=true
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	      timeout 120 docker load -i /srv/salt/kube-bins/kube-controller-manager.tar 1>/dev/null 2>&1
0000000000000000000000000000000000000000;;	      rc=$?
0000000000000000000000000000000000000000;;	      if [[ $rc == 0 ]]; then
0000000000000000000000000000000000000000;;	        let loadedImageFlags="$loadedImageFlags|4"
0000000000000000000000000000000000000000;;	      elif [[ $rc == 124 ]]; then
0000000000000000000000000000000000000000;;	        restart_docker=true
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	    # required docker images got installed. exit while loop.
0000000000000000000000000000000000000000;;	    if [[ $loadedImageFlags == 7 ]]; then break; fi
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	    # Sometimes docker load hang, restart docker daemon resolve the issue
0000000000000000000000000000000000000000;;	    if [[ $restart_docker ]]; then
0000000000000000000000000000000000000000;;	      if ! service docker restart; then # Try systemctl if there's no service command.
0000000000000000000000000000000000000000;;	        systemctl restart docker      
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	    # sleep for 15 seconds before attempting to load docker images again
0000000000000000000000000000000000000000;;	    sleep 15
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function convert-rkt-image() {
0000000000000000000000000000000000000000;;	  (cd /tmp; ${DOCKER2ACI_BIN} $1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function load-rkt-images() {
0000000000000000000000000000000000000000;;	  convert-rkt-image /srv/salt/kube-bins/kube-apiserver.tar
0000000000000000000000000000000000000000;;	  convert-rkt-image /srv/salt/kube-bins/kube-scheduler.tar
0000000000000000000000000000000000000000;;	  convert-rkt-image /srv/salt/kube-bins/kube-controller-manager.tar
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Currently, we can't run docker image tarballs directly,
0000000000000000000000000000000000000000;;	  # So we use 'rkt fetch' to load the docker images into rkt image stores.
0000000000000000000000000000000000000000;;	  # see https://github.com/coreos/rkt/issues/2392.
0000000000000000000000000000000000000000;;	  ${RKT_BIN} fetch /tmp/*.aci --insecure-options=image
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_CONTAINER_RUNTIME}" == "rkt" ]]; then
0000000000000000000000000000000000000000;;	  load-rkt-images
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  load-docker-images
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Now exit. After kube-push, salt will notice that the service is down and it
0000000000000000000000000000000000000000;;	# will start it and new docker images will be loaded.
