0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	DEBUG="${DEBUG:-false}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ "${DEBUG}" == "true" ]; then
0000000000000000000000000000000000000000;;		set -x
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cert_ip=$1
0000000000000000000000000000000000000000;;	extra_sans=${2:-}
0000000000000000000000000000000000000000;;	cert_dir=${CERT_DIR:-/srv/kubernetes}
0000000000000000000000000000000000000000;;	cert_group=${CERT_GROUP:-kube-cert}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	mkdir -p "$cert_dir"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	use_cn=false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO: Add support for discovery on other providers?
0000000000000000000000000000000000000000;;	if [ "$cert_ip" == "_use_gce_external_ip_" ]; then
0000000000000000000000000000000000000000;;	  cert_ip=$(curl -s -H Metadata-Flavor:Google http://metadata.google.internal./computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip)
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ "$cert_ip" == "_use_aws_external_ip_" ]; then
0000000000000000000000000000000000000000;;	  # If there's no public IP assigned (e.g. this host is running on an internal subnet in a VPC), then
0000000000000000000000000000000000000000;;	  # curl will happily spit out the contents of AWS's 404 page and an exit code of zero.
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # The string containing the 404 page trips up one of easyrsa's calls to openssl later; whichever
0000000000000000000000000000000000000000;;	  # one creates the CA certificate, because the 404 page is > 64 characters.
0000000000000000000000000000000000000000;;	  if cert_ip=$(curl -f -s http://169.254.169.254/latest/meta-data/public-ipv4); then
0000000000000000000000000000000000000000;;	    :
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    cert_ip=$(curl -f -s http://169.254.169.254/latest/meta-data/local-ipv4)
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [ "$cert_ip" == "_use_azure_dns_name_" ]; then
0000000000000000000000000000000000000000;;	  cert_ip=$(uname -n | awk -F. '{ print $2 }').cloudapp.net
0000000000000000000000000000000000000000;;	  use_cn=true
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	sans="IP:${cert_ip}"
0000000000000000000000000000000000000000;;	if [[ -n "${extra_sans}" ]]; then
0000000000000000000000000000000000000000;;	  sans="${sans},${extra_sans}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	tmpdir=$(mktemp -d -t kubernetes_cacert.XXXXXX)
0000000000000000000000000000000000000000;;	trap 'rm -rf "${tmpdir}"' EXIT
0000000000000000000000000000000000000000;;	cd "${tmpdir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO: For now, this is a patched tool that makes subject-alt-name work, when
0000000000000000000000000000000000000000;;	# the fix is upstream  move back to the upstream easyrsa.  This is cached in GCS
0000000000000000000000000000000000000000;;	# but is originally taken from:
0000000000000000000000000000000000000000;;	#   https://github.com/brendandburns/easy-rsa/archive/master.tar.gz
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# To update, do the following:
0000000000000000000000000000000000000000;;	# curl -o easy-rsa.tar.gz https://github.com/brendandburns/easy-rsa/archive/master.tar.gz
0000000000000000000000000000000000000000;;	# gsutil cp easy-rsa.tar.gz gs://kubernetes-release/easy-rsa/easy-rsa.tar.gz
0000000000000000000000000000000000000000;;	# gsutil acl ch -R -g all:R gs://kubernetes-release/easy-rsa/easy-rsa.tar.gz
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Due to GCS caching of public objects, it may take time for this to be widely
0000000000000000000000000000000000000000;;	# distributed.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Use ~/kube/easy-rsa.tar.gz if it exists, so that it can be
0000000000000000000000000000000000000000;;	# pre-pushed in cases where an outgoing connection is not allowed.
0000000000000000000000000000000000000000;;	if [ -f ~/kube/easy-rsa.tar.gz ]; then
0000000000000000000000000000000000000000;;		ln -s ~/kube/easy-rsa.tar.gz .
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;		curl -L -O https://storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz > /dev/null 2>&1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	tar xzf easy-rsa.tar.gz > /dev/null 2>&1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cd easy-rsa-master/easyrsa3
0000000000000000000000000000000000000000;;	./easyrsa init-pki > /dev/null 2>&1
0000000000000000000000000000000000000000;;	./easyrsa --batch "--req-cn=$cert_ip@`date +%s`" build-ca nopass > /dev/null 2>&1
0000000000000000000000000000000000000000;;	if [ $use_cn = "true" ]; then
0000000000000000000000000000000000000000;;	    ./easyrsa build-server-full $cert_ip nopass > /dev/null 2>&1
0000000000000000000000000000000000000000;;	    cp -p pki/issued/$cert_ip.crt "${cert_dir}/server.cert" > /dev/null 2>&1
0000000000000000000000000000000000000000;;	    cp -p pki/private/$cert_ip.key "${cert_dir}/server.key" > /dev/null 2>&1
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	    ./easyrsa --subject-alt-name="${sans}" build-server-full kubernetes-master nopass > /dev/null 2>&1
0000000000000000000000000000000000000000;;	    cp -p pki/issued/kubernetes-master.crt "${cert_dir}/server.cert" > /dev/null 2>&1
0000000000000000000000000000000000000000;;	    cp -p pki/private/kubernetes-master.key "${cert_dir}/server.key" > /dev/null 2>&1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	# Make a superuser client cert with subject "O=system:masters, CN=kubecfg"
0000000000000000000000000000000000000000;;	./easyrsa --dn-mode=org \
0000000000000000000000000000000000000000;;	  --req-cn=kubecfg --req-org=system:masters \
0000000000000000000000000000000000000000;;	  --req-c= --req-st= --req-city= --req-email= --req-ou= \
0000000000000000000000000000000000000000;;	  build-client-full kubecfg nopass > /dev/null 2>&1
0000000000000000000000000000000000000000;;	cp -p pki/ca.crt "${cert_dir}/ca.crt"
0000000000000000000000000000000000000000;;	cp -p pki/issued/kubecfg.crt "${cert_dir}/kubecfg.crt"
0000000000000000000000000000000000000000;;	cp -p pki/private/kubecfg.key "${cert_dir}/kubecfg.key"
0000000000000000000000000000000000000000;;	# Make server certs accessible to apiserver.
0000000000000000000000000000000000000000;;	chgrp $cert_group "${cert_dir}/server.key" "${cert_dir}/server.cert" "${cert_dir}/ca.crt"
0000000000000000000000000000000000000000;;	chmod 660 "${cert_dir}/server.key" "${cert_dir}/server.cert" "${cert_dir}/ca.crt"
