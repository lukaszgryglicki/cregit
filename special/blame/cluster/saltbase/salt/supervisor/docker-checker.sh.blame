0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script is intended to start the docker and then loop until
0000000000000000000000000000000000000000;;	# it detects a failure.  It then exits, and supervisord restarts it
0000000000000000000000000000000000000000;;	# which in turn restarts docker.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	main() {
0000000000000000000000000000000000000000;;	  if ! healthy 60; then
0000000000000000000000000000000000000000;;	    stop_docker
0000000000000000000000000000000000000000;;	    start_docker
0000000000000000000000000000000000000000;;	    echo "waiting 30s for startup"
0000000000000000000000000000000000000000;;	    sleep 30
0000000000000000000000000000000000000000;;	    healthy 60
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  while healthy; do
0000000000000000000000000000000000000000;;	    sleep 10
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Docker failed!"
0000000000000000000000000000000000000000;;	  exit 2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Performs health check on docker.  If a parameter is passed, it is treated as
0000000000000000000000000000000000000000;;	# the number of seconds to keep trying for a healthy result.  If none is passed
0000000000000000000000000000000000000000;;	# we make only one attempt.
0000000000000000000000000000000000000000;;	healthy() {
0000000000000000000000000000000000000000;;	  max_retry_sec="$1"
0000000000000000000000000000000000000000;;	  shift
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  starttime=$(date +%s)
0000000000000000000000000000000000000000;;	  while ! timeout 60 docker ps > /dev/null; do
0000000000000000000000000000000000000000;;	    if [[ -z "$max_retry_sec" || $(( $(date +%s) - starttime )) -gt "$max_retry_sec" ]]; then
0000000000000000000000000000000000000000;;	      echo "docker ps did not succeed"
0000000000000000000000000000000000000000;;	      return 2
0000000000000000000000000000000000000000;;	    else
0000000000000000000000000000000000000000;;	      echo "waiting 5s before retry"
0000000000000000000000000000000000000000;;	      sleep 5
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  echo "docker is healthy"
0000000000000000000000000000000000000000;;	  return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	stop_docker() {
0000000000000000000000000000000000000000;;	  /etc/init.d/docker stop
0000000000000000000000000000000000000000;;	  # Make sure docker gracefully terminated before start again
0000000000000000000000000000000000000000;;	  starttime=`date +%s`
0000000000000000000000000000000000000000;;	  while pidof docker > /dev/null; do
0000000000000000000000000000000000000000;;	      currenttime=`date +%s`
0000000000000000000000000000000000000000;;	      ((elapsedtime = currenttime - starttime))
0000000000000000000000000000000000000000;;	      # after 60 seconds, forcefully terminate docker process
0000000000000000000000000000000000000000;;	      if test $elapsedtime -gt 60; then
0000000000000000000000000000000000000000;;	        echo "attempting to kill docker process with sigkill signal"
0000000000000000000000000000000000000000;;	        kill -9 `pidof docker` || sleep 10
0000000000000000000000000000000000000000;;	      else
0000000000000000000000000000000000000000;;	        echo "waiting clean shutdown"
0000000000000000000000000000000000000000;;	        sleep 10
0000000000000000000000000000000000000000;;	      fi
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	start_docker() {
0000000000000000000000000000000000000000;;	  echo "docker is not running. starting docker"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # cleanup docker network checkpoint to avoid running into known issue
0000000000000000000000000000000000000000;;	  # of docker (https://github.com/docker/docker/issues/18283)
0000000000000000000000000000000000000000;;	  rm -rf /var/lib/docker/network
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  /etc/init.d/docker start
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	main
