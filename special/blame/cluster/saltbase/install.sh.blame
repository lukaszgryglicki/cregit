0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script will set up the salt directory on the target server.  It takes one
0000000000000000000000000000000000000000;;	# argument that is a tarball with the pre-compiled kubernetes server binaries.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	SALT_ROOT=$(dirname "${BASH_SOURCE}")
0000000000000000000000000000000000000000;;	readonly SALT_ROOT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly KUBE_DOCKER_WRAPPED_BINARIES=(
0000000000000000000000000000000000000000;;	  kube-apiserver
0000000000000000000000000000000000000000;;	  kube-controller-manager
0000000000000000000000000000000000000000;;	  kube-scheduler
0000000000000000000000000000000000000000;;	  kube-proxy
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly SERVER_BIN_TAR=${1-}
0000000000000000000000000000000000000000;;	if [[ -z "$SERVER_BIN_TAR" ]]; then
0000000000000000000000000000000000000000;;	  echo "!!! No binaries specified"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a temp dir for untaring
0000000000000000000000000000000000000000;;	KUBE_TEMP=$(mktemp --tmpdir=/srv -d -t kubernetes.XXXXXX)
0000000000000000000000000000000000000000;;	trap 'rm -rf "${KUBE_TEMP}"' EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This file is meant to run on the master.  It will install the salt configs
0000000000000000000000000000000000000000;;	# into the appropriate place on the master.  We do this by creating a new set of
0000000000000000000000000000000000000000;;	# salt trees and then quickly mv'ing them where the old ones were.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly SALTDIRS=(salt pillar reactor)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "+++ Installing salt files into new trees"
0000000000000000000000000000000000000000;;	rm -rf /srv/salt-new
0000000000000000000000000000000000000000;;	mkdir -p /srv/salt-new
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This bash voodoo will prepend $SALT_ROOT to the start of each item in the
0000000000000000000000000000000000000000;;	# $SALTDIRS array
0000000000000000000000000000000000000000;;	cp -v -R --preserve=mode "${SALTDIRS[@]/#/${SALT_ROOT}/}" /srv/salt-new
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "+++ Installing salt overlay files"
0000000000000000000000000000000000000000;;	for dir in "${SALTDIRS[@]}"; do
0000000000000000000000000000000000000000;;	  if [[ -d "/srv/salt-overlay/$dir" ]]; then
0000000000000000000000000000000000000000;;	    cp -v -R --preserve=mode "/srv/salt-overlay/$dir" "/srv/salt-new/"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "+++ Install binaries from tar: $1"
0000000000000000000000000000000000000000;;	tar -xz -C "${KUBE_TEMP}" -f "$1"
0000000000000000000000000000000000000000;;	mkdir -p /srv/salt-new/salt/kube-bins
0000000000000000000000000000000000000000;;	mkdir -p /srv/salt-new/salt/kube-docs
0000000000000000000000000000000000000000;;	cp -v "${KUBE_TEMP}/kubernetes/server/bin/"* /srv/salt-new/salt/kube-bins/
0000000000000000000000000000000000000000;;	cp -v "${KUBE_TEMP}/kubernetes/LICENSES" /srv/salt-new/salt/kube-docs/
0000000000000000000000000000000000000000;;	cp -v "${KUBE_TEMP}/kubernetes/kubernetes-src.tar.gz" /srv/salt-new/salt/kube-docs/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	kube_bin_dir="/srv/salt-new/salt/kube-bins";
0000000000000000000000000000000000000000;;	docker_images_sls_file="/srv/salt-new/pillar/docker-images.sls";
0000000000000000000000000000000000000000;;	for docker_file in "${KUBE_DOCKER_WRAPPED_BINARIES[@]}"; do
0000000000000000000000000000000000000000;;	  docker_tag=$(cat ${kube_bin_dir}/${docker_file}.docker_tag);
0000000000000000000000000000000000000000;;	  if [[ ! -z "${KUBE_IMAGE_TAG:-}" ]]; then
0000000000000000000000000000000000000000;;	    docker_tag="${KUBE_IMAGE_TAG}"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  sed -i "s/#${docker_file}_docker_tag_value#/${docker_tag}/" "${docker_images_sls_file}";
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat <<EOF >>"${docker_images_sls_file}"
0000000000000000000000000000000000000000;;	kube_docker_registry: '$(echo ${KUBE_DOCKER_REGISTRY:-gcr.io/google_containers})'
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# TODO(zmerlynn): Forgive me, this is really gross. But in order to
0000000000000000000000000000000000000000;;	# avoid breaking the non-Salt deployments, which already painfully
0000000000000000000000000000000000000000;;	# have to templatize a couple of the add-ons anyways, manually
0000000000000000000000000000000000000000;;	# templatize the addon registry for regional support. When we get
0000000000000000000000000000000000000000;;	# better templating, we can fix this.
0000000000000000000000000000000000000000;;	readonly kube_addon_registry="${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}"
0000000000000000000000000000000000000000;;	if [[ "${kube_addon_registry}" != "gcr.io/google_containers" ]]; then
0000000000000000000000000000000000000000;;	  find /srv/salt-new -name \*.yaml -or -name \*.yaml.in | \
0000000000000000000000000000000000000000;;	    xargs sed -ri "s@(image:\s.*)gcr.io/google_containers@\1${kube_addon_registry}@"
0000000000000000000000000000000000000000;;	  # All the legacy .manifest files with hardcoded gcr.io are JSON.
0000000000000000000000000000000000000000;;	  find /srv/salt-new -name \*.manifest -or -name \*.json | \
0000000000000000000000000000000000000000;;	    xargs sed -ri "s@(image\":\s+\")gcr.io/google_containers@\1${kube_addon_registry}@"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "+++ Swapping in new configs"
0000000000000000000000000000000000000000;;	for dir in "${SALTDIRS[@]}"; do
0000000000000000000000000000000000000000;;	  if [[ -d "/srv/$dir" ]]; then
0000000000000000000000000000000000000000;;	    rm -rf "/srv/$dir"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  mv -v "/srv/salt-new/$dir" "/srv/$dir"
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	rm -rf /srv/salt-new
