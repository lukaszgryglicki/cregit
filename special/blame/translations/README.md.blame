0000000000000000000000000000000000000000;;	# Translations README
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This is a basic sketch of the workflow needed to add translations:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Adding/Updating Translations
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## New languages
0000000000000000000000000000000000000000;;	Create `translations/kubectl/<language>/LC_MESSAGES/k8s.po`. There's
0000000000000000000000000000000000000000;;	no need to update `translations/test/...` which is only used for unit tests.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	There is an example [PR here](https://github.com/kubernetes/kubernetes/pull/40645) which adds support for French.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once you've added a new language, you'll need to register it in
0000000000000000000000000000000000000000;;	`pkg/util/i18n/i18n.go` by adding it to the `knownTranslations` map.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Wrapping strings
0000000000000000000000000000000000000000;;	There is a simple script in `translations/extract.py` that performs
0000000000000000000000000000000000000000;;	simple regular expression based wrapping of strings. It can always
0000000000000000000000000000000000000000;;	use improvements to understand additional strings.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Extracting strings
0000000000000000000000000000000000000000;;	Once the strings are wrapped, you can extract strings from go files using
0000000000000000000000000000000000000000;;	the `go-xgettext` command which can be installed with:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```console
0000000000000000000000000000000000000000;;	go get github.com/gosexy/gettext/go-xgettext
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once that's installed you can run `./hack/update-translations.sh`, which
0000000000000000000000000000000000000000;;	will extract and sort any new strings.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Adding new translations
0000000000000000000000000000000000000000;;	Edit the appropriate `k8s.po` file, `poedit` is a popular open source tool
0000000000000000000000000000000000000000;;	for translations. You can load the `translations/kubectl/template.pot` file
0000000000000000000000000000000000000000;;	to find messages that might be missing.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Once you are done with your `k8s.po` file, generate the corresponding `k8s.mo`
0000000000000000000000000000000000000000;;	file. `poedit` does this automatically on save, but you can also run
0000000000000000000000000000000000000000;;	`./hack/update-translations.sh` to perform the `po` to `mo` translation.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	We use the English translation as the `msgid`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Regenerating the bindata file
0000000000000000000000000000000000000000;;	Run `./hack/generate-bindata.sh`, this will turn the translation files
0000000000000000000000000000000000000000;;	into generated code which will in turn be packaged into the Kubernetes
0000000000000000000000000000000000000000;;	binaries.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Extracting strings
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	There is a script in `translations/extract.py` that knows how to do some
0000000000000000000000000000000000000000;;	simple extraction. It needs a lot of work.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Using translations
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To use translations, you simply need to add:
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import pkg/i18n
0000000000000000000000000000000000000000;;	...
0000000000000000000000000000000000000000;;	// Get a translated string
0000000000000000000000000000000000000000;;	translated := i18n.T("Your message in english here")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get a translated plural string
0000000000000000000000000000000000000000;;	translated := i18n.T("You had % items", items)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Translated error
0000000000000000000000000000000000000000;;	return i18n.Error("Something bad happened")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Translated plural error
0000000000000000000000000000000000000000;;	return i18n.Error("%d bad things happened")
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/translations/README.md?pixel)]()
