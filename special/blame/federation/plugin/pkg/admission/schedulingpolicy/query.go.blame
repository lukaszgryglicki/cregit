0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
3701b3d2d2e3a8cfe32604f66b748361b05d8f13;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package schedulingpolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/webhook"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// policyUndefinedError represents an undefined response from the policy
0000000000000000000000000000000000000000;;	// engine. This typically means the relevant policy has not been loaded into
0000000000000000000000000000000000000000;;	// the engine.
0000000000000000000000000000000000000000;;	type policyUndefinedError struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (policyUndefinedError) Error() string {
0000000000000000000000000000000000000000;;		return "policy decision is undefined"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// policyEngineQuery represents a single query against the policy engine.
0000000000000000000000000000000000000000;;	type policyEngineQuery struct {
0000000000000000000000000000000000000000;;		client       *rest.RESTClient
0000000000000000000000000000000000000000;;		retryBackoff time.Duration
0000000000000000000000000000000000000000;;		obj          runtime.Object
0000000000000000000000000000000000000000;;		gvk          schema.GroupVersionKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newPolicyEngineQuery returns a policyEngineQuery that can be executed.
0000000000000000000000000000000000000000;;	func newPolicyEngineQuery(client *rest.RESTClient, retryBackoff time.Duration, obj runtime.Object, gvk schema.GroupVersionKind) *policyEngineQuery {
0000000000000000000000000000000000000000;;		return &policyEngineQuery{
0000000000000000000000000000000000000000;;			client:       client,
0000000000000000000000000000000000000000;;			retryBackoff: retryBackoff,
0000000000000000000000000000000000000000;;			obj:          obj,
0000000000000000000000000000000000000000;;			gvk:          gvk,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do returns the result of the policy engine query. If the policy decision is
0000000000000000000000000000000000000000;;	// undefined or an unknown error occurs, err is non-nil. Otherwise, result is
0000000000000000000000000000000000000000;;	// non-nil and contains the result of policy evaluation.
0000000000000000000000000000000000000000;;	func (query *policyEngineQuery) Do() (decision *policyDecision, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bs, err := query.encode()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var result rest.Result
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = webhook.WithExponentialBackoff(query.retryBackoff, func() error {
0000000000000000000000000000000000000000;;			result = query.client.Post().
0000000000000000000000000000000000000000;;				Body(bs).
0000000000000000000000000000000000000000;;				Do()
0000000000000000000000000000000000000000;;			return result.Error()
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				return nil, policyUndefinedError{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return decodeResult(result)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// encode returns the encoded version of the query's runtime.Object.
0000000000000000000000000000000000000000;;	func (query *policyEngineQuery) encode() ([]byte, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var info runtime.SerializerInfo
0000000000000000000000000000000000000000;;		infos := api.Codecs.SupportedMediaTypes()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range infos {
0000000000000000000000000000000000000000;;			if infos[i].MediaType == "application/json" {
0000000000000000000000000000000000000000;;				info = infos[i]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if info.Serializer == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("serialization not supported")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		codec := api.Codecs.EncoderForVersion(info.Serializer, query.gvk.GroupVersion())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		if err := codec.Encode(query.obj, &buf); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return buf.Bytes(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// policyDecision represents a response from the policy engine.
0000000000000000000000000000000000000000;;	type policyDecision struct {
0000000000000000000000000000000000000000;;		Errors      []string          `json:"errors,omitempty"`
0000000000000000000000000000000000000000;;		Annotations map[string]string `json:"annotations,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns an error if the policy raised an error.
0000000000000000000000000000000000000000;;	func (d *policyDecision) Error() error {
0000000000000000000000000000000000000000;;		if len(d.Errors) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("reason(s): %v", strings.Join(d.Errors, "; "))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeResult(result rest.Result) (*policyDecision, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bs, err := result.Raw()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer(bs)
0000000000000000000000000000000000000000;;		var decision policyDecision
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(buf).Decode(&decision); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &decision, nil
0000000000000000000000000000000000000000;;	}
