0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e5dc5d4880fcbc7c6e93324e0c54f5fcea7c9bf4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/apis/federation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewCluster() *federation.Cluster {
0000000000000000000000000000000000000000;;		return &federation.Cluster{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "foo",
0000000000000000000000000000000000000000;;				ResourceVersion: "4",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"name": "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;				ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;						ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: federation.ClusterStatus{
0000000000000000000000000000000000000000;;				Conditions: []federation.ClusterCondition{
0000000000000000000000000000000000000000;;					{Type: federation.ClusterReady, Status: api.ConditionTrue},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func invalidNewCluster() *federation.Cluster {
0000000000000000000000000000000000000000;;		// Create a cluster with empty ServerAddressByClientCIDRs (which is a required field).
0000000000000000000000000000000000000000;;		return &federation.Cluster{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "foo2",
0000000000000000000000000000000000000000;;				ResourceVersion: "5",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: federation.ClusterStatus{
0000000000000000000000000000000000000000;;				Conditions: []federation.ClusterCondition{
0000000000000000000000000000000000000000;;					{Type: federation.ClusterReady, Status: api.ConditionFalse},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestClusterStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if Strategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Cluster should not be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if Strategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Cluster should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cluster := validNewCluster()
0000000000000000000000000000000000000000;;		Strategy.PrepareForCreate(ctx, cluster)
0000000000000000000000000000000000000000;;		if len(cluster.Status.Conditions) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Cluster should not allow setting conditions on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := Strategy.Validate(ctx, cluster)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error validating %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidCluster := invalidNewCluster()
0000000000000000000000000000000000000000;;		Strategy.PrepareForUpdate(ctx, invalidCluster, cluster)
0000000000000000000000000000000000000000;;		if reflect.DeepEqual(invalidCluster.Spec, cluster.Spec) ||
0000000000000000000000000000000000000000;;			!reflect.DeepEqual(invalidCluster.Status, cluster.Status) {
0000000000000000000000000000000000000000;;			t.Error("Only spec is expected being changed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs = Strategy.ValidateUpdate(ctx, invalidCluster, cluster)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a validation error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cluster.ResourceVersion != "4" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestClusterStatusStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if StatusStrategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Cluster should not be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if StatusStrategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Cluster should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cluster := validNewCluster()
0000000000000000000000000000000000000000;;		invalidCluster := invalidNewCluster()
0000000000000000000000000000000000000000;;		StatusStrategy.PrepareForUpdate(ctx, cluster, invalidCluster)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(invalidCluster.Spec, cluster.Spec) ||
0000000000000000000000000000000000000000;;			reflect.DeepEqual(invalidCluster.Status, cluster.Status) {
0000000000000000000000000000000000000000;;			t.Logf("== cluster.Spec: %v\n", cluster.Spec)
0000000000000000000000000000000000000000;;			t.Logf("== cluster.Status: %v\n", cluster.Status)
0000000000000000000000000000000000000000;;			t.Logf("== invalidCluster.Spec: %v\n", cluster.Spec)
0000000000000000000000000000000000000000;;			t.Logf("== invalidCluster.Spec: %v\n", cluster.Status)
0000000000000000000000000000000000000000;;			t.Error("Only spec is expected being changed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := Strategy.ValidateUpdate(ctx, invalidCluster, cluster)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a validation error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cluster.ResourceVersion != "4" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMatchCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		testFieldMap := map[bool][]fields.Set{
0000000000000000000000000000000000000000;;			true: {
0000000000000000000000000000000000000000;;				{"metadata.name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			false: {
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for expectedResult, fieldSet := range testFieldMap {
0000000000000000000000000000000000000000;;			for _, field := range fieldSet {
0000000000000000000000000000000000000000;;				m := MatchCluster(labels.Everything(), field.AsSelector())
0000000000000000000000000000000000000000;;				_, matchesSingle := m.MatchesSingle()
0000000000000000000000000000000000000000;;				if e, a := expectedResult, matchesSingle; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%+v: expected %v, got %v", fieldSet, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversions(t *testing.T) {
0000000000000000000000000000000000000000;;		apitesting.TestSelectableFieldLabelConversionsOfKind(t,
0000000000000000000000000000000000000000;;			api.Registry.GroupOrDie(federation.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;			"Cluster",
0000000000000000000000000000000000000000;;			ClusterToSelectableFields(&federation.Cluster{}),
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
