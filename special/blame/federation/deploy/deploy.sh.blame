0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script turns up/turns down Kubernetes clusters and federation
0000000000000000000000000000000000000000;;	# components using the built hyperkube image.
0000000000000000000000000000000000000000;;	# e.g. run as:
0000000000000000000000000000000000000000;;	# FEDERATION_OUTPUT_ROOT="./_output" ./deploy.sh deploy_clusters
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# will deploy the kubernetes clusters using the configuration specified
0000000000000000000000000000000000000000;;	# in $FEDERATION_OUTPUT_ROOT/config.json.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# See config.json.sample for a config.json example.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Provides the $KUBERNETES_PROVIDER variable and detect-project function
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/kube-util.sh"
0000000000000000000000000000000000000000;;	# Provides logging facilities
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/lib/logging.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly KUBE_ANYWHERE_FEDERATION_IMAGE="gcr.io/madhusudancs-containers/kubernetes-anywhere-federation"
0000000000000000000000000000000000000000;;	readonly KUBE_ANYWHERE_FEDERATION_VERSION="v0.9.0"
0000000000000000000000000000000000000000;;	readonly KUBE_ANYWHERE_FEDERATION_CHARTS_IMAGE="gcr.io/madhusudancs-containers/federation-charts"
0000000000000000000000000000000000000000;;	readonly KUBE_ANYWHERE_FEDERATION_CHARTS_VERSION="v0.9.1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS:-${HOME}/.config/gcloud/application_default_credentials.json}"
0000000000000000000000000000000000000000;;	readonly KUBE_CONFIG_DIR="${KUBE_CONFIG_DIR:-${HOME}/.kube}"
0000000000000000000000000000000000000000;;	readonly KUBE_CONFIG="${KUBE_CONFIG:-${HOME}/.kube/config}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function pull_installer() {
0000000000000000000000000000000000000000;;	  kube::log::status "Pulling installer images"
0000000000000000000000000000000000000000;;	  docker pull "${KUBE_ANYWHERE_FEDERATION_IMAGE}:${KUBE_ANYWHERE_FEDERATION_VERSION}"
0000000000000000000000000000000000000000;;	  docker pull "${KUBE_ANYWHERE_FEDERATION_CHARTS_IMAGE}:${KUBE_ANYWHERE_FEDERATION_CHARTS_VERSION}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function ensure_files() {
0000000000000000000000000000000000000000;;	  kube::log::status "Ensure provider is supported"
0000000000000000000000000000000000000000;;	  if [[ "${KUBERNETES_PROVIDER:-}" != "gce" && "${KUBERNETES_PROVIDER:-}" != "gke" ]]; then
0000000000000000000000000000000000000000;;	    echo "Supported providers: \"gce\", \"gke\""
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::log::status "Ensure credential files exist"
0000000000000000000000000000000000000000;;	  if [[ ! -f "${GOOGLE_APPLICATION_CREDENTIALS}" ]]; then
0000000000000000000000000000000000000000;;	    echo "Please ensure Google credentials file \""${GOOGLE_APPLICATION_CREDENTIALS}"\" exists."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ ! -f "${KUBE_CONFIG}" ]]; then
0000000000000000000000000000000000000000;;	    echo "Please ensure kubeconfig file \""${KUBE_CONFIG}"\" exists."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function kube_action() {
0000000000000000000000000000000000000000;;	  : "${FEDERATION_OUTPUT_ROOT:?must be set}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r action="${1:-}"
0000000000000000000000000000000000000000;;	  kube::log::status "Action: ${action} clusters"
0000000000000000000000000000000000000000;;	  docker run \
0000000000000000000000000000000000000000;;	    --user="$(id -u):$(id -g)" \
0000000000000000000000000000000000000000;;	    -m 12G \
0000000000000000000000000000000000000000;;	    -v "${GOOGLE_APPLICATION_CREDENTIALS}:/.config/gcloud/application_default_credentials.json:ro" \
0000000000000000000000000000000000000000;;	    -v "${KUBE_CONFIG_DIR}:/.kube" \
0000000000000000000000000000000000000000;;	    -v "${FEDERATION_OUTPUT_ROOT}:/_output" \
0000000000000000000000000000000000000000;;	    "${KUBE_ANYWHERE_FEDERATION_IMAGE}:${KUBE_ANYWHERE_FEDERATION_VERSION}" \
0000000000000000000000000000000000000000;;	    "${action}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function federation_action() {
0000000000000000000000000000000000000000;;	  : "${FEDERATION_OUTPUT_ROOT:?must be set}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r action="${1:-}"
0000000000000000000000000000000000000000;;	  kube::log::status "Action: ${action} federation components"
0000000000000000000000000000000000000000;;	  # For non-GKE clusters just mounting kubeconfig is sufficient. But we
0000000000000000000000000000000000000000;;	  # need gcloud credentials for GKE clusters, so we pass both kubeconfig
0000000000000000000000000000000000000000;;	  # and gcloud credentials
0000000000000000000000000000000000000000;;	  docker run \
0000000000000000000000000000000000000000;;	    -m 12G \
0000000000000000000000000000000000000000;;	    -v "${GOOGLE_APPLICATION_CREDENTIALS}:/root/.config/gcloud/application_default_credentials.json:ro" \
0000000000000000000000000000000000000000;;	    -v "${KUBE_CONFIG}:/root/.kube/config" \
0000000000000000000000000000000000000000;;	    -v "${FEDERATION_OUTPUT_ROOT}:/_output" \
0000000000000000000000000000000000000000;;	    "${KUBE_ANYWHERE_FEDERATION_CHARTS_IMAGE}:${KUBE_ANYWHERE_FEDERATION_CHARTS_VERSION}" \
0000000000000000000000000000000000000000;;	    "${action}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function redeploy_federation() {
0000000000000000000000000000000000000000;;	  : "${FEDERATION_OUTPUT_ROOT:?must be set}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r action="${1:-}"
0000000000000000000000000000000000000000;;	  kube::log::status "${action} federation components"
0000000000000000000000000000000000000000;;	  docker run \
0000000000000000000000000000000000000000;;	    -m 12G \
0000000000000000000000000000000000000000;;	    -v "${KUBE_CONFIG}:/root/.kube/config:ro" \
0000000000000000000000000000000000000000;;	    -v "${FEDERATION_OUTPUT_ROOT}:/_output" \
0000000000000000000000000000000000000000;;	    "${KUBE_ANYWHERE_FEDERATION_CHARTS_IMAGE}:${KUBE_ANYWHERE_FEDERATION_CHARTS_VERSION}" \
0000000000000000000000000000000000000000;;	    "${action}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly ACTION="${1:-}"
0000000000000000000000000000000000000000;;	case "${ACTION}" in
0000000000000000000000000000000000000000;;	  "")
0000000000000000000000000000000000000000;;	  echo 'Action must be one of [init, deploy_clusters, deploy_federation, \
0000000000000000000000000000000000000000;;	    destroy_federation, destroy_clusters, redeploy_federation], \
0000000000000000000000000000000000000000;;	    got: '"${ACTION}"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "init")
0000000000000000000000000000000000000000;;	  pull_installer
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "deploy_clusters")
0000000000000000000000000000000000000000;;	  ensure_files
0000000000000000000000000000000000000000;;	  kube_action deploy
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "deploy_federation")
0000000000000000000000000000000000000000;;	  ensure_files
0000000000000000000000000000000000000000;;	  federation_action deploy
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "destroy_federation")
0000000000000000000000000000000000000000;;	  federation_action destroy
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "destroy_clusters")
0000000000000000000000000000000000000000;;	  kube_action destroy
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "redeploy_federation")
0000000000000000000000000000000000000000;;	  redeploy_federation
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	esac
