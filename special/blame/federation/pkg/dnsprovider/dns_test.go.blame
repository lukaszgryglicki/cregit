0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2de2b372020fbd5639e86e151450509721d13a64;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dnsprovider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time interface check
0000000000000000000000000000000000000000;;	var _ ResourceRecordSet = record{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type record struct {
0000000000000000000000000000000000000000;;		name    string
0000000000000000000000000000000000000000;;		rrdatas []string
0000000000000000000000000000000000000000;;		ttl     int64
0000000000000000000000000000000000000000;;		type_   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r record) Name() string {
0000000000000000000000000000000000000000;;		return r.name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r record) Ttl() int64 {
0000000000000000000000000000000000000000;;		return r.ttl
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r record) Rrdatas() []string {
0000000000000000000000000000000000000000;;		return r.rrdatas
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r record) Type() rrstype.RrsType {
0000000000000000000000000000000000000000;;		return rrstype.RrsType(r.type_)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const testDNSZone string = "foo.com"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var testData = []struct {
0000000000000000000000000000000000000000;;		inputs         [2]record
0000000000000000000000000000000000000000;;		expectedOutput bool
0000000000000000000000000000000000000000;;	}{
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			[2]record{
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 180, "A"}, // Identical
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 180, "A"}}, true,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			[2]record{
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 180, "A"}, // Identical except Name
0000000000000000000000000000000000000000;;				{"bar", []string{"1.2.3.4", "5,6,7,8"}, 180, "A"}}, false,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			[2]record{
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 180, "A"}, // Identical except Rrdata
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,9"}, 180, "A"}}, false,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			[2]record{
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 180, "A"}, // Identical except Rrdata ordering reversed
0000000000000000000000000000000000000000;;				{"foo", []string{"5,6,7,8", "1.2.3.4"}, 180, "A"}}, false,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			[2]record{
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 180, "A"}, // Identical except TTL
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 150, "A"}}, false,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			[2]record{
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 180, "A"}, // Identical except Type
0000000000000000000000000000000000000000;;				{"foo", []string{"1.2.3.4", "5,6,7,8"}, 180, "CNAME"}}, false,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEquivalent(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, test := range testData {
0000000000000000000000000000000000000000;;			output := ResourceRecordSetsEquivalent(test.inputs[0], test.inputs[1])
0000000000000000000000000000000000000000;;			if output != test.expectedOutput {
0000000000000000000000000000000000000000;;				t.Errorf("Expected equivalence comparison of %q and %q to yield %v, but it vielded %v", test.inputs[0], test.inputs[1], test.expectedOutput, output)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
