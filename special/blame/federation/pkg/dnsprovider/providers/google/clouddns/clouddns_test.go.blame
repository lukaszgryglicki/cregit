0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5e13104b34911753aeb4d03a09f907bc53d40e86;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clouddns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/tests"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestInterface() (dnsprovider.Interface, error) {
0000000000000000000000000000000000000000;;		// Use this to test the real cloud service - insert appropriate project-id.  Default token source will be used.  See
0000000000000000000000000000000000000000;;		// https://github.com/golang/oauth2/blob/master/google/default.go for details.
0000000000000000000000000000000000000000;;		// return dnsprovider.GetDnsProvider(ProviderName, strings.NewReader("\n[global]\nproject-id = federation0-cluster00"))
0000000000000000000000000000000000000000;;		return NewFakeInterface() // Use this to stub out the entire cloud service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var interface_ dnsprovider.Interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMain(m *testing.M) {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		interface_, err = newTestInterface()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Error creating interface: %v", err)
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		os.Exit(m.Run())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// zones returns the zones interface for the configured dns provider account/project,
0000000000000000000000000000000000000000;;	// or fails if it can't be found
0000000000000000000000000000000000000000;;	func zones(t *testing.T) dnsprovider.Zones {
0000000000000000000000000000000000000000;;		zonesInterface, supported := interface_.Zones()
0000000000000000000000000000000000000000;;		if !supported {
0000000000000000000000000000000000000000;;			t.Fatalf("Zones interface not supported by interface %v", interface_)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Logf("Got zones %v\n", zonesInterface)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return zonesInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// firstZone returns the first zone for the configured dns provider account/project,
0000000000000000000000000000000000000000;;	// or fails if it can't be found
0000000000000000000000000000000000000000;;	func firstZone(t *testing.T) dnsprovider.Zone {
0000000000000000000000000000000000000000;;		t.Logf("Getting zones")
0000000000000000000000000000000000000000;;		zones, err := zones(t).List()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to list zones: %v", err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Logf("Got zone list: %v\n", zones)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(zones) < 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("Zone listing returned %d, expected >= %d", len(zones), 1)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Logf("Got at least 1 zone in list:%v\n", zones[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return zones[0]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* rrs returns the ResourceRecordSets interface for a given zone */
0000000000000000000000000000000000000000;;	func rrs(t *testing.T, zone dnsprovider.Zone) (r dnsprovider.ResourceRecordSets) {
0000000000000000000000000000000000000000;;		rrsets, supported := zone.ResourceRecordSets()
0000000000000000000000000000000000000000;;		if !supported {
0000000000000000000000000000000000000000;;			t.Fatalf("ResourceRecordSets interface not supported by zone %v", zone)
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rrsets
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func listRrsOrFail(t *testing.T, rrsets dnsprovider.ResourceRecordSets) []dnsprovider.ResourceRecordSet {
0000000000000000000000000000000000000000;;		rrset, err := rrsets.List()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to list recordsets: %v", err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if len(rrset) < 0 {
0000000000000000000000000000000000000000;;				t.Fatalf("Record set length=%d, expected >=0", len(rrset))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Logf("Got %d recordsets: %v", len(rrset), rrset)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rrset
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getExampleRrs(zone dnsprovider.Zone) dnsprovider.ResourceRecordSet {
0000000000000000000000000000000000000000;;		rrsets, _ := zone.ResourceRecordSets()
0000000000000000000000000000000000000000;;		return rrsets.New("www11."+zone.Name(), []string{"10.10.10.10", "169.20.20.20"}, 180, rrstype.A)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getInvalidRrs(zone dnsprovider.Zone) dnsprovider.ResourceRecordSet {
0000000000000000000000000000000000000000;;		rrsets, _ := zone.ResourceRecordSets()
0000000000000000000000000000000000000000;;		return rrsets.New("www12."+zone.Name(), []string{"rubbish", "rubbish"}, 180, rrstype.A)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addRrsetOrFail(t *testing.T, rrsets dnsprovider.ResourceRecordSets, rrset dnsprovider.ResourceRecordSet) {
0000000000000000000000000000000000000000;;		err := rrsets.StartChangeset().Add(rrset).Apply()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to add recordsets: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestZonesList verifies that listing of zones succeeds */
0000000000000000000000000000000000000000;;	func TestZonesList(t *testing.T) {
0000000000000000000000000000000000000000;;		firstZone(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestZonesID verifies that the id of the zone is returned with the prefix removed */
0000000000000000000000000000000000000000;;	func TestZonesID(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		zoneID := zone.ID()
0000000000000000000000000000000000000000;;		if zoneID != "1" {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected zone id: %q", zoneID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestZoneAddSuccess verifies that addition of a valid managed DNS zone succeeds */
0000000000000000000000000000000000000000;;	func TestZoneAddSuccess(t *testing.T) {
0000000000000000000000000000000000000000;;		testZoneName := "ubernetesv2.test."
0000000000000000000000000000000000000000;;		t.Logf("Getting zones")
0000000000000000000000000000000000000000;;		z := zones(t)
0000000000000000000000000000000000000000;;		t.Logf("Got zones, making new Zone")
0000000000000000000000000000000000000000;;		input, err := z.New(testZoneName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to allocate new zone object %s: %v", testZoneName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone, err := z.Add(input)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create new managed DNS zone %s: %v", testZoneName, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func(zone dnsprovider.Zone) {
0000000000000000000000000000000000000000;;			if zone != nil {
0000000000000000000000000000000000000000;;				if err := z.Remove(zone); err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Failed to delete zone %v: %v", zone, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}(zone)
0000000000000000000000000000000000000000;;		t.Logf("Successfully added managed DNS zone: %v", zone)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsList verifies that listing of RRS's succeeds */
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsList(t *testing.T) {
0000000000000000000000000000000000000000;;		listRrsOrFail(t, rrs(t, firstZone(t)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsAddSuccess verifies that addition of a valid RRS succeeds */
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsAddSuccess(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;		sets := rrs(t, zone)
0000000000000000000000000000000000000000;;		set := getExampleRrs(zone)
0000000000000000000000000000000000000000;;		addRrsetOrFail(t, sets, set)
0000000000000000000000000000000000000000;;		defer sets.StartChangeset().Remove(set).Apply()
0000000000000000000000000000000000000000;;		t.Logf("Successfully added resource record set: %v", set)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsAdditionVisible verifies that added RRS is visible after addition */
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsAdditionVisible(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;		sets := rrs(t, zone)
0000000000000000000000000000000000000000;;		rrset := getExampleRrs(zone)
0000000000000000000000000000000000000000;;		addRrsetOrFail(t, sets, rrset)
0000000000000000000000000000000000000000;;		defer sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;		t.Logf("Successfully added resource record set: %v", rrset)
0000000000000000000000000000000000000000;;		found := false
0000000000000000000000000000000000000000;;		for _, record := range listRrsOrFail(t, sets) {
0000000000000000000000000000000000000000;;			if record.Name() == rrset.Name() {
0000000000000000000000000000000000000000;;				found = true
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to find added resource record set %s", rrset.Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsAddDuplicateFail verifies that addition of a duplicate RRS fails */
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsAddDuplicateFail(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;		sets := rrs(t, zone)
0000000000000000000000000000000000000000;;		rrset := getExampleRrs(zone)
0000000000000000000000000000000000000000;;		addRrsetOrFail(t, sets, rrset)
0000000000000000000000000000000000000000;;		defer sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;		t.Logf("Successfully added resource record set: %v", rrset)
0000000000000000000000000000000000000000;;		// Try to add it again, and verify that the call fails.
0000000000000000000000000000000000000000;;		err := sets.StartChangeset().Add(rrset).Apply()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			defer sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;			t.Errorf("Should have failed to add duplicate resource record %v, but succeeded instead.", rrset)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Logf("Correctly failed to add duplicate resource record %v: %v", rrset, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsRemove verifies that the removal of an existing RRS succeeds */
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsRemove(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;		sets := rrs(t, zone)
0000000000000000000000000000000000000000;;		rrset := getExampleRrs(zone)
0000000000000000000000000000000000000000;;		addRrsetOrFail(t, sets, rrset)
0000000000000000000000000000000000000000;;		err := sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Try again to clean up.
0000000000000000000000000000000000000000;;			defer sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;			t.Errorf("Failed to remove resource record set %v after adding: %v", rrset, err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Logf("Successfully removed resource set %v after adding", rrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsRemoveGone verifies that a removed RRS no longer exists */
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsRemoveGone(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;		sets := rrs(t, zone)
0000000000000000000000000000000000000000;;		rrset := getExampleRrs(zone)
0000000000000000000000000000000000000000;;		addRrsetOrFail(t, sets, rrset)
0000000000000000000000000000000000000000;;		err := sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Try again to clean up.
0000000000000000000000000000000000000000;;			defer sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;			t.Errorf("Failed to remove resource record set %v after adding: %v", rrset, err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Logf("Successfully removed resource set %v after adding", rrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Check that it's gone
0000000000000000000000000000000000000000;;		list := listRrsOrFail(t, sets)
0000000000000000000000000000000000000000;;		found := false
0000000000000000000000000000000000000000;;		for _, set := range list {
0000000000000000000000000000000000000000;;			if set.Name() == rrset.Name() {
0000000000000000000000000000000000000000;;				found = true
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			t.Errorf("Deleted resource record set %v is still present", rrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsReplace verifies that replacing an RRS works */
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsReplace(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;		tests.CommonTestResourceRecordSetsReplace(t, zone)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsReplaceAll verifies that we can remove an RRS and create one with a different name*/
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsReplaceAll(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;		tests.CommonTestResourceRecordSetsReplaceAll(t, zone)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* TestResourceRecordSetsDifferentType verifies that we can add records of the same name but different types */
0000000000000000000000000000000000000000;;	func TestResourceRecordSetsDifferentTypes(t *testing.T) {
0000000000000000000000000000000000000000;;		zone := firstZone(t)
0000000000000000000000000000000000000000;;		tests.CommonTestResourceRecordSetsDifferentTypes(t, zone)
0000000000000000000000000000000000000000;;	}
