0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5e13104b34911753aeb4d03a09f907bc53d40e86;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package stubs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/providers/google/clouddns/internal/interfaces"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ interfaces.ResourceRecordSetsService = &ResourceRecordSetsService{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordSetsService struct {
0000000000000000000000000000000000000000;;		Service  *Service
0000000000000000000000000000000000000000;;		ListCall interfaces.ResourceRecordSetsListCall // Use to override response if required for testing
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ResourceRecordSetsService) managedZone(project, managedZone string) (*ManagedZone, error) {
0000000000000000000000000000000000000000;;		p := s.Service.ManagedZones_.Impl[project]
0000000000000000000000000000000000000000;;		if p == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Project not found: %s", project)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		z := s.Service.ManagedZones_.Impl[project][managedZone]
0000000000000000000000000000000000000000;;		if z == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Zone %s not found in project %s", managedZone, project)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return z.(*ManagedZone), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ResourceRecordSetsService) List(project string, managedZone string) interfaces.ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		if s.ListCall != nil {
0000000000000000000000000000000000000000;;			return s.ListCall
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone, err := s.managedZone(project, managedZone)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &ResourceRecordSetsListCall{Err_: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		response := &ResourceRecordSetsListResponse{}
0000000000000000000000000000000000000000;;		for _, set := range zone.Rrsets {
0000000000000000000000000000000000000000;;			response.impl = append(response.impl, set)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ResourceRecordSetsListCall{Response_: response}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ResourceRecordSetsService) Get(project, managedZone, name string) interfaces.ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		if s.ListCall != nil {
0000000000000000000000000000000000000000;;			return s.ListCall
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone, err := s.managedZone(project, managedZone)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &ResourceRecordSetsListCall{Err_: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		response := &ResourceRecordSetsListResponse{}
0000000000000000000000000000000000000000;;		for _, set := range zone.Rrsets {
0000000000000000000000000000000000000000;;			if set.Name_ == name {
0000000000000000000000000000000000000000;;				response.impl = append(response.impl, set)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ResourceRecordSetsListCall{Response_: response}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (service ResourceRecordSetsService) NewResourceRecordSet(name string, rrdatas []string, ttl int64, type_ rrstype.RrsType) interfaces.ResourceRecordSet {
0000000000000000000000000000000000000000;;		rrset := ResourceRecordSet{Name_: name, Rrdatas_: rrdatas, Ttl_: ttl, Type_: string(type_)}
0000000000000000000000000000000000000000;;		return rrset
0000000000000000000000000000000000000000;;	}
