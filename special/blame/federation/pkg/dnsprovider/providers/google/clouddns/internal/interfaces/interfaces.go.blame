0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5e13104b34911753aeb4d03a09f907bc53d40e86;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package interfaces
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interfaces to directly mirror the Google Cloud DNS API structures.
0000000000000000000000000000000000000000;;	// See https://godoc.org/google.golang.org/api/dns/v1 for details
0000000000000000000000000000000000000000;;	// This facilitates stubbing out Google Cloud DNS for unit testing.
0000000000000000000000000000000000000000;;	// Only the parts of the API that we use are included.
0000000000000000000000000000000000000000;;	// Others can be added as needed.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		Change interface {
0000000000000000000000000000000000000000;;			Additions() []ResourceRecordSet
0000000000000000000000000000000000000000;;			Deletions() []ResourceRecordSet
0000000000000000000000000000000000000000;;			// Id() string  // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Kind() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// StartTime() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Status() string // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangesCreateCall interface {
0000000000000000000000000000000000000000;;			// Context(ctx context.Context) *ChangesCreateCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			Do(opts ...googleapi.CallOption) (Change, error)
0000000000000000000000000000000000000000;;			// Fields(s ...googleapi.Field) *ChangesCreateCall // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangesGetCall interface {
0000000000000000000000000000000000000000;;			// Context(ctx context.Context) *ChangesGetCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			Do(opts ...googleapi.CallOption) (*Change, error)
0000000000000000000000000000000000000000;;			// Fields(s ...googleapi.Field) *ChangesGetCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// IfNoneMatch(entityTag string) *ChangesGetCall // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangesListCall interface {
0000000000000000000000000000000000000000;;			// Context(ctx context.Context) *ChangesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			Do(opts ...googleapi.CallOption) (*ChangesListResponse, error)
0000000000000000000000000000000000000000;;			// Fields(s ...googleapi.Field) *ChangesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// IfNoneMatch(entityTag string) *ChangesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// MaxResults(maxResults int64) *ChangesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// PageToken(pageToken string) *ChangesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Pages(ctx context.Context, f func(*ChangesListResponse) error) error // TODO: Add as needed
0000000000000000000000000000000000000000;;			// SortBy(sortBy string) *ChangesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// SortOrder(sortOrder string) *ChangesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangesListResponse interface {
0000000000000000000000000000000000000000;;			// Changes() []*Change // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Kind() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// NextPageToken() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ServerResponse() googleapi.ServerResponse // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ForceSendFields() []string // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChangesService interface {
0000000000000000000000000000000000000000;;			// Create(project string, managedZone string, change *Change) *ChangesCreateCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			Create(project string, managedZone string, change Change) ChangesCreateCall
0000000000000000000000000000000000000000;;			NewChange(additions, deletions []ResourceRecordSet) Change
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Get(project string, managedZone string, changeId string) *ChangesGetCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// List(project string, managedZone string) *ChangesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedZone interface {
0000000000000000000000000000000000000000;;			// CreationTime() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Description() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			DnsName() string
0000000000000000000000000000000000000000;;			Id() uint64
0000000000000000000000000000000000000000;;			// Kind() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			Name() string
0000000000000000000000000000000000000000;;			// NameServerSet() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// NameServers() []string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ServerResponse() googleapi.ServerResponse // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ForceSendFields() []string // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedZonesCreateCall interface {
0000000000000000000000000000000000000000;;			// Context(ctx context.Context) *ManagedZonesCreateCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			Do(opts ...googleapi.CallOption) (ManagedZone, error)
0000000000000000000000000000000000000000;;			// Fields(s ...googleapi.Field) *ManagedZonesCreateCall // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedZonesDeleteCall interface {
0000000000000000000000000000000000000000;;			// Context(ctx context.Context) *ManagedZonesDeleteCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			Do(opts ...googleapi.CallOption) error
0000000000000000000000000000000000000000;;			// Fields(s ...googleapi.Field) *ManagedZonesDeleteCall // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedZonesGetCall interface {
0000000000000000000000000000000000000000;;			// Context(ctx context.Context) *ManagedZonesGetCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			Do(opts ...googleapi.CallOption) (ManagedZone, error)
0000000000000000000000000000000000000000;;			// Fields(s ...googleapi.Field) *ManagedZonesGetCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// IfNoneMatch(entityTag string) *ManagedZonesGetCall // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedZonesListCall interface {
0000000000000000000000000000000000000000;;			// Context(ctx context.Context) *ManagedZonesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			DnsName(dnsName string) ManagedZonesListCall
0000000000000000000000000000000000000000;;			Do(opts ...googleapi.CallOption) (ManagedZonesListResponse, error)
0000000000000000000000000000000000000000;;			// Fields(s ...googleapi.Field) *ManagedZonesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// IfNoneMatch(entityTag string) *ManagedZonesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// MaxResults(maxResults int64) *ManagedZonesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// PageToken(pageToken string) *ManagedZonesListCall // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Pages(ctx context.Context, f func(*ManagedZonesListResponse) error) error // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedZonesListResponse interface {
0000000000000000000000000000000000000000;;			// Kind() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ManagedZones() []*ManagedZone // TODO: Add as needed
0000000000000000000000000000000000000000;;			ManagedZones() []ManagedZone
0000000000000000000000000000000000000000;;			// NextPageToken string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ServerResponse() googleapi.ServerResponse // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ForceSendFields() []string // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedZonesService interface {
0000000000000000000000000000000000000000;;			// NewManagedZonesService(s *Service) *ManagedZonesService // TODO: Add to service if needed
0000000000000000000000000000000000000000;;			Create(project string, managedZone ManagedZone) ManagedZonesCreateCall
0000000000000000000000000000000000000000;;			Delete(project string, managedZone string) ManagedZonesDeleteCall
0000000000000000000000000000000000000000;;			Get(project string, managedZone string) ManagedZonesGetCall
0000000000000000000000000000000000000000;;			List(project string) ManagedZonesListCall
0000000000000000000000000000000000000000;;			NewManagedZone(dnsName string) ManagedZone
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Project interface {
0000000000000000000000000000000000000000;;			// Id()  string  // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Kind() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Number() uint64 // TODO: Add as needed
0000000000000000000000000000000000000000;;			// Quota() *Quota // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ServerResponse()  googleapi.ServerResponse // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ForceSendFields() []string // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProjectsGetCall interface {
0000000000000000000000000000000000000000;;			// TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProjectsService interface {
0000000000000000000000000000000000000000;;			// TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Quota interface {
0000000000000000000000000000000000000000;;			// TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceRecordSet interface {
0000000000000000000000000000000000000000;;			// Kind() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			Name() string
0000000000000000000000000000000000000000;;			Rrdatas() []string
0000000000000000000000000000000000000000;;			Ttl() int64
0000000000000000000000000000000000000000;;			Type() string
0000000000000000000000000000000000000000;;			// ForceSendFields []string  // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceRecordSetsListCall interface {
0000000000000000000000000000000000000000;;			// Context(ctx context.Context) *ResourceRecordSetsListCall  // TODO: Add as needed
0000000000000000000000000000000000000000;;			Do(opts ...googleapi.CallOption) (ResourceRecordSetsListResponse, error)
0000000000000000000000000000000000000000;;			Pages(ctx context.Context, f func(ResourceRecordSetsListResponse) error) error
0000000000000000000000000000000000000000;;			// Fields(s ...googleapi.Field) *ResourceRecordSetsListCall  // TODO: Add as needed
0000000000000000000000000000000000000000;;			// IfNoneMatch(entityTag string) *ResourceRecordSetsListCall  // TODO: Add as needed
0000000000000000000000000000000000000000;;			// MaxResults(maxResults int64) *ResourceRecordSetsListCall  // TODO: Add as needed
0000000000000000000000000000000000000000;;			Name(name string) ResourceRecordSetsListCall
0000000000000000000000000000000000000000;;			// PageToken(pageToken string) *ResourceRecordSetsListCall  // TODO: Add as needed
0000000000000000000000000000000000000000;;			Type(type_ string) ResourceRecordSetsListCall
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceRecordSetsListResponse interface {
0000000000000000000000000000000000000000;;			// Kind() string  // TODO: Add as needed
0000000000000000000000000000000000000000;;			// NextPageToken() string  // TODO: Add as needed
0000000000000000000000000000000000000000;;			Rrsets() []ResourceRecordSet
0000000000000000000000000000000000000000;;			// ServerResponse() googleapi.ServerResponse  // TODO: Add as needed
0000000000000000000000000000000000000000;;			// ForceSendFields() []string  // TODO: Add as needed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceRecordSetsService interface {
0000000000000000000000000000000000000000;;			List(project string, managedZone string) ResourceRecordSetsListCall
0000000000000000000000000000000000000000;;			// Get returns a list of resources records with the matching name
0000000000000000000000000000000000000000;;			Get(project, managedZone, name string) ResourceRecordSetsListCall
0000000000000000000000000000000000000000;;			// NewResourceRecordSetsService(s *Service) *ResourceRecordSetsService // TODO: add to service as needed
0000000000000000000000000000000000000000;;			NewResourceRecordSet(name string, rrdatas []string, ttl int64, type_ rrstype.RrsType) ResourceRecordSet
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Service interface {
0000000000000000000000000000000000000000;;			// BasePath() string  // TODO: Add as needed
0000000000000000000000000000000000000000;;			// UserAgent() string // TODO: Add as needed
0000000000000000000000000000000000000000;;			Changes() ChangesService
0000000000000000000000000000000000000000;;			ManagedZones() ManagedZonesService
0000000000000000000000000000000000000000;;			Projects() ProjectsService
0000000000000000000000000000000000000000;;			ResourceRecordSets() ResourceRecordSetsService
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// New(client *http.Client) (*Service, error)  // TODO: Add as needed
0000000000000000000000000000000000000000;;	)
