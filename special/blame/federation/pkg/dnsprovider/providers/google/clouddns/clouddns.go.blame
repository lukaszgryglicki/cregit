0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5e13104b34911753aeb4d03a09f907bc53d40e86;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// clouddns is the implementation of pkg/dnsprovider interface for Google Cloud DNS
0000000000000000000000000000000000000000;;	package clouddns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"cloud.google.com/go/compute/metadata"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2/google"
0000000000000000000000000000000000000000;;		compute "google.golang.org/api/compute/v1"
0000000000000000000000000000000000000000;;		dns "google.golang.org/api/dns/v1"
0000000000000000000000000000000000000000;;		gcfg "gopkg.in/gcfg.v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/providers/google/clouddns/internal"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/providers/google/clouddns/internal/stubs"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider/providers/gce"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ProviderName = "google-clouddns"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		dnsprovider.RegisterDnsProvider(ProviderName, func(config io.Reader) (dnsprovider.Interface, error) {
0000000000000000000000000000000000000000;;			return newCloudDns(config)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		Global struct {
0000000000000000000000000000000000000000;;			TokenURL  string `gcfg:"token-url"`
0000000000000000000000000000000000000000;;			TokenBody string `gcfg:"token-body"`
0000000000000000000000000000000000000000;;			ProjectID string `gcfg:"project-id"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newCloudDns creates a new instance of a Google Cloud DNS Interface.
0000000000000000000000000000000000000000;;	func newCloudDns(config io.Reader) (*Interface, error) {
0000000000000000000000000000000000000000;;		projectID, _ := metadata.ProjectID() // On error we get an empty string, which is fine for now.
0000000000000000000000000000000000000000;;		var tokenSource oauth2.TokenSource
0000000000000000000000000000000000000000;;		// Possibly override defaults with config below
0000000000000000000000000000000000000000;;		if config != nil {
0000000000000000000000000000000000000000;;			var cfg Config
0000000000000000000000000000000000000000;;			if err := gcfg.ReadInto(&cfg, config); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Couldn't read config: %v", err)
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			glog.Infof("Using Google Cloud DNS provider config %+v", cfg)
0000000000000000000000000000000000000000;;			if cfg.Global.ProjectID != "" {
0000000000000000000000000000000000000000;;				projectID = cfg.Global.ProjectID
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if cfg.Global.TokenURL != "" {
0000000000000000000000000000000000000000;;				tokenSource = gce.NewAltTokenSource(cfg.Global.TokenURL, cfg.Global.TokenBody)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return CreateInterface(projectID, tokenSource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateInterface creates a clouddns.Interface object using the specified parameters.
0000000000000000000000000000000000000000;;	// If no tokenSource is specified, uses oauth2.DefaultTokenSource.
0000000000000000000000000000000000000000;;	func CreateInterface(projectID string, tokenSource oauth2.TokenSource) (*Interface, error) {
0000000000000000000000000000000000000000;;		if tokenSource == nil {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			tokenSource, err = google.DefaultTokenSource(
0000000000000000000000000000000000000000;;				oauth2.NoContext,
0000000000000000000000000000000000000000;;				compute.CloudPlatformScope,
0000000000000000000000000000000000000000;;				compute.ComputeScope)
0000000000000000000000000000000000000000;;			glog.Infof("Using DefaultTokenSource %#v", tokenSource)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			glog.Infof("Using existing Token Source %#v", tokenSource)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oauthClient := oauth2.NewClient(oauth2.NoContext, tokenSource)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		service, err := dns.New(oauthClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to get Cloud DNS client: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.Infof("Successfully got DNS service: %v\n", service)
0000000000000000000000000000000000000000;;		return newInterfaceWithStub(projectID, internal.NewService(service)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFakeInterface returns a fake clouddns interface, useful for unit testing purposes.
0000000000000000000000000000000000000000;;	func NewFakeInterface() (dnsprovider.Interface, error) {
0000000000000000000000000000000000000000;;		service := stubs.NewService()
0000000000000000000000000000000000000000;;		interface_ := newInterfaceWithStub("", service)
0000000000000000000000000000000000000000;;		zones := service.ManagedZones_
0000000000000000000000000000000000000000;;		// Add a fake zone to test against.
0000000000000000000000000000000000000000;;		zone := &stubs.ManagedZone{Service: zones, Name_: "example.com", Rrsets: []stubs.ResourceRecordSet{}, Id_: 1}
0000000000000000000000000000000000000000;;		call := zones.Create(interface_.project(), zone)
0000000000000000000000000000000000000000;;		if _, err := call.Do(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return interface_, nil
0000000000000000000000000000000000000000;;	}
