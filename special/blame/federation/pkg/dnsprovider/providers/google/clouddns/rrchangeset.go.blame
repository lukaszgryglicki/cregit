0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
55375a619600b5ef1a29b7ba7e0a0b6efd7edc80;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clouddns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/providers/google/clouddns/internal/interfaces"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.ResourceRecordChangeset = &ResourceRecordChangeset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordChangeset struct {
0000000000000000000000000000000000000000;;		rrsets *ResourceRecordSets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		additions []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;		removals  []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;		upserts   []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Add(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.additions = append(c.additions, rrset)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Remove(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.removals = append(c.removals, rrset)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Upsert(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.upserts = append(c.upserts, rrset)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Apply() error {
0000000000000000000000000000000000000000;;		rrsets := c.rrsets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		service := rrsets.zone.zones.interface_.service.Changes()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var additions []interfaces.ResourceRecordSet
0000000000000000000000000000000000000000;;		for _, r := range c.additions {
0000000000000000000000000000000000000000;;			additions = append(additions, r.(ResourceRecordSet).impl)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var deletions []interfaces.ResourceRecordSet
0000000000000000000000000000000000000000;;		for _, r := range c.removals {
0000000000000000000000000000000000000000;;			deletions = append(deletions, r.(ResourceRecordSet).impl)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(c.upserts) != 0 {
0000000000000000000000000000000000000000;;			// TODO: We could maybe tweak this to fetch just the records we care about
0000000000000000000000000000000000000000;;			// although not clear when this would be a win.  N=1 obviously so though...
0000000000000000000000000000000000000000;;			before, err := c.rrsets.List()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("error fetching recordset images for upsert operation: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			upsertMap := make(map[string]dnsprovider.ResourceRecordSet)
0000000000000000000000000000000000000000;;			for _, upsert := range c.upserts {
0000000000000000000000000000000000000000;;				key := string(upsert.Type()) + "::" + upsert.Name()
0000000000000000000000000000000000000000;;				upsertMap[key] = upsert
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, b := range before {
0000000000000000000000000000000000000000;;				key := string(b.Type()) + "::" + b.Name()
0000000000000000000000000000000000000000;;				upsert := upsertMap[key]
0000000000000000000000000000000000000000;;				if upsert == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				deletions = append(deletions, b.(ResourceRecordSet).impl)
0000000000000000000000000000000000000000;;				additions = append(additions, upsert.(ResourceRecordSet).impl)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Mark as seen
0000000000000000000000000000000000000000;;				delete(upsertMap, key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Anything left in the map must be an addition
0000000000000000000000000000000000000000;;			for _, upsert := range upsertMap {
0000000000000000000000000000000000000000;;				additions = append(additions, upsert.(ResourceRecordSet).impl)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		change := service.NewChange(additions, deletions)
0000000000000000000000000000000000000000;;		newChange, err := service.Create(rrsets.project(), rrsets.zone.impl.Name(), change).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newAdditions := newChange.Additions()
0000000000000000000000000000000000000000;;		if len(newAdditions) != len(additions) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Internal error when adding resource record set.  Call succeeded but number of records returned is incorrect.  Records sent=%d, records returned=%d, additions:%v", len(additions), len(newAdditions), c.additions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newDeletions := newChange.Deletions()
0000000000000000000000000000000000000000;;		if len(newDeletions) != len(deletions) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Internal error when deleting resource record set.  Call succeeded but number of records returned is incorrect.  Records sent=%d, records returned=%d, deletions:%v", len(deletions), len(newDeletions), c.removals)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) IsEmpty() bool {
0000000000000000000000000000000000000000;;		return len(c.additions) == 0 && len(c.removals) == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceRecordSets returns the parent ResourceRecordSets
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) ResourceRecordSets() dnsprovider.ResourceRecordSets {
0000000000000000000000000000000000000000;;		return c.rrsets
0000000000000000000000000000000000000000;;	}
