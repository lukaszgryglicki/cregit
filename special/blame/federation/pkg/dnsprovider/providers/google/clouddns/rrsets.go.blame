0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5e13104b34911753aeb4d03a09f907bc53d40e86;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clouddns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/providers/google/clouddns/internal/interfaces"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.ResourceRecordSets = ResourceRecordSets{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordSets struct {
0000000000000000000000000000000000000000;;		zone *Zone
0000000000000000000000000000000000000000;;		impl interfaces.ResourceRecordSetsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List returns a list of resource records in the given project and
0000000000000000000000000000000000000000;;	// managed zone.
0000000000000000000000000000000000000000;;	// !!CAUTION!! Your memory might explode if you have a huge number of
0000000000000000000000000000000000000000;;	// records in your managed zone.
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) List() ([]dnsprovider.ResourceRecordSet, error) {
0000000000000000000000000000000000000000;;		var list []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx := context.Background()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		call := rrsets.impl.List(rrsets.project(), rrsets.zone.impl.Name())
0000000000000000000000000000000000000000;;		err := call.Pages(ctx, func(page interfaces.ResourceRecordSetsListResponse) error {
0000000000000000000000000000000000000000;;			for _, rrset := range page.Rrsets() {
0000000000000000000000000000000000000000;;				list = append(list, ResourceRecordSet{rrset, &rrsets})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return list, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) Get(name string) ([]dnsprovider.ResourceRecordSet, error) {
0000000000000000000000000000000000000000;;		var list []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx := context.Background()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		call := rrsets.impl.Get(rrsets.project(), rrsets.zone.impl.Name(), name)
0000000000000000000000000000000000000000;;		err := call.Pages(ctx, func(page interfaces.ResourceRecordSetsListResponse) error {
0000000000000000000000000000000000000000;;			for _, rrset := range page.Rrsets() {
0000000000000000000000000000000000000000;;				list = append(list, ResourceRecordSet{rrset, &rrsets})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return list, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r ResourceRecordSets) StartChangeset() dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		return &ResourceRecordChangeset{
0000000000000000000000000000000000000000;;			rrsets: &r,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r ResourceRecordSets) New(name string, rrdatas []string, ttl int64, rrstype rrstype.RrsType) dnsprovider.ResourceRecordSet {
0000000000000000000000000000000000000000;;		return ResourceRecordSet{r.impl.NewResourceRecordSet(name, rrdatas, ttl, rrstype), &r}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) project() string {
0000000000000000000000000000000000000000;;		return rrsets.zone.project()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zone returns the parent zone
0000000000000000000000000000000000000000;;	func (rrset ResourceRecordSets) Zone() dnsprovider.Zone {
0000000000000000000000000000000000000000;;		return rrset.zone
0000000000000000000000000000000000000000;;	}
