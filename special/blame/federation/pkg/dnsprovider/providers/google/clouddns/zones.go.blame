0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5e13104b34911753aeb4d03a09f907bc53d40e86;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clouddns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/providers/google/clouddns/internal/interfaces"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.Zones = Zones{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Zones struct {
0000000000000000000000000000000000000000;;		impl       interfaces.ManagedZonesService
0000000000000000000000000000000000000000;;		interface_ *Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zones Zones) List() ([]dnsprovider.Zone, error) {
0000000000000000000000000000000000000000;;		response, err := zones.impl.List(zones.project()).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		managedZones := response.ManagedZones()
0000000000000000000000000000000000000000;;		zoneList := make([]dnsprovider.Zone, len(managedZones))
0000000000000000000000000000000000000000;;		for i, zone := range managedZones {
0000000000000000000000000000000000000000;;			zoneList[i] = &Zone{zone, &zones}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return zoneList, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zones Zones) Add(zone dnsprovider.Zone) (dnsprovider.Zone, error) {
0000000000000000000000000000000000000000;;		managedZone := zones.impl.NewManagedZone(zone.Name())
0000000000000000000000000000000000000000;;		response, err := zones.impl.Create(zones.project(), managedZone).Do()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &Zone{response, &zones}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zones Zones) Remove(zone dnsprovider.Zone) error {
0000000000000000000000000000000000000000;;		if err := zones.impl.Delete(zones.project(), zone.(*Zone).impl.Name()).Do(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zones Zones) New(name string) (dnsprovider.Zone, error) {
0000000000000000000000000000000000000000;;		managedZone := zones.impl.NewManagedZone(name)
0000000000000000000000000000000000000000;;		return &Zone{managedZone, &zones}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zones Zones) project() string {
0000000000000000000000000000000000000000;;		return zones.interface_.project()
0000000000000000000000000000000000000000;;	}
