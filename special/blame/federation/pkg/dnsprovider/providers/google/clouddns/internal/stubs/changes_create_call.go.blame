0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5e13104b34911753aeb4d03a09f907bc53d40e86;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package stubs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/providers/google/clouddns/internal/interfaces"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ interfaces.ChangesCreateCall = ChangesCreateCall{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangesCreateCall struct {
0000000000000000000000000000000000000000;;		Service *ChangesService
0000000000000000000000000000000000000000;;		Project string
0000000000000000000000000000000000000000;;		Zone    string
0000000000000000000000000000000000000000;;		Change  interfaces.Change
0000000000000000000000000000000000000000;;		Error   error // Use this to over-ride response if necessary
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func hashKey(set interfaces.ResourceRecordSet) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s-%d-%s", set.Name(), set.Ttl(), string(set.Type()))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ChangesCreateCall) Do(opts ...googleapi.CallOption) (interfaces.Change, error) {
0000000000000000000000000000000000000000;;		if c.Error != nil {
0000000000000000000000000000000000000000;;			return nil, c.Error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone := (c.Service.Service.ManagedZones_.Impl[c.Project][c.Zone]).(*ManagedZone)
0000000000000000000000000000000000000000;;		rrsets := map[string]ResourceRecordSet{} // compute the new state
0000000000000000000000000000000000000000;;		for _, set := range zone.Rrsets {
0000000000000000000000000000000000000000;;			rrsets[hashKey(set)] = set
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, del := range c.Change.Deletions() {
0000000000000000000000000000000000000000;;			if _, found := rrsets[hashKey(del)]; !found {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("Attempt to delete non-existent rrset %v", del)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delete(rrsets, hashKey(del))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, add := range c.Change.Additions() {
0000000000000000000000000000000000000000;;			if _, found := rrsets[hashKey(add)]; found {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("Attempt to insert duplicate rrset %v", add)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rrsets[hashKey(add)] = add.(ResourceRecordSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone.Rrsets = []ResourceRecordSet{}
0000000000000000000000000000000000000000;;		for _, rrset := range rrsets {
0000000000000000000000000000000000000000;;			zone.Rrsets = append(zone.Rrsets, rrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.Change, nil
0000000000000000000000000000000000000000;;	}
