0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1db875b9bbbbff676f771e0e13033de40acecb41;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package coredns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"hash/fnv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcdc "github.com/coreos/etcd/client"
0000000000000000000000000000000000000000;;		dnsmsg "github.com/miekg/coredns/middleware/etcd/msg"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.ResourceRecordChangeset = &ResourceRecordChangeset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeSetType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ADDITION = ChangeSetType("ADDITION")
0000000000000000000000000000000000000000;;		DELETION = ChangeSetType("DELETION")
0000000000000000000000000000000000000000;;		UPSERT   = ChangeSetType("UPSERT")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeSet struct {
0000000000000000000000000000000000000000;;		cstype ChangeSetType
0000000000000000000000000000000000000000;;		rrset  dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordChangeset struct {
0000000000000000000000000000000000000000;;		zone   *Zone
0000000000000000000000000000000000000000;;		rrsets *ResourceRecordSets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		changeset []ChangeSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Add(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.changeset = append(c.changeset, ChangeSet{cstype: ADDITION, rrset: rrset})
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Remove(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.changeset = append(c.changeset, ChangeSet{cstype: DELETION, rrset: rrset})
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) IsEmpty() bool {
0000000000000000000000000000000000000000;;		return len(c.changeset) == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Upsert(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.changeset = append(c.changeset, ChangeSet{cstype: UPSERT, rrset: rrset})
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Apply() error {
0000000000000000000000000000000000000000;;		ctx := context.Background()
0000000000000000000000000000000000000000;;		etcdPathPrefix := c.zone.zones.intf.etcdPathPrefix
0000000000000000000000000000000000000000;;		getOpts := &etcdc.GetOptions{}
0000000000000000000000000000000000000000;;		setOpts := &etcdc.SetOptions{}
0000000000000000000000000000000000000000;;		deleteOpts := &etcdc.DeleteOptions{
0000000000000000000000000000000000000000;;			Recursive: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, changeset := range c.changeset {
0000000000000000000000000000000000000000;;			switch changeset.cstype {
0000000000000000000000000000000000000000;;			case ADDITION, UPSERT:
0000000000000000000000000000000000000000;;				checkNotExists := changeset.cstype == ADDITION
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// TODO: I think the semantics of the other providers are different; they operate at the record level, not the individual rrdata level
0000000000000000000000000000000000000000;;				// In other words: we should insert/replace all the records for the key
0000000000000000000000000000000000000000;;				for _, rrdata := range changeset.rrset.Rrdatas() {
0000000000000000000000000000000000000000;;					b, err := json.Marshal(&dnsmsg.Service{Host: rrdata, TTL: uint32(changeset.rrset.Ttl()), Group: changeset.rrset.Name()})
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					recordValue := string(b)
0000000000000000000000000000000000000000;;					recordLabel := getHash(rrdata)
0000000000000000000000000000000000000000;;					recordKey := buildDNSNameString(changeset.rrset.Name(), recordLabel)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if checkNotExists {
0000000000000000000000000000000000000000;;						response, err := c.zone.zones.intf.etcdKeysAPI.Get(ctx, dnsmsg.Path(recordKey, etcdPathPrefix), getOpts)
0000000000000000000000000000000000000000;;						if err == nil && response != nil {
0000000000000000000000000000000000000000;;							return fmt.Errorf("Key already exist, key: %v", recordKey)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					_, err = c.zone.zones.intf.etcdKeysAPI.Set(ctx, dnsmsg.Path(recordKey, etcdPathPrefix), recordValue, setOpts)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case DELETION:
0000000000000000000000000000000000000000;;				// TODO: I think the semantics of the other providers are different; they operate at the record level, not the individual rrdata level
0000000000000000000000000000000000000000;;				// In other words: we should delete all the records for the key, only if it matches exactly
0000000000000000000000000000000000000000;;				for _, rrdata := range changeset.rrset.Rrdatas() {
0000000000000000000000000000000000000000;;					recordLabel := getHash(rrdata)
0000000000000000000000000000000000000000;;					recordKey := buildDNSNameString(changeset.rrset.Name(), recordLabel)
0000000000000000000000000000000000000000;;					_, err := c.zone.zones.intf.etcdKeysAPI.Delete(ctx, dnsmsg.Path(recordKey, etcdPathPrefix), deleteOpts)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// TODO: We need to cleanup empty dirs in etcd
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceRecordSets returns the parent ResourceRecordSets
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) ResourceRecordSets() dnsprovider.ResourceRecordSets {
0000000000000000000000000000000000000000;;		return c.rrsets
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getHash(text string) string {
0000000000000000000000000000000000000000;;		h := fnv.New32a()
0000000000000000000000000000000000000000;;		h.Write([]byte(text))
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%x", h.Sum32())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func buildDNSNameString(labels ...string) string {
0000000000000000000000000000000000000000;;		var res string
0000000000000000000000000000000000000000;;		for _, label := range labels {
0000000000000000000000000000000000000000;;			if res == "" {
0000000000000000000000000000000000000000;;				res = label
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				res = fmt.Sprintf("%s.%s", label, res)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
