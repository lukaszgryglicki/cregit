0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1db875b9bbbbff676f771e0e13033de40acecb41;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package coredns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		etcdc "github.com/coreos/etcd/client"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		dnsmsg "github.com/miekg/coredns/middleware/etcd/msg"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.ResourceRecordSets = ResourceRecordSets{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordSets struct {
0000000000000000000000000000000000000000;;		zone *Zone
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) List() ([]dnsprovider.ResourceRecordSet, error) {
0000000000000000000000000000000000000000;;		var list []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;		return list, fmt.Errorf("OperationNotSupported")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) Get(name string) ([]dnsprovider.ResourceRecordSet, error) {
0000000000000000000000000000000000000000;;		getOpts := &etcdc.GetOptions{
0000000000000000000000000000000000000000;;			Recursive: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		etcdPathPrefix := rrsets.zone.zones.intf.etcdPathPrefix
0000000000000000000000000000000000000000;;		response, err := rrsets.zone.zones.intf.etcdKeysAPI.Get(context.Background(), dnsmsg.Path(name, etcdPathPrefix), getOpts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if etcdc.IsKeyNotFound(err) {
0000000000000000000000000000000000000000;;				glog.V(2).Infof("Subdomain %q does not exist", name)
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Failed to get service from etcd, err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emptyResponse(response) {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Subdomain %q does not exist in etcd", name)
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var list []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, node := range response.Node.Nodes {
0000000000000000000000000000000000000000;;			service := dnsmsg.Service{}
0000000000000000000000000000000000000000;;			err = json.Unmarshal([]byte(node.Value), &service)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("Failed to unmarshall json data, err: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			rrset := ResourceRecordSet{name: name, rrdatas: []string{}, rrsets: &rrsets}
0000000000000000000000000000000000000000;;			ip := net.ParseIP(service.Host)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case ip == nil:
0000000000000000000000000000000000000000;;				rrset.rrsType = rrstype.CNAME
0000000000000000000000000000000000000000;;			case ip.To4() != nil:
0000000000000000000000000000000000000000;;				rrset.rrsType = rrstype.A
0000000000000000000000000000000000000000;;			case ip.To16() != nil:
0000000000000000000000000000000000000000;;				rrset.rrsType = rrstype.AAAA
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				// Cannot occur
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rrset.rrdatas = append(rrset.rrdatas, service.Host)
0000000000000000000000000000000000000000;;			rrset.ttl = int64(service.TTL)
0000000000000000000000000000000000000000;;			list = append(list, rrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return list, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) StartChangeset() dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		return &ResourceRecordChangeset{
0000000000000000000000000000000000000000;;			zone:   rrsets.zone,
0000000000000000000000000000000000000000;;			rrsets: &rrsets,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) New(name string, rrdatas []string, ttl int64, rrsType rrstype.RrsType) dnsprovider.ResourceRecordSet {
0000000000000000000000000000000000000000;;		return ResourceRecordSet{
0000000000000000000000000000000000000000;;			name:    name,
0000000000000000000000000000000000000000;;			rrdatas: rrdatas,
0000000000000000000000000000000000000000;;			ttl:     ttl,
0000000000000000000000000000000000000000;;			rrsType: rrsType,
0000000000000000000000000000000000000000;;			rrsets:  &rrsets,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zone returns the parent zone
0000000000000000000000000000000000000000;;	func (rrset ResourceRecordSets) Zone() dnsprovider.Zone {
0000000000000000000000000000000000000000;;		return rrset.zone
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func emptyResponse(resp *etcdc.Response) bool {
0000000000000000000000000000000000000000;;		return resp == nil || resp.Node == nil || (len(resp.Node.Value) == 0 && len(resp.Node.Nodes) == 0)
0000000000000000000000000000000000000000;;	}
