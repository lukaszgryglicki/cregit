0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
24db3948e8dc066859516f03061326511cc7c557;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package route53
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/route53"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.ResourceRecordSet = ResourceRecordSet{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordSet struct {
0000000000000000000000000000000000000000;;		impl   *route53.ResourceRecordSet
0000000000000000000000000000000000000000;;		rrsets *ResourceRecordSets
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrset ResourceRecordSet) Name() string {
0000000000000000000000000000000000000000;;		return aws.StringValue(rrset.impl.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrset ResourceRecordSet) Rrdatas() []string {
0000000000000000000000000000000000000000;;		// Sigh - need to unpack the strings out of the route53 ResourceRecords
0000000000000000000000000000000000000000;;		result := make([]string, len(rrset.impl.ResourceRecords))
0000000000000000000000000000000000000000;;		for i, record := range rrset.impl.ResourceRecords {
0000000000000000000000000000000000000000;;			result[i] = aws.StringValue(record.Value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrset ResourceRecordSet) Ttl() int64 {
0000000000000000000000000000000000000000;;		return aws.Int64Value(rrset.impl.TTL)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrset ResourceRecordSet) Type() rrstype.RrsType {
0000000000000000000000000000000000000000;;		return rrstype.RrsType(aws.StringValue(rrset.impl.Type))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Route53ResourceRecordSet returns the route53 ResourceRecordSet object for the ResourceRecordSet
0000000000000000000000000000000000000000;;	// This is a "back door" that allows for limited access to the ResourceRecordSet,
0000000000000000000000000000000000000000;;	// without having to requery it, so that we can expose AWS specific functionality.
0000000000000000000000000000000000000000;;	// Using this method should be avoided where possible; instead prefer to add functionality
0000000000000000000000000000000000000000;;	// to the cross-provider ResourceRecordSet interface.
0000000000000000000000000000000000000000;;	func (rrset ResourceRecordSet) Route53ResourceRecordSet() *route53.ResourceRecordSet {
0000000000000000000000000000000000000000;;		return rrset.impl
0000000000000000000000000000000000000000;;	}
