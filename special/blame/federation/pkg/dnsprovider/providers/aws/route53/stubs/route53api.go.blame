0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
24db3948e8dc066859516f03061326511cc7c557;federation/pkg/dnsprovider/providers/aws/route53/testing/route53api.go[federation/pkg/dnsprovider/providers/aws/route53/testing/route53api.go][federation/pkg/dnsprovider/providers/aws/route53/stubs/route53api.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* internal implements a stub for the AWS Route53 API, used primarily for unit testing purposes */
0000000000000000000000000000000000000000;;	package stubs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/route53"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface conformance
0000000000000000000000000000000000000000;;	var _ Route53API = &Route53APIStub{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* Route53API is the subset of the AWS Route53 API that we actually use.  Add methods as required. Signatures must match exactly. */
0000000000000000000000000000000000000000;;	type Route53API interface {
0000000000000000000000000000000000000000;;		ListResourceRecordSetsPages(input *route53.ListResourceRecordSetsInput, fn func(p *route53.ListResourceRecordSetsOutput, lastPage bool) (shouldContinue bool)) error
0000000000000000000000000000000000000000;;		ChangeResourceRecordSets(*route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error)
0000000000000000000000000000000000000000;;		ListHostedZonesPages(input *route53.ListHostedZonesInput, fn func(p *route53.ListHostedZonesOutput, lastPage bool) (shouldContinue bool)) error
0000000000000000000000000000000000000000;;		CreateHostedZone(*route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error)
0000000000000000000000000000000000000000;;		DeleteHostedZone(*route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Route53APIStub is a minimal implementation of Route53API, used primarily for unit testing.
0000000000000000000000000000000000000000;;	// See http://http://docs.aws.amazon.com/sdk-for-go/api/service/route53.html for descriptions
0000000000000000000000000000000000000000;;	// of all of its methods.
0000000000000000000000000000000000000000;;	type Route53APIStub struct {
0000000000000000000000000000000000000000;;		zones      map[string]*route53.HostedZone
0000000000000000000000000000000000000000;;		recordSets map[string]map[string][]*route53.ResourceRecordSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRoute53APIStub returns an initialized Route53APIStub
0000000000000000000000000000000000000000;;	func NewRoute53APIStub() *Route53APIStub {
0000000000000000000000000000000000000000;;		return &Route53APIStub{
0000000000000000000000000000000000000000;;			zones:      make(map[string]*route53.HostedZone),
0000000000000000000000000000000000000000;;			recordSets: make(map[string]map[string][]*route53.ResourceRecordSet),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Route53APIStub) ListResourceRecordSetsPages(input *route53.ListResourceRecordSetsInput, fn func(p *route53.ListResourceRecordSetsOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		output := route53.ListResourceRecordSetsOutput{} // TODO: Support optional input args.
0000000000000000000000000000000000000000;;		if len(r.recordSets) <= 0 {
0000000000000000000000000000000000000000;;			output.ResourceRecordSets = []*route53.ResourceRecordSet{}
0000000000000000000000000000000000000000;;		} else if _, ok := r.recordSets[*input.HostedZoneId]; !ok {
0000000000000000000000000000000000000000;;			output.ResourceRecordSets = []*route53.ResourceRecordSet{}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			for _, rrsets := range r.recordSets[*input.HostedZoneId] {
0000000000000000000000000000000000000000;;				for _, rrset := range rrsets {
0000000000000000000000000000000000000000;;					output.ResourceRecordSets = append(output.ResourceRecordSets, rrset)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		lastPage := true
0000000000000000000000000000000000000000;;		fn(&output, lastPage)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Route53APIStub) ChangeResourceRecordSets(input *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
0000000000000000000000000000000000000000;;		output := &route53.ChangeResourceRecordSetsOutput{}
0000000000000000000000000000000000000000;;		recordSets, ok := r.recordSets[*input.HostedZoneId]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			recordSets = make(map[string][]*route53.ResourceRecordSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, change := range input.ChangeBatch.Changes {
0000000000000000000000000000000000000000;;			key := *change.ResourceRecordSet.Name + "::" + *change.ResourceRecordSet.Type
0000000000000000000000000000000000000000;;			switch *change.Action {
0000000000000000000000000000000000000000;;			case route53.ChangeActionCreate:
0000000000000000000000000000000000000000;;				if _, found := recordSets[key]; found {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Attempt to create duplicate rrset %s", key) // TODO: Return AWS errors with codes etc
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				recordSets[key] = append(recordSets[key], change.ResourceRecordSet)
0000000000000000000000000000000000000000;;			case route53.ChangeActionDelete:
0000000000000000000000000000000000000000;;				if _, found := recordSets[key]; !found {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Attempt to delete non-existent rrset %s", key) // TODO: Check other fields too
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				delete(recordSets, key)
0000000000000000000000000000000000000000;;			case route53.ChangeActionUpsert:
0000000000000000000000000000000000000000;;				// TODO - not used yet
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.recordSets[*input.HostedZoneId] = recordSets
0000000000000000000000000000000000000000;;		return output, nil // TODO: We should ideally return status etc, but we don't' use that yet.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Route53APIStub) ListHostedZonesPages(input *route53.ListHostedZonesInput, fn func(p *route53.ListHostedZonesOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		output := &route53.ListHostedZonesOutput{}
0000000000000000000000000000000000000000;;		for _, zone := range r.zones {
0000000000000000000000000000000000000000;;			output.HostedZones = append(output.HostedZones, zone)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		lastPage := true
0000000000000000000000000000000000000000;;		fn(output, lastPage)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Route53APIStub) CreateHostedZone(input *route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error) {
0000000000000000000000000000000000000000;;		name := aws.StringValue(input.Name)
0000000000000000000000000000000000000000;;		id := "/hostedzone/" + name
0000000000000000000000000000000000000000;;		if _, ok := r.zones[id]; ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Error creating hosted DNS zone: %s already exists", id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.zones[id] = &route53.HostedZone{
0000000000000000000000000000000000000000;;			Id:   aws.String(id),
0000000000000000000000000000000000000000;;			Name: aws.String(name),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &route53.CreateHostedZoneOutput{HostedZone: r.zones[id]}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Route53APIStub) DeleteHostedZone(input *route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error) {
0000000000000000000000000000000000000000;;		if _, ok := r.zones[*input.Id]; !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Error deleting hosted DNS zone: %s does not exist", *input.Id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(r.recordSets[*input.Id]) > 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Error deleting hosted DNS zone: %s has resource records", *input.Id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delete(r.zones, *input.Id)
0000000000000000000000000000000000000000;;		return &route53.DeleteHostedZoneOutput{}, nil
0000000000000000000000000000000000000000;;	}
