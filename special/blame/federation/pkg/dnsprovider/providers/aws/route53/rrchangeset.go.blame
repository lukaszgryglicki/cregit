0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
55375a619600b5ef1a29b7ba7e0a0b6efd7edc80;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package route53
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/route53"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.ResourceRecordChangeset = &ResourceRecordChangeset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordChangeset struct {
0000000000000000000000000000000000000000;;		zone   *Zone
0000000000000000000000000000000000000000;;		rrsets *ResourceRecordSets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		additions []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;		removals  []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;		upserts   []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Add(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.additions = append(c.additions, rrset)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Remove(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.removals = append(c.removals, rrset)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Upsert(rrset dnsprovider.ResourceRecordSet) dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		c.upserts = append(c.upserts, rrset)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// buildChange converts a dnsprovider.ResourceRecordSet to a route53.Change request
0000000000000000000000000000000000000000;;	func buildChange(action string, rrs dnsprovider.ResourceRecordSet) *route53.Change {
0000000000000000000000000000000000000000;;		change := &route53.Change{
0000000000000000000000000000000000000000;;			Action: aws.String(action),
0000000000000000000000000000000000000000;;			ResourceRecordSet: &route53.ResourceRecordSet{
0000000000000000000000000000000000000000;;				Name: aws.String(rrs.Name()),
0000000000000000000000000000000000000000;;				Type: aws.String(string(rrs.Type())),
0000000000000000000000000000000000000000;;				TTL:  aws.Int64(rrs.Ttl()),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rrdata := range rrs.Rrdatas() {
0000000000000000000000000000000000000000;;			rr := &route53.ResourceRecord{
0000000000000000000000000000000000000000;;				Value: aws.String(rrdata),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			change.ResourceRecordSet.ResourceRecords = append(change.ResourceRecordSet.ResourceRecords, rr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return change
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) Apply() error {
0000000000000000000000000000000000000000;;		hostedZoneID := c.zone.impl.Id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var changes []*route53.Change
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, removal := range c.removals {
0000000000000000000000000000000000000000;;			change := buildChange(route53.ChangeActionDelete, removal)
0000000000000000000000000000000000000000;;			changes = append(changes, change)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, addition := range c.additions {
0000000000000000000000000000000000000000;;			change := buildChange(route53.ChangeActionCreate, addition)
0000000000000000000000000000000000000000;;			changes = append(changes, change)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, upsert := range c.upserts {
0000000000000000000000000000000000000000;;			change := buildChange(route53.ChangeActionUpsert, upsert)
0000000000000000000000000000000000000000;;			changes = append(changes, change)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(changes) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if glog.V(8) {
0000000000000000000000000000000000000000;;			var sb bytes.Buffer
0000000000000000000000000000000000000000;;			for _, change := range changes {
0000000000000000000000000000000000000000;;				sb.WriteString(fmt.Sprintf("\t%s %s %s\n", aws.StringValue(change.Action), aws.StringValue(change.ResourceRecordSet.Type), aws.StringValue(change.ResourceRecordSet.Name)))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			glog.V(8).Infof("Route53 Changeset:\n%s", sb.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		service := c.zone.zones.interface_.service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		request := &route53.ChangeResourceRecordSetsInput{
0000000000000000000000000000000000000000;;			ChangeBatch: &route53.ChangeBatch{
0000000000000000000000000000000000000000;;				Changes: changes,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			HostedZoneId: hostedZoneID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := service.ChangeResourceRecordSets(request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// Cast err to awserr.Error to get the Code and
0000000000000000000000000000000000000000;;			// Message from an error.
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) IsEmpty() bool {
0000000000000000000000000000000000000000;;		return len(c.removals) == 0 && len(c.additions) == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceRecordSets returns the parent ResourceRecordSets
0000000000000000000000000000000000000000;;	func (c *ResourceRecordChangeset) ResourceRecordSets() dnsprovider.ResourceRecordSets {
0000000000000000000000000000000000000000;;		return c.rrsets
0000000000000000000000000000000000000000;;	}
