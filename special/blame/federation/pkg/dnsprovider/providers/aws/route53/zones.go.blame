0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
24db3948e8dc066859516f03061326511cc7c557;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package route53
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/route53"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.Zones = Zones{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Zones struct {
0000000000000000000000000000000000000000;;		interface_ *Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zones Zones) List() ([]dnsprovider.Zone, error) {
0000000000000000000000000000000000000000;;		var zoneList []dnsprovider.Zone
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		input := route53.ListHostedZonesInput{}
0000000000000000000000000000000000000000;;		err := zones.interface_.service.ListHostedZonesPages(&input, func(page *route53.ListHostedZonesOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;			for _, zone := range page.HostedZones {
0000000000000000000000000000000000000000;;				zoneList = append(zoneList, &Zone{zone, &zones})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []dnsprovider.Zone{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return zoneList, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zones Zones) Add(zone dnsprovider.Zone) (dnsprovider.Zone, error) {
0000000000000000000000000000000000000000;;		dnsName := zone.Name()
0000000000000000000000000000000000000000;;		callerReference := string(uuid.NewUUID())
0000000000000000000000000000000000000000;;		input := route53.CreateHostedZoneInput{Name: &dnsName, CallerReference: &callerReference}
0000000000000000000000000000000000000000;;		output, err := zones.interface_.service.CreateHostedZone(&input)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &Zone{output.HostedZone, &zones}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zones Zones) Remove(zone dnsprovider.Zone) error {
0000000000000000000000000000000000000000;;		zoneId := zone.(*Zone).impl.Id
0000000000000000000000000000000000000000;;		input := route53.DeleteHostedZoneInput{Id: zoneId}
0000000000000000000000000000000000000000;;		_, err := zones.interface_.service.DeleteHostedZone(&input)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (zones Zones) New(name string) (dnsprovider.Zone, error) {
0000000000000000000000000000000000000000;;		id := string(uuid.NewUUID())
0000000000000000000000000000000000000000;;		managedZone := route53.HostedZone{Id: &id, Name: &name}
0000000000000000000000000000000000000000;;		return &Zone{&managedZone, &zones}, nil
0000000000000000000000000000000000000000;;	}
