0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
24db3948e8dc066859516f03061326511cc7c557;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package route53
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/route53"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.ResourceRecordSets = ResourceRecordSets{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordSets struct {
0000000000000000000000000000000000000000;;		zone *Zone
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) List() ([]dnsprovider.ResourceRecordSet, error) {
0000000000000000000000000000000000000000;;		input := route53.ListResourceRecordSetsInput{
0000000000000000000000000000000000000000;;			HostedZoneId: rrsets.zone.impl.Id,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var list []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;		err := rrsets.zone.zones.interface_.service.ListResourceRecordSetsPages(&input, func(page *route53.ListResourceRecordSetsOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;			for _, rrset := range page.ResourceRecordSets {
0000000000000000000000000000000000000000;;				list = append(list, &ResourceRecordSet{rrset, &rrsets})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return list, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rrsets ResourceRecordSets) Get(name string) ([]dnsprovider.ResourceRecordSet, error) {
0000000000000000000000000000000000000000;;		// This list implementation is very similar to the one implemented in
0000000000000000000000000000000000000000;;		// the List() method above, but it restricts the retrieved list to
0000000000000000000000000000000000000000;;		// the records whose name match the given `name`.
0000000000000000000000000000000000000000;;		input := route53.ListResourceRecordSetsInput{
0000000000000000000000000000000000000000;;			HostedZoneId:    rrsets.zone.impl.Id,
0000000000000000000000000000000000000000;;			StartRecordName: aws.String(name),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var list []dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;		err := rrsets.zone.zones.interface_.service.ListResourceRecordSetsPages(&input, func(page *route53.ListResourceRecordSetsOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;			for _, rrset := range page.ResourceRecordSets {
0000000000000000000000000000000000000000;;				if aws.StringValue(rrset.Name) != name {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				list = append(list, &ResourceRecordSet{rrset, &rrsets})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return list, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r ResourceRecordSets) StartChangeset() dnsprovider.ResourceRecordChangeset {
0000000000000000000000000000000000000000;;		return &ResourceRecordChangeset{
0000000000000000000000000000000000000000;;			zone:   r.zone,
0000000000000000000000000000000000000000;;			rrsets: &r,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r ResourceRecordSets) New(name string, rrdatas []string, ttl int64, rrstype rrstype.RrsType) dnsprovider.ResourceRecordSet {
0000000000000000000000000000000000000000;;		rrstypeStr := string(rrstype)
0000000000000000000000000000000000000000;;		rrs := &route53.ResourceRecordSet{
0000000000000000000000000000000000000000;;			Name: &name,
0000000000000000000000000000000000000000;;			Type: &rrstypeStr,
0000000000000000000000000000000000000000;;			TTL:  &ttl,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, rrdata := range rrdatas {
0000000000000000000000000000000000000000;;			rrs.ResourceRecords = append(rrs.ResourceRecords, &route53.ResourceRecord{
0000000000000000000000000000000000000000;;				Value: aws.String(rrdata),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ResourceRecordSet{
0000000000000000000000000000000000000000;;			rrs,
0000000000000000000000000000000000000000;;			&r,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zone returns the parent zone
0000000000000000000000000000000000000000;;	func (rrset ResourceRecordSets) Zone() dnsprovider.Zone {
0000000000000000000000000000000000000000;;		return rrset.zone
0000000000000000000000000000000000000000;;	}
