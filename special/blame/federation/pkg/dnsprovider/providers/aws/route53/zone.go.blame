0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
24db3948e8dc066859516f03061326511cc7c557;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package route53
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/service/route53"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compile time check for interface adherence
0000000000000000000000000000000000000000;;	var _ dnsprovider.Zone = &Zone{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Zone struct {
0000000000000000000000000000000000000000;;		impl  *route53.HostedZone
0000000000000000000000000000000000000000;;		zones *Zones
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zone *Zone) Name() string {
0000000000000000000000000000000000000000;;		return aws.StringValue(zone.impl.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zone *Zone) ID() string {
0000000000000000000000000000000000000000;;		id := aws.StringValue(zone.impl.Id)
0000000000000000000000000000000000000000;;		id = strings.TrimPrefix(id, "/hostedzone/")
0000000000000000000000000000000000000000;;		return id
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (zone *Zone) ResourceRecordSets() (dnsprovider.ResourceRecordSets, bool) {
0000000000000000000000000000000000000000;;		return &ResourceRecordSets{zone}, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Route53HostedZone returns the route53 HostedZone object for the zone.
0000000000000000000000000000000000000000;;	// This is a "back door" that allows for limited access to the HostedZone,
0000000000000000000000000000000000000000;;	// without having to requery it, so that we can expose AWS specific functionality.
0000000000000000000000000000000000000000;;	// Using this method should be avoided where possible; instead prefer to add functionality
0000000000000000000000000000000000000000;;	// to the cross-provider Zone interface.
0000000000000000000000000000000000000000;;	func (zone *Zone) Route53HostedZone() *route53.HostedZone {
0000000000000000000000000000000000000000;;		return zone.impl
0000000000000000000000000000000000000000;;	}
