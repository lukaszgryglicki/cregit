0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
55375a619600b5ef1a29b7ba7e0a0b6efd7edc80;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/rrstype"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* CommonTestResourceRecordSetsReplace verifies that replacing an RRS works */
0000000000000000000000000000000000000000;;	func CommonTestResourceRecordSetsReplace(t *testing.T, zone dnsprovider.Zone) {
0000000000000000000000000000000000000000;;		rrsets, _ := zone.ResourceRecordSets()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sets := rrs(t, zone)
0000000000000000000000000000000000000000;;		rrset := rrsets.New("alpha.test.com", []string{"8.8.4.4"}, 40, rrstype.A)
0000000000000000000000000000000000000000;;		addRrsetOrFail(t, sets, rrset)
0000000000000000000000000000000000000000;;		defer sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Replace the record (change ttl and rrdatas)
0000000000000000000000000000000000000000;;		newRrset := rrsets.New("alpha.test.com", []string{"8.8.8.8"}, 80, rrstype.A)
0000000000000000000000000000000000000000;;		err := sets.StartChangeset().Add(newRrset).Remove(rrset).Apply()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to replace resource record set %v -> %v: %v", rrset, newRrset, err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			defer sets.StartChangeset().Remove(newRrset).Apply()
0000000000000000000000000000000000000000;;			t.Logf("Correctly replaced resource record %v -> %v", rrset, newRrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check that the record was updated
0000000000000000000000000000000000000000;;		assertHasRecord(t, sets, newRrset)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* CommonTestResourceRecordSetsReplaceAll verifies that we can remove an RRS and create one with a different name*/
0000000000000000000000000000000000000000;;	func CommonTestResourceRecordSetsReplaceAll(t *testing.T, zone dnsprovider.Zone) {
0000000000000000000000000000000000000000;;		rrsets, _ := zone.ResourceRecordSets()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sets := rrs(t, zone)
0000000000000000000000000000000000000000;;		rrset := rrsets.New("alpha.test.com", []string{"8.8.4.4"}, 40, rrstype.A)
0000000000000000000000000000000000000000;;		addRrsetOrFail(t, sets, rrset)
0000000000000000000000000000000000000000;;		defer sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newRrset := rrsets.New("beta.test.com", []string{"8.8.8.8"}, 80, rrstype.A)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Try to add it again, and verify that the call fails.
0000000000000000000000000000000000000000;;		err := sets.StartChangeset().Add(newRrset).Remove(rrset).Apply()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to replace resource record set %v -> %v: %v", rrset, newRrset, err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			defer sets.StartChangeset().Remove(newRrset).Apply()
0000000000000000000000000000000000000000;;			t.Logf("Correctly replaced resource record %v -> %v", rrset, newRrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check that it was updated
0000000000000000000000000000000000000000;;		assertHasRecord(t, sets, newRrset)
0000000000000000000000000000000000000000;;		assertNotHasRecord(t, sets, rrset.Name(), rrset.Type())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* CommonTestResourceRecordSetsDifferentType verifies that we can add records of the same name but different types */
0000000000000000000000000000000000000000;;	func CommonTestResourceRecordSetsDifferentTypes(t *testing.T, zone dnsprovider.Zone) {
0000000000000000000000000000000000000000;;		rrsets, _ := zone.ResourceRecordSets()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sets := rrs(t, zone)
0000000000000000000000000000000000000000;;		rrset := rrsets.New("alpha.test.com", []string{"8.8.4.4"}, 40, rrstype.A)
0000000000000000000000000000000000000000;;		addRrsetOrFail(t, sets, rrset)
0000000000000000000000000000000000000000;;		defer sets.StartChangeset().Remove(rrset).Apply()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aaaaRrset := rrsets.New("alpha.test.com", []string{"2001:4860:4860::8888"}, 80, rrstype.AAAA)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add the resource with the same name but different type
0000000000000000000000000000000000000000;;		err := sets.StartChangeset().Add(aaaaRrset).Apply()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to add resource record set %v: %v", aaaaRrset, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer sets.StartChangeset().Remove(aaaaRrset).Apply()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check that both records exist
0000000000000000000000000000000000000000;;		assertHasRecord(t, sets, aaaaRrset)
0000000000000000000000000000000000000000;;		assertHasRecord(t, sets, rrset)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* rrs returns the ResourceRecordSets interface for a given zone */
0000000000000000000000000000000000000000;;	func rrs(t *testing.T, zone dnsprovider.Zone) (r dnsprovider.ResourceRecordSets) {
0000000000000000000000000000000000000000;;		rrsets, supported := zone.ResourceRecordSets()
0000000000000000000000000000000000000000;;		if !supported {
0000000000000000000000000000000000000000;;			t.Fatalf("ResourceRecordSets interface not supported by zone %v", zone)
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rrsets
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getRrOrFail(t *testing.T, rrsets dnsprovider.ResourceRecordSets, name string) []dnsprovider.ResourceRecordSet {
0000000000000000000000000000000000000000;;		rrsetList, err := rrsets.Get(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to get recordset: %v", err)
0000000000000000000000000000000000000000;;		} else if len(rrsetList) == 0 {
0000000000000000000000000000000000000000;;			t.Logf("Did not Get recordset: %v", name)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Logf("Got recordset: %v", rrsetList[0].Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rrsetList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// assertHasRecord tests that rrsets has a record equivalent to rrset
0000000000000000000000000000000000000000;;	func assertHasRecord(t *testing.T, rrsets dnsprovider.ResourceRecordSets, rrset dnsprovider.ResourceRecordSet) {
0000000000000000000000000000000000000000;;		var found dnsprovider.ResourceRecordSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rrs, err := rrsets.List()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if err.Error() == "OperationNotSupported" {
0000000000000000000000000000000000000000;;				foundList := getRrOrFail(t, rrsets, rrset.Name())
0000000000000000000000000000000000000000;;				for i, elem := range foundList {
0000000000000000000000000000000000000000;;					if elem.Name() == rrset.Name() && elem.Type() == rrset.Type() {
0000000000000000000000000000000000000000;;						found = foundList[i]
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Fatalf("Failed to list recordsets: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if len(rrs) < 0 {
0000000000000000000000000000000000000000;;				t.Fatalf("Record set length=%d, expected >=0", len(rrs))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Logf("Got %d recordsets: %v", len(rrs), rrs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, r := range rrs {
0000000000000000000000000000000000000000;;				if r.Name() != rrset.Name() || r.Type() != rrset.Type() {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if found != nil {
0000000000000000000000000000000000000000;;					t.Errorf("found duplicate resource record set: %q and %q", r, found)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				found = r
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if found == nil {
0000000000000000000000000000000000000000;;			t.Errorf("resource record set %v not found", rrset)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			assertEquivalent(t, found, rrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// assertNotHasRecord tests that rrsets does not have a record matching name and type
0000000000000000000000000000000000000000;;	func assertNotHasRecord(t *testing.T, rrsets dnsprovider.ResourceRecordSets, name string, rrstype rrstype.RrsType) {
0000000000000000000000000000000000000000;;		found := getRrOrFail(t, rrsets, name)
0000000000000000000000000000000000000000;;		if found != nil {
0000000000000000000000000000000000000000;;			t.Errorf("resource record set found unexpectedly: %v", found)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// assertEquivalent tests that l is equal to r, for the methods in ResourceRecordSet
0000000000000000000000000000000000000000;;	func assertEquivalent(t *testing.T, l, r dnsprovider.ResourceRecordSet) {
0000000000000000000000000000000000000000;;		if l.Name() != r.Name() {
0000000000000000000000000000000000000000;;			t.Errorf("resource record sets not equal %v vs %v", l, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.Type() != r.Type() {
0000000000000000000000000000000000000000;;			t.Errorf("resource record sets not equal %v vs %v", l, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.Ttl() != r.Ttl() {
0000000000000000000000000000000000000000;;			t.Errorf("resource record sets not equal %v vs %v", l, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(l.Rrdatas(), r.Rrdatas()) {
0000000000000000000000000000000000000000;;			t.Errorf("resource record sets not equal %v vs %v", l, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addRrsetOrFail(t *testing.T, rrsets dnsprovider.ResourceRecordSets, rrset dnsprovider.ResourceRecordSet) {
0000000000000000000000000000000000000000;;		err := rrsets.StartChangeset().Add(rrset).Apply()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Failed to add recordset %v: %v", rrset, err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Logf("Successfully added resource record set: %v", rrset)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
