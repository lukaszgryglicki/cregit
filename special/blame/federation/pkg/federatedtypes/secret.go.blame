0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c507aab7c3e12a6fd7aae5913db7610c2cbc52a4;federation/pkg/typeadapters/secret.go[federation/pkg/typeadapters/secret.go][federation/pkg/federatedtypes/secret.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package federatedtypes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		pkgruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		federationclientset "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/federation-controller/util"
0000000000000000000000000000000000000000;;		kubeclientset "k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SecretKind           = "secret"
0000000000000000000000000000000000000000;;		SecretControllerName = "secrets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		RegisterFederatedType(SecretKind, SecretControllerName, []schema.GroupVersionResource{apiv1.SchemeGroupVersion.WithResource(SecretControllerName)}, NewSecretAdapter)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecretAdapter struct {
0000000000000000000000000000000000000000;;		client federationclientset.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSecretAdapter(client federationclientset.Interface, config *restclient.Config) FederatedTypeAdapter {
0000000000000000000000000000000000000000;;		return &SecretAdapter{client: client}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) Kind() string {
0000000000000000000000000000000000000000;;		return SecretKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) ObjectType() pkgruntime.Object {
0000000000000000000000000000000000000000;;		return &apiv1.Secret{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) IsExpectedType(obj interface{}) bool {
0000000000000000000000000000000000000000;;		_, ok := obj.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) Copy(obj pkgruntime.Object) pkgruntime.Object {
0000000000000000000000000000000000000000;;		secret := obj.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		return &apiv1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: util.DeepCopyRelevantObjectMeta(secret.ObjectMeta),
0000000000000000000000000000000000000000;;			Data:       secret.Data,
0000000000000000000000000000000000000000;;			Type:       secret.Type,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) Equivalent(obj1, obj2 pkgruntime.Object) bool {
0000000000000000000000000000000000000000;;		secret1 := obj1.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		secret2 := obj2.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		return util.SecretEquivalent(*secret1, *secret2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) QualifiedName(obj pkgruntime.Object) QualifiedName {
0000000000000000000000000000000000000000;;		secret := obj.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		return QualifiedName{Namespace: secret.Namespace, Name: secret.Name}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) ObjectMeta(obj pkgruntime.Object) *metav1.ObjectMeta {
0000000000000000000000000000000000000000;;		return &obj.(*apiv1.Secret).ObjectMeta
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) FedCreate(obj pkgruntime.Object) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		secret := obj.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		return a.client.CoreV1().Secrets(secret.Namespace).Create(secret)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) FedDelete(qualifiedName QualifiedName, options *metav1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		return a.client.CoreV1().Secrets(qualifiedName.Namespace).Delete(qualifiedName.Name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) FedGet(qualifiedName QualifiedName) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		return a.client.CoreV1().Secrets(qualifiedName.Namespace).Get(qualifiedName.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) FedList(namespace string, options metav1.ListOptions) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		return a.client.CoreV1().Secrets(namespace).List(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) FedUpdate(obj pkgruntime.Object) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		secret := obj.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		return a.client.CoreV1().Secrets(secret.Namespace).Update(secret)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) FedWatch(namespace string, options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return a.client.CoreV1().Secrets(namespace).Watch(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) ClusterCreate(client kubeclientset.Interface, obj pkgruntime.Object) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		secret := obj.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		return client.CoreV1().Secrets(secret.Namespace).Create(secret)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) ClusterDelete(client kubeclientset.Interface, qualifiedName QualifiedName, options *metav1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		return client.CoreV1().Secrets(qualifiedName.Namespace).Delete(qualifiedName.Name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) ClusterGet(client kubeclientset.Interface, qualifiedName QualifiedName) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		return client.CoreV1().Secrets(qualifiedName.Namespace).Get(qualifiedName.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) ClusterList(client kubeclientset.Interface, namespace string, options metav1.ListOptions) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		return client.CoreV1().Secrets(namespace).List(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) ClusterUpdate(client kubeclientset.Interface, obj pkgruntime.Object) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		secret := obj.(*apiv1.Secret)
0000000000000000000000000000000000000000;;		return client.CoreV1().Secrets(secret.Namespace).Update(secret)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) ClusterWatch(client kubeclientset.Interface, namespace string, options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return client.CoreV1().Secrets(namespace).Watch(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) IsSchedulingAdapter() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *SecretAdapter) NewTestObject(namespace string) pkgruntime.Object {
0000000000000000000000000000000000000000;;		return &apiv1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				GenerateName: "test-secret-",
0000000000000000000000000000000000000000;;				Namespace:    namespace,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				"A": []byte("ala ma kota"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: apiv1.SecretTypeOpaque,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
