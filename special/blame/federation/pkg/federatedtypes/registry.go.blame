0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0d63c606d9120c39f499b4c3acefb2f795af905c;federation/pkg/typeadapters/registry.go[federation/pkg/typeadapters/registry.go][federation/pkg/federatedtypes/registry.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package federatedtypes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FederatedType configures federation for a kubernetes type
0000000000000000000000000000000000000000;;	type FederatedType struct {
0000000000000000000000000000000000000000;;		Kind              string
0000000000000000000000000000000000000000;;		ControllerName    string
0000000000000000000000000000000000000000;;		RequiredResources []schema.GroupVersionResource
0000000000000000000000000000000000000000;;		AdapterFactory    AdapterFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeRegistry = make(map[string]FederatedType)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterFederatedType ensures that configuration for the given kind will be returned by the FederatedTypes method.
0000000000000000000000000000000000000000;;	func RegisterFederatedType(kind, controllerName string, requiredResources []schema.GroupVersionResource, factory AdapterFactory) {
0000000000000000000000000000000000000000;;		_, ok := typeRegistry[kind]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			// TODO Is panicking ok given that this is part of a type-registration mechanism
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Federated type %q has already been registered", kind))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeRegistry[kind] = FederatedType{
0000000000000000000000000000000000000000;;			Kind:              kind,
0000000000000000000000000000000000000000;;			ControllerName:    controllerName,
0000000000000000000000000000000000000000;;			RequiredResources: requiredResources,
0000000000000000000000000000000000000000;;			AdapterFactory:    factory,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FederatedTypes returns a mapping of kind (e.g. "secret") to the
0000000000000000000000000000000000000000;;	// type information required to configure its federation.
0000000000000000000000000000000000000000;;	func FederatedTypes() map[string]FederatedType {
0000000000000000000000000000000000000000;;		// TODO copy RequiredResources to avoid accidental mutation
0000000000000000000000000000000000000000;;		result := make(map[string]FederatedType)
0000000000000000000000000000000000000000;;		for key, value := range typeRegistry {
0000000000000000000000000000000000000000;;			result[key] = value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
