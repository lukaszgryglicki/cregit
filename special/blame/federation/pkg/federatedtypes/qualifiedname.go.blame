0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
5f624203531bfa9070082ccfc80d498ce11bedb1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package federatedtypes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QualifiedName comprises a resource name with an optional namespace.
0000000000000000000000000000000000000000;;	// If namespace is provided, a QualifiedName will be rendered as
0000000000000000000000000000000000000000;;	// "<namespace>/<name>".  If not, it will be rendered as "name".  This
0000000000000000000000000000000000000000;;	// is intended to allow the FederatedTypeAdapter interface and its
0000000000000000000000000000000000000000;;	// consumers to operate on both namespaces and namespace-qualified
0000000000000000000000000000000000000000;;	// resources.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QualifiedName struct {
0000000000000000000000000000000000000000;;		Namespace string
0000000000000000000000000000000000000000;;		Name      string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the general purpose string representation
0000000000000000000000000000000000000000;;	func (n QualifiedName) String() string {
0000000000000000000000000000000000000000;;		if len(n.Namespace) == 0 {
0000000000000000000000000000000000000000;;			return n.Name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s/%s", n.Namespace, n.Name)
0000000000000000000000000000000000000000;;	}
