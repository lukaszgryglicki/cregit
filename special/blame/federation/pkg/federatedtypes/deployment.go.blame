0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
75ec6ee199b0a92e5c955fbf14b5ea62ce6189d3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package federatedtypes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensionsv1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		pkgruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		federationclientset "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset"
0000000000000000000000000000000000000000;;		fedutil "k8s.io/kubernetes/federation/pkg/federation-controller/util"
0000000000000000000000000000000000000000;;		kubeclientset "k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DeploymentKind                     = "deployment"
0000000000000000000000000000000000000000;;		DeploymentControllerName           = "deployments"
0000000000000000000000000000000000000000;;		FedDeploymentPreferencesAnnotation = "federation.kubernetes.io/deployment-preferences"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		RegisterFederatedType(DeploymentKind, DeploymentControllerName, []schema.GroupVersionResource{extensionsv1.SchemeGroupVersion.WithResource(DeploymentControllerName)}, NewDeploymentAdapter)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeploymentAdapter struct {
0000000000000000000000000000000000000000;;		*schedulingAdapter
0000000000000000000000000000000000000000;;		client federationclientset.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDeploymentAdapter(client federationclientset.Interface, config *restclient.Config) FederatedTypeAdapter {
0000000000000000000000000000000000000000;;		schedulingAdapter := schedulingAdapter{
0000000000000000000000000000000000000000;;			preferencesAnnotationName: FedDeploymentPreferencesAnnotation,
0000000000000000000000000000000000000000;;			updateStatusFunc: func(obj pkgruntime.Object, status SchedulingStatus) error {
0000000000000000000000000000000000000000;;				deployment := obj.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;				if status.Replicas != deployment.Status.Replicas || status.UpdatedReplicas != deployment.Status.UpdatedReplicas ||
0000000000000000000000000000000000000000;;					status.ReadyReplicas != deployment.Status.ReadyReplicas || status.AvailableReplicas != deployment.Status.AvailableReplicas {
0000000000000000000000000000000000000000;;					deployment.Status = extensionsv1.DeploymentStatus{
0000000000000000000000000000000000000000;;						Replicas:          status.Replicas,
0000000000000000000000000000000000000000;;						UpdatedReplicas:   status.UpdatedReplicas,
0000000000000000000000000000000000000000;;						ReadyReplicas:     status.ReadyReplicas,
0000000000000000000000000000000000000000;;						AvailableReplicas: status.AvailableReplicas,
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					_, err := client.Extensions().Deployments(deployment.Namespace).UpdateStatus(deployment)
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &DeploymentAdapter{&schedulingAdapter, client}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) Kind() string {
0000000000000000000000000000000000000000;;		return DeploymentKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) ObjectType() pkgruntime.Object {
0000000000000000000000000000000000000000;;		return &extensionsv1.Deployment{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) IsExpectedType(obj interface{}) bool {
0000000000000000000000000000000000000000;;		_, ok := obj.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) Copy(obj pkgruntime.Object) pkgruntime.Object {
0000000000000000000000000000000000000000;;		deployment := obj.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		return fedutil.DeepCopyDeployment(deployment)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) Equivalent(obj1, obj2 pkgruntime.Object) bool {
0000000000000000000000000000000000000000;;		deployment1 := obj1.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		deployment2 := obj2.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		return fedutil.DeploymentEquivalent(deployment1, deployment2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) QualifiedName(obj pkgruntime.Object) QualifiedName {
0000000000000000000000000000000000000000;;		deployment := obj.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		return QualifiedName{Namespace: deployment.Namespace, Name: deployment.Name}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) ObjectMeta(obj pkgruntime.Object) *metav1.ObjectMeta {
0000000000000000000000000000000000000000;;		return &obj.(*extensionsv1.Deployment).ObjectMeta
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) FedCreate(obj pkgruntime.Object) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		deployment := obj.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		return a.client.Extensions().Deployments(deployment.Namespace).Create(deployment)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) FedDelete(qualifiedName QualifiedName, options *metav1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		return a.client.Extensions().Deployments(qualifiedName.Namespace).Delete(qualifiedName.Name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) FedGet(qualifiedName QualifiedName) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		return a.client.Extensions().Deployments(qualifiedName.Namespace).Get(qualifiedName.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) FedList(namespace string, options metav1.ListOptions) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		return a.client.Extensions().Deployments(namespace).List(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) FedUpdate(obj pkgruntime.Object) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		deployment := obj.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		return a.client.Extensions().Deployments(deployment.Namespace).Update(deployment)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) FedWatch(namespace string, options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return a.client.Extensions().Deployments(namespace).Watch(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) ClusterCreate(client kubeclientset.Interface, obj pkgruntime.Object) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		deployment := obj.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		return client.Extensions().Deployments(deployment.Namespace).Create(deployment)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) ClusterDelete(client kubeclientset.Interface, qualifiedName QualifiedName, options *metav1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		return client.Extensions().Deployments(qualifiedName.Namespace).Delete(qualifiedName.Name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) ClusterGet(client kubeclientset.Interface, qualifiedName QualifiedName) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		return client.Extensions().Deployments(qualifiedName.Namespace).Get(qualifiedName.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) ClusterList(client kubeclientset.Interface, namespace string, options metav1.ListOptions) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		return client.Extensions().Deployments(namespace).List(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) ClusterUpdate(client kubeclientset.Interface, obj pkgruntime.Object) (pkgruntime.Object, error) {
0000000000000000000000000000000000000000;;		deployment := obj.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		return client.Extensions().Deployments(deployment.Namespace).Update(deployment)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) ClusterWatch(client kubeclientset.Interface, namespace string, options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return client.Extensions().Deployments(namespace).Watch(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) EquivalentIgnoringSchedule(obj1, obj2 pkgruntime.Object) bool {
0000000000000000000000000000000000000000;;		deployment1 := obj1.(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		deployment2 := a.Copy(obj2).(*extensionsv1.Deployment)
0000000000000000000000000000000000000000;;		deployment2.Spec.Replicas = deployment1.Spec.Replicas
0000000000000000000000000000000000000000;;		return fedutil.DeploymentEquivalent(deployment1, deployment2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *DeploymentAdapter) NewTestObject(namespace string) pkgruntime.Object {
0000000000000000000000000000000000000000;;		replicas := int32(3)
0000000000000000000000000000000000000000;;		zero := int64(0)
0000000000000000000000000000000000000000;;		return &extensionsv1.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				GenerateName: "test-deployment-",
0000000000000000000000000000000000000000;;				Namespace:    namespace,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensionsv1.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: &replicas,
0000000000000000000000000000000000000000;;				Template: apiv1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: apiv1.PodSpec{
0000000000000000000000000000000000000000;;						TerminationGracePeriodSeconds: &zero,
0000000000000000000000000000000000000000;;						Containers: []apiv1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "nginx",
0000000000000000000000000000000000000000;;								Image: "nginx",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
