0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b1343e3fc745b6ff11a2209125b0ee29586a69eb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copies cluster-independent, user provided data from the given ObjectMeta struct. If in
0000000000000000000000000000000000000000;;	// the future the ObjectMeta structure is expanded then any field that is not populated
0000000000000000000000000000000000000000;;	// by the api server should be included here.
0000000000000000000000000000000000000000;;	func copyObjectMeta(obj metav1.ObjectMeta) metav1.ObjectMeta {
0000000000000000000000000000000000000000;;		return metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Name:        obj.Name,
0000000000000000000000000000000000000000;;			Namespace:   obj.Namespace,
0000000000000000000000000000000000000000;;			Labels:      obj.Labels,
0000000000000000000000000000000000000000;;			Annotations: obj.Annotations,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deep copies cluster-independent, user provided data from the given ObjectMeta struct. If in
0000000000000000000000000000000000000000;;	// the future the ObjectMeta structure is expanded then any field that is not populated
0000000000000000000000000000000000000000;;	// by the api server should be included here.
0000000000000000000000000000000000000000;;	func DeepCopyRelevantObjectMeta(obj metav1.ObjectMeta) metav1.ObjectMeta {
0000000000000000000000000000000000000000;;		copyMeta := copyObjectMeta(obj)
0000000000000000000000000000000000000000;;		if obj.Labels != nil {
0000000000000000000000000000000000000000;;			copyMeta.Labels = make(map[string]string)
0000000000000000000000000000000000000000;;			for key, val := range obj.Labels {
0000000000000000000000000000000000000000;;				copyMeta.Labels[key] = val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Annotations != nil {
0000000000000000000000000000000000000000;;			copyMeta.Annotations = make(map[string]string)
0000000000000000000000000000000000000000;;			for key, val := range obj.Annotations {
0000000000000000000000000000000000000000;;				copyMeta.Annotations[key] = val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return copyMeta
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Checks if cluster-independent, user provided data in two given ObjectMeta are equal. If in
0000000000000000000000000000000000000000;;	// the future the ObjectMeta structure is expanded then any field that is not populated
0000000000000000000000000000000000000000;;	// by the api server should be included here.
0000000000000000000000000000000000000000;;	func ObjectMetaEquivalent(a, b metav1.ObjectMeta) bool {
0000000000000000000000000000000000000000;;		if a.Name != b.Name {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a.Namespace != b.Namespace {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(a.Labels, b.Labels) && (len(a.Labels) != 0 || len(b.Labels) != 0) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(a.Annotations, b.Annotations) && (len(a.Annotations) != 0 || len(b.Annotations) != 0) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Checks if cluster-independent, user provided data in ObjectMeta and Spec in two given top
0000000000000000000000000000000000000000;;	// level api objects are equivalent.
0000000000000000000000000000000000000000;;	func ObjectMetaAndSpecEquivalent(a, b runtime.Object) bool {
0000000000000000000000000000000000000000;;		objectMetaA := reflect.ValueOf(a).Elem().FieldByName("ObjectMeta").Interface().(metav1.ObjectMeta)
0000000000000000000000000000000000000000;;		objectMetaB := reflect.ValueOf(b).Elem().FieldByName("ObjectMeta").Interface().(metav1.ObjectMeta)
0000000000000000000000000000000000000000;;		specA := reflect.ValueOf(a).Elem().FieldByName("Spec").Interface()
0000000000000000000000000000000000000000;;		specB := reflect.ValueOf(b).Elem().FieldByName("Spec").Interface()
0000000000000000000000000000000000000000;;		return ObjectMetaEquivalent(objectMetaA, objectMetaB) && reflect.DeepEqual(specA, specB)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeepCopyApiTypeOrPanic(item interface{}) interface{} {
0000000000000000000000000000000000000000;;		result, err := api.Scheme.DeepCopy(item)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
