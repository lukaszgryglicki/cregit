0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bb1d3bda29e0df7a00ac33a5986e8555fdc0bbfa;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		pkgruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		federationapi "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;		kubeclientset "k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		fakekubeclientset "k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fake federation view.
0000000000000000000000000000000000000000;;	type fakeFederationView struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verify that fakeFederationView implements FederationView interface
0000000000000000000000000000000000000000;;	var _ FederationView = &fakeFederationView{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeFederationView) GetClientsetForCluster(clusterName string) (kubeclientset.Interface, error) {
0000000000000000000000000000000000000000;;		return &fakekubeclientset.Clientset{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeFederationView) GetReadyClusters() ([]*federationapi.Cluster, error) {
0000000000000000000000000000000000000000;;		return []*federationapi.Cluster{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeFederationView) GetUnreadyClusters() ([]*federationapi.Cluster, error) {
0000000000000000000000000000000000000000;;		return []*federationapi.Cluster{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeFederationView) GetReadyCluster(name string) (*federationapi.Cluster, bool, error) {
0000000000000000000000000000000000000000;;		return nil, false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeFederationView) ClustersSynced() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeEventRecorder struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeEventRecorder) Event(object pkgruntime.Object, eventtype, reason, message string) {}
0000000000000000000000000000000000000000;;	func (f *fakeEventRecorder) Eventf(object pkgruntime.Object, eventtype, reason, messageFmt string, args ...interface{}) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f *fakeEventRecorder) PastEventf(object pkgruntime.Object, timestamp metav1.Time, eventtype, reason, messageFmt string, args ...interface{}) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFederatedUpdaterOK(t *testing.T) {
0000000000000000000000000000000000000000;;		addChan := make(chan string, 5)
0000000000000000000000000000000000000000;;		updateChan := make(chan string, 5)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		updater := NewFederatedUpdater(&fakeFederationView{}, "foo", time.Minute, &fakeEventRecorder{},
0000000000000000000000000000000000000000;;			func(_ kubeclientset.Interface, obj pkgruntime.Object) error {
0000000000000000000000000000000000000000;;				service := obj.(*apiv1.Service)
0000000000000000000000000000000000000000;;				addChan <- service.Name
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(_ kubeclientset.Interface, obj pkgruntime.Object) error {
0000000000000000000000000000000000000000;;				service := obj.(*apiv1.Service)
0000000000000000000000000000000000000000;;				updateChan <- service.Name
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			noop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := updater.Update([]FederatedOperation{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: OperationTypeAdd,
0000000000000000000000000000000000000000;;				Obj:  makeService("A", "s1"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: OperationTypeUpdate,
0000000000000000000000000000000000000000;;				Obj:  makeService("B", "s2"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		add := <-addChan
0000000000000000000000000000000000000000;;		update := <-updateChan
0000000000000000000000000000000000000000;;		assert.Equal(t, "s1", add)
0000000000000000000000000000000000000000;;		assert.Equal(t, "s2", update)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFederatedUpdaterError(t *testing.T) {
0000000000000000000000000000000000000000;;		updater := NewFederatedUpdater(&fakeFederationView{}, "foo", time.Minute, &fakeEventRecorder{},
0000000000000000000000000000000000000000;;			func(_ kubeclientset.Interface, obj pkgruntime.Object) error {
0000000000000000000000000000000000000000;;				return fmt.Errorf("boom")
0000000000000000000000000000000000000000;;			}, noop, noop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := updater.Update([]FederatedOperation{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: OperationTypeAdd,
0000000000000000000000000000000000000000;;				Obj:  makeService("A", "s1"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: OperationTypeUpdate,
0000000000000000000000000000000000000000;;				Obj:  makeService("B", "s1"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFederatedUpdaterTimeout(t *testing.T) {
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		updater := NewFederatedUpdater(&fakeFederationView{}, "foo", time.Second, &fakeEventRecorder{},
0000000000000000000000000000000000000000;;			func(_ kubeclientset.Interface, obj pkgruntime.Object) error {
0000000000000000000000000000000000000000;;				time.Sleep(time.Minute)
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			noop, noop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := updater.Update([]FederatedOperation{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: OperationTypeAdd,
0000000000000000000000000000000000000000;;				Obj:  makeService("A", "s1"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: OperationTypeUpdate,
0000000000000000000000000000000000000000;;				Obj:  makeService("B", "s1"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		end := time.Now()
0000000000000000000000000000000000000000;;		assert.Error(t, err)
0000000000000000000000000000000000000000;;		assert.True(t, start.Add(10*time.Second).After(end))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeService(cluster, name string) *apiv1.Service {
0000000000000000000000000000000000000000;;		return &apiv1.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: "ns1",
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func noop(_ kubeclientset.Interface, _ pkgruntime.Object) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
