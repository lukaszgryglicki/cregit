0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
242ff660f1729a7b61952df9281a42628b9d1f28;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package eventsink
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		kubev1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		fakefedclientset "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/fake"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/federation/pkg/federation-controller/util/test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEventSink(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeFederationClient := &fakefedclientset.Clientset{}
0000000000000000000000000000000000000000;;		createdChan := make(chan runtime.Object, 100)
0000000000000000000000000000000000000000;;		fakeFederationClient.AddReactor("create", "events", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			createAction := action.(core.CreateAction)
0000000000000000000000000000000000000000;;			obj := createAction.GetObject()
0000000000000000000000000000000000000000;;			createdChan <- obj
0000000000000000000000000000000000000000;;			return true, obj, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		updateChan := make(chan runtime.Object, 100)
0000000000000000000000000000000000000000;;		fakeFederationClient.AddReactor("update", "events", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			updateAction := action.(core.UpdateAction)
0000000000000000000000000000000000000000;;			obj := updateAction.GetObject()
0000000000000000000000000000000000000000;;			updateChan <- obj
0000000000000000000000000000000000000000;;			return true, obj, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		event := clientv1.Event{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "bzium",
0000000000000000000000000000000000000000;;				Namespace: "ns",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sink := NewFederatedEventSink(fakeFederationClient)
0000000000000000000000000000000000000000;;		eventUpdated, err := sink.Create(&event)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		eventV1 := GetObjectFromChan(createdChan).(*kubev1.Event)
0000000000000000000000000000000000000000;;		assert.NotNil(t, eventV1)
0000000000000000000000000000000000000000;;		// Just some simple sanity checks.
0000000000000000000000000000000000000000;;		assert.Equal(t, event.Name, eventV1.Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, event.Name, eventUpdated.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		eventUpdated, err = sink.Update(&event)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		eventV1 = GetObjectFromChan(updateChan).(*kubev1.Event)
0000000000000000000000000000000000000000;;		assert.NotNil(t, eventV1)
0000000000000000000000000000000000000000;;		// Just some simple sanity checks.
0000000000000000000000000000000000000000;;		assert.Equal(t, event.Name, eventV1.Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, event.Name, eventUpdated.Name)
0000000000000000000000000000000000000000;;	}
