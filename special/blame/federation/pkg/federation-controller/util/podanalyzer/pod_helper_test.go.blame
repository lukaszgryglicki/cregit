0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7f289ae92fc1543b01b5131e333e5ec9dc545f2a;federation/pkg/federation-controller/replicaset/pod_helper_test.go[federation/pkg/federation-controller/replicaset/pod_helper_test.go][federation/pkg/federation-controller/util/podanalyzer/pod_helper_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package podanalyzer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		api_v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAnalyze(t *testing.T) {
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		podRunning := newPod("p1",
0000000000000000000000000000000000000000;;			api_v1.PodStatus{
0000000000000000000000000000000000000000;;				Phase: api_v1.PodRunning,
0000000000000000000000000000000000000000;;				Conditions: []api_v1.PodCondition{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Type:   api_v1.PodReady,
0000000000000000000000000000000000000000;;						Status: api_v1.ConditionTrue,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		podUnschedulable := newPod("pU",
0000000000000000000000000000000000000000;;			api_v1.PodStatus{
0000000000000000000000000000000000000000;;				Phase: api_v1.PodPending,
0000000000000000000000000000000000000000;;				Conditions: []api_v1.PodCondition{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Type:               api_v1.PodScheduled,
0000000000000000000000000000000000000000;;						Status:             api_v1.ConditionFalse,
0000000000000000000000000000000000000000;;						Reason:             api_v1.PodReasonUnschedulable,
0000000000000000000000000000000000000000;;						LastTransitionTime: metav1.Time{Time: now.Add(-10 * time.Minute)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		podOther := newPod("pO",
0000000000000000000000000000000000000000;;			api_v1.PodStatus{
0000000000000000000000000000000000000000;;				Phase:      api_v1.PodPending,
0000000000000000000000000000000000000000;;				Conditions: []api_v1.PodCondition{},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := AnalyzePods(&api_v1.PodList{Items: []api_v1.Pod{*podRunning, *podRunning, *podRunning, *podUnschedulable, *podUnschedulable}}, now)
0000000000000000000000000000000000000000;;		assert.Equal(t, PodAnalysisResult{
0000000000000000000000000000000000000000;;			Total:           5,
0000000000000000000000000000000000000000;;			RunningAndReady: 3,
0000000000000000000000000000000000000000;;			Unschedulable:   2,
0000000000000000000000000000000000000000;;		}, result)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result = AnalyzePods(&api_v1.PodList{Items: []api_v1.Pod{*podOther}}, now)
0000000000000000000000000000000000000000;;		assert.Equal(t, PodAnalysisResult{
0000000000000000000000000000000000000000;;			Total:           1,
0000000000000000000000000000000000000000;;			RunningAndReady: 0,
0000000000000000000000000000000000000000;;			Unschedulable:   0,
0000000000000000000000000000000000000000;;		}, result)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newReplicaSet(selectorMap map[string]string) *v1beta1.ReplicaSet {
0000000000000000000000000000000000000000;;		replicas := int32(3)
0000000000000000000000000000000000000000;;		rs := &v1beta1.ReplicaSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foobar",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1beta1.ReplicaSetSpec{
0000000000000000000000000000000000000000;;				Replicas: &replicas,
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: selectorMap},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPod(name string, status api_v1.PodStatus) *api_v1.Pod {
0000000000000000000000000000000000000000;;		return &api_v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: status,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
