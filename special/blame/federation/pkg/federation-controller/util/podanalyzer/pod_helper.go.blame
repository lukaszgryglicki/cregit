0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7f289ae92fc1543b01b5131e333e5ec9dc545f2a;federation/pkg/federation-controller/replicaset/pod_helper.go[federation/pkg/federation-controller/replicaset/pod_helper.go][federation/pkg/federation-controller/util/podanalyzer/pod_helper.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package podanalyzer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		api_v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PodAnalysisResult struct {
0000000000000000000000000000000000000000;;		// Total number of pods created.
0000000000000000000000000000000000000000;;		Total int
0000000000000000000000000000000000000000;;		// Number of pods that are running and ready.
0000000000000000000000000000000000000000;;		RunningAndReady int
0000000000000000000000000000000000000000;;		// Number of pods that have been in unschedulable state for UnshedulableThreshold seconds.
0000000000000000000000000000000000000000;;		Unschedulable int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: Handle other scenarios like pod waiting too long for scheduler etc.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// TODO: make it configurable
0000000000000000000000000000000000000000;;		UnschedulableThreshold = 60 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AnalyzePods calculates how many pods from the list are in one of
0000000000000000000000000000000000000000;;	// the meaningful (from the replica set perspective) states. This function is
0000000000000000000000000000000000000000;;	// a temporary workaround against the current lack of ownerRef in pods.
0000000000000000000000000000000000000000;;	func AnalyzePods(pods *api_v1.PodList, currentTime time.Time) PodAnalysisResult {
0000000000000000000000000000000000000000;;		result := PodAnalysisResult{}
0000000000000000000000000000000000000000;;		for _, pod := range pods.Items {
0000000000000000000000000000000000000000;;			result.Total++
0000000000000000000000000000000000000000;;			for _, condition := range pod.Status.Conditions {
0000000000000000000000000000000000000000;;				if pod.Status.Phase == api_v1.PodRunning {
0000000000000000000000000000000000000000;;					if condition.Type == api_v1.PodReady {
0000000000000000000000000000000000000000;;						result.RunningAndReady++
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else if condition.Type == api_v1.PodScheduled &&
0000000000000000000000000000000000000000;;					condition.Status == api_v1.ConditionFalse &&
0000000000000000000000000000000000000000;;					condition.Reason == api_v1.PodReasonUnschedulable &&
0000000000000000000000000000000000000000;;					condition.LastTransitionTime.Add(UnschedulableThreshold).Before(currentTime) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					result.Unschedulable++
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
