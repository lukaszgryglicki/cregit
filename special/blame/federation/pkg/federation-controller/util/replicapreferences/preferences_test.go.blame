0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
dde989d3ad4fc5a3b743fb48be847f9fcd16706e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package replicapreferences
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		extensionsv1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TestPreferencesAnnotationKey = "federation.kubernetes.io/test-preferences"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetAllocationPreferences(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			testname      string
0000000000000000000000000000000000000000;;			prefs         string
0000000000000000000000000000000000000000;;			obj           runtime.Object
0000000000000000000000000000000000000000;;			errorExpected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testname: "good preferences",
0000000000000000000000000000000000000000;;				prefs: `{"rebalance": true,
0000000000000000000000000000000000000000;;					  "clusters": {
0000000000000000000000000000000000000000;;					    "k8s-1": {"minReplicas": 10, "maxReplicas": 20, "weight": 2},
0000000000000000000000000000000000000000;;					    "*": {"weight": 1}
0000000000000000000000000000000000000000;;					}}`,
0000000000000000000000000000000000000000;;				obj: &extensionsv1.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "test-obj",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						SelfLink:  "/api/v1/namespaces/default/obj/test-obj",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testname: "failed preferences",
0000000000000000000000000000000000000000;;				prefs:    `{`, // bad json
0000000000000000000000000000000000000000;;				obj: &extensionsv1.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "test-obj",
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						SelfLink:  "/api/v1/namespaces/default/obj/test-obj",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errorExpected: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// prepare the objects
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			accessor, _ := meta.Accessor(tc.obj)
0000000000000000000000000000000000000000;;			anno := accessor.GetAnnotations()
0000000000000000000000000000000000000000;;			if anno == nil {
0000000000000000000000000000000000000000;;				anno = make(map[string]string)
0000000000000000000000000000000000000000;;				accessor.SetAnnotations(anno)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			anno[TestPreferencesAnnotationKey] = tc.prefs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// test get preferences
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			pref, err := GetAllocationPreferences(tc.obj, TestPreferencesAnnotationKey)
0000000000000000000000000000000000000000;;			if tc.errorExpected {
0000000000000000000000000000000000000000;;				assert.NotNil(t, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.NotNil(t, pref)
0000000000000000000000000000000000000000;;				assert.Nil(t, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
