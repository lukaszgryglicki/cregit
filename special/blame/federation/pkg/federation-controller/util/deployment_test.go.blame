0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a09bd9b3dae60b7b297ebd8b010ca47a05472cc9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		extensionsv1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		deputils "k8s.io/kubernetes/pkg/controller/deployment/util"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentEquivalent(t *testing.T) {
0000000000000000000000000000000000000000;;		d1 := newDeployment()
0000000000000000000000000000000000000000;;		d2 := newDeployment()
0000000000000000000000000000000000000000;;		d2.Annotations = make(map[string]string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d3 := newDeployment()
0000000000000000000000000000000000000000;;		d3.Annotations = map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d4 := newDeployment()
0000000000000000000000000000000000000000;;		d4.Annotations = map[string]string{deputils.RevisionAnnotation: "9"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.True(t, DeploymentEquivalent(d1, d2))
0000000000000000000000000000000000000000;;		assert.True(t, DeploymentEquivalent(d1, d2))
0000000000000000000000000000000000000000;;		assert.True(t, DeploymentEquivalent(d1, d4))
0000000000000000000000000000000000000000;;		assert.True(t, DeploymentEquivalent(d4, d1))
0000000000000000000000000000000000000000;;		assert.False(t, DeploymentEquivalent(d3, d4))
0000000000000000000000000000000000000000;;		assert.False(t, DeploymentEquivalent(d3, d1))
0000000000000000000000000000000000000000;;		assert.True(t, DeploymentEquivalent(d3, d3))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentCopy(t *testing.T) {
0000000000000000000000000000000000000000;;		d1 := newDeployment()
0000000000000000000000000000000000000000;;		d1.Annotations = map[string]string{deputils.RevisionAnnotation: "9", "a": "b"}
0000000000000000000000000000000000000000;;		d2 := DeepCopyDeployment(d1)
0000000000000000000000000000000000000000;;		assert.True(t, DeploymentEquivalent(d1, d2))
0000000000000000000000000000000000000000;;		assert.Contains(t, d2.Annotations, "a")
0000000000000000000000000000000000000000;;		assert.NotContains(t, d2.Annotations, deputils.RevisionAnnotation)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDeployment() *extensionsv1.Deployment {
0000000000000000000000000000000000000000;;		replicas := int32(5)
0000000000000000000000000000000000000000;;		return &extensionsv1.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "wrr",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				SelfLink:  "/api/v1/namespaces/default/deployments/name123",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensionsv1.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: &replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
