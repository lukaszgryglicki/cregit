0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b3251123332af666eeb2edf006a7eb6ff76fe365;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		pkgruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandlers(t *testing.T) {
0000000000000000000000000000000000000000;;		// There is a single service ns1/s1 in cluster mycluster.
0000000000000000000000000000000000000000;;		service := apiv1.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: "ns1",
0000000000000000000000000000000000000000;;				Name:      "s1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		service2 := apiv1.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: "ns1",
0000000000000000000000000000000000000000;;				Name:      "s1",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					"A": "B",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		triggerChan := make(chan struct{}, 1)
0000000000000000000000000000000000000000;;		triggered := func() bool {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-triggerChan:
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		trigger := NewTriggerOnAllChanges(
0000000000000000000000000000000000000000;;			func(obj pkgruntime.Object) {
0000000000000000000000000000000000000000;;				triggerChan <- struct{}{}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		trigger.OnAdd(&service)
0000000000000000000000000000000000000000;;		assert.True(t, triggered())
0000000000000000000000000000000000000000;;		trigger.OnDelete(&service)
0000000000000000000000000000000000000000;;		assert.True(t, triggered())
0000000000000000000000000000000000000000;;		trigger.OnUpdate(&service, &service)
0000000000000000000000000000000000000000;;		assert.False(t, triggered())
0000000000000000000000000000000000000000;;		trigger.OnUpdate(&service, &service2)
0000000000000000000000000000000000000000;;		assert.True(t, triggered())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		trigger2 := NewTriggerOnMetaAndSpecChanges(
0000000000000000000000000000000000000000;;			func(obj pkgruntime.Object) {
0000000000000000000000000000000000000000;;				triggerChan <- struct{}{}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		trigger2.OnAdd(&service)
0000000000000000000000000000000000000000;;		assert.True(t, triggered())
0000000000000000000000000000000000000000;;		trigger2.OnDelete(&service)
0000000000000000000000000000000000000000;;		assert.True(t, triggered())
0000000000000000000000000000000000000000;;		trigger2.OnUpdate(&service, &service)
0000000000000000000000000000000000000000;;		assert.False(t, triggered())
0000000000000000000000000000000000000000;;		trigger2.OnUpdate(&service, &service2)
0000000000000000000000000000000000000000;;		assert.True(t, triggered())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		service3 := apiv1.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: "ns1",
0000000000000000000000000000000000000000;;				Name:      "s1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: apiv1.ServiceStatus{
0000000000000000000000000000000000000000;;				LoadBalancer: apiv1.LoadBalancerStatus{
0000000000000000000000000000000000000000;;					Ingress: []apiv1.LoadBalancerIngress{{
0000000000000000000000000000000000000000;;						Hostname: "A",
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		trigger2.OnUpdate(&service, &service3)
0000000000000000000000000000000000000000;;		assert.False(t, triggered())
0000000000000000000000000000000000000000;;	}
