0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9c4b1a2e8ad2778f13cc344b8d4d95ca3273faf2;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clusterselector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/selection"
0000000000000000000000000000000000000000;;		federation_v1beta1 "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parses the cluster selector annotation to find out if the object with that annotation should be forwarded to a cluster with the given clusterLabels.
0000000000000000000000000000000000000000;;	func SendToCluster(clusterLabels map[string]string, annotations map[string]string) (bool, error) {
0000000000000000000000000000000000000000;;		// Check if a ClusterSelector annotation exists and send to all clusters when it does not exist
0000000000000000000000000000000000000000;;		val, ok := annotations[federation_v1beta1.FederationClusterSelectorAnnotation]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		selector, err := getSelector(val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return selector.Matches(labels.Set(clusterLabels)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getSelector(annotation string) (labels.Selector, error) {
0000000000000000000000000000000000000000;;		selector := labels.NewSelector()
0000000000000000000000000000000000000000;;		requirements := make([]federation_v1beta1.ClusterSelectorRequirement, 0)
0000000000000000000000000000000000000000;;		err := json.Unmarshal([]byte(annotation), &requirements)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, requirement := range requirements {
0000000000000000000000000000000000000000;;			r, err := labels.NewRequirement(requirement.Key, ConvertOperator(requirement.Operator), requirement.Values)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				// Stop processing and assume failure since we have no way of knowing the end users intent for this or any other clusters.
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector = selector.Add(*r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return selector, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConvertOperator converts a string operator into selection.Operator type
0000000000000000000000000000000000000000;;	func ConvertOperator(source string) selection.Operator {
0000000000000000000000000000000000000000;;		var op selection.Operator
0000000000000000000000000000000000000000;;		switch source {
0000000000000000000000000000000000000000;;		case "!", "DoesNotExist":
0000000000000000000000000000000000000000;;			op = selection.DoesNotExist
0000000000000000000000000000000000000000;;		case "=":
0000000000000000000000000000000000000000;;			op = selection.Equals
0000000000000000000000000000000000000000;;		case "==":
0000000000000000000000000000000000000000;;			op = selection.DoubleEquals
0000000000000000000000000000000000000000;;		case "in", "In":
0000000000000000000000000000000000000000;;			op = selection.In
0000000000000000000000000000000000000000;;		case "!=":
0000000000000000000000000000000000000000;;			op = selection.NotEquals
0000000000000000000000000000000000000000;;		case "notin", "NotIn":
0000000000000000000000000000000000000000;;			op = selection.NotIn
0000000000000000000000000000000000000000;;		case "exists", "Exists":
0000000000000000000000000000000000000000;;			op = selection.Exists
0000000000000000000000000000000000000000;;		case "gt", "Gt", ">":
0000000000000000000000000000000000000000;;			op = selection.GreaterThan
0000000000000000000000000000000000000000;;		case "lt", "Lt", "<":
0000000000000000000000000000000000000000;;			op = selection.LessThan
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return op
0000000000000000000000000000000000000000;;	}
