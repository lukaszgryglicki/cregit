0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9c4b1a2e8ad2778f13cc344b8d4d95ca3273faf2;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clusterselector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		federationapi "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSendToCluster(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterLabels := map[string]string{
0000000000000000000000000000000000000000;;			"location":    "europe",
0000000000000000000000000000000000000000;;			"environment": "prod",
0000000000000000000000000000000000000000;;			"version":     "15",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			objectAnnotations map[string]string
0000000000000000000000000000000000000000;;			expectedResult    bool
0000000000000000000000000000000000000000;;			expectedErr       bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"match with single annotation": {
0000000000000000000000000000000000000000;;				objectAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					federationapi.FederationClusterSelectorAnnotation: `[{"key": "location", "operator": "in", "values": ["europe"]}]`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedResult: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match on multiple annotations": {
0000000000000000000000000000000000000000;;				objectAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					federationapi.FederationClusterSelectorAnnotation: `[{"key": "location", "operator": "in", "values": ["europe"]}, {"key": "environment", "operator": "==", "values": ["prod"]}]`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedResult: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"mismatch on one annotation": {
0000000000000000000000000000000000000000;;				objectAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					federationapi.FederationClusterSelectorAnnotation: `[{"key": "location", "operator": "in", "values": ["europe"]}, {"key": "environment", "operator": "==", "values": ["test"]}]`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedResult: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match on not equal annotation": {
0000000000000000000000000000000000000000;;				objectAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					federationapi.FederationClusterSelectorAnnotation: `[{"key": "location", "operator": "!=", "values": ["usa"]}, {"key": "environment", "operator": "in", "values": ["prod"]}]`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedResult: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match on greater than annotation": {
0000000000000000000000000000000000000000;;				objectAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					federationapi.FederationClusterSelectorAnnotation: `[{"key": "version", "operator": ">", "values": ["14"]}]`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedResult: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"mismatch on greater than annotation": {
0000000000000000000000000000000000000000;;				objectAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					federationapi.FederationClusterSelectorAnnotation: `[{"key": "version", "operator": ">", "values": ["15"]}]`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedResult: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"unable to parse annotation": {
0000000000000000000000000000000000000000;;				objectAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					federationapi.FederationClusterSelectorAnnotation: `[{"not able to parse",}]`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedResult: false,
0000000000000000000000000000000000000000;;				expectedErr:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			t.Run(testName, func(t *testing.T) {
0000000000000000000000000000000000000000;;				result, err := SendToCluster(clusterLabels, testCase.objectAnnotations)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if testCase.expectedErr {
0000000000000000000000000000000000000000;;					require.Error(t, err, "An error was expected")
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					require.NoError(t, err, "An error was not expected")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				require.Equal(t, testCase.expectedResult, result, "Unexpected response from SendToCluster")
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
