0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a09bd9b3dae60b7b297ebd8b010ca47a05472cc9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		extensions_v1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		deputils "k8s.io/kubernetes/pkg/controller/deployment/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Checks if cluster-independent, user provided data in two given Deployment are equal.
0000000000000000000000000000000000000000;;	// This function assumes that revisions are not kept in sync across the clusters.
0000000000000000000000000000000000000000;;	func DeploymentEquivalent(a, b *extensions_v1.Deployment) bool {
0000000000000000000000000000000000000000;;		if a.Name != b.Name {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a.Namespace != b.Namespace {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(a.Labels, b.Labels) && (len(a.Labels) != 0 || len(b.Labels) != 0) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		hasKeysAndVals := func(x, y map[string]string) bool {
0000000000000000000000000000000000000000;;			if x == nil {
0000000000000000000000000000000000000000;;				x = map[string]string{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if y == nil {
0000000000000000000000000000000000000000;;				y = map[string]string{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k, v := range x {
0000000000000000000000000000000000000000;;				if k == deputils.RevisionAnnotation {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				v2, found := y[k]
0000000000000000000000000000000000000000;;				if !found || v != v2 {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return hasKeysAndVals(a.Annotations, b.Annotations) &&
0000000000000000000000000000000000000000;;			hasKeysAndVals(b.Annotations, a.Annotations) &&
0000000000000000000000000000000000000000;;			reflect.DeepEqual(a.Spec, b.Spec)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copies object meta for Deployment, skipping revision information.
0000000000000000000000000000000000000000;;	func DeepCopyDeploymentObjectMeta(meta metav1.ObjectMeta) metav1.ObjectMeta {
0000000000000000000000000000000000000000;;		meta = DeepCopyRelevantObjectMeta(meta)
0000000000000000000000000000000000000000;;		delete(meta.Annotations, deputils.RevisionAnnotation)
0000000000000000000000000000000000000000;;		return meta
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copies object meta for Deployment, skipping revision information.
0000000000000000000000000000000000000000;;	func DeepCopyDeployment(a *extensions_v1.Deployment) *extensions_v1.Deployment {
0000000000000000000000000000000000000000;;		return &extensions_v1.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: DeepCopyDeploymentObjectMeta(a.ObjectMeta),
0000000000000000000000000000000000000000;;			Spec:       *(DeepCopyApiTypeOrPanic(&a.Spec).(*extensions_v1.DeploymentSpec)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
