0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
275a0c2d375354d1aa4cbf523866b8e364fdb32b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Helper functions for manipulating finalizers.
0000000000000000000000000000000000000000;;	package finalizers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		meta "k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HasFinalizer returns true if the given object has the given finalizer in its ObjectMeta.
0000000000000000000000000000000000000000;;	func HasFinalizer(obj runtime.Object, finalizer string) (bool, error) {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		finalizers := sets.NewString(accessor.GetFinalizers()...)
0000000000000000000000000000000000000000;;		return finalizers.Has(finalizer), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddFinalizers adds the given finalizers to the given objects ObjectMeta.
0000000000000000000000000000000000000000;;	// Returns true if the object was updated.
0000000000000000000000000000000000000000;;	func AddFinalizers(obj runtime.Object, newFinalizers sets.String) (bool, error) {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldFinalizers := sets.NewString(accessor.GetFinalizers()...)
0000000000000000000000000000000000000000;;		if oldFinalizers.IsSuperset(newFinalizers) {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		allFinalizers := oldFinalizers.Union(newFinalizers)
0000000000000000000000000000000000000000;;		accessor.SetFinalizers(allFinalizers.List())
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveFinalizers removes the given finalizers from the given objects ObjectMeta.
0000000000000000000000000000000000000000;;	// Returns true if the object was updated.
0000000000000000000000000000000000000000;;	func RemoveFinalizers(obj runtime.Object, finalizers sets.String) (bool, error) {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldFinalizers := sets.NewString(accessor.GetFinalizers()...)
0000000000000000000000000000000000000000;;		if oldFinalizers.Intersection(finalizers).Len() == 0 {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newFinalizers := oldFinalizers.Difference(finalizers)
0000000000000000000000000000000000000000;;		accessor.SetFinalizers(newFinalizers.List())
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
