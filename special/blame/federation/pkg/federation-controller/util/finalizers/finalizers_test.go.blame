0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ef04ad3bc52b625991c9c405c89e4e5cb6bd1c1f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package finalizers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		meta "k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newObj(finalizers []string) runtime.Object {
0000000000000000000000000000000000000000;;		pod := v1.Pod{}
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Finalizers = finalizers
0000000000000000000000000000000000000000;;		return &pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHasFinalizer(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			obj       runtime.Object
0000000000000000000000000000000000000000;;			finalizer string
0000000000000000000000000000000000000000;;			result    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{}),
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{}),
0000000000000000000000000000000000000000;;				"someFinalizer",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer"}),
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer"}),
0000000000000000000000000000000000000000;;				"anotherFinalizer",
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer"}),
0000000000000000000000000000000000000000;;				"someFinalizer",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"anotherFinalizer", "someFinalizer"}),
0000000000000000000000000000000000000000;;				"someFinalizer",
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for index, test := range testCases {
0000000000000000000000000000000000000000;;			hasFinalizer, _ := HasFinalizer(test.obj, test.finalizer)
0000000000000000000000000000000000000000;;			assert.Equal(t, hasFinalizer, test.result, fmt.Sprintf("Test case %d failed. Expected: %v, actual: %v", index, test.result, hasFinalizer))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddFinalizers(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			obj           runtime.Object
0000000000000000000000000000000000000000;;			finalizers    sets.String
0000000000000000000000000000000000000000;;			isUpdated     bool
0000000000000000000000000000000000000000;;			newFinalizers []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{}),
0000000000000000000000000000000000000000;;				sets.NewString(),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{}),
0000000000000000000000000000000000000000;;				sets.NewString("someFinalizer"),
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				[]string{"someFinalizer"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer"}),
0000000000000000000000000000000000000000;;				sets.NewString(),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]string{"someFinalizer"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer"}),
0000000000000000000000000000000000000000;;				sets.NewString("anotherFinalizer"),
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				[]string{"anotherFinalizer", "someFinalizer"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer"}),
0000000000000000000000000000000000000000;;				sets.NewString("someFinalizer"),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]string{"someFinalizer"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for index, test := range testCases {
0000000000000000000000000000000000000000;;			isUpdated, _ := AddFinalizers(test.obj, test.finalizers)
0000000000000000000000000000000000000000;;			assert.Equal(t, isUpdated, test.isUpdated, fmt.Sprintf("Test case %d failed. Expected isUpdated: %v, actual: %v", index, test.isUpdated, isUpdated))
0000000000000000000000000000000000000000;;			accessor, _ := meta.Accessor(test.obj)
0000000000000000000000000000000000000000;;			newFinalizers := accessor.GetFinalizers()
0000000000000000000000000000000000000000;;			assert.Equal(t, test.newFinalizers, newFinalizers, fmt.Sprintf("Test case %d failed. Expected finalizers: %v, actual: %v", index, test.newFinalizers, newFinalizers))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRemoveFinalizers(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			obj           runtime.Object
0000000000000000000000000000000000000000;;			finalizers    sets.String
0000000000000000000000000000000000000000;;			isUpdated     bool
0000000000000000000000000000000000000000;;			newFinalizers []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{}),
0000000000000000000000000000000000000000;;				sets.NewString(),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{}),
0000000000000000000000000000000000000000;;				sets.NewString("someFinalizer"),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer"}),
0000000000000000000000000000000000000000;;				sets.NewString(),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]string{"someFinalizer"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer"}),
0000000000000000000000000000000000000000;;				sets.NewString("anotherFinalizer"),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]string{"someFinalizer"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				newObj([]string{"someFinalizer", "anotherFinalizer"}),
0000000000000000000000000000000000000000;;				sets.NewString("someFinalizer"),
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				[]string{"anotherFinalizer"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for index, test := range testCases {
0000000000000000000000000000000000000000;;			isUpdated, _ := RemoveFinalizers(test.obj, test.finalizers)
0000000000000000000000000000000000000000;;			assert.Equal(t, isUpdated, test.isUpdated, fmt.Sprintf("Test case %d failed. Expected isUpdated: %v, actual: %v", index, test.isUpdated, isUpdated))
0000000000000000000000000000000000000000;;			accessor, _ := meta.Accessor(test.obj)
0000000000000000000000000000000000000000;;			newFinalizers := accessor.GetFinalizers()
0000000000000000000000000000000000000000;;			assert.Equal(t, test.newFinalizers, newFinalizers, fmt.Sprintf("Test case %d failed. Expected finalizers: %v, actual: %v", index, test.newFinalizers, newFinalizers))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
