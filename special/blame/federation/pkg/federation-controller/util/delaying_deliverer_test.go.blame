0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c5071fc886c1402e8b03f62bb1f678f50cdf3069;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelayingDeliverer(t *testing.T) {
0000000000000000000000000000000000000000;;		targetChannel := make(chan *DelayingDelivererItem)
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		d := NewDelayingDelivererWithChannel(targetChannel)
0000000000000000000000000000000000000000;;		d.Start()
0000000000000000000000000000000000000000;;		defer d.Stop()
0000000000000000000000000000000000000000;;		startupDelay := time.Second
0000000000000000000000000000000000000000;;		d.DeliverAt("a", "aaa", now.Add(startupDelay+2*time.Millisecond))
0000000000000000000000000000000000000000;;		d.DeliverAt("b", "bbb", now.Add(startupDelay+3*time.Millisecond))
0000000000000000000000000000000000000000;;		d.DeliverAt("c", "ccc", now.Add(startupDelay+1*time.Millisecond))
0000000000000000000000000000000000000000;;		d.DeliverAt("e", "eee", now.Add(time.Hour))
0000000000000000000000000000000000000000;;		d.DeliverAt("e", "eee", now)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.DeliverAt("d", "ddd", now.Add(time.Hour))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		i0 := <-targetChannel
0000000000000000000000000000000000000000;;		assert.Equal(t, "e", i0.Key)
0000000000000000000000000000000000000000;;		assert.Equal(t, "eee", i0.Value.(string))
0000000000000000000000000000000000000000;;		assert.Equal(t, now, i0.DeliveryTime)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		i1 := <-targetChannel
0000000000000000000000000000000000000000;;		received1 := time.Now()
0000000000000000000000000000000000000000;;		assert.True(t, received1.Sub(now).Nanoseconds() > startupDelay.Nanoseconds())
0000000000000000000000000000000000000000;;		assert.Equal(t, "c", i1.Key)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		i2 := <-targetChannel
0000000000000000000000000000000000000000;;		assert.Equal(t, "a", i2.Key)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		i3 := <-targetChannel
0000000000000000000000000000000000000000;;		assert.Equal(t, "b", i3.Key)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-targetChannel:
0000000000000000000000000000000000000000;;			t.Fatalf("Nothing should be received")
0000000000000000000000000000000000000000;;		case <-time.After(time.Second):
0000000000000000000000000000000000000000;;			// Ok. Expected
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
