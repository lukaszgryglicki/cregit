0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b3251123332af666eeb2edf006a7eb6ff76fe365;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		pkgruntime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns cache.ResourceEventHandlerFuncs that trigger the given function
0000000000000000000000000000000000000000;;	// on all object changes.
0000000000000000000000000000000000000000;;	func NewTriggerOnAllChanges(triggerFunc func(pkgruntime.Object)) *cache.ResourceEventHandlerFuncs {
0000000000000000000000000000000000000000;;		return &cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;			DeleteFunc: func(old interface{}) {
0000000000000000000000000000000000000000;;				oldObj := old.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				triggerFunc(oldObj)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AddFunc: func(cur interface{}) {
0000000000000000000000000000000000000000;;				curObj := cur.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				triggerFunc(curObj)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			UpdateFunc: func(old, cur interface{}) {
0000000000000000000000000000000000000000;;				curObj := cur.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(old, cur) {
0000000000000000000000000000000000000000;;					triggerFunc(curObj)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns cache.ResourceEventHandlerFuncs that trigger the given function
0000000000000000000000000000000000000000;;	// on object add and delete as well as spec/object meta on update.
0000000000000000000000000000000000000000;;	func NewTriggerOnMetaAndSpecChanges(triggerFunc func(pkgruntime.Object)) *cache.ResourceEventHandlerFuncs {
0000000000000000000000000000000000000000;;		getFieldOrPanic := func(obj interface{}, fieldName string) interface{} {
0000000000000000000000000000000000000000;;			val := reflect.ValueOf(obj).Elem().FieldByName(fieldName)
0000000000000000000000000000000000000000;;			if val.IsValid() {
0000000000000000000000000000000000000000;;				return val.Interface()
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				panic(fmt.Errorf("field not found: %s", fieldName))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;			DeleteFunc: func(old interface{}) {
0000000000000000000000000000000000000000;;				oldObj := old.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				triggerFunc(oldObj)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AddFunc: func(cur interface{}) {
0000000000000000000000000000000000000000;;				curObj := cur.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				triggerFunc(curObj)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			UpdateFunc: func(old, cur interface{}) {
0000000000000000000000000000000000000000;;				curObj := cur.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				oldMeta := getFieldOrPanic(old, "ObjectMeta").(metav1.ObjectMeta)
0000000000000000000000000000000000000000;;				curMeta := getFieldOrPanic(cur, "ObjectMeta").(metav1.ObjectMeta)
0000000000000000000000000000000000000000;;				if !ObjectMetaEquivalent(oldMeta, curMeta) ||
0000000000000000000000000000000000000000;;					!reflect.DeepEqual(getFieldOrPanic(old, "Spec"), getFieldOrPanic(cur, "Spec")) {
0000000000000000000000000000000000000000;;					triggerFunc(curObj)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns cache.ResourceEventHandlerFuncs that trigger the given function
0000000000000000000000000000000000000000;;	// on object add/delete or ObjectMeta or given field is updated.
0000000000000000000000000000000000000000;;	func NewTriggerOnMetaAndFieldChanges(field string, triggerFunc func(pkgruntime.Object)) *cache.ResourceEventHandlerFuncs {
0000000000000000000000000000000000000000;;		getFieldOrPanic := func(obj interface{}, fieldName string) interface{} {
0000000000000000000000000000000000000000;;			val := reflect.ValueOf(obj).Elem().FieldByName(fieldName)
0000000000000000000000000000000000000000;;			if val.IsValid() {
0000000000000000000000000000000000000000;;				return val.Interface()
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				panic(fmt.Errorf("field not found: %s", fieldName))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;			DeleteFunc: func(old interface{}) {
0000000000000000000000000000000000000000;;				oldObj := old.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				triggerFunc(oldObj)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			AddFunc: func(cur interface{}) {
0000000000000000000000000000000000000000;;				curObj := cur.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				triggerFunc(curObj)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			UpdateFunc: func(old, cur interface{}) {
0000000000000000000000000000000000000000;;				curObj := cur.(pkgruntime.Object)
0000000000000000000000000000000000000000;;				oldMeta := getFieldOrPanic(old, "ObjectMeta").(metav1.ObjectMeta)
0000000000000000000000000000000000000000;;				curMeta := getFieldOrPanic(cur, "ObjectMeta").(metav1.ObjectMeta)
0000000000000000000000000000000000000000;;				if !ObjectMetaEquivalent(oldMeta, curMeta) ||
0000000000000000000000000000000000000000;;					!reflect.DeepEqual(getFieldOrPanic(old, field), getFieldOrPanic(cur, field)) {
0000000000000000000000000000000000000000;;					triggerFunc(curObj)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
