0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
834bb730525e247a2cf07a423e58424709ad0996;federation/pkg/federation-controller/replicaset/planner/planner_test.go[federation/pkg/federation-controller/replicaset/planner/planner_test.go][federation/pkg/federation-controller/util/planner/planner_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package planner
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fedapi "k8s.io/kubernetes/federation/apis/federation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doCheck(t *testing.T, pref map[string]fedapi.ClusterPreferences, replicas int64, clusters []string, expected map[string]int64) {
0000000000000000000000000000000000000000;;		planer := NewPlanner(&fedapi.ReplicaAllocationPreferences{
0000000000000000000000000000000000000000;;			Clusters: pref,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		plan, overflow := planer.Plan(replicas, clusters, map[string]int64{}, map[string]int64{}, "")
0000000000000000000000000000000000000000;;		assert.EqualValues(t, expected, plan)
0000000000000000000000000000000000000000;;		assert.Equal(t, 0, len(overflow))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doCheckWithExisting(t *testing.T, pref map[string]fedapi.ClusterPreferences, replicas int64, clusters []string,
0000000000000000000000000000000000000000;;		existing map[string]int64, expected map[string]int64) {
0000000000000000000000000000000000000000;;		planer := NewPlanner(&fedapi.ReplicaAllocationPreferences{
0000000000000000000000000000000000000000;;			Clusters: pref,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		plan, overflow := planer.Plan(replicas, clusters, existing, map[string]int64{}, "")
0000000000000000000000000000000000000000;;		assert.Equal(t, 0, len(overflow))
0000000000000000000000000000000000000000;;		assert.EqualValues(t, expected, plan)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doCheckWithExistingAndCapacity(t *testing.T, rebalance bool, pref map[string]fedapi.ClusterPreferences, replicas int64, clusters []string,
0000000000000000000000000000000000000000;;		existing map[string]int64,
0000000000000000000000000000000000000000;;		capacity map[string]int64,
0000000000000000000000000000000000000000;;		expected map[string]int64,
0000000000000000000000000000000000000000;;		expectedOverflow map[string]int64) {
0000000000000000000000000000000000000000;;		planer := NewPlanner(&fedapi.ReplicaAllocationPreferences{
0000000000000000000000000000000000000000;;			Rebalance: rebalance,
0000000000000000000000000000000000000000;;			Clusters:  pref,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		plan, overflow := planer.Plan(replicas, clusters, existing, capacity, "")
0000000000000000000000000000000000000000;;		assert.EqualValues(t, expected, plan)
0000000000000000000000000000000000000000;;		assert.Equal(t, expectedOverflow, overflow)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pint(val int64) *int64 {
0000000000000000000000000000000000000000;;		return &val
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEqual(t *testing.T) {
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			// hash dependent
0000000000000000000000000000000000000000;;			map[string]int64{"A": 16, "B": 17, "C": 17})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 25, "B": 25})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			1, []string{"A", "B"},
0000000000000000000000000000000000000000;;			// hash dependent
0000000000000000000000000000000000000000;;			map[string]int64{"A": 0, "B": 1})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			1, []string{"A", "B", "C", "D"},
0000000000000000000000000000000000000000;;			// hash dependent
0000000000000000000000000000000000000000;;			map[string]int64{"A": 0, "B": 0, "C": 0, "D": 1})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			1, []string{"A"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 1})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			1, []string{},
0000000000000000000000000000000000000000;;			map[string]int64{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEqualWithExisting(t *testing.T) {
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"C": 30},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 10, "C": 30})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 30},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 30, "B": 20})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			15, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 0, "B": 8},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 7, "B": 8})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			15, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 1, "B": 8},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 7, "B": 8})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			15, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 4, "B": 8},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 7, "B": 8})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			15, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 5, "B": 8},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 7, "B": 8})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			15, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 6, "B": 8},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 7, "B": 8})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			15, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 7, "B": 8},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 7, "B": 8})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			500000, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 300000},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 300000, "B": 200000})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 25, "B": 25})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 70},
0000000000000000000000000000000000000000;;			// hash dependent
0000000000000000000000000000000000000000;;			// TODO: Should be 10:40, update algorithm. Issue: #31816
0000000000000000000000000000000000000000;;			map[string]int64{"A": 0, "B": 50})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			1, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 30},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 1, "B": 0})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExisting(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 20},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 25, "B": 25})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWithExistingAndCapacity(t *testing.T) {
0000000000000000000000000000000000000000;;		// desired without capacity: map[string]int64{"A": 17, "B": 17, "C": 16})
0000000000000000000000000000000000000000;;		doCheckWithExistingAndCapacity(t, true, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{},
0000000000000000000000000000000000000000;;			map[string]int64{"C": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 20, "B": 20, "C": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"C": 7})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// desired B:50 C:0
0000000000000000000000000000000000000000;;		doCheckWithExistingAndCapacity(t, true, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 10000},
0000000000000000000000000000000000000000;;			"B": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 10, "C": 0},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 40},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// desired A:20 B:40
0000000000000000000000000000000000000000;;		doCheckWithExistingAndCapacity(t, true, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 1},
0000000000000000000000000000000000000000;;			"B": {Weight: 2}},
0000000000000000000000000000000000000000;;			60, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 50, "B": 10, "C": 0},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 30})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// map[string]int64{"A": 10, "B": 30, "C": 21, "D": 10})
0000000000000000000000000000000000000000;;		doCheckWithExistingAndCapacity(t, true, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 10000, MaxReplicas: pint(10)},
0000000000000000000000000000000000000000;;			"B": {Weight: 1},
0000000000000000000000000000000000000000;;			"C": {Weight: 1, MaxReplicas: pint(21)},
0000000000000000000000000000000000000000;;			"D": {Weight: 1, MaxReplicas: pint(10)}},
0000000000000000000000000000000000000000;;			71, []string{"A", "B", "C", "D"},
0000000000000000000000000000000000000000;;			map[string]int64{},
0000000000000000000000000000000000000000;;			map[string]int64{"C": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 41, "C": 10, "D": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"C": 11},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// desired A:20 B:20
0000000000000000000000000000000000000000;;		doCheckWithExistingAndCapacity(t, false, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 1},
0000000000000000000000000000000000000000;;			"B": {Weight: 1}},
0000000000000000000000000000000000000000;;			60, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 10, "C": 0},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 20, "B": 20})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// desired A:10 B:50 although A:50 B:10 is fuly acceptable because rebalance = false
0000000000000000000000000000000000000000;;		doCheckWithExistingAndCapacity(t, false, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 1},
0000000000000000000000000000000000000000;;			"B": {Weight: 5}},
0000000000000000000000000000000000000000;;			60, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 50, "B": 10, "C": 0},
0000000000000000000000000000000000000000;;			map[string]int64{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheckWithExistingAndCapacity(t, false, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {MinReplicas: 20, Weight: 0}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 20, "B": 10, "C": 20},
0000000000000000000000000000000000000000;;			map[string]int64{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Actually we would like to have extra 20 in B but 15 is also good.
0000000000000000000000000000000000000000;;		doCheckWithExistingAndCapacity(t, true, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {MinReplicas: 20, Weight: 1}},
0000000000000000000000000000000000000000;;			60, []string{"A", "B"},
0000000000000000000000000000000000000000;;			map[string]int64{},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 50, "B": 10},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 15})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMin(t *testing.T) {
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {MinReplicas: 2, Weight: 0}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 2, "B": 2, "C": 2})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {MinReplicas: 20, Weight: 0}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			// hash dependant.
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 20, "C": 20})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {MinReplicas: 20, Weight: 0},
0000000000000000000000000000000000000000;;			"A": {MinReplicas: 100, Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 50, "B": 0, "C": 0})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {MinReplicas: 10, Weight: 1, MaxReplicas: pint(12)}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 12, "B": 12, "C": 12})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMax(t *testing.T) {
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 1, MaxReplicas: pint(2)}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 2, "B": 2, "C": 2})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"*": {Weight: 0, MaxReplicas: pint(2)}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 0, "B": 0, "C": 0})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWeight(t *testing.T) {
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 1},
0000000000000000000000000000000000000000;;			"B": {Weight: 2}},
0000000000000000000000000000000000000000;;			60, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 20, "B": 40, "C": 0})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 10000},
0000000000000000000000000000000000000000;;			"B": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 50, "B": 0, "C": 0})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 10000},
0000000000000000000000000000000000000000;;			"B": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"B": 50, "C": 0})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 10000, MaxReplicas: pint(10)},
0000000000000000000000000000000000000000;;			"B": {Weight: 1},
0000000000000000000000000000000000000000;;			"C": {Weight: 1}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 20, "C": 20})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 10000, MaxReplicas: pint(10)},
0000000000000000000000000000000000000000;;			"B": {Weight: 1},
0000000000000000000000000000000000000000;;			"C": {Weight: 1, MaxReplicas: pint(10)}},
0000000000000000000000000000000000000000;;			50, []string{"A", "B", "C"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 30, "C": 10})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 10000, MaxReplicas: pint(10)},
0000000000000000000000000000000000000000;;			"B": {Weight: 1},
0000000000000000000000000000000000000000;;			"C": {Weight: 1, MaxReplicas: pint(21)},
0000000000000000000000000000000000000000;;			"D": {Weight: 1, MaxReplicas: pint(10)}},
0000000000000000000000000000000000000000;;			71, []string{"A", "B", "C", "D"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 30, "C": 21, "D": 10})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doCheck(t, map[string]fedapi.ClusterPreferences{
0000000000000000000000000000000000000000;;			"A": {Weight: 10000, MaxReplicas: pint(10)},
0000000000000000000000000000000000000000;;			"B": {Weight: 1},
0000000000000000000000000000000000000000;;			"C": {Weight: 1, MaxReplicas: pint(21)},
0000000000000000000000000000000000000000;;			"D": {Weight: 1, MaxReplicas: pint(10)},
0000000000000000000000000000000000000000;;			"E": {Weight: 1}},
0000000000000000000000000000000000000000;;			91, []string{"A", "B", "C", "D", "E"},
0000000000000000000000000000000000000000;;			map[string]int64{"A": 10, "B": 25, "C": 21, "D": 10, "E": 25})
0000000000000000000000000000000000000000;;	}
