0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b1343e3fc745b6ff11a2209125b0ee29586a69eb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		api_v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestObjectMeta(t *testing.T) {
0000000000000000000000000000000000000000;;		o1 := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Namespace:       "ns1",
0000000000000000000000000000000000000000;;			Name:            "s1",
0000000000000000000000000000000000000000;;			UID:             "1231231412",
0000000000000000000000000000000000000000;;			ResourceVersion: "999",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o2 := copyObjectMeta(o1)
0000000000000000000000000000000000000000;;		o3 := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Namespace:   "ns1",
0000000000000000000000000000000000000000;;			Name:        "s1",
0000000000000000000000000000000000000000;;			UID:         "1231231412",
0000000000000000000000000000000000000000;;			Annotations: map[string]string{"A": "B"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o4 := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Namespace:   "ns1",
0000000000000000000000000000000000000000;;			Name:        "s1",
0000000000000000000000000000000000000000;;			UID:         "1231255531412",
0000000000000000000000000000000000000000;;			Annotations: map[string]string{"A": "B"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o5 := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Namespace:       "ns1",
0000000000000000000000000000000000000000;;			Name:            "s1",
0000000000000000000000000000000000000000;;			ResourceVersion: "1231231412",
0000000000000000000000000000000000000000;;			Annotations:     map[string]string{"A": "B"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o6 := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Namespace:       "ns1",
0000000000000000000000000000000000000000;;			Name:            "s1",
0000000000000000000000000000000000000000;;			ResourceVersion: "1231255531412",
0000000000000000000000000000000000000000;;			Annotations:     map[string]string{"A": "B"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o7 := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Namespace:       "ns1",
0000000000000000000000000000000000000000;;			Name:            "s1",
0000000000000000000000000000000000000000;;			ResourceVersion: "1231255531412",
0000000000000000000000000000000000000000;;			Annotations:     map[string]string{},
0000000000000000000000000000000000000000;;			Labels:          map[string]string{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o8 := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Namespace:       "ns1",
0000000000000000000000000000000000000000;;			Name:            "s1",
0000000000000000000000000000000000000000;;			ResourceVersion: "1231255531412",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, 0, len(o2.UID))
0000000000000000000000000000000000000000;;		assert.Equal(t, 0, len(o2.ResourceVersion))
0000000000000000000000000000000000000000;;		assert.Equal(t, o1.Name, o2.Name)
0000000000000000000000000000000000000000;;		assert.True(t, ObjectMetaEquivalent(o1, o2))
0000000000000000000000000000000000000000;;		assert.False(t, ObjectMetaEquivalent(o1, o3))
0000000000000000000000000000000000000000;;		assert.True(t, ObjectMetaEquivalent(o3, o4))
0000000000000000000000000000000000000000;;		assert.True(t, ObjectMetaEquivalent(o5, o6))
0000000000000000000000000000000000000000;;		assert.True(t, ObjectMetaEquivalent(o3, o5))
0000000000000000000000000000000000000000;;		assert.True(t, ObjectMetaEquivalent(o7, o8))
0000000000000000000000000000000000000000;;		assert.True(t, ObjectMetaEquivalent(o8, o7))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestObjectMetaAndSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		s1 := api_v1.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: "ns1",
0000000000000000000000000000000000000000;;				Name:      "s1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api_v1.ServiceSpec{
0000000000000000000000000000000000000000;;				ExternalName: "Service1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1b := s1
0000000000000000000000000000000000000000;;		s2 := api_v1.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: "ns1",
0000000000000000000000000000000000000000;;				Name:      "s2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api_v1.ServiceSpec{
0000000000000000000000000000000000000000;;				ExternalName: "Service1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s3 := api_v1.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: "ns1",
0000000000000000000000000000000000000000;;				Name:      "s1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api_v1.ServiceSpec{
0000000000000000000000000000000000000000;;				ExternalName: "Service2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.True(t, ObjectMetaAndSpecEquivalent(&s1, &s1b))
0000000000000000000000000000000000000000;;		assert.False(t, ObjectMetaAndSpecEquivalent(&s1, &s2))
0000000000000000000000000000000000000000;;		assert.False(t, ObjectMetaAndSpecEquivalent(&s1, &s3))
0000000000000000000000000000000000000000;;		assert.False(t, ObjectMetaAndSpecEquivalent(&s2, &s3))
0000000000000000000000000000000000000000;;	}
