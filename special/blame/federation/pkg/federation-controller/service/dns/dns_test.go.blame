0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2b19eb167bd80af2b6ba0366936aa848688725bd;federation/pkg/federation-controller/service/dns_test.go[federation/pkg/federation-controller/service/dns_test.go][federation/pkg/federation-controller/service/dns/dns_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dns
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;		fakefedclientset "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/dnsprovider/providers/google/clouddns" // Only for unit testing purposes.
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/federation-controller/service/ingress"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/federation/pkg/federation-controller/util/test"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClusterWithRegionZone builds a new cluster object with given region and zone attributes.
0000000000000000000000000000000000000000;;	func NewClusterWithRegionZone(name string, readyStatus v1.ConditionStatus, region, zone string) *v1beta1.Cluster {
0000000000000000000000000000000000000000;;		cluster := NewCluster(name, readyStatus)
0000000000000000000000000000000000000000;;		cluster.Status.Zones = []string{zone}
0000000000000000000000000000000000000000;;		cluster.Status.Region = region
0000000000000000000000000000000000000000;;		return cluster
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServiceController_ensureDnsRecords(t *testing.T) {
0000000000000000000000000000000000000000;;		cluster1Name := "c1"
0000000000000000000000000000000000000000;;		cluster2Name := "c2"
0000000000000000000000000000000000000000;;		cluster1 := NewClusterWithRegionZone(cluster1Name, v1.ConditionTrue, "fooregion", "foozone")
0000000000000000000000000000000000000000;;		cluster2 := NewClusterWithRegionZone(cluster2Name, v1.ConditionTrue, "barregion", "barzone")
0000000000000000000000000000000000000000;;		globalDNSName := "servicename.servicenamespace.myfederation.svc.federation.example.com"
0000000000000000000000000000000000000000;;		fooRegionDNSName := "servicename.servicenamespace.myfederation.svc.fooregion.federation.example.com"
0000000000000000000000000000000000000000;;		fooZoneDNSName := "servicename.servicenamespace.myfederation.svc.foozone.fooregion.federation.example.com"
0000000000000000000000000000000000000000;;		barRegionDNSName := "servicename.servicenamespace.myfederation.svc.barregion.federation.example.com"
0000000000000000000000000000000000000000;;		barZoneDNSName := "servicename.servicenamespace.myfederation.svc.barzone.barregion.federation.example.com"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			service  v1.Service
0000000000000000000000000000000000000000;;			expected []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ServiceWithSingleLBIngress",
0000000000000000000000000000000000000000;;				service: v1.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{
0000000000000000000000000000000000000000;;						ingress.FederatedServiceIngressAnnotation: ingress.NewFederatedServiceIngress().
0000000000000000000000000000000000000000;;							AddEndpoints(cluster1Name, []string{"198.51.100.1"}).
0000000000000000000000000000000000000000;;							AddEndpoints(cluster2Name, []string{}).
0000000000000000000000000000000000000000;;							String()},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []string{
0000000000000000000000000000000000000000;;					"example.com:" + globalDNSName + ":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					"example.com:" + fooRegionDNSName + ":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					"example.com:" + fooZoneDNSName + ":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					"example.com:" + barRegionDNSName + ":CNAME:180:[" + globalDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + barZoneDNSName + ":CNAME:180:[" + barRegionDNSName + "]",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			/*
0000000000000000000000000000000000000000;;				TODO: getResolvedEndpoints preforms DNS lookup.
0000000000000000000000000000000000000000;;				Mock and maybe look at error handling when some endpoints resolve, but also caching?
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					name: "withname",
0000000000000000000000000000000000000000;;					service: v1.Service{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					expected: []string{
0000000000000000000000000000000000000000;;						"example.com:"+globalDNSName+":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;						"example.com:"+fooRegionDNSName+":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;						"example.com:"+fooZoneDNSName+":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			*/
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ServiceWithNoLBIngress",
0000000000000000000000000000000000000000;;				service: v1.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{
0000000000000000000000000000000000000000;;						ingress.FederatedServiceIngressAnnotation: ingress.NewFederatedServiceIngress().
0000000000000000000000000000000000000000;;							AddEndpoints(cluster1Name, []string{}).
0000000000000000000000000000000000000000;;							AddEndpoints(cluster2Name, []string{}).
0000000000000000000000000000000000000000;;							String()},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []string{
0000000000000000000000000000000000000000;;					"example.com:" + fooRegionDNSName + ":CNAME:180:[" + globalDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + fooZoneDNSName + ":CNAME:180:[" + fooRegionDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + barRegionDNSName + ":CNAME:180:[" + globalDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + barZoneDNSName + ":CNAME:180:[" + barRegionDNSName + "]",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ServiceWithMultipleLBIngress",
0000000000000000000000000000000000000000;;				service: v1.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{
0000000000000000000000000000000000000000;;						ingress.FederatedServiceIngressAnnotation: ingress.NewFederatedServiceIngress().
0000000000000000000000000000000000000000;;							AddEndpoints(cluster1Name, []string{"198.51.100.1"}).
0000000000000000000000000000000000000000;;							AddEndpoints(cluster2Name, []string{"198.51.200.1"}).
0000000000000000000000000000000000000000;;							String()},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []string{
0000000000000000000000000000000000000000;;					"example.com:" + globalDNSName + ":A:180:[198.51.100.1 198.51.200.1]",
0000000000000000000000000000000000000000;;					"example.com:" + fooRegionDNSName + ":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					"example.com:" + fooZoneDNSName + ":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					"example.com:" + barRegionDNSName + ":A:180:[198.51.200.1]",
0000000000000000000000000000000000000000;;					"example.com:" + barZoneDNSName + ":A:180:[198.51.200.1]",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ServiceWithLBIngressAndServiceDeleted",
0000000000000000000000000000000000000000;;				service: v1.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{
0000000000000000000000000000000000000000;;						ingress.FederatedServiceIngressAnnotation: ingress.NewFederatedServiceIngress().
0000000000000000000000000000000000000000;;							AddEndpoints(cluster1Name, []string{"198.51.100.1"}).
0000000000000000000000000000000000000000;;							AddEndpoints(cluster2Name, []string{"198.51.200.1"}).
0000000000000000000000000000000000000000;;							String()},
0000000000000000000000000000000000000000;;						DeletionTimestamp: &metav1.Time{Time: time.Now()},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []string{
0000000000000000000000000000000000000000;;					// TODO: Ideally we should expect that there are no DNS records when federated service is deleted. Need to remove these leaks in future
0000000000000000000000000000000000000000;;					"example.com:" + fooRegionDNSName + ":CNAME:180:[" + globalDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + fooZoneDNSName + ":CNAME:180:[" + fooRegionDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + barRegionDNSName + ":CNAME:180:[" + globalDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + barZoneDNSName + ":CNAME:180:[" + barRegionDNSName + "]",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ServiceWithMultipleLBIngressAndOneLBIngressGettingRemoved",
0000000000000000000000000000000000000000;;				service: v1.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{
0000000000000000000000000000000000000000;;						ingress.FederatedServiceIngressAnnotation: ingress.NewFederatedServiceIngress().
0000000000000000000000000000000000000000;;							AddEndpoints(cluster1Name, []string{"198.51.100.1"}).
0000000000000000000000000000000000000000;;							AddEndpoints(cluster2Name, []string{"198.51.200.1"}).
0000000000000000000000000000000000000000;;							RemoveEndpoint(cluster2Name, "198.51.200.1").
0000000000000000000000000000000000000000;;							String()},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []string{
0000000000000000000000000000000000000000;;					"example.com:" + globalDNSName + ":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					"example.com:" + fooRegionDNSName + ":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					"example.com:" + fooZoneDNSName + ":A:180:[198.51.100.1]",
0000000000000000000000000000000000000000;;					"example.com:" + barRegionDNSName + ":CNAME:180:[" + globalDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + barZoneDNSName + ":CNAME:180:[" + barRegionDNSName + "]",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "ServiceWithMultipleLBIngressAndAllLBIngressGettingRemoved",
0000000000000000000000000000000000000000;;				service: v1.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{
0000000000000000000000000000000000000000;;						ingress.FederatedServiceIngressAnnotation: ingress.NewFederatedServiceIngress().
0000000000000000000000000000000000000000;;							AddEndpoints(cluster1Name, []string{"198.51.100.1"}).
0000000000000000000000000000000000000000;;							AddEndpoints(cluster2Name, []string{"198.51.200.1"}).
0000000000000000000000000000000000000000;;							RemoveEndpoint(cluster1Name, "198.51.100.1").
0000000000000000000000000000000000000000;;							RemoveEndpoint(cluster2Name, "198.51.200.1").
0000000000000000000000000000000000000000;;							String()},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []string{
0000000000000000000000000000000000000000;;					"example.com:" + fooRegionDNSName + ":CNAME:180:[" + globalDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + fooZoneDNSName + ":CNAME:180:[" + fooRegionDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + barRegionDNSName + ":CNAME:180:[" + globalDNSName + "]",
0000000000000000000000000000000000000000;;					"example.com:" + barZoneDNSName + ":CNAME:180:[" + barRegionDNSName + "]",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fakedns, _ := clouddns.NewFakeInterface()
0000000000000000000000000000000000000000;;			fakednsZones, ok := fakedns.Zones()
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Error("Unable to fetch zones")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fakeClient := &fakefedclientset.Clientset{}
0000000000000000000000000000000000000000;;			RegisterFakeClusterGet(&fakeClient.Fake, &v1beta1.ClusterList{Items: []v1beta1.Cluster{*cluster1, *cluster2}})
0000000000000000000000000000000000000000;;			d := ServiceDNSController{
0000000000000000000000000000000000000000;;				federationClient: fakeClient,
0000000000000000000000000000000000000000;;				dns:              fakedns,
0000000000000000000000000000000000000000;;				dnsZones:         fakednsZones,
0000000000000000000000000000000000000000;;				serviceDNSSuffix: "federation.example.com",
0000000000000000000000000000000000000000;;				zoneName:         "example.com",
0000000000000000000000000000000000000000;;				federationName:   "myfederation",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			dnsZones, err := getDNSZones(d.zoneName, d.zoneID, d.dnsZones)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Test failed for %s, Get DNS Zones failed: %v", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			d.dnsZone = dnsZones[0]
0000000000000000000000000000000000000000;;			test.service.Name = "servicename"
0000000000000000000000000000000000000000;;			test.service.Namespace = "servicenamespace"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ingress, err := ingress.ParseFederatedServiceIngress(&test.service)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Error in parsing lb ingress for service %s/%s: %v", test.service.Namespace, test.service.Name, err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, clusterIngress := range ingress.Items {
0000000000000000000000000000000000000000;;				d.ensureDNSRecords(clusterIngress.Cluster, &test.service)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			zones, err := fakednsZones.List()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("error querying zones: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Dump every record to a testable-by-string-comparison form
0000000000000000000000000000000000000000;;			records := []string{}
0000000000000000000000000000000000000000;;			for _, z := range zones {
0000000000000000000000000000000000000000;;				zoneName := z.Name()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				rrs, ok := z.ResourceRecordSets()
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					t.Errorf("cannot get rrs for zone %q", zoneName)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				rrList, err := rrs.List()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("error querying rr for zone %q: %v", zoneName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for _, rr := range rrList {
0000000000000000000000000000000000000000;;					rrdatas := rr.Rrdatas()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Put in consistent (testable-by-string-comparison) order
0000000000000000000000000000000000000000;;					sort.Strings(rrdatas)
0000000000000000000000000000000000000000;;					records = append(records, fmt.Sprintf("%s:%s:%s:%d:%s", zoneName, rr.Name(), rr.Type(), rr.Ttl(), rrdatas))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Ignore order of records
0000000000000000000000000000000000000000;;			sort.Strings(records)
0000000000000000000000000000000000000000;;			sort.Strings(test.expected)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(records, test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("Test %q failed.  Actual=%v, Expected=%v", test.name, records, test.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
