0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6759dd73aec9ff5b9611f3a1cacb87f980b10742;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		federation_v1beta1 "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/federation-controller/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		kubeletapis "k8s.io/kubernetes/pkg/kubelet/apis"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		UserAgentName = "Cluster-Controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterClient struct {
0000000000000000000000000000000000000000;;		discoveryClient *discovery.DiscoveryClient
0000000000000000000000000000000000000000;;		kubeClient      *clientset.Clientset
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewClusterClientSet(c *federation_v1beta1.Cluster) (*ClusterClient, error) {
0000000000000000000000000000000000000000;;		clusterConfig, err := util.BuildClusterConfig(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var clusterClientSet = ClusterClient{}
0000000000000000000000000000000000000000;;		if clusterConfig != nil {
0000000000000000000000000000000000000000;;			clusterClientSet.discoveryClient = discovery.NewDiscoveryClientForConfigOrDie((restclient.AddUserAgent(clusterConfig, UserAgentName)))
0000000000000000000000000000000000000000;;			if clusterClientSet.discoveryClient == nil {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			clusterClientSet.kubeClient = clientset.NewForConfigOrDie((restclient.AddUserAgent(clusterConfig, UserAgentName)))
0000000000000000000000000000000000000000;;			if clusterClientSet.kubeClient == nil {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &clusterClientSet, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetClusterHealthStatus gets the kubernetes cluster health status by requesting "/healthz"
0000000000000000000000000000000000000000;;	func (self *ClusterClient) GetClusterHealthStatus() *federation_v1beta1.ClusterStatus {
0000000000000000000000000000000000000000;;		clusterStatus := federation_v1beta1.ClusterStatus{}
0000000000000000000000000000000000000000;;		currentTime := metav1.Now()
0000000000000000000000000000000000000000;;		newClusterReadyCondition := federation_v1beta1.ClusterCondition{
0000000000000000000000000000000000000000;;			Type:               federation_v1beta1.ClusterReady,
0000000000000000000000000000000000000000;;			Status:             v1.ConditionTrue,
0000000000000000000000000000000000000000;;			Reason:             "ClusterReady",
0000000000000000000000000000000000000000;;			Message:            "/healthz responded with ok",
0000000000000000000000000000000000000000;;			LastProbeTime:      currentTime,
0000000000000000000000000000000000000000;;			LastTransitionTime: currentTime,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newClusterNotReadyCondition := federation_v1beta1.ClusterCondition{
0000000000000000000000000000000000000000;;			Type:               federation_v1beta1.ClusterReady,
0000000000000000000000000000000000000000;;			Status:             v1.ConditionFalse,
0000000000000000000000000000000000000000;;			Reason:             "ClusterNotReady",
0000000000000000000000000000000000000000;;			Message:            "/healthz responded without ok",
0000000000000000000000000000000000000000;;			LastProbeTime:      currentTime,
0000000000000000000000000000000000000000;;			LastTransitionTime: currentTime,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newNodeOfflineCondition := federation_v1beta1.ClusterCondition{
0000000000000000000000000000000000000000;;			Type:               federation_v1beta1.ClusterOffline,
0000000000000000000000000000000000000000;;			Status:             v1.ConditionTrue,
0000000000000000000000000000000000000000;;			Reason:             "ClusterNotReachable",
0000000000000000000000000000000000000000;;			Message:            "cluster is not reachable",
0000000000000000000000000000000000000000;;			LastProbeTime:      currentTime,
0000000000000000000000000000000000000000;;			LastTransitionTime: currentTime,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newNodeNotOfflineCondition := federation_v1beta1.ClusterCondition{
0000000000000000000000000000000000000000;;			Type:               federation_v1beta1.ClusterOffline,
0000000000000000000000000000000000000000;;			Status:             v1.ConditionFalse,
0000000000000000000000000000000000000000;;			Reason:             "ClusterReachable",
0000000000000000000000000000000000000000;;			Message:            "cluster is reachable",
0000000000000000000000000000000000000000;;			LastProbeTime:      currentTime,
0000000000000000000000000000000000000000;;			LastTransitionTime: currentTime,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		body, err := self.discoveryClient.RESTClient().Get().AbsPath("/healthz").Do().Raw()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			clusterStatus.Conditions = append(clusterStatus.Conditions, newNodeOfflineCondition)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if !strings.EqualFold(string(body), "ok") {
0000000000000000000000000000000000000000;;				clusterStatus.Conditions = append(clusterStatus.Conditions, newClusterNotReadyCondition, newNodeNotOfflineCondition)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				clusterStatus.Conditions = append(clusterStatus.Conditions, newClusterReadyCondition)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &clusterStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetClusterZones gets the kubernetes cluster zones and region by inspecting labels on nodes in the cluster.
0000000000000000000000000000000000000000;;	func (self *ClusterClient) GetClusterZones() (zones []string, region string, err error) {
0000000000000000000000000000000000000000;;		return getZoneNames(self.kubeClient)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Find the name of the zone in which a Node is running
0000000000000000000000000000000000000000;;	func getZoneNameForNode(node api.Node) (string, error) {
0000000000000000000000000000000000000000;;		for key, value := range node.Labels {
0000000000000000000000000000000000000000;;			if key == kubeletapis.LabelZoneFailureDomain {
0000000000000000000000000000000000000000;;				return value, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("Zone name for node %s not found. No label with key %s",
0000000000000000000000000000000000000000;;			node.Name, kubeletapis.LabelZoneFailureDomain)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Find the name of the region in which a Node is running
0000000000000000000000000000000000000000;;	func getRegionNameForNode(node api.Node) (string, error) {
0000000000000000000000000000000000000000;;		for key, value := range node.Labels {
0000000000000000000000000000000000000000;;			if key == kubeletapis.LabelZoneRegion {
0000000000000000000000000000000000000000;;				return value, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("Region name for node %s not found. No label with key %s",
0000000000000000000000000000000000000000;;			node.Name, kubeletapis.LabelZoneRegion)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Find the names of all zones and the region in which we have nodes in this cluster.
0000000000000000000000000000000000000000;;	func getZoneNames(client *clientset.Clientset) (zones []string, region string, err error) {
0000000000000000000000000000000000000000;;		zoneNames := sets.NewString()
0000000000000000000000000000000000000000;;		nodes, err := client.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to list nodes while getting zone names: %v", err)
0000000000000000000000000000000000000000;;			return nil, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, node := range nodes.Items {
0000000000000000000000000000000000000000;;			// TODO: quinton-hoole make this more efficient.
0000000000000000000000000000000000000000;;			//       For non-multi-zone clusters the zone will
0000000000000000000000000000000000000000;;			//       be identical for all nodes, so we only need to look at one node
0000000000000000000000000000000000000000;;			//       For multi-zone clusters we know at build time
0000000000000000000000000000000000000000;;			//       which zones are included.  Rather get this info from there, because it's cheaper.
0000000000000000000000000000000000000000;;			zoneName, err := getZoneNameForNode(node)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, "", err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			zoneNames.Insert(zoneName)
0000000000000000000000000000000000000000;;			if i == 0 {
0000000000000000000000000000000000000000;;				region, err = getRegionNameForNode(node)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, "", err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return zoneNames.List(), region, nil
0000000000000000000000000000000000000000;;	}
