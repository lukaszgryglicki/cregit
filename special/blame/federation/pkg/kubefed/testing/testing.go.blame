0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a3df83ba74c0b0e4508bcffa32cfd612eafeefce;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		fedclient "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/kubefed/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeAdminConfig struct {
0000000000000000000000000000000000000000;;		pathOptions          *clientcmd.PathOptions
0000000000000000000000000000000000000000;;		hostFactory          cmdutil.Factory
0000000000000000000000000000000000000000;;		targetClusterFactory cmdutil.Factory
0000000000000000000000000000000000000000;;		targetClusterContext string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeAdminConfig(hostFactory cmdutil.Factory, targetFactory cmdutil.Factory, targetClusterContext, kubeconfigGlobal string) (util.AdminConfig, error) {
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = kubeconfigGlobal
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &fakeAdminConfig{
0000000000000000000000000000000000000000;;			pathOptions:          pathOptions,
0000000000000000000000000000000000000000;;			hostFactory:          hostFactory,
0000000000000000000000000000000000000000;;			targetClusterFactory: targetFactory,
0000000000000000000000000000000000000000;;			targetClusterContext: targetClusterContext,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAdminConfig) PathOptions() *clientcmd.PathOptions {
0000000000000000000000000000000000000000;;		return f.pathOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAdminConfig) FederationClientset(context, kubeconfigPath string) (*fedclient.Clientset, error) {
0000000000000000000000000000000000000000;;		fakeRestClient, err := f.hostFactory.RESTClient()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// we ignore the function params and use the client from
0000000000000000000000000000000000000000;;		// the same fakefactory to create a federation clientset
0000000000000000000000000000000000000000;;		// our fake factory exposes only the healthz api for this client
0000000000000000000000000000000000000000;;		return fedclient.New(fakeRestClient), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAdminConfig) ClusterFactory(context, kubeconfigPath string) cmdutil.Factory {
0000000000000000000000000000000000000000;;		if f.targetClusterContext != "" && f.targetClusterContext == context {
0000000000000000000000000000000000000000;;			return f.targetClusterFactory
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.hostFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FakeKubeconfigFiles() ([]string, error) {
0000000000000000000000000000000000000000;;		kubeconfigs := []clientcmdapi.Config{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;					"syndicate": {
0000000000000000000000000000000000000000;;						Server: "https://10.20.30.40",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;					"syndicate": {
0000000000000000000000000000000000000000;;						Token: "badge",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;					"syndicate": {
0000000000000000000000000000000000000000;;						Cluster:  "syndicate",
0000000000000000000000000000000000000000;;						AuthInfo: "syndicate",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				CurrentContext: "syndicate",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;					"ally": {
0000000000000000000000000000000000000000;;						Server: "ally256.example.com:80",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;					"ally": {
0000000000000000000000000000000000000000;;						Token: "souvenir",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;					"ally": {
0000000000000000000000000000000000000000;;						Cluster:  "ally",
0000000000000000000000000000000000000000;;						AuthInfo: "ally",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				CurrentContext: "ally",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;					"ally": {
0000000000000000000000000000000000000000;;						Server: "https://ally64.example.com",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"confederate": {
0000000000000000000000000000000000000000;;						Server: "10.8.8.8",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;					"ally": {
0000000000000000000000000000000000000000;;						Token: "souvenir",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"confederate": {
0000000000000000000000000000000000000000;;						Token: "totem",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;					"ally": {
0000000000000000000000000000000000000000;;						Cluster:  "ally",
0000000000000000000000000000000000000000;;						AuthInfo: "ally",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"confederate": {
0000000000000000000000000000000000000000;;						Cluster:  "confederate",
0000000000000000000000000000000000000000;;						AuthInfo: "confederate",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				CurrentContext: "confederate",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kubefiles := []string{}
0000000000000000000000000000000000000000;;		for _, cfg := range kubeconfigs {
0000000000000000000000000000000000000000;;			fakeKubeFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;			err := clientcmd.WriteToFile(cfg, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			kubefiles = append(kubefiles, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return kubefiles, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RemoveFakeKubeconfigFiles(kubefiles []string) {
0000000000000000000000000000000000000000;;		for _, file := range kubefiles {
0000000000000000000000000000000000000000;;			os.Remove(file)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DefaultHeader() http.Header {
0000000000000000000000000000000000000000;;		header := http.Header{}
0000000000000000000000000000000000000000;;		header.Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;		return header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ObjBody(codec runtime.Codec, obj runtime.Object) io.ReadCloser {
0000000000000000000000000000000000000000;;		return ioutil.NopCloser(bytes.NewReader([]byte(runtime.EncodeOrDie(codec, obj))))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DefaultClientConfig() *restclient.Config {
0000000000000000000000000000000000000000;;		return &restclient.Config{
0000000000000000000000000000000000000000;;			APIPath: "/api",
0000000000000000000000000000000000000000;;			ContentConfig: restclient.ContentConfig{
0000000000000000000000000000000000000000;;				NegotiatedSerializer: api.Codecs,
0000000000000000000000000000000000000000;;				ContentType:          runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				GroupVersion:         &api.Registry.GroupOrDie(api.GroupName).GroupVersion,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
