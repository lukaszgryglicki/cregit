0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a1c955fa49be8ce1046864c695bb7c3f450a6ebf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubefed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		kubefedinit "k8s.io/kubernetes/federation/pkg/kubefed/init"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/kubefed/util"
0000000000000000000000000000000000000000;;		kubectl "k8s.io/kubernetes/pkg/kubectl/cmd"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewKubeFedCommand creates the `kubefed` command and its nested children.
0000000000000000000000000000000000000000;;	func NewKubeFedCommand(f cmdutil.Factory, in io.Reader, out, err io.Writer, defaultServerImage, defaultEtcdImage string) *cobra.Command {
0000000000000000000000000000000000000000;;		// Parent command to which all subcommands are added.
0000000000000000000000000000000000000000;;		cmds := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "kubefed",
0000000000000000000000000000000000000000;;			Short: "kubefed controls a Kubernetes Cluster Federation",
0000000000000000000000000000000000000000;;			Long: templates.LongDesc(`
0000000000000000000000000000000000000000;;	      kubefed controls a Kubernetes Cluster Federation.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      Find more information at https://github.com/kubernetes/kubernetes.`),
0000000000000000000000000000000000000000;;			Run: runHelp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.BindFlags(cmds.PersistentFlags())
0000000000000000000000000000000000000000;;		f.BindExternalFlags(cmds.PersistentFlags())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// From this point and forward we get warnings on flags that contain "_" separators
0000000000000000000000000000000000000000;;		cmds.SetGlobalNormalizationFunc(flag.WarnWordSepNormalizeFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groups := templates.CommandGroups{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Message: "Basic Commands:",
0000000000000000000000000000000000000000;;				Commands: []*cobra.Command{
0000000000000000000000000000000000000000;;					kubefedinit.NewCmdInit(out, util.NewAdminConfig(clientcmd.NewDefaultPathOptions()), defaultServerImage, defaultEtcdImage),
0000000000000000000000000000000000000000;;					NewCmdJoin(f, out, util.NewAdminConfig(clientcmd.NewDefaultPathOptions())),
0000000000000000000000000000000000000000;;					NewCmdUnjoin(f, out, err, util.NewAdminConfig(clientcmd.NewDefaultPathOptions())),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		groups.Add(cmds)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		filters := []string{
0000000000000000000000000000000000000000;;			"options",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		templates.ActsAsRootCommand(cmds, filters, groups...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmds.AddCommand(kubectl.NewCmdVersion(f, out))
0000000000000000000000000000000000000000;;		cmds.AddCommand(kubectl.NewCmdOptions(out))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func runHelp(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;		cmd.Help()
0000000000000000000000000000000000000000;;	}
