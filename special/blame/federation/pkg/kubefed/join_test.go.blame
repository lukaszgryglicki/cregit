0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
eae64d20b7a3effc664b3a5f4b303f686d64fb00;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubefed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		rbacv1beta1 "k8s.io/api/rbac/v1beta1"
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/dynamic"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/apis/federation"
0000000000000000000000000000000000000000;;		federationapi "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;		kubefedtesting "k8s.io/kubernetes/federation/pkg/kubefed/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/pkg/kubefed/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		k8srbacv1beta1 "k8s.io/kubernetes/pkg/apis/rbac/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// testFederationName is a name to use for the federation in tests. Since the federation
0000000000000000000000000000000000000000;;		// name is recovered from the federation itself, this constant is an appropriate
0000000000000000000000000000000000000000;;		// functional replica.
0000000000000000000000000000000000000000;;		testFederationName = "test-federation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		zoneName      = "test-dns-zone"
0000000000000000000000000000000000000000;;		coreDNSServer = "11.22.33.44:53"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJoinFederation(t *testing.T) {
0000000000000000000000000000000000000000;;		cmdErrMsg := ""
0000000000000000000000000000000000000000;;		cmdutil.BehaviorOnFatal(func(str string, code int) {
0000000000000000000000000000000000000000;;			cmdErrMsg = str
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeKubeFiles, err := kubefedtesting.FakeKubeconfigFiles()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer kubefedtesting.RemoveFakeKubeconfigFiles(fakeKubeFiles)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			cluster            string
0000000000000000000000000000000000000000;;			clusterCtx         string
0000000000000000000000000000000000000000;;			secret             string
0000000000000000000000000000000000000000;;			server             string
0000000000000000000000000000000000000000;;			token              string
0000000000000000000000000000000000000000;;			kubeconfigGlobal   string
0000000000000000000000000000000000000000;;			kubeconfigExplicit string
0000000000000000000000000000000000000000;;			expectedServer     string
0000000000000000000000000000000000000000;;			expectedErr        string
0000000000000000000000000000000000000000;;			dnsProvider        string
0000000000000000000000000000000000000000;;			isRBACAPIAvailable bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cluster:            "syndicate",
0000000000000000000000000000000000000000;;				clusterCtx:         "",
0000000000000000000000000000000000000000;;				server:             "https://10.20.30.40",
0000000000000000000000000000000000000000;;				token:              "badge",
0000000000000000000000000000000000000000;;				kubeconfigGlobal:   fakeKubeFiles[0],
0000000000000000000000000000000000000000;;				kubeconfigExplicit: "",
0000000000000000000000000000000000000000;;				expectedServer:     "https://10.20.30.40",
0000000000000000000000000000000000000000;;				expectedErr:        "",
0000000000000000000000000000000000000000;;				dnsProvider:        util.FedDNSProviderCoreDNS,
0000000000000000000000000000000000000000;;				isRBACAPIAvailable: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cluster:            "syndicate",
0000000000000000000000000000000000000000;;				clusterCtx:         "",
0000000000000000000000000000000000000000;;				secret:             "",
0000000000000000000000000000000000000000;;				server:             "https://10.20.30.40",
0000000000000000000000000000000000000000;;				token:              "badge",
0000000000000000000000000000000000000000;;				kubeconfigGlobal:   fakeKubeFiles[0],
0000000000000000000000000000000000000000;;				kubeconfigExplicit: "",
0000000000000000000000000000000000000000;;				expectedServer:     "https://10.20.30.40",
0000000000000000000000000000000000000000;;				expectedErr:        "",
0000000000000000000000000000000000000000;;				isRBACAPIAvailable: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cluster:            "ally",
0000000000000000000000000000000000000000;;				clusterCtx:         "",
0000000000000000000000000000000000000000;;				server:             "ally256.example.com:80",
0000000000000000000000000000000000000000;;				token:              "souvenir",
0000000000000000000000000000000000000000;;				kubeconfigGlobal:   fakeKubeFiles[0],
0000000000000000000000000000000000000000;;				kubeconfigExplicit: fakeKubeFiles[1],
0000000000000000000000000000000000000000;;				expectedServer:     "https://ally256.example.com:80",
0000000000000000000000000000000000000000;;				expectedErr:        "",
0000000000000000000000000000000000000000;;				isRBACAPIAvailable: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cluster:            "confederate",
0000000000000000000000000000000000000000;;				clusterCtx:         "",
0000000000000000000000000000000000000000;;				server:             "10.8.8.8",
0000000000000000000000000000000000000000;;				token:              "totem",
0000000000000000000000000000000000000000;;				kubeconfigGlobal:   fakeKubeFiles[1],
0000000000000000000000000000000000000000;;				kubeconfigExplicit: fakeKubeFiles[2],
0000000000000000000000000000000000000000;;				expectedServer:     "https://10.8.8.8",
0000000000000000000000000000000000000000;;				expectedErr:        "",
0000000000000000000000000000000000000000;;				isRBACAPIAvailable: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cluster:            "associate",
0000000000000000000000000000000000000000;;				clusterCtx:         "confederate",
0000000000000000000000000000000000000000;;				server:             "10.8.8.8",
0000000000000000000000000000000000000000;;				token:              "totem",
0000000000000000000000000000000000000000;;				kubeconfigGlobal:   fakeKubeFiles[1],
0000000000000000000000000000000000000000;;				kubeconfigExplicit: fakeKubeFiles[2],
0000000000000000000000000000000000000000;;				expectedServer:     "https://10.8.8.8",
0000000000000000000000000000000000000000;;				expectedErr:        "",
0000000000000000000000000000000000000000;;				isRBACAPIAvailable: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cluster:            "affiliate",
0000000000000000000000000000000000000000;;				clusterCtx:         "",
0000000000000000000000000000000000000000;;				server:             "https://10.20.30.40",
0000000000000000000000000000000000000000;;				token:              "badge",
0000000000000000000000000000000000000000;;				kubeconfigGlobal:   fakeKubeFiles[0],
0000000000000000000000000000000000000000;;				kubeconfigExplicit: "",
0000000000000000000000000000000000000000;;				expectedServer:     "https://10.20.30.40",
0000000000000000000000000000000000000000;;				expectedErr:        fmt.Sprintf("error: cluster context %q not found", "affiliate"),
0000000000000000000000000000000000000000;;				isRBACAPIAvailable: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				cluster:            "associate",
0000000000000000000000000000000000000000;;				clusterCtx:         "confederate",
0000000000000000000000000000000000000000;;				secret:             "confidential",
0000000000000000000000000000000000000000;;				server:             "10.8.8.8",
0000000000000000000000000000000000000000;;				token:              "totem",
0000000000000000000000000000000000000000;;				kubeconfigGlobal:   fakeKubeFiles[1],
0000000000000000000000000000000000000000;;				kubeconfigExplicit: fakeKubeFiles[2],
0000000000000000000000000000000000000000;;				expectedServer:     "https://10.8.8.8",
0000000000000000000000000000000000000000;;				expectedErr:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			cmdErrMsg = ""
0000000000000000000000000000000000000000;;			f := testJoinFederationFactory(tc.cluster, tc.secret, tc.expectedServer, tc.isRBACAPIAvailable)
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			hostFactory, err := fakeJoinHostFactory(tc.cluster, tc.clusterCtx, tc.secret, tc.server, tc.token, tc.dnsProvider, tc.isRBACAPIAvailable)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("[%d] unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// The fake discovery client caches results by default, so invalidate it by modifying the temporary directory.
0000000000000000000000000000000000000000;;			// Refer to pkg/kubectl/cmd/testing/fake (fakeAPIFactory.DiscoveryClient()) for details of tmpDir
0000000000000000000000000000000000000000;;			tmpDirPath, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("[%d] unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer os.Remove(tmpDirPath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			targetClusterFactory, err := fakeJoinTargetClusterFactory(tc.cluster, tc.clusterCtx, tc.dnsProvider, tmpDirPath, tc.isRBACAPIAvailable)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("[%d] unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			targetClusterContext := tc.clusterCtx
0000000000000000000000000000000000000000;;			if targetClusterContext == "" {
0000000000000000000000000000000000000000;;				targetClusterContext = tc.cluster
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			adminConfig, err := kubefedtesting.NewFakeAdminConfig(hostFactory, targetClusterFactory, targetClusterContext, tc.kubeconfigGlobal)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("[%d] unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cmd := NewCmdJoin(f, buf, adminConfig)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cmd.Flags().Set("kubeconfig", tc.kubeconfigExplicit)
0000000000000000000000000000000000000000;;			cmd.Flags().Set("host-cluster-context", "substrate")
0000000000000000000000000000000000000000;;			if tc.clusterCtx != "" {
0000000000000000000000000000000000000000;;				cmd.Flags().Set("cluster-context", tc.clusterCtx)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.secret != "" {
0000000000000000000000000000000000000000;;				cmd.Flags().Set("secret-name", tc.secret)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cmd.Run(cmd, []string{tc.cluster})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.expectedErr == "" {
0000000000000000000000000000000000000000;;				// uses the name from the cluster, not the response
0000000000000000000000000000000000000000;;				// Actual data passed are tested in the fake secret and cluster
0000000000000000000000000000000000000000;;				// REST clients.
0000000000000000000000000000000000000000;;				if msg := buf.String(); msg != fmt.Sprintf("cluster %q created\n", tc.cluster) {
0000000000000000000000000000000000000000;;					t.Errorf("[%d] unexpected output: %s", i, msg)
0000000000000000000000000000000000000000;;					if cmdErrMsg != "" {
0000000000000000000000000000000000000000;;						t.Errorf("[%d] unexpected error message: %s", i, cmdErrMsg)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if cmdErrMsg != tc.expectedErr {
0000000000000000000000000000000000000000;;					t.Errorf("[%d] expected error: %s, got: %s, output: %s", i, tc.expectedErr, cmdErrMsg, buf.String())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testJoinFederationFactory(clusterName, secretName, server string, isRBACAPIAvailable bool) cmdutil.Factory {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		want := fakeCluster(clusterName, secretName, server, isRBACAPIAvailable)
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		codec := testapi.Federation.Codec()
0000000000000000000000000000000000000000;;		ns := dynamic.ContentConfig().NegotiatedSerializer
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/clusters" && m == http.MethodPost:
0000000000000000000000000000000000000000;;					body, err := ioutil.ReadAll(req.Body)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					var got federationapi.Cluster
0000000000000000000000000000000000000000;;					_, _, err = codec.Decode(body, nil, &got)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					// If the secret name was generated, test it separately.
0000000000000000000000000000000000000000;;					if secretName == "" {
0000000000000000000000000000000000000000;;						if got.Spec.SecretRef.Name == "" {
0000000000000000000000000000000000000000;;							return nil, fmt.Errorf("expected a generated secret name, got \"\"")
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						got.Spec.SecretRef.Name = ""
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !apiequality.Semantic.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;						return nil, fmt.Errorf("Unexpected cluster object\n\tDiff: %s", diff.ObjectGoPrintDiff(got, want))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusCreated, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(codec, &want)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeJoinHostFactory(clusterName, clusterCtx, secretName, server, token, dnsProvider string, isRBACAPIAvailable bool) (cmdutil.Factory, error) {
0000000000000000000000000000000000000000;;		if clusterCtx == "" {
0000000000000000000000000000000000000000;;			clusterCtx = clusterName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		placeholderSecretName := secretName
0000000000000000000000000000000000000000;;		if placeholderSecretName == "" {
0000000000000000000000000000000000000000;;			placeholderSecretName = "secretName"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var secretObject v1.Secret
0000000000000000000000000000000000000000;;		if isRBACAPIAvailable {
0000000000000000000000000000000000000000;;			secretObject = v1.Secret{
0000000000000000000000000000000000000000;;				TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;					Kind:       "Secret",
0000000000000000000000000000000000000000;;					APIVersion: "v1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      placeholderSecretName,
0000000000000000000000000000000000000000;;					Namespace: util.DefaultFederationSystemNamespace,
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						federation.FederationNameAnnotation: testFederationName,
0000000000000000000000000000000000000000;;						federation.ClusterNameAnnotation:    clusterName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					"ca.crt": []byte("cert"),
0000000000000000000000000000000000000000;;					"token":  []byte("token"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			kubeconfig := clientcmdapi.Config{
0000000000000000000000000000000000000000;;				Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;					clusterCtx: {
0000000000000000000000000000000000000000;;						Server: server,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;					clusterCtx: {
0000000000000000000000000000000000000000;;						Token: token,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;					clusterCtx: {
0000000000000000000000000000000000000000;;						Cluster:  clusterCtx,
0000000000000000000000000000000000000000;;						AuthInfo: clusterCtx,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				CurrentContext: clusterCtx,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			configBytes, err := clientcmd.Write(kubeconfig)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			secretObject = v1.Secret{
0000000000000000000000000000000000000000;;				TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;					Kind:       "Secret",
0000000000000000000000000000000000000000;;					APIVersion: "v1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      placeholderSecretName,
0000000000000000000000000000000000000000;;					Namespace: util.DefaultFederationSystemNamespace,
0000000000000000000000000000000000000000;;					Annotations: map[string]string{
0000000000000000000000000000000000000000;;						federation.FederationNameAnnotation: testFederationName,
0000000000000000000000000000000000000000;;						federation.ClusterNameAnnotation:    clusterName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Data: map[string][]byte{
0000000000000000000000000000000000000000;;					"kubeconfig": configBytes,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmName := "controller-manager"
0000000000000000000000000000000000000000;;		deployment := v1beta1.Deployment{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;				Kind:       "Deployment",
0000000000000000000000000000000000000000;;				APIVersion: testapi.Extensions.GroupVersion().String(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      cmName,
0000000000000000000000000000000000000000;;				Namespace: util.DefaultFederationSystemNamespace,
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					util.FedDomainMapKey:                fmt.Sprintf("%s=%s", clusterCtx, zoneName),
0000000000000000000000000000000000000000;;					federation.FederationNameAnnotation: testFederationName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dnsProvider == util.FedDNSProviderCoreDNS {
0000000000000000000000000000000000000000;;			deployment.Annotations[util.FedDNSZoneName] = zoneName
0000000000000000000000000000000000000000;;			deployment.Annotations[util.FedNameServer] = coreDNSServer
0000000000000000000000000000000000000000;;			deployment.Annotations[util.FedDNSProvider] = util.FedDNSProviderCoreDNS
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		deploymentList := v1beta1.DeploymentList{Items: []v1beta1.Deployment{deployment}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		extensionCodec := testapi.Extensions.Codec()
0000000000000000000000000000000000000000;;		ns := dynamic.ContentConfig().NegotiatedSerializer
0000000000000000000000000000000000000000;;		tf.ClientConfig = kubefedtesting.DefaultClientConfig()
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/federation-system/secrets" && m == http.MethodPost:
0000000000000000000000000000000000000000;;					body, err := ioutil.ReadAll(req.Body)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					var got v1.Secret
0000000000000000000000000000000000000000;;					_, _, err = codec.Decode(body, nil, &got)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// If the secret name was generated, test it separately.
0000000000000000000000000000000000000000;;					if secretName == "" {
0000000000000000000000000000000000000000;;						if got.Name == "" {
0000000000000000000000000000000000000000;;							return nil, fmt.Errorf("expected a generated secret name, got \"\"")
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						got.Name = placeholderSecretName
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if !apiequality.Semantic.DeepEqual(got, secretObject) {
0000000000000000000000000000000000000000;;						return nil, fmt.Errorf("Unexpected secret object\n\tDiff: %s", diff.ObjectGoPrintDiff(got, secretObject))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusCreated, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(codec, &secretObject)}, nil
0000000000000000000000000000000000000000;;				case p == "/apis/extensions/v1beta1/namespaces/federation-system/deployments" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(extensionCodec, &deploymentList)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func serviceAccountName(clusterName string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s-substrate", clusterName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeJoinTargetClusterFactory(clusterName, clusterCtx, dnsProvider, tmpDirPath string, isRBACAPIAvailable bool) (cmdutil.Factory, error) {
0000000000000000000000000000000000000000;;		if clusterCtx == "" {
0000000000000000000000000000000000000000;;			clusterCtx = clusterName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		configmapObject := &v1.ConfigMap{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      util.KubeDnsConfigmapName,
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					federation.FederationNameAnnotation: testFederationName,
0000000000000000000000000000000000000000;;					federation.ClusterNameAnnotation:    clusterName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string]string{
0000000000000000000000000000000000000000;;				util.FedDomainMapKey: fmt.Sprintf("%s=%s", clusterCtx, zoneName),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		saSecretName := "serviceaccountsecret"
0000000000000000000000000000000000000000;;		saSecret := v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      saSecretName,
0000000000000000000000000000000000000000;;				Namespace: util.DefaultFederationSystemNamespace,
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					federation.FederationNameAnnotation: testFederationName,
0000000000000000000000000000000000000000;;					federation.ClusterNameAnnotation:    clusterName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				"ca.crt": []byte("cert"),
0000000000000000000000000000000000000000;;				"token":  []byte("token"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: v1.SecretTypeServiceAccountToken,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		saName := serviceAccountName(clusterName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serviceAccount := v1.ServiceAccount{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: saName,
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					federation.FederationNameAnnotation: testFederationName,
0000000000000000000000000000000000000000;;					federation.ClusterNameAnnotation:    clusterName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Secrets: []v1.ObjectReference{
0000000000000000000000000000000000000000;;				{Name: saSecretName},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dnsProvider == util.FedDNSProviderCoreDNS {
0000000000000000000000000000000000000000;;			annotations := map[string]string{
0000000000000000000000000000000000000000;;				util.FedDNSProvider: util.FedDNSProviderCoreDNS,
0000000000000000000000000000000000000000;;				util.FedDNSZoneName: zoneName,
0000000000000000000000000000000000000000;;				util.FedNameServer:  coreDNSServer,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			configmapObject = populateStubDomainsIfRequiredTest(configmapObject, annotations)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		namespace := v1.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "federation-system",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					federation.FederationNameAnnotation: testFederationName,
0000000000000000000000000000000000000000;;					federation.ClusterNameAnnotation:    clusterName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		roleName := util.ClusterRoleName(testFederationName, saName)
0000000000000000000000000000000000000000;;		clusterRole := rbacv1beta1.ClusterRole{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      roleName,
0000000000000000000000000000000000000000;;				Namespace: util.DefaultFederationSystemNamespace,
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					federation.FederationNameAnnotation: testFederationName,
0000000000000000000000000000000000000000;;					federation.ClusterNameAnnotation:    clusterName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Rules: []rbacv1beta1.PolicyRule{
0000000000000000000000000000000000000000;;				k8srbacv1beta1.NewRule(rbacv1beta1.VerbAll).Groups(rbacv1beta1.APIGroupAll).Resources(rbacv1beta1.ResourceAll).RuleOrDie(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterRoleBinding, err := k8srbacv1beta1.NewClusterBinding(roleName).SAs(util.DefaultFederationSystemNamespace, saName).Binding()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testGroup := metav1.APIGroup{
0000000000000000000000000000000000000000;;			Name: "testAPIGroup",
0000000000000000000000000000000000000000;;			Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					GroupVersion: "testAPIGroup/testAPIVersion",
0000000000000000000000000000000000000000;;					Version:      "testAPIVersion",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		apiGroupList := &metav1.APIGroupList{}
0000000000000000000000000000000000000000;;		apiGroupList.Groups = append(apiGroupList.Groups, testGroup)
0000000000000000000000000000000000000000;;		if isRBACAPIAvailable {
0000000000000000000000000000000000000000;;			rbacGroup := metav1.APIGroup{
0000000000000000000000000000000000000000;;				Name: rbacv1beta1.GroupName,
0000000000000000000000000000000000000000;;				Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						GroupVersion: rbacv1beta1.GroupName + "/v1beta1",
0000000000000000000000000000000000000000;;						Version:      "v1beta1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			apiGroupList.Groups = append(apiGroupList.Groups, rbacGroup)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		defaultCodec := testapi.Default.Codec()
0000000000000000000000000000000000000000;;		rbacCodec := testapi.Rbac.Codec()
0000000000000000000000000000000000000000;;		ns := dynamic.ContentConfig().NegotiatedSerializer
0000000000000000000000000000000000000000;;		tf.TmpDir = tmpDirPath
0000000000000000000000000000000000000000;;		tf.ClientConfig = kubefedtesting.DefaultClientConfig()
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m, r := req.URL.Path, req.Method, isRBACAPIAvailable; {
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces" && m == http.MethodPost:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(defaultCodec, &namespace)}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case p == "/api" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(codec, &metav1.APIVersions{})}, nil
0000000000000000000000000000000000000000;;				case p == "/apis" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(codec, apiGroupList)}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case p == fmt.Sprintf("/api/v1/namespaces/federation-system/serviceaccounts/%s", saName) && m == http.MethodGet && r:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(defaultCodec, &serviceAccount)}, nil
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/federation-system/serviceaccounts" && m == http.MethodPost && r:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(defaultCodec, &serviceAccount)}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case p == "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles" && m == http.MethodPost && r:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(rbacCodec, &clusterRole)}, nil
0000000000000000000000000000000000000000;;				case p == "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings" && m == http.MethodPost && r:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(rbacCodec, &clusterRoleBinding)}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/federation-system/secrets/serviceaccountsecret" && m == http.MethodGet && r:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(defaultCodec, &saSecret)}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/kube-system/configmaps/" && m == http.MethodPost:
0000000000000000000000000000000000000000;;					body, err := ioutil.ReadAll(req.Body)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					var got v1.ConfigMap
0000000000000000000000000000000000000000;;					_, _, err = codec.Decode(body, nil, &got)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !apiequality.Semantic.DeepEqual(&got, configmapObject) {
0000000000000000000000000000000000000000;;						return nil, fmt.Errorf("Unexpected configmap object\n\tDiff: %s", diff.ObjectGoPrintDiff(&got, configmapObject))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusCreated, Header: kubefedtesting.DefaultHeader(), Body: kubefedtesting.ObjBody(codec, configmapObject)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeCluster(clusterName, secretName, server string, isRBACAPIAvailable bool) federationapi.Cluster {
0000000000000000000000000000000000000000;;		cluster := federationapi.Cluster{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: clusterName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: federationapi.ClusterSpec{
0000000000000000000000000000000000000000;;				ServerAddressByClientCIDRs: []federationapi.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ClientCIDR:    defaultClientCIDR,
0000000000000000000000000000000000000000;;						ServerAddress: server,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecretRef: &v1.LocalObjectReference{
0000000000000000000000000000000000000000;;					Name: secretName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isRBACAPIAvailable {
0000000000000000000000000000000000000000;;			saName := serviceAccountName(clusterName)
0000000000000000000000000000000000000000;;			annotations := map[string]string{
0000000000000000000000000000000000000000;;				kubectl.ServiceAccountNameAnnotation: saName,
0000000000000000000000000000000000000000;;				kubectl.ClusterRoleNameAnnotation:    util.ClusterRoleName(testFederationName, saName),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cluster.ObjectMeta.SetAnnotations(annotations)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cluster
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Reuse the function populateStubDomainsIfRequired once that function is converted to use versioned objects.
0000000000000000000000000000000000000000;;	func populateStubDomainsIfRequiredTest(configMap *v1.ConfigMap, annotations map[string]string) *v1.ConfigMap {
0000000000000000000000000000000000000000;;		dnsProvider := annotations[util.FedDNSProvider]
0000000000000000000000000000000000000000;;		dnsZoneName := annotations[util.FedDNSZoneName]
0000000000000000000000000000000000000000;;		nameServer := annotations[util.FedNameServer]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if dnsProvider != util.FedDNSProviderCoreDNS || dnsZoneName == "" || nameServer == "" {
0000000000000000000000000000000000000000;;			return configMap
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		configMap.Data[util.KubeDnsStubDomains] = fmt.Sprintf(`{"%s":["%s"]}`, dnsZoneName, nameServer)
0000000000000000000000000000000000000000;;		return configMap
0000000000000000000000000000000000000000;;	}
