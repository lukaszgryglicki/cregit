0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5c349289245c15d8481a1476d781c3845e2e101b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package install
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/announced"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/apis/core"
0000000000000000000000000000000000000000;;		corev1 "k8s.io/kubernetes/federation/apis/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		Install(core.GroupFactoryRegistry, core.Registry, core.Scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Install registers the API group and adds types to a scheme
0000000000000000000000000000000000000000;;	func Install(groupFactoryRegistry announced.APIGroupFactoryRegistry, registry *registered.APIRegistrationManager, scheme *runtime.Scheme) {
0000000000000000000000000000000000000000;;		if err := announced.NewGroupMetaFactory(
0000000000000000000000000000000000000000;;			&announced.GroupMetaFactoryArgs{
0000000000000000000000000000000000000000;;				GroupName:                  core.GroupName,
0000000000000000000000000000000000000000;;				VersionPreferenceOrder:     []string{corev1.SchemeGroupVersion.Version},
0000000000000000000000000000000000000000;;				ImportPrefix:               "k8s.io/kubernetes/federation/apis/core",
0000000000000000000000000000000000000000;;				AddInternalObjectsToScheme: core.AddToScheme,
0000000000000000000000000000000000000000;;				RootScopedKinds: sets.NewString(
0000000000000000000000000000000000000000;;					"Namespace",
0000000000000000000000000000000000000000;;				),
0000000000000000000000000000000000000000;;				IgnoredKinds: sets.NewString(
0000000000000000000000000000000000000000;;					"ListOptions",
0000000000000000000000000000000000000000;;					"DeleteOptions",
0000000000000000000000000000000000000000;;					"Status",
0000000000000000000000000000000000000000;;				),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			announced.VersionToSchemeFunc{
0000000000000000000000000000000000000000;;				corev1.SchemeGroupVersion.Version: corev1.AddToScheme,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		).Announce(groupFactoryRegistry).RegisterAndEnable(registry, scheme); err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
