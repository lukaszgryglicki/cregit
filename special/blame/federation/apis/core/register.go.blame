0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5c349289245c15d8481a1476d781c3845e2e101b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package core
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/announced"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NOTE: the registry, scheme and codecs are created here to allow to install a federation core group
0000000000000000000000000000000000000000;;	// that is completely independent from the Kubernetes core group. It's only used for the core group itself.
0000000000000000000000000000000000000000;;	// The other apigroups in the federation apiserver use the Kubernetes registry, scheme and codecs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupFactoryRegistry is the APIGroupFactoryRegistry (overlaps a bit with Registry, see comments in package for details)
0000000000000000000000000000000000000000;;	var GroupFactoryRegistry = make(announced.APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Registry is an instance of an API registry.  This is an interim step to start removing the idea of a global
0000000000000000000000000000000000000000;;	// API registry.
0000000000000000000000000000000000000000;;	var Registry = registered.NewOrDie(os.Getenv("KUBE_API_VERSIONS"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scheme is the default instance of runtime.Scheme to which types in the Kubernetes API are already registered.
0000000000000000000000000000000000000000;;	var Scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Codecs provides access to encoding and decoding for the scheme
0000000000000000000000000000000000000000;;	var Codecs = serializer.NewCodecFactory(Scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupName is the group name use in this package
0000000000000000000000000000000000000000;;	const GroupName = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchemeGroupVersion is group version used to register these objects
0000000000000000000000000000000000000000;;	var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: runtime.APIVersionInternal}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unversioned is group version for unversioned API objects
0000000000000000000000000000000000000000;;	// TODO: this should be v1 probably
0000000000000000000000000000000000000000;;	var Unversioned = schema.GroupVersion{Group: "", Version: "v1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParameterCodec handles versioning of objects that are converted to query parameters.
0000000000000000000000000000000000000000;;	var ParameterCodec = runtime.NewParameterCodec(Scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Kind takes an unqualified kind and returns a Group qualified GroupKind
0000000000000000000000000000000000000000;;	func Kind(kind string) schema.GroupKind {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithKind(kind).GroupKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource takes an unqualified resource and returns a Group qualified GroupResource
0000000000000000000000000000000000000000;;	func Resource(resource string) schema.GroupResource {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithResource(resource).GroupResource()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)
0000000000000000000000000000000000000000;;		AddToScheme   = SchemeBuilder.AddToScheme
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addKnownTypes(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		if err := scheme.AddIgnoredConversionType(&metav1.TypeMeta{}, &metav1.TypeMeta{}); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&api.ServiceList{},
0000000000000000000000000000000000000000;;			&api.Service{},
0000000000000000000000000000000000000000;;			&api.Namespace{},
0000000000000000000000000000000000000000;;			&api.NamespaceList{},
0000000000000000000000000000000000000000;;			&api.Secret{},
0000000000000000000000000000000000000000;;			&api.SecretList{},
0000000000000000000000000000000000000000;;			&api.Event{},
0000000000000000000000000000000000000000;;			&api.EventList{},
0000000000000000000000000000000000000000;;			&api.ConfigMap{},
0000000000000000000000000000000000000000;;			&api.ConfigMapList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Register Unversioned types under their own special group
0000000000000000000000000000000000000000;;		scheme.AddUnversionedTypes(Unversioned,
0000000000000000000000000000000000000000;;			&metav1.Status{},
0000000000000000000000000000000000000000;;			&metav1.APIVersions{},
0000000000000000000000000000000000000000;;			&metav1.APIGroupList{},
0000000000000000000000000000000000000000;;			&metav1.APIGroup{},
0000000000000000000000000000000000000000;;			&metav1.APIResourceList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
