0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
022d85a97e1d77cd57f50e4d3e1991add9ec7af9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/apis/federation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []federation.Cluster{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "cluster-s"},
0000000000000000000000000000000000000000;;				Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;					ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;							ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			errs := ValidateCluster(&successCase)
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expect success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]federation.Cluster{
0000000000000000000000000000000000000000;;			"missing cluster addresses": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "cluster-f"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty cluster addresses": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "cluster-f"},
0000000000000000000000000000000000000000;;				Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;					ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			"invalid_label": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: "cluster-f",
0000000000000000000000000000000000000000;;					Labels: map[string]string{
0000000000000000000000000000000000000000;;						"NoUppercaseOrSpecialCharsLike=Equals": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid cluster name (is a subdomain)": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "mycluster.mycompany"},
0000000000000000000000000000000000000000;;				Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;					ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;							ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateCluster(&errorCase)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure for %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateClusterUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		type clusterUpdateTest struct {
0000000000000000000000000000000000000000;;			old    federation.Cluster
0000000000000000000000000000000000000000;;			update federation.Cluster
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []clusterUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: federation.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "cluster-s"},
0000000000000000000000000000000000000000;;					Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;								ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: federation.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "cluster-s"},
0000000000000000000000000000000000000000;;					Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;								ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errs := ValidateClusterUpdate(&successCase.update, &successCase.old)
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expect success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]clusterUpdateTest{
0000000000000000000000000000000000000000;;			"cluster name changed": {
0000000000000000000000000000000000000000;;				old: federation.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "cluster-s"},
0000000000000000000000000000000000000000;;					Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;								ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: federation.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "cluster-newname"},
0000000000000000000000000000000000000000;;					Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;								ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateClusterUpdate(&errorCase.update, &errorCase.old)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateClusterStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		type clusterUpdateTest struct {
0000000000000000000000000000000000000000;;			old    federation.Cluster
0000000000000000000000000000000000000000;;			update federation.Cluster
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []clusterUpdateTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				old: federation.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "cluster-s"},
0000000000000000000000000000000000000000;;					Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;								ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: federation.ClusterStatus{
0000000000000000000000000000000000000000;;						Conditions: []federation.ClusterCondition{
0000000000000000000000000000000000000000;;							{Type: federation.ClusterReady, Status: api.ConditionTrue},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				update: federation.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "cluster-s"},
0000000000000000000000000000000000000000;;					Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;								ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: federation.ClusterStatus{
0000000000000000000000000000000000000000;;						Conditions: []federation.ClusterCondition{
0000000000000000000000000000000000000000;;							{Type: federation.ClusterReady, Status: api.ConditionTrue},
0000000000000000000000000000000000000000;;							{Type: federation.ClusterOffline, Status: api.ConditionTrue},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			successCase.old.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			successCase.update.ObjectMeta.ResourceVersion = "1"
0000000000000000000000000000000000000000;;			errs := ValidateClusterUpdate(&successCase.update, &successCase.old)
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expect success: %v", errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]clusterUpdateTest{}
0000000000000000000000000000000000000000;;		for testName, errorCase := range errorCases {
0000000000000000000000000000000000000000;;			errs := ValidateClusterStatusUpdate(&errorCase.update, &errorCase.old)
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected failure: %s", testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
