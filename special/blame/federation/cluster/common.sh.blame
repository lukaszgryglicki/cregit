0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# required:
0000000000000000000000000000000000000000;;	# KUBE_ROOT: path of the root of the Kubernetes repository
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	: "${KUBE_ROOT?Must set KUBE_ROOT env var}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Provides the $KUBERNETES_PROVIDER, kubeconfig-federation-context()
0000000000000000000000000000000000000000;;	# and detect-project function
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/kube-util.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# kubefed configuration
0000000000000000000000000000000000000000;;	FEDERATION_NAME="${FEDERATION_NAME:-e2e-federation}"
0000000000000000000000000000000000000000;;	FEDERATION_NAMESPACE=${FEDERATION_NAMESPACE:-federation-system}
0000000000000000000000000000000000000000;;	FEDERATION_KUBE_CONTEXT="${FEDERATION_KUBE_CONTEXT:-${FEDERATION_NAME}}"
0000000000000000000000000000000000000000;;	HOST_CLUSTER_ZONE="${FEDERATION_HOST_CLUSTER_ZONE:-}"
0000000000000000000000000000000000000000;;	# If $HOST_CLUSTER_ZONE isn't specified, arbitrarily choose
0000000000000000000000000000000000000000;;	# last zone as the host cluster zone.
0000000000000000000000000000000000000000;;	if [[ -z "${HOST_CLUSTER_ZONE}" ]]; then
0000000000000000000000000000000000000000;;	  E2E_ZONES_ARR=(${E2E_ZONES:-})
0000000000000000000000000000000000000000;;	  if [[ ${#E2E_ZONES_ARR[@]} > 0 ]]; then
0000000000000000000000000000000000000000;;	    HOST_CLUSTER_ZONE=${E2E_ZONES_ARR[-1]}
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	HOST_CLUSTER_CONTEXT="${FEDERATION_HOST_CLUSTER_CONTEXT:-}"
0000000000000000000000000000000000000000;;	if [[ -z "${HOST_CLUSTER_CONTEXT}" ]]; then
0000000000000000000000000000000000000000;;	  # Sets ${CLUSTER_CONTEXT}
0000000000000000000000000000000000000000;;	  if [[ -z "${HOST_CLUSTER_ZONE:-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "At least one of FEDERATION_HOST_CLUSTER_CONTEXT, FEDERATION_HOST_CLUSTER_ZONE or E2E_ZONES is required."
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  kubeconfig-federation-context "${HOST_CLUSTER_ZONE:-}"
0000000000000000000000000000000000000000;;	  HOST_CLUSTER_CONTEXT="${CLUSTER_CONTEXT}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function federation_cluster_contexts() {
0000000000000000000000000000000000000000;;	  local -r contexts=$("${KUBE_ROOT}/cluster/kubectl.sh" config get-contexts -o name)
0000000000000000000000000000000000000000;;	  federation_contexts=()
0000000000000000000000000000000000000000;;	  for context in ${contexts}; do
0000000000000000000000000000000000000000;;	    # Skip federation context
0000000000000000000000000000000000000000;;	    if [[ "${context}" == "${FEDERATION_NAME}" ]]; then
0000000000000000000000000000000000000000;;	      continue
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    # Skip contexts not beginning with "federation"
0000000000000000000000000000000000000000;;	    if [[ "${context}" != federation* ]]; then
0000000000000000000000000000000000000000;;	      continue
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	    federation_contexts+=("${context}")
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  echo ${federation_contexts[@]}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/common.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	host_kubectl="${KUBE_ROOT}/cluster/kubectl.sh --namespace=${FEDERATION_NAMESPACE}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function cleanup-federation-api-objects {
0000000000000000000000000000000000000000;;	  # This is a cleanup function. We cannot stop on errors here. So disable
0000000000000000000000000000000000000000;;	  # errexit in this function.
0000000000000000000000000000000000000000;;	  set +o errexit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Cleaning Federation control plane objects"
0000000000000000000000000000000000000000;;	  # Delete all resources with the federated-cluster label.
0000000000000000000000000000000000000000;;	  $host_kubectl delete pods,svc,rc,deployment,secret -lapp=federated-cluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Delete all PVs bound to PVCs in FEDERATION_NAMESPACE
0000000000000000000000000000000000000000;;	  pvs=$($host_kubectl get pvc --namespace=${FEDERATION_NAMESPACE} -o jsonpath='{.items[*].spec.volumeName}')
0000000000000000000000000000000000000000;;	  while $host_kubectl delete pv ${pvs} >/dev/null 2>&1; do
0000000000000000000000000000000000000000;;	    sleep 2
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Delete all resources in FEDERATION_NAMESPACE.
0000000000000000000000000000000000000000;;	  $host_kubectl delete pvc,pods,svc,rc,deployment,secret --namespace=${FEDERATION_NAMESPACE} --all
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # This is a big hammer. We get rid of federation-system namespace from
0000000000000000000000000000000000000000;;	  # all the clusters
0000000000000000000000000000000000000000;;	  for context in $(federation_cluster_contexts); do
0000000000000000000000000000000000000000;;	    (
0000000000000000000000000000000000000000;;	      local -r role="federation-controller-manager:${FEDERATION_NAME}-${context}-${HOST_CLUSTER_CONTEXT}"
0000000000000000000000000000000000000000;;	      kube::log::status "Removing namespace \"${FEDERATION_NAMESPACE}\", cluster role \"${role}\" and cluster role binding \"${role}\" from \"${context}\""
0000000000000000000000000000000000000000;;	      # Try deleting until the namespace is completely gone.
0000000000000000000000000000000000000000;;	      while $host_kubectl --context="${context}" delete namespace "${FEDERATION_NAMESPACE}" >/dev/null 2>&1; do
0000000000000000000000000000000000000000;;	        # It is usually slower to remove a namespace because it involves
0000000000000000000000000000000000000000;;	        # performing a cascading deletion of all the resources in the
0000000000000000000000000000000000000000;;	        # namespace. So we sleep a little longer than other resources
0000000000000000000000000000000000000000;;	        # before retrying
0000000000000000000000000000000000000000;;	        sleep 5
0000000000000000000000000000000000000000;;	      done
0000000000000000000000000000000000000000;;	      kube::log::status "Removed namespace \"${FEDERATION_NAMESPACE}\" from \"${context}\""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      while $host_kubectl --context="${context}" delete clusterrole "${role}" >/dev/null 2>&1; do
0000000000000000000000000000000000000000;;	        sleep 2
0000000000000000000000000000000000000000;;	      done
0000000000000000000000000000000000000000;;	      kube::log::status "Removed cluster role \"${role}\" from \"${context}\""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      while $host_kubectl --context="${context}" delete clusterrolebinding "${role}" >/dev/null 2>&1; do
0000000000000000000000000000000000000000;;	        sleep 2
0000000000000000000000000000000000000000;;	      done
0000000000000000000000000000000000000000;;	      kube::log::status "Removed cluster role binding \"${role}\" from \"${context}\""
0000000000000000000000000000000000000000;;	    ) &
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	  wait
0000000000000000000000000000000000000000;;	  set -o errexit
0000000000000000000000000000000000000000;;	}
