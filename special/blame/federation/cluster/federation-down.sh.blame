0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(readlink -m $(dirname "${BASH_SOURCE}")/../../)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# For $FEDERATION_NAME, $FEDERATION_NAMESPACE, $FEDERATION_KUBE_CONTEXT,
0000000000000000000000000000000000000000;;	# and $HOST_CLUSTER_CONTEXT.
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/federation/cluster/common.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# federation_clusters returns a list of all the clusters in
0000000000000000000000000000000000000000;;	# federation, if at all the federation control plane exists
0000000000000000000000000000000000000000;;	# and there are any clusters registered.
0000000000000000000000000000000000000000;;	function federation_clusters() {
0000000000000000000000000000000000000000;;	  if clusters=$("${KUBE_ROOT}/cluster/kubectl.sh" \
0000000000000000000000000000000000000000;;	      --context="${FEDERATION_KUBE_CONTEXT}" \
0000000000000000000000000000000000000000;;	      -o jsonpath --template '{.items[*].metadata.name}' \
0000000000000000000000000000000000000000;;	      get clusters) ; then
0000000000000000000000000000000000000000;;	    echo ${clusters}
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# unjoin_clusters unjoins all the clusters from federation.
0000000000000000000000000000000000000000;;	function unjoin_clusters() {
0000000000000000000000000000000000000000;;	  # Unjoin only those clusters that are registered with the
0000000000000000000000000000000000000000;;	  # given federation. This is slightly different than
0000000000000000000000000000000000000000;;	  # joining clusters where we join all the clusters in the
0000000000000000000000000000000000000000;;	  # current kubeconfig with the "federation" prefix.
0000000000000000000000000000000000000000;;	  for context in $(federation_clusters); do
0000000000000000000000000000000000000000;;	    kube::log::status "Unjoining cluster \"${context}\" from federation \"${FEDERATION_NAME}\""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/federation/develop/kubefed.sh" unjoin \
0000000000000000000000000000000000000000;;	        "${context}" \
0000000000000000000000000000000000000000;;	        --federation-system-namespace=${FEDERATION_NAMESPACE} \
0000000000000000000000000000000000000000;;	        --context="${FEDERATION_KUBE_CONTEXT}" \
0000000000000000000000000000000000000000;;	        --host-cluster-context="${HOST_CLUSTER_CONTEXT}" \
0000000000000000000000000000000000000000;;	        --v=4
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	unjoin_clusters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if cleanup-federation-api-objects; then
0000000000000000000000000000000000000000;;	  # TODO(madhusudancs): This is an arbitrary amount of sleep to give
0000000000000000000000000000000000000000;;	  # Kubernetes clusters enough time to delete the underlying cloud
0000000000000000000000000000000000000000;;	  # provider resources corresponding to the Kubernetes resources we
0000000000000000000000000000000000000000;;	  # deleted as part of the test tear downs. It is shameful that we
0000000000000000000000000000000000000000;;	  # are doing this, but this is just a bandage to stop the bleeding.
0000000000000000000000000000000000000000;;	  # Please don't use this pattern anywhere. Remove this when proper
0000000000000000000000000000000000000000;;	  # cloud provider cleanups are implemented in the individual test
0000000000000000000000000000000000000000;;	  # `AfterEach` blocks.
0000000000000000000000000000000000000000;;	  # Also, we wait only if the cleanup succeeds.
0000000000000000000000000000000000000000;;	  kube::log::status "Waiting for 2 minutes to allow controllers to clean up federation components..."
0000000000000000000000000000000000000000;;	  sleep 2m
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  echo "Couldn't cleanup federation api objects"
0000000000000000000000000000000000000000;;	fi
