0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2014 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script is only used for e2e tests! Don't use it in production!
0000000000000000000000000000000000000000;;	# This is also a temporary bridge to slowly switch over everything to
0000000000000000000000000000000000000000;;	# federation/develop.sh. Carefully moving things step-by-step, ensuring
0000000000000000000000000000000000000000;;	# things don't break.
0000000000000000000000000000000000000000;;	# TODO(madhusudancs): Remove this script and its dependencies.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
0000000000000000000000000000000000000000;;	# For `kube::log::status` function since it already sources
0000000000000000000000000000000000000000;;	# "${KUBE_ROOT}/cluster/lib/logging.sh" and DEFAULT_KUBECONFIG
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/common.sh"
0000000000000000000000000000000000000000;;	# For $FEDERATION_NAME, $FEDERATION_NAMESPACE, $FEDERATION_KUBE_CONTEXT,
0000000000000000000000000000000000000000;;	# and $HOST_CLUSTER_CONTEXT.
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/federation/cluster/common.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	DNS_ZONE_NAME="${FEDERATION_DNS_ZONE_NAME:-}"
0000000000000000000000000000000000000000;;	DNS_PROVIDER="${FEDERATION_DNS_PROVIDER:-google-clouddns}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# get_version returns the version in KUBERNETES_RELEASE or defaults to the
0000000000000000000000000000000000000000;;	# value in the federation `versions` file.
0000000000000000000000000000000000000000;;	# TODO(madhusudancs): This is a duplicate of the function in
0000000000000000000000000000000000000000;;	# federation/develop/develop.sh with a minor difference. This
0000000000000000000000000000000000000000;;	# function tries to default to the version information in
0000000000000000000000000000000000000000;;	# _output/federation/versions file where as the one in develop.sh
0000000000000000000000000000000000000000;;	# tries to default to the version in the kubernetes versions file.
0000000000000000000000000000000000000000;;	# These functions should be consolidated to read the version from
0000000000000000000000000000000000000000;;	# kubernetes version defs file.
0000000000000000000000000000000000000000;;	function get_version() {
0000000000000000000000000000000000000000;;	  local -r versions_file="${KUBE_ROOT}/_output/federation/versions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBERNETES_RELEASE:-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "${KUBERNETES_RELEASE//+/_}"
0000000000000000000000000000000000000000;;	    return
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ ! -f "${versions_file}" ]]; then
0000000000000000000000000000000000000000;;	    echo "Couldn't determine the release version: neither the " \
0000000000000000000000000000000000000000;;	     "KUBERNETES_RELEASE environment variable is set, nor does " \
0000000000000000000000000000000000000000;;	     "the versions file exist at ${versions_file}"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Read the version back from the versions file if no version is given.
0000000000000000000000000000000000000000;;	  local -r kube_version="$(cat "${versions_file}" | python -c '\
0000000000000000000000000000000000000000;;	import json, sys;\
0000000000000000000000000000000000000000;;	print json.load(sys.stdin)["KUBE_VERSION"]')"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "${kube_version//+/_}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Initializes the control plane.
0000000000000000000000000000000000000000;;	# TODO(madhusudancs): Move this to federation/develop.sh.
0000000000000000000000000000000000000000;;	function init() {
0000000000000000000000000000000000000000;;	  kube::log::status "Deploying federation control plane for ${FEDERATION_NAME} in cluster ${HOST_CLUSTER_CONTEXT}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r project="${KUBE_PROJECT:-${PROJECT:-}}"
0000000000000000000000000000000000000000;;	  local -r kube_registry="${KUBE_REGISTRY:-gcr.io/${project}}"
0000000000000000000000000000000000000000;;	  local -r kube_version="$(get_version)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::log::status "DNS_ZONE_NAME: \"${DNS_ZONE_NAME}\", DNS_PROVIDER: \"${DNS_PROVIDER}\""
0000000000000000000000000000000000000000;;	  kube::log::status "Image: \"${kube_registry}/hyperkube-amd64:${kube_version}\""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # The very first thing that kubefed does when it comes up is run RBAC API
0000000000000000000000000000000000000000;;	  # discovery. If it doesn't appear to be available, issue 'get role' to ensure
0000000000000000000000000000000000000000;;	  # that kubectl updates its cache.
0000000000000000000000000000000000000000;;	  ${KUBE_ROOT}/cluster/kubectl.sh get role
0000000000000000000000000000000000000000;;	  timeout 1m bash <<EOF
0000000000000000000000000000000000000000;;	    while [[ ! "$(${KUBE_ROOT}/cluster/kubectl.sh api-versions)" =~ "rbac.authorization.k8s.io/" ]]; do
0000000000000000000000000000000000000000;;	      ${KUBE_ROOT}/cluster/kubectl.sh get role
0000000000000000000000000000000000000000;;	      echo "Waiting for rbac.authorization.k8s.io API group to appear"
0000000000000000000000000000000000000000;;	      sleep 2
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Send INT after 20m and KILL 1m after that if process is still alive.
0000000000000000000000000000000000000000;;	  timeout --signal=INT --kill-after=1m 20m \
0000000000000000000000000000000000000000;;	      "${KUBE_ROOT}/federation/develop/kubefed.sh" init \
0000000000000000000000000000000000000000;;	      "${FEDERATION_NAME}" \
0000000000000000000000000000000000000000;;	      --federation-system-namespace=${FEDERATION_NAMESPACE} \
0000000000000000000000000000000000000000;;	      --host-cluster-context="${HOST_CLUSTER_CONTEXT}" \
0000000000000000000000000000000000000000;;	      --dns-zone-name="${DNS_ZONE_NAME}" \
0000000000000000000000000000000000000000;;	      --dns-provider="${DNS_PROVIDER}" \
0000000000000000000000000000000000000000;;	      --image="${kube_registry}/hyperkube-amd64:${kube_version}" \
0000000000000000000000000000000000000000;;	      --apiserver-arg-overrides="--storage-backend=etcd2" \
0000000000000000000000000000000000000000;;	      --apiserver-enable-basic-auth=true \
0000000000000000000000000000000000000000;;	      --apiserver-enable-token-auth=true \
0000000000000000000000000000000000000000;;	      --apiserver-arg-overrides="--v=4" \
0000000000000000000000000000000000000000;;	      --controllermanager-arg-overrides="--v=4" \
0000000000000000000000000000000000000000;;	      --v=4
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# join_clusters joins the clusters in the local kubeconfig to federation. The clusters
0000000000000000000000000000000000000000;;	# and their kubeconfig entries in the local kubeconfig are created while deploying clusters, i.e. when kube-up is run.
0000000000000000000000000000000000000000;;	function join_clusters() {
0000000000000000000000000000000000000000;;	  for context in $(federation_cluster_contexts); do
0000000000000000000000000000000000000000;;	    kube::log::status "Joining cluster with name '${context}' to federation with name '${FEDERATION_NAME}'"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    "${KUBE_ROOT}/federation/develop/kubefed.sh" join \
0000000000000000000000000000000000000000;;	        "${context}" \
0000000000000000000000000000000000000000;;	        --federation-system-namespace=${FEDERATION_NAMESPACE} \
0000000000000000000000000000000000000000;;	        --host-cluster-context="${HOST_CLUSTER_CONTEXT}" \
0000000000000000000000000000000000000000;;	        --context="${FEDERATION_KUBE_CONTEXT}" \
0000000000000000000000000000000000000000;;	        --v=4
0000000000000000000000000000000000000000;;	  done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	init
0000000000000000000000000000000000000000;;	join_clusters
