0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
926bf0073e59b4fbdd0f4b997c38d8a24025fbed;federation/client/clientset_generated/federation_release_1_5/fake/clientset_generated.go[federation/client/clientset_generated/federation_release_1_5/fake/clientset_generated.go][federation/client/clientset_generated/federation_clientset/fake/clientset_generated.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		fakediscovery "k8s.io/client-go/discovery/fake"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset"
0000000000000000000000000000000000000000;;		autoscalingv1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/autoscaling/v1"
0000000000000000000000000000000000000000;;		fakeautoscalingv1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/autoscaling/v1/fake"
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/batch/v1"
0000000000000000000000000000000000000000;;		fakebatchv1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/batch/v1/fake"
0000000000000000000000000000000000000000;;		corev1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/core/v1"
0000000000000000000000000000000000000000;;		fakecorev1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/core/v1/fake"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/extensions/v1beta1"
0000000000000000000000000000000000000000;;		fakeextensionsv1beta1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/extensions/v1beta1/fake"
0000000000000000000000000000000000000000;;		federationv1beta1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/federation/v1beta1"
0000000000000000000000000000000000000000;;		fakefederationv1beta1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/federation/v1beta1/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSimpleClientset returns a clientset that will respond with the provided objects.
0000000000000000000000000000000000000000;;	// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
0000000000000000000000000000000000000000;;	// without applying any validations and/or defaults. It shouldn't be considered a replacement
0000000000000000000000000000000000000000;;	// for a real clientset and is mostly useful in simple unit tests.
0000000000000000000000000000000000000000;;	func NewSimpleClientset(objects ...runtime.Object) *Clientset {
0000000000000000000000000000000000000000;;		o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
0000000000000000000000000000000000000000;;		for _, obj := range objects {
0000000000000000000000000000000000000000;;			if err := o.Add(obj); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePtr := testing.Fake{}
0000000000000000000000000000000000000000;;		fakePtr.AddReactor("*", "*", testing.ObjectReaction(o))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePtr.AddWatchReactor("*", testing.DefaultWatchReactor(watch.NewFake(), nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Clientset{fakePtr}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clientset implements clientset.Interface. Meant to be embedded into a
0000000000000000000000000000000000000000;;	// struct to get a default implementation. This makes faking out just the method
0000000000000000000000000000000000000000;;	// you want to test easier.
0000000000000000000000000000000000000000;;	type Clientset struct {
0000000000000000000000000000000000000000;;		testing.Fake
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Clientset) Discovery() discovery.DiscoveryInterface {
0000000000000000000000000000000000000000;;		return &fakediscovery.FakeDiscovery{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ clientset.Interface = &Clientset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AutoscalingV1 retrieves the AutoscalingV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
0000000000000000000000000000000000000000;;		return &fakeautoscalingv1.FakeAutoscalingV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Autoscaling retrieves the AutoscalingV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Autoscaling() autoscalingv1.AutoscalingV1Interface {
0000000000000000000000000000000000000000;;		return &fakeautoscalingv1.FakeAutoscalingV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BatchV1 retrieves the BatchV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) BatchV1() batchv1.BatchV1Interface {
0000000000000000000000000000000000000000;;		return &fakebatchv1.FakeBatchV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Batch retrieves the BatchV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Batch() batchv1.BatchV1Interface {
0000000000000000000000000000000000000000;;		return &fakebatchv1.FakeBatchV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CoreV1 retrieves the CoreV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) CoreV1() corev1.CoreV1Interface {
0000000000000000000000000000000000000000;;		return &fakecorev1.FakeCoreV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Core retrieves the CoreV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Core() corev1.CoreV1Interface {
0000000000000000000000000000000000000000;;		return &fakecorev1.FakeCoreV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtensionsV1beta1 retrieves the ExtensionsV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakeextensionsv1beta1.FakeExtensionsV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extensions retrieves the ExtensionsV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Extensions() extensionsv1beta1.ExtensionsV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakeextensionsv1beta1.FakeExtensionsV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FederationV1beta1 retrieves the FederationV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) FederationV1beta1() federationv1beta1.FederationV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakefederationv1beta1.FakeFederationV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Federation retrieves the FederationV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Federation() federationv1beta1.FederationV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakefederationv1beta1.FakeFederationV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
