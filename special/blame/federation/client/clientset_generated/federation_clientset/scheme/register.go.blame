0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
be92145a24355bdd9bc4105853dc5f64ffb0127c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scheme
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		autoscalingv1 "k8s.io/api/autoscaling/v1"
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		corev1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		runtime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		serializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		federationv1beta1 "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var Scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;	var Codecs = serializer.NewCodecFactory(Scheme)
0000000000000000000000000000000000000000;;	var ParameterCodec = runtime.NewParameterCodec(Scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		v1.AddToGroupVersion(Scheme, schema.GroupVersion{Version: "v1"})
0000000000000000000000000000000000000000;;		AddToScheme(Scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddToScheme adds all types of this clientset into the given scheme. This allows composition
0000000000000000000000000000000000000000;;	// of clientsets, like in:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   import (
0000000000000000000000000000000000000000;;	//     "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;	//     clientsetscheme "k8s.io/client-go/kuberentes/scheme"
0000000000000000000000000000000000000000;;	//     aggregatorclientsetscheme "k8s.io/kube-aggregator/pkg/client/clientset_generated/clientset/scheme"
0000000000000000000000000000000000000000;;	//   )
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   kclientset, _ := kubernetes.NewForConfig(c)
0000000000000000000000000000000000000000;;	//   aggregatorclientsetscheme.AddToScheme(clientsetscheme.Scheme)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After this, RawExtensions in Kubernetes types will serialize kube-aggregator types
0000000000000000000000000000000000000000;;	// correctly.
0000000000000000000000000000000000000000;;	func AddToScheme(scheme *runtime.Scheme) {
0000000000000000000000000000000000000000;;		autoscalingv1.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		batchv1.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		corev1.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		extensionsv1beta1.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		federationv1beta1.AddToScheme(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
