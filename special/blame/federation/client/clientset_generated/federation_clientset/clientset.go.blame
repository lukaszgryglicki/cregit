0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
926bf0073e59b4fbdd0f4b997c38d8a24025fbed;federation/client/clientset_generated/federation_release_1_5/clientset.go[federation/client/clientset_generated/federation_release_1_5/clientset.go][federation/client/clientset_generated/federation_clientset/clientset.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package federation_clientset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		glog "github.com/golang/glog"
0000000000000000000000000000000000000000;;		discovery "k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		rest "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		flowcontrol "k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;		autoscalingv1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/autoscaling/v1"
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/batch/v1"
0000000000000000000000000000000000000000;;		corev1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/core/v1"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/extensions/v1beta1"
0000000000000000000000000000000000000000;;		federationv1beta1 "k8s.io/kubernetes/federation/client/clientset_generated/federation_clientset/typed/federation/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		Discovery() discovery.DiscoveryInterface
0000000000000000000000000000000000000000;;		AutoscalingV1() autoscalingv1.AutoscalingV1Interface
0000000000000000000000000000000000000000;;		// Deprecated: please explicitly pick a version if possible.
0000000000000000000000000000000000000000;;		Autoscaling() autoscalingv1.AutoscalingV1Interface
0000000000000000000000000000000000000000;;		BatchV1() batchv1.BatchV1Interface
0000000000000000000000000000000000000000;;		// Deprecated: please explicitly pick a version if possible.
0000000000000000000000000000000000000000;;		Batch() batchv1.BatchV1Interface
0000000000000000000000000000000000000000;;		CoreV1() corev1.CoreV1Interface
0000000000000000000000000000000000000000;;		// Deprecated: please explicitly pick a version if possible.
0000000000000000000000000000000000000000;;		Core() corev1.CoreV1Interface
0000000000000000000000000000000000000000;;		ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface
0000000000000000000000000000000000000000;;		// Deprecated: please explicitly pick a version if possible.
0000000000000000000000000000000000000000;;		Extensions() extensionsv1beta1.ExtensionsV1beta1Interface
0000000000000000000000000000000000000000;;		FederationV1beta1() federationv1beta1.FederationV1beta1Interface
0000000000000000000000000000000000000000;;		// Deprecated: please explicitly pick a version if possible.
0000000000000000000000000000000000000000;;		Federation() federationv1beta1.FederationV1beta1Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clientset contains the clients for groups. Each group has exactly one
0000000000000000000000000000000000000000;;	// version included in a Clientset.
0000000000000000000000000000000000000000;;	type Clientset struct {
0000000000000000000000000000000000000000;;		*discovery.DiscoveryClient
0000000000000000000000000000000000000000;;		*autoscalingv1.AutoscalingV1Client
0000000000000000000000000000000000000000;;		*batchv1.BatchV1Client
0000000000000000000000000000000000000000;;		*corev1.CoreV1Client
0000000000000000000000000000000000000000;;		*extensionsv1beta1.ExtensionsV1beta1Client
0000000000000000000000000000000000000000;;		*federationv1beta1.FederationV1beta1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AutoscalingV1 retrieves the AutoscalingV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.AutoscalingV1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deprecated: Autoscaling retrieves the default version of AutoscalingClient.
0000000000000000000000000000000000000000;;	// Please explicitly pick a version.
0000000000000000000000000000000000000000;;	func (c *Clientset) Autoscaling() autoscalingv1.AutoscalingV1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.AutoscalingV1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BatchV1 retrieves the BatchV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) BatchV1() batchv1.BatchV1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.BatchV1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deprecated: Batch retrieves the default version of BatchClient.
0000000000000000000000000000000000000000;;	// Please explicitly pick a version.
0000000000000000000000000000000000000000;;	func (c *Clientset) Batch() batchv1.BatchV1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.BatchV1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CoreV1 retrieves the CoreV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) CoreV1() corev1.CoreV1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.CoreV1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deprecated: Core retrieves the default version of CoreClient.
0000000000000000000000000000000000000000;;	// Please explicitly pick a version.
0000000000000000000000000000000000000000;;	func (c *Clientset) Core() corev1.CoreV1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.CoreV1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtensionsV1beta1 retrieves the ExtensionsV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.ExtensionsV1beta1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deprecated: Extensions retrieves the default version of ExtensionsClient.
0000000000000000000000000000000000000000;;	// Please explicitly pick a version.
0000000000000000000000000000000000000000;;	func (c *Clientset) Extensions() extensionsv1beta1.ExtensionsV1beta1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.ExtensionsV1beta1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FederationV1beta1 retrieves the FederationV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) FederationV1beta1() federationv1beta1.FederationV1beta1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.FederationV1beta1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deprecated: Federation retrieves the default version of FederationClient.
0000000000000000000000000000000000000000;;	// Please explicitly pick a version.
0000000000000000000000000000000000000000;;	func (c *Clientset) Federation() federationv1beta1.FederationV1beta1Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.FederationV1beta1Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Discovery retrieves the DiscoveryClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Discovery() discovery.DiscoveryInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.DiscoveryClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfig creates a new Clientset for the given config.
0000000000000000000000000000000000000000;;	func NewForConfig(c *rest.Config) (*Clientset, error) {
0000000000000000000000000000000000000000;;		configShallowCopy := *c
0000000000000000000000000000000000000000;;		if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
0000000000000000000000000000000000000000;;			configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		cs.AutoscalingV1Client, err = autoscalingv1.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.BatchV1Client, err = batchv1.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.CoreV1Client, err = corev1.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.ExtensionsV1beta1Client, err = extensionsv1beta1.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.FederationV1beta1Client, err = federationv1beta1.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("failed to create the DiscoveryClient: %v", err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &cs, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfigOrDie creates a new Clientset for the given config and
0000000000000000000000000000000000000000;;	// panics if there is an error in the config.
0000000000000000000000000000000000000000;;	func NewForConfigOrDie(c *rest.Config) *Clientset {
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;		cs.AutoscalingV1Client = autoscalingv1.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.BatchV1Client = batchv1.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.CoreV1Client = corev1.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.ExtensionsV1beta1Client = extensionsv1beta1.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.FederationV1beta1Client = federationv1beta1.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
0000000000000000000000000000000000000000;;		return &cs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new Clientset for the given RESTClient.
0000000000000000000000000000000000000000;;	func New(c rest.Interface) *Clientset {
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;		cs.AutoscalingV1Client = autoscalingv1.New(c)
0000000000000000000000000000000000000000;;		cs.BatchV1Client = batchv1.New(c)
0000000000000000000000000000000000000000;;		cs.CoreV1Client = corev1.New(c)
0000000000000000000000000000000000000000;;		cs.ExtensionsV1beta1Client = extensionsv1beta1.New(c)
0000000000000000000000000000000000000000;;		cs.FederationV1beta1Client = federationv1beta1.New(c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
0000000000000000000000000000000000000000;;		return &cs
0000000000000000000000000000000000000000;;	}
