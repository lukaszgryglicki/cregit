0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
1dd1c6d2b8f38425af99cad62f3e3e5389687e95;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		labels "k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		types "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		testing "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		batch "k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeJobs implements JobInterface
0000000000000000000000000000000000000000;;	type FakeJobs struct {
0000000000000000000000000000000000000000;;		Fake *FakeBatch
0000000000000000000000000000000000000000;;		ns   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var jobsResource = schema.GroupVersionResource{Group: "batch", Version: "", Resource: "jobs"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var jobsKind = schema.GroupVersionKind{Group: "batch", Version: "", Kind: "Job"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeJobs) Create(job *batch.Job) (result *batch.Job, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewCreateAction(jobsResource, c.ns, job), &batch.Job{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*batch.Job), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeJobs) Update(job *batch.Job) (result *batch.Job, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewUpdateAction(jobsResource, c.ns, job), &batch.Job{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*batch.Job), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeJobs) UpdateStatus(job *batch.Job) (*batch.Job, error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewUpdateSubresourceAction(jobsResource, "status", c.ns, job), &batch.Job{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*batch.Job), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeJobs) Delete(name string, options *v1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		_, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewDeleteAction(jobsResource, c.ns, name), &batch.Job{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeJobs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
0000000000000000000000000000000000000000;;		action := testing.NewDeleteCollectionAction(jobsResource, c.ns, listOptions)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := c.Fake.Invokes(action, &batch.JobList{})
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeJobs) Get(name string, options v1.GetOptions) (result *batch.Job, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewGetAction(jobsResource, c.ns, name), &batch.Job{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*batch.Job), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeJobs) List(opts v1.ListOptions) (result *batch.JobList, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewListAction(jobsResource, jobsKind, c.ns, opts), &batch.JobList{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		label, _, _ := testing.ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		if label == nil {
0000000000000000000000000000000000000000;;			label = labels.Everything()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		list := &batch.JobList{}
0000000000000000000000000000000000000000;;		for _, item := range obj.(*batch.JobList).Items {
0000000000000000000000000000000000000000;;			if label.Matches(labels.Set(item.Labels)) {
0000000000000000000000000000000000000000;;				list.Items = append(list.Items, item)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return list, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watch returns a watch.Interface that watches the requested jobs.
0000000000000000000000000000000000000000;;	func (c *FakeJobs) Watch(opts v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return c.Fake.
0000000000000000000000000000000000000000;;			InvokesWatch(testing.NewWatchAction(jobsResource, c.ns, opts))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patch applies the patch and returns the patched job.
0000000000000000000000000000000000000000;;	func (c *FakeJobs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *batch.Job, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewPatchSubresourceAction(jobsResource, c.ns, name, data, subresources...), &batch.Job{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*batch.Job), err
0000000000000000000000000000000000000000;;	}
