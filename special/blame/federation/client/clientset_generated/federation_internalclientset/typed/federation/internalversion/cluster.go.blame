0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
957153937e02d6a1d3ba13610ceb411bf131e9c4;federation/client/clientset_generated/federation_internalclientset/typed/federation/unversioned/cluster.go[federation/client/clientset_generated/federation_internalclientset/typed/federation/unversioned/cluster.go][federation/client/clientset_generated/federation_internalclientset/typed/federation/internalversion/cluster.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		types "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		rest "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		federation "k8s.io/kubernetes/federation/apis/federation"
0000000000000000000000000000000000000000;;		scheme "k8s.io/kubernetes/federation/client/clientset_generated/federation_internalclientset/scheme"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClustersGetter has a method to return a ClusterInterface.
0000000000000000000000000000000000000000;;	// A group's client should implement this interface.
0000000000000000000000000000000000000000;;	type ClustersGetter interface {
0000000000000000000000000000000000000000;;		Clusters() ClusterInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClusterInterface has methods to work with Cluster resources.
0000000000000000000000000000000000000000;;	type ClusterInterface interface {
0000000000000000000000000000000000000000;;		Create(*federation.Cluster) (*federation.Cluster, error)
0000000000000000000000000000000000000000;;		Update(*federation.Cluster) (*federation.Cluster, error)
0000000000000000000000000000000000000000;;		UpdateStatus(*federation.Cluster) (*federation.Cluster, error)
0000000000000000000000000000000000000000;;		Delete(name string, options *v1.DeleteOptions) error
0000000000000000000000000000000000000000;;		DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
0000000000000000000000000000000000000000;;		Get(name string, options v1.GetOptions) (*federation.Cluster, error)
0000000000000000000000000000000000000000;;		List(opts v1.ListOptions) (*federation.ClusterList, error)
0000000000000000000000000000000000000000;;		Watch(opts v1.ListOptions) (watch.Interface, error)
0000000000000000000000000000000000000000;;		Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *federation.Cluster, err error)
0000000000000000000000000000000000000000;;		ClusterExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// clusters implements ClusterInterface
0000000000000000000000000000000000000000;;	type clusters struct {
0000000000000000000000000000000000000000;;		client rest.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newClusters returns a Clusters
0000000000000000000000000000000000000000;;	func newClusters(c *FederationClient) *clusters {
0000000000000000000000000000000000000000;;		return &clusters{
0000000000000000000000000000000000000000;;			client: c.RESTClient(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create takes the representation of a cluster and creates it.  Returns the server's representation of the cluster, and an error, if there is any.
0000000000000000000000000000000000000000;;	func (c *clusters) Create(cluster *federation.Cluster) (result *federation.Cluster, err error) {
0000000000000000000000000000000000000000;;		result = &federation.Cluster{}
0000000000000000000000000000000000000000;;		err = c.client.Post().
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			Body(cluster).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update takes the representation of a cluster and updates it. Returns the server's representation of the cluster, and an error, if there is any.
0000000000000000000000000000000000000000;;	func (c *clusters) Update(cluster *federation.Cluster) (result *federation.Cluster, err error) {
0000000000000000000000000000000000000000;;		result = &federation.Cluster{}
0000000000000000000000000000000000000000;;		err = c.client.Put().
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			Name(cluster.Name).
0000000000000000000000000000000000000000;;			Body(cluster).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateStatus was generated because the type contains a Status member.
0000000000000000000000000000000000000000;;	// Add a +genclientstatus=false comment above the type to avoid generating UpdateStatus().
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *clusters) UpdateStatus(cluster *federation.Cluster) (result *federation.Cluster, err error) {
0000000000000000000000000000000000000000;;		result = &federation.Cluster{}
0000000000000000000000000000000000000000;;		err = c.client.Put().
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			Name(cluster.Name).
0000000000000000000000000000000000000000;;			SubResource("status").
0000000000000000000000000000000000000000;;			Body(cluster).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete takes name of the cluster and deletes it. Returns an error if one occurs.
0000000000000000000000000000000000000000;;	func (c *clusters) Delete(name string, options *v1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		return c.client.Delete().
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			Body(options).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteCollection deletes a collection of objects.
0000000000000000000000000000000000000000;;	func (c *clusters) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
0000000000000000000000000000000000000000;;		return c.client.Delete().
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			VersionedParams(&listOptions, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Body(options).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get takes name of the cluster, and returns the corresponding cluster object, and an error if there is any.
0000000000000000000000000000000000000000;;	func (c *clusters) Get(name string, options v1.GetOptions) (result *federation.Cluster, err error) {
0000000000000000000000000000000000000000;;		result = &federation.Cluster{}
0000000000000000000000000000000000000000;;		err = c.client.Get().
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			VersionedParams(&options, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List takes label and field selectors, and returns the list of Clusters that match those selectors.
0000000000000000000000000000000000000000;;	func (c *clusters) List(opts v1.ListOptions) (result *federation.ClusterList, err error) {
0000000000000000000000000000000000000000;;		result = &federation.ClusterList{}
0000000000000000000000000000000000000000;;		err = c.client.Get().
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			VersionedParams(&opts, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watch returns a watch.Interface that watches the requested clusters.
0000000000000000000000000000000000000000;;	func (c *clusters) Watch(opts v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		opts.Watch = true
0000000000000000000000000000000000000000;;		return c.client.Get().
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			VersionedParams(&opts, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Watch()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patch applies the patch and returns the patched cluster.
0000000000000000000000000000000000000000;;	func (c *clusters) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *federation.Cluster, err error) {
0000000000000000000000000000000000000000;;		result = &federation.Cluster{}
0000000000000000000000000000000000000000;;		err = c.client.Patch(pt).
0000000000000000000000000000000000000000;;			Resource("clusters").
0000000000000000000000000000000000000000;;			SubResource(subresources...).
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			Body(data).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
