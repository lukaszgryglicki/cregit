0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
3098b3cdac0c6539db3a178f26b27d4a6a4ac426;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Function to get a map of resources and the corresponding storages.
0000000000000000000000000000000000000000;;	type getResourcesStorageFunc func() map[string]rest.Storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filters the resources from the given resources storage map to those that are enabled in the given apiResourceConfigSource.
0000000000000000000000000000000000000000;;	// resourcesStorageMap is expected to contain all resources in a group version.
0000000000000000000000000000000000000000;;	// Returns false if none of the resources are enabled and hence the whole group version should be disabled.
0000000000000000000000000000000000000000;;	func enabledResources(groupVersion schema.GroupVersion, resourcesStorageMap map[string]getResourcesStorageFunc, apiResourceConfigSource storage.APIResourceConfigSource) (bool, map[string]rest.Storage) {
0000000000000000000000000000000000000000;;		enabledResources := map[string]rest.Storage{}
0000000000000000000000000000000000000000;;		groupName := groupVersion.Group
0000000000000000000000000000000000000000;;		if !apiResourceConfigSource.AnyResourcesForGroupEnabled(groupName) {
0000000000000000000000000000000000000000;;			glog.V(1).Infof("Skipping disabled API group %q", groupName)
0000000000000000000000000000000000000000;;			return false, enabledResources
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for resource, fn := range resourcesStorageMap {
0000000000000000000000000000000000000000;;			if apiResourceConfigSource.ResourceEnabled(groupVersion.WithResource(resource)) {
0000000000000000000000000000000000000000;;				resources := fn()
0000000000000000000000000000000000000000;;				for k, v := range resources {
0000000000000000000000000000000000000000;;					enabledResources[k] = v
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				glog.V(1).Infof("Skipping disabled resource %s in API group %q", resource, groupName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(enabledResources) == 0 {
0000000000000000000000000000000000000000;;			glog.V(1).Infof("Skipping API group %q since there is no enabled resource", groupName)
0000000000000000000000000000000000000000;;			return false, enabledResources
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, enabledResources
0000000000000000000000000000000000000000;;	}
