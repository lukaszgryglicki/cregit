0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
763f6a42e4660e7cb54ea45cc15fbc29ea6b737b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		autoscalingv1 "k8s.io/api/autoscaling/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/apis/autoscaling/install"
0000000000000000000000000000000000000000;;		hpastorage "k8s.io/kubernetes/pkg/registry/autoscaling/horizontalpodautoscaler/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func installAutoscalingAPIs(g *genericapiserver.GenericAPIServer, optsGetter generic.RESTOptionsGetter, apiResourceConfigSource storage.APIResourceConfigSource) {
0000000000000000000000000000000000000000;;		hpaStorageFn := func() map[string]rest.Storage {
0000000000000000000000000000000000000000;;			hpaStorage, hpaStatusStorage := hpastorage.NewREST(optsGetter)
0000000000000000000000000000000000000000;;			return map[string]rest.Storage{
0000000000000000000000000000000000000000;;				"horizontalpodautoscalers":        hpaStorage,
0000000000000000000000000000000000000000;;				"horizontalpodautoscalers/status": hpaStatusStorage,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resourcesStorageMap := map[string]getResourcesStorageFunc{
0000000000000000000000000000000000000000;;			"horizontalpodautoscalers": hpaStorageFn,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		shouldInstallGroup, resources := enabledResources(autoscalingv1.SchemeGroupVersion, resourcesStorageMap, apiResourceConfigSource)
0000000000000000000000000000000000000000;;		if !shouldInstallGroup {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		autoscalingGroupMeta := api.Registry.GroupOrDie(autoscaling.GroupName)
0000000000000000000000000000000000000000;;		apiGroupInfo := genericapiserver.APIGroupInfo{
0000000000000000000000000000000000000000;;			GroupMeta: *autoscalingGroupMeta,
0000000000000000000000000000000000000000;;			VersionedResourcesStorageMap: map[string]map[string]rest.Storage{
0000000000000000000000000000000000000000;;				"v1": resources,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			OptionsExternalVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion,
0000000000000000000000000000000000000000;;			Scheme:                 api.Scheme,
0000000000000000000000000000000000000000;;			ParameterCodec:         api.ParameterCodec,
0000000000000000000000000000000000000000;;			NegotiatedSerializer:   api.Codecs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := g.InstallAPIGroup(&apiGroupInfo); err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error in registering group versions: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
