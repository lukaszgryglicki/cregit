0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
6cef88f39ae420c5985043f8d38512beda777c25;federation/cmd/federated-apiserver/app/server.go[federation/cmd/federated-apiserver/app/server.go][federation/cmd/federation-apiserver/app/server.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package app does all of the work necessary to create a Kubernetes
0000000000000000000000000000000000000000;;	// APIServer by binding together the API, master and APIServer infrastructure.
0000000000000000000000000000000000000000;;	// It can be configured and called directly or via the hyperkube cache.
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensionsapiv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		apimachineryopenapi "k8s.io/apimachinery/pkg/openapi"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/filters"
0000000000000000000000000000000000000000;;		serverstorage "k8s.io/apiserver/pkg/server/storage"
0000000000000000000000000000000000000000;;		federationv1beta1 "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/cmd/federation-apiserver/app/options"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		informers "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/generated/openapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubeapiserver"
0000000000000000000000000000000000000000;;		kubeapiserveradmission "k8s.io/kubernetes/pkg/kubeapiserver/admission"
0000000000000000000000000000000000000000;;		kubeoptions "k8s.io/kubernetes/pkg/kubeapiserver/options"
0000000000000000000000000000000000000000;;		kubeserver "k8s.io/kubernetes/pkg/kubeapiserver/server"
0000000000000000000000000000000000000000;;		quotainstall "k8s.io/kubernetes/pkg/quota/install"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/cachesize"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/routes"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/version"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAPIServerCommand creates a *cobra.Command object with default parameters
0000000000000000000000000000000000000000;;	func NewAPIServerCommand() *cobra.Command {
0000000000000000000000000000000000000000;;		s := options.NewServerRunOptions()
0000000000000000000000000000000000000000;;		s.AddFlags(pflag.CommandLine)
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use: "federation-apiserver",
0000000000000000000000000000000000000000;;			Long: `The Kubernetes federation API server validates and configures data
0000000000000000000000000000000000000000;;	for the api objects which include pods, services, replicationcontrollers, and
0000000000000000000000000000000000000000;;	others. The API Server services REST operations and provides the frontend to the
0000000000000000000000000000000000000000;;	cluster's shared state through which all other components interact.`,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run runs the specified APIServer.  It only returns if stopCh is closed
0000000000000000000000000000000000000000;;	// or one of the ports cannot be listened on initially.
0000000000000000000000000000000000000000;;	func Run(s *options.ServerRunOptions, stopCh <-chan struct{}) error {
0000000000000000000000000000000000000000;;		err := NonBlockingRun(s, stopCh)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		<-stopCh
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NonBlockingRun runs the specified APIServer and configures it to
0000000000000000000000000000000000000000;;	// stop with the given channel.
0000000000000000000000000000000000000000;;	func NonBlockingRun(s *options.ServerRunOptions, stopCh <-chan struct{}) error {
0000000000000000000000000000000000000000;;		// register all admission plugins
0000000000000000000000000000000000000000;;		registerAllAdmissionPlugins(s.Admission.Plugins)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// set defaults
0000000000000000000000000000000000000000;;		if err := s.GenericServerRunOptions.DefaultAdvertiseAddress(s.SecureServing); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := kubeoptions.DefaultAdvertiseAddress(s.GenericServerRunOptions, s.InsecureServing); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.SecureServing.MaybeDefaultWithSelfSignedCerts(s.GenericServerRunOptions.AdvertiseAddress.String(), nil, nil); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error creating self-signed certificates: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.CloudProvider.DefaultExternalHost(s.GenericServerRunOptions); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error setting the external host value: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.SecureServing.ForceLoopbackConfigUsage()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Authentication.ApplyAuthorization(s.Authorization)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// validate options
0000000000000000000000000000000000000000;;		if errs := s.Validate(); len(errs) != 0 {
0000000000000000000000000000000000000000;;			return utilerrors.NewAggregate(errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		genericConfig := genericapiserver.NewConfig(api.Codecs)
0000000000000000000000000000000000000000;;		if err := s.GenericServerRunOptions.ApplyTo(genericConfig); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		insecureServingOptions, err := s.InsecureServing.ApplyTo(genericConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.SecureServing.ApplyTo(genericConfig); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Authentication.ApplyTo(genericConfig); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Audit.ApplyTo(genericConfig); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Features.ApplyTo(genericConfig); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceConfig := defaultResourceConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s.Etcd.StorageConfig.DeserializationCacheSize == 0 {
0000000000000000000000000000000000000000;;			// When size of cache is not explicitly set, set it to 50000
0000000000000000000000000000000000000000;;			s.Etcd.StorageConfig.DeserializationCacheSize = 50000
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		storageGroupsToEncodingVersion, err := s.StorageSerialization.StorageGroupsToEncodingVersion()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error generating storage version map: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		storageFactory, err := kubeapiserver.NewStorageFactory(
0000000000000000000000000000000000000000;;			s.Etcd.StorageConfig, s.Etcd.DefaultStorageMediaType, api.Codecs,
0000000000000000000000000000000000000000;;			serverstorage.NewDefaultResourceEncodingConfig(api.Registry), storageGroupsToEncodingVersion,
0000000000000000000000000000000000000000;;			[]schema.GroupVersionResource{}, resourceConfig, s.APIEnablement.RuntimeConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error in initializing storage factory: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, override := range s.Etcd.EtcdServersOverrides {
0000000000000000000000000000000000000000;;			tokens := strings.Split(override, "#")
0000000000000000000000000000000000000000;;			if len(tokens) != 2 {
0000000000000000000000000000000000000000;;				glog.Errorf("invalid value of etcd server overrides: %s", override)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			apiresource := strings.Split(tokens[0], "/")
0000000000000000000000000000000000000000;;			if len(apiresource) != 2 {
0000000000000000000000000000000000000000;;				glog.Errorf("invalid resource definition: %s", tokens[0])
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			group := apiresource[0]
0000000000000000000000000000000000000000;;			resource := apiresource[1]
0000000000000000000000000000000000000000;;			groupResource := schema.GroupResource{Group: group, Resource: resource}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			servers := strings.Split(tokens[1], ";")
0000000000000000000000000000000000000000;;			storageFactory.SetEtcdLocation(groupResource, servers)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := s.Etcd.ApplyWithStorageFactoryTo(storageFactory, genericConfig); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiAuthenticator, securityDefinitions, err := s.Authentication.ToAuthenticationConfig().New()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("invalid Authentication Config: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client, err := internalclientset.NewForConfig(genericConfig.LoopbackClientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to create clientset: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		externalClient, err := clientset.NewForConfig(genericConfig.LoopbackClientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to create external clientset: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sharedInformers := informers.NewSharedInformerFactory(client, 10*time.Minute)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authorizationConfig := s.Authorization.ToAuthorizationConfig(sharedInformers)
0000000000000000000000000000000000000000;;		apiAuthorizer, err := authorizationConfig.New()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("invalid Authorization Config: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var cloudConfig []byte
0000000000000000000000000000000000000000;;		if s.CloudProvider.CloudConfigFile != "" {
0000000000000000000000000000000000000000;;			cloudConfig, err = ioutil.ReadFile(s.CloudProvider.CloudConfigFile)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Error reading from cloud configuration file %s: %#v", s.CloudProvider.CloudConfigFile, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NOTE: we do not provide informers to the quota registry because admission level decisions
0000000000000000000000000000000000000000;;		// do not require us to open watches for all items tracked by quota.
0000000000000000000000000000000000000000;;		quotaRegistry := quotainstall.NewRegistry(nil, nil)
0000000000000000000000000000000000000000;;		pluginInitializer := kubeapiserveradmission.NewPluginInitializer(client, externalClient, sharedInformers, apiAuthorizer, cloudConfig, nil, quotaRegistry)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = s.Admission.ApplyTo(
0000000000000000000000000000000000000000;;			genericConfig,
0000000000000000000000000000000000000000;;			pluginInitializer,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to initialize plugins: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeVersion := version.Get()
0000000000000000000000000000000000000000;;		genericConfig.Version = &kubeVersion
0000000000000000000000000000000000000000;;		genericConfig.Authenticator = apiAuthenticator
0000000000000000000000000000000000000000;;		genericConfig.Authorizer = apiAuthorizer
0000000000000000000000000000000000000000;;		genericConfig.OpenAPIConfig = genericapiserver.DefaultOpenAPIConfig(openapi.GetOpenAPIDefinitions, api.Scheme)
0000000000000000000000000000000000000000;;		genericConfig.OpenAPIConfig.PostProcessSpec = postProcessOpenAPISpecForBackwardCompatibility
0000000000000000000000000000000000000000;;		genericConfig.OpenAPIConfig.SecurityDefinitions = securityDefinitions
0000000000000000000000000000000000000000;;		genericConfig.SwaggerConfig = genericapiserver.DefaultSwaggerConfig()
0000000000000000000000000000000000000000;;		genericConfig.LongRunningFunc = filters.BasicLongRunningRequestCheck(
0000000000000000000000000000000000000000;;			sets.NewString("watch", "proxy"),
0000000000000000000000000000000000000000;;			sets.NewString("attach", "exec", "proxy", "log", "portforward"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: Move this to generic api server (Need to move the command line flag).
0000000000000000000000000000000000000000;;		if s.Etcd.EnableWatchCache {
0000000000000000000000000000000000000000;;			cachesize.InitializeWatchCacheSizes(s.GenericServerRunOptions.TargetRAMMB)
0000000000000000000000000000000000000000;;			cachesize.SetWatchCacheSizes(s.GenericServerRunOptions.WatchCacheSizes)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m, err := genericConfig.Complete().New("federation", genericapiserver.EmptyDelegate)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		routes.UIRedirect{}.Install(m.Handler.NonGoRestfulMux)
0000000000000000000000000000000000000000;;		routes.Logs{}.Install(m.Handler.GoRestfulContainer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiResourceConfigSource := storageFactory.APIResourceConfigSource
0000000000000000000000000000000000000000;;		installFederationAPIs(m, genericConfig.RESTOptionsGetter, apiResourceConfigSource)
0000000000000000000000000000000000000000;;		installCoreAPIs(s, m, genericConfig.RESTOptionsGetter, apiResourceConfigSource)
0000000000000000000000000000000000000000;;		installExtensionsAPIs(m, genericConfig.RESTOptionsGetter, apiResourceConfigSource)
0000000000000000000000000000000000000000;;		installBatchAPIs(m, genericConfig.RESTOptionsGetter, apiResourceConfigSource)
0000000000000000000000000000000000000000;;		installAutoscalingAPIs(m, genericConfig.RESTOptionsGetter, apiResourceConfigSource)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// run the insecure server now
0000000000000000000000000000000000000000;;		if insecureServingOptions != nil {
0000000000000000000000000000000000000000;;			insecureHandlerChain := kubeserver.BuildInsecureHandlerChain(m.UnprotectedHandler(), genericConfig)
0000000000000000000000000000000000000000;;			if err := kubeserver.NonBlockingRun(insecureServingOptions, insecureHandlerChain, stopCh); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = m.PrepareRun().NonBlockingRun(stopCh)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			sharedInformers.Start(stopCh)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultResourceConfig() *serverstorage.ResourceConfig {
0000000000000000000000000000000000000000;;		rc := serverstorage.NewResourceConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rc.EnableVersions(
0000000000000000000000000000000000000000;;			federationv1beta1.SchemeGroupVersion,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// All core resources except these are disabled by default.
0000000000000000000000000000000000000000;;		rc.EnableResources(
0000000000000000000000000000000000000000;;			apiv1.SchemeGroupVersion.WithResource("secrets"),
0000000000000000000000000000000000000000;;			apiv1.SchemeGroupVersion.WithResource("services"),
0000000000000000000000000000000000000000;;			apiv1.SchemeGroupVersion.WithResource("namespaces"),
0000000000000000000000000000000000000000;;			apiv1.SchemeGroupVersion.WithResource("events"),
0000000000000000000000000000000000000000;;			apiv1.SchemeGroupVersion.WithResource("configmaps"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		// All extension resources except these are disabled by default.
0000000000000000000000000000000000000000;;		rc.EnableResources(
0000000000000000000000000000000000000000;;			extensionsapiv1beta1.SchemeGroupVersion.WithResource("daemonsets"),
0000000000000000000000000000000000000000;;			extensionsapiv1beta1.SchemeGroupVersion.WithResource("deployments"),
0000000000000000000000000000000000000000;;			extensionsapiv1beta1.SchemeGroupVersion.WithResource("ingresses"),
0000000000000000000000000000000000000000;;			extensionsapiv1beta1.SchemeGroupVersion.WithResource("replicasets"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		return rc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PostProcessSpec adds removed definitions for backward compatibility
0000000000000000000000000000000000000000;;	func postProcessOpenAPISpecForBackwardCompatibility(s *spec.Swagger) (*spec.Swagger, error) {
0000000000000000000000000000000000000000;;		compatibilityMap := map[string]string{
0000000000000000000000000000000000000000;;			"v1beta1.ReplicaSetList":           "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetList",
0000000000000000000000000000000000000000;;			"v1.FlockerVolumeSource":           "io.k8s.kubernetes.pkg.api.v1.FlockerVolumeSource",
0000000000000000000000000000000000000000;;			"v1.FlexVolumeSource":              "io.k8s.kubernetes.pkg.api.v1.FlexVolumeSource",
0000000000000000000000000000000000000000;;			"v1.SecretKeySelector":             "io.k8s.kubernetes.pkg.api.v1.SecretKeySelector",
0000000000000000000000000000000000000000;;			"v1.DeleteOptions":                 "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions",
0000000000000000000000000000000000000000;;			"v1.ServiceSpec":                   "io.k8s.kubernetes.pkg.api.v1.ServiceSpec",
0000000000000000000000000000000000000000;;			"v1.NamespaceStatus":               "io.k8s.kubernetes.pkg.api.v1.NamespaceStatus",
0000000000000000000000000000000000000000;;			"v1.Affinity":                      "io.k8s.kubernetes.pkg.api.v1.Affinity",
0000000000000000000000000000000000000000;;			"v1.PodAffinity":                   "io.k8s.kubernetes.pkg.api.v1.PodAffinity",
0000000000000000000000000000000000000000;;			"v1.EnvVarSource":                  "io.k8s.kubernetes.pkg.api.v1.EnvVarSource",
0000000000000000000000000000000000000000;;			"v1.ListMeta":                      "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
0000000000000000000000000000000000000000;;			"v1.ObjectMeta":                    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
0000000000000000000000000000000000000000;;			"v1.APIGroupList":                  "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList",
0000000000000000000000000000000000000000;;			"v1.EnvFromSource":                 "io.k8s.kubernetes.pkg.api.v1.EnvFromSource",
0000000000000000000000000000000000000000;;			"v1.Service":                       "io.k8s.kubernetes.pkg.api.v1.Service",
0000000000000000000000000000000000000000;;			"v1.HorizontalPodAutoscaler":       "io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscaler",
0000000000000000000000000000000000000000;;			"v1.StatusCause":                   "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause",
0000000000000000000000000000000000000000;;			"v1.ObjectFieldSelector":           "io.k8s.kubernetes.pkg.api.v1.ObjectFieldSelector",
0000000000000000000000000000000000000000;;			"v1.QuobyteVolumeSource":           "io.k8s.kubernetes.pkg.api.v1.QuobyteVolumeSource",
0000000000000000000000000000000000000000;;			"v1beta1.ReplicaSetSpec":           "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetSpec",
0000000000000000000000000000000000000000;;			"v1.LabelSelector":                 "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
0000000000000000000000000000000000000000;;			"v1.DownwardAPIVolumeFile":         "io.k8s.kubernetes.pkg.api.v1.DownwardAPIVolumeFile",
0000000000000000000000000000000000000000;;			"v1.GCEPersistentDiskVolumeSource": "io.k8s.kubernetes.pkg.api.v1.GCEPersistentDiskVolumeSource",
0000000000000000000000000000000000000000;;			"v1beta1.ClusterCondition":         "io.k8s.kubernetes.federation.apis.federation.v1beta1.ClusterCondition",
0000000000000000000000000000000000000000;;			"v1.JobCondition":                  "io.k8s.kubernetes.pkg.apis.batch.v1.JobCondition",
0000000000000000000000000000000000000000;;			"v1.LabelSelectorRequirement":      "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement",
0000000000000000000000000000000000000000;;			"v1beta1.Deployment":               "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Deployment",
0000000000000000000000000000000000000000;;			"v1.LoadBalancerIngress":           "io.k8s.kubernetes.pkg.api.v1.LoadBalancerIngress",
0000000000000000000000000000000000000000;;			"v1.SecretList":                    "io.k8s.kubernetes.pkg.api.v1.SecretList",
0000000000000000000000000000000000000000;;			"v1.ServicePort":                   "io.k8s.kubernetes.pkg.api.v1.ServicePort",
0000000000000000000000000000000000000000;;			"v1.Namespace":                     "io.k8s.kubernetes.pkg.api.v1.Namespace",
0000000000000000000000000000000000000000;;			"v1beta1.ReplicaSetCondition":      "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetCondition",
0000000000000000000000000000000000000000;;			"v1.CrossVersionObjectReference":   "io.k8s.kubernetes.pkg.apis.autoscaling.v1.CrossVersionObjectReference",
0000000000000000000000000000000000000000;;			"v1.ConfigMapVolumeSource":         "io.k8s.kubernetes.pkg.api.v1.ConfigMapVolumeSource",
0000000000000000000000000000000000000000;;			"v1.FCVolumeSource":                "io.k8s.kubernetes.pkg.api.v1.FCVolumeSource",
0000000000000000000000000000000000000000;;			"v1.GroupVersionForDiscovery":      "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery",
0000000000000000000000000000000000000000;;			"v1beta1.ClusterStatus":            "io.k8s.kubernetes.federation.apis.federation.v1beta1.ClusterStatus",
0000000000000000000000000000000000000000;;			"v1.Job":                           "io.k8s.kubernetes.pkg.apis.batch.v1.Job",
0000000000000000000000000000000000000000;;			"v1.PersistentVolumeClaimVolumeSource": "io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimVolumeSource",
0000000000000000000000000000000000000000;;			"v1.Handler":                           "io.k8s.kubernetes.pkg.api.v1.Handler",
0000000000000000000000000000000000000000;;			"v1.ServerAddressByClientCIDR":         "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR",
0000000000000000000000000000000000000000;;			"v1.PodAntiAffinity":                   "io.k8s.kubernetes.pkg.api.v1.PodAntiAffinity",
0000000000000000000000000000000000000000;;			"v1.ISCSIVolumeSource":                 "io.k8s.kubernetes.pkg.api.v1.ISCSIVolumeSource",
0000000000000000000000000000000000000000;;			"v1.WeightedPodAffinityTerm":           "io.k8s.kubernetes.pkg.api.v1.WeightedPodAffinityTerm",
0000000000000000000000000000000000000000;;			"v1.HorizontalPodAutoscalerSpec":       "io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerSpec",
0000000000000000000000000000000000000000;;			"v1.HorizontalPodAutoscalerList":       "io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerList",
0000000000000000000000000000000000000000;;			"v1.Probe":                             "io.k8s.kubernetes.pkg.api.v1.Probe",
0000000000000000000000000000000000000000;;			"v1.APIGroup":                          "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup",
0000000000000000000000000000000000000000;;			"v1beta1.DeploymentList":               "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentList",
0000000000000000000000000000000000000000;;			"v1.NodeAffinity":                      "io.k8s.kubernetes.pkg.api.v1.NodeAffinity",
0000000000000000000000000000000000000000;;			"v1.SecretEnvSource":                   "io.k8s.kubernetes.pkg.api.v1.SecretEnvSource",
0000000000000000000000000000000000000000;;			"v1beta1.DeploymentStatus":             "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentStatus",
0000000000000000000000000000000000000000;;			"v1.CinderVolumeSource":                "io.k8s.kubernetes.pkg.api.v1.CinderVolumeSource",
0000000000000000000000000000000000000000;;			"v1.NodeSelectorTerm":                  "io.k8s.kubernetes.pkg.api.v1.NodeSelectorTerm",
0000000000000000000000000000000000000000;;			"v1.Patch":                             "io.k8s.apimachinery.pkg.apis.meta.v1.Patch",
0000000000000000000000000000000000000000;;			"v1.SecretVolumeSource":                "io.k8s.kubernetes.pkg.api.v1.SecretVolumeSource",
0000000000000000000000000000000000000000;;			"v1.Secret":                            "io.k8s.kubernetes.pkg.api.v1.Secret",
0000000000000000000000000000000000000000;;			"v1.NodeSelector":                      "io.k8s.kubernetes.pkg.api.v1.NodeSelector",
0000000000000000000000000000000000000000;;			"runtime.RawExtension":                 "io.k8s.apimachinery.pkg.runtime.RawExtension",
0000000000000000000000000000000000000000;;			"v1.PreferredSchedulingTerm":           "io.k8s.kubernetes.pkg.api.v1.PreferredSchedulingTerm",
0000000000000000000000000000000000000000;;			"v1beta1.ClusterList":                  "io.k8s.kubernetes.federation.apis.federation.v1beta1.ClusterList",
0000000000000000000000000000000000000000;;			"v1.KeyToPath":                         "io.k8s.kubernetes.pkg.api.v1.KeyToPath",
0000000000000000000000000000000000000000;;			"intstr.IntOrString":                   "io.k8s.apimachinery.pkg.util.intstr.IntOrString",
0000000000000000000000000000000000000000;;			"v1beta1.ClusterSpec":                  "io.k8s.kubernetes.federation.apis.federation.v1beta1.ClusterSpec",
0000000000000000000000000000000000000000;;			"v1.ServiceList":                       "io.k8s.kubernetes.pkg.api.v1.ServiceList",
0000000000000000000000000000000000000000;;			"v1beta1.DeploymentStrategy":           "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentStrategy",
0000000000000000000000000000000000000000;;			"v1beta1.IngressBackend":               "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressBackend",
0000000000000000000000000000000000000000;;			"v1.Time":                              "io.k8s.apimachinery.pkg.apis.meta.v1.Time",
0000000000000000000000000000000000000000;;			"v1.ContainerPort":                     "io.k8s.kubernetes.pkg.api.v1.ContainerPort",
0000000000000000000000000000000000000000;;			"v1beta1.HTTPIngressRuleValue":         "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.HTTPIngressRuleValue",
0000000000000000000000000000000000000000;;			"v1.AzureFileVolumeSource":             "io.k8s.kubernetes.pkg.api.v1.AzureFileVolumeSource",
0000000000000000000000000000000000000000;;			"v1.PodTemplateSpec":                   "io.k8s.kubernetes.pkg.api.v1.PodTemplateSpec",
0000000000000000000000000000000000000000;;			"v1.PodSpec":                           "io.k8s.kubernetes.pkg.api.v1.PodSpec",
0000000000000000000000000000000000000000;;			"v1beta1.ReplicaSetStatus":             "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSetStatus",
0000000000000000000000000000000000000000;;			"v1.CephFSVolumeSource":                "io.k8s.kubernetes.pkg.api.v1.CephFSVolumeSource",
0000000000000000000000000000000000000000;;			"v1.Volume":                            "io.k8s.kubernetes.pkg.api.v1.Volume",
0000000000000000000000000000000000000000;;			"v1beta1.Ingress":                      "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Ingress",
0000000000000000000000000000000000000000;;			"v1.PodAffinityTerm":                   "io.k8s.kubernetes.pkg.api.v1.PodAffinityTerm",
0000000000000000000000000000000000000000;;			"v1.ObjectReference":                   "io.k8s.kubernetes.pkg.api.v1.ObjectReference",
0000000000000000000000000000000000000000;;			"v1.ServiceStatus":                     "io.k8s.kubernetes.pkg.api.v1.ServiceStatus",
0000000000000000000000000000000000000000;;			"v1.APIResource":                       "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource",
0000000000000000000000000000000000000000;;			"v1.AzureDiskVolumeSource":             "io.k8s.kubernetes.pkg.api.v1.AzureDiskVolumeSource",
0000000000000000000000000000000000000000;;			"v1.ConfigMap":                         "io.k8s.kubernetes.pkg.api.v1.ConfigMap",
0000000000000000000000000000000000000000;;			"v1beta1.IngressSpec":                  "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressSpec",
0000000000000000000000000000000000000000;;			"v1.APIVersions":                       "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions",
0000000000000000000000000000000000000000;;			"resource.Quantity":                    "io.k8s.apimachinery.pkg.api.resource.Quantity",
0000000000000000000000000000000000000000;;			"v1.Event":                             "io.k8s.kubernetes.pkg.api.v1.Event",
0000000000000000000000000000000000000000;;			"v1.JobStatus":                         "io.k8s.kubernetes.pkg.apis.batch.v1.JobStatus",
0000000000000000000000000000000000000000;;			"v1beta1.ServerAddressByClientCIDR":    "io.k8s.kubernetes.federation.apis.federation.v1beta1.ServerAddressByClientCIDR",
0000000000000000000000000000000000000000;;			"v1.LocalObjectReference":              "io.k8s.kubernetes.pkg.api.v1.LocalObjectReference",
0000000000000000000000000000000000000000;;			"v1.HostPathVolumeSource":              "io.k8s.kubernetes.pkg.api.v1.HostPathVolumeSource",
0000000000000000000000000000000000000000;;			"v1.LoadBalancerStatus":                "io.k8s.kubernetes.pkg.api.v1.LoadBalancerStatus",
0000000000000000000000000000000000000000;;			"v1beta1.HTTPIngressPath":              "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.HTTPIngressPath",
0000000000000000000000000000000000000000;;			"v1beta1.DeploymentSpec":               "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentSpec",
0000000000000000000000000000000000000000;;			"v1.ExecAction":                        "io.k8s.kubernetes.pkg.api.v1.ExecAction",
0000000000000000000000000000000000000000;;			"v1.HorizontalPodAutoscalerStatus":     "io.k8s.kubernetes.pkg.apis.autoscaling.v1.HorizontalPodAutoscalerStatus",
0000000000000000000000000000000000000000;;			"v1.JobSpec":                           "io.k8s.kubernetes.pkg.apis.batch.v1.JobSpec",
0000000000000000000000000000000000000000;;			"v1beta1.DaemonSetSpec":                "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetSpec",
0000000000000000000000000000000000000000;;			"v1.SELinuxOptions":                    "io.k8s.kubernetes.pkg.api.v1.SELinuxOptions",
0000000000000000000000000000000000000000;;			"v1beta1.IngressTLS":                   "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressTLS",
0000000000000000000000000000000000000000;;			"v1beta1.ScaleStatus":                  "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ScaleStatus",
0000000000000000000000000000000000000000;;			"v1.NamespaceSpec":                     "io.k8s.kubernetes.pkg.api.v1.NamespaceSpec",
0000000000000000000000000000000000000000;;			"v1.StatusDetails":                     "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails",
0000000000000000000000000000000000000000;;			"v1beta1.IngressList":                  "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressList",
0000000000000000000000000000000000000000;;			"v1beta1.DeploymentRollback":           "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentRollback",
0000000000000000000000000000000000000000;;			"v1.GlusterfsVolumeSource":             "io.k8s.kubernetes.pkg.api.v1.GlusterfsVolumeSource",
0000000000000000000000000000000000000000;;			"v1.JobList":                           "io.k8s.kubernetes.pkg.apis.batch.v1.JobList",
0000000000000000000000000000000000000000;;			"v1.EventList":                         "io.k8s.kubernetes.pkg.api.v1.EventList",
0000000000000000000000000000000000000000;;			"v1beta1.IngressRule":                  "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressRule",
0000000000000000000000000000000000000000;;			"v1.APIResourceList":                   "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList",
0000000000000000000000000000000000000000;;			"v1.ConfigMapKeySelector":              "io.k8s.kubernetes.pkg.api.v1.ConfigMapKeySelector",
0000000000000000000000000000000000000000;;			"v1.PhotonPersistentDiskVolumeSource":  "io.k8s.kubernetes.pkg.api.v1.PhotonPersistentDiskVolumeSource",
0000000000000000000000000000000000000000;;			"v1.HTTPHeader":                        "io.k8s.kubernetes.pkg.api.v1.HTTPHeader",
0000000000000000000000000000000000000000;;			"version.Info":                         "io.k8s.apimachinery.pkg.version.Info",
0000000000000000000000000000000000000000;;			"v1.EventSource":                       "io.k8s.kubernetes.pkg.api.v1.EventSource",
0000000000000000000000000000000000000000;;			"v1.OwnerReference":                    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference",
0000000000000000000000000000000000000000;;			"v1beta1.ScaleSpec":                    "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ScaleSpec",
0000000000000000000000000000000000000000;;			"v1.GitRepoVolumeSource":               "io.k8s.kubernetes.pkg.api.v1.GitRepoVolumeSource",
0000000000000000000000000000000000000000;;			"v1.ConfigMapEnvSource":                "io.k8s.kubernetes.pkg.api.v1.ConfigMapEnvSource",
0000000000000000000000000000000000000000;;			"v1beta1.DeploymentCondition":          "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DeploymentCondition",
0000000000000000000000000000000000000000;;			"v1.EnvVar":                            "io.k8s.kubernetes.pkg.api.v1.EnvVar",
0000000000000000000000000000000000000000;;			"v1.DownwardAPIVolumeSource":           "io.k8s.kubernetes.pkg.api.v1.DownwardAPIVolumeSource",
0000000000000000000000000000000000000000;;			"v1.SecurityContext":                   "io.k8s.kubernetes.pkg.api.v1.SecurityContext",
0000000000000000000000000000000000000000;;			"v1beta1.IngressStatus":                "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.IngressStatus",
0000000000000000000000000000000000000000;;			"v1beta1.Cluster":                      "io.k8s.kubernetes.federation.apis.federation.v1beta1.Cluster",
0000000000000000000000000000000000000000;;			"v1.Capabilities":                      "io.k8s.kubernetes.pkg.api.v1.Capabilities",
0000000000000000000000000000000000000000;;			"v1.AWSElasticBlockStoreVolumeSource":  "io.k8s.kubernetes.pkg.api.v1.AWSElasticBlockStoreVolumeSource",
0000000000000000000000000000000000000000;;			"v1beta1.ReplicaSet":                   "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.ReplicaSet",
0000000000000000000000000000000000000000;;			"v1.ConfigMapList":                     "io.k8s.kubernetes.pkg.api.v1.ConfigMapList",
0000000000000000000000000000000000000000;;			"v1.Lifecycle":                         "io.k8s.kubernetes.pkg.api.v1.Lifecycle",
0000000000000000000000000000000000000000;;			"v1beta1.Scale":                        "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.Scale",
0000000000000000000000000000000000000000;;			"v1beta1.DaemonSet":                    "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSet",
0000000000000000000000000000000000000000;;			"v1beta1.RollingUpdateDeployment":      "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollingUpdateDeployment",
0000000000000000000000000000000000000000;;			"v1beta1.DaemonSetStatus":              "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetStatus",
0000000000000000000000000000000000000000;;			"v1.Preconditions":                     "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions",
0000000000000000000000000000000000000000;;			"v1beta1.DaemonSetList":                "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.DaemonSetList",
0000000000000000000000000000000000000000;;			"v1.RBDVolumeSource":                   "io.k8s.kubernetes.pkg.api.v1.RBDVolumeSource",
0000000000000000000000000000000000000000;;			"v1.NFSVolumeSource":                   "io.k8s.kubernetes.pkg.api.v1.NFSVolumeSource",
0000000000000000000000000000000000000000;;			"v1.NodeSelectorRequirement":           "io.k8s.kubernetes.pkg.api.v1.NodeSelectorRequirement",
0000000000000000000000000000000000000000;;			"v1.ResourceRequirements":              "io.k8s.kubernetes.pkg.api.v1.ResourceRequirements",
0000000000000000000000000000000000000000;;			"v1.WatchEvent":                        "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent",
0000000000000000000000000000000000000000;;			"v1.HTTPGetAction":                     "io.k8s.kubernetes.pkg.api.v1.HTTPGetAction",
0000000000000000000000000000000000000000;;			"v1beta1.RollbackConfig":               "io.k8s.kubernetes.pkg.apis.extensions.v1beta1.RollbackConfig",
0000000000000000000000000000000000000000;;			"v1.PodSecurityContext":                "io.k8s.kubernetes.pkg.api.v1.PodSecurityContext",
0000000000000000000000000000000000000000;;			"v1.VolumeMount":                       "io.k8s.kubernetes.pkg.api.v1.VolumeMount",
0000000000000000000000000000000000000000;;			"v1.NamespaceList":                     "io.k8s.kubernetes.pkg.api.v1.NamespaceList",
0000000000000000000000000000000000000000;;			"v1.TCPSocketAction":                   "io.k8s.kubernetes.pkg.api.v1.TCPSocketAction",
0000000000000000000000000000000000000000;;			"v1.ResourceFieldSelector":             "io.k8s.kubernetes.pkg.api.v1.ResourceFieldSelector",
0000000000000000000000000000000000000000;;			"v1.Container":                         "io.k8s.kubernetes.pkg.api.v1.Container",
0000000000000000000000000000000000000000;;			"v1.VsphereVirtualDiskVolumeSource":    "io.k8s.kubernetes.pkg.api.v1.VsphereVirtualDiskVolumeSource",
0000000000000000000000000000000000000000;;			"v1.EmptyDirVolumeSource":              "io.k8s.kubernetes.pkg.api.v1.EmptyDirVolumeSource",
0000000000000000000000000000000000000000;;			"v1.Status":                            "io.k8s.apimachinery.pkg.apis.meta.v1.Status",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range compatibilityMap {
0000000000000000000000000000000000000000;;			if _, found := s.Definitions[v]; !found {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s.Definitions[k] = spec.Schema{
0000000000000000000000000000000000000000;;				SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;					Ref:         spec.MustCreateRef("#/definitions/" + apimachineryopenapi.EscapeJsonPointer(v)),
0000000000000000000000000000000000000000;;					Description: fmt.Sprintf("Deprecated. Please use %s instead.", v),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
