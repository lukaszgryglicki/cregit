0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ea27b479382a6462a6212ef4d8d6040472f44877;federation/cmd/federated-apiserver/app/core.go[federation/cmd/federated-apiserver/app/core.go][federation/cmd/federation-apiserver/app/core.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HACK to ensure that rest mapper from pkg/api is registered for groupName="".
0000000000000000000000000000000000000000;;		// This is required because both pkg/api/install and federation/apis/core/install
0000000000000000000000000000000000000000;;		// are installing their respective groupMeta at the same groupName.
0000000000000000000000000000000000000000;;		// federation/apis/core/install has only a subset of resources and hence if it gets registered first, then installation of v1 API fails in pkg/master.
0000000000000000000000000000000000000000;;		// TODO(nikhiljindal): Fix this by ensuring that pkg/api/install and federation/apis/core/install do not conflict with each other.
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/apis/core"
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/federation/apis/core/install"
0000000000000000000000000000000000000000;;		corev1 "k8s.io/kubernetes/federation/apis/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/cmd/federation-apiserver/app/options"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		configmapstore "k8s.io/kubernetes/pkg/registry/core/configmap/storage"
0000000000000000000000000000000000000000;;		eventstore "k8s.io/kubernetes/pkg/registry/core/event/storage"
0000000000000000000000000000000000000000;;		namespacestore "k8s.io/kubernetes/pkg/registry/core/namespace/storage"
0000000000000000000000000000000000000000;;		secretstore "k8s.io/kubernetes/pkg/registry/core/secret/storage"
0000000000000000000000000000000000000000;;		servicestore "k8s.io/kubernetes/pkg/registry/core/service/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func installCoreAPIs(s *options.ServerRunOptions, g *genericapiserver.GenericAPIServer, optsGetter generic.RESTOptionsGetter, apiResourceConfigSource storage.APIResourceConfigSource) {
0000000000000000000000000000000000000000;;		servicesStorageFn := func() map[string]rest.Storage {
0000000000000000000000000000000000000000;;			serviceStore, serviceStatusStore := servicestore.NewREST(optsGetter)
0000000000000000000000000000000000000000;;			return map[string]rest.Storage{
0000000000000000000000000000000000000000;;				"services":        serviceStore,
0000000000000000000000000000000000000000;;				"services/status": serviceStatusStore,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		namespacesStorageFn := func() map[string]rest.Storage {
0000000000000000000000000000000000000000;;			namespaceStore, namespaceStatusStore, namespaceFinalizeStore := namespacestore.NewREST(optsGetter)
0000000000000000000000000000000000000000;;			return map[string]rest.Storage{
0000000000000000000000000000000000000000;;				"namespaces":          namespaceStore,
0000000000000000000000000000000000000000;;				"namespaces/status":   namespaceStatusStore,
0000000000000000000000000000000000000000;;				"namespaces/finalize": namespaceFinalizeStore,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		secretsStorageFn := func() map[string]rest.Storage {
0000000000000000000000000000000000000000;;			secretStore := secretstore.NewREST(optsGetter)
0000000000000000000000000000000000000000;;			return map[string]rest.Storage{
0000000000000000000000000000000000000000;;				"secrets": secretStore,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		configmapsStorageFn := func() map[string]rest.Storage {
0000000000000000000000000000000000000000;;			configMapStore := configmapstore.NewREST(optsGetter)
0000000000000000000000000000000000000000;;			return map[string]rest.Storage{
0000000000000000000000000000000000000000;;				"configmaps": configMapStore,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		eventsStorageFn := func() map[string]rest.Storage {
0000000000000000000000000000000000000000;;			eventStore := eventstore.NewREST(optsGetter, uint64(s.EventTTL.Seconds()))
0000000000000000000000000000000000000000;;			return map[string]rest.Storage{
0000000000000000000000000000000000000000;;				"events": eventStore,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resourcesStorageMap := map[string]getResourcesStorageFunc{
0000000000000000000000000000000000000000;;			"services":   servicesStorageFn,
0000000000000000000000000000000000000000;;			"namespaces": namespacesStorageFn,
0000000000000000000000000000000000000000;;			"secrets":    secretsStorageFn,
0000000000000000000000000000000000000000;;			"configmaps": configmapsStorageFn,
0000000000000000000000000000000000000000;;			"events":     eventsStorageFn,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		shouldInstallGroup, resources := enabledResources(corev1.SchemeGroupVersion, resourcesStorageMap, apiResourceConfigSource)
0000000000000000000000000000000000000000;;		if !shouldInstallGroup {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		coreGroupMeta := api.Registry.GroupOrDie(core.GroupName)
0000000000000000000000000000000000000000;;		apiGroupInfo := genericapiserver.APIGroupInfo{
0000000000000000000000000000000000000000;;			GroupMeta: *coreGroupMeta,
0000000000000000000000000000000000000000;;			VersionedResourcesStorageMap: map[string]map[string]rest.Storage{
0000000000000000000000000000000000000000;;				corev1.SchemeGroupVersion.Version: resources,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			OptionsExternalVersion: &api.Registry.GroupOrDie(core.GroupName).GroupVersion,
0000000000000000000000000000000000000000;;			Scheme:                 core.Scheme,
0000000000000000000000000000000000000000;;			ParameterCodec:         core.ParameterCodec,
0000000000000000000000000000000000000000;;			NegotiatedSerializer:   core.Codecs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := g.InstallLegacyAPIGroup(genericapiserver.DefaultLegacyAPIPrefix, &apiGroupInfo); err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Error in registering group version: %+v.\n Error: %v\n", apiGroupInfo, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
