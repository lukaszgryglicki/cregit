0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
aa9af644894996dc507d26098a3f3449de6df01d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package options contains flags and options for initializing federation-apiserver.
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		genericoptions "k8s.io/apiserver/pkg/server/options"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		kubeoptions "k8s.io/kubernetes/pkg/kubeapiserver/options"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// add the kubernetes feature gates
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/features"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Runtime options for the federation-apiserver.
0000000000000000000000000000000000000000;;	type ServerRunOptions struct {
0000000000000000000000000000000000000000;;		GenericServerRunOptions *genericoptions.ServerRunOptions
0000000000000000000000000000000000000000;;		Etcd                    *genericoptions.EtcdOptions
0000000000000000000000000000000000000000;;		SecureServing           *genericoptions.SecureServingOptions
0000000000000000000000000000000000000000;;		InsecureServing         *kubeoptions.InsecureServingOptions
0000000000000000000000000000000000000000;;		Audit                   *genericoptions.AuditOptions
0000000000000000000000000000000000000000;;		Features                *genericoptions.FeatureOptions
0000000000000000000000000000000000000000;;		Admission               *genericoptions.AdmissionOptions
0000000000000000000000000000000000000000;;		Authentication          *kubeoptions.BuiltInAuthenticationOptions
0000000000000000000000000000000000000000;;		Authorization           *kubeoptions.BuiltInAuthorizationOptions
0000000000000000000000000000000000000000;;		CloudProvider           *kubeoptions.CloudProviderOptions
0000000000000000000000000000000000000000;;		StorageSerialization    *kubeoptions.StorageSerializationOptions
0000000000000000000000000000000000000000;;		APIEnablement           *kubeoptions.APIEnablementOptions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EventTTL time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServerRunOptions creates a new ServerRunOptions object with default values.
0000000000000000000000000000000000000000;;	func NewServerRunOptions() *ServerRunOptions {
0000000000000000000000000000000000000000;;		s := ServerRunOptions{
0000000000000000000000000000000000000000;;			GenericServerRunOptions: genericoptions.NewServerRunOptions(),
0000000000000000000000000000000000000000;;			Etcd:                 genericoptions.NewEtcdOptions(storagebackend.NewDefaultConfig(kubeoptions.DefaultEtcdPathPrefix, api.Scheme, nil)),
0000000000000000000000000000000000000000;;			SecureServing:        kubeoptions.NewSecureServingOptions(),
0000000000000000000000000000000000000000;;			InsecureServing:      kubeoptions.NewInsecureServingOptions(),
0000000000000000000000000000000000000000;;			Audit:                genericoptions.NewAuditOptions(),
0000000000000000000000000000000000000000;;			Features:             genericoptions.NewFeatureOptions(),
0000000000000000000000000000000000000000;;			Admission:            genericoptions.NewAdmissionOptions(),
0000000000000000000000000000000000000000;;			Authentication:       kubeoptions.NewBuiltInAuthenticationOptions().WithAll(),
0000000000000000000000000000000000000000;;			Authorization:        kubeoptions.NewBuiltInAuthorizationOptions(),
0000000000000000000000000000000000000000;;			CloudProvider:        kubeoptions.NewCloudProviderOptions(),
0000000000000000000000000000000000000000;;			StorageSerialization: kubeoptions.NewStorageSerializationOptions(),
0000000000000000000000000000000000000000;;			APIEnablement:        kubeoptions.NewAPIEnablementOptions(),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			EventTTL: 1 * time.Hour,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Overwrite the default for storage data format.
0000000000000000000000000000000000000000;;		s.Etcd.DefaultStorageMediaType = "application/vnd.kubernetes.protobuf"
0000000000000000000000000000000000000000;;		// Set the default for admission plugins names
0000000000000000000000000000000000000000;;		s.Admission.PluginNames = []string{"AlwaysAdmit"}
0000000000000000000000000000000000000000;;		return &s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddFlags adds flags for ServerRunOptions fields to be specified via FlagSet.
0000000000000000000000000000000000000000;;	func (s *ServerRunOptions) AddFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		// Add the generic flags.
0000000000000000000000000000000000000000;;		s.GenericServerRunOptions.AddUniversalFlags(fs)
0000000000000000000000000000000000000000;;		s.Etcd.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.SecureServing.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.InsecureServing.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Audit.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Features.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Authentication.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Authorization.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.CloudProvider.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.StorageSerialization.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.APIEnablement.AddFlags(fs)
0000000000000000000000000000000000000000;;		s.Admission.AddFlags(fs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.DurationVar(&s.EventTTL, "event-ttl", s.EventTTL,
0000000000000000000000000000000000000000;;			"Amount of time to retain events.")
0000000000000000000000000000000000000000;;	}
