0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a7358a89d81a2e8a3dffa2a3c20367a3bbabc407;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package app
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilflag "k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		ingresscontroller "k8s.io/kubernetes/federation/pkg/federation-controller/ingress"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestControllerEnabled(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			controllersConfig utilflag.ConfigurationMap
0000000000000000000000000000000000000000;;			serverResources   []*metav1.APIResourceList
0000000000000000000000000000000000000000;;			controller        string
0000000000000000000000000000000000000000;;			requiredResources []schema.GroupVersionResource
0000000000000000000000000000000000000000;;			defaultValue      bool
0000000000000000000000000000000000000000;;			expectedResult    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// no override, API server has Ingress enabled
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				controllersConfig: utilflag.ConfigurationMap{},
0000000000000000000000000000000000000000;;				serverResources: []*metav1.APIResourceList{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						GroupVersion: "extensions/v1beta1",
0000000000000000000000000000000000000000;;						APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;							{Name: "ingresses", Namespaced: true, Kind: "Ingress"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				controller:        ingresscontroller.ControllerName,
0000000000000000000000000000000000000000;;				requiredResources: ingresscontroller.RequiredResources,
0000000000000000000000000000000000000000;;				defaultValue:      true,
0000000000000000000000000000000000000000;;				expectedResult:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// no override, API server has Ingress disabled
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				controllersConfig: utilflag.ConfigurationMap{},
0000000000000000000000000000000000000000;;				serverResources:   []*metav1.APIResourceList{},
0000000000000000000000000000000000000000;;				controller:        ingresscontroller.ControllerName,
0000000000000000000000000000000000000000;;				requiredResources: ingresscontroller.RequiredResources,
0000000000000000000000000000000000000000;;				defaultValue:      true,
0000000000000000000000000000000000000000;;				expectedResult:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// API server has Ingress enabled, override config to disable Ingress controller
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				controllersConfig: utilflag.ConfigurationMap{
0000000000000000000000000000000000000000;;					ingresscontroller.ControllerName: "false",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				serverResources: []*metav1.APIResourceList{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						GroupVersion: "extensions/v1beta1",
0000000000000000000000000000000000000000;;						APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;							{Name: "ingresses", Namespaced: true, Kind: "Ingress"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				controller:        ingresscontroller.ControllerName,
0000000000000000000000000000000000000000;;				requiredResources: ingresscontroller.RequiredResources,
0000000000000000000000000000000000000000;;				defaultValue:      true,
0000000000000000000000000000000000000000;;				expectedResult:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			actualEnabled := controllerEnabled(test.controllersConfig, test.serverResources, test.controller, test.requiredResources, test.defaultValue)
0000000000000000000000000000000000000000;;			if actualEnabled != test.expectedResult {
0000000000000000000000000000000000000000;;				t.Errorf("%s controller: expected %v, got %v", test.controller, test.expectedResult, actualEnabled)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
