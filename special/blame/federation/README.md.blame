0000000000000000000000000000000000000000;;	# Cluster Federation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Kubernetes Cluster Federation enables users to federate multiple
0000000000000000000000000000000000000000;;	Kubernetes clusters. Please see the [user guide](https://kubernetes.io/docs/concepts/cluster-administration/federation-service-discovery/)
0000000000000000000000000000000000000000;;	and the [admin guide](https://kubernetes.io/docs/tutorials/federation/set-up-cluster-federation-kubefed/)
0000000000000000000000000000000000000000;;	for more details about setting up and using the Cluster Federation.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Building Kubernetes Cluster Federation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Please see the [Kubernetes Development Guide](https://github.com/kubernetes/kubernetes/blob/master/docs/devel/development.md)
0000000000000000000000000000000000000000;;	for initial setup. Once you have the development environment setup
0000000000000000000000000000000000000000;;	as explained in that guide, you also need to install [`jq`](https://stedolan.github.io/jq/download/)
0000000000000000000000000000000000000000;;	<!-- TODO(madhusudancs): Re-evaluate using jq even in the development
0000000000000000000000000000000000000000;;	     environment. There is a concern that adding more tools as dependencies
0000000000000000000000000000000000000000;;	     might lead to proliferation of tools one need to install to develop
0000000000000000000000000000000000000000;;	     Kubernetes. jq is already a dependency for kubernetes-anywhere on
0000000000000000000000000000000000000000;;	     which this workflow depends, so we are giving an exception to jq
0000000000000000000000000000000000000000;;	     for now. -->
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Building cluster federation artifacts should be as simple as running:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	make build
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can specify the docker registry to tag the image using the
0000000000000000000000000000000000000000;;	KUBE_REGISTRY environment variable. Please make sure that you use
0000000000000000000000000000000000000000;;	the same value in all the subsequent commands.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To push the built docker images to the registry, run:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	make push
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To initialize the deployment run:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	(This pulls the installer images)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	make init
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To deploy the clusters and install the federation components, edit the
0000000000000000000000000000000000000000;;	`${KUBE_ROOT}/_output/federation/config.json` file to describe your
0000000000000000000000000000000000000000;;	clusters and run:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	make deploy
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To turn down the federation components and tear down the clusters run:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```shell
0000000000000000000000000000000000000000;;	make destroy
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Ideas for improvement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. Continue with `destroy` phase even in the face of errors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   The bash script sets `set -e errexit` which causes the script to exit
0000000000000000000000000000000000000000;;	   at the very first error. This should be the default mode for deploying
0000000000000000000000000000000000000000;;	   components but not for destroying/cleanup.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/federation/README.md?pixel)]()
