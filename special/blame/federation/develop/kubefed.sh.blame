0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# "-=-=-=-=-=-=-=-=-=-="
0000000000000000000000000000000000000000;;	# This script is only for CI testing purposes. Don't use it in production.
0000000000000000000000000000000000000000;;	# "-=-=-=-=-=-=-=-=-=-="
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=${KUBE_ROOT:-$(dirname "${BASH_SOURCE}")/../..}
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/clientbin.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# If KUBEFED_PATH isn't set, gather up the list of likely places and use ls
0000000000000000000000000000000000000000;;	# to find the latest one.
0000000000000000000000000000000000000000;;	if [[ -z "${KUBEFED_PATH:-}" ]]; then
0000000000000000000000000000000000000000;;	  kubefed=$( get_bin "kubefed" "federation/cmd/kubefed" )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [[ ! -x "$kubefed" ]]; then
0000000000000000000000000000000000000000;;	    print_error "kubefed"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	elif [[ ! -x "${KUBEFED_PATH}" ]]; then
0000000000000000000000000000000000000000;;	  {
0000000000000000000000000000000000000000;;	    echo "KUBEFED_PATH environment variable set to '${KUBEFED_PATH}', but "
0000000000000000000000000000000000000000;;	    echo "this doesn't seem to be a valid executable."
0000000000000000000000000000000000000000;;	  } >&2
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	kubefed="${KUBEFED_PATH:-${kubefed}}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Use the arguments to the script if it is set, a null string
0000000000000000000000000000000000000000;;	# otherwise.
0000000000000000000000000000000000000000;;	"${kubefed}" "${@+$@}"
