0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script will build the hyperkube image and push it to the repository
0000000000000000000000000000000000000000;;	# referred to by KUBE_REGISTRY. The image will be given a version tag with
0000000000000000000000000000000000000000;;	# the value from KUBE_VERSION.
0000000000000000000000000000000000000000;;	# e.g. run as:
0000000000000000000000000000000000000000;;	# KUBE_REGISTRY=localhost:5000/anushku \
0000000000000000000000000000000000000000;;	# KUBE_VERSION=1.3.0-dev ./build.sh build_image
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# will build the Docker images with the specified repository name and the
0000000000000000000000000000000000000000;;	# image version tag.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT="$(dirname "${BASH_SOURCE}")/../.."
0000000000000000000000000000000000000000;;	DEPLOY_ROOT="${KUBE_ROOT}/federation/deploy"
0000000000000000000000000000000000000000;;	CUR_ROOT="$(pwd)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/build/common.sh"
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/build/util.sh"
0000000000000000000000000000000000000000;;	# Provides the detect-project function
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/kube-util.sh"
0000000000000000000000000000000000000000;;	# Provides logging facilities
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/cluster/lib/logging.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly TMP_DIR="$(mktemp -d)"
0000000000000000000000000000000000000000;;	readonly FEDERATION_OUTPUT_ROOT="${LOCAL_OUTPUT_ROOT}/federation"
0000000000000000000000000000000000000000;;	readonly VERSIONS_FILE="${FEDERATION_OUTPUT_ROOT}/versions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "${KUBERNETES_PROVIDER}" == "gke" || "${KUBERNETES_PROVIDER}" == "gce" ]]; then
0000000000000000000000000000000000000000;;	  detect-project
0000000000000000000000000000000000000000;;	  readonly KUBE_PROJECT="${KUBE_PROJECT:-${PROJECT:-}}"
0000000000000000000000000000000000000000;;	  readonly KUBE_REGISTRY="${KUBE_REGISTRY:-gcr.io/${KUBE_PROJECT}}"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  readonly KUBE_PROJECT="${KUBE_PROJECT:-${PROJECT:-federation}}"
0000000000000000000000000000000000000000;;	  readonly KUBE_REGISTRY="${KUBE_REGISTRY:-localhost:5000/${KUBE_PROJECT}}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# In dev environments this value must be recomputed after build. See
0000000000000000000000000000000000000000;;	# the build_image() function. So not making it readonly
0000000000000000000000000000000000000000;;	KUBE_VERSION="${KUBE_VERSION:-}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function cleanup {
0000000000000000000000000000000000000000;;	  rm -rf "${TMP_DIR}"
0000000000000000000000000000000000000000;;	  cd "${CUR_ROOT}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	trap cleanup EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function dirty_sha() {
0000000000000000000000000000000000000000;;	  local -r index="${KUBE_ROOT}/.git/index"
0000000000000000000000000000000000000000;;	  local -r objects_dir="${KUBE_ROOT}/.git/objects"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r tmp_dir="${TMP_DIR}/.git"
0000000000000000000000000000000000000000;;	  local -r tmp_index="${tmp_dir}/index"
0000000000000000000000000000000000000000;;	  local -r tmp_objects_dir="${tmp_dir}/objects"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  mkdir -p "${tmp_objects_dir}"
0000000000000000000000000000000000000000;;	  cp "${index}" "${tmp_index}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  local -r files=$(git ls-files -m -o -d --exclude-standard)
0000000000000000000000000000000000000000;;	  GIT_INDEX_FILE="${tmp_index}" git add ${files}
0000000000000000000000000000000000000000;;	  GIT_ALTERNATE_OBJECT_DIRECTORIES="${objects_dir}" GIT_OBJECT_DIRECTORY="${tmp_objects_dir}" GIT_INDEX_FILE="${tmp_index}" git write-tree
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function build_binaries() {
0000000000000000000000000000000000000000;;	  cd "${KUBE_ROOT}"
0000000000000000000000000000000000000000;;	  kube::build::verify_prereqs
0000000000000000000000000000000000000000;;	  kube::build::build_image
0000000000000000000000000000000000000000;;	  kube::build::run_build_command make WHAT="cmd/kubectl cmd/hyperkube"
0000000000000000000000000000000000000000;;	  kube::build::copy_output
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function build_image() {
0000000000000000000000000000000000000000;;	  # Recompute KUBE_VERSION because it might have changed after rebuild.
0000000000000000000000000000000000000000;;	  local kube_version=""
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_VERSION:-}" ]]; then
0000000000000000000000000000000000000000;;	    kube_version="${KUBE_VERSION}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    kube_version="$(kube::release::semantic_image_tag_version)"
0000000000000000000000000000000000000000;;	    # Also append the dirty tree SHA to keep the versions unique across
0000000000000000000000000000000000000000;;	    # builds.
0000000000000000000000000000000000000000;;	    if [[ "${kube_version}" == *-dirty ]]; then
0000000000000000000000000000000000000000;;	      kube_version+=".$(dirty_sha)"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # Write the generated version to the output versions file so that we can
0000000000000000000000000000000000000000;;	  # reuse it.
0000000000000000000000000000000000000000;;	  mkdir -p "${FEDERATION_OUTPUT_ROOT}"
0000000000000000000000000000000000000000;;	  echo "{
0000000000000000000000000000000000000000;;	  \"KUBE_VERSION\": \"${kube_version}\"
0000000000000000000000000000000000000000;;	}" > "${VERSIONS_FILE}"
0000000000000000000000000000000000000000;;	  kube::log::status "Wrote to version file ${VERSIONS_FILE}: ${kube_version}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  BASEIMAGE="ubuntu:16.04" \
0000000000000000000000000000000000000000;;	    REGISTRY="${KUBE_REGISTRY}" \
0000000000000000000000000000000000000000;;	    VERSION="${kube_version}" \
0000000000000000000000000000000000000000;;	    make -C "${KUBE_ROOT}/cluster/images/hyperkube" build
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function get_version() {
0000000000000000000000000000000000000000;;	  local kube_version=""
0000000000000000000000000000000000000000;;	  if [[ -n "${KUBE_VERSION:-}" ]]; then
0000000000000000000000000000000000000000;;	    kube_version="${KUBE_VERSION}"
0000000000000000000000000000000000000000;;	  else
0000000000000000000000000000000000000000;;	    # Read the version back from the versions file if no version is given.
0000000000000000000000000000000000000000;;	    kube_version="$(cat ${VERSIONS_FILE} | python -c '\
0000000000000000000000000000000000000000;;	import json, sys;\
0000000000000000000000000000000000000000;;	print json.load(sys.stdin)["KUBE_VERSION"]')"
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  echo "${kube_version}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function push() {
0000000000000000000000000000000000000000;;	  local -r kube_version="$(get_version)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  kube::log::status "Pushing hyperkube image to the registry"
0000000000000000000000000000000000000000;;	  gcloud docker -- push "${KUBE_REGISTRY}/hyperkube-amd64:${kube_version}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	readonly ACTION="${1:-}"
0000000000000000000000000000000000000000;;	case "${ACTION}" in
0000000000000000000000000000000000000000;;	  "")
0000000000000000000000000000000000000000;;	  echo 'Action must be one of [init, build_binaries, build_image, push, \
0000000000000000000000000000000000000000;;	    deploy_clusters, deploy_federation, destroy_federation, destroy_clusters \
0000000000000000000000000000000000000000;;	    redeploy_federation], \
0000000000000000000000000000000000000000;;	    got: '"${ACTION}"
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "build_binaries")
0000000000000000000000000000000000000000;;	  build_binaries
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "build_image")
0000000000000000000000000000000000000000;;	  build_image
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "push")
0000000000000000000000000000000000000000;;	  push
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  # Following functions belong to deploy.sh, they are driven from here
0000000000000000000000000000000000000000;;	  # convenience during development because FEDERATION_OUTPUT_ROOT is
0000000000000000000000000000000000000000;;	  # already defined during development here in this script. Also, we
0000000000000000000000000000000000000000;;	  # execute the following commands in their own subshells to avoid them
0000000000000000000000000000000000000000;;	  # messing with variables in this script.
0000000000000000000000000000000000000000;;	  "init")
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    "${DEPLOY_ROOT}/deploy.sh" init
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "deploy_clusters")
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    export FEDERATION_OUTPUT_ROOT
0000000000000000000000000000000000000000;;	    "${DEPLOY_ROOT}/deploy.sh" deploy_clusters
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "deploy_federation")
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    export FEDERATION_OUTPUT_ROOT
0000000000000000000000000000000000000000;;	    "${DEPLOY_ROOT}/deploy.sh" deploy_federation
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "destroy_federation")
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    export FEDERATION_OUTPUT_ROOT
0000000000000000000000000000000000000000;;	    "${DEPLOY_ROOT}/deploy.sh" destroy_federation
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "destroy_clusters")
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    export FEDERATION_OUTPUT_ROOT
0000000000000000000000000000000000000000;;	    "${DEPLOY_ROOT}/deploy.sh" destroy_clusters
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	  "redeploy_federation")
0000000000000000000000000000000000000000;;	  (
0000000000000000000000000000000000000000;;	    export FEDERATION_OUTPUT_ROOT
0000000000000000000000000000000000000000;;	    "${DEPLOY_ROOT}/deploy.sh" redeploy_federation
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  ;;
0000000000000000000000000000000000000000;;	esac
