0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
34919f64b7d1e7f34fb26b3e43e02919eae00734;build-tools/pause/orphan.c[build-tools/pause/orphan.c][build/pause/orphan.c];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
34919f64b7d1e7f34fb26b3e43e02919eae00734;build-tools/pause/orphan.c[build-tools/pause/orphan.c][build/pause/orphan.c];	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
34919f64b7d1e7f34fb26b3e43e02919eae00734;build-tools/pause/orphan.c[build-tools/pause/orphan.c][build/pause/orphan.c];	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
34919f64b7d1e7f34fb26b3e43e02919eae00734;build-tools/pause/orphan.c[build-tools/pause/orphan.c][build/pause/orphan.c];	
0000000000000000000000000000000000000000;;	/* Creates a zombie to be reaped by init. Useful for testing. */
34919f64b7d1e7f34fb26b3e43e02919eae00734;build-tools/pause/orphan.c[build-tools/pause/orphan.c][build/pause/orphan.c];	
0000000000000000000000000000000000000000;;	#include <stdio.h>
0000000000000000000000000000000000000000;;	#include <unistd.h>
34919f64b7d1e7f34fb26b3e43e02919eae00734;build-tools/pause/orphan.c[build-tools/pause/orphan.c][build/pause/orphan.c];	
0000000000000000000000000000000000000000;;	int main() {
0000000000000000000000000000000000000000;;	  pid_t pid;
0000000000000000000000000000000000000000;;	  pid = fork();
0000000000000000000000000000000000000000;;	  if (pid == 0) {
0000000000000000000000000000000000000000;;	    while (getppid() > 1)
0000000000000000000000000000000000000000;;	      ;
0000000000000000000000000000000000000000;;	    printf("Child exiting: pid=%d ppid=%d\n", getpid(), getppid());
0000000000000000000000000000000000000000;;	    return 0;
0000000000000000000000000000000000000000;;	  } else if (pid > 0) {
0000000000000000000000000000000000000000;;	    printf("Parent exiting: pid=%d ppid=%d\n", getpid(), getppid());
0000000000000000000000000000000000000000;;	    return 0;
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	  perror("Could not create child");
0000000000000000000000000000000000000000;;	  return 1;
0000000000000000000000000000000000000000;;	}
