0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#include <signal.h>
0000000000000000000000000000000000000000;;	#include <stdio.h>
0000000000000000000000000000000000000000;;	#include <stdlib.h>
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <unistd.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	static void sigdown(int signo) {
0000000000000000000000000000000000000000;;	  psignal(signo, "Shutting down, got signal");
0000000000000000000000000000000000000000;;	  exit(0);
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	static void sigreap(int signo) {
0000000000000000000000000000000000000000;;	  while (waitpid(-1, NULL, WNOHANG) > 0);
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	int main() {
0000000000000000000000000000000000000000;;	  if (getpid() != 1)
0000000000000000000000000000000000000000;;	    /* Not an error because pause sees use outside of infra containers. */
0000000000000000000000000000000000000000;;	    fprintf(stderr, "Warning: pause should be the first process\n");
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if (sigaction(SIGINT, &(struct sigaction){.sa_handler = sigdown}, NULL) < 0)
0000000000000000000000000000000000000000;;	    return 1;
0000000000000000000000000000000000000000;;	  if (sigaction(SIGTERM, &(struct sigaction){.sa_handler = sigdown}, NULL) < 0)
0000000000000000000000000000000000000000;;	    return 2;
0000000000000000000000000000000000000000;;	  if (sigaction(SIGCHLD, &(struct sigaction){.sa_handler = sigreap,
0000000000000000000000000000000000000000;;	                                             .sa_flags = SA_NOCLDSTOP},
0000000000000000000000000000000000000000;;	                NULL) < 0)
0000000000000000000000000000000000000000;;	    return 3;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  for (;;)
0000000000000000000000000000000000000000;;	    pause();
0000000000000000000000000000000000000000;;	  fprintf(stderr, "Error: infinite loop terminated\n");
0000000000000000000000000000000000000000;;	  return 42;
0000000000000000000000000000000000000000;;	}
