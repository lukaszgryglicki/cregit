0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# This script will set up and run rsyncd to allow data to move into and out of
0000000000000000000000000000000000000000;;	# our dockerized build system.  This is used for syncing sources and changes of
0000000000000000000000000000000000000000;;	# sources into the docker-build-container.  It is also used to transfer built binaries
0000000000000000000000000000000000000000;;	# and generated files back out.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# When run as root (rare) it'll preserve the file ids as sent from the client.
0000000000000000000000000000000000000000;;	# Usually it'll be run as non-dockerized UID/GID and end up translating all file
0000000000000000000000000000000000000000;;	# ownership to that.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The directory that gets sync'd
0000000000000000000000000000000000000000;;	VOLUME=${HOME}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Assume that this is running in Docker on a bridge.  Allow connections from
0000000000000000000000000000000000000000;;	# anything on the local subnet.
0000000000000000000000000000000000000000;;	ALLOW=$(ip route | awk  '/^default via/ { reg = "^[0-9./]+ dev "$5 } ; $0 ~ reg { print $1 }')
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CONFDIR="/tmp/rsync.k8s"
0000000000000000000000000000000000000000;;	PIDFILE="${CONFDIR}/rsyncd.pid"
0000000000000000000000000000000000000000;;	CONFFILE="${CONFDIR}/rsyncd.conf"
0000000000000000000000000000000000000000;;	SECRETS="${CONFDIR}/rsyncd.secrets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	mkdir -p "${CONFDIR}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -f "${PIDFILE}" ]]; then
0000000000000000000000000000000000000000;;	  PID=$(cat "${PIDFILE}")
0000000000000000000000000000000000000000;;	  echo "Cleaning up old PID file: ${PIDFILE}"
0000000000000000000000000000000000000000;;	  kill $PID &> /dev/null || true
0000000000000000000000000000000000000000;;	  rm "${PIDFILE}"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	PASSWORD=$(</rsyncd.password)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat <<EOF >"${SECRETS}"
0000000000000000000000000000000000000000;;	k8s:${PASSWORD}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	chmod go= "${SECRETS}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	USER_CONFIG=
0000000000000000000000000000000000000000;;	if [[ "$(id -u)" == "0" ]]; then
0000000000000000000000000000000000000000;;	  USER_CONFIG="  uid = 0"$'\n'"  gid = 0"
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat <<EOF >"${CONFFILE}"
0000000000000000000000000000000000000000;;	pid file = ${PIDFILE}
0000000000000000000000000000000000000000;;	use chroot = no
0000000000000000000000000000000000000000;;	log file = /dev/stdout
0000000000000000000000000000000000000000;;	reverse lookup = no
0000000000000000000000000000000000000000;;	munge symlinks = no
0000000000000000000000000000000000000000;;	port = 8730
0000000000000000000000000000000000000000;;	[k8s]
0000000000000000000000000000000000000000;;	  numeric ids = true
0000000000000000000000000000000000000000;;	  $USER_CONFIG
0000000000000000000000000000000000000000;;	  hosts deny = *
0000000000000000000000000000000000000000;;	  hosts allow = ${ALLOW}
0000000000000000000000000000000000000000;;	  auth users = k8s
0000000000000000000000000000000000000000;;	  secrets file = ${SECRETS}
0000000000000000000000000000000000000000;;	  read only = false
0000000000000000000000000000000000000000;;	  path = ${VOLUME}
0000000000000000000000000000000000000000;;	  filter = - /.make/ - /.git/ - /_tmp/
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	exec /usr/bin/rsync --no-detach --daemon --config="${CONFFILE}" "$@"
