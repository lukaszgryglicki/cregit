0000000000000000000000000000000000000000;;	# Package Groups Used in Kubernetes Visibility Rules
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Background
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`BUILD` rules define dependencies, answering the question:
0000000000000000000000000000000000000000;;	on what packages does _foo_ depend?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The `BUILD` file in this package allows one to define
0000000000000000000000000000000000000000;;	_allowed_ reverse dependencies, answering the question:
0000000000000000000000000000000000000000;;	given a package _foo_, what other specific packages are
0000000000000000000000000000000000000000;;	allowed to depend on it?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This is done via visibility rules.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Visibility rules discourage unintended, spurious
0000000000000000000000000000000000000000;;	dependencies that blur code boundaries, slow CICD queues and
0000000000000000000000000000000000000000;;	generally inhibit progress.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Facts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* A package is any directory that contains a `BUILD` file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* A `package_group` is a `BUILD` file rule that defines a named
0000000000000000000000000000000000000000;;	  set of packages for use in other rules, e.g., given
0000000000000000000000000000000000000000;;	  ```
0000000000000000000000000000000000000000;;	  package_group(
0000000000000000000000000000000000000000;;	    name = "database_CONSUMERS",
0000000000000000000000000000000000000000;;	    packages = [
0000000000000000000000000000000000000000;;	        "//foo/dbinitializer",
0000000000000000000000000000000000000000;;	        "//foo/backend/...",  # `backend` and everything below it
0000000000000000000000000000000000000000;;	    ],
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	  ```
0000000000000000000000000000000000000000;;	  one can specify the following visibility rule in any `BUILD` rule:
0000000000000000000000000000000000000000;;	  ```
0000000000000000000000000000000000000000;;	  visibility = [ "//build/visible_to:database_CONSUMERS" ],
0000000000000000000000000000000000000000;;	  ``` 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* A visibility rule takes a list of package groups as its
0000000000000000000000000000000000000000;;	  argument - or one of the pre-defined groups
0000000000000000000000000000000000000000;;	  `//visibility:private` or `//visibility:public`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* If no visibility is explicitly defined, a package is
0000000000000000000000000000000000000000;;	  _private_ by default.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Violations in visibility cause `make bazel-build` to fail,
0000000000000000000000000000000000000000;;	  which in turn causes the submit queue to fail - that's the
0000000000000000000000000000000000000000;;	  enforcement.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Why define all package groups meant for visibility here (in one file)?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 * Ease discovery of appropriate groups for use in a rule.
0000000000000000000000000000000000000000;;	 * Ease reuse (inclusions) of commonly used groups.
0000000000000000000000000000000000000000;;	 * Consistent style:
0000000000000000000000000000000000000000;;	    * easy to read `//build/visible_to:math_library_CONSUMERS` rules,
0000000000000000000000000000000000000000;;	    * call out bad dependencies for eventual removal.
0000000000000000000000000000000000000000;;	 * Make it more obvious in code reviews when visibility is being
0000000000000000000000000000000000000000;;	   modified.
0000000000000000000000000000000000000000;;	 * One set of `OWNERS` to manage visibility.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The alternative is to use special [package literals] directly
0000000000000000000000000000000000000000;;	in visibility rules, e.g. 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	  visibility = [
0000000000000000000000000000000000000000;;	        "//foo/dbinitializer:__pkg__",
0000000000000000000000000000000000000000;;	        "//foo/backend:__subpackages__",
0000000000000000000000000000000000000000;;	  ],
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The difference in style is similar to the difference between
0000000000000000000000000000000000000000;;	using a named static constant like `MAX_NODES` rather than a
0000000000000000000000000000000000000000;;	literal like `12`.  Names are preferable to literals for intent
0000000000000000000000000000000000000000;;	documentation, search, changing one place rather than _n_,
0000000000000000000000000000000000000000;;	associating usage in distant code blocks, etc.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Rule Examples
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Nobody outside this package can depend on me.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	visibility = ["//visibility:private"],
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Since this is the default, there's no reason to use this
0000000000000000000000000000000000000000;;	rule except as a means to override, for some specific
0000000000000000000000000000000000000000;;	target, some broader, whole-package visibility rule.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Anyone can depend on me (eschew this).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	visibility = ["//visibility:public"],
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Only some servers can depend on me.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Appropriate for, say, backend storage utilities.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	visibility = ["//visible_to:server_foo","//visible_to:server_bar"].
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Both some client and some server can see me.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Appropriate for shared API definition files and generated code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	visibility = ["//visible_to:client_foo,//visible_to:server_foo"],
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Handy commands
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Quickly check for visibility violations
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	bazel build --check_visibility --nobuild \
0000000000000000000000000000000000000000;;	    //cmd/... //pkg/... //federation/... //plugin/... \
0000000000000000000000000000000000000000;;	    //third_party/... //examples/... //test/... //vendor/k8s.io/...
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Who depends on target _q_?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To create a seed set for a visibility group, one can ask what
0000000000000000000000000000000000000000;;	packages currently depend on (must currently be able to see) a
0000000000000000000000000000000000000000;;	given Go library target?  It's a time consuming query.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	q=//pkg/kubectl/cmd:go_default_library
0000000000000000000000000000000000000000;;	bazel query "rdeps(...,${q})" | \
0000000000000000000000000000000000000000;;	    grep go_default_library | \
0000000000000000000000000000000000000000;;	    sed 's/\(.*\):go_default_library/ "\1",/'
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### What targets below _p_ are visible to anyone?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A means to look for things one missed when locking down _p_.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	p=//pkg/kubectl/cmd
0000000000000000000000000000000000000000;;	bazel query "visible(...,${p}/...)"
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### What packages below _p_ may target _q_ depend on without violating visibility rules?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A means to pinpoint unexpected visibility.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	p=//pkg/kubectl
0000000000000000000000000000000000000000;;	q=//cmd/kubelet:kubelet
0000000000000000000000000000000000000000;;	bazel query "visible(${q},${p}/...)" | more
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### What packages does target _q_ need?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	q=//cmd/kubectl:kubectl
0000000000000000000000000000000000000000;;	bazel query "buildfiles(deps($q))" | \
0000000000000000000000000000000000000000;;	    grep -v @bazel_tools | \
0000000000000000000000000000000000000000;;	    grep -v @io_bazel_rules | \
0000000000000000000000000000000000000000;;	    grep -v @io_kubernetes_build | \
0000000000000000000000000000000000000000;;	    grep -v @local_config | \
0000000000000000000000000000000000000000;;	    grep -v @local_jdk | \
0000000000000000000000000000000000000000;;	    grep -v //visible_to: | \
0000000000000000000000000000000000000000;;	    sed 's/:BUILD//' | \
0000000000000000000000000000000000000000;;	    sort | uniq > ~/KUBECTL_BUILD.txt
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	or try
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	bazel query --nohost_deps --noimplicit_deps \
0000000000000000000000000000000000000000;;	    "kind('source file', deps($q))" | wc -
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### How does kubectl depend on pkg/util/parsers?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	bazel query "somepath(cmd/kubectl:kubectl, pkg/util/parsers:go_default_library)"
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[package literals]: https://bazel.build/versions/master/docs/be/common-definitions.html#common.visibility
