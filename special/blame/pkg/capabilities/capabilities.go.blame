0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
149c45a9005550e6a33ad3b142d3d44e875627df;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package capabilities
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Capabilities defines the set of capabilities available within the system.
0000000000000000000000000000000000000000;;	// For now these are global.  Eventually they may be per-user
0000000000000000000000000000000000000000;;	type Capabilities struct {
0000000000000000000000000000000000000000;;		AllowPrivileged bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Pod sources from which to allow privileged capabilities like host networking, sharing the host
0000000000000000000000000000000000000000;;		// IPC namespace, and sharing the host PID namespace.
0000000000000000000000000000000000000000;;		PrivilegedSources PrivilegedSources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PerConnectionBandwidthLimitBytesPerSec limits the throughput of each connection (currently only used for proxy, exec, attach)
0000000000000000000000000000000000000000;;		PerConnectionBandwidthLimitBytesPerSec int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrivilegedSources defines the pod sources allowed to make privileged requests for certain types
0000000000000000000000000000000000000000;;	// of capabilities like host networking, sharing the host IPC namespace, and sharing the host PID namespace.
0000000000000000000000000000000000000000;;	type PrivilegedSources struct {
0000000000000000000000000000000000000000;;		// List of pod sources for which using host network is allowed.
0000000000000000000000000000000000000000;;		HostNetworkSources []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of pod sources for which using host pid namespace is allowed.
0000000000000000000000000000000000000000;;		HostPIDSources []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of pod sources for which using host ipc is allowed.
0000000000000000000000000000000000000000;;		HostIPCSources []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Clean these up into a singleton
0000000000000000000000000000000000000000;;	var once sync.Once
0000000000000000000000000000000000000000;;	var lock sync.Mutex
0000000000000000000000000000000000000000;;	var capabilities *Capabilities
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Initialize the capability set.  This can only be done once per binary, subsequent calls are ignored.
0000000000000000000000000000000000000000;;	func Initialize(c Capabilities) {
0000000000000000000000000000000000000000;;		// Only do this once
0000000000000000000000000000000000000000;;		once.Do(func() {
0000000000000000000000000000000000000000;;			capabilities = &c
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Setup the capability set.  It wraps Initialize for improving usability.
0000000000000000000000000000000000000000;;	func Setup(allowPrivileged bool, privilegedSources PrivilegedSources, perConnectionBytesPerSec int64) {
0000000000000000000000000000000000000000;;		Initialize(Capabilities{
0000000000000000000000000000000000000000;;			AllowPrivileged:                        allowPrivileged,
0000000000000000000000000000000000000000;;			PrivilegedSources:                      privilegedSources,
0000000000000000000000000000000000000000;;			PerConnectionBandwidthLimitBytesPerSec: perConnectionBytesPerSec,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetForTests sets capabilities for tests.  Convenience method for testing.  This should only be called from tests.
0000000000000000000000000000000000000000;;	func SetForTests(c Capabilities) {
0000000000000000000000000000000000000000;;		lock.Lock()
0000000000000000000000000000000000000000;;		defer lock.Unlock()
0000000000000000000000000000000000000000;;		capabilities = &c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns a read-only copy of the system capabilities.
0000000000000000000000000000000000000000;;	func Get() Capabilities {
0000000000000000000000000000000000000000;;		lock.Lock()
0000000000000000000000000000000000000000;;		defer lock.Unlock()
0000000000000000000000000000000000000000;;		// This check prevents clobbering of capabilities that might've been set via SetForTests
0000000000000000000000000000000000000000;;		if capabilities == nil {
0000000000000000000000000000000000000000;;			Initialize(Capabilities{
0000000000000000000000000000000000000000;;				AllowPrivileged: false,
0000000000000000000000000000000000000000;;				PrivilegedSources: PrivilegedSources{
0000000000000000000000000000000000000000;;					HostNetworkSources: []string{},
0000000000000000000000000000000000000000;;					HostPIDSources:     []string{},
0000000000000000000000000000000000000000;;					HostIPCSources:     []string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *capabilities
0000000000000000000000000000000000000000;;	}
