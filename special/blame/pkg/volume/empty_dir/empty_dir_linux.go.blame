0000000000000000000000000000000000000000;;	// +build linux
9596a9da01b5d7b057e55705742bbbb928c76049;pkg/kubelet/volume/empty_dir/empty_dir_linux.go[pkg/kubelet/volume/empty_dir/empty_dir_linux.go][pkg/volume/empty_dir/empty_dir_linux.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package empty_dir
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Defined by Linux - the type number for tmpfs mounts.
0000000000000000000000000000000000000000;;	const linuxTmpfsMagic = 0x01021994
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// realMountDetector implements mountDetector in terms of syscalls.
0000000000000000000000000000000000000000;;	type realMountDetector struct {
0000000000000000000000000000000000000000;;		mounter mount.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *realMountDetector) GetMountMedium(path string) (storageMedium, bool, error) {
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Determining mount medium of %v", path)
0000000000000000000000000000000000000000;;		notMnt, err := m.mounter.IsLikelyNotMountPoint(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, false, fmt.Errorf("IsLikelyNotMountPoint(%q): %v", path, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf := syscall.Statfs_t{}
0000000000000000000000000000000000000000;;		if err := syscall.Statfs(path, &buf); err != nil {
0000000000000000000000000000000000000000;;			return 0, false, fmt.Errorf("statfs(%q): %v", path, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Statfs_t of %v: %+v", path, buf)
0000000000000000000000000000000000000000;;		if buf.Type == linuxTmpfsMagic {
0000000000000000000000000000000000000000;;			return mediumMemory, !notMnt, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return mediumUnknown, !notMnt, nil
0000000000000000000000000000000000000000;;	}
