0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8b3434d697d1c663ffe822e8b12e550e4617836f;pkg/volume/aws_pd/aws_util.go[pkg/volume/aws_pd/aws_util.go][pkg/volume/aws_ebs/aws_util.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package aws_ebs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider/providers/aws"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumeutil "k8s.io/kubernetes/pkg/volume/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		diskPartitionSuffix = ""
0000000000000000000000000000000000000000;;		diskXVDPath         = "/dev/xvd"
0000000000000000000000000000000000000000;;		diskXVDPattern      = "/dev/xvd*"
0000000000000000000000000000000000000000;;		maxChecks           = 60
0000000000000000000000000000000000000000;;		maxRetries          = 10
0000000000000000000000000000000000000000;;		checkSleepDuration  = time.Second
0000000000000000000000000000000000000000;;		errorSleepDuration  = 5 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AWSDiskUtil struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (util *AWSDiskUtil) DeleteVolume(d *awsElasticBlockStoreDeleter) error {
0000000000000000000000000000000000000000;;		cloud, err := getCloudProvider(d.awsElasticBlockStore.plugin.host.GetCloudProvider())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deleted, err := cloud.DeleteDisk(d.volumeID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// AWS cloud provider returns volume.deletedVolumeInUseError when
0000000000000000000000000000000000000000;;			// necessary, no handling needed here.
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error deleting EBS Disk volume %s: %v", d.volumeID, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if deleted {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Successfully deleted EBS Disk volume %s", d.volumeID)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Successfully deleted EBS Disk volume %s (actually already deleted)", d.volumeID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVolume creates an AWS EBS volume.
0000000000000000000000000000000000000000;;	// Returns: volumeID, volumeSizeGB, labels, error
0000000000000000000000000000000000000000;;	func (util *AWSDiskUtil) CreateVolume(c *awsElasticBlockStoreProvisioner) (aws.KubernetesVolumeID, int, map[string]string, error) {
0000000000000000000000000000000000000000;;		cloud, err := getCloudProvider(c.awsElasticBlockStore.plugin.host.GetCloudProvider())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", 0, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AWS volumes don't have Name field, store the name in Name tag
0000000000000000000000000000000000000000;;		var tags map[string]string
0000000000000000000000000000000000000000;;		if c.options.CloudTags == nil {
0000000000000000000000000000000000000000;;			tags = make(map[string]string)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			tags = *c.options.CloudTags
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tags["Name"] = volume.GenerateVolumeName(c.options.ClusterName, c.options.PVName, 255) // AWS tags can have 255 characters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capacity := c.options.PVC.Spec.Resources.Requests[v1.ResourceName(v1.ResourceStorage)]
0000000000000000000000000000000000000000;;		requestBytes := capacity.Value()
0000000000000000000000000000000000000000;;		// AWS works with gigabytes, convert to GiB with rounding up
0000000000000000000000000000000000000000;;		requestGB := int(volume.RoundUpSize(requestBytes, 1024*1024*1024))
0000000000000000000000000000000000000000;;		volumeOptions := &aws.VolumeOptions{
0000000000000000000000000000000000000000;;			CapacityGB: requestGB,
0000000000000000000000000000000000000000;;			Tags:       tags,
0000000000000000000000000000000000000000;;			PVCName:    c.options.PVC.Name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Apply Parameters (case-insensitive). We leave validation of
0000000000000000000000000000000000000000;;		// the values to the cloud provider.
0000000000000000000000000000000000000000;;		volumeOptions.ZonePresent = false
0000000000000000000000000000000000000000;;		volumeOptions.ZonesPresent = false
0000000000000000000000000000000000000000;;		for k, v := range c.options.Parameters {
0000000000000000000000000000000000000000;;			switch strings.ToLower(k) {
0000000000000000000000000000000000000000;;			case "type":
0000000000000000000000000000000000000000;;				volumeOptions.VolumeType = v
0000000000000000000000000000000000000000;;			case "zone":
0000000000000000000000000000000000000000;;				volumeOptions.ZonePresent = true
0000000000000000000000000000000000000000;;				volumeOptions.AvailabilityZone = v
0000000000000000000000000000000000000000;;			case "zones":
0000000000000000000000000000000000000000;;				volumeOptions.ZonesPresent = true
0000000000000000000000000000000000000000;;				volumeOptions.AvailabilityZones = v
0000000000000000000000000000000000000000;;			case "iopspergb":
0000000000000000000000000000000000000000;;				volumeOptions.IOPSPerGB, err = strconv.Atoi(v)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return "", 0, nil, fmt.Errorf("invalid iopsPerGB value %q, must be integer between 1 and 30: %v", v, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case "encrypted":
0000000000000000000000000000000000000000;;				volumeOptions.Encrypted, err = strconv.ParseBool(v)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return "", 0, nil, fmt.Errorf("invalid encrypted boolean value %q, must be true or false: %v", v, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case "kmskeyid":
0000000000000000000000000000000000000000;;				volumeOptions.KmsKeyId = v
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return "", 0, nil, fmt.Errorf("invalid option %q for volume plugin %s", k, c.plugin.GetPluginName())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if volumeOptions.ZonePresent && volumeOptions.ZonesPresent {
0000000000000000000000000000000000000000;;			return "", 0, nil, fmt.Errorf("both zone and zones StorageClass parameters must not be used at the same time")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: implement PVC.Selector parsing
0000000000000000000000000000000000000000;;		if c.options.PVC.Spec.Selector != nil {
0000000000000000000000000000000000000000;;			return "", 0, nil, fmt.Errorf("claim.Spec.Selector is not supported for dynamic provisioning on AWS")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, err := cloud.CreateDisk(volumeOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error creating EBS Disk volume: %v", err)
0000000000000000000000000000000000000000;;			return "", 0, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(2).Infof("Successfully created EBS Disk volume %s", name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels, err := cloud.GetVolumeLabels(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// We don't really want to leak the volume here...
0000000000000000000000000000000000000000;;			glog.Errorf("error building labels for new EBS volume %q: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return name, int(requestGB), labels, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the first path that exists, or empty string if none exist.
0000000000000000000000000000000000000000;;	func verifyDevicePath(devicePaths []string) (string, error) {
0000000000000000000000000000000000000000;;		for _, path := range devicePaths {
0000000000000000000000000000000000000000;;			if pathExists, err := volumeutil.PathExists(path); err != nil {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("Error checking if path exists: %v", err)
0000000000000000000000000000000000000000;;			} else if pathExists {
0000000000000000000000000000000000000000;;				return path, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the first path that exists, or empty string if none exist.
0000000000000000000000000000000000000000;;	func verifyAllPathsRemoved(devicePaths []string) (bool, error) {
0000000000000000000000000000000000000000;;		allPathsRemoved := true
0000000000000000000000000000000000000000;;		for _, path := range devicePaths {
0000000000000000000000000000000000000000;;			if exists, err := volumeutil.PathExists(path); err != nil {
0000000000000000000000000000000000000000;;				return false, fmt.Errorf("Error checking if path exists: %v", err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				allPathsRemoved = allPathsRemoved && !exists
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allPathsRemoved, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns list of all paths for given EBS mount
0000000000000000000000000000000000000000;;	// This is more interesting on GCE (where we are able to identify volumes under /dev/disk-by-id)
0000000000000000000000000000000000000000;;	// Here it is mostly about applying the partition path
0000000000000000000000000000000000000000;;	func getDiskByIdPaths(partition string, devicePath string) []string {
0000000000000000000000000000000000000000;;		devicePaths := []string{}
0000000000000000000000000000000000000000;;		if devicePath != "" {
0000000000000000000000000000000000000000;;			devicePaths = append(devicePaths, devicePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if partition != "" {
0000000000000000000000000000000000000000;;			for i, path := range devicePaths {
0000000000000000000000000000000000000000;;				devicePaths[i] = path + diskPartitionSuffix + partition
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return devicePaths
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Return cloud provider
0000000000000000000000000000000000000000;;	func getCloudProvider(cloudProvider cloudprovider.Interface) (*aws.Cloud, error) {
0000000000000000000000000000000000000000;;		awsCloudProvider, ok := cloudProvider.(*aws.Cloud)
0000000000000000000000000000000000000000;;		if !ok || awsCloudProvider == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Failed to get AWS Cloud Provider. GetCloudProvider returned %v instead", cloudProvider)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return awsCloudProvider, nil
0000000000000000000000000000000000000000;;	}
