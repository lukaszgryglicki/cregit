0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d39110bb2b28931dd0cbaf34c6c9b8f568dc9e56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flexvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAttach(t *testing.T) {
0000000000000000000000000000000000000000;;		spec := fakeVolumeSpec()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, _ := testPlugin()
0000000000000000000000000000000000000000;;		plugin.runner = fakeRunner(
0000000000000000000000000000000000000000;;			assertDriverCall(t, notSupportedOutput(), attachCmd,
0000000000000000000000000000000000000000;;				specJson(plugin, spec, nil), "localhost"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a, _ := plugin.NewAttacher()
0000000000000000000000000000000000000000;;		a.Attach(spec, "localhost")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWaitForAttach(t *testing.T) {
0000000000000000000000000000000000000000;;		spec := fakeVolumeSpec()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, _ := testPlugin()
0000000000000000000000000000000000000000;;		plugin.runner = fakeRunner(
0000000000000000000000000000000000000000;;			assertDriverCall(t, notSupportedOutput(), waitForAttachCmd, "/dev/sdx",
0000000000000000000000000000000000000000;;				specJson(plugin, spec, nil)),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a, _ := plugin.NewAttacher()
0000000000000000000000000000000000000000;;		a.WaitForAttach(spec, "/dev/sdx", 1*time.Second)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMountDevice(t *testing.T) {
0000000000000000000000000000000000000000;;		spec := fakeVolumeSpec()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, rootDir := testPlugin()
0000000000000000000000000000000000000000;;		plugin.runner = fakeRunner(
0000000000000000000000000000000000000000;;			assertDriverCall(t, notSupportedOutput(), mountDeviceCmd, rootDir+"/mount-dir", "/dev/sdx",
0000000000000000000000000000000000000000;;				specJson(plugin, spec, nil)),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a, _ := plugin.NewAttacher()
0000000000000000000000000000000000000000;;		a.MountDevice(spec, "/dev/sdx", rootDir+"/mount-dir")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsVolumeAttached(t *testing.T) {
0000000000000000000000000000000000000000;;		spec := fakeVolumeSpec()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, _ := testPlugin()
0000000000000000000000000000000000000000;;		plugin.runner = fakeRunner(
0000000000000000000000000000000000000000;;			assertDriverCall(t, notSupportedOutput(), isAttached, specJson(plugin, spec, nil), "localhost"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		a, _ := plugin.NewAttacher()
0000000000000000000000000000000000000000;;		specs := []*volume.Spec{spec}
0000000000000000000000000000000000000000;;		a.VolumesAreAttached(specs, "localhost")
0000000000000000000000000000000000000000;;	}
