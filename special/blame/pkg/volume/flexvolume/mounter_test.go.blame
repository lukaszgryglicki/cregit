0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d39110bb2b28931dd0cbaf34c6c9b8f568dc9e56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flexvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetUpAt(t *testing.T) {
0000000000000000000000000000000000000000;;		spec := fakeVolumeSpec()
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "my-pod",
0000000000000000000000000000000000000000;;				Namespace: "my-ns",
0000000000000000000000000000000000000000;;				UID:       types.UID("my-uid"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				ServiceAccountName: "my-sa",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mounter := &mount.FakeMounter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, rootDir := testPlugin()
0000000000000000000000000000000000000000;;		plugin.unsupportedCommands = []string{"unsupportedCmd"}
0000000000000000000000000000000000000000;;		plugin.runner = fakeRunner(
0000000000000000000000000000000000000000;;			// first call without fsGroup
0000000000000000000000000000000000000000;;			assertDriverCall(t, successOutput(), mountCmd, rootDir+"/mount-dir",
0000000000000000000000000000000000000000;;				specJson(plugin, spec, map[string]string{
0000000000000000000000000000000000000000;;					optionKeyPodName:            "my-pod",
0000000000000000000000000000000000000000;;					optionKeyPodNamespace:       "my-ns",
0000000000000000000000000000000000000000;;					optionKeyPodUID:             "my-uid",
0000000000000000000000000000000000000000;;					optionKeyServiceAccountName: "my-sa",
0000000000000000000000000000000000000000;;				})),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// second test has fsGroup
0000000000000000000000000000000000000000;;			assertDriverCall(t, notSupportedOutput(), mountCmd, rootDir+"/mount-dir",
0000000000000000000000000000000000000000;;				specJson(plugin, spec, map[string]string{
0000000000000000000000000000000000000000;;					optionFSGroup:               "42",
0000000000000000000000000000000000000000;;					optionKeyPodName:            "my-pod",
0000000000000000000000000000000000000000;;					optionKeyPodNamespace:       "my-ns",
0000000000000000000000000000000000000000;;					optionKeyPodUID:             "my-uid",
0000000000000000000000000000000000000000;;					optionKeyServiceAccountName: "my-sa",
0000000000000000000000000000000000000000;;				})),
0000000000000000000000000000000000000000;;			assertDriverCall(t, fakeVolumeNameOutput("sdx"), getVolumeNameCmd,
0000000000000000000000000000000000000000;;				specJson(plugin, spec, nil)),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m, _ := plugin.newMounterInternal(spec, pod, mounter, plugin.runner)
0000000000000000000000000000000000000000;;		m.SetUpAt(rootDir+"/mount-dir", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(42)
0000000000000000000000000000000000000000;;		m.SetUpAt(rootDir+"/mount-dir", &fsGroup)
0000000000000000000000000000000000000000;;	}
