0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d39110bb2b28931dd0cbaf34c6c9b8f568dc9e56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flexvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FlexVolumeMounter is the disk that will be exposed by this plugin.
0000000000000000000000000000000000000000;;	type flexVolumeMounter struct {
0000000000000000000000000000000000000000;;		*flexVolume
0000000000000000000000000000000000000000;;		// Runner used to setup the volume.
0000000000000000000000000000000000000000;;		runner exec.Interface
0000000000000000000000000000000000000000;;		// blockDeviceMounter provides the interface to create filesystem if the
0000000000000000000000000000000000000000;;		// filesystem doesn't exist.
0000000000000000000000000000000000000000;;		blockDeviceMounter mount.Interface
0000000000000000000000000000000000000000;;		// the considered volume spec
0000000000000000000000000000000000000000;;		spec     *volume.Spec
0000000000000000000000000000000000000000;;		readOnly bool
0000000000000000000000000000000000000000;;		volume.MetricsNil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ volume.Mounter = &flexVolumeMounter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mounter interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUp creates new directory.
0000000000000000000000000000000000000000;;	func (f *flexVolumeMounter) SetUp(fsGroup *int64) error {
0000000000000000000000000000000000000000;;		return f.SetUpAt(f.GetPath(), fsGroup)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUpAt creates new directory.
0000000000000000000000000000000000000000;;	func (f *flexVolumeMounter) SetUpAt(dir string, fsGroup *int64) error {
0000000000000000000000000000000000000000;;		// Mount only once.
0000000000000000000000000000000000000000;;		alreadyMounted, err := prepareForMount(f.mounter, dir)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if alreadyMounted {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		call := f.plugin.NewDriverCall(mountCmd)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Interface parameters
0000000000000000000000000000000000000000;;		call.Append(dir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		extraOptions := make(map[string]string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// pod metadata
0000000000000000000000000000000000000000;;		extraOptions[optionKeyPodName] = f.podName
0000000000000000000000000000000000000000;;		extraOptions[optionKeyPodNamespace] = f.podNamespace
0000000000000000000000000000000000000000;;		extraOptions[optionKeyPodUID] = string(f.podUID)
0000000000000000000000000000000000000000;;		// service account metadata
0000000000000000000000000000000000000000;;		extraOptions[optionKeyServiceAccountName] = f.podServiceAccountName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Extract secret and pass it as options.
0000000000000000000000000000000000000000;;		if err := addSecretsToOptions(extraOptions, f.spec, f.podNamespace, f.driverName, f.plugin.host); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Implicit parameters
0000000000000000000000000000000000000000;;		if fsGroup != nil {
0000000000000000000000000000000000000000;;			extraOptions[optionFSGroup] = strconv.FormatInt(int64(*fsGroup), 10)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		call.AppendSpec(f.spec, f.plugin.host, extraOptions)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = call.Run()
0000000000000000000000000000000000000000;;		if isCmdNotSupportedErr(err) {
0000000000000000000000000000000000000000;;			err = (*mounterDefaults)(f).SetUpAt(dir, fsGroup)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !f.readOnly {
0000000000000000000000000000000000000000;;			volume.SetVolumeOwnership(f, fsGroup)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAttributes get the flex volume attributes. The attributes will be queried
0000000000000000000000000000000000000000;;	// using plugin callout after we finalize the callout syntax.
0000000000000000000000000000000000000000;;	func (f *flexVolumeMounter) GetAttributes() volume.Attributes {
0000000000000000000000000000000000000000;;		return (*mounterDefaults)(f).GetAttributes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *flexVolumeMounter) CanMount() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
