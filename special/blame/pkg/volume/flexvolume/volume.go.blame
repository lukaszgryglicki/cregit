0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d39110bb2b28931dd0cbaf34c6c9b8f568dc9e56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flexvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		utilstrings "k8s.io/kubernetes/pkg/util/strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type flexVolume struct {
0000000000000000000000000000000000000000;;		// driverName is the name of the plugin driverName.
0000000000000000000000000000000000000000;;		driverName string
0000000000000000000000000000000000000000;;		// Driver executable used to setup the volume.
0000000000000000000000000000000000000000;;		execPath string
0000000000000000000000000000000000000000;;		// mounter provides the interface that is used to mount the actual
0000000000000000000000000000000000000000;;		// block device.
0000000000000000000000000000000000000000;;		mounter mount.Interface
0000000000000000000000000000000000000000;;		// podName is the name of the pod, if available.
0000000000000000000000000000000000000000;;		podName string
0000000000000000000000000000000000000000;;		// podUID is the UID of the pod.
0000000000000000000000000000000000000000;;		podUID types.UID
0000000000000000000000000000000000000000;;		// podNamespace is the namespace of the pod, if available.
0000000000000000000000000000000000000000;;		podNamespace string
0000000000000000000000000000000000000000;;		// podServiceAccountName is the service account name of the pod, if available.
0000000000000000000000000000000000000000;;		podServiceAccountName string
0000000000000000000000000000000000000000;;		// volName is the name of the pod's volume.
0000000000000000000000000000000000000000;;		volName string
0000000000000000000000000000000000000000;;		// the underlying plugin
0000000000000000000000000000000000000000;;		plugin *flexVolumePlugin
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// volume.Volume interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *flexVolume) GetPath() string {
0000000000000000000000000000000000000000;;		name := f.driverName
0000000000000000000000000000000000000000;;		return f.plugin.host.GetPodVolumeDir(f.podUID, utilstrings.EscapeQualifiedNameForDisk(name), f.volName)
0000000000000000000000000000000000000000;;	}
