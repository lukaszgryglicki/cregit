0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d39110bb2b28931dd0cbaf34c6c9b8f568dc9e56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flexvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type flexVolumeDetacher struct {
0000000000000000000000000000000000000000;;		plugin *flexVolumeAttachablePlugin
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ volume.Detacher = &flexVolumeDetacher{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Detach is part of the volume.Detacher interface.
0000000000000000000000000000000000000000;;	func (d *flexVolumeDetacher) Detach(pvOrVolumeName string, hostName types.NodeName) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		call := d.plugin.NewDriverCall(detachCmd)
0000000000000000000000000000000000000000;;		call.Append(pvOrVolumeName)
0000000000000000000000000000000000000000;;		call.Append(string(hostName))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := call.Run()
0000000000000000000000000000000000000000;;		if isCmdNotSupportedErr(err) {
0000000000000000000000000000000000000000;;			return (*detacherDefaults)(d).Detach(pvOrVolumeName, hostName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitForDetach is part of the volume.Detacher interface.
0000000000000000000000000000000000000000;;	func (d *flexVolumeDetacher) WaitForDetach(devicePath string, timeout time.Duration) error {
0000000000000000000000000000000000000000;;		call := d.plugin.NewDriverCallWithTimeout(waitForDetachCmd, timeout)
0000000000000000000000000000000000000000;;		call.Append(devicePath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := call.Run()
0000000000000000000000000000000000000000;;		if isCmdNotSupportedErr(err) {
0000000000000000000000000000000000000000;;			return (*detacherDefaults)(d).WaitForDetach(devicePath, timeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmountDevice is part of the volume.Detacher interface.
0000000000000000000000000000000000000000;;	func (d *flexVolumeDetacher) UnmountDevice(deviceMountPath string) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if pathExists, pathErr := util.PathExists(deviceMountPath); pathErr != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Error checking if path exists: %v", pathErr)
0000000000000000000000000000000000000000;;		} else if !pathExists {
0000000000000000000000000000000000000000;;			glog.Warningf("Warning: Unmount skipped because path does not exist: %v", deviceMountPath)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		notmnt, err := isNotMounted(d.plugin.host.GetMounter(), deviceMountPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if notmnt {
0000000000000000000000000000000000000000;;			glog.Warningf("Warning: Path: %v already unmounted", deviceMountPath)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			call := d.plugin.NewDriverCall(unmountDeviceCmd)
0000000000000000000000000000000000000000;;			call.Append(deviceMountPath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, err := call.Run()
0000000000000000000000000000000000000000;;			if isCmdNotSupportedErr(err) {
0000000000000000000000000000000000000000;;				err = (*detacherDefaults)(d).UnmountDevice(deviceMountPath)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flexvolume driver may remove the directory. Ignore if it does.
0000000000000000000000000000000000000000;;		if pathExists, pathErr := util.PathExists(deviceMountPath); pathErr != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Error checking if path exists: %v", pathErr)
0000000000000000000000000000000000000000;;		} else if !pathExists {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return os.Remove(deviceMountPath)
0000000000000000000000000000000000000000;;	}
