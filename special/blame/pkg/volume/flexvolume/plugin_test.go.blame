0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d39110bb2b28931dd0cbaf34c6c9b8f568dc9e56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flexvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInit(t *testing.T) {
0000000000000000000000000000000000000000;;		plugin, _ := testPlugin()
0000000000000000000000000000000000000000;;		plugin.runner = fakeRunner(
0000000000000000000000000000000000000000;;			assertDriverCall(t, successOutput(), "init"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		plugin.Init(plugin.host)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeVolumeNameOutput(name string) exec.FakeCombinedOutputAction {
0000000000000000000000000000000000000000;;		return fakeResultOutput(&DriverStatus{
0000000000000000000000000000000000000000;;			Status:     StatusSuccess,
0000000000000000000000000000000000000000;;			VolumeName: name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetVolumeName(t *testing.T) {
0000000000000000000000000000000000000000;;		spec := fakeVolumeSpec()
0000000000000000000000000000000000000000;;		plugin, _ := testPlugin()
0000000000000000000000000000000000000000;;		plugin.runner = fakeRunner(
0000000000000000000000000000000000000000;;			assertDriverCall(t, fakeVolumeNameOutput(spec.Name()), getVolumeNameCmd,
0000000000000000000000000000000000000000;;				specJson(plugin, spec, nil)),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, err := plugin.GetVolumeName(spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("GetVolumeName() failed: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedName := spec.Name()
0000000000000000000000000000000000000000;;		if name != expectedName {
0000000000000000000000000000000000000000;;			t.Errorf("GetVolumeName() returned %v instead of %v", name, expectedName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
