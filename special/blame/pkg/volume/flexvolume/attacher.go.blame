0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d39110bb2b28931dd0cbaf34c6c9b8f568dc9e56;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flexvolume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type flexVolumeAttacher struct {
0000000000000000000000000000000000000000;;		plugin *flexVolumeAttachablePlugin
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ volume.Attacher = &flexVolumeAttacher{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attach is part of the volume.Attacher interface
0000000000000000000000000000000000000000;;	func (a *flexVolumeAttacher) Attach(spec *volume.Spec, hostName types.NodeName) (string, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		call := a.plugin.NewDriverCall(attachCmd)
0000000000000000000000000000000000000000;;		call.AppendSpec(spec, a.plugin.host, nil)
0000000000000000000000000000000000000000;;		call.Append(string(hostName))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		status, err := call.Run()
0000000000000000000000000000000000000000;;		if isCmdNotSupportedErr(err) {
0000000000000000000000000000000000000000;;			return (*attacherDefaults)(a).Attach(spec, hostName)
0000000000000000000000000000000000000000;;		} else if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return status.DevicePath, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitForAttach is part of the volume.Attacher interface
0000000000000000000000000000000000000000;;	func (a *flexVolumeAttacher) WaitForAttach(spec *volume.Spec, devicePath string, timeout time.Duration) (string, error) {
0000000000000000000000000000000000000000;;		call := a.plugin.NewDriverCallWithTimeout(waitForAttachCmd, timeout)
0000000000000000000000000000000000000000;;		call.Append(devicePath)
0000000000000000000000000000000000000000;;		call.AppendSpec(spec, a.plugin.host, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		status, err := call.Run()
0000000000000000000000000000000000000000;;		if isCmdNotSupportedErr(err) {
0000000000000000000000000000000000000000;;			return (*attacherDefaults)(a).WaitForAttach(spec, devicePath, timeout)
0000000000000000000000000000000000000000;;		} else if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return status.DevicePath, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetDeviceMountPath is part of the volume.Attacher interface
0000000000000000000000000000000000000000;;	func (a *flexVolumeAttacher) GetDeviceMountPath(spec *volume.Spec) (string, error) {
0000000000000000000000000000000000000000;;		return a.plugin.getDeviceMountPath(spec)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MountDevice is part of the volume.Attacher interface
0000000000000000000000000000000000000000;;	func (a *flexVolumeAttacher) MountDevice(spec *volume.Spec, devicePath string, deviceMountPath string) error {
0000000000000000000000000000000000000000;;		// Mount only once.
0000000000000000000000000000000000000000;;		alreadyMounted, err := prepareForMount(a.plugin.host.GetMounter(), deviceMountPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if alreadyMounted {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		call := a.plugin.NewDriverCall(mountDeviceCmd)
0000000000000000000000000000000000000000;;		call.Append(deviceMountPath)
0000000000000000000000000000000000000000;;		call.Append(devicePath)
0000000000000000000000000000000000000000;;		call.AppendSpec(spec, a.plugin.host, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = call.Run()
0000000000000000000000000000000000000000;;		if isCmdNotSupportedErr(err) {
0000000000000000000000000000000000000000;;			// Devicepath is empty if the plugin does not support attach calls. Ignore mountDevice calls if the
0000000000000000000000000000000000000000;;			// plugin does not implement attach interface.
0000000000000000000000000000000000000000;;			if devicePath != "" {
0000000000000000000000000000000000000000;;				return (*attacherDefaults)(a).MountDevice(spec, devicePath, deviceMountPath, a.plugin.host.GetMounter())
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *flexVolumeAttacher) VolumesAreAttached(specs []*volume.Spec, nodeName types.NodeName) (map[*volume.Spec]bool, error) {
0000000000000000000000000000000000000000;;		volumesAttachedCheck := make(map[*volume.Spec]bool)
0000000000000000000000000000000000000000;;		for _, spec := range specs {
0000000000000000000000000000000000000000;;			volumesAttachedCheck[spec] = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			call := a.plugin.NewDriverCall(isAttached)
0000000000000000000000000000000000000000;;			call.AppendSpec(spec, a.plugin.host, nil)
0000000000000000000000000000000000000000;;			call.Append(string(nodeName))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			status, err := call.Run()
0000000000000000000000000000000000000000;;			if isCmdNotSupportedErr(err) {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			} else if err == nil {
0000000000000000000000000000000000000000;;				if !status.Attached {
0000000000000000000000000000000000000000;;					volumesAttachedCheck[spec] = false
0000000000000000000000000000000000000000;;					glog.V(2).Infof("VolumesAreAttached: check volume (%q) is no longer attached", spec.Name())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return volumesAttachedCheck, nil
0000000000000000000000000000000000000000;;	}
