0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
da3fa83320d50573e8894e508d4d964e6e1b6442;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package quobyte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		quobyteapi "github.com/quobyte/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type quobyteVolumeManager struct {
0000000000000000000000000000000000000000;;		config *quobyteAPIConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (manager *quobyteVolumeManager) createVolume(provisioner *quobyteVolumeProvisioner, createQuota bool) (quobyte *v1.QuobyteVolumeSource, size int, err error) {
0000000000000000000000000000000000000000;;		capacity := provisioner.options.PVC.Spec.Resources.Requests[v1.ResourceName(v1.ResourceStorage)]
0000000000000000000000000000000000000000;;		volumeSize := int(volume.RoundUpSize(capacity.Value(), 1024*1024*1024))
0000000000000000000000000000000000000000;;		// Quobyte has the concept of Volumes which doen't have a specific size (they can grow unlimited)
0000000000000000000000000000000000000000;;		// to simulate a size constraint we set here a Quota for logical space
0000000000000000000000000000000000000000;;		volumeRequest := &quobyteapi.CreateVolumeRequest{
0000000000000000000000000000000000000000;;			Name:              provisioner.volume,
0000000000000000000000000000000000000000;;			RootUserID:        provisioner.user,
0000000000000000000000000000000000000000;;			RootGroupID:       provisioner.group,
0000000000000000000000000000000000000000;;			TenantID:          provisioner.tenant,
0000000000000000000000000000000000000000;;			ConfigurationName: provisioner.config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		quobyteClient := manager.createQuobyteClient()
0000000000000000000000000000000000000000;;		volumeUUID, err := quobyteClient.CreateVolume(volumeRequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &v1.QuobyteVolumeSource{}, volumeSize, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set Quota for Volume with specified byte size
0000000000000000000000000000000000000000;;		if createQuota {
0000000000000000000000000000000000000000;;			err = quobyteClient.SetVolumeQuota(volumeUUID, uint64(capacity.Value()))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return &v1.QuobyteVolumeSource{}, volumeSize, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Created Quobyte volume %s", provisioner.volume)
0000000000000000000000000000000000000000;;		return &v1.QuobyteVolumeSource{
0000000000000000000000000000000000000000;;			Registry: provisioner.registry,
0000000000000000000000000000000000000000;;			Volume:   provisioner.volume,
0000000000000000000000000000000000000000;;			User:     provisioner.user,
0000000000000000000000000000000000000000;;			Group:    provisioner.group,
0000000000000000000000000000000000000000;;		}, volumeSize, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (manager *quobyteVolumeManager) deleteVolume(deleter *quobyteVolumeDeleter) error {
0000000000000000000000000000000000000000;;		return manager.createQuobyteClient().DeleteVolumeByName(deleter.volume, deleter.tenant)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (manager *quobyteVolumeManager) createQuobyteClient() *quobyteapi.QuobyteClient {
0000000000000000000000000000000000000000;;		return quobyteapi.NewQuobyteClient(
0000000000000000000000000000000000000000;;			manager.config.quobyteAPIServer,
0000000000000000000000000000000000000000;;			manager.config.quobyteUser,
0000000000000000000000000000000000000000;;			manager.config.quobytePassword,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mounter *quobyteMounter) pluginDirIsMounted(pluginDir string) (bool, error) {
0000000000000000000000000000000000000000;;		mounts, err := mounter.mounter.List()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, mountPoint := range mounts {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(mountPoint.Type, "quobyte") {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if mountPoint.Path == pluginDir {
0000000000000000000000000000000000000000;;				glog.V(4).Infof("quobyte: found mountpoint %s in /proc/mounts", mountPoint.Path)
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mounter *quobyteMounter) correctTraillingSlash(regStr string) string {
0000000000000000000000000000000000000000;;		return path.Clean(regStr) + "/"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validateRegistry(registry string) bool {
0000000000000000000000000000000000000000;;		if len(registry) == 0 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, hostPortPair := range strings.Split(registry, ",") {
0000000000000000000000000000000000000000;;			if _, _, err := net.SplitHostPort(hostPortPair); err != nil {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
