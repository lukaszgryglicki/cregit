0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
29f50278a649609e9f0ab6ad6b87814a1ddcf9d5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flocker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/rand"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flockerapi "github.com/clusterhq/flocker-go"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FlockerUtil struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (util *FlockerUtil) DeleteVolume(d *flockerVolumeDeleter) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if d.flockerClient == nil {
0000000000000000000000000000000000000000;;			d.flockerClient, err = d.plugin.newFlockerClient("")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		datasetUUID, err := d.GetDatasetUUID()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return d.flockerClient.DeleteDataset(datasetUUID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (util *FlockerUtil) CreateVolume(c *flockerVolumeProvisioner) (datasetUUID string, volumeSizeGB int, labels map[string]string, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if c.flockerClient == nil {
0000000000000000000000000000000000000000;;			c.flockerClient, err = c.plugin.newFlockerClient("")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodes, err := c.flockerClient.ListNodes()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(nodes) < 1 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("no nodes found inside the flocker cluster to provision a dataset")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// select random node
0000000000000000000000000000000000000000;;		rand.Seed(time.Now().UTC().UnixNano())
0000000000000000000000000000000000000000;;		node := nodes[rand.Intn(len(nodes))]
0000000000000000000000000000000000000000;;		glog.V(2).Infof("selected flocker node with UUID '%s' to provision dataset", node.UUID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capacity := c.options.PVC.Spec.Resources.Requests[v1.ResourceName(v1.ResourceStorage)]
0000000000000000000000000000000000000000;;		requestBytes := capacity.Value()
0000000000000000000000000000000000000000;;		volumeSizeGB = int(volume.RoundUpSize(requestBytes, 1024*1024*1024))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createOptions := &flockerapi.CreateDatasetOptions{
0000000000000000000000000000000000000000;;			MaximumSize: requestBytes,
0000000000000000000000000000000000000000;;			Metadata: map[string]string{
0000000000000000000000000000000000000000;;				"type": "k8s-dynamic-prov",
0000000000000000000000000000000000000000;;				"pvc":  c.options.PVC.Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Primary: node.UUID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		datasetState, err := c.flockerClient.CreateDataset(createOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		datasetUUID = datasetState.DatasetID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(2).Infof("successfully created Flocker dataset with UUID '%s'", datasetUUID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
