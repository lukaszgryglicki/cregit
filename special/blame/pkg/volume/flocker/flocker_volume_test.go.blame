0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
29f50278a649609e9f0ab6ad6b87814a1ddcf9d5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flocker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestableProvisioner(assert *assert.Assertions, options volume.VolumeOptions) (string, volume.Provisioner) {
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("flockervolumeTest")
0000000000000000000000000000000000000000;;		assert.NoError(err, fmt.Sprintf("can't make a temp dir: %v", err))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugMgr := volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;		plugMgr.InitPlugins(ProbeVolumePlugins(), volumetest.NewFakeVolumeHost(tmpDir, nil, nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName(pluginName)
0000000000000000000000000000000000000000;;		assert.NoError(err, "Can't find the plugin by name")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		provisioner, err := plug.(*flockerPlugin).newProvisionerInternal(options, &fakeFlockerUtil{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return tmpDir, provisioner
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestProvision(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pvc := volumetest.CreateTestPVC("3Gi", []v1.PersistentVolumeAccessMode{v1.ReadWriteOnce})
0000000000000000000000000000000000000000;;		options := volume.VolumeOptions{
0000000000000000000000000000000000000000;;			PVC: pvc,
0000000000000000000000000000000000000000;;			PersistentVolumeReclaimPolicy: v1.PersistentVolumeReclaimDelete,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dir, provisioner := newTestableProvisioner(assert, options)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		persistentSpec, err := provisioner.Provision()
0000000000000000000000000000000000000000;;		assert.NoError(err, "Provision() failed: ", err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cap := persistentSpec.Spec.Capacity[v1.ResourceStorage]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(int64(3*1024*1024*1024), cap.Value())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(
0000000000000000000000000000000000000000;;			"test-flocker-volume-uuid",
0000000000000000000000000000000000000000;;			persistentSpec.Spec.PersistentVolumeSource.Flocker.DatasetUUID,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(
0000000000000000000000000000000000000000;;			map[string]string{"fakeflockerutil": "yes"},
0000000000000000000000000000000000000000;;			persistentSpec.Labels,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// parameters are not supported
0000000000000000000000000000000000000000;;		options = volume.VolumeOptions{
0000000000000000000000000000000000000000;;			PVC: pvc,
0000000000000000000000000000000000000000;;			PersistentVolumeReclaimPolicy: v1.PersistentVolumeReclaimDelete,
0000000000000000000000000000000000000000;;			Parameters: map[string]string{
0000000000000000000000000000000000000000;;				"not-supported-params": "test123",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dir, provisioner = newTestableProvisioner(assert, options)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;		persistentSpec, err = provisioner.Provision()
0000000000000000000000000000000000000000;;		assert.Error(err, "Provision() did not fail with Parameters specified")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// selectors are not supported
0000000000000000000000000000000000000000;;		pvc.Spec.Selector = &metav1.LabelSelector{MatchLabels: map[string]string{"key": "value"}}
0000000000000000000000000000000000000000;;		options = volume.VolumeOptions{
0000000000000000000000000000000000000000;;			PVC: pvc,
0000000000000000000000000000000000000000;;			PersistentVolumeReclaimPolicy: v1.PersistentVolumeReclaimDelete,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dir, provisioner = newTestableProvisioner(assert, options)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;		persistentSpec, err = provisioner.Provision()
0000000000000000000000000000000000000000;;		assert.Error(err, "Provision() did not fail with Selector specified")
0000000000000000000000000000000000000000;;	}
