0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
29f50278a649609e9f0ab6ad6b87814a1ddcf9d5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flocker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFlockerUtil_CreateVolume(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// test CreateVolume happy path
0000000000000000000000000000000000000000;;		pvc := volumetest.CreateTestPVC("3Gi", []v1.PersistentVolumeAccessMode{v1.ReadWriteOnce})
0000000000000000000000000000000000000000;;		options := volume.VolumeOptions{
0000000000000000000000000000000000000000;;			PVC: pvc,
0000000000000000000000000000000000000000;;			PersistentVolumeReclaimPolicy: v1.PersistentVolumeReclaimDelete,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeFlockerClient := newFakeFlockerClient()
0000000000000000000000000000000000000000;;		dir, p := newTestableProvisioner(assert, options)
0000000000000000000000000000000000000000;;		provisioner := p.(*flockerVolumeProvisioner)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;		provisioner.flockerClient = fakeFlockerClient
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flockerUtil := &FlockerUtil{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		datasetID, size, _, err := flockerUtil.CreateVolume(provisioner)
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;		assert.Equal(datasetOneID, datasetID)
0000000000000000000000000000000000000000;;		assert.Equal(3, size)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// test error during CreateVolume
0000000000000000000000000000000000000000;;		fakeFlockerClient.Error = fmt.Errorf("Do not feel like provisioning")
0000000000000000000000000000000000000000;;		_, _, _, err = flockerUtil.CreateVolume(provisioner)
0000000000000000000000000000000000000000;;		assert.Equal(fakeFlockerClient.Error.Error(), err.Error())
0000000000000000000000000000000000000000;;	}
