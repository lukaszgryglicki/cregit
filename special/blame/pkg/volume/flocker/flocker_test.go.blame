0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
52aca6320194613121f2976fe3fd02df58abf14d;pkg/volume/flocker/plugin_test.go[pkg/volume/flocker/plugin_test.go][pkg/volume/flocker/flocker_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flocker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flockerapi "github.com/clusterhq/flocker-go"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const pluginName = "kubernetes.io/flocker"
0000000000000000000000000000000000000000;;	const datasetOneID = "11111111-1111-1111-1111-111111111100"
0000000000000000000000000000000000000000;;	const nodeOneID = "11111111-1111-1111-1111-111111111111"
0000000000000000000000000000000000000000;;	const nodeTwoID = "22222222-2222-2222-2222-222222222222"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ flockerapi.Clientable = &fakeFlockerClient{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeFlockerClient struct {
0000000000000000000000000000000000000000;;		DatasetID string
0000000000000000000000000000000000000000;;		Primary   string
0000000000000000000000000000000000000000;;		Deleted   bool
0000000000000000000000000000000000000000;;		Metadata  map[string]string
0000000000000000000000000000000000000000;;		Nodes     []flockerapi.NodeState
0000000000000000000000000000000000000000;;		Error     error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeFlockerClient() *fakeFlockerClient {
0000000000000000000000000000000000000000;;		return &fakeFlockerClient{
0000000000000000000000000000000000000000;;			DatasetID: datasetOneID,
0000000000000000000000000000000000000000;;			Primary:   nodeOneID,
0000000000000000000000000000000000000000;;			Deleted:   false,
0000000000000000000000000000000000000000;;			Metadata:  map[string]string{"Name": "dataset-one"},
0000000000000000000000000000000000000000;;			Nodes: []flockerapi.NodeState{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Host: "1.2.3.4",
0000000000000000000000000000000000000000;;					UUID: nodeOneID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Host: "4.5.6.7",
0000000000000000000000000000000000000000;;					UUID: nodeTwoID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeFlockerClient) CreateDataset(options *flockerapi.CreateDatasetOptions) (*flockerapi.DatasetState, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if c.Error != nil {
0000000000000000000000000000000000000000;;			return nil, c.Error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &flockerapi.DatasetState{
0000000000000000000000000000000000000000;;			DatasetID: c.DatasetID,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeFlockerClient) DeleteDataset(datasetID string) error {
0000000000000000000000000000000000000000;;		c.DatasetID = datasetID
0000000000000000000000000000000000000000;;		c.Deleted = true
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeFlockerClient) GetDatasetState(datasetID string) (*flockerapi.DatasetState, error) {
0000000000000000000000000000000000000000;;		return &flockerapi.DatasetState{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeFlockerClient) GetDatasetID(metaName string) (datasetID string, err error) {
0000000000000000000000000000000000000000;;		if val, ok := c.Metadata["Name"]; !ok {
0000000000000000000000000000000000000000;;			return val, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("No dataset with metadata X found")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeFlockerClient) GetPrimaryUUID() (primaryUUID string, err error) {
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeFlockerClient) ListNodes() (nodes []flockerapi.NodeState, err error) {
0000000000000000000000000000000000000000;;		return c.Nodes, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeFlockerClient) UpdatePrimaryForDataset(primaryUUID, datasetID string) (*flockerapi.DatasetState, error) {
0000000000000000000000000000000000000000;;		return &flockerapi.DatasetState{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeFlockerUtil struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeFlockerUtil) CreateVolume(c *flockerVolumeProvisioner) (datasetUUID string, volumeSizeGB int, labels map[string]string, err error) {
0000000000000000000000000000000000000000;;		labels = make(map[string]string)
0000000000000000000000000000000000000000;;		labels["fakeflockerutil"] = "yes"
0000000000000000000000000000000000000000;;		return "test-flocker-volume-uuid", 3, labels, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fake *fakeFlockerUtil) DeleteVolume(cd *flockerVolumeDeleter) error {
0000000000000000000000000000000000000000;;		if cd.datasetUUID != "test-flocker-volume-uuid" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Deleter got unexpected datasetUUID: %s", cd.datasetUUID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInitializedVolumePlugMgr(t *testing.T) (*volume.VolumePluginMgr, string) {
0000000000000000000000000000000000000000;;		plugMgr := &volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;		dir, err := utiltesting.MkTmpdir("flocker")
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		plugMgr.InitPlugins(ProbeVolumePlugins(), volumetest.NewFakeVolumeHost(dir, nil, nil))
0000000000000000000000000000000000000000;;		return plugMgr, dir
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPlugin(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("flockerTest")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't make a temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;		plugMgr := volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;		plugMgr.InitPlugins(ProbeVolumePlugins(), volumetest.NewFakeVolumeHost(tmpDir, nil, nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName("kubernetes.io/flocker")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Can't find the plugin by name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		spec := &v1.Volume{
0000000000000000000000000000000000000000;;			Name: "vol1",
0000000000000000000000000000000000000000;;			VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;				Flocker: &v1.FlockerVolumeSource{
0000000000000000000000000000000000000000;;					DatasetUUID: "uuid1",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeManager := &fakeFlockerUtil{}
0000000000000000000000000000000000000000;;		fakeMounter := &mount.FakeMounter{}
0000000000000000000000000000000000000000;;		mounter, err := plug.(*flockerPlugin).newMounterInternal(volume.NewSpecFromVolume(spec), types.UID("poduid"), fakeManager, fakeMounter)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to make a new Mounter: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mounter == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got a nil Mounter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetByName(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;		plugMgr, dir := newInitializedVolumePlugMgr(t)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName(pluginName)
0000000000000000000000000000000000000000;;		assert.NotNil(plug, "Can't find the plugin by name")
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCanSupport(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;		plugMgr, dir := newInitializedVolumePlugMgr(t)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName(pluginName)
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		specs := map[*volume.Spec]bool{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Volume: &v1.Volume{
0000000000000000000000000000000000000000;;					VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;						Flocker: &v1.FlockerVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}: true,
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				PersistentVolume: &v1.PersistentVolume{
0000000000000000000000000000000000000000;;					Spec: v1.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;						PersistentVolumeSource: v1.PersistentVolumeSource{
0000000000000000000000000000000000000000;;							Flocker: &v1.FlockerVolumeSource{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}: true,
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Volume: &v1.Volume{
0000000000000000000000000000000000000000;;					VolumeSource: v1.VolumeSource{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for spec, expected := range specs {
0000000000000000000000000000000000000000;;			actual := plug.CanSupport(spec)
0000000000000000000000000000000000000000;;			assert.Equal(expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetFlockerVolumeSource(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p := flockerPlugin{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spec := &volume.Spec{
0000000000000000000000000000000000000000;;			Volume: &v1.Volume{
0000000000000000000000000000000000000000;;				VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;					Flocker: &v1.FlockerVolumeSource{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		vs, ro := p.getFlockerVolumeSource(spec)
0000000000000000000000000000000000000000;;		assert.False(ro)
0000000000000000000000000000000000000000;;		assert.Equal(spec.Volume.Flocker, vs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spec = &volume.Spec{
0000000000000000000000000000000000000000;;			PersistentVolume: &v1.PersistentVolume{
0000000000000000000000000000000000000000;;				Spec: v1.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: v1.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						Flocker: &v1.FlockerVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		vs, ro = p.getFlockerVolumeSource(spec)
0000000000000000000000000000000000000000;;		assert.False(ro)
0000000000000000000000000000000000000000;;		assert.Equal(spec.PersistentVolume.Spec.Flocker, vs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewMounterDatasetName(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugMgr, dir := newInitializedVolumePlugMgr(t)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName(pluginName)
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spec := &volume.Spec{
0000000000000000000000000000000000000000;;			Volume: &v1.Volume{
0000000000000000000000000000000000000000;;				VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;					Flocker: &v1.FlockerVolumeSource{
0000000000000000000000000000000000000000;;						DatasetName: "something",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = plug.NewMounter(spec, &v1.Pod{}, volume.VolumeOptions{})
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewMounterDatasetUUID(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugMgr, dir := newInitializedVolumePlugMgr(t)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName(pluginName)
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spec := &volume.Spec{
0000000000000000000000000000000000000000;;			Volume: &v1.Volume{
0000000000000000000000000000000000000000;;				VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;					Flocker: &v1.FlockerVolumeSource{
0000000000000000000000000000000000000000;;						DatasetUUID: "uuid1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mounter, err := plug.NewMounter(spec, &v1.Pod{}, volume.VolumeOptions{})
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;		assert.NotNil(mounter, "got a nil mounter")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewUnmounter(t *testing.T) {
0000000000000000000000000000000000000000;;		t.Skip("broken")
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p := flockerPlugin{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unmounter, err := p.NewUnmounter("", types.UID(""))
0000000000000000000000000000000000000000;;		assert.Nil(unmounter)
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsReadOnly(t *testing.T) {
0000000000000000000000000000000000000000;;		b := &flockerVolumeMounter{readOnly: true}
0000000000000000000000000000000000000000;;		assert.True(t, b.GetAttributes().ReadOnly)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockFlockerClient struct {
0000000000000000000000000000000000000000;;		datasetID, primaryUUID, path string
0000000000000000000000000000000000000000;;		datasetState                 *flockerapi.DatasetState
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newMockFlockerClient(mockDatasetID, mockPrimaryUUID, mockPath string) *mockFlockerClient {
0000000000000000000000000000000000000000;;		return &mockFlockerClient{
0000000000000000000000000000000000000000;;			datasetID:   mockDatasetID,
0000000000000000000000000000000000000000;;			primaryUUID: mockPrimaryUUID,
0000000000000000000000000000000000000000;;			path:        mockPath,
0000000000000000000000000000000000000000;;			datasetState: &flockerapi.DatasetState{
0000000000000000000000000000000000000000;;				Path:      mockPath,
0000000000000000000000000000000000000000;;				DatasetID: mockDatasetID,
0000000000000000000000000000000000000000;;				Primary:   mockPrimaryUUID,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m mockFlockerClient) CreateDataset(metaName string) (*flockerapi.DatasetState, error) {
0000000000000000000000000000000000000000;;		return m.datasetState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (m mockFlockerClient) GetDatasetState(datasetID string) (*flockerapi.DatasetState, error) {
0000000000000000000000000000000000000000;;		return m.datasetState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (m mockFlockerClient) GetDatasetID(metaName string) (string, error) {
0000000000000000000000000000000000000000;;		return m.datasetID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (m mockFlockerClient) GetPrimaryUUID() (string, error) {
0000000000000000000000000000000000000000;;		return m.primaryUUID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (m mockFlockerClient) UpdatePrimaryForDataset(primaryUUID, datasetID string) (*flockerapi.DatasetState, error) {
0000000000000000000000000000000000000000;;		return m.datasetState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	TODO: reenable after refactor
0000000000000000000000000000000000000000;;	func TestSetUpAtInternal(t *testing.T) {
0000000000000000000000000000000000000000;;		const dir = "dir"
0000000000000000000000000000000000000000;;		mockPath := "expected-to-be-set-properly" // package var
0000000000000000000000000000000000000000;;		expectedPath := mockPath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugMgr, rootDir := newInitializedVolumePlugMgr(t)
0000000000000000000000000000000000000000;;		if rootDir != "" {
0000000000000000000000000000000000000000;;			defer os.RemoveAll(rootDir)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName(flockerPluginName)
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{ObjectMeta: metav1.ObjectMeta{UID: types.UID("poduid")}}
0000000000000000000000000000000000000000;;		b := flockerVolumeMounter{flockerVolume: &flockerVolume{pod: pod, plugin: plug.(*flockerPlugin)}}
0000000000000000000000000000000000000000;;		b.client = newMockFlockerClient("dataset-id", "primary-uid", mockPath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.NoError(b.SetUpAt(dir, nil))
0000000000000000000000000000000000000000;;		assert.Equal(expectedPath, b.flocker.path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	*/
