0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
28d1b811f32f22d79e3d1a03efc572f4fe6fc926;pkg/kubelet/volume/git_repo/git_repo_test.go[pkg/kubelet/volume/git_repo/git_repo_test.go][pkg/volume/git_repo/git_repo_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package git_repo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/empty_dir"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestHost(t *testing.T) (string, volume.VolumeHost) {
0000000000000000000000000000000000000000;;		tempDir, err := ioutil.TempDir("/tmp", "git_repo_test.")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't make a temp rootdir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tempDir, volumetest.NewFakeVolumeHost(tempDir, nil, empty_dir.ProbeVolumePlugins())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCanSupport(t *testing.T) {
0000000000000000000000000000000000000000;;		plugMgr := volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;		tempDir, host := newTestHost(t)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tempDir)
0000000000000000000000000000000000000000;;		plugMgr.InitPlugins(ProbeVolumePlugins(), host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName("kubernetes.io/git-repo")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Can't find the plugin by name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if plug.GetPluginName() != "kubernetes.io/git-repo" {
0000000000000000000000000000000000000000;;			t.Errorf("Wrong name: %s", plug.GetPluginName())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !plug.CanSupport(&volume.Spec{Volume: &v1.Volume{VolumeSource: v1.VolumeSource{GitRepo: &v1.GitRepoVolumeSource{}}}}) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expected command
0000000000000000000000000000000000000000;;	type expectedCommand struct {
0000000000000000000000000000000000000000;;		// The git command
0000000000000000000000000000000000000000;;		cmd []string
0000000000000000000000000000000000000000;;		// The dir of git command is executed
0000000000000000000000000000000000000000;;		dir string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPlugin(t *testing.T) {
0000000000000000000000000000000000000000;;		gitUrl := "https://github.com/kubernetes/kubernetes.git"
0000000000000000000000000000000000000000;;		revision := "2a30ce65c5ab586b98916d83385c5983edd353a1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scenarios := []struct {
0000000000000000000000000000000000000000;;			name              string
0000000000000000000000000000000000000000;;			vol               *v1.Volume
0000000000000000000000000000000000000000;;			expecteds         []expectedCommand
0000000000000000000000000000000000000000;;			isExpectedFailure bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "target-dir",
0000000000000000000000000000000000000000;;				vol: &v1.Volume{
0000000000000000000000000000000000000000;;					Name: "vol1",
0000000000000000000000000000000000000000;;					VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &v1.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: gitUrl,
0000000000000000000000000000000000000000;;							Revision:   revision,
0000000000000000000000000000000000000000;;							Directory:  "target_dir",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expecteds: []expectedCommand{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "clone", gitUrl, "target_dir"},
0000000000000000000000000000000000000000;;						dir: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "checkout", revision},
0000000000000000000000000000000000000000;;						dir: "/target_dir",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "reset", "--hard"},
0000000000000000000000000000000000000000;;						dir: "/target_dir",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "target-dir-no-revision",
0000000000000000000000000000000000000000;;				vol: &v1.Volume{
0000000000000000000000000000000000000000;;					Name: "vol1",
0000000000000000000000000000000000000000;;					VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &v1.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: gitUrl,
0000000000000000000000000000000000000000;;							Directory:  "target_dir",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expecteds: []expectedCommand{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "clone", gitUrl, "target_dir"},
0000000000000000000000000000000000000000;;						dir: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "only-git-clone",
0000000000000000000000000000000000000000;;				vol: &v1.Volume{
0000000000000000000000000000000000000000;;					Name: "vol1",
0000000000000000000000000000000000000000;;					VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &v1.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: gitUrl,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expecteds: []expectedCommand{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "clone", gitUrl},
0000000000000000000000000000000000000000;;						dir: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no-target-dir",
0000000000000000000000000000000000000000;;				vol: &v1.Volume{
0000000000000000000000000000000000000000;;					Name: "vol1",
0000000000000000000000000000000000000000;;					VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &v1.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: gitUrl,
0000000000000000000000000000000000000000;;							Revision:   revision,
0000000000000000000000000000000000000000;;							Directory:  "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expecteds: []expectedCommand{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "clone", gitUrl},
0000000000000000000000000000000000000000;;						dir: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "checkout", revision},
0000000000000000000000000000000000000000;;						dir: "/kubernetes",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "reset", "--hard"},
0000000000000000000000000000000000000000;;						dir: "/kubernetes",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "current-dir",
0000000000000000000000000000000000000000;;				vol: &v1.Volume{
0000000000000000000000000000000000000000;;					Name: "vol1",
0000000000000000000000000000000000000000;;					VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;						GitRepo: &v1.GitRepoVolumeSource{
0000000000000000000000000000000000000000;;							Repository: gitUrl,
0000000000000000000000000000000000000000;;							Revision:   revision,
0000000000000000000000000000000000000000;;							Directory:  ".",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expecteds: []expectedCommand{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "clone", gitUrl, "."},
0000000000000000000000000000000000000000;;						dir: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "checkout", revision},
0000000000000000000000000000000000000000;;						dir: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						cmd: []string{"git", "reset", "--hard"},
0000000000000000000000000000000000000000;;						dir: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, scenario := range scenarios {
0000000000000000000000000000000000000000;;			allErrs := doTestPlugin(scenario, t)
0000000000000000000000000000000000000000;;			if len(allErrs) == 0 && scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected success for scenario: %s", scenario.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(allErrs) > 0 && !scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected failure for scenario: %s - %+v", scenario.name, allErrs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTestPlugin(scenario struct {
0000000000000000000000000000000000000000;;		name              string
0000000000000000000000000000000000000000;;		vol               *v1.Volume
0000000000000000000000000000000000000000;;		expecteds         []expectedCommand
0000000000000000000000000000000000000000;;		isExpectedFailure bool
0000000000000000000000000000000000000000;;	}, t *testing.T) []error {
0000000000000000000000000000000000000000;;		allErrs := []error{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugMgr := volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;		rootDir, host := newTestHost(t)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(rootDir)
0000000000000000000000000000000000000000;;		plugMgr.InitPlugins(ProbeVolumePlugins(), host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName("kubernetes.io/git-repo")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("Can't find the plugin by name"))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := &v1.Pod{ObjectMeta: metav1.ObjectMeta{UID: types.UID("poduid")}}
0000000000000000000000000000000000000000;;		mounter, err := plug.NewMounter(volume.NewSpecFromVolume(scenario.vol), pod, volume.VolumeOptions{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("Failed to make a new Mounter: %v", err))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mounter == nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("Got a nil Mounter"))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		path := mounter.GetPath()
0000000000000000000000000000000000000000;;		suffix := fmt.Sprintf("pods/poduid/volumes/kubernetes.io~git-repo/%v", scenario.vol.Name)
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(path, suffix) {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("Got unexpected path: %s", path))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test setUp()
0000000000000000000000000000000000000000;;		setUpErrs := doTestSetUp(scenario, mounter)
0000000000000000000000000000000000000000;;		allErrs = append(allErrs, setUpErrs...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := os.Stat(path); err != nil {
0000000000000000000000000000000000000000;;			if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				allErrs = append(allErrs,
0000000000000000000000000000000000000000;;					fmt.Errorf("SetUp() failed, volume path not created: %s", path))
0000000000000000000000000000000000000000;;				return allErrs
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				allErrs = append(allErrs,
0000000000000000000000000000000000000000;;					fmt.Errorf("SetUp() failed: %v", err))
0000000000000000000000000000000000000000;;				return allErrs
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// gitRepo volume should create its own empty wrapper path
0000000000000000000000000000000000000000;;		podWrapperMetadataDir := fmt.Sprintf("%v/pods/poduid/plugins/kubernetes.io~empty-dir/wrapped_%v", rootDir, scenario.vol.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := os.Stat(podWrapperMetadataDir); err != nil {
0000000000000000000000000000000000000000;;			if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				allErrs = append(allErrs,
0000000000000000000000000000000000000000;;					fmt.Errorf("SetUp() failed, empty-dir wrapper path is not created: %s", podWrapperMetadataDir))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				allErrs = append(allErrs,
0000000000000000000000000000000000000000;;					fmt.Errorf("SetUp() failed: %v", err))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unmounter, err := plug.NewUnmounter("vol1", types.UID("poduid"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("Failed to make a new Unmounter: %v", err))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if unmounter == nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("Got a nil Unmounter"))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := unmounter.TearDown(); err != nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("Expected success, got: %v", err))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(path); err == nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("TearDown() failed, volume path still exists: %s", path))
0000000000000000000000000000000000000000;;		} else if !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("SetUp() failed: %v", err))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTestSetUp(scenario struct {
0000000000000000000000000000000000000000;;		name              string
0000000000000000000000000000000000000000;;		vol               *v1.Volume
0000000000000000000000000000000000000000;;		expecteds         []expectedCommand
0000000000000000000000000000000000000000;;		isExpectedFailure bool
0000000000000000000000000000000000000000;;	}, mounter volume.Mounter) []error {
0000000000000000000000000000000000000000;;		expecteds := scenario.expecteds
0000000000000000000000000000000000000000;;		allErrs := []error{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Construct combined outputs from expected commands
0000000000000000000000000000000000000000;;		var fakeOutputs []exec.FakeCombinedOutputAction
0000000000000000000000000000000000000000;;		var fcmd exec.FakeCmd
0000000000000000000000000000000000000000;;		for _, expected := range expecteds {
0000000000000000000000000000000000000000;;			if expected.cmd[1] == "clone" {
0000000000000000000000000000000000000000;;				fakeOutputs = append(fakeOutputs, func() ([]byte, error) {
0000000000000000000000000000000000000000;;					// git clone, it creates new dir/files
0000000000000000000000000000000000000000;;					os.MkdirAll(path.Join(fcmd.Dirs[0], expected.dir), 0750)
0000000000000000000000000000000000000000;;					return []byte{}, nil
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// git checkout || git reset, they create nothing
0000000000000000000000000000000000000000;;				fakeOutputs = append(fakeOutputs, func() ([]byte, error) {
0000000000000000000000000000000000000000;;					return []byte{}, nil
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fcmd = exec.FakeCmd{
0000000000000000000000000000000000000000;;			CombinedOutputScript: fakeOutputs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Construct fake exec outputs from fcmd
0000000000000000000000000000000000000000;;		var fakeAction []exec.FakeCommandAction
0000000000000000000000000000000000000000;;		for i := 0; i < len(expecteds); i++ {
0000000000000000000000000000000000000000;;			fakeAction = append(fakeAction, func(cmd string, args ...string) exec.Cmd {
0000000000000000000000000000000000000000;;				return exec.InitFakeCmd(&fcmd, cmd, args...)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fake := exec.FakeExec{
0000000000000000000000000000000000000000;;			CommandScript: fakeAction,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g := mounter.(*gitRepoVolumeMounter)
0000000000000000000000000000000000000000;;		g.exec = &fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g.SetUp(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if fake.CommandCalls != len(expecteds) {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("unexpected command calls in scenario: expected %d, saw: %d", len(expecteds), fake.CommandCalls))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var expectedCmds [][]string
0000000000000000000000000000000000000000;;		for _, expected := range expecteds {
0000000000000000000000000000000000000000;;			expectedCmds = append(expectedCmds, expected.cmd)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(expectedCmds, fcmd.CombinedOutputLog) {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("unexpected commands: %v, expected: %v", fcmd.CombinedOutputLog, expectedCmds))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var expectedPaths []string
0000000000000000000000000000000000000000;;		for _, expected := range expecteds {
0000000000000000000000000000000000000000;;			expectedPaths = append(expectedPaths, g.GetPath()+expected.dir)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(fcmd.Dirs) != len(expectedPaths) || !reflect.DeepEqual(expectedPaths, fcmd.Dirs) {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs,
0000000000000000000000000000000000000000;;				fmt.Errorf("unexpected directories: %v, expected: %v", fcmd.Dirs, expectedPaths))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
