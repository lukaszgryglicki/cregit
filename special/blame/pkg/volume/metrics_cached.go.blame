0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
11fe0d2921df0a90ecde224aad0db3ceed280ebb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package volume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ MetricsProvider = &cachedMetrics{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cachedMetrics represents a MetricsProvider that wraps another provider and
0000000000000000000000000000000000000000;;	// caches the result.
0000000000000000000000000000000000000000;;	type cachedMetrics struct {
0000000000000000000000000000000000000000;;		wrapped       MetricsProvider
0000000000000000000000000000000000000000;;		resultError   error
0000000000000000000000000000000000000000;;		resultMetrics *Metrics
0000000000000000000000000000000000000000;;		once          cacheOnce
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCachedMetrics creates a new cachedMetrics wrapping another
0000000000000000000000000000000000000000;;	// MetricsProvider and caching the results.
0000000000000000000000000000000000000000;;	func NewCachedMetrics(provider MetricsProvider) MetricsProvider {
0000000000000000000000000000000000000000;;		return &cachedMetrics{wrapped: provider}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMetrics runs the wrapped metrics provider's GetMetrics methd once and
0000000000000000000000000000000000000000;;	// caches the result. Will not cache result if there is an error.
0000000000000000000000000000000000000000;;	// See MetricsProvider.GetMetrics
0000000000000000000000000000000000000000;;	func (md *cachedMetrics) GetMetrics() (*Metrics, error) {
0000000000000000000000000000000000000000;;		md.once.cache(func() error {
0000000000000000000000000000000000000000;;			md.resultMetrics, md.resultError = md.wrapped.GetMetrics()
0000000000000000000000000000000000000000;;			return md.resultError
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return md.resultMetrics, md.resultError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copied from sync.Once but we don't want to cache the results if there is an
0000000000000000000000000000000000000000;;	// error
0000000000000000000000000000000000000000;;	type cacheOnce struct {
0000000000000000000000000000000000000000;;		m    sync.Mutex
0000000000000000000000000000000000000000;;		done uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copied from sync.Once but we don't want to cache the results if there is an
0000000000000000000000000000000000000000;;	// error
0000000000000000000000000000000000000000;;	func (o *cacheOnce) cache(f func() error) {
0000000000000000000000000000000000000000;;		if atomic.LoadUint32(&o.done) == 1 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Slow-path.
0000000000000000000000000000000000000000;;		o.m.Lock()
0000000000000000000000000000000000000000;;		defer o.m.Unlock()
0000000000000000000000000000000000000000;;		if o.done == 0 {
0000000000000000000000000000000000000000;;			err := f()
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				atomic.StoreUint32(&o.done, 1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
