0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
692f0ad86b0d9ce3e1092ddf096599c79c8c0c20;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package volume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ErrCodeNotSupported code for NotSupported Errors.
0000000000000000000000000000000000000000;;		ErrCodeNotSupported int = iota + 1
0000000000000000000000000000000000000000;;		ErrCodeNoPathDefined
0000000000000000000000000000000000000000;;		ErrCodeFsInfoFailed
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNotSupportedError creates a new MetricsError with code NotSupported.
0000000000000000000000000000000000000000;;	func NewNotSupportedError() *MetricsError {
0000000000000000000000000000000000000000;;		return &MetricsError{
0000000000000000000000000000000000000000;;			Code: ErrCodeNotSupported,
0000000000000000000000000000000000000000;;			Msg:  "metrics are not supported for MetricsNil Volumes",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNoPathDefined creates a new MetricsError with code NoPathDefined.
0000000000000000000000000000000000000000;;	func NewNoPathDefinedError() *MetricsError {
0000000000000000000000000000000000000000;;		return &MetricsError{
0000000000000000000000000000000000000000;;			Code: ErrCodeNoPathDefined,
0000000000000000000000000000000000000000;;			Msg:  "no path defined for disk usage metrics.",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFsInfoFailedError creates a new MetricsError with code FsInfoFailed.
0000000000000000000000000000000000000000;;	func NewFsInfoFailedError(err error) *MetricsError {
0000000000000000000000000000000000000000;;		return &MetricsError{
0000000000000000000000000000000000000000;;			Code: ErrCodeFsInfoFailed,
0000000000000000000000000000000000000000;;			Msg:  fmt.Sprintf("Failed to get FsInfo due to error %v", err),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricsError to distinguish different Metrics Errors.
0000000000000000000000000000000000000000;;	type MetricsError struct {
0000000000000000000000000000000000000000;;		Code int
0000000000000000000000000000000000000000;;		Msg  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *MetricsError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s", e.Msg)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNotSupported returns true if and only if err is "key" not found error.
0000000000000000000000000000000000000000;;	func IsNotSupported(err error) bool {
0000000000000000000000000000000000000000;;		return isErrCode(err, ErrCodeNotSupported)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isErrCode(err error, code int) bool {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, ok := err.(*MetricsError); ok {
0000000000000000000000000000000000000000;;			return e.Code == code
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
