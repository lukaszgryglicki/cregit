0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
2382db0e62595fdf7843e8a357e546360a02fb25;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure_file
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider/providers/azure"
0000000000000000000000000000000000000000;;		utilstrings "k8s.io/kubernetes/pkg/util/strings"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util/volumehelper"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ volume.DeletableVolumePlugin = &azureFilePlugin{}
0000000000000000000000000000000000000000;;	var _ volume.ProvisionableVolumePlugin = &azureFilePlugin{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Abstract interface to file share operations.
0000000000000000000000000000000000000000;;	// azure cloud provider should implement it
0000000000000000000000000000000000000000;;	type azureCloudProvider interface {
0000000000000000000000000000000000000000;;		// create a file share
0000000000000000000000000000000000000000;;		CreateFileShare(name, storageAccount, storageType, location string, requestGB int) (string, string, error)
0000000000000000000000000000000000000000;;		// delete a file share
0000000000000000000000000000000000000000;;		DeleteFileShare(accountName, key, name string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type azureFileDeleter struct {
0000000000000000000000000000000000000000;;		*azureFile
0000000000000000000000000000000000000000;;		accountName, accountKey, shareName string
0000000000000000000000000000000000000000;;		azureProvider                      azureCloudProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (plugin *azureFilePlugin) NewDeleter(spec *volume.Spec) (volume.Deleter, error) {
0000000000000000000000000000000000000000;;		azure, err := getAzureCloudProvider(plugin.host.GetCloudProvider())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("failed to get azure provider")
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return plugin.newDeleterInternal(spec, &azureSvc{}, azure)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (plugin *azureFilePlugin) newDeleterInternal(spec *volume.Spec, util azureUtil, azure azureCloudProvider) (volume.Deleter, error) {
0000000000000000000000000000000000000000;;		if spec.PersistentVolume != nil && spec.PersistentVolume.Spec.AzureFile == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("invalid PV spec")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pvSpec := spec.PersistentVolume
0000000000000000000000000000000000000000;;		if pvSpec.Spec.ClaimRef.Namespace == "" {
0000000000000000000000000000000000000000;;			glog.Errorf("namespace cannot be nil")
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("invalid PV spec: nil namespace")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nameSpace := pvSpec.Spec.ClaimRef.Namespace
0000000000000000000000000000000000000000;;		secretName := pvSpec.Spec.AzureFile.SecretName
0000000000000000000000000000000000000000;;		shareName := pvSpec.Spec.AzureFile.ShareName
0000000000000000000000000000000000000000;;		if accountName, accountKey, err := util.GetAzureCredentials(plugin.host, nameSpace, secretName); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return &azureFileDeleter{
0000000000000000000000000000000000000000;;				azureFile: &azureFile{
0000000000000000000000000000000000000000;;					volName: spec.Name(),
0000000000000000000000000000000000000000;;					plugin:  plugin,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				shareName:     shareName,
0000000000000000000000000000000000000000;;				accountName:   accountName,
0000000000000000000000000000000000000000;;				accountKey:    accountKey,
0000000000000000000000000000000000000000;;				azureProvider: azure,
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (plugin *azureFilePlugin) NewProvisioner(options volume.VolumeOptions) (volume.Provisioner, error) {
0000000000000000000000000000000000000000;;		azure, err := getAzureCloudProvider(plugin.host.GetCloudProvider())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("failed to get azure provider")
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(options.PVC.Spec.AccessModes) == 0 {
0000000000000000000000000000000000000000;;			options.PVC.Spec.AccessModes = plugin.GetAccessModes()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return plugin.newProvisionerInternal(options, azure)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (plugin *azureFilePlugin) newProvisionerInternal(options volume.VolumeOptions, azure azureCloudProvider) (volume.Provisioner, error) {
0000000000000000000000000000000000000000;;		return &azureFileProvisioner{
0000000000000000000000000000000000000000;;			azureFile: &azureFile{
0000000000000000000000000000000000000000;;				plugin: plugin,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			azureProvider: azure,
0000000000000000000000000000000000000000;;			util:          &azureSvc{},
0000000000000000000000000000000000000000;;			options:       options,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ volume.Deleter = &azureFileDeleter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *azureFileDeleter) GetPath() string {
0000000000000000000000000000000000000000;;		name := azureFilePluginName
0000000000000000000000000000000000000000;;		return f.plugin.host.GetPodVolumeDir(f.podUID, utilstrings.EscapeQualifiedNameForDisk(name), f.volName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *azureFileDeleter) Delete() error {
0000000000000000000000000000000000000000;;		glog.V(4).Infof("deleting volume %s", f.shareName)
0000000000000000000000000000000000000000;;		return f.azureProvider.DeleteFileShare(f.accountName, f.accountKey, f.shareName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type azureFileProvisioner struct {
0000000000000000000000000000000000000000;;		*azureFile
0000000000000000000000000000000000000000;;		azureProvider azureCloudProvider
0000000000000000000000000000000000000000;;		util          azureUtil
0000000000000000000000000000000000000000;;		options       volume.VolumeOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ volume.Provisioner = &azureFileProvisioner{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *azureFileProvisioner) Provision() (*v1.PersistentVolume, error) {
0000000000000000000000000000000000000000;;		if !volume.AccessModesContainedInAll(a.plugin.GetAccessModes(), a.options.PVC.Spec.AccessModes) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("invalid AccessModes %v: only AccessModes %v are supported", a.options.PVC.Spec.AccessModes, a.plugin.GetAccessModes())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var sku, location, account string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name := volume.GenerateVolumeName(a.options.ClusterName, a.options.PVName, 75)
0000000000000000000000000000000000000000;;		capacity := a.options.PVC.Spec.Resources.Requests[v1.ResourceName(v1.ResourceStorage)]
0000000000000000000000000000000000000000;;		requestBytes := capacity.Value()
0000000000000000000000000000000000000000;;		requestGB := int(volume.RoundUpSize(requestBytes, 1024*1024*1024))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Apply ProvisionerParameters (case-insensitive). We leave validation of
0000000000000000000000000000000000000000;;		// the values to the cloud provider.
0000000000000000000000000000000000000000;;		for k, v := range a.options.Parameters {
0000000000000000000000000000000000000000;;			switch strings.ToLower(k) {
0000000000000000000000000000000000000000;;			case "skuname":
0000000000000000000000000000000000000000;;				sku = v
0000000000000000000000000000000000000000;;			case "location":
0000000000000000000000000000000000000000;;				location = v
0000000000000000000000000000000000000000;;			case "storageaccount":
0000000000000000000000000000000000000000;;				account = v
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid option %q for volume plugin %s", k, a.plugin.GetPluginName())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: implement c.options.ProvisionerSelector parsing
0000000000000000000000000000000000000000;;		if a.options.PVC.Spec.Selector != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("claim.Spec.Selector is not supported for dynamic provisioning on Azure file")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		account, key, err := a.azureProvider.CreateFileShare(name, account, sku, location, requestGB)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// create a secret for storage account and key
0000000000000000000000000000000000000000;;		secretName, err := a.util.SetAzureCredentials(a.plugin.host, a.options.PVC.Namespace, account, key)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// create PV
0000000000000000000000000000000000000000;;		pv := &v1.PersistentVolume{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   a.options.PVName,
0000000000000000000000000000000000000000;;				Labels: map[string]string{},
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					volumehelper.VolumeDynamicallyCreatedByKey: "azure-file-dynamic-provisioner",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;				PersistentVolumeReclaimPolicy: a.options.PersistentVolumeReclaimPolicy,
0000000000000000000000000000000000000000;;				AccessModes:                   a.options.PVC.Spec.AccessModes,
0000000000000000000000000000000000000000;;				Capacity: v1.ResourceList{
0000000000000000000000000000000000000000;;					v1.ResourceName(v1.ResourceStorage): resource.MustParse(fmt.Sprintf("%dGi", requestGB)),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				PersistentVolumeSource: v1.PersistentVolumeSource{
0000000000000000000000000000000000000000;;					AzureFile: &v1.AzureFileVolumeSource{
0000000000000000000000000000000000000000;;						SecretName: secretName,
0000000000000000000000000000000000000000;;						ShareName:  name,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pv, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Return cloud provider
0000000000000000000000000000000000000000;;	func getAzureCloudProvider(cloudProvider cloudprovider.Interface) (azureCloudProvider, error) {
0000000000000000000000000000000000000000;;		azureCloudProvider, ok := cloudProvider.(*azure.Cloud)
0000000000000000000000000000000000000000;;		if !ok || azureCloudProvider == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Failed to get Azure Cloud Provider. GetCloudProvider returned %v instead", cloudProvider)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return azureCloudProvider, nil
0000000000000000000000000000000000000000;;	}
