0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3ea70e73c66231fc26d77a4f8b87d9e25f72265f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package azure_file
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Abstract interface to azure file operations.
0000000000000000000000000000000000000000;;	type azureUtil interface {
0000000000000000000000000000000000000000;;		GetAzureCredentials(host volume.VolumeHost, nameSpace, secretName string) (string, string, error)
0000000000000000000000000000000000000000;;		SetAzureCredentials(host volume.VolumeHost, nameSpace, accountName, accountKey string) (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type azureSvc struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *azureSvc) GetAzureCredentials(host volume.VolumeHost, nameSpace, secretName string) (string, string, error) {
0000000000000000000000000000000000000000;;		var accountKey, accountName string
0000000000000000000000000000000000000000;;		kubeClient := host.GetKubeClient()
0000000000000000000000000000000000000000;;		if kubeClient == nil {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("Cannot get kube client")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keys, err := kubeClient.Core().Secrets(nameSpace).Get(secretName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("Couldn't get secret %v/%v", nameSpace, secretName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for name, data := range keys.Data {
0000000000000000000000000000000000000000;;			if name == "azurestorageaccountname" {
0000000000000000000000000000000000000000;;				accountName = string(data)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if name == "azurestorageaccountkey" {
0000000000000000000000000000000000000000;;				accountKey = string(data)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if accountName == "" || accountKey == "" {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("Invalid %v/%v, couldn't extract azurestorageaccountname or azurestorageaccountkey", nameSpace, secretName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accountName, accountKey, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *azureSvc) SetAzureCredentials(host volume.VolumeHost, nameSpace, accountName, accountKey string) (string, error) {
0000000000000000000000000000000000000000;;		kubeClient := host.GetKubeClient()
0000000000000000000000000000000000000000;;		if kubeClient == nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Cannot get kube client")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		secretName := "azure-storage-account-" + accountName + "-secret"
0000000000000000000000000000000000000000;;		secret := &v1.Secret{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: nameSpace,
0000000000000000000000000000000000000000;;				Name:      secretName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string][]byte{
0000000000000000000000000000000000000000;;				"azurestorageaccountname": []byte(accountName),
0000000000000000000000000000000000000000;;				"azurestorageaccountkey":  []byte(accountKey),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Type: "Opaque",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err := kubeClient.Core().Secrets(nameSpace).Create(secret)
0000000000000000000000000000000000000000;;		if errors.IsAlreadyExists(err) {
0000000000000000000000000000000000000000;;			err = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Couldn't create secret %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return secretName, err
0000000000000000000000000000000000000000;;	}
