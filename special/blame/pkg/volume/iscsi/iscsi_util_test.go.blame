0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
68e342c758b61f029d703c2190cf1b6d382ba6a4;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package iscsi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetDevicePrefixRefCount(t *testing.T) {
0000000000000000000000000000000000000000;;		fm := &mount.FakeMounter{
0000000000000000000000000000000000000000;;			MountPoints: []mount.MountPoint{
0000000000000000000000000000000000000000;;				{Device: "/dev/sdb",
0000000000000000000000000000000000000000;;					Path: "/127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-0"},
0000000000000000000000000000000000000000;;				{Device: "/dev/sdb",
0000000000000000000000000000000000000000;;					Path: "/127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-1"},
0000000000000000000000000000000000000000;;				{Device: "/dev/sdb",
0000000000000000000000000000000000000000;;					Path: "/127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-2"},
0000000000000000000000000000000000000000;;				{Device: "/dev/sdb",
0000000000000000000000000000000000000000;;					Path: "/127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-3"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			devicePrefix string
0000000000000000000000000000000000000000;;			expectedRefs int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"/127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00",
0000000000000000000000000000000000000000;;				4,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			if refs, err := getDevicePrefixRefCount(fm, test.devicePrefix); err != nil || test.expectedRefs != refs {
0000000000000000000000000000000000000000;;				t.Errorf("%d. GetDevicePrefixRefCount(%s) = %d, %v; expected %d, nil", i, test.devicePrefix, refs, err, test.expectedRefs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractDeviceAndPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		devicePath := "127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00"
0000000000000000000000000000000000000000;;		mountPrefix := "/var/lib/kubelet/plugins/kubernetes.io/iscsi/iface-default/" + devicePath
0000000000000000000000000000000000000000;;		lun := "-lun-0"
0000000000000000000000000000000000000000;;		device, prefix, err := extractDeviceAndPrefix(mountPrefix + lun)
0000000000000000000000000000000000000000;;		if err != nil || device != (devicePath+lun) || prefix != mountPrefix {
0000000000000000000000000000000000000000;;			t.Errorf("extractDeviceAndPrefix: expected %s and %s, got %v %s and %s", devicePath+lun, mountPrefix, err, device, prefix)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractIface(t *testing.T) {
0000000000000000000000000000000000000000;;		ifaceName := "default"
0000000000000000000000000000000000000000;;		devicePath := "127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-0"
0000000000000000000000000000000000000000;;		iface, found := extractIface("/var/lib/kubelet/plugins/kubernetes.io/iscsi/iface-" + ifaceName + "/" + devicePath)
0000000000000000000000000000000000000000;;		if !found || iface != ifaceName {
0000000000000000000000000000000000000000;;			t.Errorf("extractIface: expected %s and %t, got %s and %t", ifaceName, true, iface, found)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		iface, found = extractIface("/var/lib/kubelet/plugins/kubernetes.io/iscsi/" + devicePath)
0000000000000000000000000000000000000000;;		if found || iface != "" {
0000000000000000000000000000000000000000;;			t.Errorf("extractIface: expected %s and %t, got %s and %t", "", false, iface, found)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractPortalAndIqn(t *testing.T) {
0000000000000000000000000000000000000000;;		devicePath := "127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-0"
0000000000000000000000000000000000000000;;		portal, iqn, err := extractPortalAndIqn(devicePath)
0000000000000000000000000000000000000000;;		if err != nil || portal != "127.0.0.1:3260" || iqn != "iqn.2014-12.com.example:test.tgt00" {
0000000000000000000000000000000000000000;;			t.Errorf("extractPortalAndIqn: got %v %s %s", err, portal, iqn)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		devicePath = "127.0.0.1:3260-eui.02004567A425678D-lun-0"
0000000000000000000000000000000000000000;;		portal, iqn, err = extractPortalAndIqn(devicePath)
0000000000000000000000000000000000000000;;		if err != nil || portal != "127.0.0.1:3260" || iqn != "eui.02004567A425678D" {
0000000000000000000000000000000000000000;;			t.Errorf("extractPortalAndIqn: got %v %s %s", err, portal, iqn)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRemoveDuplicate(t *testing.T) {
0000000000000000000000000000000000000000;;		dupPortals := []string{"127.0.0.1:3260", "127.0.0.1:3260", "127.0.0.100:3260"}
0000000000000000000000000000000000000000;;		portals := removeDuplicate(dupPortals)
0000000000000000000000000000000000000000;;		want := []string{"127.0.0.1:3260", "127.0.0.100:3260"}
0000000000000000000000000000000000000000;;		if reflect.DeepEqual(portals, want) == false {
0000000000000000000000000000000000000000;;			t.Errorf("removeDuplicate: want: %s, got: %s", want, portals)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeOsStat(devicePath string) (fi os.FileInfo, err error) {
0000000000000000000000000000000000000000;;		var cmd os.FileInfo
0000000000000000000000000000000000000000;;		return cmd, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeFilepathGlob(devicePath string) (globs []string, err error) {
0000000000000000000000000000000000000000;;		return []string{devicePath}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeFilepathGlob2(devicePath string) (globs []string, err error) {
0000000000000000000000000000000000000000;;		return []string{
0000000000000000000000000000000000000000;;			"/dev/disk/by-path/pci-0000:00:00.0-ip-127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-0",
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractTransportname(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeIscsiadmOutput := []string{
0000000000000000000000000000000000000000;;			"# BEGIN RECORD 2.0-873\n" +
0000000000000000000000000000000000000000;;				"iface.iscsi_ifacename = default\n" +
0000000000000000000000000000000000000000;;				"iface.transport_name = tcp\n" +
0000000000000000000000000000000000000000;;				"iface.initiatorname = <empty>\n" +
0000000000000000000000000000000000000000;;				"# END RECORD",
0000000000000000000000000000000000000000;;			"# BEGIN RECORD 2.0-873\n" +
0000000000000000000000000000000000000000;;				"iface.iscsi_ifacename = default\n" +
0000000000000000000000000000000000000000;;				"iface.transport_name = cxgb4i\n" +
0000000000000000000000000000000000000000;;				"iface.initiatorname = <empty>\n" +
0000000000000000000000000000000000000000;;				"# END RECORD",
0000000000000000000000000000000000000000;;			"# BEGIN RECORD 2.0-873\n" +
0000000000000000000000000000000000000000;;				"iface.iscsi_ifacename = default\n" +
0000000000000000000000000000000000000000;;				"iface.transport_name = <empty>\n" +
0000000000000000000000000000000000000000;;				"iface.initiatorname = <empty>\n" +
0000000000000000000000000000000000000000;;				"# END RECORD",
0000000000000000000000000000000000000000;;			"# BEGIN RECORD 2.0-873\n" +
0000000000000000000000000000000000000000;;				"iface.iscsi_ifacename = default\n" +
0000000000000000000000000000000000000000;;				"iface.initiatorname = <empty>\n" +
0000000000000000000000000000000000000000;;				"# END RECORD"}
0000000000000000000000000000000000000000;;		transportName := extractTransportname(fakeIscsiadmOutput[0])
0000000000000000000000000000000000000000;;		if transportName != "tcp" {
0000000000000000000000000000000000000000;;			t.Errorf("extractTransportname: Could not extract correct iface.transport_name 'tcp', got %s", transportName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		transportName = extractTransportname(fakeIscsiadmOutput[1])
0000000000000000000000000000000000000000;;		if transportName != "cxgb4i" {
0000000000000000000000000000000000000000;;			t.Errorf("extractTransportname: Could not extract correct iface.transport_name 'cxgb4i', got %s", transportName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		transportName = extractTransportname(fakeIscsiadmOutput[2])
0000000000000000000000000000000000000000;;		if transportName != "tcp" {
0000000000000000000000000000000000000000;;			t.Errorf("extractTransportname: Could not extract correct iface.transport_name 'tcp', got %s", transportName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		transportName = extractTransportname(fakeIscsiadmOutput[3])
0000000000000000000000000000000000000000;;		if transportName != "" {
0000000000000000000000000000000000000000;;			t.Errorf("extractTransportname: Could not extract correct iface.transport_name '', got %s", transportName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWaitForPathToExist(t *testing.T) {
0000000000000000000000000000000000000000;;		devicePath := []string{"/dev/disk/by-path/ip-127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-0",
0000000000000000000000000000000000000000;;			"/dev/disk/by-path/pci-*-ip-127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-0"}
0000000000000000000000000000000000000000;;		fpath := "/dev/disk/by-path/pci-0000:00:00.0-ip-127.0.0.1:3260-iqn.2014-12.com.example:test.tgt00-lun-0"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exist := waitForPathToExistInternal(&devicePath[0], 1, "tcp", fakeOsStat, filepath.Glob)
0000000000000000000000000000000000000000;;		if exist == false {
0000000000000000000000000000000000000000;;			t.Errorf("waitForPathToExist: could not find path %s", devicePath[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		exist = waitForPathToExistInternal(&devicePath[0], 1, "fake_iface", fakeOsStat, filepath.Glob)
0000000000000000000000000000000000000000;;		if exist != false {
0000000000000000000000000000000000000000;;			t.Errorf("waitForPathToExist: wrong code path called for %s", devicePath[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exist = waitForPathToExistInternal(&devicePath[1], 1, "fake_iface", os.Stat, fakeFilepathGlob)
0000000000000000000000000000000000000000;;		if exist == false {
0000000000000000000000000000000000000000;;			t.Errorf("waitForPathToExist: could not find path %s", devicePath[1])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		exist = waitForPathToExistInternal(&devicePath[1], 1, "tcp", os.Stat, fakeFilepathGlob)
0000000000000000000000000000000000000000;;		if exist != false {
0000000000000000000000000000000000000000;;			t.Errorf("waitForPathToExist: wrong code path called for %s", devicePath[1])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exist = waitForPathToExistInternal(&devicePath[1], 1, "fake_iface", os.Stat, fakeFilepathGlob2)
0000000000000000000000000000000000000000;;		if devicePath[1] != fpath {
0000000000000000000000000000000000000000;;			t.Errorf("waitForPathToExist: wrong code path called for %s", devicePath[1])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
