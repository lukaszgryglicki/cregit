0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d6825686a3614f2a83a58338ae1cabf7e3bbea85;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package photon_pd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider/providers/photon"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumeutil "k8s.io/kubernetes/pkg/volume/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxRetries         = 10
0000000000000000000000000000000000000000;;		checkSleepDuration = time.Second
0000000000000000000000000000000000000000;;		diskByIDPath       = "/dev/disk/by-id/"
0000000000000000000000000000000000000000;;		diskPhotonPrefix   = "wwn-0x"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var ErrProbeVolume = errors.New("Error scanning attached volumes")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// volNameToDeviceName is a mapping between spec.Name from detacher
0000000000000000000000000000000000000000;;	// and the device name inside scsi path. Once pvscsi controller is
0000000000000000000000000000000000000000;;	// supported, this won't be needed.
0000000000000000000000000000000000000000;;	var volNameToDeviceName = make(map[string]string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PhotonDiskUtil struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func removeFromScsiSubsystem(volName string) {
0000000000000000000000000000000000000000;;		// TODO: if using pvscsi controller, this won't be needed
0000000000000000000000000000000000000000;;		deviceName := volNameToDeviceName[volName]
0000000000000000000000000000000000000000;;		fileName := "/sys/block/" + deviceName + "/device/delete"
0000000000000000000000000000000000000000;;		data := []byte("1")
0000000000000000000000000000000000000000;;		ioutil.WriteFile(fileName, data, 0666)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func scsiHostScan() {
0000000000000000000000000000000000000000;;		// TODO: if using pvscsi controller, this won't be needed
0000000000000000000000000000000000000000;;		scsi_path := "/sys/class/scsi_host/"
0000000000000000000000000000000000000000;;		if dirs, err := ioutil.ReadDir(scsi_path); err == nil {
0000000000000000000000000000000000000000;;			for _, f := range dirs {
0000000000000000000000000000000000000000;;				name := scsi_path + f.Name() + "/scan"
0000000000000000000000000000000000000000;;				data := []byte("- - -")
0000000000000000000000000000000000000000;;				ioutil.WriteFile(name, data, 0666)
0000000000000000000000000000000000000000;;				glog.Errorf("scsiHostScan scan for %s", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyDevicePath(path string) (string, error) {
0000000000000000000000000000000000000000;;		if pathExists, err := volumeutil.PathExists(path); err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Error checking if path exists: %v", err)
0000000000000000000000000000000000000000;;		} else if pathExists {
0000000000000000000000000000000000000000;;			return path, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Infof("verifyDevicePath: path not exists yet")
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVolume creates a PhotonController persistent disk.
0000000000000000000000000000000000000000;;	func (util *PhotonDiskUtil) CreateVolume(p *photonPersistentDiskProvisioner) (pdID string, capacityGB int, fstype string, err error) {
0000000000000000000000000000000000000000;;		cloud, err := getCloudProvider(p.plugin.host.GetCloudProvider())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Photon Controller Util: CreateVolume failed to get cloud provider. Error [%v]", err)
0000000000000000000000000000000000000000;;			return "", 0, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capacity := p.options.PVC.Spec.Resources.Requests[v1.ResourceName(v1.ResourceStorage)]
0000000000000000000000000000000000000000;;		volSizeBytes := capacity.Value()
0000000000000000000000000000000000000000;;		// PhotonController works with GB, convert to GB with rounding up
0000000000000000000000000000000000000000;;		volSizeGB := int(volume.RoundUpSize(volSizeBytes, 1024*1024*1024))
0000000000000000000000000000000000000000;;		name := volume.GenerateVolumeName(p.options.ClusterName, p.options.PVName, 255)
0000000000000000000000000000000000000000;;		volumeOptions := &photon.VolumeOptions{
0000000000000000000000000000000000000000;;			CapacityGB: volSizeGB,
0000000000000000000000000000000000000000;;			Tags:       *p.options.CloudTags,
0000000000000000000000000000000000000000;;			Name:       name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for parameter, value := range p.options.Parameters {
0000000000000000000000000000000000000000;;			switch strings.ToLower(parameter) {
0000000000000000000000000000000000000000;;			case "flavor":
0000000000000000000000000000000000000000;;				volumeOptions.Flavor = value
0000000000000000000000000000000000000000;;			case "fstype":
0000000000000000000000000000000000000000;;				fstype = value
0000000000000000000000000000000000000000;;				glog.V(4).Infof("Photon Controller Util: Setting fstype to %s", fstype)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				glog.Errorf("Photon Controller Util: invalid option %s for volume plugin %s.", parameter, p.plugin.GetPluginName())
0000000000000000000000000000000000000000;;				return "", 0, "", fmt.Errorf("Photon Controller Util: invalid option %s for volume plugin %s.", parameter, p.plugin.GetPluginName())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pdID, err = cloud.CreateDisk(volumeOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Photon Controller Util: failed to CreateDisk. Error [%v]", err)
0000000000000000000000000000000000000000;;			return "", 0, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Successfully created Photon Controller persistent disk %s", name)
0000000000000000000000000000000000000000;;		return pdID, volSizeGB, "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVolume deletes a vSphere volume.
0000000000000000000000000000000000000000;;	func (util *PhotonDiskUtil) DeleteVolume(pd *photonPersistentDiskDeleter) error {
0000000000000000000000000000000000000000;;		cloud, err := getCloudProvider(pd.plugin.host.GetCloudProvider())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Photon Controller Util: DeleteVolume failed to get cloud provider. Error [%v]", err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = cloud.DeleteDisk(pd.pdID); err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Photon Controller Util: failed to DeleteDisk for pdID %s. Error [%v]", pd.pdID, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Successfully deleted PhotonController persistent disk %s", pd.pdID)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getCloudProvider(cloud cloudprovider.Interface) (*photon.PCCloud, error) {
0000000000000000000000000000000000000000;;		if cloud == nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Photon Controller Util: Cloud provider not initialized properly")
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Photon Controller Util: Cloud provider not initialized properly")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pcc := cloud.(*photon.PCCloud)
0000000000000000000000000000000000000000;;		if pcc == nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Invalid cloud provider: expected Photon Controller")
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Invalid cloud provider: expected Photon Controller")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pcc, nil
0000000000000000000000000000000000000000;;	}
