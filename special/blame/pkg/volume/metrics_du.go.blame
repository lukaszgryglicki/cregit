0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
550df90b0dfa6edde5ce972d9c9d21d156911343;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package volume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ MetricsProvider = &metricsDu{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// metricsDu represents a MetricsProvider that calculates the used and
0000000000000000000000000000000000000000;;	// available Volume space by executing the "du" command and gathering
0000000000000000000000000000000000000000;;	// filesystem info for the Volume path.
0000000000000000000000000000000000000000;;	type metricsDu struct {
0000000000000000000000000000000000000000;;		// the directory path the volume is mounted to.
0000000000000000000000000000000000000000;;		path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMetricsDu creates a new metricsDu with the Volume path.
0000000000000000000000000000000000000000;;	func NewMetricsDu(path string) MetricsProvider {
0000000000000000000000000000000000000000;;		return &metricsDu{path}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMetrics calculates the volume usage and device free space by executing "du"
0000000000000000000000000000000000000000;;	// and gathering filesystem info for the Volume path.
0000000000000000000000000000000000000000;;	// See MetricsProvider.GetMetrics
0000000000000000000000000000000000000000;;	func (md *metricsDu) GetMetrics() (*Metrics, error) {
0000000000000000000000000000000000000000;;		metrics := &Metrics{Time: metav1.Now()}
0000000000000000000000000000000000000000;;		if md.path == "" {
0000000000000000000000000000000000000000;;			return metrics, NewNoPathDefinedError()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := md.runDu(metrics)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return metrics, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = md.runFind(metrics)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return metrics, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = md.getFsInfo(metrics)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return metrics, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return metrics, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// runDu executes the "du" command and writes the results to metrics.Used
0000000000000000000000000000000000000000;;	func (md *metricsDu) runDu(metrics *Metrics) error {
0000000000000000000000000000000000000000;;		used, err := util.Du(md.path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		metrics.Used = used
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// runFind executes the "find" command and writes the results to metrics.InodesUsed
0000000000000000000000000000000000000000;;	func (md *metricsDu) runFind(metrics *Metrics) error {
0000000000000000000000000000000000000000;;		inodesUsed, err := util.Find(md.path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		metrics.InodesUsed = resource.NewQuantity(inodesUsed, resource.BinarySI)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getFsInfo writes metrics.Capacity and metrics.Available from the filesystem
0000000000000000000000000000000000000000;;	// info
0000000000000000000000000000000000000000;;	func (md *metricsDu) getFsInfo(metrics *Metrics) error {
0000000000000000000000000000000000000000;;		available, capacity, _, inodes, inodesFree, _, err := util.FsInfo(md.path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return NewFsInfoFailedError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		metrics.Available = resource.NewQuantity(available, resource.BinarySI)
0000000000000000000000000000000000000000;;		metrics.Capacity = resource.NewQuantity(capacity, resource.BinarySI)
0000000000000000000000000000000000000000;;		metrics.Inodes = resource.NewQuantity(inodes, resource.BinarySI)
0000000000000000000000000000000000000000;;		metrics.InodesFree = resource.NewQuantity(inodesFree, resource.BinarySI)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
