0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storageos
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storageostypes "github.com/storageos/go-api/types"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var testApiSecretName = "storageos-api"
0000000000000000000000000000000000000000;;	var testVolName = "storageos-test-vol"
0000000000000000000000000000000000000000;;	var testPVName = "storageos-test-pv"
0000000000000000000000000000000000000000;;	var testNamespace = "storageos-test-namespace"
0000000000000000000000000000000000000000;;	var testSize = 1
0000000000000000000000000000000000000000;;	var testDesc = "testdescription"
0000000000000000000000000000000000000000;;	var testPool = "testpool"
0000000000000000000000000000000000000000;;	var testFSType = "ext2"
0000000000000000000000000000000000000000;;	var testVolUUID = "01c43d34-89f8-83d3-422b-43536a0f25e6"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeConfig struct {
0000000000000000000000000000000000000000;;		apiAddr    string
0000000000000000000000000000000000000000;;		apiUser    string
0000000000000000000000000000000000000000;;		apiPass    string
0000000000000000000000000000000000000000;;		apiVersion string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c fakeConfig) GetAPIConfig() *storageosAPIConfig {
0000000000000000000000000000000000000000;;		return &storageosAPIConfig{
0000000000000000000000000000000000000000;;			apiAddr:    "http://5.6.7.8:9999",
0000000000000000000000000000000000000000;;			apiUser:    "abc",
0000000000000000000000000000000000000000;;			apiPass:    "123",
0000000000000000000000000000000000000000;;			apiVersion: "10",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestClient(t *testing.T) {
0000000000000000000000000000000000000000;;		util := storageosUtil{}
0000000000000000000000000000000000000000;;		cfg := fakeConfig{}
0000000000000000000000000000000000000000;;		err := util.NewAPI(cfg.GetAPIConfig())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error getting api config: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if util.api == nil {
0000000000000000000000000000000000000000;;			t.Errorf("client() unexpectedly returned nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeAPI struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f fakeAPI) Volume(namespace string, ref string) (*storageostypes.Volume, error) {
0000000000000000000000000000000000000000;;		if namespace == testNamespace && ref == testVolName {
0000000000000000000000000000000000000000;;			return &storageostypes.Volume{
0000000000000000000000000000000000000000;;				ID:        "01c43d34-89f8-83d3-422b-43536a0f25e6",
0000000000000000000000000000000000000000;;				Name:      ref,
0000000000000000000000000000000000000000;;				Pool:      "default",
0000000000000000000000000000000000000000;;				Namespace: namespace,
0000000000000000000000000000000000000000;;				Size:      5,
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("not found")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f fakeAPI) VolumeCreate(opts storageostypes.VolumeCreateOptions) (*storageostypes.Volume, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Append a label from the api
0000000000000000000000000000000000000000;;		labels := opts.Labels
0000000000000000000000000000000000000000;;		labels["labelfromapi"] = "apilabel"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &storageostypes.Volume{
0000000000000000000000000000000000000000;;			ID:          testVolUUID,
0000000000000000000000000000000000000000;;			Name:        opts.Name,
0000000000000000000000000000000000000000;;			Namespace:   opts.Namespace,
0000000000000000000000000000000000000000;;			Description: opts.Description,
0000000000000000000000000000000000000000;;			Pool:        opts.Pool,
0000000000000000000000000000000000000000;;			Size:        opts.Size,
0000000000000000000000000000000000000000;;			FSType:      opts.FSType,
0000000000000000000000000000000000000000;;			Labels:      labels,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f fakeAPI) VolumeMount(opts storageostypes.VolumeMountOptions) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f fakeAPI) VolumeUnmount(opts storageostypes.VolumeUnmountOptions) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f fakeAPI) VolumeDelete(opts storageostypes.DeleteOptions) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateVolume(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("storageos_test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't make a temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;		plugMgr := volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;		plugMgr.InitPlugins(ProbeVolumePlugins(), volumetest.NewFakeVolumeHost(tmpDir, nil, nil))
0000000000000000000000000000000000000000;;		plug, _ := plugMgr.FindPluginByName("kubernetes.io/storageos")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Use real util with stubbed api
0000000000000000000000000000000000000000;;		util := &storageosUtil{}
0000000000000000000000000000000000000000;;		util.api = fakeAPI{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels := map[string]string{
0000000000000000000000000000000000000000;;			"labelA": "valueA",
0000000000000000000000000000000000000000;;			"labelB": "valueB",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		options := volume.VolumeOptions{
0000000000000000000000000000000000000000;;			PVName: testPVName,
0000000000000000000000000000000000000000;;			PVC:    volumetest.CreateTestPVC(fmt.Sprintf("%dGi", testSize), []v1.PersistentVolumeAccessMode{v1.ReadWriteOnce}),
0000000000000000000000000000000000000000;;			PersistentVolumeReclaimPolicy: v1.PersistentVolumeReclaimDelete,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		provisioner := &storageosProvisioner{
0000000000000000000000000000000000000000;;			storageosMounter: &storageosMounter{
0000000000000000000000000000000000000000;;				storageos: &storageos{
0000000000000000000000000000000000000000;;					pvName:       testPVName,
0000000000000000000000000000000000000000;;					volName:      testVolName,
0000000000000000000000000000000000000000;;					volNamespace: testNamespace,
0000000000000000000000000000000000000000;;					sizeGB:       testSize,
0000000000000000000000000000000000000000;;					pool:         testPool,
0000000000000000000000000000000000000000;;					description:  testDesc,
0000000000000000000000000000000000000000;;					fsType:       testFSType,
0000000000000000000000000000000000000000;;					labels:       labels,
0000000000000000000000000000000000000000;;					manager:      util,
0000000000000000000000000000000000000000;;					plugin:       plug.(*storageosPlugin),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			options: options,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vol, err := util.CreateVolume(provisioner)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("CreateVolume() returned error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vol == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("CreateVolume() vol is empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vol.ID == "" {
0000000000000000000000000000000000000000;;			t.Error("CreateVolume() vol ID is empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vol.Name != testVolName {
0000000000000000000000000000000000000000;;			t.Errorf("CreateVolume() returned unexpected Name %s", vol.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vol.Namespace != testNamespace {
0000000000000000000000000000000000000000;;			t.Errorf("CreateVolume() returned unexpected Namespace %s", vol.Namespace)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vol.Pool != testPool {
0000000000000000000000000000000000000000;;			t.Errorf("CreateVolume() returned unexpected Pool %s", vol.Pool)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vol.FSType != testFSType {
0000000000000000000000000000000000000000;;			t.Errorf("CreateVolume() returned unexpected FSType %s", vol.FSType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vol.SizeGB != testSize {
0000000000000000000000000000000000000000;;			t.Errorf("CreateVolume() returned unexpected Size %d", vol.SizeGB)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(vol.Labels) == 0 {
0000000000000000000000000000000000000000;;			t.Error("CreateVolume() Labels are empty")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			for k, v := range labels {
0000000000000000000000000000000000000000;;				var val string
0000000000000000000000000000000000000000;;				var ok bool
0000000000000000000000000000000000000000;;				if val, ok = vol.Labels[k]; !ok {
0000000000000000000000000000000000000000;;					t.Errorf("CreateVolume() Label %s not set", k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if val != v {
0000000000000000000000000000000000000000;;					t.Errorf("CreateVolume() returned unexpected Label value %s", val)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var val string
0000000000000000000000000000000000000000;;			var ok bool
0000000000000000000000000000000000000000;;			if val, ok = vol.Labels["labelfromapi"]; !ok {
0000000000000000000000000000000000000000;;				t.Error("CreateVolume() Label from api not set")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if val != "apilabel" {
0000000000000000000000000000000000000000;;				t.Errorf("CreateVolume() returned unexpected Label value %s", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAttachVolume(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("storageos_test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't make a temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;		plugMgr := volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;		plugMgr.InitPlugins(ProbeVolumePlugins(), volumetest.NewFakeVolumeHost(tmpDir, nil, nil))
0000000000000000000000000000000000000000;;		plug, _ := plugMgr.FindPluginByName("kubernetes.io/storageos")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Use real util with stubbed api
0000000000000000000000000000000000000000;;		util := &storageosUtil{}
0000000000000000000000000000000000000000;;		util.api = fakeAPI{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mounter := &storageosMounter{
0000000000000000000000000000000000000000;;			storageos: &storageos{
0000000000000000000000000000000000000000;;				volName:      testVolName,
0000000000000000000000000000000000000000;;				volNamespace: testNamespace,
0000000000000000000000000000000000000000;;				manager:      util,
0000000000000000000000000000000000000000;;				mounter:      &mount.FakeMounter{},
0000000000000000000000000000000000000000;;				plugin:       plug.(*storageosPlugin),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			devicePath: tmpDir,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to make a new Mounter: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mounter == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got a nil Mounter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
