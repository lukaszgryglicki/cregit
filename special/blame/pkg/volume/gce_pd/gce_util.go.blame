0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
d8bd5512166df6b074503df76dabb7e2366efdb2;pkg/volume/gce_util.go[pkg/volume/gce_util.go][pkg/volume/gce_pd/gce_util.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package gce_pd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/cloudprovider"
0000000000000000000000000000000000000000;;		gcecloud "k8s.io/kubernetes/pkg/cloudprovider/providers/gce"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumeutil "k8s.io/kubernetes/pkg/volume/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		diskByIdPath         = "/dev/disk/by-id/"
0000000000000000000000000000000000000000;;		diskGooglePrefix     = "google-"
0000000000000000000000000000000000000000;;		diskScsiGooglePrefix = "scsi-0Google_PersistentDisk_"
0000000000000000000000000000000000000000;;		diskPartitionSuffix  = "-part"
0000000000000000000000000000000000000000;;		diskSDPath           = "/dev/sd"
0000000000000000000000000000000000000000;;		diskSDPattern        = "/dev/sd*"
0000000000000000000000000000000000000000;;		maxChecks            = 60
0000000000000000000000000000000000000000;;		maxRetries           = 10
0000000000000000000000000000000000000000;;		checkSleepDuration   = time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These variables are modified only in unit tests and should be constant
0000000000000000000000000000000000000000;;	// otherwise.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		errorSleepDuration time.Duration = 5 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GCEDiskUtil struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (util *GCEDiskUtil) DeleteVolume(d *gcePersistentDiskDeleter) error {
0000000000000000000000000000000000000000;;		cloud, err := getCloudProvider(d.gcePersistentDisk.plugin.host.GetCloudProvider())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = cloud.DeleteDisk(d.pdName); err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error deleting GCE PD volume %s: %v", d.pdName, err)
0000000000000000000000000000000000000000;;			// GCE cloud provider returns volume.deletedVolumeInUseError when
0000000000000000000000000000000000000000;;			// necessary, no handling needed here.
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(2).Infof("Successfully deleted GCE PD volume %s", d.pdName)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVolume creates a GCE PD.
0000000000000000000000000000000000000000;;	// Returns: volumeID, volumeSizeGB, labels, error
0000000000000000000000000000000000000000;;	func (gceutil *GCEDiskUtil) CreateVolume(c *gcePersistentDiskProvisioner) (string, int, map[string]string, error) {
0000000000000000000000000000000000000000;;		cloud, err := getCloudProvider(c.gcePersistentDisk.plugin.host.GetCloudProvider())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", 0, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name := volume.GenerateVolumeName(c.options.ClusterName, c.options.PVName, 63) // GCE PD name can have up to 63 characters
0000000000000000000000000000000000000000;;		capacity := c.options.PVC.Spec.Resources.Requests[v1.ResourceName(v1.ResourceStorage)]
0000000000000000000000000000000000000000;;		requestBytes := capacity.Value()
0000000000000000000000000000000000000000;;		// GCE works with gigabytes, convert to GiB with rounding up
0000000000000000000000000000000000000000;;		requestGB := volume.RoundUpSize(requestBytes, 1024*1024*1024)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Apply Parameters (case-insensitive). We leave validation of
0000000000000000000000000000000000000000;;		// the values to the cloud provider.
0000000000000000000000000000000000000000;;		diskType := ""
0000000000000000000000000000000000000000;;		configuredZone := ""
0000000000000000000000000000000000000000;;		configuredZones := ""
0000000000000000000000000000000000000000;;		zonePresent := false
0000000000000000000000000000000000000000;;		zonesPresent := false
0000000000000000000000000000000000000000;;		for k, v := range c.options.Parameters {
0000000000000000000000000000000000000000;;			switch strings.ToLower(k) {
0000000000000000000000000000000000000000;;			case "type":
0000000000000000000000000000000000000000;;				diskType = v
0000000000000000000000000000000000000000;;			case "zone":
0000000000000000000000000000000000000000;;				zonePresent = true
0000000000000000000000000000000000000000;;				configuredZone = v
0000000000000000000000000000000000000000;;			case "zones":
0000000000000000000000000000000000000000;;				zonesPresent = true
0000000000000000000000000000000000000000;;				configuredZones = v
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return "", 0, nil, fmt.Errorf("invalid option %q for volume plugin %s", k, c.plugin.GetPluginName())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if zonePresent && zonesPresent {
0000000000000000000000000000000000000000;;			return "", 0, nil, fmt.Errorf("both zone and zones StorageClass parameters must not be used at the same time")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: implement PVC.Selector parsing
0000000000000000000000000000000000000000;;		if c.options.PVC.Spec.Selector != nil {
0000000000000000000000000000000000000000;;			return "", 0, nil, fmt.Errorf("claim.Spec.Selector is not supported for dynamic provisioning on GCE")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var zones sets.String
0000000000000000000000000000000000000000;;		if !zonePresent && !zonesPresent {
0000000000000000000000000000000000000000;;			zones, err = cloud.GetAllZones()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.V(2).Infof("error getting zone information from GCE: %v", err)
0000000000000000000000000000000000000000;;				return "", 0, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !zonePresent && zonesPresent {
0000000000000000000000000000000000000000;;			if zones, err = volume.ZonesToSet(configuredZones); err != nil {
0000000000000000000000000000000000000000;;				return "", 0, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if zonePresent && !zonesPresent {
0000000000000000000000000000000000000000;;			if err := volume.ValidateZone(configuredZone); err != nil {
0000000000000000000000000000000000000000;;				return "", 0, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			zones = make(sets.String)
0000000000000000000000000000000000000000;;			zones.Insert(configuredZone)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		zone := volume.ChooseZoneForVolume(zones, c.options.PVC.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = cloud.CreateDisk(name, diskType, zone, int64(requestGB), *c.options.CloudTags)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error creating GCE PD volume: %v", err)
0000000000000000000000000000000000000000;;			return "", 0, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(2).Infof("Successfully created GCE PD volume %s", name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels, err := cloud.GetAutoLabelsForPD(name, zone)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// We don't really want to leak the volume here...
0000000000000000000000000000000000000000;;			glog.Errorf("error getting labels for volume %q: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return name, int(requestGB), labels, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the first path that exists, or empty string if none exist.
0000000000000000000000000000000000000000;;	func verifyDevicePath(devicePaths []string, sdBeforeSet sets.String) (string, error) {
0000000000000000000000000000000000000000;;		if err := udevadmChangeToNewDrives(sdBeforeSet); err != nil {
0000000000000000000000000000000000000000;;			// udevadm errors should not block disk detachment, log and continue
0000000000000000000000000000000000000000;;			glog.Errorf("udevadmChangeToNewDrives failed with: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, path := range devicePaths {
0000000000000000000000000000000000000000;;			if pathExists, err := volumeutil.PathExists(path); err != nil {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("Error checking if path exists: %v", err)
0000000000000000000000000000000000000000;;			} else if pathExists {
0000000000000000000000000000000000000000;;				return path, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the first path that exists, or empty string if none exist.
0000000000000000000000000000000000000000;;	func verifyAllPathsRemoved(devicePaths []string) (bool, error) {
0000000000000000000000000000000000000000;;		allPathsRemoved := true
0000000000000000000000000000000000000000;;		for _, path := range devicePaths {
0000000000000000000000000000000000000000;;			if err := udevadmChangeToDrive(path); err != nil {
0000000000000000000000000000000000000000;;				// udevadm errors should not block disk detachment, log and continue
0000000000000000000000000000000000000000;;				glog.Errorf("%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if exists, err := volumeutil.PathExists(path); err != nil {
0000000000000000000000000000000000000000;;				return false, fmt.Errorf("Error checking if path exists: %v", err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				allPathsRemoved = allPathsRemoved && !exists
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allPathsRemoved, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns list of all /dev/disk/by-id/* paths for given PD.
0000000000000000000000000000000000000000;;	func getDiskByIdPaths(pdName string, partition string) []string {
0000000000000000000000000000000000000000;;		devicePaths := []string{
0000000000000000000000000000000000000000;;			path.Join(diskByIdPath, diskGooglePrefix+pdName),
0000000000000000000000000000000000000000;;			path.Join(diskByIdPath, diskScsiGooglePrefix+pdName),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if partition != "" {
0000000000000000000000000000000000000000;;			for i, path := range devicePaths {
0000000000000000000000000000000000000000;;				devicePaths[i] = path + diskPartitionSuffix + partition
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return devicePaths
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Return cloud provider
0000000000000000000000000000000000000000;;	func getCloudProvider(cloudProvider cloudprovider.Interface) (*gcecloud.GCECloud, error) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		for numRetries := 0; numRetries < maxRetries; numRetries++ {
0000000000000000000000000000000000000000;;			gceCloudProvider, ok := cloudProvider.(*gcecloud.GCECloud)
0000000000000000000000000000000000000000;;			if !ok || gceCloudProvider == nil {
0000000000000000000000000000000000000000;;				// Retry on error. See issue #11321
0000000000000000000000000000000000000000;;				glog.Errorf("Failed to get GCE Cloud Provider. plugin.host.GetCloudProvider returned %v instead", cloudProvider)
0000000000000000000000000000000000000000;;				time.Sleep(errorSleepDuration)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return gceCloudProvider, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Failed to get GCE GCECloudProvider with error %v", err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Triggers the application of udev rules by calling "udevadm trigger
0000000000000000000000000000000000000000;;	// --action=change" for newly created "/dev/sd*" drives (exist only in
0000000000000000000000000000000000000000;;	// after set). This is workaround for Issue #7972. Once the underlying
0000000000000000000000000000000000000000;;	// issue has been resolved, this may be removed.
0000000000000000000000000000000000000000;;	func udevadmChangeToNewDrives(sdBeforeSet sets.String) error {
0000000000000000000000000000000000000000;;		sdAfter, err := filepath.Glob(diskSDPattern)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Error filepath.Glob(\"%s\"): %v\r\n", diskSDPattern, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, sd := range sdAfter {
0000000000000000000000000000000000000000;;			if !sdBeforeSet.Has(sd) {
0000000000000000000000000000000000000000;;				return udevadmChangeToDrive(sd)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Calls "udevadm trigger --action=change" on the specified drive.
0000000000000000000000000000000000000000;;	// drivePath must be the block device path to trigger on, in the format "/dev/sd*", or a symlink to it.
0000000000000000000000000000000000000000;;	// This is workaround for Issue #7972. Once the underlying issue has been resolved, this may be removed.
0000000000000000000000000000000000000000;;	func udevadmChangeToDrive(drivePath string) error {
0000000000000000000000000000000000000000;;		glog.V(5).Infof("udevadmChangeToDrive: drive=%q", drivePath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Evaluate symlink, if any
0000000000000000000000000000000000000000;;		drive, err := filepath.EvalSymlinks(drivePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("udevadmChangeToDrive: filepath.EvalSymlinks(%q) failed with %v.", drivePath, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(5).Infof("udevadmChangeToDrive: symlink path is %q", drive)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check to make sure input is "/dev/sd*"
0000000000000000000000000000000000000000;;		if !strings.Contains(drive, diskSDPath) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("udevadmChangeToDrive: expected input in the form \"%s\" but drive is %q.", diskSDPattern, drive)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Call "udevadm trigger --action=change --property-match=DEVNAME=/dev/sd..."
0000000000000000000000000000000000000000;;		_, err = exec.New().Command(
0000000000000000000000000000000000000000;;			"udevadm",
0000000000000000000000000000000000000000;;			"trigger",
0000000000000000000000000000000000000000;;			"--action=change",
0000000000000000000000000000000000000000;;			fmt.Sprintf("--property-match=DEVNAME=%s", drive)).CombinedOutput()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("udevadmChangeToDrive: udevadm trigger failed for drive %q with %v.", drive, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
