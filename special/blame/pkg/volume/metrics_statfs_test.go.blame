0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
06b06ea29fb658da990e7049217ee2155d45a81d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package volume_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetMetricsStatFS(t *testing.T) {
0000000000000000000000000000000000000000;;		metrics := NewMetricsStatFS("")
0000000000000000000000000000000000000000;;		actual, err := metrics.GetMetrics()
0000000000000000000000000000000000000000;;		expected := &Metrics{}
0000000000000000000000000000000000000000;;		if !volumetest.MetricsEqualIgnoreTimestamp(actual, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected empty Metrics from uninitialized MetricsStatFS, actual %v", *actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error when calling GetMetrics on uninitialized MetricsStatFS, actual nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metrics = NewMetricsStatFS("/not/a/real/directory")
0000000000000000000000000000000000000000;;		actual, err = metrics.GetMetrics()
0000000000000000000000000000000000000000;;		if !volumetest.MetricsEqualIgnoreTimestamp(actual, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected empty Metrics from incorrectly initialized MetricsStatFS, actual %v", *actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error when calling GetMetrics on incorrectly initialized MetricsStatFS, actual nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("metric_statfs_test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Can't make a tmp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metrics = NewMetricsStatFS(tmpDir)
0000000000000000000000000000000000000000;;		actual, err = metrics.GetMetrics()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error when calling GetMetrics %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if a := actual.Capacity.Value(); a <= 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected Capacity %d to be greater than 0.", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a := actual.Available.Value(); a <= 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected Available %d to be greater than 0.", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
