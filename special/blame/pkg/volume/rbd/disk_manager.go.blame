0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
27eb00d606d55ee7423c57499e0422b4888f0962;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// diskManager interface and diskSetup/TearDown functions abstract commonly used procedures to setup a block volume
0000000000000000000000000000000000000000;;	// rbd volume implements diskManager, calls diskSetup when creating a volume, and calls diskTearDown inside volume unmounter.
0000000000000000000000000000000000000000;;	// TODO: consolidate, refactor, and share diskManager among iSCSI, GCE PD, and RBD
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rbd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Abstract interface to disk operations.
0000000000000000000000000000000000000000;;	type diskManager interface {
0000000000000000000000000000000000000000;;		MakeGlobalPDName(disk rbd) string
0000000000000000000000000000000000000000;;		// Attaches the disk to the kubelet's host machine.
0000000000000000000000000000000000000000;;		AttachDisk(disk rbdMounter) error
0000000000000000000000000000000000000000;;		// Detaches the disk from the kubelet's host machine.
0000000000000000000000000000000000000000;;		DetachDisk(disk rbdUnmounter, mntPath string) error
0000000000000000000000000000000000000000;;		// Creates a rbd image
0000000000000000000000000000000000000000;;		CreateImage(provisioner *rbdVolumeProvisioner) (r *v1.RBDVolumeSource, volumeSizeGB int, err error)
0000000000000000000000000000000000000000;;		// Deletes a rbd image
0000000000000000000000000000000000000000;;		DeleteImage(deleter *rbdVolumeDeleter) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// utility to mount a disk based filesystem
0000000000000000000000000000000000000000;;	func diskSetUp(manager diskManager, b rbdMounter, volPath string, mounter mount.Interface, fsGroup *int64) error {
0000000000000000000000000000000000000000;;		globalPDPath := manager.MakeGlobalPDName(*b.rbd)
0000000000000000000000000000000000000000;;		// TODO: handle failed mounts here.
0000000000000000000000000000000000000000;;		notMnt, err := mounter.IsLikelyNotMountPoint(volPath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil && !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			glog.Errorf("cannot validate mountpoint: %s", volPath)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !notMnt {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := manager.AttachDisk(b); err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("failed to attach disk")
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := os.MkdirAll(volPath, 0750); err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("failed to mkdir:%s", volPath)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Perform a bind mount to the full path to allow duplicate mounts of the same disk.
0000000000000000000000000000000000000000;;		options := []string{"bind"}
0000000000000000000000000000000000000000;;		if (&b).GetAttributes().ReadOnly {
0000000000000000000000000000000000000000;;			options = append(options, "ro")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mountOptions := volume.JoinMountOptions(b.mountOptions, options)
0000000000000000000000000000000000000000;;		err = mounter.Mount(globalPDPath, volPath, "", mountOptions)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("failed to bind mount:%s", globalPDPath)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !b.ReadOnly {
0000000000000000000000000000000000000000;;			volume.SetVolumeOwnership(&b, fsGroup)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// utility to tear down a disk based filesystem
0000000000000000000000000000000000000000;;	func diskTearDown(manager diskManager, c rbdUnmounter, volPath string, mounter mount.Interface) error {
0000000000000000000000000000000000000000;;		notMnt, err := mounter.IsLikelyNotMountPoint(volPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("cannot validate mountpoint %s", volPath)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if notMnt {
0000000000000000000000000000000000000000;;			return os.Remove(volPath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		refs, err := mount.GetMountRefs(mounter, volPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("failed to get reference count %s", volPath)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := mounter.Unmount(volPath); err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("failed to umount %s", volPath)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If len(refs) is 1, then all bind mounts have been removed, and the
0000000000000000000000000000000000000000;;		// remaining reference is the global mount. It is safe to detach.
0000000000000000000000000000000000000000;;		if len(refs) == 1 {
0000000000000000000000000000000000000000;;			mntPath := refs[0]
0000000000000000000000000000000000000000;;			if err := manager.DetachDisk(c, mntPath); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("failed to detach disk from %s", mntPath)
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		notMnt, mntErr := mounter.IsLikelyNotMountPoint(volPath)
0000000000000000000000000000000000000000;;		if mntErr != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("IsLikelyNotMountPoint check failed: %v", mntErr)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if notMnt {
0000000000000000000000000000000000000000;;			if err := os.Remove(volPath); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
