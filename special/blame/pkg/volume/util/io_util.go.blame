0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cfb21af4342b243358f84229906f09973994aa23;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IoUtil is a mockable util for common IO operations
0000000000000000000000000000000000000000;;	type IoUtil interface {
0000000000000000000000000000000000000000;;		ReadDir(dirname string) ([]os.FileInfo, error)
0000000000000000000000000000000000000000;;		Lstat(name string) (os.FileInfo, error)
0000000000000000000000000000000000000000;;		EvalSymlinks(path string) (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type osIOHandler struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//NewIOHandler Create a new IoHandler implementation
0000000000000000000000000000000000000000;;	func NewIOHandler() IoUtil {
0000000000000000000000000000000000000000;;		return &osIOHandler{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (handler *osIOHandler) ReadDir(dirname string) ([]os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return ioutil.ReadDir(dirname)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (handler *osIOHandler) Lstat(name string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return os.Lstat(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (handler *osIOHandler) EvalSymlinks(path string) (string, error) {
0000000000000000000000000000000000000000;;		return filepath.EvalSymlinks(path)
0000000000000000000000000000000000000000;;	}
