0000000000000000000000000000000000000000;;	// +build linux
cfb21af4342b243358f84229906f09973994aa23;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindMultipathDeviceForDevice given a device name like /dev/sdx, find the devicemapper parent
0000000000000000000000000000000000000000;;	func (handler *deviceHandler) FindMultipathDeviceForDevice(device string) string {
0000000000000000000000000000000000000000;;		io := handler.get_io
0000000000000000000000000000000000000000;;		disk, err := findDeviceForPath(device, io)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sysPath := "/sys/block/"
0000000000000000000000000000000000000000;;		if dirs, err := io.ReadDir(sysPath); err == nil {
0000000000000000000000000000000000000000;;			for _, f := range dirs {
0000000000000000000000000000000000000000;;				name := f.Name()
0000000000000000000000000000000000000000;;				if strings.HasPrefix(name, "dm-") {
0000000000000000000000000000000000000000;;					if _, err1 := io.Lstat(sysPath + name + "/slaves/" + disk); err1 == nil {
0000000000000000000000000000000000000000;;						return "/dev/" + name
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// findDeviceForPath Find the underlaying disk for a linked path such as /dev/disk/by-path/XXXX or /dev/mapper/XXXX
0000000000000000000000000000000000000000;;	// will return sdX or hdX etc, if /dev/sdX is passed in then sdX will be returned
0000000000000000000000000000000000000000;;	func findDeviceForPath(path string, io IoUtil) (string, error) {
0000000000000000000000000000000000000000;;		devicePath, err := io.EvalSymlinks(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// if path /dev/hdX split into "", "dev", "hdX" then we will
0000000000000000000000000000000000000000;;		// return just the last part
0000000000000000000000000000000000000000;;		parts := strings.Split(devicePath, "/")
0000000000000000000000000000000000000000;;		if len(parts) == 3 && strings.HasPrefix(parts[1], "dev") {
0000000000000000000000000000000000000000;;			return parts[2], nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", errors.New("Illegal path for device " + devicePath)
0000000000000000000000000000000000000000;;	}
