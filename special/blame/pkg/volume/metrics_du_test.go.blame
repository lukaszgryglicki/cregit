0000000000000000000000000000000000000000;;	// +build linux
550df90b0dfa6edde5ce972d9c9d21d156911343;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package volume_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getExpectedBlockSize(path string) int64 {
0000000000000000000000000000000000000000;;		statfs := &syscall.Statfs_t{}
0000000000000000000000000000000000000000;;		err := syscall.Statfs(path, statfs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return int64(statfs.Bsize)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestMetricsDuGetCapacity tests that MetricsDu can read disk usage
0000000000000000000000000000000000000000;;	// for path
0000000000000000000000000000000000000000;;	func TestMetricsDuGetCapacity(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("metrics_du_test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Can't make a tmp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;		metrics := NewMetricsDu(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedEmptyDirUsage, err := volumetest.FindEmptyDirectoryUsageOnTmpfs()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error finding expected empty directory usage on tmpfs: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actual, err := metrics.GetMetrics()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error when calling GetMetrics %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expectedEmptyDirUsage.Value(), actual.Used.Value(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected value for empty directory; expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO(pwittroc): Figure out a way to test these values for correctness, maybe by formatting and mounting a file
0000000000000000000000000000000000000000;;		// as a filesystem
0000000000000000000000000000000000000000;;		if a := actual.Capacity.Value(); a <= 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected Capacity %d to be greater than 0.", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a := actual.Available.Value(); a <= 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected Available %d to be greater than 0.", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Write a file and expect Used to increase
0000000000000000000000000000000000000000;;		ioutil.WriteFile(filepath.Join(tmpDir, "f1"), []byte("Hello World"), os.ModeTemporary)
0000000000000000000000000000000000000000;;		actual, err = metrics.GetMetrics()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error when calling GetMetrics %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := (expectedEmptyDirUsage.Value() + getExpectedBlockSize(filepath.Join(tmpDir, "f1"))), actual.Used.Value(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected Used for directory with file.  Expected %v, got %d.", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestMetricsDuRequireInit tests that if MetricsDu is not initialized with a path, GetMetrics
0000000000000000000000000000000000000000;;	// returns an error
0000000000000000000000000000000000000000;;	func TestMetricsDuRequirePath(t *testing.T) {
0000000000000000000000000000000000000000;;		metrics := NewMetricsDu("")
0000000000000000000000000000000000000000;;		actual, err := metrics.GetMetrics()
0000000000000000000000000000000000000000;;		expected := &Metrics{}
0000000000000000000000000000000000000000;;		if !volumetest.MetricsEqualIgnoreTimestamp(actual, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected empty Metrics from uninitialized MetricsDu, actual %v", *actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error when calling GetMetrics on uninitialized MetricsDu, actual nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestMetricsDuRealDirectory tests that if MetricsDu is initialized to a non-existent path, GetMetrics
0000000000000000000000000000000000000000;;	// returns an error
0000000000000000000000000000000000000000;;	func TestMetricsDuRequireRealDirectory(t *testing.T) {
0000000000000000000000000000000000000000;;		metrics := NewMetricsDu("/not/a/real/directory")
0000000000000000000000000000000000000000;;		actual, err := metrics.GetMetrics()
0000000000000000000000000000000000000000;;		expected := &Metrics{}
0000000000000000000000000000000000000000;;		if !volumetest.MetricsEqualIgnoreTimestamp(actual, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected empty Metrics from incorrectly initialized MetricsDu, actual %v", *actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error when calling GetMetrics on incorrectly initialized MetricsDu, actual nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
