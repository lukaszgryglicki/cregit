0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package portworx
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		osdapi "github.com/libopenstorage/openstorage/api"
0000000000000000000000000000000000000000;;		osdclient "github.com/libopenstorage/openstorage/api/client"
0000000000000000000000000000000000000000;;		volumeclient "github.com/libopenstorage/openstorage/api/client/volume"
0000000000000000000000000000000000000000;;		osdspec "github.com/libopenstorage/openstorage/api/spec"
0000000000000000000000000000000000000000;;		volumeapi "github.com/libopenstorage/openstorage/volume"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		osdMgmtPort      = "9001"
0000000000000000000000000000000000000000;;		osdDriverVersion = "v1"
0000000000000000000000000000000000000000;;		pxdDriverName    = "pxd"
0000000000000000000000000000000000000000;;		pvcClaimLabel    = "pvc"
0000000000000000000000000000000000000000;;		pxServiceName    = "portworx-service"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PortworxVolumeUtil struct {
0000000000000000000000000000000000000000;;		portworxClient *osdclient.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVolume creates a Portworx volume.
0000000000000000000000000000000000000000;;	func (util *PortworxVolumeUtil) CreateVolume(p *portworxVolumeProvisioner) (string, int, map[string]string, error) {
0000000000000000000000000000000000000000;;		driver, err := util.getPortworxDriver(p.plugin.host)
0000000000000000000000000000000000000000;;		if err != nil || driver == nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to get portworx driver. Err: %v", err)
0000000000000000000000000000000000000000;;			return "", 0, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capacity := p.options.PVC.Spec.Resources.Requests[v1.ResourceName(v1.ResourceStorage)]
0000000000000000000000000000000000000000;;		// Portworx Volumes are specified in GB
0000000000000000000000000000000000000000;;		requestGB := int(volume.RoundUpSize(capacity.Value(), 1024*1024*1024))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		specHandler := osdspec.NewSpecHandler()
0000000000000000000000000000000000000000;;		spec, err := specHandler.SpecFromOpts(p.options.Parameters)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", 0, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		spec.Size = uint64(requestGB * 1024 * 1024 * 1024)
0000000000000000000000000000000000000000;;		source := osdapi.Source{}
0000000000000000000000000000000000000000;;		locator := osdapi.VolumeLocator{
0000000000000000000000000000000000000000;;			Name: p.options.PVName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Add claim Name as a part of Portworx Volume Labels
0000000000000000000000000000000000000000;;		locator.VolumeLabels = make(map[string]string)
0000000000000000000000000000000000000000;;		locator.VolumeLabels[pvcClaimLabel] = p.options.PVC.Name
0000000000000000000000000000000000000000;;		volumeID, err := driver.Create(&locator, &source, spec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error creating Portworx Volume : %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return volumeID, requestGB, nil, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVolume deletes a Portworx volume
0000000000000000000000000000000000000000;;	func (util *PortworxVolumeUtil) DeleteVolume(d *portworxVolumeDeleter) error {
0000000000000000000000000000000000000000;;		driver, err := util.getPortworxDriver(d.plugin.host)
0000000000000000000000000000000000000000;;		if err != nil || driver == nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to get portworx driver. Err: %v", err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = driver.Delete(d.volumeID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error deleting Portworx Volume (%v): %v", d.volName, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachVolume attaches a Portworx Volume
0000000000000000000000000000000000000000;;	func (util *PortworxVolumeUtil) AttachVolume(m *portworxVolumeMounter) (string, error) {
0000000000000000000000000000000000000000;;		driver, err := util.getPortworxDriver(m.plugin.host)
0000000000000000000000000000000000000000;;		if err != nil || driver == nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to get portworx driver. Err: %v", err)
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		devicePath, err := driver.Attach(m.volName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error attaching Portworx Volume (%v): %v", m.volName, err)
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return devicePath, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachVolume detaches a Portworx Volume
0000000000000000000000000000000000000000;;	func (util *PortworxVolumeUtil) DetachVolume(u *portworxVolumeUnmounter) error {
0000000000000000000000000000000000000000;;		driver, err := util.getPortworxDriver(u.plugin.host)
0000000000000000000000000000000000000000;;		if err != nil || driver == nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to get portworx driver. Err: %v", err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = driver.Detach(u.volName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error detaching Portworx Volume (%v): %v", u.volName, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MountVolume mounts a Portworx Volume on the specified mountPath
0000000000000000000000000000000000000000;;	func (util *PortworxVolumeUtil) MountVolume(m *portworxVolumeMounter, mountPath string) error {
0000000000000000000000000000000000000000;;		driver, err := util.getPortworxDriver(m.plugin.host)
0000000000000000000000000000000000000000;;		if err != nil || driver == nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to get portworx driver. Err: %v", err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = driver.Mount(m.volName, mountPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error mounting Portworx Volume (%v) on Path (%v): %v", m.volName, mountPath, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmountVolume unmounts a Portworx Volume
0000000000000000000000000000000000000000;;	func (util *PortworxVolumeUtil) UnmountVolume(u *portworxVolumeUnmounter, mountPath string) error {
0000000000000000000000000000000000000000;;		driver, err := util.getPortworxDriver(u.plugin.host)
0000000000000000000000000000000000000000;;		if err != nil || driver == nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to get portworx driver. Err: %v", err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = driver.Unmount(u.volName, mountPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Error unmounting Portworx Volume (%v) on Path (%v): %v", u.volName, mountPath, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isClientValid(client *osdclient.Client) (bool, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := client.Versions(osdapi.OsdVolumePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("portworx client failed driver versions check. Err: %v", err)
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createDriverClient(hostname string) (*osdclient.Client, error) {
0000000000000000000000000000000000000000;;		client, err := volumeclient.NewDriverClient("http://"+hostname+":"+osdMgmtPort,
0000000000000000000000000000000000000000;;			pxdDriverName, osdDriverVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isValid, err := isClientValid(client); isValid {
0000000000000000000000000000000000000000;;			return client, nil
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (util *PortworxVolumeUtil) getPortworxDriver(volumeHost volume.VolumeHost) (volumeapi.VolumeDriver, error) {
0000000000000000000000000000000000000000;;		if isValid, _ := isClientValid(util.portworxClient); isValid {
0000000000000000000000000000000000000000;;			return volumeclient.VolumeDriver(util.portworxClient), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create new client
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		util.portworxClient, err = createDriverClient(volumeHost.GetHostName()) // for backward compatibility
0000000000000000000000000000000000000000;;		if err != nil || util.portworxClient == nil {
0000000000000000000000000000000000000000;;			// Create client from portworx service
0000000000000000000000000000000000000000;;			kubeClient := volumeHost.GetKubeClient()
0000000000000000000000000000000000000000;;			if kubeClient == nil {
0000000000000000000000000000000000000000;;				glog.Error("Failed to get kubeclient when creating portworx client")
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			opts := metav1.GetOptions{}
0000000000000000000000000000000000000000;;			svc, err := kubeClient.CoreV1().Services(api.NamespaceSystem).Get(pxServiceName, opts)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Failed to get service. Err: %v", err)
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if svc == nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Service: %v not found. Consult Portworx docs to deploy it.", pxServiceName)
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			util.portworxClient, err = createDriverClient(svc.Spec.ClusterIP)
0000000000000000000000000000000000000000;;			if err != nil || util.portworxClient == nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Failed to connect to portworx service. Err: %v", err)
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			glog.Infof("Using portworx service at: %v as api endpoint", svc.Spec.ClusterIP)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			glog.Infof("Using portworx service at: %v as api endpoint", volumeHost.GetHostName())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return volumeclient.VolumeDriver(util.portworxClient), nil
0000000000000000000000000000000000000000;;	}
