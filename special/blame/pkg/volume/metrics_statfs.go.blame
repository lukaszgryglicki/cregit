0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2105c44ffbbc0b1cdbffdbcf8a00742b1b5c3d70;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package volume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ MetricsProvider = &metricsStatFS{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// metricsStatFS represents a MetricsProvider that calculates the used and available
0000000000000000000000000000000000000000;;	// Volume space by stat'ing and gathering filesystem info for the Volume path.
0000000000000000000000000000000000000000;;	type metricsStatFS struct {
0000000000000000000000000000000000000000;;		// the directory path the volume is mounted to.
0000000000000000000000000000000000000000;;		path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMetricsStatfs creates a new metricsStatFS with the Volume path.
0000000000000000000000000000000000000000;;	func NewMetricsStatFS(path string) MetricsProvider {
0000000000000000000000000000000000000000;;		return &metricsStatFS{path}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// See MetricsProvider.GetMetrics
0000000000000000000000000000000000000000;;	// GetMetrics calculates the volume usage and device free space by executing "du"
0000000000000000000000000000000000000000;;	// and gathering filesystem info for the Volume path.
0000000000000000000000000000000000000000;;	func (md *metricsStatFS) GetMetrics() (*Metrics, error) {
0000000000000000000000000000000000000000;;		metrics := &Metrics{Time: metav1.Now()}
0000000000000000000000000000000000000000;;		if md.path == "" {
0000000000000000000000000000000000000000;;			return metrics, NewNoPathDefinedError()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := md.getFsInfo(metrics)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return metrics, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return metrics, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getFsInfo writes metrics.Capacity, metrics.Used and metrics.Available from the filesystem info
0000000000000000000000000000000000000000;;	func (md *metricsStatFS) getFsInfo(metrics *Metrics) error {
0000000000000000000000000000000000000000;;		available, capacity, usage, inodes, inodesFree, inodesUsed, err := util.FsInfo(md.path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return NewFsInfoFailedError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		metrics.Available = resource.NewQuantity(available, resource.BinarySI)
0000000000000000000000000000000000000000;;		metrics.Capacity = resource.NewQuantity(capacity, resource.BinarySI)
0000000000000000000000000000000000000000;;		metrics.Used = resource.NewQuantity(usage, resource.BinarySI)
0000000000000000000000000000000000000000;;		metrics.Inodes = resource.NewQuantity(inodes, resource.BinarySI)
0000000000000000000000000000000000000000;;		metrics.InodesFree = resource.NewQuantity(inodesFree, resource.BinarySI)
0000000000000000000000000000000000000000;;		metrics.InodesUsed = resource.NewQuantity(inodesUsed, resource.BinarySI)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
