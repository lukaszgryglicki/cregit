0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
3eccd6e3f041942b6bf9aa5d3009d6ae179f3ce3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePersistentVolumes(t *testing.T) {
0000000000000000000000000000000000000000;;		scenarios := map[string]struct {
0000000000000000000000000000000000000000;;			isExpectedFailure bool
0000000000000000000000000000000000000000;;			volume            *api.PersistentVolume
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"volume with valid mount option for nfs": {
0000000000000000000000000000000000000000;;				isExpectedFailure: false,
0000000000000000000000000000000000000000;;				volume: testVolumeWithMountOption("good-nfs-mount-volume", "", "ro,nfsvers=3", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						NFS: &api.NFSVolumeSource{Server: "localhost", Path: "/srv", ReadOnly: false},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"volume with mount option for host path": {
0000000000000000000000000000000000000000;;				isExpectedFailure: true,
0000000000000000000000000000000000000000;;				volume: testVolumeWithMountOption("bad-hostpath-mount-volume", "", "ro,nfsvers=3", api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;						api.ResourceName(api.ResourceStorage): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AccessModes: []api.PersistentVolumeAccessMode{api.ReadWriteOnce},
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{Path: "/a/.."},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, scenario := range scenarios {
0000000000000000000000000000000000000000;;			errs := ValidatePersistentVolume(scenario.volume)
0000000000000000000000000000000000000000;;			if len(errs) == 0 && scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected success for scenario: %s", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) > 0 && !scenario.isExpectedFailure {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected failure for scenario: %s - %+v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testVolumeWithMountOption(name string, namespace string, mountOptions string, spec api.PersistentVolumeSpec) *api.PersistentVolume {
0000000000000000000000000000000000000000;;		annotations := map[string]string{
0000000000000000000000000000000000000000;;			api.MountOptionAnnotation: mountOptions,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		objMeta := metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Name:        name,
0000000000000000000000000000000000000000;;			Annotations: annotations,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if namespace != "" {
0000000000000000000000000000000000000000;;			objMeta.Namespace = namespace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &api.PersistentVolume{
0000000000000000000000000000000000000000;;			ObjectMeta: objMeta,
0000000000000000000000000000000000000000;;			Spec:       spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePathNoBacksteps(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			path        string
0000000000000000000000000000000000000000;;			expectedErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid path": {
0000000000000000000000000000000000000000;;				path: "/foo/bar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid path": {
0000000000000000000000000000000000000000;;				path:        "/foo/bar/..",
0000000000000000000000000000000000000000;;				expectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range testCases {
0000000000000000000000000000000000000000;;			err := ValidatePathNoBacksteps(tc.path)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err == nil && tc.expectedErr {
0000000000000000000000000000000000000000;;				t.Fatalf("expected test `%s` to return an error but it didnt", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil && !tc.expectedErr {
0000000000000000000000000000000000000000;;				t.Fatalf("expected test `%s` to return no error but got `%v`", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
