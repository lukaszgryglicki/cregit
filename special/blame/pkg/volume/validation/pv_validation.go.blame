0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
3eccd6e3f041942b6bf9aa5d3009d6ae179f3ce3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidatePersistentVolume validates PV object for plugin specific validation
0000000000000000000000000000000000000000;;	// We can put here validations which are specific to volume types.
0000000000000000000000000000000000000000;;	func ValidatePersistentVolume(pv *api.PersistentVolume) field.ErrorList {
0000000000000000000000000000000000000000;;		return checkMountOption(pv)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkMountOption(pv *api.PersistentVolume) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;		// if PV is of these types we don't return errors
0000000000000000000000000000000000000000;;		// since mount options is supported
0000000000000000000000000000000000000000;;		if pv.Spec.GCEPersistentDisk != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.AWSElasticBlockStore != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.Glusterfs != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.NFS != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.RBD != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.Quobyte != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.ISCSI != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.Cinder != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.CephFS != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.AzureFile != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.VsphereVolume != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.AzureDisk != nil ||
0000000000000000000000000000000000000000;;			pv.Spec.PhotonPersistentDisk != nil {
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// any other type if mount option is present lets return error
0000000000000000000000000000000000000000;;		if _, ok := pv.Annotations[api.MountOptionAnnotation]; ok {
0000000000000000000000000000000000000000;;			metaField := field.NewPath("metadata")
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Forbidden(metaField.Child("annotations", api.MountOptionAnnotation), "may not specify mount options for this volume type"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidatePathNoBacksteps will make sure the targetPath does not have any element which is ".."
0000000000000000000000000000000000000000;;	func ValidatePathNoBacksteps(targetPath string) error {
0000000000000000000000000000000000000000;;		parts := strings.Split(filepath.ToSlash(targetPath), "/")
0000000000000000000000000000000000000000;;		for _, item := range parts {
0000000000000000000000000000000000000000;;			if item == ".." {
0000000000000000000000000000000000000000;;				return errors.New("must not contain '..'")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
