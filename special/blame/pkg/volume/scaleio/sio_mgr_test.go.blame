0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scaleio
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		siotypes "github.com/codedellemc/goscaleio/types/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		fakeSdcID      = "test-sdc-123456789"
0000000000000000000000000000000000000000;;		fakeVolumeName = "test-vol-0001"
0000000000000000000000000000000000000000;;		fakeVolumeID   = "1234567890"
0000000000000000000000000000000000000000;;		fakeDev        = "/dev/testABC"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeConfig = map[string]string{
0000000000000000000000000000000000000000;;			confKey.gateway:    "http://sio.gateway:1234",
0000000000000000000000000000000000000000;;			confKey.sslEnabled: "false",
0000000000000000000000000000000000000000;;			confKey.system:     "scaleio",
0000000000000000000000000000000000000000;;			confKey.volumeName: "sio-0001",
0000000000000000000000000000000000000000;;			confKey.secretRef:  "sio-secret",
0000000000000000000000000000000000000000;;			confKey.username:   "c2lvdXNlcgo=",     // siouser
0000000000000000000000000000000000000000;;			confKey.password:   "c2lvcGFzc3dvcmQK", // siopassword
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestMgr(t *testing.T) *sioMgr {
0000000000000000000000000000000000000000;;		mgr, err := newSioMgr(fakeConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mgr.client = newFakeSio()
0000000000000000000000000000000000000000;;		return mgr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrNew(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr, err := newSioMgr(fakeConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mgr.configData == nil {
0000000000000000000000000000000000000000;;			t.Fatal("configuration data not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mgr.configData[confKey.volumeName] != "sio-0001" {
0000000000000000000000000000000000000000;;			t.Errorf("expecting %s, got %s", "sio-0001", mgr.configData[confKey.volumeName])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// check defaults
0000000000000000000000000000000000000000;;		if mgr.configData[confKey.protectionDomain] != "default" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected value for confData[protectionDomain] %s", mgr.configData[confKey.protectionDomain])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mgr.configData[confKey.storagePool] != "default" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected value for confData[storagePool] %s", mgr.configData[confKey.storagePool])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mgr.configData[confKey.storageMode] != "ThinProvisioned" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected value for confData[storageMode] %s", mgr.configData[confKey.storageMode])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrGetClient(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		_, err := mgr.getClient()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mgr.client == nil {
0000000000000000000000000000000000000000;;			t.Fatal("mgr.client not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrCreateVolume(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		vol, err := mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vol.Name != "test-vol-0001" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected vol.Name %s", vol.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrAttachVolume(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		device, err := mgr.AttachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if device != "/dev/testABC" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected value for mapped device %s", device)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrAttachVolume_AlreadyAttached(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		mgr.AttachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		dev, err := mgr.AttachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dev != "/dev/testABC" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected value for mapped device %s", dev)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrAttachVolume_VolumeNotFoundError(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		_, err := mgr.AttachVolume("test-vol-0002")
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Error("attachVolume should fail with volume not found error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrAttachVolume_WaitForAttachError(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			c := mgr.client.(*fakeSio)
0000000000000000000000000000000000000000;;			close(c.waitAttachCtrl)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		_, err := mgr.AttachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Error("attachVolume should fail with attach timeout error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrDetachVolume(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		mgr.AttachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		if err := mgr.DetachVolume("test-vol-0001"); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeSio := mgr.client.(*fakeSio)
0000000000000000000000000000000000000000;;		if len(fakeSio.volume.MappedSdcInfo) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expecting attached sdc to 0, got %d", len(fakeSio.volume.MappedSdcInfo))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(fakeSio.devs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expecting local devs to be 0, got %d", len(fakeSio.devs))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestMgrDetachVolume_VolumeNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		mgr.AttachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		err := mgr.DetachVolume("test-vol-0002")
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected a volume not found failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrDetachVolume_VolumeNotAttached(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		err := mgr.DetachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrDetachVolume_VolumeAlreadyDetached(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		mgr.AttachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		mgr.DetachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		err := mgr.DetachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal("failed detaching a volume already detached")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMgrDetachVolume_WaitForDetachError(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		mgr.AttachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		err := mgr.DetachVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error("detachVolume failed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestMgrDeleteVolume(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		err := mgr.DeleteVolume("test-vol-0001")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sio := mgr.client.(*fakeSio)
0000000000000000000000000000000000000000;;		if sio.volume != nil {
0000000000000000000000000000000000000000;;			t.Errorf("volume not nil after delete operation")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestMgrDeleteVolume_VolumeNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		mgr := newTestMgr(t)
0000000000000000000000000000000000000000;;		mgr.CreateVolume("test-vol-0001", 8*1024*1024)
0000000000000000000000000000000000000000;;		err := mgr.DeleteVolume("test-vol-0002")
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected volume not found error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ************************************************************
0000000000000000000000000000000000000000;;	// Helper Test Types
0000000000000000000000000000000000000000;;	// ************************************************************
0000000000000000000000000000000000000000;;	type fakeSio struct {
0000000000000000000000000000000000000000;;		volume         *siotypes.Volume
0000000000000000000000000000000000000000;;		waitAttachCtrl chan struct{}
0000000000000000000000000000000000000000;;		waitDetachCtrl chan struct{}
0000000000000000000000000000000000000000;;		devs           map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeSio() *fakeSio {
0000000000000000000000000000000000000000;;		return &fakeSio{
0000000000000000000000000000000000000000;;			waitAttachCtrl: make(chan struct{}),
0000000000000000000000000000000000000000;;			waitDetachCtrl: make(chan struct{}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) FindVolume(volumeName string) (*siotypes.Volume, error) {
0000000000000000000000000000000000000000;;		if f.volume == nil || f.volume.Name != volumeName {
0000000000000000000000000000000000000000;;			return nil, errors.New("volume not found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.volume, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) Volume(id sioVolumeID) (*siotypes.Volume, error) {
0000000000000000000000000000000000000000;;		if f.volume == nil || f.volume.ID != string(id) {
0000000000000000000000000000000000000000;;			return nil, errors.New("volume not found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.volume, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) CreateVolume(volName string, sizeGB int64) (*siotypes.Volume, error) {
0000000000000000000000000000000000000000;;		f.volume = &siotypes.Volume{
0000000000000000000000000000000000000000;;			ID:         fakeVolumeID,
0000000000000000000000000000000000000000;;			Name:       volName,
0000000000000000000000000000000000000000;;			SizeInKb:   int(sizeGB),
0000000000000000000000000000000000000000;;			VolumeType: "test",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f.volume, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) AttachVolume(id sioVolumeID) error {
0000000000000000000000000000000000000000;;		_, err := f.Volume(id)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.volume.MappedSdcInfo = []*siotypes.MappedSdcInfo{
0000000000000000000000000000000000000000;;			{SdcID: fakeSdcID},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) DetachVolume(id sioVolumeID) error {
0000000000000000000000000000000000000000;;		if _, err := f.Volume(id); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.volume.MappedSdcInfo = nil
0000000000000000000000000000000000000000;;		delete(f.devs, f.volume.ID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) DeleteVolume(id sioVolumeID) error {
0000000000000000000000000000000000000000;;		if _, err := f.Volume(id); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.volume = nil
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) IID() (string, error) {
0000000000000000000000000000000000000000;;		return fakeSdcID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) Devs() (map[string]string, error) {
0000000000000000000000000000000000000000;;		if f.volume == nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("volume not found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.devs = map[string]string{
0000000000000000000000000000000000000000;;			f.volume.ID: fakeDev,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f.devs, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) GetVolumeRefs(volId sioVolumeID) (int, error) {
0000000000000000000000000000000000000000;;		if f.volume == nil {
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 1, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) WaitForAttachedDevice(token string) (string, error) {
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-time.After(500 * time.Millisecond):
0000000000000000000000000000000000000000;;			return fakeDev, nil
0000000000000000000000000000000000000000;;		case <-f.waitAttachCtrl:
0000000000000000000000000000000000000000;;			return "", errors.New("attached device timeout")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSio) WaitForDetachedDevice(token string) error {
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-time.After(500 * time.Millisecond):
0000000000000000000000000000000000000000;;			delete(f.devs, f.volume.ID)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case <-f.waitDetachCtrl:
0000000000000000000000000000000000000000;;			return errors.New("detach device timeout")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
