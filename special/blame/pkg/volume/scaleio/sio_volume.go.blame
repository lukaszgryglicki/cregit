0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scaleio
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		api "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		meta "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/mount"
0000000000000000000000000000000000000000;;		kstrings "k8s.io/kubernetes/pkg/util/strings"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util/volumehelper"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sioVolume struct {
0000000000000000000000000000000000000000;;		sioMgr      *sioMgr
0000000000000000000000000000000000000000;;		plugin      *sioPlugin
0000000000000000000000000000000000000000;;		pod         *api.Pod
0000000000000000000000000000000000000000;;		podUID      types.UID
0000000000000000000000000000000000000000;;		spec        *volume.Spec
0000000000000000000000000000000000000000;;		source      *api.ScaleIOVolumeSource
0000000000000000000000000000000000000000;;		namespace   string
0000000000000000000000000000000000000000;;		volSpecName string
0000000000000000000000000000000000000000;;		volName     string
0000000000000000000000000000000000000000;;		readOnly    bool
0000000000000000000000000000000000000000;;		fsType      string
0000000000000000000000000000000000000000;;		options     volume.VolumeOptions
0000000000000000000000000000000000000000;;		configData  map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volume.MetricsNil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// *******************
0000000000000000000000000000000000000000;;	// volume.Volume Impl
0000000000000000000000000000000000000000;;	var _ volume.Volume = &sioVolume{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPath returns the path where the volume will be mounted.
0000000000000000000000000000000000000000;;	// The volumeName is prefixed with the pod's namespace a <pod.Namespace>-<volumeName>
0000000000000000000000000000000000000000;;	func (v *sioVolume) GetPath() string {
0000000000000000000000000000000000000000;;		return v.plugin.host.GetPodVolumeDir(
0000000000000000000000000000000000000000;;			v.podUID,
0000000000000000000000000000000000000000;;			kstrings.EscapeQualifiedNameForDisk(sioPluginName),
0000000000000000000000000000000000000000;;			v.volSpecName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// *************
0000000000000000000000000000000000000000;;	// Mounter Impl
0000000000000000000000000000000000000000;;	// *************
0000000000000000000000000000000000000000;;	var _ volume.Mounter = &sioVolume{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CanMount checks to verify that the volume can be mounted prior to Setup.
0000000000000000000000000000000000000000;;	// A nil error indicates that the volume is ready for mounitnig.
0000000000000000000000000000000000000000;;	func (v *sioVolume) CanMount() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *sioVolume) SetUp(fsGroup *int64) error {
0000000000000000000000000000000000000000;;		return v.SetUpAt(v.GetPath(), fsGroup)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUp bind mounts the disk global mount to the volume path.
0000000000000000000000000000000000000000;;	func (v *sioVolume) SetUpAt(dir string, fsGroup *int64) error {
0000000000000000000000000000000000000000;;		v.plugin.volumeMtx.LockKey(v.volSpecName)
0000000000000000000000000000000000000000;;		defer v.plugin.volumeMtx.UnlockKey(v.volSpecName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("setting up volume %s", v.volSpecName))
0000000000000000000000000000000000000000;;		if err := v.setSioMgr(); err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("setup failed to create scalio manager: %v", err))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		notDevMnt, err := v.plugin.mounter.IsLikelyNotMountPoint(dir)
0000000000000000000000000000000000000000;;		if err != nil && !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			glog.Error(log("IsLikelyNotMountPoint test failed for dir %v", dir))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !notDevMnt {
0000000000000000000000000000000000000000;;			glog.V(4).Info(log("skipping setup, dir %s already a mount point", v.volName))
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// attach the volume and mount
0000000000000000000000000000000000000000;;		volName := v.volName
0000000000000000000000000000000000000000;;		devicePath, err := v.sioMgr.AttachVolume(volName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("setup of volume %v:  %v", v.volSpecName, err))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := []string{}
0000000000000000000000000000000000000000;;		if v.source.ReadOnly {
0000000000000000000000000000000000000000;;			options = append(options, "ro")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			options = append(options, "rw")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("mounting device  %s -> %s", devicePath, dir))
0000000000000000000000000000000000000000;;		if err := os.MkdirAll(dir, 0750); err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("failed to create dir %#v:  %v", dir, err))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("setup created mount point directory %s", dir))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		diskMounter := &mount.SafeFormatAndMount{
0000000000000000000000000000000000000000;;			Interface: v.plugin.mounter,
0000000000000000000000000000000000000000;;			Runner:    exec.New(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = diskMounter.FormatAndMount(devicePath, dir, v.fsType, options)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("mount operation failed during setup: %v", err))
0000000000000000000000000000000000000000;;			if err := os.Remove(dir); err != nil && !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to remove dir %s during a failed mount at setup: %v", dir, err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("successfully setup volume %s attached %s:%s as %s", v.volSpecName, v.volName, devicePath, dir))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *sioVolume) GetAttributes() volume.Attributes {
0000000000000000000000000000000000000000;;		return volume.Attributes{
0000000000000000000000000000000000000000;;			ReadOnly:        v.readOnly,
0000000000000000000000000000000000000000;;			Managed:         !v.readOnly,
0000000000000000000000000000000000000000;;			SupportsSELinux: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// **********************
0000000000000000000000000000000000000000;;	// volume.Unmounter Impl
0000000000000000000000000000000000000000;;	// *********************
0000000000000000000000000000000000000000;;	var _ volume.Unmounter = &sioVolume{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TearDownAt unmounts the bind mount
0000000000000000000000000000000000000000;;	func (v *sioVolume) TearDown() error {
0000000000000000000000000000000000000000;;		return v.TearDownAt(v.GetPath())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TearDown unmounts  and remove the volume
0000000000000000000000000000000000000000;;	func (v *sioVolume) TearDownAt(dir string) error {
0000000000000000000000000000000000000000;;		v.plugin.volumeMtx.LockKey(v.volSpecName)
0000000000000000000000000000000000000000;;		defer v.plugin.volumeMtx.UnlockKey(v.volSpecName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dev, _, err := mount.GetDeviceNameFromMount(v.plugin.mounter, dir)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf(log("failed to get reference count for volume: %s", dir))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("attempting to unmount %s", dir))
0000000000000000000000000000000000000000;;		if err := util.UnmountPath(dir, v.plugin.mounter); err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("teardown failed while unmounting dir %s: %v ", dir, err))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("dir %s unmounted successfully", dir))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// detach/unmap
0000000000000000000000000000000000000000;;		deviceBusy, err := v.plugin.mounter.DeviceOpened(dev)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("teardown unable to get status for device %s: %v", dev, err))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Detach volume from node:
0000000000000000000000000000000000000000;;		// use "last attempt wins" strategy to detach volume from node
0000000000000000000000000000000000000000;;		// only allow volume to detach when it is not busy (not being used by other pods)
0000000000000000000000000000000000000000;;		if !deviceBusy {
0000000000000000000000000000000000000000;;			glog.V(4).Info(log("teardown is attempting to detach/unmap volume for %s", v.volSpecName))
0000000000000000000000000000000000000000;;			if err := v.resetSioMgr(); err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("teardown failed, unable to reset scalio mgr: %v", err))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			volName := v.volName
0000000000000000000000000000000000000000;;			if err := v.sioMgr.DetachVolume(volName); err != nil {
0000000000000000000000000000000000000000;;				glog.Warning(log("warning: detaching failed for volume %s:  %v", volName, err))
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			glog.V(4).Infof(log("teardown of volume %v detached successfully", volName))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ********************
0000000000000000000000000000000000000000;;	// volume.Deleter Impl
0000000000000000000000000000000000000000;;	// ********************
0000000000000000000000000000000000000000;;	var _ volume.Deleter = &sioVolume{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *sioVolume) Delete() error {
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("deleting pvc %s", v.volSpecName))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := v.setSioMgrFromSpec(); err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("delete failed while setting sio manager: %v", err))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := v.sioMgr.DeleteVolume(v.volName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("failed to delete volume %s: %v", v.volName, err))
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("successfully deleted pvc %s", v.volSpecName))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ************************
0000000000000000000000000000000000000000;;	// volume.Provisioner Impl
0000000000000000000000000000000000000000;;	// ************************
0000000000000000000000000000000000000000;;	var _ volume.Provisioner = &sioVolume{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *sioVolume) Provision() (*api.PersistentVolume, error) {
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("attempting to dynamically provision pvc %v", v.options.PVName))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !volume.AccessModesContainedInAll(v.plugin.GetAccessModes(), v.options.PVC.Spec.AccessModes) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("invalid AccessModes %v: only AccessModes %v are supported", v.options.PVC.Spec.AccessModes, v.plugin.GetAccessModes())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// setup volume attrributes
0000000000000000000000000000000000000000;;		name := v.generateVolName()
0000000000000000000000000000000000000000;;		capacity := v.options.PVC.Spec.Resources.Requests[api.ResourceName(api.ResourceStorage)]
0000000000000000000000000000000000000000;;		volSizeBytes := capacity.Value()
0000000000000000000000000000000000000000;;		volSizeGB := int64(volume.RoundUpSize(volSizeBytes, 1024*1024*1024))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create sio manager
0000000000000000000000000000000000000000;;		if err := v.setSioMgrFromConfig(); err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("provision failed while setting up sio mgr: %v", err))
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create volume
0000000000000000000000000000000000000000;;		vol, err := v.sioMgr.CreateVolume(name, volSizeGB)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Error(log("provision failed while creating volume: %v", err))
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// prepare data for pv
0000000000000000000000000000000000000000;;		v.configData[confKey.volumeName] = name
0000000000000000000000000000000000000000;;		sslEnabled, err := strconv.ParseBool(v.configData[confKey.sslEnabled])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Warning(log("failed to parse parameter sslEnabled, setting to false"))
0000000000000000000000000000000000000000;;			sslEnabled = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readOnly, err := strconv.ParseBool(v.configData[confKey.readOnly])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Warning(log("failed to parse parameter readOnly, setting it to false"))
0000000000000000000000000000000000000000;;			readOnly = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// describe created pv
0000000000000000000000000000000000000000;;		pv := &api.PersistentVolume{
0000000000000000000000000000000000000000;;			ObjectMeta: meta.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      v.options.PVName,
0000000000000000000000000000000000000000;;				Namespace: v.options.PVC.Namespace,
0000000000000000000000000000000000000000;;				Labels:    map[string]string{},
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					volumehelper.VolumeDynamicallyCreatedByKey: "scaleio-dynamic-provisioner",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;				PersistentVolumeReclaimPolicy: v.options.PersistentVolumeReclaimPolicy,
0000000000000000000000000000000000000000;;				AccessModes:                   v.options.PVC.Spec.AccessModes,
0000000000000000000000000000000000000000;;				Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse(
0000000000000000000000000000000000000000;;						fmt.Sprintf("%dGi", volSizeGB),
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;					ScaleIO: &api.ScaleIOVolumeSource{
0000000000000000000000000000000000000000;;						Gateway:          v.configData[confKey.gateway],
0000000000000000000000000000000000000000;;						SSLEnabled:       sslEnabled,
0000000000000000000000000000000000000000;;						SecretRef:        &api.LocalObjectReference{Name: v.configData[confKey.secretRef]},
0000000000000000000000000000000000000000;;						System:           v.configData[confKey.system],
0000000000000000000000000000000000000000;;						ProtectionDomain: v.configData[confKey.protectionDomain],
0000000000000000000000000000000000000000;;						StoragePool:      v.configData[confKey.storagePool],
0000000000000000000000000000000000000000;;						StorageMode:      v.configData[confKey.storageMode],
0000000000000000000000000000000000000000;;						VolumeName:       name,
0000000000000000000000000000000000000000;;						FSType:           v.configData[confKey.fsType],
0000000000000000000000000000000000000000;;						ReadOnly:         readOnly,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(v.options.PVC.Spec.AccessModes) == 0 {
0000000000000000000000000000000000000000;;			pv.Spec.AccessModes = v.plugin.GetAccessModes()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("provisioner dynamically created pvc %v with volume %s successfully", pv.Name, vol.Name))
0000000000000000000000000000000000000000;;		return pv, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setSioMgr creates scaleio mgr from cached config data if found
0000000000000000000000000000000000000000;;	// otherwise, setups new config data and create mgr
0000000000000000000000000000000000000000;;	func (v *sioVolume) setSioMgr() error {
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("setting up sio mgr for vol  %s", v.volSpecName))
0000000000000000000000000000000000000000;;		podDir := v.plugin.host.GetPodPluginDir(v.podUID, sioPluginName)
0000000000000000000000000000000000000000;;		configName := path.Join(podDir, sioConfigFileName)
0000000000000000000000000000000000000000;;		if v.sioMgr == nil {
0000000000000000000000000000000000000000;;			configData, err := loadConfig(configName) // try to load config if exist
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;					glog.Error(log("failed to load config %s : %v", configName, err))
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				glog.V(4).Info(log("previous config file not found, creating new one"))
0000000000000000000000000000000000000000;;				// prepare config data
0000000000000000000000000000000000000000;;				configData = make(map[string]string)
0000000000000000000000000000000000000000;;				mapVolumeSource(configData, v.source)
0000000000000000000000000000000000000000;;				if err := validateConfigs(configData); err != nil {
0000000000000000000000000000000000000000;;					glog.Error(log("config setup failed: %s", err))
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				configData[confKey.namespace] = v.namespace
0000000000000000000000000000000000000000;;				configData[confKey.volSpecName] = v.volSpecName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// persist config
0000000000000000000000000000000000000000;;				if err := saveConfig(configName, configData); err != nil {
0000000000000000000000000000000000000000;;					glog.Error(log("failed to save config data: %v", err))
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// merge in secret
0000000000000000000000000000000000000000;;			if err := attachSecret(v.plugin, v.namespace, configData); err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to load secret: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mgr, err := newSioMgr(configData)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to reset sio manager: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			v.sioMgr = mgr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// resetSioMgr creates scaleio manager from existing (cached) config data
0000000000000000000000000000000000000000;;	func (v *sioVolume) resetSioMgr() error {
0000000000000000000000000000000000000000;;		podDir := v.plugin.host.GetPodPluginDir(v.podUID, sioPluginName)
0000000000000000000000000000000000000000;;		configName := path.Join(podDir, sioConfigFileName)
0000000000000000000000000000000000000000;;		if v.sioMgr == nil {
0000000000000000000000000000000000000000;;			// load config data from disk
0000000000000000000000000000000000000000;;			configData, err := loadConfig(configName)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to load config data: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.namespace = configData[confKey.namespace]
0000000000000000000000000000000000000000;;			v.volName = configData[confKey.volumeName]
0000000000000000000000000000000000000000;;			v.volSpecName = configData[confKey.volSpecName]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// attach secret
0000000000000000000000000000000000000000;;			if err := attachSecret(v.plugin, v.namespace, configData); err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to load secret: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mgr, err := newSioMgr(configData)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to reset scaleio mgr: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.sioMgr = mgr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setSioFromConfig sets up scaleio mgr from an available config data map
0000000000000000000000000000000000000000;;	// designed to be called from dynamic provisioner
0000000000000000000000000000000000000000;;	func (v *sioVolume) setSioMgrFromConfig() error {
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("setting scaleio mgr from available config"))
0000000000000000000000000000000000000000;;		if v.sioMgr == nil {
0000000000000000000000000000000000000000;;			configData := v.configData
0000000000000000000000000000000000000000;;			applyConfigDefaults(configData)
0000000000000000000000000000000000000000;;			if err := validateConfigs(configData); err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("config data setup failed: %s", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			configData[confKey.namespace] = v.namespace
0000000000000000000000000000000000000000;;			configData[confKey.volSpecName] = v.volSpecName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// copy config and attach secret
0000000000000000000000000000000000000000;;			data := map[string]string{}
0000000000000000000000000000000000000000;;			for k, v := range configData {
0000000000000000000000000000000000000000;;				data[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := attachSecret(v.plugin, v.namespace, data); err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to load secret: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mgr, err := newSioMgr(data)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed while setting scaleio mgr from config: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.sioMgr = mgr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *sioVolume) setSioMgrFromSpec() error {
0000000000000000000000000000000000000000;;		glog.V(4).Info(log("setting sio manager from spec"))
0000000000000000000000000000000000000000;;		if v.sioMgr == nil {
0000000000000000000000000000000000000000;;			// get config data form spec volume source
0000000000000000000000000000000000000000;;			configData := map[string]string{}
0000000000000000000000000000000000000000;;			mapVolumeSource(configData, v.source)
0000000000000000000000000000000000000000;;			if err := validateConfigs(configData); err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("config setup failed: %s", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			configData[confKey.namespace] = v.namespace
0000000000000000000000000000000000000000;;			configData[confKey.volSpecName] = v.volSpecName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// attach secret object to config data
0000000000000000000000000000000000000000;;			if err := attachSecret(v.plugin, v.namespace, configData); err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to load secret: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mgr, err := newSioMgr(configData)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Error(log("failed to reset sio manager: %v", err))
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v.sioMgr = mgr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *sioVolume) generateVolName() string {
0000000000000000000000000000000000000000;;		return "sio-" + strings.Replace(string(uuid.NewUUID()), "-", "", -1)[0:25]
0000000000000000000000000000000000000000;;	}
