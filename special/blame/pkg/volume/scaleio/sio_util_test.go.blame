0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scaleio
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/gob"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		api "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		vol = &api.Volume{
0000000000000000000000000000000000000000;;			Name: testSioVolName,
0000000000000000000000000000000000000000;;			VolumeSource: api.VolumeSource{
0000000000000000000000000000000000000000;;				ScaleIO: &api.ScaleIOVolumeSource{
0000000000000000000000000000000000000000;;					Gateway:          "http://test.scaleio:1111",
0000000000000000000000000000000000000000;;					System:           "sio",
0000000000000000000000000000000000000000;;					ProtectionDomain: "defaultPD",
0000000000000000000000000000000000000000;;					StoragePool:      "defaultSP",
0000000000000000000000000000000000000000;;					VolumeName:       "test-vol",
0000000000000000000000000000000000000000;;					FSType:           "ext4",
0000000000000000000000000000000000000000;;					SecretRef:        &api.LocalObjectReference{Name: "test-secret"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config = map[string]string{
0000000000000000000000000000000000000000;;			confKey.system:           "sio",
0000000000000000000000000000000000000000;;			confKey.gateway:          "http://sio/",
0000000000000000000000000000000000000000;;			confKey.volSpecName:      testSioVolName,
0000000000000000000000000000000000000000;;			confKey.volumeName:       "sio-vol",
0000000000000000000000000000000000000000;;			confKey.secretRef:        "sio-secret",
0000000000000000000000000000000000000000;;			confKey.protectionDomain: "defaultPD",
0000000000000000000000000000000000000000;;			confKey.storagePool:      "deraultSP",
0000000000000000000000000000000000000000;;			confKey.fsType:           "xfs",
0000000000000000000000000000000000000000;;			confKey.readOnly:         "true",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testConfigFile = "conf.dat"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUtilMapVolumeSource(t *testing.T) {
0000000000000000000000000000000000000000;;		data := make(map[string]string)
0000000000000000000000000000000000000000;;		mapVolumeSource(data, vol.VolumeSource.ScaleIO)
0000000000000000000000000000000000000000;;		if data[confKey.gateway] != "http://test.scaleio:1111" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected gateway value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.system] != "sio" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected system value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.protectionDomain] != "defaultPD" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected protection domain value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.storagePool] != "defaultSP" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected storage pool value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.volumeName] != "test-vol" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected volume name value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.fsType] != "ext4" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected fstype value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.secretRef] != "test-secret" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected secret ref value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.sslEnabled] != "false" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected sslEnabled value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.readOnly] != "false" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected readOnly value: ", data[confKey.readOnly])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUtilValidateConfigs(t *testing.T) {
0000000000000000000000000000000000000000;;		data := map[string]string{
0000000000000000000000000000000000000000;;			confKey.secretRef: "sio-secret",
0000000000000000000000000000000000000000;;			confKey.system:    "sio",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := validateConfigs(data); err != gatewayNotProvidedErr {
0000000000000000000000000000000000000000;;			t.Error("Expecting error for missing gateway, but did not get it")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUtilApplyConfigDefaults(t *testing.T) {
0000000000000000000000000000000000000000;;		data := map[string]string{
0000000000000000000000000000000000000000;;			confKey.system:     "sio",
0000000000000000000000000000000000000000;;			confKey.gateway:    "http://sio/",
0000000000000000000000000000000000000000;;			confKey.volumeName: "sio-vol",
0000000000000000000000000000000000000000;;			confKey.secretRef:  "test-secret",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		applyConfigDefaults(data)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if data[confKey.gateway] != "http://sio/" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected gateway value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.system] != "sio" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected system value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.protectionDomain] != "default" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected protection domain value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.storagePool] != "default" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected storage pool value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.volumeName] != "sio-vol" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected volume name value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.fsType] != "xfs" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected fstype value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.storageMode] != "ThinProvisioned" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected storage mode value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.secretRef] != "test-secret" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected secret ref value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.sslEnabled] != "false" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected sslEnabled value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.readOnly] != "false" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected readOnly value: ", data[confKey.readOnly])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUtilDefaultString(t *testing.T) {
0000000000000000000000000000000000000000;;		if defaultString("", "foo") != "foo" {
0000000000000000000000000000000000000000;;			t.Error("Unexpected value for default value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUtilSaveConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("scaleio-test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't make a temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := path.Join(tmpDir, testConfigFile)
0000000000000000000000000000000000000000;;		data := map[string]string{
0000000000000000000000000000000000000000;;			confKey.gateway:    "https://test-gateway/",
0000000000000000000000000000000000000000;;			confKey.secretRef:  "sio-secret",
0000000000000000000000000000000000000000;;			confKey.sslEnabled: "false",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := saveConfig(config, data); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal("failed while saving data", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		file, err := os.Open(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal("failed to open conf file: ", file)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;		dataRcvd := map[string]string{}
0000000000000000000000000000000000000000;;		if err := gob.NewDecoder(file).Decode(&dataRcvd); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(data, dataRcvd) {
0000000000000000000000000000000000000000;;			t.Error("we got problem, config data not the same")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUtilAttachSecret(t *testing.T) {
0000000000000000000000000000000000000000;;		plugMgr, tmpDir := newPluginMgr(t)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plug, err := plugMgr.FindPluginByName(sioPluginName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Can't find the plugin %v", sioPluginName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sioPlug, ok := plug.(*sioPlugin)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Errorf("Cannot assert plugin to be type sioPlugin")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data := make(map[string]string)
0000000000000000000000000000000000000000;;		for k, v := range config {
0000000000000000000000000000000000000000;;			data[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := attachSecret(sioPlug, "default", data); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("failed to setupConfigData %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if data[confKey.username] == "" {
0000000000000000000000000000000000000000;;			t.Errorf("failed to merge secret")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUtilLoadConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("scaleio-test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't make a temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		configFile := path.Join(tmpDir, sioConfigFileName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := saveConfig(configFile, config); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal("failed while saving data", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dataRcvd, err := loadConfig(configFile)
0000000000000000000000000000000000000000;;		if dataRcvd[confKey.gateway] != config[confKey.gateway] ||
0000000000000000000000000000000000000000;;			dataRcvd[confKey.system] != config[confKey.system] {
0000000000000000000000000000000000000000;;			t.Fatal("loaded config data not matching saved config data")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
