0000000000000000000000000000000000000000;;	// +build linux
a1f748db211e337a48611e2cccf57dc24d03bc32;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package volume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		rwMask = os.FileMode(0660)
0000000000000000000000000000000000000000;;		roMask = os.FileMode(0440)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeOwnership modifies the given volume to be owned by
0000000000000000000000000000000000000000;;	// fsGroup, and sets SetGid so that newly created files are owned by
0000000000000000000000000000000000000000;;	// fsGroup. If fsGroup is nil nothing is done.
0000000000000000000000000000000000000000;;	func SetVolumeOwnership(mounter Mounter, fsGroup *int64) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if fsGroup == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return filepath.Walk(mounter.GetPath(), func(path string, info os.FileInfo, err error) error {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// chown and chmod pass through to the underlying file for symlinks.
0000000000000000000000000000000000000000;;			// Symlinks have a mode of 777 but this really doesn't mean anything.
0000000000000000000000000000000000000000;;			// The permissions of the underlying file are what matter.
0000000000000000000000000000000000000000;;			// However, if one reads the mode of a symlink then chmods the symlink
0000000000000000000000000000000000000000;;			// with that mode, it changes the mode of the underlying file, overridden
0000000000000000000000000000000000000000;;			// the defaultMode and permissions initialized by the volume plugin, which
0000000000000000000000000000000000000000;;			// is not what we want; thus, we skip chown/chmod for symlinks.
0000000000000000000000000000000000000000;;			if info.Mode()&os.ModeSymlink != 0 {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stat, ok := info.Sys().(*syscall.Stat_t)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if stat == nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Got nil stat_t for path %v while setting ownership of volume", path)
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = os.Chown(path, int(stat.Uid), int(*fsGroup))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Chown failed on %v: %v", path, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mask := rwMask
0000000000000000000000000000000000000000;;			if mounter.GetAttributes().ReadOnly {
0000000000000000000000000000000000000000;;				mask = roMask
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if info.IsDir() {
0000000000000000000000000000000000000000;;				mask |= os.ModeSetgid
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = os.Chmod(path, info.Mode()|mask)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("Chmod failed on %v: %v", path, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
