0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d6783a7a91225a89188ff5349f77808a1f0b1b41;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package configmap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/empty_dir"
0000000000000000000000000000000000000000;;		volumetest "k8s.io/kubernetes/pkg/volume/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMakePayload(t *testing.T) {
0000000000000000000000000000000000000000;;		caseMappingMode := int32(0400)
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			mappings  []v1.KeyToPath
0000000000000000000000000000000000000000;;			configMap *v1.ConfigMap
0000000000000000000000000000000000000000;;			mode      int32
0000000000000000000000000000000000000000;;			optional  bool
0000000000000000000000000000000000000000;;			payload   map[string]util.FileProjection
0000000000000000000000000000000000000000;;			success   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no overrides",
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode: 0644,
0000000000000000000000000000000000000000;;				payload: map[string]util.FileProjection{
0000000000000000000000000000000000000000;;					"foo": {Data: []byte("foo"), Mode: 0644},
0000000000000000000000000000000000000000;;					"bar": {Data: []byte("bar"), Mode: 0644},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "basic 1",
0000000000000000000000000000000000000000;;				mappings: []v1.KeyToPath{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "foo",
0000000000000000000000000000000000000000;;						Path: "path/to/foo.txt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode: 0644,
0000000000000000000000000000000000000000;;				payload: map[string]util.FileProjection{
0000000000000000000000000000000000000000;;					"path/to/foo.txt": {Data: []byte("foo"), Mode: 0644},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "subdirs",
0000000000000000000000000000000000000000;;				mappings: []v1.KeyToPath{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "foo",
0000000000000000000000000000000000000000;;						Path: "path/to/1/2/3/foo.txt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode: 0644,
0000000000000000000000000000000000000000;;				payload: map[string]util.FileProjection{
0000000000000000000000000000000000000000;;					"path/to/1/2/3/foo.txt": {Data: []byte("foo"), Mode: 0644},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "subdirs 2",
0000000000000000000000000000000000000000;;				mappings: []v1.KeyToPath{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "foo",
0000000000000000000000000000000000000000;;						Path: "path/to/1/2/3/foo.txt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode: 0644,
0000000000000000000000000000000000000000;;				payload: map[string]util.FileProjection{
0000000000000000000000000000000000000000;;					"path/to/1/2/3/foo.txt": {Data: []byte("foo"), Mode: 0644},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "subdirs 3",
0000000000000000000000000000000000000000;;				mappings: []v1.KeyToPath{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "foo",
0000000000000000000000000000000000000000;;						Path: "path/to/1/2/3/foo.txt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "bar",
0000000000000000000000000000000000000000;;						Path: "another/path/to/the/esteemed/bar.bin",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode: 0644,
0000000000000000000000000000000000000000;;				payload: map[string]util.FileProjection{
0000000000000000000000000000000000000000;;					"path/to/1/2/3/foo.txt":                {Data: []byte("foo"), Mode: 0644},
0000000000000000000000000000000000000000;;					"another/path/to/the/esteemed/bar.bin": {Data: []byte("bar"), Mode: 0644},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "non existent key",
0000000000000000000000000000000000000000;;				mappings: []v1.KeyToPath{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "zab",
0000000000000000000000000000000000000000;;						Path: "path/to/foo.txt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode:    0644,
0000000000000000000000000000000000000000;;				success: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "mapping with Mode",
0000000000000000000000000000000000000000;;				mappings: []v1.KeyToPath{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "foo",
0000000000000000000000000000000000000000;;						Path: "foo.txt",
0000000000000000000000000000000000000000;;						Mode: &caseMappingMode,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "bar",
0000000000000000000000000000000000000000;;						Path: "bar.bin",
0000000000000000000000000000000000000000;;						Mode: &caseMappingMode,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode: 0644,
0000000000000000000000000000000000000000;;				payload: map[string]util.FileProjection{
0000000000000000000000000000000000000000;;					"foo.txt": {Data: []byte("foo"), Mode: caseMappingMode},
0000000000000000000000000000000000000000;;					"bar.bin": {Data: []byte("bar"), Mode: caseMappingMode},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "mapping with defaultMode",
0000000000000000000000000000000000000000;;				mappings: []v1.KeyToPath{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "foo",
0000000000000000000000000000000000000000;;						Path: "foo.txt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "bar",
0000000000000000000000000000000000000000;;						Path: "bar.bin",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode: 0644,
0000000000000000000000000000000000000000;;				payload: map[string]util.FileProjection{
0000000000000000000000000000000000000000;;					"foo.txt": {Data: []byte("foo"), Mode: 0644},
0000000000000000000000000000000000000000;;					"bar.bin": {Data: []byte("bar"), Mode: 0644},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "optional non existent key",
0000000000000000000000000000000000000000;;				mappings: []v1.KeyToPath{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Key:  "zab",
0000000000000000000000000000000000000000;;						Path: "path/to/foo.txt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				configMap: &v1.ConfigMap{
0000000000000000000000000000000000000000;;					Data: map[string]string{
0000000000000000000000000000000000000000;;						"foo": "foo",
0000000000000000000000000000000000000000;;						"bar": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mode:     0644,
0000000000000000000000000000000000000000;;				optional: true,
0000000000000000000000000000000000000000;;				payload:  map[string]util.FileProjection{},
0000000000000000000000000000000000000000;;				success:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			actualPayload, err := MakePayload(tc.mappings, tc.configMap, &tc.mode, tc.optional)
0000000000000000000000000000000000000000;;			if err != nil && tc.success {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected failure making payload: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err == nil && !tc.success {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected success making payload", tc.name)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !tc.success {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if e, a := tc.payload, actualPayload; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected and actual payload do not match", tc.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestHost(t *testing.T, clientset clientset.Interface) (string, volume.VolumeHost) {
0000000000000000000000000000000000000000;;		tempDir, err := ioutil.TempDir("/tmp", "configmap_volume_test.")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't make a temp rootdir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return tempDir, volumetest.NewFakeVolumeHost(tempDir, clientset, empty_dir.ProbeVolumePlugins())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCanSupport(t *testing.T) {
0000000000000000000000000000000000000000;;		pluginMgr := volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;		tempDir, host := newTestHost(t, nil)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tempDir)
0000000000000000000000000000000000000000;;		pluginMgr.InitPlugins(ProbeVolumePlugins(), host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, err := pluginMgr.FindPluginByName(configMapPluginName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Can't find the plugin by name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if plugin.GetPluginName() != configMapPluginName {
0000000000000000000000000000000000000000;;			t.Errorf("Wrong name: %s", plugin.GetPluginName())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !plugin.CanSupport(&volume.Spec{Volume: &v1.Volume{VolumeSource: v1.VolumeSource{ConfigMap: &v1.ConfigMapVolumeSource{LocalObjectReference: v1.LocalObjectReference{Name: ""}}}}}) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if plugin.CanSupport(&volume.Spec{}) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPlugin(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			testPodUID     = types.UID("test_pod_uid")
0000000000000000000000000000000000000000;;			testVolumeName = "test_volume_name"
0000000000000000000000000000000000000000;;			testNamespace  = "test_configmap_namespace"
0000000000000000000000000000000000000000;;			testName       = "test_configmap_name"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			volumeSpec    = volumeSpec(testVolumeName, testName, 0644)
0000000000000000000000000000000000000000;;			configMap     = configMap(testNamespace, testName)
0000000000000000000000000000000000000000;;			client        = fake.NewSimpleClientset(&configMap)
0000000000000000000000000000000000000000;;			pluginMgr     = volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;			tempDir, host = newTestHost(t, client)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tempDir)
0000000000000000000000000000000000000000;;		pluginMgr.InitPlugins(ProbeVolumePlugins(), host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, err := pluginMgr.FindPluginByName(configMapPluginName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Can't find the plugin by name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: testNamespace, UID: testPodUID}}
0000000000000000000000000000000000000000;;		mounter, err := plugin.NewMounter(volume.NewSpecFromVolume(volumeSpec), pod, volume.VolumeOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to make a new Mounter: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mounter == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got a nil Mounter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vName, err := plugin.GetVolumeName(volume.NewSpecFromVolume(volumeSpec))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to GetVolumeName: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vName != "test_volume_name/test_configmap_name" {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpect VolumeName %v", vName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumePath := mounter.GetPath()
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(volumePath, fmt.Sprintf("pods/test_pod_uid/volumes/kubernetes.io~configmap/test_volume_name")) {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected path: %s", volumePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(1001)
0000000000000000000000000000000000000000;;		err = mounter.SetUp(&fsGroup)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to setup volume: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(volumePath); err != nil {
0000000000000000000000000000000000000000;;			if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				t.Errorf("SetUp() failed, volume path not created: %s", volumePath)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Errorf("SetUp() failed: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doTestConfigMapDataInVolume(volumePath, configMap, t)
0000000000000000000000000000000000000000;;		doTestCleanAndTeardown(plugin, testPodUID, testVolumeName, volumePath, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test the case where the plugin's ready file exists, but the volume dir is not a
0000000000000000000000000000000000000000;;	// mountpoint, which is the state the system will be in after reboot.  The dir
0000000000000000000000000000000000000000;;	// should be mounter and the configMap data written to it.
0000000000000000000000000000000000000000;;	func TestPluginReboot(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			testPodUID     = types.UID("test_pod_uid3")
0000000000000000000000000000000000000000;;			testVolumeName = "test_volume_name"
0000000000000000000000000000000000000000;;			testNamespace  = "test_configmap_namespace"
0000000000000000000000000000000000000000;;			testName       = "test_configmap_name"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			volumeSpec    = volumeSpec(testVolumeName, testName, 0644)
0000000000000000000000000000000000000000;;			configMap     = configMap(testNamespace, testName)
0000000000000000000000000000000000000000;;			client        = fake.NewSimpleClientset(&configMap)
0000000000000000000000000000000000000000;;			pluginMgr     = volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;			rootDir, host = newTestHost(t, client)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer os.RemoveAll(rootDir)
0000000000000000000000000000000000000000;;		pluginMgr.InitPlugins(ProbeVolumePlugins(), host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, err := pluginMgr.FindPluginByName(configMapPluginName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Can't find the plugin by name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: testNamespace, UID: testPodUID}}
0000000000000000000000000000000000000000;;		mounter, err := plugin.NewMounter(volume.NewSpecFromVolume(volumeSpec), pod, volume.VolumeOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to make a new Mounter: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mounter == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got a nil Mounter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podMetadataDir := fmt.Sprintf("%v/pods/test_pod_uid3/plugins/kubernetes.io~configmap/test_volume_name", rootDir)
0000000000000000000000000000000000000000;;		util.SetReady(podMetadataDir)
0000000000000000000000000000000000000000;;		volumePath := mounter.GetPath()
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(volumePath, fmt.Sprintf("pods/test_pod_uid3/volumes/kubernetes.io~configmap/test_volume_name")) {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected path: %s", volumePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(1001)
0000000000000000000000000000000000000000;;		err = mounter.SetUp(&fsGroup)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to setup volume: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(volumePath); err != nil {
0000000000000000000000000000000000000000;;			if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				t.Errorf("SetUp() failed, volume path not created: %s", volumePath)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Errorf("SetUp() failed: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doTestConfigMapDataInVolume(volumePath, configMap, t)
0000000000000000000000000000000000000000;;		doTestCleanAndTeardown(plugin, testPodUID, testVolumeName, volumePath, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPluginOptional(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			testPodUID     = types.UID("test_pod_uid")
0000000000000000000000000000000000000000;;			testVolumeName = "test_volume_name"
0000000000000000000000000000000000000000;;			testNamespace  = "test_configmap_namespace"
0000000000000000000000000000000000000000;;			testName       = "test_configmap_name"
0000000000000000000000000000000000000000;;			trueVal        = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			volumeSpec    = volumeSpec(testVolumeName, testName, 0644)
0000000000000000000000000000000000000000;;			client        = fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			pluginMgr     = volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;			tempDir, host = newTestHost(t, client)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		volumeSpec.VolumeSource.ConfigMap.Optional = &trueVal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tempDir)
0000000000000000000000000000000000000000;;		pluginMgr.InitPlugins(ProbeVolumePlugins(), host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, err := pluginMgr.FindPluginByName(configMapPluginName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Can't find the plugin by name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: testNamespace, UID: testPodUID}}
0000000000000000000000000000000000000000;;		mounter, err := plugin.NewMounter(volume.NewSpecFromVolume(volumeSpec), pod, volume.VolumeOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to make a new Mounter: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mounter == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got a nil Mounter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vName, err := plugin.GetVolumeName(volume.NewSpecFromVolume(volumeSpec))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to GetVolumeName: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vName != "test_volume_name/test_configmap_name" {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpect VolumeName %v", vName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumePath := mounter.GetPath()
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(volumePath, fmt.Sprintf("pods/test_pod_uid/volumes/kubernetes.io~configmap/test_volume_name")) {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected path: %s", volumePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(1001)
0000000000000000000000000000000000000000;;		err = mounter.SetUp(&fsGroup)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to setup volume: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(volumePath); err != nil {
0000000000000000000000000000000000000000;;			if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				t.Errorf("SetUp() failed, volume path not created: %s", volumePath)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Errorf("SetUp() failed: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		infos, err := ioutil.ReadDir(volumePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("couldn't find volume path, %s", volumePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(infos) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("empty directory, %s, not found", volumePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		doTestCleanAndTeardown(plugin, testPodUID, testVolumeName, volumePath, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPluginKeysOptional(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			testPodUID     = types.UID("test_pod_uid")
0000000000000000000000000000000000000000;;			testVolumeName = "test_volume_name"
0000000000000000000000000000000000000000;;			testNamespace  = "test_configmap_namespace"
0000000000000000000000000000000000000000;;			testName       = "test_configmap_name"
0000000000000000000000000000000000000000;;			trueVal        = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			volumeSpec    = volumeSpec(testVolumeName, testName, 0644)
0000000000000000000000000000000000000000;;			configMap     = configMap(testNamespace, testName)
0000000000000000000000000000000000000000;;			client        = fake.NewSimpleClientset(&configMap)
0000000000000000000000000000000000000000;;			pluginMgr     = volume.VolumePluginMgr{}
0000000000000000000000000000000000000000;;			tempDir, host = newTestHost(t, client)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		volumeSpec.VolumeSource.ConfigMap.Items = []v1.KeyToPath{
0000000000000000000000000000000000000000;;			{Key: "data-1", Path: "data-1"},
0000000000000000000000000000000000000000;;			{Key: "data-2", Path: "data-2"},
0000000000000000000000000000000000000000;;			{Key: "data-3", Path: "data-3"},
0000000000000000000000000000000000000000;;			{Key: "missing", Path: "missing"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeSpec.VolumeSource.ConfigMap.Optional = &trueVal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tempDir)
0000000000000000000000000000000000000000;;		pluginMgr.InitPlugins(ProbeVolumePlugins(), host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin, err := pluginMgr.FindPluginByName(configMapPluginName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Can't find the plugin by name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: testNamespace, UID: testPodUID}}
0000000000000000000000000000000000000000;;		mounter, err := plugin.NewMounter(volume.NewSpecFromVolume(volumeSpec), pod, volume.VolumeOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to make a new Mounter: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mounter == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got a nil Mounter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vName, err := plugin.GetVolumeName(volume.NewSpecFromVolume(volumeSpec))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to GetVolumeName: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if vName != "test_volume_name/test_configmap_name" {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpect VolumeName %v", vName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumePath := mounter.GetPath()
0000000000000000000000000000000000000000;;		if !strings.HasSuffix(volumePath, fmt.Sprintf("pods/test_pod_uid/volumes/kubernetes.io~configmap/test_volume_name")) {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected path: %s", volumePath)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroup := int64(1001)
0000000000000000000000000000000000000000;;		err = mounter.SetUp(&fsGroup)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to setup volume: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(volumePath); err != nil {
0000000000000000000000000000000000000000;;			if os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				t.Errorf("SetUp() failed, volume path not created: %s", volumePath)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Errorf("SetUp() failed: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doTestConfigMapDataInVolume(volumePath, configMap, t)
0000000000000000000000000000000000000000;;		doTestCleanAndTeardown(plugin, testPodUID, testVolumeName, volumePath, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func volumeSpec(volumeName, configMapName string, defaultMode int32) *v1.Volume {
0000000000000000000000000000000000000000;;		return &v1.Volume{
0000000000000000000000000000000000000000;;			Name: volumeName,
0000000000000000000000000000000000000000;;			VolumeSource: v1.VolumeSource{
0000000000000000000000000000000000000000;;				ConfigMap: &v1.ConfigMapVolumeSource{
0000000000000000000000000000000000000000;;					LocalObjectReference: v1.LocalObjectReference{
0000000000000000000000000000000000000000;;						Name: configMapName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					DefaultMode: &defaultMode,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func configMap(namespace, name string) v1.ConfigMap {
0000000000000000000000000000000000000000;;		return v1.ConfigMap{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: namespace,
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string]string{
0000000000000000000000000000000000000000;;				"data-1": "value-1",
0000000000000000000000000000000000000000;;				"data-2": "value-2",
0000000000000000000000000000000000000000;;				"data-3": "value-3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTestConfigMapDataInVolume(volumePath string, configMap v1.ConfigMap, t *testing.T) {
0000000000000000000000000000000000000000;;		for key, value := range configMap.Data {
0000000000000000000000000000000000000000;;			configMapDataHostPath := path.Join(volumePath, key)
0000000000000000000000000000000000000000;;			if _, err := os.Stat(configMapDataHostPath); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("SetUp() failed, couldn't find configMap data on disk: %v", configMapDataHostPath)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				actualValue, err := ioutil.ReadFile(configMapDataHostPath)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("Couldn't read configMap data from: %v", configMapDataHostPath)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if value != string(actualValue) {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected value; expected %q, got %q", value, actualValue)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func doTestCleanAndTeardown(plugin volume.VolumePlugin, podUID types.UID, testVolumeName, volumePath string, t *testing.T) {
0000000000000000000000000000000000000000;;		unmounter, err := plugin.NewUnmounter(testVolumeName, podUID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to make a new Unmounter: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if unmounter == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got a nil Unmounter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := unmounter.TearDown(); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected success, got: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(volumePath); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("TearDown() failed, volume path still exists: %s", volumePath)
0000000000000000000000000000000000000000;;		} else if !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			t.Errorf("SetUp() failed: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
