0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
11fe0d2921df0a90ecde224aad0db3ceed280ebb;pkg/volume/mock_volume.go[pkg/volume/mock_volume.go][pkg/volume/testing/mock_volume.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/mock"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ORIGINALLY GENERATED BY mockery with hand edits
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MockVolume struct {
0000000000000000000000000000000000000000;;		mock.Mock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPath provides a mock function with given fields:
0000000000000000000000000000000000000000;;	func (_m *MockVolume) GetPath() string {
0000000000000000000000000000000000000000;;		ret := _m.Called()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 string
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func() string); ok {
0000000000000000000000000000000000000000;;			r0 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r0 = ret.Get(0).(string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMetrics provides a mock function with given fields:
0000000000000000000000000000000000000000;;	func (_m *MockVolume) GetMetrics() (*Metrics, error) {
0000000000000000000000000000000000000000;;		ret := _m.Called()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 *Metrics
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func() *Metrics); ok {
0000000000000000000000000000000000000000;;			r0 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if ret.Get(0) != nil {
0000000000000000000000000000000000000000;;				r0 = ret.Get(0).(*Metrics)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 error
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func() error); ok {
0000000000000000000000000000000000000000;;			r1 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Error(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
