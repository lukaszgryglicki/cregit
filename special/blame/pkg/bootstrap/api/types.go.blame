0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
58b00cf2109d4252a689da0583fdafb04029f12c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// BootstrapTokenSecretPrefix is the prefix for bootstrap token names.
0000000000000000000000000000000000000000;;		// Bootstrap tokens secrets must be named in the form
0000000000000000000000000000000000000000;;		// `bootstrap-token-<token-id>`.  This is the prefix to be used before the
0000000000000000000000000000000000000000;;		// token ID.
0000000000000000000000000000000000000000;;		BootstrapTokenSecretPrefix = "bootstrap-token-"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SecretTypeBootstrapToken is used during the automated bootstrap process (first
0000000000000000000000000000000000000000;;		// implemented by kubeadm). It stores tokens that are used to sign well known
0000000000000000000000000000000000000000;;		// ConfigMaps. They may also eventually be used for authentication.
0000000000000000000000000000000000000000;;		SecretTypeBootstrapToken v1.SecretType = "bootstrap.kubernetes.io/token"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapTokenIDKey is the id of this token. This can be transmitted in the
0000000000000000000000000000000000000000;;		// clear and encoded in the name of the secret. It must be a random 6 character
0000000000000000000000000000000000000000;;		// string that matches the regexp `^([a-z0-9]{6})$`. Required.
0000000000000000000000000000000000000000;;		BootstrapTokenIDKey = "token-id"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapTokenSecretKey is the actual secret. It must be a random 16 character
0000000000000000000000000000000000000000;;		// string that matches the regexp `^([a-z0-9]{16})$`. Required.
0000000000000000000000000000000000000000;;		BootstrapTokenSecretKey = "token-secret"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapTokenExpirationKey is when this token should be expired and no
0000000000000000000000000000000000000000;;		// longer used. A controller will delete this resource after this time. This
0000000000000000000000000000000000000000;;		// is an absolute UTC time using RFC3339. If this cannot be parsed, the token
0000000000000000000000000000000000000000;;		// should be considered invalid. Optional.
0000000000000000000000000000000000000000;;		BootstrapTokenExpirationKey = "expiration"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapTokenDescriptionKey is a description in human-readable format that
0000000000000000000000000000000000000000;;		// describes what the bootstrap token is used for. Optional.
0000000000000000000000000000000000000000;;		BootstrapTokenDescriptionKey = "description"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapTokenUsagePrefix is the prefix for the other usage constants that specifies different
0000000000000000000000000000000000000000;;		// functions of a bootstrap token
0000000000000000000000000000000000000000;;		BootstrapTokenUsagePrefix = "usage-bootstrap-"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapTokenUsageSigningKey signals that this token should be used to
0000000000000000000000000000000000000000;;		// sign configs as part of the bootstrap process. Value must be "true". Any
0000000000000000000000000000000000000000;;		// other value is assumed to be false. Optional.
0000000000000000000000000000000000000000;;		BootstrapTokenUsageSigningKey = "usage-bootstrap-signing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapTokenUsageAuthentication signals that this token should be used
0000000000000000000000000000000000000000;;		// as a bearer token to authenticate against the Kubernetes API. The bearer
0000000000000000000000000000000000000000;;		// token takes the form "<token-id>.<token-secret>" and authenticates as the
0000000000000000000000000000000000000000;;		// user "system:bootstrap:<token-id>" in the group "system:bootstrappers".
0000000000000000000000000000000000000000;;		// Value must be "true". Any other value is assumed to be false. Optional.
0000000000000000000000000000000000000000;;		BootstrapTokenUsageAuthentication = "usage-bootstrap-authentication"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConfigMapClusterInfo defines the name for the ConfigMap where the information how to connect and trust the cluster exist
0000000000000000000000000000000000000000;;		ConfigMapClusterInfo = "cluster-info"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// KubeConfigKey defines at which key in the Data object of the ConfigMap the KubeConfig object is stored
0000000000000000000000000000000000000000;;		KubeConfigKey = "kubeconfig"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// JWSSignatureKeyPrefix defines what key prefix the JWS-signed tokens have
0000000000000000000000000000000000000000;;		JWSSignatureKeyPrefix = "jws-kubeconfig-"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapUserPrefix is the username prefix bootstrapping bearer tokens
0000000000000000000000000000000000000000;;		// authenticate as. The full username given is "system:bootstrap:<token-id>".
0000000000000000000000000000000000000000;;		BootstrapUserPrefix = "system:bootstrap:"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BootstrapGroup is the group bootstrapping bearer tokens authenticate in.
0000000000000000000000000000000000000000;;		BootstrapGroup = "system:bootstrappers"
0000000000000000000000000000000000000000;;	)
