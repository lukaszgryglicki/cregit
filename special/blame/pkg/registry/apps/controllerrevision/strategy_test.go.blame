0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c3e4d43523cd7e06b2bcd9ef11513de6227e1e76;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package controllerrevision
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStrategy_NamespaceScoped(t *testing.T) {
0000000000000000000000000000000000000000;;		if !Strategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Error("ControllerRevision strategy must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStrategy_AllowCreateOnUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		if Strategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Error("ControllerRevision should not be created on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStrategy_Validate(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			valid       = newControllerRevision("validname", "validns", newObject(), 0)
0000000000000000000000000000000000000000;;			badRevision = newControllerRevision("validname", "validns", newObject(), -1)
0000000000000000000000000000000000000000;;			emptyName   = newControllerRevision("", "validns", newObject(), 0)
0000000000000000000000000000000000000000;;			invalidName = newControllerRevision("NoUppercaseOrSpecialCharsLike=Equals", "validns", newObject(), 0)
0000000000000000000000000000000000000000;;			emptyNs     = newControllerRevision("validname", "", newObject(), 100)
0000000000000000000000000000000000000000;;			invalidNs   = newControllerRevision("validname", "NoUppercaseOrSpecialCharsLike=Equals", newObject(), 100)
0000000000000000000000000000000000000000;;			nilData     = newControllerRevision("validname", "validns", nil, 0)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			history *apps.ControllerRevision
0000000000000000000000000000000000000000;;			isValid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid":             {valid, true},
0000000000000000000000000000000000000000;;			"negative revision": {badRevision, false},
0000000000000000000000000000000000000000;;			"empty name":        {emptyName, false},
0000000000000000000000000000000000000000;;			"invalid name":      {invalidName, false},
0000000000000000000000000000000000000000;;			"empty namespace":   {emptyNs, false},
0000000000000000000000000000000000000000;;			"invalid namespace": {invalidNs, false},
0000000000000000000000000000000000000000;;			"nil data":          {nilData, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range tests {
0000000000000000000000000000000000000000;;			errs := Strategy.Validate(ctx, tc.history)
0000000000000000000000000000000000000000;;			if tc.isValid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.isValid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected non-error", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStrategy_ValidateUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			valid       = newControllerRevision("validname", "validns", newObject(), 0)
0000000000000000000000000000000000000000;;			changedData = newControllerRevision("validname", "validns",
0000000000000000000000000000000000000000;;				func() runtime.Object {
0000000000000000000000000000000000000000;;					modified := newObject()
0000000000000000000000000000000000000000;;					ss := modified.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;					ss.Name = "cde"
0000000000000000000000000000000000000000;;					return modified
0000000000000000000000000000000000000000;;				}(), 0)
0000000000000000000000000000000000000000;;			changedRevision = newControllerRevision("validname", "validns", newObject(), 1)
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name       string
0000000000000000000000000000000000000000;;			newHistory *apps.ControllerRevision
0000000000000000000000000000000000000000;;			oldHistory *apps.ControllerRevision
0000000000000000000000000000000000000000;;			isValid    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "valid",
0000000000000000000000000000000000000000;;				newHistory: valid,
0000000000000000000000000000000000000000;;				oldHistory: valid,
0000000000000000000000000000000000000000;;				isValid:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "changed data",
0000000000000000000000000000000000000000;;				newHistory: changedData,
0000000000000000000000000000000000000000;;				oldHistory: valid,
0000000000000000000000000000000000000000;;				isValid:    false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:       "changed revision",
0000000000000000000000000000000000000000;;				newHistory: changedRevision,
0000000000000000000000000000000000000000;;				oldHistory: valid,
0000000000000000000000000000000000000000;;				isValid:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			errs := Strategy.ValidateUpdate(ctx, tc.newHistory, tc.oldHistory)
0000000000000000000000000000000000000000;;			if tc.isValid && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", tc.name, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !tc.isValid && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected non-error", tc.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestControllerRevisionToSelectableFields(t *testing.T) {
0000000000000000000000000000000000000000;;		rev := newControllerRevision("validname", "validns", newObject(), 0)
0000000000000000000000000000000000000000;;		fieldSet := ControllerRevisionToSelectableFields(rev)
0000000000000000000000000000000000000000;;		if fieldSet.Get("metadata.name") != rev.Name {
0000000000000000000000000000000000000000;;			t.Errorf("expeted %s found %s", rev.Name, fieldSet.Get("metadata.name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fieldSet.Get("metadata.namespace") != rev.Namespace {
0000000000000000000000000000000000000000;;			t.Errorf("expeted %s found %s", rev.Namespace, fieldSet.Get("metadata.namespace"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetAttrs(t *testing.T) {
0000000000000000000000000000000000000000;;		rev := newControllerRevision("validname", "validns", newObject(), 0)
0000000000000000000000000000000000000000;;		labelSet, fieldSet, uninitialized, err := GetAttrs(rev)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if uninitialized {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected attrs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fieldSet.Get("metadata.name") != rev.Name {
0000000000000000000000000000000000000000;;			t.Errorf("expeted %s found %s", rev.Name, fieldSet.Get("metadata.name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fieldSet.Get("metadata.namespace") != rev.Namespace {
0000000000000000000000000000000000000000;;			t.Errorf("expeted %s found %s", rev.Namespace, fieldSet.Get("metadata.namespace"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if labelSet.Get("foo") != rev.Labels["foo"] {
0000000000000000000000000000000000000000;;			t.Errorf("expected %s found %s", rev.Labels["foo"], labelSet.Get("foo"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMatchControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		rev := newControllerRevision("validname", "validns", newObject(), 0)
0000000000000000000000000000000000000000;;		ls := labels.SelectorFromSet(labels.Set(rev.Labels))
0000000000000000000000000000000000000000;;		pred := MatchControllerRevision(ls, nil)
0000000000000000000000000000000000000000;;		if matches, err := pred.Matches(rev); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		} else if !matches {
0000000000000000000000000000000000000000;;			t.Error("failed to match ControllerRevision by labels")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fs := fields.SelectorFromSet(ControllerRevisionToSelectableFields(rev))
0000000000000000000000000000000000000000;;		pred = MatchControllerRevision(ls, fs)
0000000000000000000000000000000000000000;;		if matches, err := pred.Matches(rev); err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		} else if !matches {
0000000000000000000000000000000000000000;;			t.Error("failed to match ControllerRevision by fields")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newControllerRevision(name, namespace string, data runtime.Object, revision int64) *apps.ControllerRevision {
0000000000000000000000000000000000000000;;		return &apps.ControllerRevision{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            name,
0000000000000000000000000000000000000000;;				Namespace:       namespace,
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;				Labels:          map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data:     data,
0000000000000000000000000000000000000000;;			Revision: revision,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newObject() runtime.Object {
0000000000000000000000000000000000000000;;		return &apps.StatefulSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;			Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;				Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
