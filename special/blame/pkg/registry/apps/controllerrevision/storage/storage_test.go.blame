0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c3e4d43523cd7e06b2bcd9ef11513de6227e1e76;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			valid       = stripObjectMeta(newControllerRevision("validname", metav1.NamespaceDefault, newObject(), 0))
0000000000000000000000000000000000000000;;			badRevision = stripObjectMeta(newControllerRevision("validname", "validns", newObject(), -1))
0000000000000000000000000000000000000000;;			emptyName   = stripObjectMeta(newControllerRevision("", "validns", newObject(), 0))
0000000000000000000000000000000000000000;;			invalidName = stripObjectMeta(newControllerRevision("NoUppercaseOrSpecialCharsLike=Equals", "validns", newObject(), 0))
0000000000000000000000000000000000000000;;			emptyNs     = stripObjectMeta(newControllerRevision("validname", "", newObject(), 100))
0000000000000000000000000000000000000000;;			invalidNs   = stripObjectMeta(newControllerRevision("validname", "NoUppercaseOrSpecialCharsLike=Equals", newObject(), 100))
0000000000000000000000000000000000000000;;			nilData     = stripObjectMeta(newControllerRevision("validname", "validns", nil, 0))
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			valid,
0000000000000000000000000000000000000000;;			badRevision,
0000000000000000000000000000000000000000;;			emptyName,
0000000000000000000000000000000000000000;;			invalidName,
0000000000000000000000000000000000000000;;			emptyNs,
0000000000000000000000000000000000000000;;			invalidNs,
0000000000000000000000000000000000000000;;			nilData)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		addLabel := func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;			rev := obj.(*apps.ControllerRevision)
0000000000000000000000000000000000000000;;			update := &apps.ControllerRevision{
0000000000000000000000000000000000000000;;				ObjectMeta: rev.ObjectMeta,
0000000000000000000000000000000000000000;;				Data:       rev.Data,
0000000000000000000000000000000000000000;;				Revision:   rev.Revision,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			update.ObjectMeta.Labels = map[string]string{"foo": "bar"}
0000000000000000000000000000000000000000;;			return update
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		updateData := func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;			rev := obj.(*apps.ControllerRevision)
0000000000000000000000000000000000000000;;			modified := newObject()
0000000000000000000000000000000000000000;;			ss := modified.(*apps.StatefulSet)
0000000000000000000000000000000000000000;;			ss.Name = "cde"
0000000000000000000000000000000000000000;;			update := &apps.ControllerRevision{
0000000000000000000000000000000000000000;;				ObjectMeta: rev.ObjectMeta,
0000000000000000000000000000000000000000;;				Data:       ss,
0000000000000000000000000000000000000000;;				Revision:   rev.Revision + 1,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return update
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.TestUpdate(stripObjectMeta(newControllerRevision("validname", metav1.NamespaceDefault, newObject(), 0)),
0000000000000000000000000000000000000000;;			addLabel,
0000000000000000000000000000000000000000;;			updateData)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestGet(newControllerRevision("valid", metav1.NamespaceDefault, newObject(), 0))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestList(newControllerRevision("valid", metav1.NamespaceDefault, newObject(), 0))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestDelete(newControllerRevision("valid", metav1.NamespaceDefault, newObject(), 0))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			newControllerRevision("valid", metav1.NamespaceDefault, newObject(), 0),
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"hoo": "baz"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "valid"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "nomatch"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newControllerRevision(name, namespace string, data runtime.Object, revision int64) *apps.ControllerRevision {
0000000000000000000000000000000000000000;;		return &apps.ControllerRevision{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: namespace,
0000000000000000000000000000000000000000;;				Labels:    map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data:     data,
0000000000000000000000000000000000000000;;			Revision: revision,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stripObjectMeta(revision *apps.ControllerRevision) *apps.ControllerRevision {
0000000000000000000000000000000000000000;;		revision.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		return revision
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*REST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, apps.GroupName)
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           etcdStorage,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 1,
0000000000000000000000000000000000000000;;			ResourcePrefix:          "controllerrevisions"}
0000000000000000000000000000000000000000;;		storage := NewREST(restOptions)
0000000000000000000000000000000000000000;;		return storage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newObject() runtime.Object {
0000000000000000000000000000000000000000;;		return &apps.StatefulSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;			Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;				Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
