0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0052744ee0b9927cdc22918b9bf9ffd042afcb84;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		authorizationapi "k8s.io/kubernetes/pkg/apis/authorization"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceAttributesFrom combines the API object information and the user.Info from the context to build a full authorizer.AttributesRecord for resource access
0000000000000000000000000000000000000000;;	func ResourceAttributesFrom(user user.Info, in authorizationapi.ResourceAttributes) authorizer.AttributesRecord {
0000000000000000000000000000000000000000;;		return authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;			User:            user,
0000000000000000000000000000000000000000;;			Verb:            in.Verb,
0000000000000000000000000000000000000000;;			Namespace:       in.Namespace,
0000000000000000000000000000000000000000;;			APIGroup:        in.Group,
0000000000000000000000000000000000000000;;			APIVersion:      in.Version,
0000000000000000000000000000000000000000;;			Resource:        in.Resource,
0000000000000000000000000000000000000000;;			Subresource:     in.Subresource,
0000000000000000000000000000000000000000;;			Name:            in.Name,
0000000000000000000000000000000000000000;;			ResourceRequest: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NonResourceAttributesFrom combines the API object information and the user.Info from the context to build a full authorizer.AttributesRecord for non resource access
0000000000000000000000000000000000000000;;	func NonResourceAttributesFrom(user user.Info, in authorizationapi.NonResourceAttributes) authorizer.AttributesRecord {
0000000000000000000000000000000000000000;;		return authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;			User:            user,
0000000000000000000000000000000000000000;;			ResourceRequest: false,
0000000000000000000000000000000000000000;;			Path:            in.Path,
0000000000000000000000000000000000000000;;			Verb:            in.Verb,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func convertToUserInfoExtra(extra map[string]authorizationapi.ExtraValue) map[string][]string {
0000000000000000000000000000000000000000;;		if extra == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := map[string][]string{}
0000000000000000000000000000000000000000;;		for k, v := range extra {
0000000000000000000000000000000000000000;;			ret[k] = []string(v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizationAttributesFrom takes a spec and returns the proper authz attributes to check it.
0000000000000000000000000000000000000000;;	func AuthorizationAttributesFrom(spec authorizationapi.SubjectAccessReviewSpec) authorizer.AttributesRecord {
0000000000000000000000000000000000000000;;		userToCheck := &user.DefaultInfo{
0000000000000000000000000000000000000000;;			Name:   spec.User,
0000000000000000000000000000000000000000;;			Groups: spec.Groups,
0000000000000000000000000000000000000000;;			Extra:  convertToUserInfoExtra(spec.Extra),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var authorizationAttributes authorizer.AttributesRecord
0000000000000000000000000000000000000000;;		if spec.ResourceAttributes != nil {
0000000000000000000000000000000000000000;;			authorizationAttributes = ResourceAttributesFrom(userToCheck, *spec.ResourceAttributes)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			authorizationAttributes = NonResourceAttributesFrom(userToCheck, *spec.NonResourceAttributes)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return authorizationAttributes
0000000000000000000000000000000000000000;;	}
