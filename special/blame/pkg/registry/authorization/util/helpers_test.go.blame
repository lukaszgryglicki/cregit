0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6a07530a82582b50cd2d98d8383eb66eb33c4a49;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		authorizationapi "k8s.io/kubernetes/pkg/apis/authorization"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceAttributesFrom(t *testing.T) {
0000000000000000000000000000000000000000;;		knownResourceAttributesNames := sets.NewString(
0000000000000000000000000000000000000000;;			// Fields we copy in ResourceAttributesFrom
0000000000000000000000000000000000000000;;			"Verb",
0000000000000000000000000000000000000000;;			"Namespace",
0000000000000000000000000000000000000000;;			"Group",
0000000000000000000000000000000000000000;;			"Version",
0000000000000000000000000000000000000000;;			"Resource",
0000000000000000000000000000000000000000;;			"Subresource",
0000000000000000000000000000000000000000;;			"Name",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Fields we copy in NonResourceAttributesFrom
0000000000000000000000000000000000000000;;			"Path",
0000000000000000000000000000000000000000;;			"Verb",
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		reflect.TypeOf(authorizationapi.ResourceAttributes{}).FieldByNameFunc(func(name string) bool {
0000000000000000000000000000000000000000;;			if !knownResourceAttributesNames.Has(name) {
0000000000000000000000000000000000000000;;				t.Errorf("authorizationapi.ResourceAttributes has a new field: %q. Add to ResourceAttributesFrom/NonResourceAttributesFrom as appropriate, then add to knownResourceAttributesNames", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		knownAttributesRecordFieldNames := sets.NewString(
0000000000000000000000000000000000000000;;			// Fields we set in ResourceAttributesFrom
0000000000000000000000000000000000000000;;			"User",
0000000000000000000000000000000000000000;;			"Verb",
0000000000000000000000000000000000000000;;			"Namespace",
0000000000000000000000000000000000000000;;			"APIGroup",
0000000000000000000000000000000000000000;;			"APIVersion",
0000000000000000000000000000000000000000;;			"Resource",
0000000000000000000000000000000000000000;;			"Subresource",
0000000000000000000000000000000000000000;;			"Name",
0000000000000000000000000000000000000000;;			"ResourceRequest",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Fields we set in NonResourceAttributesFrom
0000000000000000000000000000000000000000;;			"User",
0000000000000000000000000000000000000000;;			"ResourceRequest",
0000000000000000000000000000000000000000;;			"Path",
0000000000000000000000000000000000000000;;			"Verb",
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		reflect.TypeOf(authorizer.AttributesRecord{}).FieldByNameFunc(func(name string) bool {
0000000000000000000000000000000000000000;;			if !knownAttributesRecordFieldNames.Has(name) {
0000000000000000000000000000000000000000;;				t.Errorf("authorizer.AttributesRecord has a new field: %q. Add to ResourceAttributesFrom/NonResourceAttributesFrom as appropriate, then add to knownAttributesRecordFieldNames", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
