0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6a07530a82582b50cd2d98d8383eb66eb33c4a49;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package subjectaccessreview
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		authorizationapi "k8s.io/kubernetes/pkg/apis/authorization"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeAuthorizer struct {
0000000000000000000000000000000000000000;;		attrs authorizer.Attributes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok     bool
0000000000000000000000000000000000000000;;		reason string
0000000000000000000000000000000000000000;;		err    error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAuthorizer) Authorize(attrs authorizer.Attributes) (bool, string, error) {
0000000000000000000000000000000000000000;;		f.attrs = attrs
0000000000000000000000000000000000000000;;		return f.ok, f.reason, f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			spec   authorizationapi.SubjectAccessReviewSpec
0000000000000000000000000000000000000000;;			ok     bool
0000000000000000000000000000000000000000;;			reason string
0000000000000000000000000000000000000000;;			err    error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedErr    string
0000000000000000000000000000000000000000;;			expectedAttrs  authorizer.Attributes
0000000000000000000000000000000000000000;;			expectedStatus authorizationapi.SubjectAccessReviewStatus
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				expectedErr: "nonResourceAttributes or resourceAttributes",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"nonresource rejected": {
0000000000000000000000000000000000000000;;				spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;					User: "bob",
0000000000000000000000000000000000000000;;					NonResourceAttributes: &authorizationapi.NonResourceAttributes{Verb: "get", Path: "/mypath"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ok:     false,
0000000000000000000000000000000000000000;;				reason: "myreason",
0000000000000000000000000000000000000000;;				err:    errors.New("myerror"),
0000000000000000000000000000000000000000;;				expectedAttrs: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User:            &user.DefaultInfo{Name: "bob"},
0000000000000000000000000000000000000000;;					Verb:            "get",
0000000000000000000000000000000000000000;;					Path:            "/mypath",
0000000000000000000000000000000000000000;;					ResourceRequest: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed:         false,
0000000000000000000000000000000000000000;;					Reason:          "myreason",
0000000000000000000000000000000000000000;;					EvaluationError: "myerror",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"nonresource allowed": {
0000000000000000000000000000000000000000;;				spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;					User: "bob",
0000000000000000000000000000000000000000;;					NonResourceAttributes: &authorizationapi.NonResourceAttributes{Verb: "get", Path: "/mypath"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ok:     true,
0000000000000000000000000000000000000000;;				reason: "allowed",
0000000000000000000000000000000000000000;;				err:    nil,
0000000000000000000000000000000000000000;;				expectedAttrs: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User:            &user.DefaultInfo{Name: "bob"},
0000000000000000000000000000000000000000;;					Verb:            "get",
0000000000000000000000000000000000000000;;					Path:            "/mypath",
0000000000000000000000000000000000000000;;					ResourceRequest: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed:         true,
0000000000000000000000000000000000000000;;					Reason:          "allowed",
0000000000000000000000000000000000000000;;					EvaluationError: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"resource rejected": {
0000000000000000000000000000000000000000;;				spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;					User: "bob",
0000000000000000000000000000000000000000;;					ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;						Namespace:   "myns",
0000000000000000000000000000000000000000;;						Verb:        "create",
0000000000000000000000000000000000000000;;						Group:       "extensions",
0000000000000000000000000000000000000000;;						Version:     "v1beta1",
0000000000000000000000000000000000000000;;						Resource:    "deployments",
0000000000000000000000000000000000000000;;						Subresource: "scale",
0000000000000000000000000000000000000000;;						Name:        "mydeployment",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ok:     false,
0000000000000000000000000000000000000000;;				reason: "myreason",
0000000000000000000000000000000000000000;;				err:    errors.New("myerror"),
0000000000000000000000000000000000000000;;				expectedAttrs: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User:            &user.DefaultInfo{Name: "bob"},
0000000000000000000000000000000000000000;;					Namespace:       "myns",
0000000000000000000000000000000000000000;;					Verb:            "create",
0000000000000000000000000000000000000000;;					APIGroup:        "extensions",
0000000000000000000000000000000000000000;;					APIVersion:      "v1beta1",
0000000000000000000000000000000000000000;;					Resource:        "deployments",
0000000000000000000000000000000000000000;;					Subresource:     "scale",
0000000000000000000000000000000000000000;;					Name:            "mydeployment",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed:         false,
0000000000000000000000000000000000000000;;					Reason:          "myreason",
0000000000000000000000000000000000000000;;					EvaluationError: "myerror",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"resource allowed": {
0000000000000000000000000000000000000000;;				spec: authorizationapi.SubjectAccessReviewSpec{
0000000000000000000000000000000000000000;;					User: "bob",
0000000000000000000000000000000000000000;;					ResourceAttributes: &authorizationapi.ResourceAttributes{
0000000000000000000000000000000000000000;;						Namespace:   "myns",
0000000000000000000000000000000000000000;;						Verb:        "create",
0000000000000000000000000000000000000000;;						Group:       "extensions",
0000000000000000000000000000000000000000;;						Version:     "v1beta1",
0000000000000000000000000000000000000000;;						Resource:    "deployments",
0000000000000000000000000000000000000000;;						Subresource: "scale",
0000000000000000000000000000000000000000;;						Name:        "mydeployment",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ok:     true,
0000000000000000000000000000000000000000;;				reason: "allowed",
0000000000000000000000000000000000000000;;				err:    nil,
0000000000000000000000000000000000000000;;				expectedAttrs: authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					User:            &user.DefaultInfo{Name: "bob"},
0000000000000000000000000000000000000000;;					Namespace:       "myns",
0000000000000000000000000000000000000000;;					Verb:            "create",
0000000000000000000000000000000000000000;;					APIGroup:        "extensions",
0000000000000000000000000000000000000000;;					APIVersion:      "v1beta1",
0000000000000000000000000000000000000000;;					Resource:        "deployments",
0000000000000000000000000000000000000000;;					Subresource:     "scale",
0000000000000000000000000000000000000000;;					Name:            "mydeployment",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatus: authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;					Allowed:         true,
0000000000000000000000000000000000000000;;					Reason:          "allowed",
0000000000000000000000000000000000000000;;					EvaluationError: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			auth := &fakeAuthorizer{
0000000000000000000000000000000000000000;;				ok:     tc.ok,
0000000000000000000000000000000000000000;;				reason: tc.reason,
0000000000000000000000000000000000000000;;				err:    tc.err,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rest := NewREST(auth)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err := rest.Create(genericapirequest.NewContext(), &authorizationapi.SubjectAccessReview{Spec: tc.spec}, false)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if tc.expectedErr != "" {
0000000000000000000000000000000000000000;;					if !strings.Contains(err.Error(), tc.expectedErr) {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected %s to contain %q", k, err, tc.expectedErr)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					t.Errorf("%s: %v", k, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(auth.attrs, tc.expectedAttrs) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected\n%#v\ngot\n%#v", k, tc.expectedAttrs, auth.attrs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			status := result.(*authorizationapi.SubjectAccessReview).Status
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(status, tc.expectedStatus) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected\n%#v\ngot\n%#v", k, tc.expectedStatus, status)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
