0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0052744ee0b9927cdc22918b9bf9ffd042afcb84;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package subjectaccessreview
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kapierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		authorizationapi "k8s.io/kubernetes/pkg/apis/authorization"
0000000000000000000000000000000000000000;;		authorizationvalidation "k8s.io/kubernetes/pkg/apis/authorization/validation"
0000000000000000000000000000000000000000;;		authorizationutil "k8s.io/kubernetes/pkg/registry/authorization/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		authorizer authorizer.Authorizer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewREST(authorizer authorizer.Authorizer) *REST {
0000000000000000000000000000000000000000;;		return &REST{authorizer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *REST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &authorizationapi.SubjectAccessReview{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *REST) Create(ctx genericapirequest.Context, obj runtime.Object, includeUninitialized bool) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		subjectAccessReview, ok := obj.(*authorizationapi.SubjectAccessReview)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, kapierrors.NewBadRequest(fmt.Sprintf("not a SubjectAccessReview: %#v", obj))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := authorizationvalidation.ValidateSubjectAccessReview(subjectAccessReview); len(errs) > 0 {
0000000000000000000000000000000000000000;;			return nil, kapierrors.NewInvalid(authorizationapi.Kind(subjectAccessReview.Kind), "", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authorizationAttributes := authorizationutil.AuthorizationAttributesFrom(subjectAccessReview.Spec)
0000000000000000000000000000000000000000;;		allowed, reason, evaluationErr := r.authorizer.Authorize(authorizationAttributes)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		subjectAccessReview.Status = authorizationapi.SubjectAccessReviewStatus{
0000000000000000000000000000000000000000;;			Allowed: allowed,
0000000000000000000000000000000000000000;;			Reason:  reason,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if evaluationErr != nil {
0000000000000000000000000000000000000000;;			subjectAccessReview.Status.EvaluationError = evaluationErr.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return subjectAccessReview, nil
0000000000000000000000000000000000000000;;	}
