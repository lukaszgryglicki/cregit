0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
1237530784a7997bfb6109bf25c6341a7dfafd2f;pkg/registry/cloud_minion_registry.go[pkg/registry/cloud_minion_registry.go][pkg/registry/registrytest/node.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package registrytest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metainternalversion "k8s.io/apimachinery/pkg/apis/meta/internalversion"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeRegistry implements node.Registry interface.
0000000000000000000000000000000000000000;;	type NodeRegistry struct {
0000000000000000000000000000000000000000;;		Err   error
0000000000000000000000000000000000000000;;		Node  string
0000000000000000000000000000000000000000;;		Nodes api.NodeList
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeNodeList constructs api.NodeList from list of node names and a NodeResource.
0000000000000000000000000000000000000000;;	func MakeNodeList(nodes []string, nodeResources api.NodeResources) *api.NodeList {
0000000000000000000000000000000000000000;;		list := api.NodeList{
0000000000000000000000000000000000000000;;			Items: make([]api.Node, len(nodes)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range nodes {
0000000000000000000000000000000000000000;;			list.Items[i].Name = nodes[i]
0000000000000000000000000000000000000000;;			list.Items[i].Status.Capacity = nodeResources.Capacity
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &list
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNodeRegistry(nodes []string, nodeResources api.NodeResources) *NodeRegistry {
0000000000000000000000000000000000000000;;		return &NodeRegistry{
0000000000000000000000000000000000000000;;			Nodes: *MakeNodeList(nodes, nodeResources),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *NodeRegistry) SetError(err error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;		r.Err = err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *NodeRegistry) ListNodes(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (*api.NodeList, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;		return &r.Nodes, r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *NodeRegistry) CreateNode(ctx genericapirequest.Context, node *api.Node) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;		r.Node = node.Name
0000000000000000000000000000000000000000;;		r.Nodes.Items = append(r.Nodes.Items, *node)
0000000000000000000000000000000000000000;;		return r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *NodeRegistry) UpdateNode(ctx genericapirequest.Context, node *api.Node) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;		for i, item := range r.Nodes.Items {
0000000000000000000000000000000000000000;;			if item.Name == node.Name {
0000000000000000000000000000000000000000;;				r.Nodes.Items[i] = *node
0000000000000000000000000000000000000000;;				return r.Err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *NodeRegistry) GetNode(ctx genericapirequest.Context, nodeID string, options *metav1.GetOptions) (*api.Node, error) {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;		if r.Err != nil {
0000000000000000000000000000000000000000;;			return nil, r.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, node := range r.Nodes.Items {
0000000000000000000000000000000000000000;;			if node.Name == nodeID {
0000000000000000000000000000000000000000;;				return &node, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.NewNotFound(api.Resource("nodes"), nodeID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *NodeRegistry) DeleteNode(ctx genericapirequest.Context, nodeID string) error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;		var newList []api.Node
0000000000000000000000000000000000000000;;		for _, node := range r.Nodes.Items {
0000000000000000000000000000000000000000;;			if node.Name != nodeID {
0000000000000000000000000000000000000000;;				newList = append(newList, api.Node{ObjectMeta: metav1.ObjectMeta{Name: node.Name}})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.Nodes.Items = newList
0000000000000000000000000000000000000000;;		return r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *NodeRegistry) WatchNodes(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return nil, r.Err
0000000000000000000000000000000000000000;;	}
