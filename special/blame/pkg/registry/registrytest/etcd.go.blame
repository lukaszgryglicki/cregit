0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
cbd410d923e50f6f3d85338065070eb9aadf5e98;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package registrytest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest/resttest"
0000000000000000000000000000000000000000;;		etcdstorage "k8s.io/apiserver/pkg/storage/etcd"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;		storagetesting "k8s.io/apiserver/pkg/storage/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewEtcdStorage(t *testing.T, group string) (*storagebackend.Config, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		server, config := etcdtesting.NewUnsecuredEtcd3TestClientServer(t, api.Scheme)
0000000000000000000000000000000000000000;;		config.Codec = testapi.Groups[group].StorageCodec()
0000000000000000000000000000000000000000;;		return config, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Tester struct {
0000000000000000000000000000000000000000;;		tester  *resttest.Tester
0000000000000000000000000000000000000000;;		storage *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	type UpdateFunc func(runtime.Object) runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(t *testing.T, storage *genericregistry.Store) *Tester {
0000000000000000000000000000000000000000;;		return &Tester{
0000000000000000000000000000000000000000;;			tester:  resttest.New(t, storage, api.Scheme),
0000000000000000000000000000000000000000;;			storage: storage,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) TestNamespace() string {
0000000000000000000000000000000000000000;;		return t.tester.TestNamespace()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) ClusterScope() *Tester {
0000000000000000000000000000000000000000;;		t.tester = t.tester.ClusterScope()
0000000000000000000000000000000000000000;;		return t
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) Namer(namer func(int) string) *Tester {
0000000000000000000000000000000000000000;;		t.tester = t.tester.Namer(namer)
0000000000000000000000000000000000000000;;		return t
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) AllowCreateOnUpdate() *Tester {
0000000000000000000000000000000000000000;;		t.tester = t.tester.AllowCreateOnUpdate()
0000000000000000000000000000000000000000;;		return t
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) GeneratesName() *Tester {
0000000000000000000000000000000000000000;;		t.tester = t.tester.GeneratesName()
0000000000000000000000000000000000000000;;		return t
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) ReturnDeletedObject() *Tester {
0000000000000000000000000000000000000000;;		t.tester = t.tester.ReturnDeletedObject()
0000000000000000000000000000000000000000;;		return t
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) TestCreate(valid runtime.Object, invalid ...runtime.Object) {
0000000000000000000000000000000000000000;;		t.tester.TestCreate(
0000000000000000000000000000000000000000;;			valid,
0000000000000000000000000000000000000000;;			t.createObject,
0000000000000000000000000000000000000000;;			t.getObject,
0000000000000000000000000000000000000000;;			invalid...,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) TestUpdate(valid runtime.Object, validUpdateFunc UpdateFunc, invalidUpdateFunc ...UpdateFunc) {
0000000000000000000000000000000000000000;;		var invalidFuncs []resttest.UpdateFunc
0000000000000000000000000000000000000000;;		for _, f := range invalidUpdateFunc {
0000000000000000000000000000000000000000;;			invalidFuncs = append(invalidFuncs, resttest.UpdateFunc(f))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.tester.TestUpdate(
0000000000000000000000000000000000000000;;			valid,
0000000000000000000000000000000000000000;;			t.createObject,
0000000000000000000000000000000000000000;;			t.getObject,
0000000000000000000000000000000000000000;;			resttest.UpdateFunc(validUpdateFunc),
0000000000000000000000000000000000000000;;			invalidFuncs...,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) TestDelete(valid runtime.Object) {
0000000000000000000000000000000000000000;;		t.tester.TestDelete(
0000000000000000000000000000000000000000;;			valid,
0000000000000000000000000000000000000000;;			t.createObject,
0000000000000000000000000000000000000000;;			t.getObject,
0000000000000000000000000000000000000000;;			errors.IsNotFound,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) TestDeleteGraceful(valid runtime.Object, expectedGrace int64) {
0000000000000000000000000000000000000000;;		t.tester.TestDeleteGraceful(
0000000000000000000000000000000000000000;;			valid,
0000000000000000000000000000000000000000;;			t.createObject,
0000000000000000000000000000000000000000;;			t.getObject,
0000000000000000000000000000000000000000;;			expectedGrace,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) TestGet(valid runtime.Object) {
0000000000000000000000000000000000000000;;		t.tester.TestGet(valid)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) TestList(valid runtime.Object) {
0000000000000000000000000000000000000000;;		t.tester.TestList(
0000000000000000000000000000000000000000;;			valid,
0000000000000000000000000000000000000000;;			t.setObjectsForList,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) TestWatch(valid runtime.Object, labelsPass, labelsFail []labels.Set, fieldsPass, fieldsFail []fields.Set) {
0000000000000000000000000000000000000000;;		t.tester.TestWatch(
0000000000000000000000000000000000000000;;			valid,
0000000000000000000000000000000000000000;;			t.emitObject,
0000000000000000000000000000000000000000;;			labelsPass,
0000000000000000000000000000000000000000;;			labelsFail,
0000000000000000000000000000000000000000;;			fieldsPass,
0000000000000000000000000000000000000000;;			fieldsFail,
0000000000000000000000000000000000000000;;			// TODO: This should be filtered, the registry should not be aware of this level of detail
0000000000000000000000000000000000000000;;			[]string{etcdstorage.EtcdCreate, etcdstorage.EtcdDelete},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// =============================================================================
0000000000000000000000000000000000000000;;	// get codec based on runtime.Object
0000000000000000000000000000000000000000;;	func getCodec(obj runtime.Object) (runtime.Codec, error) {
0000000000000000000000000000000000000000;;		fqKinds, _, err := api.Scheme.ObjectKinds(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fqKind := fqKinds[0]
0000000000000000000000000000000000000000;;		// TODO: caesarxuchao: we should detect which group an object belongs to
0000000000000000000000000000000000000000;;		// by using the version returned by Schem.ObjectVersionAndKind() once we
0000000000000000000000000000000000000000;;		// split the schemes for internal objects.
0000000000000000000000000000000000000000;;		// TODO: caesarxuchao: we should add a map from kind to group in Scheme.
0000000000000000000000000000000000000000;;		var codec runtime.Codec
0000000000000000000000000000000000000000;;		if api.Scheme.Recognizes(api.Registry.GroupOrDie(api.GroupName).GroupVersion.WithKind(fqKind.Kind)) {
0000000000000000000000000000000000000000;;			codec = testapi.Default.Codec()
0000000000000000000000000000000000000000;;		} else if api.Scheme.Recognizes(testapi.Extensions.GroupVersion().WithKind(fqKind.Kind)) {
0000000000000000000000000000000000000000;;			codec = testapi.Extensions.Codec()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unexpected kind: %v", fqKind)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return codec, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Helper functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) getObject(ctx genericapirequest.Context, obj runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err := t.storage.Get(ctx, accessor.GetName(), &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) createObject(ctx genericapirequest.Context, obj runtime.Object) error {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		key, err := t.storage.KeyFunc(ctx, accessor.GetName())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return t.storage.Storage.Create(ctx, key, obj, nil, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) setObjectsForList(objects []runtime.Object) []runtime.Object {
0000000000000000000000000000000000000000;;		key := t.storage.KeyRootFunc(t.tester.TestContext())
0000000000000000000000000000000000000000;;		if err := storagetesting.CreateObjList(key, t.storage.Storage, objects); err != nil {
0000000000000000000000000000000000000000;;			t.tester.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return objects
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *Tester) emitObject(obj runtime.Object, action string) error {
0000000000000000000000000000000000000000;;		ctx := t.tester.TestContext()
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch action {
0000000000000000000000000000000000000000;;		case etcdstorage.EtcdCreate:
0000000000000000000000000000000000000000;;			err = t.createObject(ctx, obj)
0000000000000000000000000000000000000000;;		case etcdstorage.EtcdDelete:
0000000000000000000000000000000000000000;;			accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, _, err = t.storage.Delete(ctx, accessor.GetName(), nil)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			err = fmt.Errorf("unexpected action: %v", action)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
