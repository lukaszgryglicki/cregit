0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
370a205513930b0a606cbab3ba7028e9b814d99a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package registrytest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metainternalversion "k8s.io/apimachinery/pkg/apis/meta/internalversion"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Registry is an interface for things that know how to store endpoints.
0000000000000000000000000000000000000000;;	type EndpointRegistry struct {
0000000000000000000000000000000000000000;;		Endpoints *api.EndpointsList
0000000000000000000000000000000000000000;;		Updates   []api.Endpoints
0000000000000000000000000000000000000000;;		Err       error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		lock sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *EndpointRegistry) ListEndpoints(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (*api.EndpointsList, error) {
0000000000000000000000000000000000000000;;		// TODO: support namespaces in this mock
0000000000000000000000000000000000000000;;		e.lock.Lock()
0000000000000000000000000000000000000000;;		defer e.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return e.Endpoints, e.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *EndpointRegistry) GetEndpoints(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (*api.Endpoints, error) {
0000000000000000000000000000000000000000;;		// TODO: support namespaces in this mock
0000000000000000000000000000000000000000;;		e.lock.Lock()
0000000000000000000000000000000000000000;;		defer e.lock.Unlock()
0000000000000000000000000000000000000000;;		if e.Err != nil {
0000000000000000000000000000000000000000;;			return nil, e.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.Endpoints != nil {
0000000000000000000000000000000000000000;;			for _, endpoint := range e.Endpoints.Items {
0000000000000000000000000000000000000000;;				if endpoint.Name == name {
0000000000000000000000000000000000000000;;					return &endpoint, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.NewNotFound(api.Resource("endpoints"), name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *EndpointRegistry) WatchEndpoints(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("unimplemented!")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *EndpointRegistry) UpdateEndpoints(ctx genericapirequest.Context, endpoints *api.Endpoints) error {
0000000000000000000000000000000000000000;;		// TODO: support namespaces in this mock
0000000000000000000000000000000000000000;;		e.lock.Lock()
0000000000000000000000000000000000000000;;		defer e.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		e.Updates = append(e.Updates, *endpoints)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e.Err != nil {
0000000000000000000000000000000000000000;;			return e.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.Endpoints == nil {
0000000000000000000000000000000000000000;;			e.Endpoints = &api.EndpointsList{
0000000000000000000000000000000000000000;;				Items: []api.Endpoints{
0000000000000000000000000000000000000000;;					*endpoints,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for ix := range e.Endpoints.Items {
0000000000000000000000000000000000000000;;			if e.Endpoints.Items[ix].Name == endpoints.Name {
0000000000000000000000000000000000000000;;				e.Endpoints.Items[ix] = *endpoints
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.Endpoints.Items = append(e.Endpoints.Items, *endpoints)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *EndpointRegistry) DeleteEndpoints(ctx genericapirequest.Context, name string) error {
0000000000000000000000000000000000000000;;		// TODO: support namespaces in this mock
0000000000000000000000000000000000000000;;		e.lock.Lock()
0000000000000000000000000000000000000000;;		defer e.lock.Unlock()
0000000000000000000000000000000000000000;;		if e.Err != nil {
0000000000000000000000000000000000000000;;			return e.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.Endpoints != nil {
0000000000000000000000000000000000000000;;			var newList []api.Endpoints
0000000000000000000000000000000000000000;;			for _, endpoint := range e.Endpoints.Items {
0000000000000000000000000000000000000000;;				if endpoint.Name != name {
0000000000000000000000000000000000000000;;					newList = append(newList, endpoint)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			e.Endpoints.Items = newList
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
