0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9fbdd758c00a160e902805405146a779d3acf5d8;pkg/registry/mock_service_registry.go[pkg/registry/mock_service_registry.go][pkg/registry/registrytest/service.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package registrytest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metainternalversion "k8s.io/apimachinery/pkg/apis/meta/internalversion"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewServiceRegistry() *ServiceRegistry {
0000000000000000000000000000000000000000;;		return &ServiceRegistry{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceRegistry struct {
0000000000000000000000000000000000000000;;		mu      sync.Mutex
0000000000000000000000000000000000000000;;		List    api.ServiceList
0000000000000000000000000000000000000000;;		Service *api.Service
0000000000000000000000000000000000000000;;		Updates []api.Service
0000000000000000000000000000000000000000;;		Err     error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeletedID string
0000000000000000000000000000000000000000;;		GottenID  string
0000000000000000000000000000000000000000;;		UpdatedID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ServiceRegistry) SetError(err error) {
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;		r.Err = err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ServiceRegistry) ListServices(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (*api.ServiceList, error) {
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns, _ := genericapirequest.NamespaceFrom(ctx)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Copy metadata from internal list into result
0000000000000000000000000000000000000000;;		res := new(api.ServiceList)
0000000000000000000000000000000000000000;;		res.TypeMeta = r.List.TypeMeta
0000000000000000000000000000000000000000;;		res.ListMeta = r.List.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ns != metav1.NamespaceAll {
0000000000000000000000000000000000000000;;			for _, service := range r.List.Items {
0000000000000000000000000000000000000000;;				if ns == service.Namespace {
0000000000000000000000000000000000000000;;					res.Items = append(res.Items, service)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			res.Items = append([]api.Service{}, r.List.Items...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res, r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ServiceRegistry) CreateService(ctx genericapirequest.Context, svc *api.Service) (*api.Service, error) {
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Service = new(api.Service)
0000000000000000000000000000000000000000;;		clone, err := api.Scheme.DeepCopy(svc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.Service = clone.(*api.Service)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.List.Items = append(r.List.Items, *svc)
0000000000000000000000000000000000000000;;		return svc, r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ServiceRegistry) GetService(ctx genericapirequest.Context, id string, options *metav1.GetOptions) (*api.Service, error) {
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.GottenID = id
0000000000000000000000000000000000000000;;		return r.Service, r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ServiceRegistry) DeleteService(ctx genericapirequest.Context, id string) error {
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.DeletedID = id
0000000000000000000000000000000000000000;;		r.Service = nil
0000000000000000000000000000000000000000;;		return r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ServiceRegistry) UpdateService(ctx genericapirequest.Context, svc *api.Service) (*api.Service, error) {
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.UpdatedID = svc.Name
0000000000000000000000000000000000000000;;		*r.Service = *svc
0000000000000000000000000000000000000000;;		r.Updates = append(r.Updates, *svc)
0000000000000000000000000000000000000000;;		return svc, r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ServiceRegistry) WatchServices(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, r.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ServiceRegistry) ExportService(ctx genericapirequest.Context, name string, options metav1.ExportOptions) (*api.Service, error) {
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r.Service, r.Err
0000000000000000000000000000000000000000;;	}
