0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a0b962322d78353f3529b7970297d7ad587ed153;pkg/master/storage_authentication.go[pkg/master/storage_authentication.go][pkg/registry/authentication/rest/storage_authentication.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		authenticationv1 "k8s.io/api/authentication/v1"
0000000000000000000000000000000000000000;;		authenticationv1beta1 "k8s.io/api/authentication/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		serverstorage "k8s.io/apiserver/pkg/server/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/authentication"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/authentication/tokenreview"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RESTStorageProvider struct {
0000000000000000000000000000000000000000;;		Authenticator authenticator.Request
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p RESTStorageProvider) NewRESTStorage(apiResourceConfigSource serverstorage.APIResourceConfigSource, restOptionsGetter generic.RESTOptionsGetter) (genericapiserver.APIGroupInfo, bool) {
0000000000000000000000000000000000000000;;		// TODO figure out how to make the swagger generation stable, while allowing this endpoint to be disabled.
0000000000000000000000000000000000000000;;		// if p.Authenticator == nil {
0000000000000000000000000000000000000000;;		// 	return genericapiserver.APIGroupInfo{}, false
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiGroupInfo := genericapiserver.NewDefaultAPIGroupInfo(authentication.GroupName, api.Registry, api.Scheme, api.ParameterCodec, api.Codecs)
0000000000000000000000000000000000000000;;		// If you add a version here, be sure to add an entry in `k8s.io/kubernetes/cmd/kube-apiserver/app/aggregator.go with specific priorities.
0000000000000000000000000000000000000000;;		// TODO refactor the plumbing to provide the information in the APIGroupInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if apiResourceConfigSource.AnyResourcesForVersionEnabled(authenticationv1beta1.SchemeGroupVersion) {
0000000000000000000000000000000000000000;;			apiGroupInfo.VersionedResourcesStorageMap[authenticationv1beta1.SchemeGroupVersion.Version] = p.v1beta1Storage(apiResourceConfigSource, restOptionsGetter)
0000000000000000000000000000000000000000;;			apiGroupInfo.GroupMeta.GroupVersion = authenticationv1beta1.SchemeGroupVersion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if apiResourceConfigSource.AnyResourcesForVersionEnabled(authenticationv1.SchemeGroupVersion) {
0000000000000000000000000000000000000000;;			apiGroupInfo.VersionedResourcesStorageMap[authenticationv1.SchemeGroupVersion.Version] = p.v1Storage(apiResourceConfigSource, restOptionsGetter)
0000000000000000000000000000000000000000;;			apiGroupInfo.GroupMeta.GroupVersion = authenticationv1.SchemeGroupVersion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return apiGroupInfo, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p RESTStorageProvider) v1beta1Storage(apiResourceConfigSource serverstorage.APIResourceConfigSource, restOptionsGetter generic.RESTOptionsGetter) map[string]rest.Storage {
0000000000000000000000000000000000000000;;		version := authenticationv1beta1.SchemeGroupVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storage := map[string]rest.Storage{}
0000000000000000000000000000000000000000;;		if apiResourceConfigSource.AnyResourcesForVersionEnabled(authenticationv1beta1.SchemeGroupVersion) {
0000000000000000000000000000000000000000;;			if apiResourceConfigSource.ResourceEnabled(version.WithResource("tokenreviews")) {
0000000000000000000000000000000000000000;;				tokenReviewStorage := tokenreview.NewREST(p.Authenticator)
0000000000000000000000000000000000000000;;				storage["tokenreviews"] = tokenReviewStorage
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return storage
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p RESTStorageProvider) v1Storage(apiResourceConfigSource serverstorage.APIResourceConfigSource, restOptionsGetter generic.RESTOptionsGetter) map[string]rest.Storage {
0000000000000000000000000000000000000000;;		version := authenticationv1.SchemeGroupVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storage := map[string]rest.Storage{}
0000000000000000000000000000000000000000;;		if apiResourceConfigSource.AnyResourcesForVersionEnabled(authenticationv1.SchemeGroupVersion) {
0000000000000000000000000000000000000000;;			if apiResourceConfigSource.ResourceEnabled(version.WithResource("tokenreviews")) {
0000000000000000000000000000000000000000;;				tokenReviewStorage := tokenreview.NewREST(p.Authenticator)
0000000000000000000000000000000000000000;;				storage["tokenreviews"] = tokenReviewStorage
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return storage
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p RESTStorageProvider) GroupName() string {
0000000000000000000000000000000000000000;;		return authentication.GroupName
0000000000000000000000000000000000000000;;	}
