0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a0b962322d78353f3529b7970297d7ad587ed153;pkg/registry/tokenreview/storage.go[pkg/registry/tokenreview/storage.go][pkg/registry/authentication/tokenreview/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package tokenreview
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/authentication"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		tokenAuthenticator authenticator.Request
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewREST(tokenAuthenticator authenticator.Request) *REST {
0000000000000000000000000000000000000000;;		return &REST{tokenAuthenticator: tokenAuthenticator}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *REST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &authentication.TokenReview{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *REST) Create(ctx genericapirequest.Context, obj runtime.Object, includeUninitialized bool) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		tokenReview, ok := obj.(*authentication.TokenReview)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, apierrors.NewBadRequest(fmt.Sprintf("not a TokenReview: %#v", obj))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		namespace := genericapirequest.NamespaceValue(ctx)
0000000000000000000000000000000000000000;;		if len(namespace) != 0 {
0000000000000000000000000000000000000000;;			return nil, apierrors.NewBadRequest(fmt.Sprintf("namespace is not allowed on this type: %v", namespace))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.tokenAuthenticator == nil {
0000000000000000000000000000000000000000;;			return tokenReview, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create a header that contains nothing but the token
0000000000000000000000000000000000000000;;		fakeReq := &http.Request{Header: http.Header{}}
0000000000000000000000000000000000000000;;		fakeReq.Header.Add("Authorization", "Bearer "+tokenReview.Spec.Token)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tokenUser, ok, err := r.tokenAuthenticator.AuthenticateRequest(fakeReq)
0000000000000000000000000000000000000000;;		tokenReview.Status.Authenticated = ok
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			tokenReview.Status.Error = err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if tokenUser != nil {
0000000000000000000000000000000000000000;;			tokenReview.Status.User = authentication.UserInfo{
0000000000000000000000000000000000000000;;				Username: tokenUser.GetName(),
0000000000000000000000000000000000000000;;				UID:      tokenUser.GetUID(),
0000000000000000000000000000000000000000;;				Groups:   tokenUser.GetGroups(),
0000000000000000000000000000000000000000;;				Extra:    map[string]authentication.ExtraValue{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k, v := range tokenUser.GetExtra() {
0000000000000000000000000000000000000000;;				tokenReview.Status.User.Extra[k] = authentication.ExtraValue(v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return tokenReview, nil
0000000000000000000000000000000000000000;;	}
