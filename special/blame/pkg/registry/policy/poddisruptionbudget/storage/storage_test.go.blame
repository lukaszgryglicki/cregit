0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5c86247289440ef64620341badd7ad33b536280d;pkg/registry/poddisruptionbudget/etcd/etcd_test.go[pkg/registry/poddisruptionbudget/etcd/etcd_test.go][pkg/registry/policy/poddisruptionbudget/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/policy"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*REST, *StatusREST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, policy.GroupName)
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{StorageConfig: etcdStorage, Decorator: generic.UndecoratedStorage, DeleteCollectionWorkers: 1, ResourcePrefix: "poddisruptionbudgets"}
0000000000000000000000000000000000000000;;		podDisruptionBudgetStorage, statusStorage := NewREST(restOptions)
0000000000000000000000000000000000000000;;		return podDisruptionBudgetStorage, statusStorage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createPodDisruptionBudget is a helper function that returns a PodDisruptionBudget with the updated resource version.
0000000000000000000000000000000000000000;;	func createPodDisruptionBudget(storage *REST, pdb policy.PodDisruptionBudget, t *testing.T) (policy.PodDisruptionBudget, error) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), pdb.Namespace)
0000000000000000000000000000000000000000;;		obj, err := storage.Create(ctx, &pdb, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create PodDisruptionBudget, %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newPS := obj.(*policy.PodDisruptionBudget)
0000000000000000000000000000000000000000;;		return *newPS, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewPodDisruptionBudget() *policy.PodDisruptionBudget {
0000000000000000000000000000000000000000;;		minAvailable := intstr.FromInt(7)
0000000000000000000000000000000000000000;;		return &policy.PodDisruptionBudget{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Labels:    map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: policy.PodDisruptionBudgetSpec{
0000000000000000000000000000000000000000;;				Selector:     &metav1.LabelSelector{MatchLabels: map[string]string{"a": "b"}},
0000000000000000000000000000000000000000;;				MinAvailable: &minAvailable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: policy.PodDisruptionBudgetStatus{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		pdb := validNewPodDisruptionBudget()
0000000000000000000000000000000000000000;;		pdb.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			pdb,
0000000000000000000000000000000000000000;;			// TODO: Add an invalid case when we have validation.
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Test updates to spec when we allow them.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, statusStorage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), metav1.NamespaceDefault)
0000000000000000000000000000000000000000;;		key := "/poddisruptionbudgets/" + metav1.NamespaceDefault + "/foo"
0000000000000000000000000000000000000000;;		validPodDisruptionBudget := validNewPodDisruptionBudget()
0000000000000000000000000000000000000000;;		if err := storage.Storage.Create(ctx, key, validPodDisruptionBudget, nil, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("failed to get pdb: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obtainedPdb := obj.(*policy.PodDisruptionBudget)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		minAvailable := intstr.FromInt(8)
0000000000000000000000000000000000000000;;		update := policy.PodDisruptionBudget{
0000000000000000000000000000000000000000;;			ObjectMeta: obtainedPdb.ObjectMeta,
0000000000000000000000000000000000000000;;			Spec: policy.PodDisruptionBudgetSpec{
0000000000000000000000000000000000000000;;				MinAvailable: &minAvailable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: policy.PodDisruptionBudgetStatus{
0000000000000000000000000000000000000000;;				ExpectedPods: 8,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := statusStorage.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(&update, api.Scheme)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err = storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pdb := obj.(*policy.PodDisruptionBudget)
0000000000000000000000000000000000000000;;		if pdb.Spec.MinAvailable.IntValue() != 7 {
0000000000000000000000000000000000000000;;			t.Errorf("we expected .spec.replicas to not be updated but it was updated to %v", pdb.Spec.MinAvailable)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pdb.Status.ExpectedPods != 8 {
0000000000000000000000000000000000000000;;			t.Errorf("we expected .status.replicas to be updated to %d but it was %v", 7, pdb.Status.ExpectedPods)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validNewPodDisruptionBudget())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestList(validNewPodDisruptionBudget())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestDelete(validNewPodDisruptionBudget())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validNewPodDisruptionBudget(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"a": "b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"a": "c"},
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Test generation number.
