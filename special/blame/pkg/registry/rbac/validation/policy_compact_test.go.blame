0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8d6167a34eab07de2fade7cd40eed10d97fead60;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCompactRules(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Rules    []rbac.PolicyRule
0000000000000000000000000000000000000000;;			Expected []rbac.PolicyRule
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				Rules:    []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;				Expected: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"simple": {
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"list"}, APIGroups: []string{""}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"update", "patch"}, APIGroups: []string{""}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					{Verbs: []string{"create"}, APIGroups: []string{"extensions"}, Resources: []string{"daemonsets"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"delete"}, APIGroups: []string{"extensions"}, Resources: []string{"daemonsets"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					{Verbs: []string{"educate"}, APIGroups: []string{""}, Resources: []string{"dolphins"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// nil verbs are preserved in non-merge cases.
0000000000000000000000000000000000000000;;					// these are the pirates who don't do anything.
0000000000000000000000000000000000000000;;					{Verbs: nil, APIGroups: []string{""}, Resources: []string{"pirates"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Test merging into a nil Verbs string set
0000000000000000000000000000000000000000;;					{Verbs: nil, APIGroups: []string{""}, Resources: []string{"pods"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"create"}, APIGroups: []string{""}, Resources: []string{"pods"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Expected: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"create", "delete"}, APIGroups: []string{"extensions"}, Resources: []string{"daemonsets"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"get", "list", "update", "patch"}, APIGroups: []string{""}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"educate"}, APIGroups: []string{""}, Resources: []string{"dolphins"}},
0000000000000000000000000000000000000000;;					{Verbs: nil, APIGroups: []string{""}, Resources: []string{"pirates"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"create"}, APIGroups: []string{""}, Resources: []string{"pods"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex multi-group": {
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{"", "builds.openshift.io"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"list"}, APIGroups: []string{"", "builds.openshift.io"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Expected: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{"", "builds.openshift.io"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"list"}, APIGroups: []string{"", "builds.openshift.io"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"complex multi-resource": {
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds", "images"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"list"}, APIGroups: []string{""}, Resources: []string{"builds", "images"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Expected: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds", "images"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"list"}, APIGroups: []string{""}, Resources: []string{"builds", "images"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"complex named-resource": {
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}, ResourceNames: []string{"mybuild"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"list"}, APIGroups: []string{""}, Resources: []string{"builds"}, ResourceNames: []string{"mybuild2"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Expected: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}, ResourceNames: []string{"mybuild"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"list"}, APIGroups: []string{""}, Resources: []string{"builds"}, ResourceNames: []string{"mybuild2"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"complex non-resource": {
0000000000000000000000000000000000000000;;				Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}, NonResourceURLs: []string{"/"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}, NonResourceURLs: []string{"/foo"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Expected: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}, NonResourceURLs: []string{"/"}},
0000000000000000000000000000000000000000;;					{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}, NonResourceURLs: []string{"/foo"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			rules := tc.Rules
0000000000000000000000000000000000000000;;			originalRules, err := api.Scheme.DeepCopy(tc.Rules)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: couldn't copy rules: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			compacted, err := CompactRules(tc.Rules)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(rules, originalRules) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: CompactRules mutated rules. Expected\n%#v\ngot\n%#v", k, originalRules, rules)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if covers, missing := Covers(compacted, rules); !covers {
0000000000000000000000000000000000000000;;				t.Errorf("%s: compacted rules did not cover original rules. missing: %#v", k, missing)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if covers, missing := Covers(rules, compacted); !covers {
0000000000000000000000000000000000000000;;				t.Errorf("%s: original rules did not cover compacted rules. missing: %#v", k, missing)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sort.Stable(rbac.SortableRuleSlice(compacted))
0000000000000000000000000000000000000000;;			sort.Stable(rbac.SortableRuleSlice(tc.Expected))
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(compacted, tc.Expected) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected\n%#v\ngot\n%#v", k, tc.Expected, compacted)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsSimpleResourceRule(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Rule     rbac.PolicyRule
0000000000000000000000000000000000000000;;			Simple   bool
0000000000000000000000000000000000000000;;			Resource schema.GroupResource
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"simple, no verbs": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{}, APIGroups: []string{""}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				Simple:   true,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{Group: "", Resource: "builds"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"simple, one verb": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				Simple:   true,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{Group: "", Resource: "builds"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"simple, multi verb": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{"get", "list"}, APIGroups: []string{""}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				Simple:   true,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{Group: "", Resource: "builds"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"complex, empty": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{},
0000000000000000000000000000000000000000;;				Simple:   false,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex, no group": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{"get"}, APIGroups: []string{}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				Simple:   false,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex, multi group": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{"get"}, APIGroups: []string{"a", "b"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				Simple:   false,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex, no resource": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{}},
0000000000000000000000000000000000000000;;				Simple:   false,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex, multi resource": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds", "images"}},
0000000000000000000000000000000000000000;;				Simple:   false,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex, resource names": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}, ResourceNames: []string{"foo"}},
0000000000000000000000000000000000000000;;				Simple:   false,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex, non-resource urls": {
0000000000000000000000000000000000000000;;				Rule:     rbac.PolicyRule{Verbs: []string{"get"}, APIGroups: []string{""}, Resources: []string{"builds"}, NonResourceURLs: []string{"/"}},
0000000000000000000000000000000000000000;;				Simple:   false,
0000000000000000000000000000000000000000;;				Resource: schema.GroupResource{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			resource, simple := isSimpleResourceRule(&tc.Rule)
0000000000000000000000000000000000000000;;			if simple != tc.Simple {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected simple=%v, got simple=%v", k, tc.Simple, simple)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if resource != tc.Resource {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected resource=%v, got resource=%v", k, tc.Resource, resource)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
