0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4389e9c3b3f5191dffa483b27283fbe3686be735;pkg/apis/rbac/validation/policy_comparator_test.go[pkg/apis/rbac/validation/policy_comparator_test.go][pkg/registry/rbac/validation/policy_comparator_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type escalationTest struct {
0000000000000000000000000000000000000000;;		ownerRules   []rbac.PolicyRule
0000000000000000000000000000000000000000;;		servantRules []rbac.PolicyRule
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedCovered        bool
0000000000000000000000000000000000000000;;		expectedUncoveredRules []rbac.PolicyRule
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversExactMatch(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversMultipleRulesCoveringSingleRule(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"delete"}, Resources: []string{"deployments"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"delete"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"delete", "update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversMultipleAPIGroupsCoveringSingleRule(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1"}, Verbs: []string{"delete"}, Resources: []string{"deployments"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1"}, Verbs: []string{"delete"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1"}, Verbs: []string{"update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group2"}, Verbs: []string{"delete"}, Resources: []string{"deployments"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group2"}, Verbs: []string{"delete"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group2"}, Verbs: []string{"update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1", "group2"}, Verbs: []string{"delete", "update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversSingleAPIGroupsCoveringMultiple(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1", "group2"}, Verbs: []string{"delete", "update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1"}, Verbs: []string{"delete"}, Resources: []string{"deployments"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1"}, Verbs: []string{"delete"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1"}, Verbs: []string{"update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group2"}, Verbs: []string{"delete"}, Resources: []string{"deployments"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group2"}, Verbs: []string{"delete"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group2"}, Verbs: []string{"update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversMultipleRulesMissingSingleVerbResourceCombination(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"delete", "update"}, Resources: []string{"builds", "deployments"}},
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"delete"}, Resources: []string{"pods"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"delete", "update"}, Resources: []string{"builds", "deployments", "pods"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered: false,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"update"}, Resources: []string{"pods"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversAPIGroupStarCoveringMultiple(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"*"}, Verbs: []string{"get"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"group1", "group2"}, Verbs: []string{"get"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversEnumerationNotCoveringAPIGroupStar(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"dummy-group"}, Verbs: []string{"get"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"*"}, Verbs: []string{"get"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered: false,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"*"}, Verbs: []string{"get"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversAPIGroupStarCoveringStar(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"*"}, Verbs: []string{"get"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"*"}, Verbs: []string{"get"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversVerbStarCoveringMultiple(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"*"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"watch", "list"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversEnumerationNotCoveringVerbStar(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get", "list", "watch", "create", "update", "delete", "exec"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"*"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered: false,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"*"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversVerbStarCoveringStar(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"*"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"*"}, Resources: []string{"roles"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversResourceStarCoveringMultiple(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"resourcegroup:deployments"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversEnumerationNotCoveringResourceStar(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"roles", "resourcegroup:deployments"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered: false,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversResourceStarCoveringStar(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversResourceNameEmptyCoveringMultiple(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"pods"}, ResourceNames: []string{}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"pods"}, ResourceNames: []string{"foo", "bar"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversEnumerationNotCoveringResourceNameEmpty(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"pods"}, ResourceNames: []string{"foo", "bar"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"pods"}, ResourceNames: []string{}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered: false,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"pods"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversNonResourceURLs(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"/apis"}, Verbs: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"/apis"}, Verbs: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversNonResourceURLsStar(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"*"}, Verbs: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"/apis", "/apis/v1", "/"}, Verbs: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversNonResourceURLsStarAfterPrefixDoesntCover(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"/apis/*"}, Verbs: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"/apis", "/apis/v1"}, Verbs: []string{"get"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered: false,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"/apis"}, Verbs: []string{"get"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversNonResourceURLsStarAfterPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"/apis/*"}, Verbs: []string{"*"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{NonResourceURLs: []string{"/apis/v1/foo", "/apis/v1"}, Verbs: []string{"get"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversNonResourceURLsWithOtherFields(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"builds"}, NonResourceURLs: []string{"/apis"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"builds"}, NonResourceURLs: []string{"/apis"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        true,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCoversNonResourceURLsWithOtherFieldsFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		escalationTest{
0000000000000000000000000000000000000000;;			ownerRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"builds"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			servantRules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;				{APIGroups: []string{"v1"}, Verbs: []string{"get"}, Resources: []string{"builds"}, NonResourceURLs: []string{"/apis"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedCovered:        false,
0000000000000000000000000000000000000000;;			expectedUncoveredRules: []rbac.PolicyRule{{NonResourceURLs: []string{"/apis"}, Verbs: []string{"get"}}},
0000000000000000000000000000000000000000;;		}.test(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test escalationTest) test(t *testing.T) {
0000000000000000000000000000000000000000;;		actualCovered, actualUncoveredRules := Covers(test.ownerRules, test.servantRules)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if actualCovered != test.expectedCovered {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, but got %v", test.expectedCovered, actualCovered)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !rulesMatch(test.expectedUncoveredRules, actualUncoveredRules) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, but got %v", test.expectedUncoveredRules, actualUncoveredRules)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func rulesMatch(expectedRules, actualRules []rbac.PolicyRule) bool {
0000000000000000000000000000000000000000;;		if len(expectedRules) != len(actualRules) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, expectedRule := range expectedRules {
0000000000000000000000000000000000000000;;			found := false
0000000000000000000000000000000000000000;;			for _, actualRule := range actualRules {
0000000000000000000000000000000000000000;;				if reflect.DeepEqual(expectedRule, actualRule) {
0000000000000000000000000000000000000000;;					found = true
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNonResourceURLCovers(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			owner     string
0000000000000000000000000000000000000000;;			requested string
0000000000000000000000000000000000000000;;			want      bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"*", "", true},
0000000000000000000000000000000000000000;;			{"*", "/", true},
0000000000000000000000000000000000000000;;			{"*", "/api", true},
0000000000000000000000000000000000000000;;			{"/*", "", false},
0000000000000000000000000000000000000000;;			{"/*", "/", true},
0000000000000000000000000000000000000000;;			{"/*", "/foo", true},
0000000000000000000000000000000000000000;;			{"/api", "/api", true},
0000000000000000000000000000000000000000;;			{"/apis", "/api", false},
0000000000000000000000000000000000000000;;			{"/api/v1", "/api", false},
0000000000000000000000000000000000000000;;			{"/api/v1", "/api/v1", true},
0000000000000000000000000000000000000000;;			{"/api/*", "/api/v1", true},
0000000000000000000000000000000000000000;;			{"/api/*", "/api", false},
0000000000000000000000000000000000000000;;			{"/api/*/*", "/api/v1", false},
0000000000000000000000000000000000000000;;			{"/*/v1/*", "/api/v1", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			got := nonResourceURLCovers(tc.owner, tc.requested)
0000000000000000000000000000000000000000;;			if got != tc.want {
0000000000000000000000000000000000000000;;				t.Errorf("nonResourceURLCovers(%q, %q): want=(%t), got=(%t)", tc.owner, tc.requested, tc.want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
