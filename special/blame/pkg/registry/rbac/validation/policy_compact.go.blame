0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8d6167a34eab07de2fade7cd40eed10d97fead60;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CompactRules combines rules that contain a single APIGroup/Resource, differ only by verb, and contain no other attributes.
0000000000000000000000000000000000000000;;	// this is a fast check, and works well with the decomposed "missing rules" list from a Covers check.
0000000000000000000000000000000000000000;;	func CompactRules(rules []rbac.PolicyRule) ([]rbac.PolicyRule, error) {
0000000000000000000000000000000000000000;;		compacted := make([]rbac.PolicyRule, 0, len(rules))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		simpleRules := map[schema.GroupResource]*rbac.PolicyRule{}
0000000000000000000000000000000000000000;;		for _, rule := range rules {
0000000000000000000000000000000000000000;;			if resource, isSimple := isSimpleResourceRule(&rule); isSimple {
0000000000000000000000000000000000000000;;				if existingRule, ok := simpleRules[resource]; ok {
0000000000000000000000000000000000000000;;					// Add the new verbs to the existing simple resource rule
0000000000000000000000000000000000000000;;					if existingRule.Verbs == nil {
0000000000000000000000000000000000000000;;						existingRule.Verbs = []string{}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					existingRule.Verbs = append(existingRule.Verbs, rule.Verbs...)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					// Copy the rule to accumulate matching simple resource rules into
0000000000000000000000000000000000000000;;					objCopy, err := api.Scheme.DeepCopy(rule)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						// Unit tests ensure this should not ever happen
0000000000000000000000000000000000000000;;						return nil, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					ruleCopy, ok := objCopy.(rbac.PolicyRule)
0000000000000000000000000000000000000000;;					if !ok {
0000000000000000000000000000000000000000;;						// Unit tests ensure this should not ever happen
0000000000000000000000000000000000000000;;						return nil, fmt.Errorf("expected rbac.PolicyRule, got %#v", objCopy)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					simpleRules[resource] = &ruleCopy
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				compacted = append(compacted, rule)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Once we've consolidated the simple resource rules, add them to the compacted list
0000000000000000000000000000000000000000;;		for _, simpleRule := range simpleRules {
0000000000000000000000000000000000000000;;			compacted = append(compacted, *simpleRule)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return compacted, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isSimpleResourceRule returns true if the given rule contains verbs, a single resource, a single API group, and no other values
0000000000000000000000000000000000000000;;	func isSimpleResourceRule(rule *rbac.PolicyRule) (schema.GroupResource, bool) {
0000000000000000000000000000000000000000;;		resource := schema.GroupResource{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have "complex" rule attributes, return early without allocations or expensive comparisons
0000000000000000000000000000000000000000;;		if len(rule.ResourceNames) > 0 || len(rule.NonResourceURLs) > 0 {
0000000000000000000000000000000000000000;;			return resource, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If we have multiple api groups or resources, return early
0000000000000000000000000000000000000000;;		if len(rule.APIGroups) != 1 || len(rule.Resources) != 1 {
0000000000000000000000000000000000000000;;			return resource, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test if this rule only contains APIGroups/Resources/Verbs
0000000000000000000000000000000000000000;;		simpleRule := &rbac.PolicyRule{APIGroups: rule.APIGroups, Resources: rule.Resources, Verbs: rule.Verbs}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(simpleRule, rule) {
0000000000000000000000000000000000000000;;			return resource, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resource = schema.GroupResource{Group: rule.APIGroups[0], Resource: rule.Resources[0]}
0000000000000000000000000000000000000000;;		return resource, true
0000000000000000000000000000000000000000;;	}
