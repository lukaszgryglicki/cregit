0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
de020fa41e8d8ba05f808596b558cfb5f09165e1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package reconciliation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/rbac/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterRoleRuleOwner struct {
0000000000000000000000000000000000000000;;		ClusterRole *rbac.ClusterRole
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ClusterRoleRuleOwner) GetNamespace() string {
0000000000000000000000000000000000000000;;		return o.ClusterRole.Namespace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ClusterRoleRuleOwner) GetName() string {
0000000000000000000000000000000000000000;;		return o.ClusterRole.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ClusterRoleRuleOwner) GetLabels() map[string]string {
0000000000000000000000000000000000000000;;		return o.ClusterRole.Labels
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ClusterRoleRuleOwner) SetLabels(in map[string]string) {
0000000000000000000000000000000000000000;;		o.ClusterRole.Labels = in
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ClusterRoleRuleOwner) GetAnnotations() map[string]string {
0000000000000000000000000000000000000000;;		return o.ClusterRole.Annotations
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ClusterRoleRuleOwner) SetAnnotations(in map[string]string) {
0000000000000000000000000000000000000000;;		o.ClusterRole.Annotations = in
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ClusterRoleRuleOwner) GetRules() []rbac.PolicyRule {
0000000000000000000000000000000000000000;;		return o.ClusterRole.Rules
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ClusterRoleRuleOwner) SetRules(in []rbac.PolicyRule) {
0000000000000000000000000000000000000000;;		o.ClusterRole.Rules = in
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterRoleModifier struct {
0000000000000000000000000000000000000000;;		Client internalversion.ClusterRoleInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ClusterRoleModifier) Get(namespace, name string) (RuleOwner, error) {
0000000000000000000000000000000000000000;;		ret, err := c.Client.Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ClusterRoleRuleOwner{ClusterRole: ret}, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ClusterRoleModifier) Create(in RuleOwner) (RuleOwner, error) {
0000000000000000000000000000000000000000;;		ret, err := c.Client.Create(in.(ClusterRoleRuleOwner).ClusterRole)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ClusterRoleRuleOwner{ClusterRole: ret}, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ClusterRoleModifier) Update(in RuleOwner) (RuleOwner, error) {
0000000000000000000000000000000000000000;;		ret, err := c.Client.Update(in.(ClusterRoleRuleOwner).ClusterRole)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ClusterRoleRuleOwner{ClusterRole: ret}, err
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
