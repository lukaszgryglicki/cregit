0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
813c5fabc77c50eb85d8a4c8563eacb4cc6f9f09;pkg/registry/rbac/reconciliation/reconcile_clusterrole_test.go[pkg/registry/rbac/reconciliation/reconcile_clusterrole_test.go][pkg/registry/rbac/reconciliation/reconcile_role_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package reconciliation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func role(rules []rbac.PolicyRule, labels map[string]string, annotations map[string]string) *rbac.ClusterRole {
0000000000000000000000000000000000000000;;		return &rbac.ClusterRole{Rules: rules, ObjectMeta: metav1.ObjectMeta{Labels: labels, Annotations: annotations}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func rules(resources ...string) []rbac.PolicyRule {
0000000000000000000000000000000000000000;;		r := []rbac.PolicyRule{}
0000000000000000000000000000000000000000;;		for _, resource := range resources {
0000000000000000000000000000000000000000;;			r = append(r, rbac.PolicyRule{APIGroups: []string{""}, Verbs: []string{"get"}, Resources: []string{resource}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ss map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestComputeReconciledRole(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			expectedRole           *rbac.ClusterRole
0000000000000000000000000000000000000000;;			actualRole             *rbac.ClusterRole
0000000000000000000000000000000000000000;;			removeExtraPermissions bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedReconciledRole       *rbac.ClusterRole
0000000000000000000000000000000000000000;;			expectedReconciliationNeeded bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules(), nil, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules(), nil, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       nil,
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), nil, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       nil,
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), nil, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       nil,
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different rules without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), nil, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), nil, nil),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different rules with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), nil, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("b", "a"), nil, nil),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match labels without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       nil,
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match labels with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       nil,
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different labels without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), ss{"2": "b"}, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), ss{"1": "a", "2": "b"}, nil),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different labels with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), ss{"2": "b"}, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), ss{"1": "a", "2": "b"}, nil),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different labels and rules without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), ss{"2": "b"}, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), ss{"1": "a", "2": "b"}, nil),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different labels and rules with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), ss{"2": "b"}, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("b", "a"), ss{"1": "a", "2": "b"}, nil),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflicting labels and rules without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), ss{"1": "b"}, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), ss{"1": "b"}, nil),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflicting labels and rules with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"1": "a"}, nil),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), ss{"1": "b"}, nil),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("b", "a"), ss{"1": "b"}, nil),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match annotations without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       nil,
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"match annotations with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       nil,
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different annotations without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), nil, ss{"2": "b"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), nil, ss{"1": "a", "2": "b"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different annotations with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("a"), nil, ss{"2": "b"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), nil, ss{"1": "a", "2": "b"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different annotations and rules without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), nil, ss{"2": "b"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), nil, ss{"1": "a", "2": "b"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"different annotations and rules with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), nil, ss{"2": "b"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("b", "a"), nil, ss{"1": "a", "2": "b"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflicting annotations and rules without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), nil, ss{"1": "b"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), nil, ss{"1": "b"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflicting annotations and rules with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), nil, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), nil, ss{"1": "b"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("b", "a"), nil, ss{"1": "b"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflicting labels/annotations and rules without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"3": "d"}, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), ss{"4": "e"}, ss{"1": "b"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("a"), ss{"3": "d", "4": "e"}, ss{"1": "b"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"conflicting labels/annotations and rules with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("a"), ss{"3": "d"}, ss{"1": "a"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("b"), ss{"4": "e"}, ss{"1": "b"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole:       role(rules("b", "a"), ss{"3": "d", "4": "e"}, ss{"1": "b"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex labels/annotations and rules without union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("pods", "nodes", "secrets"), ss{"env": "prod", "color": "blue"}, ss{"description": "fancy", "system": "true"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("nodes", "images", "projects"), ss{"color": "red", "team": "pm"}, ss{"system": "false", "owner": "admin", "vip": "yes"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole: role(
0000000000000000000000000000000000000000;;					rules("pods", "nodes", "secrets"),
0000000000000000000000000000000000000000;;					ss{"env": "prod", "color": "red", "team": "pm"},
0000000000000000000000000000000000000000;;					ss{"description": "fancy", "system": "false", "owner": "admin", "vip": "yes"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"complex labels/annotations and rules with union": {
0000000000000000000000000000000000000000;;				expectedRole:           role(rules("pods", "nodes", "secrets"), ss{"env": "prod", "color": "blue", "manager": "randy"}, ss{"description": "fancy", "system": "true", "up": "true"}),
0000000000000000000000000000000000000000;;				actualRole:             role(rules("nodes", "images", "projects"), ss{"color": "red", "team": "pm"}, ss{"system": "false", "owner": "admin", "vip": "yes", "rate": "down"}),
0000000000000000000000000000000000000000;;				removeExtraPermissions: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedReconciledRole: role(
0000000000000000000000000000000000000000;;					rules("nodes", "images", "projects", "pods", "secrets"),
0000000000000000000000000000000000000000;;					ss{"env": "prod", "manager": "randy", "color": "red", "team": "pm"},
0000000000000000000000000000000000000000;;					ss{"description": "fancy", "system": "false", "owner": "admin", "vip": "yes", "rate": "down", "up": "true"}),
0000000000000000000000000000000000000000;;				expectedReconciliationNeeded: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range tests {
0000000000000000000000000000000000000000;;			actualRole := ClusterRoleRuleOwner{ClusterRole: tc.actualRole}
0000000000000000000000000000000000000000;;			expectedRole := ClusterRoleRuleOwner{ClusterRole: tc.expectedRole}
0000000000000000000000000000000000000000;;			result, err := computeReconciledRole(actualRole, expectedRole, tc.removeExtraPermissions)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			reconciliationNeeded := result.Operation != ReconcileNone
0000000000000000000000000000000000000000;;			if reconciliationNeeded != tc.expectedReconciliationNeeded {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected\n\t%v\ngot\n\t%v", k, tc.expectedReconciliationNeeded, reconciliationNeeded)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if reconciliationNeeded && !helper.Semantic.DeepEqual(result.Role.(ClusterRoleRuleOwner).ClusterRole, tc.expectedReconciledRole) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected\n\t%#v\ngot\n\t%#v", k, tc.expectedReconciledRole, result.Role)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
