0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
51b34472c4cd028b59b8504a78ff8aad7f544036;pkg/registry/rolebinding/policybased/storage.go[pkg/registry/rolebinding/policybased/storage.go][pkg/registry/rbac/rolebinding/policybased/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package policybased implements a standard storage for RoleBinding that prevents privilege escalation.
0000000000000000000000000000000000000000;;	package policybased
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		rbacregistry "k8s.io/kubernetes/pkg/registry/rbac"
0000000000000000000000000000000000000000;;		rbacregistryvalidation "k8s.io/kubernetes/pkg/registry/rbac/validation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var groupResource = rbac.Resource("rolebindings")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Storage struct {
0000000000000000000000000000000000000000;;		rest.StandardStorage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authorizer authorizer.Authorizer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ruleResolver rbacregistryvalidation.AuthorizationRuleResolver
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStorage(s rest.StandardStorage, authorizer authorizer.Authorizer, ruleResolver rbacregistryvalidation.AuthorizationRuleResolver) *Storage {
0000000000000000000000000000000000000000;;		return &Storage{s, authorizer, ruleResolver}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Storage) Create(ctx genericapirequest.Context, obj runtime.Object, includeUninitialized bool) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		if rbacregistry.EscalationAllowed(ctx) {
0000000000000000000000000000000000000000;;			return s.StandardStorage.Create(ctx, obj, includeUninitialized)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get the namespace from the context (populated from the URL).
0000000000000000000000000000000000000000;;		// The namespace in the object can be empty until StandardStorage.Create()->BeforeCreate() populates it from the context.
0000000000000000000000000000000000000000;;		namespace, ok := genericapirequest.NamespaceFrom(ctx)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, errors.NewBadRequest("namespace is required")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		roleBinding := obj.(*rbac.RoleBinding)
0000000000000000000000000000000000000000;;		if rbacregistry.BindingAuthorized(ctx, roleBinding.RoleRef, namespace, s.authorizer) {
0000000000000000000000000000000000000000;;			return s.StandardStorage.Create(ctx, obj, includeUninitialized)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rules, err := s.ruleResolver.GetRoleReferenceRules(roleBinding.RoleRef, namespace)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := rbacregistryvalidation.ConfirmNoEscalation(ctx, s.ruleResolver, rules); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.NewForbidden(groupResource, roleBinding.Name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.StandardStorage.Create(ctx, obj, includeUninitialized)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Storage) Update(ctx genericapirequest.Context, name string, obj rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		if rbacregistry.EscalationAllowed(ctx) {
0000000000000000000000000000000000000000;;			return s.StandardStorage.Update(ctx, name, obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nonEscalatingInfo := rest.WrapUpdatedObjectInfo(obj, func(ctx genericapirequest.Context, obj runtime.Object, oldObj runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			// Get the namespace from the context (populated from the URL).
0000000000000000000000000000000000000000;;			// The namespace in the object can be empty until StandardStorage.Update()->BeforeUpdate() populates it from the context.
0000000000000000000000000000000000000000;;			namespace, ok := genericapirequest.NamespaceFrom(ctx)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil, errors.NewBadRequest("namespace is required")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			roleBinding := obj.(*rbac.RoleBinding)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// if we're explicitly authorized to bind this role, return
0000000000000000000000000000000000000000;;			if rbacregistry.BindingAuthorized(ctx, roleBinding.RoleRef, namespace, s.authorizer) {
0000000000000000000000000000000000000000;;				return obj, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Otherwise, see if we already have all the permissions contained in the referenced role
0000000000000000000000000000000000000000;;			rules, err := s.ruleResolver.GetRoleReferenceRules(roleBinding.RoleRef, namespace)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := rbacregistryvalidation.ConfirmNoEscalation(ctx, s.ruleResolver, rules); err != nil {
0000000000000000000000000000000000000000;;				return nil, errors.NewForbidden(groupResource, roleBinding.Name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return obj, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s.StandardStorage.Update(ctx, name, nonEscalatingInfo)
0000000000000000000000000000000000000000;;	}
