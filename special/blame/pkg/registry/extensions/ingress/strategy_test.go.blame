0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
8e46fdfb982f656399f4445d2a0fb01d03f22e8f;pkg/registry/ingress/strategy_test.go[pkg/registry/ingress/strategy_test.go][pkg/registry/extensions/ingress/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package ingress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIngress() extensions.Ingress {
0000000000000000000000000000000000000000;;		defaultBackend := extensions.IngressBackend{
0000000000000000000000000000000000000000;;			ServiceName: "default-backend",
0000000000000000000000000000000000000000;;			ServicePort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return extensions.Ingress{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.IngressSpec{
0000000000000000000000000000000000000000;;				Backend: &extensions.IngressBackend{
0000000000000000000000000000000000000000;;					ServiceName: "default-backend",
0000000000000000000000000000000000000000;;					ServicePort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: []extensions.IngressRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Host: "foo.bar.com",
0000000000000000000000000000000000000000;;						IngressRuleValue: extensions.IngressRuleValue{
0000000000000000000000000000000000000000;;							HTTP: &extensions.HTTPIngressRuleValue{
0000000000000000000000000000000000000000;;								Paths: []extensions.HTTPIngressPath{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Path:    "/foo",
0000000000000000000000000000000000000000;;										Backend: defaultBackend,
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.IngressStatus{
0000000000000000000000000000000000000000;;				LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;					Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;						{IP: "127.0.0.1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIngressStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if !Strategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Ingress must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if Strategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Ingress should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ingress := newIngress()
0000000000000000000000000000000000000000;;		Strategy.PrepareForCreate(ctx, &ingress)
0000000000000000000000000000000000000000;;		if len(ingress.Status.LoadBalancer.Ingress) != 0 {
0000000000000000000000000000000000000000;;			t.Error("Ingress should not allow setting status on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := Strategy.Validate(ctx, &ingress)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error validating %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidIngress := newIngress()
0000000000000000000000000000000000000000;;		invalidIngress.ResourceVersion = "4"
0000000000000000000000000000000000000000;;		invalidIngress.Spec = extensions.IngressSpec{}
0000000000000000000000000000000000000000;;		Strategy.PrepareForUpdate(ctx, &invalidIngress, &ingress)
0000000000000000000000000000000000000000;;		errs = Strategy.ValidateUpdate(ctx, &invalidIngress, &ingress)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a validation error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if invalidIngress.ResourceVersion != "4" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIngressStatusStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if !StatusStrategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Ingress must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if StatusStrategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Ingress should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldIngress := newIngress()
0000000000000000000000000000000000000000;;		newIngress := newIngress()
0000000000000000000000000000000000000000;;		oldIngress.ResourceVersion = "4"
0000000000000000000000000000000000000000;;		newIngress.ResourceVersion = "4"
0000000000000000000000000000000000000000;;		newIngress.Spec.Backend.ServiceName = "ignore"
0000000000000000000000000000000000000000;;		newIngress.Status = extensions.IngressStatus{
0000000000000000000000000000000000000000;;			LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;				Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;					{IP: "127.0.0.2"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		StatusStrategy.PrepareForUpdate(ctx, &newIngress, &oldIngress)
0000000000000000000000000000000000000000;;		if newIngress.Status.LoadBalancer.Ingress[0].IP != "127.0.0.2" {
0000000000000000000000000000000000000000;;			t.Errorf("Ingress status updates should allow change of status fields")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if newIngress.Spec.Backend.ServiceName != "default-backend" {
0000000000000000000000000000000000000000;;			t.Errorf("PrepareForUpdate should have preserved old spec")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := StatusStrategy.ValidateUpdate(ctx, &newIngress, &oldIngress)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversions(t *testing.T) {
0000000000000000000000000000000000000000;;		apitesting.TestSelectableFieldLabelConversionsOfKind(t,
0000000000000000000000000000000000000000;;			testapi.Extensions.GroupVersion().String(),
0000000000000000000000000000000000000000;;			"Ingress",
0000000000000000000000000000000000000000;;			IngressToSelectableFields(&extensions.Ingress{}),
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
