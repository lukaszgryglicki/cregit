0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
ac2274edba79186f929f618bd58d5940a80c93b3;pkg/registry/ingress/strategy.go[pkg/registry/ingress/strategy.go][pkg/registry/extensions/ingress/strategy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package ingress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/names"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions/validation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ingressStrategy implements verification logic for Replication Ingresss.
0000000000000000000000000000000000000000;;	type ingressStrategy struct {
0000000000000000000000000000000000000000;;		runtime.ObjectTyper
0000000000000000000000000000000000000000;;		names.NameGenerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Strategy is the default logic that applies when creating and updating Replication Ingress objects.
0000000000000000000000000000000000000000;;	var Strategy = ingressStrategy{api.Scheme, names.SimpleNameGenerator}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespaceScoped returns true because all Ingress' need to be within a namespace.
0000000000000000000000000000000000000000;;	func (ingressStrategy) NamespaceScoped() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForCreate clears the status of an Ingress before creation.
0000000000000000000000000000000000000000;;	func (ingressStrategy) PrepareForCreate(ctx genericapirequest.Context, obj runtime.Object) {
0000000000000000000000000000000000000000;;		ingress := obj.(*extensions.Ingress)
0000000000000000000000000000000000000000;;		// create cannot set status
0000000000000000000000000000000000000000;;		ingress.Status = extensions.IngressStatus{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ingress.Generation = 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForUpdate clears fields that are not allowed to be set by end users on update.
0000000000000000000000000000000000000000;;	func (ingressStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newIngress := obj.(*extensions.Ingress)
0000000000000000000000000000000000000000;;		oldIngress := old.(*extensions.Ingress)
0000000000000000000000000000000000000000;;		// Update is not allowed to set status
0000000000000000000000000000000000000000;;		newIngress.Status = oldIngress.Status
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any changes to the spec increment the generation number, any changes to the
0000000000000000000000000000000000000000;;		// status should reflect the generation number of the corresponding object.
0000000000000000000000000000000000000000;;		// See metav1.ObjectMeta description for more information on Generation.
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(oldIngress.Spec, newIngress.Spec) {
0000000000000000000000000000000000000000;;			newIngress.Generation = oldIngress.Generation + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate validates a new Ingress.
0000000000000000000000000000000000000000;;	func (ingressStrategy) Validate(ctx genericapirequest.Context, obj runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		ingress := obj.(*extensions.Ingress)
0000000000000000000000000000000000000000;;		err := validation.ValidateIngress(ingress)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Canonicalize normalizes the object after validation.
0000000000000000000000000000000000000000;;	func (ingressStrategy) Canonicalize(obj runtime.Object) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowCreateOnUpdate is false for Ingress; this means POST is needed to create one.
0000000000000000000000000000000000000000;;	func (ingressStrategy) AllowCreateOnUpdate() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateUpdate is the default update validation for an end user.
0000000000000000000000000000000000000000;;	func (ingressStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		validationErrorList := validation.ValidateIngress(obj.(*extensions.Ingress))
0000000000000000000000000000000000000000;;		updateErrorList := validation.ValidateIngressUpdate(obj.(*extensions.Ingress), old.(*extensions.Ingress))
0000000000000000000000000000000000000000;;		return append(validationErrorList, updateErrorList...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowUnconditionalUpdate is the default update policy for Ingress objects.
0000000000000000000000000000000000000000;;	func (ingressStrategy) AllowUnconditionalUpdate() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IngressToSelectableFields returns a field set that represents the object.
0000000000000000000000000000000000000000;;	func IngressToSelectableFields(ingress *extensions.Ingress) fields.Set {
0000000000000000000000000000000000000000;;		return generic.ObjectMetaFieldsSet(&ingress.ObjectMeta, true)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAttrs returns labels and fields of a given object for filtering purposes.
0000000000000000000000000000000000000000;;	func GetAttrs(obj runtime.Object) (labels.Set, fields.Set, bool, error) {
0000000000000000000000000000000000000000;;		ingress, ok := obj.(*extensions.Ingress)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, nil, false, fmt.Errorf("given object is not an Ingress.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labels.Set(ingress.ObjectMeta.Labels), IngressToSelectableFields(ingress), ingress.Initializers != nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchIngress is the filter used by the generic etcd backend to ingress
0000000000000000000000000000000000000000;;	// watch events from etcd to clients of the apiserver only interested in specific
0000000000000000000000000000000000000000;;	// labels/fields.
0000000000000000000000000000000000000000;;	func MatchIngress(label labels.Selector, field fields.Selector) storage.SelectionPredicate {
0000000000000000000000000000000000000000;;		return storage.SelectionPredicate{
0000000000000000000000000000000000000000;;			Label:    label,
0000000000000000000000000000000000000000;;			Field:    field,
0000000000000000000000000000000000000000;;			GetAttrs: GetAttrs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ingressStatusStrategy struct {
0000000000000000000000000000000000000000;;		ingressStrategy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var StatusStrategy = ingressStatusStrategy{Strategy}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForUpdate clears fields that are not allowed to be set by end users on update of status
0000000000000000000000000000000000000000;;	func (ingressStatusStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newIngress := obj.(*extensions.Ingress)
0000000000000000000000000000000000000000;;		oldIngress := old.(*extensions.Ingress)
0000000000000000000000000000000000000000;;		// status changes are not allowed to update spec
0000000000000000000000000000000000000000;;		newIngress.Spec = oldIngress.Spec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateUpdate is the default update validation for an end user updating status
0000000000000000000000000000000000000000;;	func (ingressStatusStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		return validation.ValidateIngressStatusUpdate(obj.(*extensions.Ingress), old.(*extensions.Ingress))
0000000000000000000000000000000000000000;;	}
