0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
ac2274edba79186f929f618bd58d5940a80c93b3;pkg/registry/ingress/etcd/etcd_test.go[pkg/registry/ingress/etcd/etcd_test.go][pkg/registry/extensions/ingress/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*REST, *StatusREST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, extensions.GroupName)
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           etcdStorage,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 1,
0000000000000000000000000000000000000000;;			ResourcePrefix:          "ingresses",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ingressStorage, statusStorage := NewREST(restOptions)
0000000000000000000000000000000000000000;;		return ingressStorage, statusStorage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		namespace           = metav1.NamespaceNone
0000000000000000000000000000000000000000;;		name                = "foo-ingress"
0000000000000000000000000000000000000000;;		defaultHostname     = "foo.bar.com"
0000000000000000000000000000000000000000;;		defaultBackendName  = "default-backend"
0000000000000000000000000000000000000000;;		defaultBackendPort  = intstr.FromInt(80)
0000000000000000000000000000000000000000;;		defaultLoadBalancer = "127.0.0.1"
0000000000000000000000000000000000000000;;		defaultPath         = "/foo"
0000000000000000000000000000000000000000;;		defaultPathMap      = map[string]string{defaultPath: defaultBackendName}
0000000000000000000000000000000000000000;;		defaultTLS          = []extensions.IngressTLS{
0000000000000000000000000000000000000000;;			{Hosts: []string{"foo.bar.com", "*.bar.com"}, SecretName: "fooSecret"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IngressRuleValues map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toHTTPIngressPaths(pathMap map[string]string) []extensions.HTTPIngressPath {
0000000000000000000000000000000000000000;;		httpPaths := []extensions.HTTPIngressPath{}
0000000000000000000000000000000000000000;;		for path, backend := range pathMap {
0000000000000000000000000000000000000000;;			httpPaths = append(httpPaths, extensions.HTTPIngressPath{
0000000000000000000000000000000000000000;;				Path: path,
0000000000000000000000000000000000000000;;				Backend: extensions.IngressBackend{
0000000000000000000000000000000000000000;;					ServiceName: backend,
0000000000000000000000000000000000000000;;					ServicePort: defaultBackendPort,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return httpPaths
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toIngressRules(hostRules map[string]IngressRuleValues) []extensions.IngressRule {
0000000000000000000000000000000000000000;;		rules := []extensions.IngressRule{}
0000000000000000000000000000000000000000;;		for host, pathMap := range hostRules {
0000000000000000000000000000000000000000;;			rules = append(rules, extensions.IngressRule{
0000000000000000000000000000000000000000;;				Host: host,
0000000000000000000000000000000000000000;;				IngressRuleValue: extensions.IngressRuleValue{
0000000000000000000000000000000000000000;;					HTTP: &extensions.HTTPIngressRuleValue{
0000000000000000000000000000000000000000;;						Paths: toHTTPIngressPaths(pathMap),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rules
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIngress(pathMap map[string]string) *extensions.Ingress {
0000000000000000000000000000000000000000;;		return &extensions.Ingress{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: namespace,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.IngressSpec{
0000000000000000000000000000000000000000;;				Backend: &extensions.IngressBackend{
0000000000000000000000000000000000000000;;					ServiceName: defaultBackendName,
0000000000000000000000000000000000000000;;					ServicePort: defaultBackendPort,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Rules: toIngressRules(map[string]IngressRuleValues{
0000000000000000000000000000000000000000;;					defaultHostname: pathMap,
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				TLS: defaultTLS,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.IngressStatus{
0000000000000000000000000000000000000000;;				LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;					Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;						{IP: defaultLoadBalancer},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validIngress() *extensions.Ingress {
0000000000000000000000000000000000000000;;		return newIngress(defaultPathMap)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		ingress := validIngress()
0000000000000000000000000000000000000000;;		noDefaultBackendAndRules := validIngress()
0000000000000000000000000000000000000000;;		noDefaultBackendAndRules.Spec.Backend = &extensions.IngressBackend{}
0000000000000000000000000000000000000000;;		noDefaultBackendAndRules.Spec.Rules = []extensions.IngressRule{}
0000000000000000000000000000000000000000;;		badPath := validIngress()
0000000000000000000000000000000000000000;;		badPath.Spec.Rules = toIngressRules(map[string]IngressRuleValues{
0000000000000000000000000000000000000000;;			"foo.bar.com": {"/invalid[": "svc"}})
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			ingress,
0000000000000000000000000000000000000000;;			noDefaultBackendAndRules,
0000000000000000000000000000000000000000;;			badPath,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestUpdate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validIngress(),
0000000000000000000000000000000000000000;;			// updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.Ingress)
0000000000000000000000000000000000000000;;				object.Spec.Rules = toIngressRules(map[string]IngressRuleValues{
0000000000000000000000000000000000000000;;					"bar.foo.com": {"/bar": defaultBackendName},
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				object.Spec.TLS = append(object.Spec.TLS, extensions.IngressTLS{
0000000000000000000000000000000000000000;;					Hosts:      []string{"*.google.com"},
0000000000000000000000000000000000000000;;					SecretName: "googleSecret",
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid updateFunc: ObjeceMeta is not to be tampered with.
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.Ingress)
0000000000000000000000000000000000000000;;				object.Name = ""
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.Ingress)
0000000000000000000000000000000000000000;;				object.Spec.Rules = toIngressRules(map[string]IngressRuleValues{
0000000000000000000000000000000000000000;;					"foo.bar.com": {"/invalid[": "svc"}})
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestDelete(validIngress())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validIngress())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestList(validIngress())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validIngress(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"a": "c"},
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": name},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "bar"},
0000000000000000000000000000000000000000;;				{"name": name},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestShortNames(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"ing"}
0000000000000000000000000000000000000000;;		registrytest.AssertShortNames(t, storage, expected)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO TestUpdateStatus
