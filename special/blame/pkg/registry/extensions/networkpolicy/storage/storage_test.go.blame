0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bbc1afe77d6d348563667dc0fb44e7c0427b47b6;pkg/registry/networkpolicy/etcd/etcd_test.go[pkg/registry/networkpolicy/etcd/etcd_test.go][pkg/registry/extensions/networkpolicy/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*REST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "extensions")
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           etcdStorage,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 1,
0000000000000000000000000000000000000000;;			ResourcePrefix:          "networkpolicies",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewREST(restOptions), server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createNetworkPolicy is a helper function that returns a NetworkPolicy with the updated resource version.
0000000000000000000000000000000000000000;;	func createNetworkPolicy(storage *REST, np extensions.NetworkPolicy, t *testing.T) (extensions.NetworkPolicy, error) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), np.Namespace)
0000000000000000000000000000000000000000;;		obj, err := storage.Create(ctx, &np, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create NetworkPolicy, %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newNP := obj.(*extensions.NetworkPolicy)
0000000000000000000000000000000000000000;;		return *newNP, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewNetworkPolicy() *extensions.NetworkPolicy {
0000000000000000000000000000000000000000;;		port := intstr.FromInt(80)
0000000000000000000000000000000000000000;;		return &extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Labels:    map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;				PodSelector: metav1.LabelSelector{MatchLabels: map[string]string{"a": "b"}},
0000000000000000000000000000000000000000;;				Ingress: []extensions.NetworkPolicyIngressRule{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						From: []extensions.NetworkPolicyPeer{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								PodSelector: &metav1.LabelSelector{MatchLabels: map[string]string{"c": "d"}},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []extensions.NetworkPolicyPort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port: &port,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validNetworkPolicy = *validNewNetworkPolicy()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		np := validNewNetworkPolicy()
0000000000000000000000000000000000000000;;		np.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidSelector := map[string]string{"NoUppercaseOrSpecialCharsLike=Equals": "b"}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			np,
0000000000000000000000000000000000000000;;			// invalid (invalid selector)
0000000000000000000000000000000000000000;;			&extensions.NetworkPolicy{
0000000000000000000000000000000000000000;;				Spec: extensions.NetworkPolicySpec{
0000000000000000000000000000000000000000;;					PodSelector: metav1.LabelSelector{MatchLabels: invalidSelector},
0000000000000000000000000000000000000000;;					Ingress:     []extensions.NetworkPolicyIngressRule{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestUpdate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validNewNetworkPolicy(),
0000000000000000000000000000000000000000;;			// valid updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.NetworkPolicy)
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.NetworkPolicy)
0000000000000000000000000000000000000000;;				object.Name = ""
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.NetworkPolicy)
0000000000000000000000000000000000000000;;				object.Spec.PodSelector = metav1.LabelSelector{MatchLabels: map[string]string{}}
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestDelete(validNewNetworkPolicy())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validNewNetworkPolicy())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestList(validNewNetworkPolicy())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validNewNetworkPolicy(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"a": "b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"a": "c"},
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matchin fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "bar"},
0000000000000000000000000000000000000000;;				{"name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
