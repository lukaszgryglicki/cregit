0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
147354c158c1a5528ff8a23b70dc053ffb91ae4c;pkg/registry/replicaset/etcd/etcd.go[pkg/registry/replicaset/etcd/etcd.go][pkg/registry/extensions/replicaset/storage/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If you make changes to this file, you should also make the corresponding change in ReplicationController.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		extvalidation "k8s.io/kubernetes/pkg/apis/extensions/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/cachesize"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/extensions/replicaset"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplicaSetStorage includes dummy storage for ReplicaSets and for Scale subresource.
0000000000000000000000000000000000000000;;	type ReplicaSetStorage struct {
0000000000000000000000000000000000000000;;		ReplicaSet *REST
0000000000000000000000000000000000000000;;		Status     *StatusREST
0000000000000000000000000000000000000000;;		Scale      *ScaleREST
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStorage(optsGetter generic.RESTOptionsGetter) ReplicaSetStorage {
0000000000000000000000000000000000000000;;		replicaSetRest, replicaSetStatusRest := NewREST(optsGetter)
0000000000000000000000000000000000000000;;		replicaSetRegistry := replicaset.NewRegistry(replicaSetRest)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ReplicaSetStorage{
0000000000000000000000000000000000000000;;			ReplicaSet: replicaSetRest,
0000000000000000000000000000000000000000;;			Status:     replicaSetStatusRest,
0000000000000000000000000000000000000000;;			Scale:      &ScaleREST{registry: replicaSetRegistry},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewREST returns a RESTStorage object that will work against ReplicaSet.
0000000000000000000000000000000000000000;;	func NewREST(optsGetter generic.RESTOptionsGetter) (*REST, *StatusREST) {
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:            api.Scheme,
0000000000000000000000000000000000000000;;			NewFunc:           func() runtime.Object { return &extensions.ReplicaSet{} },
0000000000000000000000000000000000000000;;			NewListFunc:       func() runtime.Object { return &extensions.ReplicaSetList{} },
0000000000000000000000000000000000000000;;			PredicateFunc:     replicaset.MatchReplicaSet,
0000000000000000000000000000000000000000;;			QualifiedResource: extensions.Resource("replicasets"),
0000000000000000000000000000000000000000;;			WatchCacheSize:    cachesize.GetWatchCacheSizeByResource("replicasets"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: replicaset.Strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: replicaset.Strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: replicaset.Strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: replicaset.GetAttrs}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statusStore := *store
0000000000000000000000000000000000000000;;		statusStore.UpdateStrategy = replicaset.StatusStrategy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &REST{store}, &StatusREST{store: &statusStore}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement ShortNamesProvider
0000000000000000000000000000000000000000;;	var _ rest.ShortNamesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShortNames implements the ShortNamesProvider interface. Returns a list of short names for a resource.
0000000000000000000000000000000000000000;;	func (r *REST) ShortNames() []string {
0000000000000000000000000000000000000000;;		return []string{"rs"}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement CategoriesProvider
0000000000000000000000000000000000000000;;	var _ rest.CategoriesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Categories implements the CategoriesProvider interface. Returns a list of categories a resource is part of.
0000000000000000000000000000000000000000;;	func (r *REST) Categories() []string {
0000000000000000000000000000000000000000;;		return []string{"all"}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatusREST implements the REST endpoint for changing the status of a ReplicaSet
0000000000000000000000000000000000000000;;	type StatusREST struct {
0000000000000000000000000000000000000000;;		store *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *StatusREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &extensions.ReplicaSet{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the object from the storage. It is required to support Patch.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return r.store.Get(ctx, name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update alters the status subset of an object.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		return r.store.Update(ctx, name, objInfo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScaleREST struct {
0000000000000000000000000000000000000000;;		registry replicaset.Registry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScaleREST implements Patcher
0000000000000000000000000000000000000000;;	var _ = rest.Patcher(&ScaleREST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new Scale object
0000000000000000000000000000000000000000;;	func (r *ScaleREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &extensions.Scale{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ScaleREST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		rs, err := r.registry.GetReplicaSet(ctx, name, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(extensions.Resource("replicasets/scale"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale, err := scaleFromReplicaSet(rs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.NewBadRequest(fmt.Sprintf("%v", err))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return scale, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ScaleREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		rs, err := r.registry.GetReplicaSet(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewNotFound(extensions.Resource("replicasets/scale"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oldScale, err := scaleFromReplicaSet(rs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := objInfo.UpdatedObject(ctx, oldScale)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("nil update passed to Scale"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale, ok := obj.(*extensions.Scale)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("wrong object passed to Scale update: %v", obj))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if errs := extvalidation.ValidateScale(scale); len(errs) > 0 {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewInvalid(extensions.Kind("Scale"), scale.Name, errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rs.Spec.Replicas = scale.Spec.Replicas
0000000000000000000000000000000000000000;;		rs.ResourceVersion = scale.ResourceVersion
0000000000000000000000000000000000000000;;		rs, err = r.registry.UpdateReplicaSet(ctx, rs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newScale, err := scaleFromReplicaSet(rs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("%v", err))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newScale, false, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scaleFromReplicaSet returns a scale subresource for a replica set.
0000000000000000000000000000000000000000;;	func scaleFromReplicaSet(rs *extensions.ReplicaSet) (*extensions.Scale, error) {
0000000000000000000000000000000000000000;;		return &extensions.Scale{
0000000000000000000000000000000000000000;;			// TODO: Create a variant of ObjectMeta type that only contains the fields below.
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              rs.Name,
0000000000000000000000000000000000000000;;				Namespace:         rs.Namespace,
0000000000000000000000000000000000000000;;				UID:               rs.UID,
0000000000000000000000000000000000000000;;				ResourceVersion:   rs.ResourceVersion,
0000000000000000000000000000000000000000;;				CreationTimestamp: rs.CreationTimestamp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: rs.Spec.Replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.ScaleStatus{
0000000000000000000000000000000000000000;;				Replicas: rs.Status.Replicas,
0000000000000000000000000000000000000000;;				Selector: rs.Spec.Selector,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
