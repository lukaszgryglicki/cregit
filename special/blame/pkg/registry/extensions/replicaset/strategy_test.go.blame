0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
147354c158c1a5528ff8a23b70dc053ffb91ae4c;pkg/registry/replicaset/strategy_test.go[pkg/registry/replicaset/strategy_test.go][pkg/registry/extensions/replicaset/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package replicaset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplicaSetStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if !Strategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicaSet must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if Strategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicaSet should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rs := &extensions.ReplicaSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;			Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;				Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;				Replicas:           1,
0000000000000000000000000000000000000000;;				ObservedGeneration: int64(10),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Strategy.PrepareForCreate(ctx, rs)
0000000000000000000000000000000000000000;;		if rs.Status.Replicas != 0 {
0000000000000000000000000000000000000000;;			t.Error("ReplicaSet should not allow setting status.replicas on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if rs.Status.ObservedGeneration != int64(0) {
0000000000000000000000000000000000000000;;			t.Error("ReplicaSet should not allow setting status.observedGeneration on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := Strategy.Validate(ctx, rs)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error validating %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidRc := &extensions.ReplicaSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "bar", ResourceVersion: "4"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		Strategy.PrepareForUpdate(ctx, invalidRc, rs)
0000000000000000000000000000000000000000;;		errs = Strategy.ValidateUpdate(ctx, invalidRc, rs)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a validation error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if invalidRc.ResourceVersion != "4" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplicaSetStatusStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if !StatusStrategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicaSet must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if StatusStrategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicaSet should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldRS := &extensions.ReplicaSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault, ResourceVersion: "10"},
0000000000000000000000000000000000000000;;			Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;				Replicas: 3,
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;				Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;				Replicas:           1,
0000000000000000000000000000000000000000;;				ObservedGeneration: int64(10),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newRS := &extensions.ReplicaSet{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault, ResourceVersion: "9"},
0000000000000000000000000000000000000000;;			Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;				Replicas: 1,
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: validSelector},
0000000000000000000000000000000000000000;;				Template: validPodTemplate.Template,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;				Replicas:           3,
0000000000000000000000000000000000000000;;				ObservedGeneration: int64(11),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		StatusStrategy.PrepareForUpdate(ctx, newRS, oldRS)
0000000000000000000000000000000000000000;;		if newRS.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicaSet status updates should allow change of replicas: %v", newRS.Status.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if newRS.Spec.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("PrepareForUpdate should have preferred spec")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := StatusStrategy.ValidateUpdate(ctx, newRS, oldRS)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
