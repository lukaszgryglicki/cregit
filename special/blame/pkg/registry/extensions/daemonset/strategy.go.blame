0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
8313d7dd8dbfcd22e4ec22aaeca53cc375603af2;pkg/registry/daemon/rest.go[pkg/registry/daemon/rest.go][pkg/registry/extensions/daemonset/strategy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package daemonset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/names"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions/validation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// daemonSetStrategy implements verification logic for daemon sets.
0000000000000000000000000000000000000000;;	type daemonSetStrategy struct {
0000000000000000000000000000000000000000;;		runtime.ObjectTyper
0000000000000000000000000000000000000000;;		names.NameGenerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Strategy is the default logic that applies when creating and updating DaemonSet objects.
0000000000000000000000000000000000000000;;	var Strategy = daemonSetStrategy{api.Scheme, names.SimpleNameGenerator}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultGarbageCollectionPolicy returns Orphan because that was the default
0000000000000000000000000000000000000000;;	// behavior before the server-side garbage collection was implemented.
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) DefaultGarbageCollectionPolicy() rest.GarbageCollectionPolicy {
0000000000000000000000000000000000000000;;		return rest.OrphanDependents
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespaceScoped returns true because all DaemonSets need to be within a namespace.
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) NamespaceScoped() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForCreate clears the status of a daemon set before creation.
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) PrepareForCreate(ctx genericapirequest.Context, obj runtime.Object) {
0000000000000000000000000000000000000000;;		daemonSet := obj.(*extensions.DaemonSet)
0000000000000000000000000000000000000000;;		daemonSet.Status = extensions.DaemonSetStatus{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		daemonSet.Generation = 1
0000000000000000000000000000000000000000;;		if daemonSet.Spec.TemplateGeneration < 1 {
0000000000000000000000000000000000000000;;			daemonSet.Spec.TemplateGeneration = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForUpdate clears fields that are not allowed to be set by end users on update.
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newDaemonSet := obj.(*extensions.DaemonSet)
0000000000000000000000000000000000000000;;		oldDaemonSet := old.(*extensions.DaemonSet)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// update is not allowed to set status
0000000000000000000000000000000000000000;;		newDaemonSet.Status = oldDaemonSet.Status
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// update is not allowed to set TemplateGeneration
0000000000000000000000000000000000000000;;		newDaemonSet.Spec.TemplateGeneration = oldDaemonSet.Spec.TemplateGeneration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any changes to the spec increment the generation number, any changes to the
0000000000000000000000000000000000000000;;		// status should reflect the generation number of the corresponding object. We push
0000000000000000000000000000000000000000;;		// the burden of managing the status onto the clients because we can't (in general)
0000000000000000000000000000000000000000;;		// know here what version of spec the writer of the status has seen. It may seem like
0000000000000000000000000000000000000000;;		// we can at first -- since obj contains spec -- but in the future we will probably make
0000000000000000000000000000000000000000;;		// status its own object, and even if we don't, writes may be the result of a
0000000000000000000000000000000000000000;;		// read-update-write loop, so the contents of spec may not actually be the spec that
0000000000000000000000000000000000000000;;		// the manager has *seen*.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TODO: Any changes to a part of the object that represents desired state (labels,
0000000000000000000000000000000000000000;;		// annotations etc) should also increment the generation.
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(oldDaemonSet.Spec.Template, newDaemonSet.Spec.Template) {
0000000000000000000000000000000000000000;;			newDaemonSet.Spec.TemplateGeneration = oldDaemonSet.Spec.TemplateGeneration + 1
0000000000000000000000000000000000000000;;			newDaemonSet.Generation = oldDaemonSet.Generation + 1
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(oldDaemonSet.Spec, newDaemonSet.Spec) {
0000000000000000000000000000000000000000;;			newDaemonSet.Generation = oldDaemonSet.Generation + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate validates a new daemon set.
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) Validate(ctx genericapirequest.Context, obj runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		daemonSet := obj.(*extensions.DaemonSet)
0000000000000000000000000000000000000000;;		return validation.ValidateDaemonSet(daemonSet)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Canonicalize normalizes the object after validation.
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) Canonicalize(obj runtime.Object) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowCreateOnUpdate is false for daemon set; this means a POST is
0000000000000000000000000000000000000000;;	// needed to create one
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) AllowCreateOnUpdate() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateUpdate is the default update validation for an end user.
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		validationErrorList := validation.ValidateDaemonSet(obj.(*extensions.DaemonSet))
0000000000000000000000000000000000000000;;		updateErrorList := validation.ValidateDaemonSetUpdate(obj.(*extensions.DaemonSet), old.(*extensions.DaemonSet))
0000000000000000000000000000000000000000;;		return append(validationErrorList, updateErrorList...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowUnconditionalUpdate is the default update policy for daemon set objects.
0000000000000000000000000000000000000000;;	func (daemonSetStrategy) AllowUnconditionalUpdate() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DaemonSetToSelectableFields returns a field set that represents the object.
0000000000000000000000000000000000000000;;	func DaemonSetToSelectableFields(daemon *extensions.DaemonSet) fields.Set {
0000000000000000000000000000000000000000;;		return generic.ObjectMetaFieldsSet(&daemon.ObjectMeta, true)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAttrs returns labels and fields of a given object for filtering purposes.
0000000000000000000000000000000000000000;;	func GetAttrs(obj runtime.Object) (labels.Set, fields.Set, bool, error) {
0000000000000000000000000000000000000000;;		ds, ok := obj.(*extensions.DaemonSet)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, nil, false, fmt.Errorf("given object is not a ds.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labels.Set(ds.ObjectMeta.Labels), DaemonSetToSelectableFields(ds), ds.Initializers != nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchSetDaemon is the filter used by the generic etcd backend to route
0000000000000000000000000000000000000000;;	// watch events from etcd to clients of the apiserver only interested in specific
0000000000000000000000000000000000000000;;	// labels/fields.
0000000000000000000000000000000000000000;;	func MatchDaemonSet(label labels.Selector, field fields.Selector) storage.SelectionPredicate {
0000000000000000000000000000000000000000;;		return storage.SelectionPredicate{
0000000000000000000000000000000000000000;;			Label:    label,
0000000000000000000000000000000000000000;;			Field:    field,
0000000000000000000000000000000000000000;;			GetAttrs: GetAttrs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type daemonSetStatusStrategy struct {
0000000000000000000000000000000000000000;;		daemonSetStrategy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var StatusStrategy = daemonSetStatusStrategy{Strategy}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (daemonSetStatusStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newDaemonSet := obj.(*extensions.DaemonSet)
0000000000000000000000000000000000000000;;		oldDaemonSet := old.(*extensions.DaemonSet)
0000000000000000000000000000000000000000;;		newDaemonSet.Spec = oldDaemonSet.Spec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (daemonSetStatusStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		return validation.ValidateDaemonSetStatusUpdate(obj.(*extensions.DaemonSet), old.(*extensions.DaemonSet))
0000000000000000000000000000000000000000;;	}
