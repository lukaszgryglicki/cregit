0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
c643f715cc0efa16b25847206c8f7a3d47f78146;pkg/registry/deployment/etcd/etcd_test.go[pkg/registry/deployment/etcd/etcd_test.go][pkg/registry/extensions/deployment/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		storeerr "k8s.io/apiserver/pkg/storage/errors"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const defaultReplicas = 100
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*DeploymentStorage, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, extensions.GroupName)
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{StorageConfig: etcdStorage, Decorator: generic.UndecoratedStorage, DeleteCollectionWorkers: 1, ResourcePrefix: "deployments"}
0000000000000000000000000000000000000000;;		deploymentStorage := NewStorage(restOptions)
0000000000000000000000000000000000000000;;		return &deploymentStorage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var namespace = "foo-namespace"
0000000000000000000000000000000000000000;;	var name = "foo-deployment"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewDeployment() *extensions.Deployment {
0000000000000000000000000000000000000000;;		return &extensions.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: namespace,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"a": "b"}},
0000000000000000000000000000000000000000;;				Strategy: extensions.DeploymentStrategy{
0000000000000000000000000000000000000000;;					Type: extensions.RollingUpdateDeploymentStrategyType,
0000000000000000000000000000000000000000;;					RollingUpdate: &extensions.RollingUpdateDeployment{
0000000000000000000000000000000000000000;;						MaxSurge:       intstr.FromInt(1),
0000000000000000000000000000000000000000;;						MaxUnavailable: intstr.FromInt(1),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:                     "test",
0000000000000000000000000000000000000000;;								Image:                    "test_image",
0000000000000000000000000000000000000000;;								ImagePullPolicy:          api.PullIfNotPresent,
0000000000000000000000000000000000000000;;								TerminationMessagePolicy: api.TerminationMessageReadFile,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Replicas: 7,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;				Replicas: 5,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validDeployment = *validNewDeployment()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Deployment.Store)
0000000000000000000000000000000000000000;;		deployment := validNewDeployment()
0000000000000000000000000000000000000000;;		deployment.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			deployment,
0000000000000000000000000000000000000000;;			// invalid (invalid selector)
0000000000000000000000000000000000000000;;			&extensions.Deployment{
0000000000000000000000000000000000000000;;				Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;					Selector: &metav1.LabelSelector{MatchLabels: map[string]string{}},
0000000000000000000000000000000000000000;;					Template: validDeployment.Spec.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Deployment.Store)
0000000000000000000000000000000000000000;;		test.TestUpdate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validNewDeployment(),
0000000000000000000000000000000000000000;;			// updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.Deployment)
0000000000000000000000000000000000000000;;				object.Spec.Template.Spec.NodeSelector = map[string]string{"c": "d"}
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.Deployment)
0000000000000000000000000000000000000000;;				object.Name = ""
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.Deployment)
0000000000000000000000000000000000000000;;				object.Spec.Template.Spec.RestartPolicy = api.RestartPolicyOnFailure
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*extensions.Deployment)
0000000000000000000000000000000000000000;;				object.Spec.Selector = &metav1.LabelSelector{MatchLabels: map[string]string{}}
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Deployment.Store)
0000000000000000000000000000000000000000;;		test.TestDelete(validNewDeployment())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Deployment.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validNewDeployment())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Deployment.Store)
0000000000000000000000000000000000000000;;		test.TestList(validNewDeployment())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Deployment.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validNewDeployment(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"a": "c"},
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": name},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matchin fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "bar"},
0000000000000000000000000000000000000000;;				{"name": name},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestScaleGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		var deployment extensions.Deployment
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), namespace)
0000000000000000000000000000000000000000;;		key := "/deployments/" + namespace + "/" + name
0000000000000000000000000000000000000000;;		if err := storage.Deployment.Storage.Create(ctx, key, &validDeployment, &deployment, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error setting new deployment (key: %s) %v: %v", key, validDeployment, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		want := &extensions.Scale{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              name,
0000000000000000000000000000000000000000;;				Namespace:         namespace,
0000000000000000000000000000000000000000;;				UID:               deployment.UID,
0000000000000000000000000000000000000000;;				ResourceVersion:   deployment.ResourceVersion,
0000000000000000000000000000000000000000;;				CreationTimestamp: deployment.CreationTimestamp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: validDeployment.Spec.Replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.ScaleStatus{
0000000000000000000000000000000000000000;;				Replicas: validDeployment.Status.Replicas,
0000000000000000000000000000000000000000;;				Selector: validDeployment.Spec.Selector,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Scale.Get(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error fetching scale for %s: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		got := obj.(*extensions.Scale)
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(want, got) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected scale: %s", diff.ObjectDiff(want, got))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestScaleUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		var deployment extensions.Deployment
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), namespace)
0000000000000000000000000000000000000000;;		key := "/deployments/" + namespace + "/" + name
0000000000000000000000000000000000000000;;		if err := storage.Deployment.Storage.Create(ctx, key, &validDeployment, &deployment, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error setting new deployment (key: %s) %v: %v", key, validDeployment, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		replicas := int32(12)
0000000000000000000000000000000000000000;;		update := extensions.Scale{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespace},
0000000000000000000000000000000000000000;;			Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := storage.Scale.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(&update, api.Scheme)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error updating scale %v: %v", update, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Scale.Get(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error fetching scale for %s: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale := obj.(*extensions.Scale)
0000000000000000000000000000000000000000;;		if scale.Spec.Replicas != replicas {
0000000000000000000000000000000000000000;;			t.Errorf("wrong replicas count expected: %d got: %d", replicas, deployment.Spec.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		update.ResourceVersion = deployment.ResourceVersion
0000000000000000000000000000000000000000;;		update.Spec.Replicas = 15
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err = storage.Scale.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(&update, api.Scheme)); err != nil && !errors.IsConflict(err) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error, expecting an update conflict but got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatusUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), namespace)
0000000000000000000000000000000000000000;;		key := "/deployments/" + namespace + "/" + name
0000000000000000000000000000000000000000;;		if err := storage.Deployment.Storage.Create(ctx, key, &validDeployment, nil, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		update := extensions.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: validDeployment.ObjectMeta,
0000000000000000000000000000000000000000;;			Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: defaultReplicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;				Replicas: defaultReplicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := storage.Status.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(&update, api.Scheme)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Deployment.Get(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deployment := obj.(*extensions.Deployment)
0000000000000000000000000000000000000000;;		if deployment.Spec.Replicas != 7 {
0000000000000000000000000000000000000000;;			t.Errorf("we expected .spec.replicas to not be updated but it was updated to %v", deployment.Spec.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if deployment.Status.Replicas != defaultReplicas {
0000000000000000000000000000000000000000;;			t.Errorf("we expected .status.replicas to be updated to %d but it was %v", defaultReplicas, deployment.Status.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdCreateDeploymentRollback(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), namespace)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			rollback extensions.DeploymentRollback
0000000000000000000000000000000000000000;;			errOK    func(error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"normal": {
0000000000000000000000000000000000000000;;				rollback: extensions.DeploymentRollback{
0000000000000000000000000000000000000000;;					Name:               name,
0000000000000000000000000000000000000000;;					UpdatedAnnotations: map[string]string{},
0000000000000000000000000000000000000000;;					RollbackTo:         extensions.RollbackConfig{Revision: 1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errOK: func(err error) bool { return err == nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"noAnnotation": {
0000000000000000000000000000000000000000;;				rollback: extensions.DeploymentRollback{
0000000000000000000000000000000000000000;;					Name:       name,
0000000000000000000000000000000000000000;;					RollbackTo: extensions.RollbackConfig{Revision: 1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errOK: func(err error) bool { return err == nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"noName": {
0000000000000000000000000000000000000000;;				rollback: extensions.DeploymentRollback{
0000000000000000000000000000000000000000;;					UpdatedAnnotations: map[string]string{},
0000000000000000000000000000000000000000;;					RollbackTo:         extensions.RollbackConfig{Revision: 1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errOK: func(err error) bool { return err != nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, test := range testCases {
0000000000000000000000000000000000000000;;			storage, server := newStorage(t)
0000000000000000000000000000000000000000;;			rollbackStorage := storage.Rollback
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := storage.Deployment.Create(ctx, validNewDeployment(), false); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := rollbackStorage.Create(ctx, &test.rollback, false); !test.errOK(err) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;			} else if err == nil {
0000000000000000000000000000000000000000;;				// If rollback succeeded, verify Rollback field of deployment
0000000000000000000000000000000000000000;;				d, err := storage.Deployment.Get(ctx, validNewDeployment().ObjectMeta.Name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;				} else if !reflect.DeepEqual(*d.(*extensions.Deployment).Spec.RollbackTo, test.rollback.RollbackTo) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected: %v, got: %v", k, *d.(*extensions.Deployment).Spec.RollbackTo, test.rollback.RollbackTo)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;			server.Terminate(t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure that when a deploymentRollback is created for a deployment that has already been deleted
0000000000000000000000000000000000000000;;	// by the API server, API server returns not-found error.
0000000000000000000000000000000000000000;;	func TestEtcdCreateDeploymentRollbackNoDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		rollbackStorage := storage.Rollback
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), namespace)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := rollbackStorage.Create(ctx, &extensions.DeploymentRollback{
0000000000000000000000000000000000000000;;			Name:               name,
0000000000000000000000000000000000000000;;			UpdatedAnnotations: map[string]string{},
0000000000000000000000000000000000000000;;			RollbackTo:         extensions.RollbackConfig{Revision: 1},
0000000000000000000000000000000000000000;;		}, false)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected not-found-error but got nothing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !errors.IsNotFound(storeerr.InterpretGetError(err, extensions.Resource("deployments"), name)) {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error returned: %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = storage.Deployment.Get(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected not-found-error but got nothing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !errors.IsNotFound(storeerr.InterpretGetError(err, extensions.Resource("deployments"), name)) {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestShortNames(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"deploy"}
0000000000000000000000000000000000000000;;		registrytest.AssertShortNames(t, storage.Deployment, expected)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCategories(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Deployment.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"all"}
0000000000000000000000000000000000000000;;		registrytest.AssertCategories(t, storage.Deployment, expected)
0000000000000000000000000000000000000000;;	}
