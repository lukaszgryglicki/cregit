0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
c643f715cc0efa16b25847206c8f7a3d47f78146;pkg/registry/deployment/etcd/etcd.go[pkg/registry/deployment/etcd/etcd.go][pkg/registry/extensions/deployment/storage/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		storeerr "k8s.io/apiserver/pkg/storage/errors"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		extvalidation "k8s.io/kubernetes/pkg/apis/extensions/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/cachesize"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/extensions/deployment"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeploymentStorage includes dummy storage for Deployments and for Scale subresource.
0000000000000000000000000000000000000000;;	type DeploymentStorage struct {
0000000000000000000000000000000000000000;;		Deployment *REST
0000000000000000000000000000000000000000;;		Status     *StatusREST
0000000000000000000000000000000000000000;;		Scale      *ScaleREST
0000000000000000000000000000000000000000;;		Rollback   *RollbackREST
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStorage(optsGetter generic.RESTOptionsGetter) DeploymentStorage {
0000000000000000000000000000000000000000;;		deploymentRest, deploymentStatusRest, deploymentRollbackRest := NewREST(optsGetter)
0000000000000000000000000000000000000000;;		deploymentRegistry := deployment.NewRegistry(deploymentRest)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return DeploymentStorage{
0000000000000000000000000000000000000000;;			Deployment: deploymentRest,
0000000000000000000000000000000000000000;;			Status:     deploymentStatusRest,
0000000000000000000000000000000000000000;;			Scale:      &ScaleREST{registry: deploymentRegistry},
0000000000000000000000000000000000000000;;			Rollback:   deploymentRollbackRest,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewREST returns a RESTStorage object that will work against deployments.
0000000000000000000000000000000000000000;;	func NewREST(optsGetter generic.RESTOptionsGetter) (*REST, *StatusREST, *RollbackREST) {
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:            api.Scheme,
0000000000000000000000000000000000000000;;			NewFunc:           func() runtime.Object { return &extensions.Deployment{} },
0000000000000000000000000000000000000000;;			NewListFunc:       func() runtime.Object { return &extensions.DeploymentList{} },
0000000000000000000000000000000000000000;;			PredicateFunc:     deployment.MatchDeployment,
0000000000000000000000000000000000000000;;			QualifiedResource: extensions.Resource("deployments"),
0000000000000000000000000000000000000000;;			WatchCacheSize:    cachesize.GetWatchCacheSizeByResource("deployments"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: deployment.Strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: deployment.Strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: deployment.Strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: deployment.GetAttrs}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statusStore := *store
0000000000000000000000000000000000000000;;		statusStore.UpdateStrategy = deployment.StatusStrategy
0000000000000000000000000000000000000000;;		return &REST{store}, &StatusREST{store: &statusStore}, &RollbackREST{store: store}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement ShortNamesProvider
0000000000000000000000000000000000000000;;	var _ rest.ShortNamesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShortNames implements the ShortNamesProvider interface. Returns a list of short names for a resource.
0000000000000000000000000000000000000000;;	func (r *REST) ShortNames() []string {
0000000000000000000000000000000000000000;;		return []string{"deploy"}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement CategoriesProvider
0000000000000000000000000000000000000000;;	var _ rest.CategoriesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Categories implements the CategoriesProvider interface. Returns a list of categories a resource is part of.
0000000000000000000000000000000000000000;;	func (r *REST) Categories() []string {
0000000000000000000000000000000000000000;;		return []string{"all"}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatusREST implements the REST endpoint for changing the status of a deployment
0000000000000000000000000000000000000000;;	type StatusREST struct {
0000000000000000000000000000000000000000;;		store *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *StatusREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &extensions.Deployment{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the object from the storage. It is required to support Patch.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return r.store.Get(ctx, name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update alters the status subset of an object.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		return r.store.Update(ctx, name, objInfo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RollbackREST implements the REST endpoint for initiating the rollback of a deployment
0000000000000000000000000000000000000000;;	type RollbackREST struct {
0000000000000000000000000000000000000000;;		store *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a rollback
0000000000000000000000000000000000000000;;	func (r *RollbackREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &extensions.DeploymentRollback{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = rest.Creater(&RollbackREST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RollbackREST) Create(ctx genericapirequest.Context, obj runtime.Object, includeUninitialized bool) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		rollback, ok := obj.(*extensions.DeploymentRollback)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, errors.NewBadRequest(fmt.Sprintf("not a DeploymentRollback: %#v", obj))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if errs := extvalidation.ValidateDeploymentRollback(rollback); len(errs) != 0 {
0000000000000000000000000000000000000000;;			return nil, errors.NewInvalid(extensions.Kind("DeploymentRollback"), rollback.Name, errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update the Deployment with information in DeploymentRollback to trigger rollback
0000000000000000000000000000000000000000;;		err := r.rollbackDeployment(ctx, rollback.Name, &rollback.RollbackTo, rollback.UpdatedAnnotations)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &metav1.Status{
0000000000000000000000000000000000000000;;			Message: fmt.Sprintf("rollback request for deployment %q succeeded", rollback.Name),
0000000000000000000000000000000000000000;;			Code:    http.StatusOK,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RollbackREST) rollbackDeployment(ctx genericapirequest.Context, deploymentID string, config *extensions.RollbackConfig, annotations map[string]string) error {
0000000000000000000000000000000000000000;;		if _, err := r.setDeploymentRollback(ctx, deploymentID, config, annotations); err != nil {
0000000000000000000000000000000000000000;;			err = storeerr.InterpretGetError(err, extensions.Resource("deployments"), deploymentID)
0000000000000000000000000000000000000000;;			err = storeerr.InterpretUpdateError(err, extensions.Resource("deployments"), deploymentID)
0000000000000000000000000000000000000000;;			if _, ok := err.(*errors.StatusError); !ok {
0000000000000000000000000000000000000000;;				err = errors.NewInternalError(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RollbackREST) setDeploymentRollback(ctx genericapirequest.Context, deploymentID string, config *extensions.RollbackConfig, annotations map[string]string) (*extensions.Deployment, error) {
0000000000000000000000000000000000000000;;		dKey, err := r.store.KeyFunc(ctx, deploymentID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var finalDeployment *extensions.Deployment
0000000000000000000000000000000000000000;;		err = r.store.Storage.GuaranteedUpdate(ctx, dKey, &extensions.Deployment{}, false, nil, storage.SimpleUpdate(func(obj runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			d, ok := obj.(*extensions.Deployment)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unexpected object: %#v", obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if d.Annotations == nil {
0000000000000000000000000000000000000000;;				d.Annotations = make(map[string]string)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k, v := range annotations {
0000000000000000000000000000000000000000;;				d.Annotations[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			d.Spec.RollbackTo = config
0000000000000000000000000000000000000000;;			finalDeployment = d
0000000000000000000000000000000000000000;;			return d, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		return finalDeployment, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScaleREST struct {
0000000000000000000000000000000000000000;;		registry deployment.Registry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScaleREST implements Patcher
0000000000000000000000000000000000000000;;	var _ = rest.Patcher(&ScaleREST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new Scale object
0000000000000000000000000000000000000000;;	func (r *ScaleREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &extensions.Scale{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ScaleREST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		deployment, err := r.registry.GetDeployment(ctx, name, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(extensions.Resource("deployments/scale"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale, err := scaleFromDeployment(deployment)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.NewBadRequest(fmt.Sprintf("%v", err))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return scale, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ScaleREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		deployment, err := r.registry.GetDeployment(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewNotFound(extensions.Resource("deployments/scale"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oldScale, err := scaleFromDeployment(deployment)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := objInfo.UpdatedObject(ctx, oldScale)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("nil update passed to Scale"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale, ok := obj.(*extensions.Scale)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("expected input object type to be Scale, but %T", obj))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if errs := extvalidation.ValidateScale(scale); len(errs) > 0 {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewInvalid(extensions.Kind("Scale"), name, errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deployment.Spec.Replicas = scale.Spec.Replicas
0000000000000000000000000000000000000000;;		deployment.ResourceVersion = scale.ResourceVersion
0000000000000000000000000000000000000000;;		deployment, err = r.registry.UpdateDeployment(ctx, deployment)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newScale, err := scaleFromDeployment(deployment)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("%v", err))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newScale, false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scaleFromDeployment returns a scale subresource for a deployment.
0000000000000000000000000000000000000000;;	func scaleFromDeployment(deployment *extensions.Deployment) (*extensions.Scale, error) {
0000000000000000000000000000000000000000;;		return &extensions.Scale{
0000000000000000000000000000000000000000;;			// TODO: Create a variant of ObjectMeta type that only contains the fields below.
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              deployment.Name,
0000000000000000000000000000000000000000;;				Namespace:         deployment.Namespace,
0000000000000000000000000000000000000000;;				UID:               deployment.UID,
0000000000000000000000000000000000000000;;				ResourceVersion:   deployment.ResourceVersion,
0000000000000000000000000000000000000000;;				CreationTimestamp: deployment.CreationTimestamp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: deployment.Spec.Replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.ScaleStatus{
0000000000000000000000000000000000000000;;				Replicas: deployment.Status.Replicas,
0000000000000000000000000000000000000000;;				Selector: deployment.Spec.Selector,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
