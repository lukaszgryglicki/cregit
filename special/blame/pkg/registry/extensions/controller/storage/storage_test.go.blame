0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c6de2e7963d73ddec13f54a9ff383d6aab9e014c;pkg/registry/experimental/controller/etcd/etcd_test.go[pkg/registry/experimental/controller/etcd/etcd_test.go][pkg/registry/extensions/controller/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend/factory"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*ScaleREST, *etcdtesting.EtcdTestServer, storage.Interface, factory.DestroyFunc) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{StorageConfig: etcdStorage, Decorator: generic.UndecoratedStorage, DeleteCollectionWorkers: 1, ResourcePrefix: "controllers"}
0000000000000000000000000000000000000000;;		s, d := generic.NewRawStorage(etcdStorage)
0000000000000000000000000000000000000000;;		destroyFunc := func() {
0000000000000000000000000000000000000000;;			d()
0000000000000000000000000000000000000000;;			server.Terminate(t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewStorage(restOptions).Scale, server, s, destroyFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validPodTemplate = api.PodTemplate{
0000000000000000000000000000000000000000;;		Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Labels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "test",
0000000000000000000000000000000000000000;;						Image:           "test_image",
0000000000000000000000000000000000000000;;						ImagePullPolicy: api.PullIfNotPresent,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validReplicas = int32(8)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validControllerSpec = api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;		Replicas: validReplicas,
0000000000000000000000000000000000000000;;		Selector: validPodTemplate.Template.Labels,
0000000000000000000000000000000000000000;;		Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validController = api.ReplicationController{
0000000000000000000000000000000000000000;;		ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "test"},
0000000000000000000000000000000000000000;;		Spec:       validControllerSpec,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validScale = extensions.Scale{
0000000000000000000000000000000000000000;;		ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "test"},
0000000000000000000000000000000000000000;;		Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;			Replicas: validReplicas,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		Status: extensions.ScaleStatus{
0000000000000000000000000000000000000000;;			Replicas: 0,
0000000000000000000000000000000000000000;;			Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;				MatchLabels: validPodTemplate.Template.Labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, si, destroyFunc := newStorage(t)
0000000000000000000000000000000000000000;;		defer destroyFunc()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), "test")
0000000000000000000000000000000000000000;;		key := "/controllers/test/foo"
0000000000000000000000000000000000000000;;		if err := si.Create(ctx, key, &validController, nil, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale := obj.(*extensions.Scale)
0000000000000000000000000000000000000000;;		if scale.Spec.Replicas != validReplicas {
0000000000000000000000000000000000000000;;			t.Errorf("wrong replicas count expected: %d got: %d", validReplicas, scale.Spec.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, si, destroyFunc := newStorage(t)
0000000000000000000000000000000000000000;;		defer destroyFunc()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), "test")
0000000000000000000000000000000000000000;;		key := "/controllers/test/foo"
0000000000000000000000000000000000000000;;		if err := si.Create(ctx, key, &validController, nil, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		replicas := int32(12)
0000000000000000000000000000000000000000;;		update := extensions.Scale{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "test"},
0000000000000000000000000000000000000000;;			Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := storage.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(&update, api.Scheme)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		updated := obj.(*extensions.Scale)
0000000000000000000000000000000000000000;;		if updated.Spec.Replicas != replicas {
0000000000000000000000000000000000000000;;			t.Errorf("wrong replicas count expected: %d got: %d", replicas, updated.Spec.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
