0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c6de2e7963d73ddec13f54a9ff383d6aab9e014c;pkg/registry/experimental/controller/etcd/etcd.go[pkg/registry/experimental/controller/etcd/etcd.go][pkg/registry/extensions/controller/storage/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		extvalidation "k8s.io/kubernetes/pkg/apis/extensions/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/core/replicationcontroller"
0000000000000000000000000000000000000000;;		controllerstore "k8s.io/kubernetes/pkg/registry/core/replicationcontroller/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Container includes dummy storage for RC pods and experimental storage for Scale.
0000000000000000000000000000000000000000;;	type ContainerStorage struct {
0000000000000000000000000000000000000000;;		ReplicationController *RcREST
0000000000000000000000000000000000000000;;		Scale                 *ScaleREST
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStorage(optsGetter generic.RESTOptionsGetter) ContainerStorage {
0000000000000000000000000000000000000000;;		// scale does not set status, only updates spec so we ignore the status
0000000000000000000000000000000000000000;;		controllerREST, _ := controllerstore.NewREST(optsGetter)
0000000000000000000000000000000000000000;;		rcRegistry := replicationcontroller.NewRegistry(controllerREST)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ContainerStorage{
0000000000000000000000000000000000000000;;			ReplicationController: &RcREST{},
0000000000000000000000000000000000000000;;			Scale: &ScaleREST{registry: &rcRegistry},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScaleREST struct {
0000000000000000000000000000000000000000;;		registry *replicationcontroller.Registry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScaleREST implements Patcher
0000000000000000000000000000000000000000;;	var _ = rest.Patcher(&ScaleREST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new Scale object
0000000000000000000000000000000000000000;;	func (r *ScaleREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &extensions.Scale{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ScaleREST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		rc, err := (*r.registry).GetController(ctx, name, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(extensions.Resource("replicationcontrollers/scale"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return scaleFromRC(rc), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ScaleREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		rc, err := (*r.registry).GetController(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewNotFound(extensions.Resource("replicationcontrollers/scale"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldScale := scaleFromRC(rc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := objInfo.UpdatedObject(ctx, oldScale)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("nil update passed to Scale"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale, ok := obj.(*extensions.Scale)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("wrong object passed to Scale update: %v", obj))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if errs := extvalidation.ValidateScale(scale); len(errs) > 0 {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewInvalid(extensions.Kind("Scale"), scale.Name, errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rc.Spec.Replicas = scale.Spec.Replicas
0000000000000000000000000000000000000000;;		rc.ResourceVersion = scale.ResourceVersion
0000000000000000000000000000000000000000;;		rc, err = (*r.registry).UpdateController(ctx, rc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewConflict(extensions.Resource("replicationcontrollers/scale"), scale.Name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return scaleFromRC(rc), false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scaleFromRC returns a scale subresource for a replication controller.
0000000000000000000000000000000000000000;;	func scaleFromRC(rc *api.ReplicationController) *extensions.Scale {
0000000000000000000000000000000000000000;;		return &extensions.Scale{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              rc.Name,
0000000000000000000000000000000000000000;;				Namespace:         rc.Namespace,
0000000000000000000000000000000000000000;;				UID:               rc.UID,
0000000000000000000000000000000000000000;;				ResourceVersion:   rc.ResourceVersion,
0000000000000000000000000000000000000000;;				CreationTimestamp: rc.CreationTimestamp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: rc.Spec.Replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.ScaleStatus{
0000000000000000000000000000000000000000;;				Replicas: rc.Status.Replicas,
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchLabels: rc.Spec.Selector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Dummy implementation
0000000000000000000000000000000000000000;;	type RcREST struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *RcREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &extensions.ReplicationControllerDummy{}
0000000000000000000000000000000000000000;;	}
