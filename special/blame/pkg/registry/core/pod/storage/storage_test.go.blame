0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b0a861390a5cf7573d403657e1bd3f3521f6a4f5;pkg/registry/pod/etcd/etcd_test.go[pkg/registry/pod/etcd/etcd_test.go][pkg/registry/core/pod/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		metav1alpha1 "k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		storeerr "k8s.io/apiserver/pkg/storage/errors"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/securitycontext"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*REST, *BindingREST, *StatusREST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           etcdStorage,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 3,
0000000000000000000000000000000000000000;;			ResourcePrefix:          "pods",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		storage := NewStorage(restOptions, nil, nil, nil)
0000000000000000000000000000000000000000;;		return storage.Pod, storage.Binding, storage.Status, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewPod() *api.Pod {
0000000000000000000000000000000000000000;;		grace := int64(30)
0000000000000000000000000000000000000000;;		return &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &grace,
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "foo",
0000000000000000000000000000000000000000;;						Image:           "test",
0000000000000000000000000000000000000000;;						ImagePullPolicy: api.PullAlways,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						TerminationMessagePath:   api.TerminationMessagePathDefault,
0000000000000000000000000000000000000000;;						TerminationMessagePolicy: api.TerminationMessageReadFile,
0000000000000000000000000000000000000000;;						SecurityContext:          securitycontext.ValidInternalSecurityContextWithContainerDefaults(),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{},
0000000000000000000000000000000000000000;;				SchedulerName:   api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validChangedPod() *api.Pod {
0000000000000000000000000000000000000000;;		pod := validNewPod()
0000000000000000000000000000000000000000;;		pod.Labels = map[string]string{
0000000000000000000000000000000000000000;;			"foo": "bar",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		pod := validNewPod()
0000000000000000000000000000000000000000;;		pod.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		// Make an invalid pod with an an incorrect label.
0000000000000000000000000000000000000000;;		invalidPod := validNewPod()
0000000000000000000000000000000000000000;;		invalidPod.Namespace = test.TestNamespace()
0000000000000000000000000000000000000000;;		invalidPod.Labels = map[string]string{
0000000000000000000000000000000000000000;;			"invalid/label/to/cause/validation/failure": "bar",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			pod,
0000000000000000000000000000000000000000;;			// invalid (empty contains list)
0000000000000000000000000000000000000000;;			&api.Pod{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []api.Container{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid (invalid labels)
0000000000000000000000000000000000000000;;			invalidPod,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestUpdate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validNewPod(),
0000000000000000000000000000000000000000;;			// updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*api.Pod)
0000000000000000000000000000000000000000;;				object.Labels = map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store).ReturnDeletedObject()
0000000000000000000000000000000000000000;;		test.TestDelete(validNewPod())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheduledPod := validNewPod()
0000000000000000000000000000000000000000;;		scheduledPod.Spec.NodeName = "some-node"
0000000000000000000000000000000000000000;;		test.TestDeleteGraceful(scheduledPod, 30)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailDeletionStorage struct {
0000000000000000000000000000000000000000;;		storage.Interface
0000000000000000000000000000000000000000;;		Called *bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FailDeletionStorage) Delete(ctx context.Context, key string, out runtime.Object, precondition *storage.Preconditions) error {
0000000000000000000000000000000000000000;;		*f.Called = true
0000000000000000000000000000000000000000;;		return storage.NewKeyNotFoundError(key, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFailDeleteStorage(t *testing.T, called *bool) (*REST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           etcdStorage,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 3,
0000000000000000000000000000000000000000;;			ResourcePrefix:          "pods",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		storage := NewStorage(restOptions, nil, nil, nil)
0000000000000000000000000000000000000000;;		storage.Pod.Store.Storage = FailDeletionStorage{storage.Pod.Store.Storage, called}
0000000000000000000000000000000000000000;;		return storage.Pod, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIgnoreDeleteNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := validNewPod()
0000000000000000000000000000000000000000;;		testContext := genericapirequest.WithNamespace(genericapirequest.NewContext(), metav1.NamespaceDefault)
0000000000000000000000000000000000000000;;		called := false
0000000000000000000000000000000000000000;;		registry, server := newFailDeleteStorage(t, &called)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer registry.Store.DestroyFunc()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// should fail if pod A is not created yet.
0000000000000000000000000000000000000000;;		_, _, err := registry.Delete(testContext, pod.Name, nil)
0000000000000000000000000000000000000000;;		if !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create pod
0000000000000000000000000000000000000000;;		_, err = registry.Create(testContext, pod, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// delete object with grace period 0, storage will return NotFound, but the
0000000000000000000000000000000000000000;;		// registry shouldn't get any error since we ignore the NotFound error.
0000000000000000000000000000000000000000;;		zero := int64(0)
0000000000000000000000000000000000000000;;		opt := &metav1.DeleteOptions{GracePeriodSeconds: &zero}
0000000000000000000000000000000000000000;;		obj, _, err := registry.Delete(testContext, pod.Name, opt)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !called {
0000000000000000000000000000000000000000;;			t.Fatalf("expect the overriding Delete method to be called")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		deletedPod, ok := obj.(*api.Pod)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("expect a pod is returned")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if deletedPod.DeletionTimestamp == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expect the DeletionTimestamp to be set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if deletedPod.DeletionGracePeriodSeconds == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expect the DeletionGracePeriodSeconds to be set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if *deletedPod.DeletionGracePeriodSeconds != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expect the DeletionGracePeriodSeconds to be 0, got %v", *deletedPod.DeletionTimestamp)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateSetsFields(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		pod := validNewPod()
0000000000000000000000000000000000000000;;		_, err := storage.Create(genericapirequest.NewDefaultContext(), pod, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		object, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actual := object.(*api.Pod)
0000000000000000000000000000000000000000;;		if actual.Name != pod.Name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected pod: %#v", actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(actual.UID) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected pod UID to be set: %#v", actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceLocation(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedIP := "1.2.3.4"
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			pod      api.Pod
0000000000000000000000000000000000000000;;			query    string
0000000000000000000000000000000000000000;;			location string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Status:     api.PodStatus{PodIP: expectedIP},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				query:    "foo",
0000000000000000000000000000000000000000;;				location: expectedIP,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Status:     api.PodStatus{PodIP: expectedIP},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				query:    "foo:12345",
0000000000000000000000000000000000000000;;				location: expectedIP + ":12345",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "ctr"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{PodIP: expectedIP},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				query:    "foo",
0000000000000000000000000000000000000000;;				location: expectedIP,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "ctr", Ports: []api.ContainerPort{{ContainerPort: 9376}}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{PodIP: expectedIP},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				query:    "foo",
0000000000000000000000000000000000000000;;				location: expectedIP + ":9376",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "ctr", Ports: []api.ContainerPort{{ContainerPort: 9376}}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{PodIP: expectedIP},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				query:    "foo:12345",
0000000000000000000000000000000000000000;;				location: expectedIP + ":12345",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "ctr1"},
0000000000000000000000000000000000000000;;							{Name: "ctr2", Ports: []api.ContainerPort{{ContainerPort: 9376}}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{PodIP: expectedIP},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				query:    "foo",
0000000000000000000000000000000000000000;;				location: expectedIP + ":9376",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "ctr1", Ports: []api.ContainerPort{{ContainerPort: 9376}}},
0000000000000000000000000000000000000000;;							{Name: "ctr2", Ports: []api.ContainerPort{{ContainerPort: 1234}}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{PodIP: expectedIP},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				query:    "foo",
0000000000000000000000000000000000000000;;				location: expectedIP + ":9376",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;			key, _ := storage.KeyFunc(ctx, tc.pod.Name)
0000000000000000000000000000000000000000;;			if err := storage.Storage.Create(ctx, key, &tc.pod, nil, 0); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			redirector := rest.Redirector(storage)
0000000000000000000000000000000000000000;;			location, _, err := redirector.ResourceLocation(genericapirequest.NewDefaultContext(), tc.query)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if location == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected nil: %v", location)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if location.Scheme != "" {
0000000000000000000000000000000000000000;;				t.Errorf("Expected '%v', but got '%v'", "", location.Scheme)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if location.Host != tc.location {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, but got %v", tc.location, location.Host)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			server.Terminate(t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validNewPod())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestList(validNewPod())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validNewPod(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matchin fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConvertToTableList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		columns := []metav1alpha1.TableColumnDefinition{
0000000000000000000000000000000000000000;;			{Name: "Name", Type: "string", Format: "name", Description: metav1.ObjectMeta{}.SwaggerDoc()["name"]},
0000000000000000000000000000000000000000;;			{Name: "Ready", Type: "string", Description: "The aggregate readiness state of this pod for accepting traffic."},
0000000000000000000000000000000000000000;;			{Name: "Status", Type: "string", Description: "The aggregate status of the containers in this pod."},
0000000000000000000000000000000000000000;;			{Name: "Restarts", Type: "integer", Description: "The number of times the containers in this pod have been restarted."},
0000000000000000000000000000000000000000;;			{Name: "Age", Type: "string", Description: metav1.ObjectMeta{}.SwaggerDoc()["creationTimestamp"]},
0000000000000000000000000000000000000000;;			{Name: "IP", Type: "string", Priority: 1, Description: v1.PodStatus{}.SwaggerDoc()["podIP"]},
0000000000000000000000000000000000000000;;			{Name: "Node", Type: "string", Priority: 1, Description: v1.PodSpec{}.SwaggerDoc()["nodeName"]},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod1 := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: "test", Name: "foo", CreationTimestamp: metav1.NewTime(time.Now().Add(-370 * 24 * time.Hour))},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{Name: "ctr1"},
0000000000000000000000000000000000000000;;					{Name: "ctr2", Ports: []api.ContainerPort{{ContainerPort: 9376}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				NodeName: "test-node",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.PodStatus{
0000000000000000000000000000000000000000;;				PodIP: "10.1.2.3",
0000000000000000000000000000000000000000;;				Phase: api.PodPending,
0000000000000000000000000000000000000000;;				ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;					{Name: "ctr1", State: api.ContainerState{Running: &api.ContainerStateRunning{}}, RestartCount: 10, Ready: true},
0000000000000000000000000000000000000000;;					{Name: "ctr2", State: api.ContainerState{Waiting: &api.ContainerStateWaiting{}}, RestartCount: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			in  runtime.Object
0000000000000000000000000000000000000000;;			out *metav1alpha1.Table
0000000000000000000000000000000000000000;;			err bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in:  nil,
0000000000000000000000000000000000000000;;				err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{},
0000000000000000000000000000000000000000;;				out: &metav1alpha1.Table{
0000000000000000000000000000000000000000;;					ColumnDefinitions: columns,
0000000000000000000000000000000000000000;;					Rows: []metav1alpha1.TableRow{
0000000000000000000000000000000000000000;;						{Cells: []interface{}{"", "0/0", "", 0, "<unknown>", "<none>", "<none>"}, Object: runtime.RawExtension{Object: &api.Pod{}}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: pod1,
0000000000000000000000000000000000000000;;				out: &metav1alpha1.Table{
0000000000000000000000000000000000000000;;					ColumnDefinitions: columns,
0000000000000000000000000000000000000000;;					Rows: []metav1alpha1.TableRow{
0000000000000000000000000000000000000000;;						{Cells: []interface{}{"foo", "1/2", "Pending", 10, "1y", "10.1.2.3", "test-node"}, Object: runtime.RawExtension{Object: pod1}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in:  &api.PodList{},
0000000000000000000000000000000000000000;;				out: &metav1alpha1.Table{ColumnDefinitions: columns},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			out, err := storage.ConvertToTable(ctx, test.in, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if test.err {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				t.Errorf("%d: error: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(test.out, out) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: mismatch: %s", i, diff.ObjectReflectDiff(test.out, out))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, bindingStorage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		_, err := storage.Create(ctx, validNewPod(), false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Suddenly, a wild scheduler appears:
0000000000000000000000000000000000000000;;		_, err = bindingStorage.Create(ctx, &api.Binding{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "foo"},
0000000000000000000000000000000000000000;;			Target:     api.ObjectReference{Name: "machine"},
0000000000000000000000000000000000000000;;		}, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure that when scheduler creates a binding for a pod that has already been deleted
0000000000000000000000000000000000000000;;	// by the API server, API server returns not-found error.
0000000000000000000000000000000000000000;;	func TestEtcdCreateBindingNoPod(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, bindingStorage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assume that a pod has undergone the following:
0000000000000000000000000000000000000000;;		// - Create (apiserver)
0000000000000000000000000000000000000000;;		// - Schedule (scheduler)
0000000000000000000000000000000000000000;;		// - Delete (apiserver)
0000000000000000000000000000000000000000;;		_, err := bindingStorage.Create(ctx, &api.Binding{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "foo"},
0000000000000000000000000000000000000000;;			Target:     api.ObjectReference{Name: "machine"},
0000000000000000000000000000000000000000;;		}, false)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected not-found-error but got nothing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !errors.IsNotFound(storeerr.InterpretGetError(err, api.Resource("pods"), "foo")) {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error returned: %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected not-found-error but got nothing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !errors.IsNotFound(storeerr.InterpretGetError(err, api.Resource("pods"), "foo")) {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdCreateFailsWithoutNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		pod := validNewPod()
0000000000000000000000000000000000000000;;		pod.Namespace = ""
0000000000000000000000000000000000000000;;		_, err := storage.Create(genericapirequest.NewContext(), pod, false)
0000000000000000000000000000000000000000;;		// Accept "namespace" or "Namespace".
0000000000000000000000000000000000000000;;		if err == nil || !strings.Contains(err.Error(), "amespace") {
0000000000000000000000000000000000000000;;			t.Fatalf("expected error that namespace was missing from context, got: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdCreateWithContainersNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, bindingStorage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		_, err := storage.Create(ctx, validNewPod(), false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Suddenly, a wild scheduler appears:
0000000000000000000000000000000000000000;;		_, err = bindingStorage.Create(ctx, &api.Binding{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:   metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:        "foo",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{"label1": "value1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Target: api.ObjectReference{Name: "machine"},
0000000000000000000000000000000000000000;;		}, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := obj.(*api.Pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !(pod.Annotations != nil && pod.Annotations["label1"] == "value1") {
0000000000000000000000000000000000000000;;			t.Fatalf("Pod annotations don't match the expected: %v", pod.Annotations)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdCreateWithConflict(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, bindingStorage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := storage.Create(ctx, validNewPod(), false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Suddenly, a wild scheduler appears:
0000000000000000000000000000000000000000;;		binding := api.Binding{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:   metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:        "foo",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{"label1": "value1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Target: api.ObjectReference{Name: "machine"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = bindingStorage.Create(ctx, &binding, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = bindingStorage.Create(ctx, &binding, false)
0000000000000000000000000000000000000000;;		if err == nil || !errors.IsConflict(err) {
0000000000000000000000000000000000000000;;			t.Fatalf("expected resource conflict error, not: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdCreateWithExistingContainers(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, bindingStorage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		_, err := storage.Create(ctx, validNewPod(), false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Suddenly, a wild scheduler appears:
0000000000000000000000000000000000000000;;		_, err = bindingStorage.Create(ctx, &api.Binding{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "foo"},
0000000000000000000000000000000000000000;;			Target:     api.ObjectReference{Name: "machine"},
0000000000000000000000000000000000000000;;		}, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdCreateBinding(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			binding api.Binding
0000000000000000000000000000000000000000;;			errOK   func(error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"noName": {
0000000000000000000000000000000000000000;;				binding: api.Binding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "foo"},
0000000000000000000000000000000000000000;;					Target:     api.ObjectReference{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errOK: func(err error) bool { return err != nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"badKind": {
0000000000000000000000000000000000000000;;				binding: api.Binding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "foo"},
0000000000000000000000000000000000000000;;					Target:     api.ObjectReference{Name: "machine1", Kind: "unknown"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errOK: func(err error) bool { return err != nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"emptyKind": {
0000000000000000000000000000000000000000;;				binding: api.Binding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "foo"},
0000000000000000000000000000000000000000;;					Target:     api.ObjectReference{Name: "machine2"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errOK: func(err error) bool { return err == nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"kindNode": {
0000000000000000000000000000000000000000;;				binding: api.Binding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "foo"},
0000000000000000000000000000000000000000;;					Target:     api.ObjectReference{Name: "machine3", Kind: "Node"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errOK: func(err error) bool { return err == nil },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, test := range testCases {
0000000000000000000000000000000000000000;;			storage, bindingStorage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := storage.Create(ctx, validNewPod(), false); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := bindingStorage.Create(ctx, &test.binding, false); !test.errOK(err) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;			} else if err == nil {
0000000000000000000000000000000000000000;;				// If bind succeeded, verify Host field in pod's Spec.
0000000000000000000000000000000000000000;;				pod, err := storage.Get(ctx, validNewPod().ObjectMeta.Name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;				} else if pod.(*api.Pod).Spec.NodeName != test.binding.Target.Name {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected: %v, got: %v", k, pod.(*api.Pod).Spec.NodeName, test.binding.Target.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;			server.Terminate(t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdUpdateNotScheduled(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := storage.Create(ctx, validNewPod(), false); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podIn := validChangedPod()
0000000000000000000000000000000000000000;;		_, _, err := storage.Update(ctx, podIn.Name, rest.DefaultUpdatedObjectInfo(podIn, api.Scheme))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Get(ctx, validNewPod().ObjectMeta.Name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podOut := obj.(*api.Pod)
0000000000000000000000000000000000000000;;		// validChangedPod only changes the Labels, so were checking the update was valid
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(podIn.Labels, podOut.Labels) {
0000000000000000000000000000000000000000;;			t.Errorf("objects differ: %v", diff.ObjectDiff(podOut, podIn))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdUpdateScheduled(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key, _ := storage.KeyFunc(ctx, "foo")
0000000000000000000000000000000000000000;;		err := storage.Storage.Create(ctx, key, &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				NodeName: "machine",
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "foobar",
0000000000000000000000000000000000000000;;						Image:           "foo:v1",
0000000000000000000000000000000000000000;;						SecurityContext: securitycontext.ValidInternalSecurityContextWithContainerDefaults(),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{},
0000000000000000000000000000000000000000;;				SchedulerName:   api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil, 1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		grace := int64(30)
0000000000000000000000000000000000000000;;		podIn := api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "foo",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				NodeName: "machine",
0000000000000000000000000000000000000000;;				Containers: []api.Container{{
0000000000000000000000000000000000000000;;					Name:                     "foobar",
0000000000000000000000000000000000000000;;					Image:                    "foo:v2",
0000000000000000000000000000000000000000;;					ImagePullPolicy:          api.PullIfNotPresent,
0000000000000000000000000000000000000000;;					TerminationMessagePath:   api.TerminationMessagePathDefault,
0000000000000000000000000000000000000000;;					TerminationMessagePolicy: api.TerminationMessageReadFile,
0000000000000000000000000000000000000000;;					SecurityContext:          securitycontext.ValidInternalSecurityContextWithContainerDefaults(),
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &grace,
0000000000000000000000000000000000000000;;				SecurityContext:               &api.PodSecurityContext{},
0000000000000000000000000000000000000000;;				SchedulerName:                 api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, err = storage.Update(ctx, podIn.Name, rest.DefaultUpdatedObjectInfo(&podIn, api.Scheme))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podOut := obj.(*api.Pod)
0000000000000000000000000000000000000000;;		// Check to verify the Spec and Label updates match from change above.  Those are the fields changed.
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(podOut.Spec, podIn.Spec) || !apiequality.Semantic.DeepEqual(podOut.Labels, podIn.Labels) {
0000000000000000000000000000000000000000;;			t.Errorf("objects differ: %v", diff.ObjectDiff(podOut, podIn))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdUpdateStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, statusStorage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key, _ := storage.KeyFunc(ctx, "foo")
0000000000000000000000000000000000000000;;		podStart := api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				NodeName: "machine",
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Image:           "foo:v1",
0000000000000000000000000000000000000000;;						SecurityContext: securitycontext.ValidInternalSecurityContextWithContainerDefaults(),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{},
0000000000000000000000000000000000000000;;				SchedulerName:   api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := storage.Storage.Create(ctx, key, &podStart, nil, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podIn := api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "foo",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				NodeName: "machine",
0000000000000000000000000000000000000000;;				Containers: []api.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Image:                  "foo:v2",
0000000000000000000000000000000000000000;;						ImagePullPolicy:        api.PullIfNotPresent,
0000000000000000000000000000000000000000;;						TerminationMessagePath: api.TerminationMessagePathDefault,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				SecurityContext: &api.PodSecurityContext{},
0000000000000000000000000000000000000000;;				SchedulerName:   api.DefaultSchedulerName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.PodStatus{
0000000000000000000000000000000000000000;;				Phase:   api.PodRunning,
0000000000000000000000000000000000000000;;				PodIP:   "127.0.0.1",
0000000000000000000000000000000000000000;;				Message: "is now scheduled",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := podStart
0000000000000000000000000000000000000000;;		expected.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		grace := int64(30)
0000000000000000000000000000000000000000;;		expected.Spec.TerminationGracePeriodSeconds = &grace
0000000000000000000000000000000000000000;;		expected.Spec.RestartPolicy = api.RestartPolicyAlways
0000000000000000000000000000000000000000;;		expected.Spec.DNSPolicy = api.DNSClusterFirst
0000000000000000000000000000000000000000;;		expected.Spec.Containers[0].ImagePullPolicy = api.PullIfNotPresent
0000000000000000000000000000000000000000;;		expected.Spec.Containers[0].TerminationMessagePath = api.TerminationMessagePathDefault
0000000000000000000000000000000000000000;;		expected.Spec.Containers[0].TerminationMessagePolicy = api.TerminationMessageReadFile
0000000000000000000000000000000000000000;;		expected.Labels = podIn.Labels
0000000000000000000000000000000000000000;;		expected.Status = podIn.Status
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, err = statusStorage.Update(ctx, podIn.Name, rest.DefaultUpdatedObjectInfo(&podIn, api.Scheme))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podOut := obj.(*api.Pod)
0000000000000000000000000000000000000000;;		// Check to verify the Label, and Status updates match from change above.  Those are the fields changed.
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(podOut.Spec, expected.Spec) ||
0000000000000000000000000000000000000000;;			!apiequality.Semantic.DeepEqual(podOut.Labels, expected.Labels) ||
0000000000000000000000000000000000000000;;			!apiequality.Semantic.DeepEqual(podOut.Status, expected.Status) {
0000000000000000000000000000000000000000;;			t.Errorf("objects differ: %v", diff.ObjectDiff(podOut, expected))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestShortNames(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"po"}
0000000000000000000000000000000000000000;;		registrytest.AssertShortNames(t, storage, expected)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCategories(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"all"}
0000000000000000000000000000000000000000;;		registrytest.AssertCategories(t, storage, expected)
0000000000000000000000000000000000000000;;	}
