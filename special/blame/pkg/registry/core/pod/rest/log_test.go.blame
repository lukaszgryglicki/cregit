0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a1bed8091d98625314daf0678a22a566c12ee986;pkg/registry/pod/rest/log_test.go[pkg/registry/pod/rest/log_test.go][pkg/registry/core/pod/rest/log_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodLogValidates(t *testing.T) {
0000000000000000000000000000000000000000;;		config, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		s, destroyFunc := generic.NewRawStorage(config)
0000000000000000000000000000000000000000;;		defer destroyFunc()
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Storage: s,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		logRest := &LogREST{Store: store, KubeletConn: nil}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		negativeOne := int64(-1)
0000000000000000000000000000000000000000;;		testCases := []*api.PodLogOptions{
0000000000000000000000000000000000000000;;			{SinceSeconds: &negativeOne},
0000000000000000000000000000000000000000;;			{TailLines: &negativeOne},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			_, err := logRest.Get(genericapirequest.NewDefaultContext(), "test", tc)
0000000000000000000000000000000000000000;;			if !errors.IsInvalid(err) {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
