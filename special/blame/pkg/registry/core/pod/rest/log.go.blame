0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a1bed8091d98625314daf0678a22a566c12ee986;pkg/registry/pod/rest/log.go[pkg/registry/pod/rest/log.go][pkg/registry/core/pod/rest/log.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		genericrest "k8s.io/apiserver/pkg/registry/generic/rest"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/client"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/core/pod"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogREST implements the log endpoint for a Pod
0000000000000000000000000000000000000000;;	type LogREST struct {
0000000000000000000000000000000000000000;;		KubeletConn client.ConnectionInfoGetter
0000000000000000000000000000000000000000;;		Store       *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogREST implements GetterWithOptions
0000000000000000000000000000000000000000;;	var _ = rest.GetterWithOptions(&LogREST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new Pod log options object
0000000000000000000000000000000000000000;;	func (r *LogREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		// TODO - return a resource that represents a log
0000000000000000000000000000000000000000;;		return &api.Pod{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogREST implements StorageMetadata
0000000000000000000000000000000000000000;;	func (r *LogREST) ProducesMIMETypes(verb string) []string {
0000000000000000000000000000000000000000;;		// Since the default list does not include "plain/text", we need to
0000000000000000000000000000000000000000;;		// explicitly override ProducesMIMETypes, so that it gets added to
0000000000000000000000000000000000000000;;		// the "produces" section for pods/{name}/log
0000000000000000000000000000000000000000;;		return []string{
0000000000000000000000000000000000000000;;			"text/plain",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogREST implements StorageMetadata, return string as the generating object
0000000000000000000000000000000000000000;;	func (r *LogREST) ProducesObject(verb string) interface{} {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves a runtime.Object that will stream the contents of the pod log
0000000000000000000000000000000000000000;;	func (r *LogREST) Get(ctx genericapirequest.Context, name string, opts runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		logOpts, ok := opts.(*api.PodLogOptions)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("invalid options object: %#v", opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := validation.ValidatePodLogOptions(logOpts); len(errs) > 0 {
0000000000000000000000000000000000000000;;			return nil, errors.NewInvalid(api.Kind("PodLogOptions"), name, errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		location, transport, err := pod.LogLocation(r.Store, r.KubeletConn, ctx, name, logOpts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &genericrest.LocationStreamer{
0000000000000000000000000000000000000000;;			Location:        location,
0000000000000000000000000000000000000000;;			Transport:       transport,
0000000000000000000000000000000000000000;;			ContentType:     "text/plain",
0000000000000000000000000000000000000000;;			Flush:           logOpts.Follow,
0000000000000000000000000000000000000000;;			ResponseChecker: genericrest.NewGenericHttpResponseChecker(api.Resource("pods/log"), name),
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewGetOptions creates a new options object
0000000000000000000000000000000000000000;;	func (r *LogREST) NewGetOptions() (runtime.Object, bool, string) {
0000000000000000000000000000000000000000;;		return &api.PodLogOptions{}, false, ""
0000000000000000000000000000000000000000;;	}
