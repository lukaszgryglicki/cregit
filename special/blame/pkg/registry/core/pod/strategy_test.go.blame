0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0b637f97c09044ef705e53d8814df2ce33f2c178;pkg/registry/pod/strategy_test.go[pkg/registry/pod/strategy_test.go][pkg/registry/core/pod/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/client"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMatchPod(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			in            *api.Pod
0000000000000000000000000000000000000000;;			fieldSelector fields.Selector
0000000000000000000000000000000000000000;;			expectMatch   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{NodeName: "nodeA"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				fieldSelector: fields.ParseSelectorOrDie("spec.nodeName=nodeA"),
0000000000000000000000000000000000000000;;				expectMatch:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{NodeName: "nodeB"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				fieldSelector: fields.ParseSelectorOrDie("spec.nodeName=nodeA"),
0000000000000000000000000000000000000000;;				expectMatch:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{RestartPolicy: api.RestartPolicyAlways},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				fieldSelector: fields.ParseSelectorOrDie("spec.restartPolicy=Always"),
0000000000000000000000000000000000000000;;				expectMatch:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{RestartPolicy: api.RestartPolicyAlways},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				fieldSelector: fields.ParseSelectorOrDie("spec.restartPolicy=Never"),
0000000000000000000000000000000000000000;;				expectMatch:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Status: api.PodStatus{Phase: api.PodRunning},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				fieldSelector: fields.ParseSelectorOrDie("status.phase=Running"),
0000000000000000000000000000000000000000;;				expectMatch:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Status: api.PodStatus{Phase: api.PodRunning},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				fieldSelector: fields.ParseSelectorOrDie("status.phase=Pending"),
0000000000000000000000000000000000000000;;				expectMatch:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			m := MatchPod(labels.Everything(), testCase.fieldSelector)
0000000000000000000000000000000000000000;;			result, err := m.Matches(testCase.in)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result != testCase.expectMatch {
0000000000000000000000000000000000000000;;				t.Errorf("Result %v, Expected %v, Selector: %v, Pod: %v", result, testCase.expectMatch, testCase.fieldSelector.String(), testCase.in)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getResourceList(cpu, memory string) api.ResourceList {
0000000000000000000000000000000000000000;;		res := api.ResourceList{}
0000000000000000000000000000000000000000;;		if cpu != "" {
0000000000000000000000000000000000000000;;			res[api.ResourceCPU] = resource.MustParse(cpu)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if memory != "" {
0000000000000000000000000000000000000000;;			res[api.ResourceMemory] = resource.MustParse(memory)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addResource(rName, value string, rl api.ResourceList) api.ResourceList {
0000000000000000000000000000000000000000;;		rl[api.ResourceName(rName)] = resource.MustParse(value)
0000000000000000000000000000000000000000;;		return rl
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getResourceRequirements(requests, limits api.ResourceList) api.ResourceRequirements {
0000000000000000000000000000000000000000;;		res := api.ResourceRequirements{}
0000000000000000000000000000000000000000;;		res.Requests = requests
0000000000000000000000000000000000000000;;		res.Limits = limits
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newContainer(name string, requests api.ResourceList, limits api.ResourceList) api.Container {
0000000000000000000000000000000000000000;;		return api.Container{
0000000000000000000000000000000000000000;;			Name:      name,
0000000000000000000000000000000000000000;;			Resources: getResourceRequirements(requests, limits),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPod(name string, containers []api.Container) *api.Pod {
0000000000000000000000000000000000000000;;		return &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: containers,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodQOS(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			pod      *api.Pod
0000000000000000000000000000000000000000;;			expected api.PodQOSClass
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("guaranteed", []api.Container{
0000000000000000000000000000000000000000;;					newContainer("guaranteed", getResourceList("100m", "100Mi"), getResourceList("100m", "100Mi")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: api.PodQOSGuaranteed,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("best-effort", []api.Container{
0000000000000000000000000000000000000000;;					newContainer("best-effort", getResourceList("", ""), getResourceList("", "")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: api.PodQOSBestEffort,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod: newPod("burstable", []api.Container{
0000000000000000000000000000000000000000;;					newContainer("burstable", getResourceList("100m", "100Mi"), getResourceList("", "")),
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				expected: api.PodQOSBurstable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for id, testCase := range testCases {
0000000000000000000000000000000000000000;;			Strategy.PrepareForCreate(genericapirequest.NewContext(), testCase.pod)
0000000000000000000000000000000000000000;;			actual := testCase.pod.Status.QOSClass
0000000000000000000000000000000000000000;;			if actual != testCase.expected {
0000000000000000000000000000000000000000;;				t.Errorf("[%d]: invalid qos pod %s, expected: %s, actual: %s", id, testCase.pod.Name, testCase.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCheckGracefulDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		defaultGracePeriod := int64(30)
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			in          *api.Pod
0000000000000000000000000000000000000000;;			gracePeriod int64
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec:   api.PodSpec{NodeName: "something"},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{Phase: api.PodPending},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				gracePeriod: defaultGracePeriod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec:   api.PodSpec{NodeName: "something"},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{Phase: api.PodFailed},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				gracePeriod: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec:   api.PodSpec{},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{Phase: api.PodPending},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				gracePeriod: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec:   api.PodSpec{},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{Phase: api.PodSucceeded},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				gracePeriod: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec:   api.PodSpec{},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				gracePeriod: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			out := &metav1.DeleteOptions{GracePeriodSeconds: &defaultGracePeriod}
0000000000000000000000000000000000000000;;			Strategy.CheckGracefulDelete(genericapirequest.NewContext(), tc.in, out)
0000000000000000000000000000000000000000;;			if out.GracePeriodSeconds == nil {
0000000000000000000000000000000000000000;;				t.Errorf("out grace period was nil but supposed to be %v", tc.gracePeriod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if *(out.GracePeriodSeconds) != tc.gracePeriod {
0000000000000000000000000000000000000000;;				t.Errorf("out grace period was %v but was expected to be %v", *out, tc.gracePeriod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockPodGetter struct {
0000000000000000000000000000000000000000;;		pod *api.Pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g mockPodGetter) Get(genericapirequest.Context, string, *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return g.pod, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCheckLogLocation(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			in          *api.Pod
0000000000000000000000000000000000000000;;			opts        *api.PodLogOptions
0000000000000000000000000000000000000000;;			expectedErr error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec:   api.PodSpec{},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				opts:        &api.PodLogOptions{},
0000000000000000000000000000000000000000;;				expectedErr: errors.NewBadRequest("a container name must be specified for pod test"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "mycontainer"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				opts:        &api.PodLogOptions{},
0000000000000000000000000000000000000000;;				expectedErr: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "container1"},
0000000000000000000000000000000000000000;;							{Name: "container2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				opts:        &api.PodLogOptions{},
0000000000000000000000000000000000000000;;				expectedErr: errors.NewBadRequest("a container name must be specified for pod test, choose one of: [container1 container2]"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "container1"},
0000000000000000000000000000000000000000;;							{Name: "container2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						InitContainers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "initcontainer1"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				opts:        &api.PodLogOptions{},
0000000000000000000000000000000000000000;;				expectedErr: errors.NewBadRequest("a container name must be specified for pod test, choose one of: [container1 container2] or one of the init containers: [initcontainer1]"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "container1"},
0000000000000000000000000000000000000000;;							{Name: "container2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				opts: &api.PodLogOptions{
0000000000000000000000000000000000000000;;					Container: "unknown",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: errors.NewBadRequest("container unknown is not valid for pod test"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{Name: "container1"},
0000000000000000000000000000000000000000;;							{Name: "container2"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				opts: &api.PodLogOptions{
0000000000000000000000000000000000000000;;					Container: "container2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			getter := &mockPodGetter{tc.in}
0000000000000000000000000000000000000000;;			_, _, err := LogLocation(getter, nil, ctx, "test", tc.opts)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(err, tc.expectedErr) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", tc.expectedErr, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversions(t *testing.T) {
0000000000000000000000000000000000000000;;		apitesting.TestSelectableFieldLabelConversionsOfKind(t,
0000000000000000000000000000000000000000;;			api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;			"Pod",
0000000000000000000000000000000000000000;;			PodToSelectableFields(&api.Pod{}),
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockConnectionInfoGetter struct {
0000000000000000000000000000000000000000;;		info *client.ConnectionInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g mockConnectionInfoGetter) GetConnectionInfo(nodeName types.NodeName) (*client.ConnectionInfo, error) {
0000000000000000000000000000000000000000;;		return g.info, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPortForwardLocation(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			in          *api.Pod
0000000000000000000000000000000000000000;;			info        *client.ConnectionInfo
0000000000000000000000000000000000000000;;			opts        *api.PodPortForwardOptions
0000000000000000000000000000000000000000;;			expectedErr error
0000000000000000000000000000000000000000;;			expectedURL *url.URL
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				opts:        &api.PodPortForwardOptions{},
0000000000000000000000000000000000000000;;				expectedErr: errors.NewBadRequest("pod test does not have a host assigned"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Name:      "pod1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName: "node1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				info:        &client.ConnectionInfo{},
0000000000000000000000000000000000000000;;				opts:        &api.PodPortForwardOptions{},
0000000000000000000000000000000000000000;;				expectedURL: &url.URL{Host: ":", Path: "/portForward/ns/pod1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: "ns",
0000000000000000000000000000000000000000;;						Name:      "pod1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						NodeName: "node1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				info:        &client.ConnectionInfo{},
0000000000000000000000000000000000000000;;				opts:        &api.PodPortForwardOptions{Ports: []int32{80}},
0000000000000000000000000000000000000000;;				expectedURL: &url.URL{Host: ":", Path: "/portForward/ns/pod1", RawQuery: "port=80"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			getter := &mockPodGetter{tc.in}
0000000000000000000000000000000000000000;;			connectionGetter := &mockConnectionInfoGetter{tc.info}
0000000000000000000000000000000000000000;;			loc, _, err := PortForwardLocation(getter, connectionGetter, ctx, "test", tc.opts)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(err, tc.expectedErr) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", tc.expectedErr, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(loc, tc.expectedURL) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", tc.expectedURL, loc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
