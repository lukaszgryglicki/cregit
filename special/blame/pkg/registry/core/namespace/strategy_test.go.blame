0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
2f5d4967fb8db18f3999c2950d9e4925aef75a87;pkg/registry/namespace/rest_test.go[pkg/registry/namespace/rest_test.go][pkg/registry/core/namespace/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package namespace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamespaceStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if Strategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Namespaces should not be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if Strategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Namespaces should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		namespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;			Status:     api.NamespaceStatus{Phase: api.NamespaceTerminating},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		Strategy.PrepareForCreate(ctx, namespace)
0000000000000000000000000000000000000000;;		if namespace.Status.Phase != api.NamespaceActive {
0000000000000000000000000000000000000000;;			t.Errorf("Namespaces do not allow setting phase on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(namespace.Spec.Finalizers) != 1 || namespace.Spec.Finalizers[0] != api.FinalizerKubernetes {
0000000000000000000000000000000000000000;;			t.Errorf("Prepare For Create should have added kubernetes finalizer")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := Strategy.Validate(ctx, namespace)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error validating %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		invalidNamespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "bar", ResourceVersion: "4"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// ensure we copy spec.finalizers from old to new
0000000000000000000000000000000000000000;;		Strategy.PrepareForUpdate(ctx, invalidNamespace, namespace)
0000000000000000000000000000000000000000;;		if len(invalidNamespace.Spec.Finalizers) != 1 || invalidNamespace.Spec.Finalizers[0] != api.FinalizerKubernetes {
0000000000000000000000000000000000000000;;			t.Errorf("PrepareForUpdate should have preserved old.spec.finalizers")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs = Strategy.ValidateUpdate(ctx, invalidNamespace, namespace)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a validation error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if invalidNamespace.ResourceVersion != "4" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamespaceStatusStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if StatusStrategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Namespaces should not be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if StatusStrategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Namespaces should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		now := metav1.Now()
0000000000000000000000000000000000000000;;		oldNamespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo", ResourceVersion: "10", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;			Spec:       api.NamespaceSpec{Finalizers: []api.FinalizerName{"kubernetes"}},
0000000000000000000000000000000000000000;;			Status:     api.NamespaceStatus{Phase: api.NamespaceActive},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		namespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo", ResourceVersion: "9", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;			Status:     api.NamespaceStatus{Phase: api.NamespaceTerminating},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		StatusStrategy.PrepareForUpdate(ctx, namespace, oldNamespace)
0000000000000000000000000000000000000000;;		if namespace.Status.Phase != api.NamespaceTerminating {
0000000000000000000000000000000000000000;;			t.Errorf("Namespace status updates should allow change of phase: %v", namespace.Status.Phase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(namespace.Spec.Finalizers) != 1 || namespace.Spec.Finalizers[0] != api.FinalizerKubernetes {
0000000000000000000000000000000000000000;;			t.Errorf("PrepareForUpdate should have preserved old finalizers")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := StatusStrategy.ValidateUpdate(ctx, namespace, oldNamespace)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if namespace.ResourceVersion != "9" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamespaceFinalizeStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if FinalizeStrategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Namespaces should not be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if FinalizeStrategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Namespaces should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldNamespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;			Spec:       api.NamespaceSpec{Finalizers: []api.FinalizerName{"kubernetes", "example.com/org"}},
0000000000000000000000000000000000000000;;			Status:     api.NamespaceStatus{Phase: api.NamespaceActive},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		namespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo", ResourceVersion: "9"},
0000000000000000000000000000000000000000;;			Spec:       api.NamespaceSpec{Finalizers: []api.FinalizerName{"example.com/foo"}},
0000000000000000000000000000000000000000;;			Status:     api.NamespaceStatus{Phase: api.NamespaceTerminating},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		FinalizeStrategy.PrepareForUpdate(ctx, namespace, oldNamespace)
0000000000000000000000000000000000000000;;		if namespace.Status.Phase != api.NamespaceActive {
0000000000000000000000000000000000000000;;			t.Errorf("finalize updates should not allow change of phase: %v", namespace.Status.Phase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(namespace.Spec.Finalizers) != 1 || string(namespace.Spec.Finalizers[0]) != "example.com/foo" {
0000000000000000000000000000000000000000;;			t.Errorf("PrepareForUpdate should have modified finalizers")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := StatusStrategy.ValidateUpdate(ctx, namespace, oldNamespace)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if namespace.ResourceVersion != "9" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversions(t *testing.T) {
0000000000000000000000000000000000000000;;		apitesting.TestSelectableFieldLabelConversionsOfKind(t,
0000000000000000000000000000000000000000;;			api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;			"Namespace",
0000000000000000000000000000000000000000;;			NamespaceToSelectableFields(&api.Namespace{}),
0000000000000000000000000000000000000000;;			map[string]string{"name": "metadata.name"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
