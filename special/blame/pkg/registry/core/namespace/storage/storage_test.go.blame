0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
2398a7a57830698bf18040e45a09944d03d9f720;pkg/registry/namespace/etcd/etcd_test.go[pkg/registry/namespace/etcd/etcd_test.go][pkg/registry/core/namespace/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*REST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{StorageConfig: etcdStorage, Decorator: generic.UndecoratedStorage, DeleteCollectionWorkers: 1, ResourcePrefix: "namespaces"}
0000000000000000000000000000000000000000;;		namespaceStorage, _, _ := NewREST(restOptions)
0000000000000000000000000000000000000000;;		return namespaceStorage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewNamespace() *api.Namespace {
0000000000000000000000000000000000000000;;		return &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.store).ClusterScope()
0000000000000000000000000000000000000000;;		namespace := validNewNamespace()
0000000000000000000000000000000000000000;;		namespace.ObjectMeta = metav1.ObjectMeta{GenerateName: "foo"}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			namespace,
0000000000000000000000000000000000000000;;			// invalid
0000000000000000000000000000000000000000;;			&api.Namespace{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bad value"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateSetsFields(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		namespace := validNewNamespace()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		_, err := storage.Create(ctx, namespace, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		object, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actual := object.(*api.Namespace)
0000000000000000000000000000000000000000;;		if actual.Name != namespace.Name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected namespace: %#v", actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(actual.UID) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected namespace UID to be set: %#v", actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if actual.Status.Phase != api.NamespaceActive {
0000000000000000000000000000000000000000;;			t.Errorf("expected namespace phase to be set to active, but %v", actual.Status.Phase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.store).ClusterScope().ReturnDeletedObject()
0000000000000000000000000000000000000000;;		test.TestDelete(validNewNamespace())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.store).ClusterScope()
0000000000000000000000000000000000000000;;		test.TestGet(validNewNamespace())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.store).ClusterScope()
0000000000000000000000000000000000000000;;		test.TestList(validNewNamespace())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.store).ClusterScope()
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validNewNamespace(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "foo"},
0000000000000000000000000000000000000000;;				{"name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteNamespaceWithIncompleteFinalizers(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		key := "namespaces/foo"
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		now := metav1.Now()
0000000000000000000000000000000000000000;;		namespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              "foo",
0000000000000000000000000000000000000000;;				DeletionTimestamp: &now,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;				Finalizers: []api.FinalizerName{api.FinalizerKubernetes},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.NamespaceStatus{Phase: api.NamespaceActive},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := storage.store.Storage.Create(ctx, key, namespace, nil, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, _, err := storage.Delete(ctx, "foo", nil); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteNamespaceWithCompleteFinalizers(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		key := "namespaces/foo"
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		now := metav1.Now()
0000000000000000000000000000000000000000;;		namespace := &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              "foo",
0000000000000000000000000000000000000000;;				DeletionTimestamp: &now,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.NamespaceSpec{
0000000000000000000000000000000000000000;;				Finalizers: []api.FinalizerName{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.NamespaceStatus{Phase: api.NamespaceActive},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := storage.store.Storage.Create(ctx, key, namespace, nil, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, _, err := storage.Delete(ctx, "foo", nil); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestShortNames(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"ns"}
0000000000000000000000000000000000000000;;		registrytest.AssertShortNames(t, storage, expected)
0000000000000000000000000000000000000000;;	}
