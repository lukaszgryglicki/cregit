0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
dcaae1ffa3c2a62bb4176a1926e762b786f36083;pkg/registry/event/registry.go[pkg/registry/event/registry.go][pkg/registry/core/event/storage/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/cachesize"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/core/event"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewREST returns a RESTStorage object that will work against events.
0000000000000000000000000000000000000000;;	func NewREST(optsGetter generic.RESTOptionsGetter, ttl uint64) *REST {
0000000000000000000000000000000000000000;;		resource := api.Resource("events")
0000000000000000000000000000000000000000;;		opts, err := optsGetter.GetRESTOptions(resource)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We explicitly do NOT do any decoration here - switching on Cacher
0000000000000000000000000000000000000000;;		// for events will lead to too high memory consumption.
0000000000000000000000000000000000000000;;		opts.Decorator = generic.UndecoratedStorage // TODO use watchCacheSize=-1 to signal UndecoratedStorage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:        api.Scheme,
0000000000000000000000000000000000000000;;			NewFunc:       func() runtime.Object { return &api.Event{} },
0000000000000000000000000000000000000000;;			NewListFunc:   func() runtime.Object { return &api.EventList{} },
0000000000000000000000000000000000000000;;			PredicateFunc: event.MatchEvent,
0000000000000000000000000000000000000000;;			TTLFunc: func(runtime.Object, uint64, bool) (uint64, error) {
0000000000000000000000000000000000000000;;				return ttl, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			QualifiedResource: resource,
0000000000000000000000000000000000000000;;			WatchCacheSize:    cachesize.GetWatchCacheSizeByResource(resource.Resource),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: event.Strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: event.Strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: event.Strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: opts, AttrFunc: event.GetAttrs} // Pass in opts to use UndecoratedStorage
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &REST{store}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement ShortNamesProvider
0000000000000000000000000000000000000000;;	var _ rest.ShortNamesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShortNames implements the ShortNamesProvider interface. Returns a list of short names for a resource.
0000000000000000000000000000000000000000;;	func (r *REST) ShortNames() []string {
0000000000000000000000000000000000000000;;		return []string{"ev"}
0000000000000000000000000000000000000000;;	}
