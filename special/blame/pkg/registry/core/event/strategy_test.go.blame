0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
dcaae1ffa3c2a62bb4176a1926e762b786f36083;pkg/registry/event/rest_test.go[pkg/registry/event/rest_test.go][pkg/registry/core/event/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testEvent(name string) *api.Event {
0000000000000000000000000000000000000000;;		return &api.Event{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: "default",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			InvolvedObject: api.ObjectReference{
0000000000000000000000000000000000000000;;				Namespace: "default",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Reason: "forTesting",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetAttrs(t *testing.T) {
0000000000000000000000000000000000000000;;		eventA := &api.Event{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "f0118",
0000000000000000000000000000000000000000;;				Namespace: "default",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			InvolvedObject: api.ObjectReference{
0000000000000000000000000000000000000000;;				Kind:            "Pod",
0000000000000000000000000000000000000000;;				Name:            "foo",
0000000000000000000000000000000000000000;;				Namespace:       "baz",
0000000000000000000000000000000000000000;;				UID:             "long uid string",
0000000000000000000000000000000000000000;;				APIVersion:      api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;				ResourceVersion: "0",
0000000000000000000000000000000000000000;;				FieldPath:       "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Reason: "ForTesting",
0000000000000000000000000000000000000000;;			Source: api.EventSource{Component: "test"},
0000000000000000000000000000000000000000;;			Type:   api.EventTypeNormal,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		field := EventToSelectableFields(eventA)
0000000000000000000000000000000000000000;;		expect := fields.Set{
0000000000000000000000000000000000000000;;			"metadata.name":                  "f0118",
0000000000000000000000000000000000000000;;			"metadata.namespace":             "default",
0000000000000000000000000000000000000000;;			"involvedObject.kind":            "Pod",
0000000000000000000000000000000000000000;;			"involvedObject.name":            "foo",
0000000000000000000000000000000000000000;;			"involvedObject.namespace":       "baz",
0000000000000000000000000000000000000000;;			"involvedObject.uid":             "long uid string",
0000000000000000000000000000000000000000;;			"involvedObject.apiVersion":      api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;			"involvedObject.resourceVersion": "0",
0000000000000000000000000000000000000000;;			"involvedObject.fieldPath":       "",
0000000000000000000000000000000000000000;;			"reason":                         "ForTesting",
0000000000000000000000000000000000000000;;			"source":                         "test",
0000000000000000000000000000000000000000;;			"type":                           api.EventTypeNormal,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expect, field; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("diff: %s", diff.ObjectDiff(e, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversions(t *testing.T) {
0000000000000000000000000000000000000000;;		fset := EventToSelectableFields(&api.Event{})
0000000000000000000000000000000000000000;;		apitesting.TestSelectableFieldLabelConversionsOfKind(t,
0000000000000000000000000000000000000000;;			api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;			"Event",
0000000000000000000000000000000000000000;;			fset,
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
