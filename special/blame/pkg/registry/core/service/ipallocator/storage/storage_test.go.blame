0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
fe7fe6fc26af42dc9bf695598abdef7aea48278c;pkg/registry/service/ipallocator/etcd/etcd_test.go[pkg/registry/service/ipallocator/etcd/etcd_test.go][pkg/registry/core/service/ipallocator/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend/factory"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/core/service/allocator"
0000000000000000000000000000000000000000;;		allocatorstore "k8s.io/kubernetes/pkg/registry/core/service/allocator/storage"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/core/service/ipallocator"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*etcdtesting.EtcdTestServer, ipallocator.Interface, allocator.Interface, storage.Interface, factory.DestroyFunc) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		_, cidr, err := net.ParseCIDR("192.168.1.0/24")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var backing allocator.Interface
0000000000000000000000000000000000000000;;		storage := ipallocator.NewAllocatorCIDRRange(cidr, func(max int, rangeSpec string) allocator.Interface {
0000000000000000000000000000000000000000;;			mem := allocator.NewAllocationMap(max, rangeSpec)
0000000000000000000000000000000000000000;;			backing = mem
0000000000000000000000000000000000000000;;			etcd := allocatorstore.NewEtcd(mem, "/ranges/serviceips", api.Resource("serviceipallocations"), etcdStorage)
0000000000000000000000000000000000000000;;			return etcd
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		s, d := generic.NewRawStorage(etcdStorage)
0000000000000000000000000000000000000000;;		destroyFunc := func() {
0000000000000000000000000000000000000000;;			d()
0000000000000000000000000000000000000000;;			server.Terminate(t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return server, storage, backing, s, destroyFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewRangeAllocation() *api.RangeAllocation {
0000000000000000000000000000000000000000;;		_, cidr, _ := net.ParseCIDR("192.168.1.0/24")
0000000000000000000000000000000000000000;;		return &api.RangeAllocation{
0000000000000000000000000000000000000000;;			Range: cidr.String(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func key() string {
0000000000000000000000000000000000000000;;		return "/ranges/serviceips"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmpty(t *testing.T) {
0000000000000000000000000000000000000000;;		_, storage, _, _, destroyFunc := newStorage(t)
0000000000000000000000000000000000000000;;		defer destroyFunc()
0000000000000000000000000000000000000000;;		if err := storage.Allocate(net.ParseIP("192.168.1.2")); !strings.Contains(err.Error(), "cannot allocate resources of type serviceipallocations at this time") {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestErrors(t *testing.T) {
0000000000000000000000000000000000000000;;		_, storage, _, _, destroyFunc := newStorage(t)
0000000000000000000000000000000000000000;;		defer destroyFunc()
0000000000000000000000000000000000000000;;		if err := storage.Allocate(net.ParseIP("192.168.0.0")); err != ipallocator.ErrNotInRange {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStore(t *testing.T) {
0000000000000000000000000000000000000000;;		_, storage, backing, si, destroyFunc := newStorage(t)
0000000000000000000000000000000000000000;;		defer destroyFunc()
0000000000000000000000000000000000000000;;		if err := si.Create(context.TODO(), key(), validNewRangeAllocation(), nil, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := storage.Allocate(net.ParseIP("192.168.1.2")); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ok, err := backing.Allocate(1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Fatal("Expected allocation to fail")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := storage.Allocate(net.ParseIP("192.168.1.2")); err != ipallocator.ErrAllocated {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
