0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7abd0c97a57567f5181389c2d8bc8836e522de31;pkg/registry/service/proxy.go[pkg/registry/service/proxy.go][pkg/registry/core/service/proxy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/proxy"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/capabilities"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProxyREST implements the proxy subresource for a Service
0000000000000000000000000000000000000000;;	type ProxyREST struct {
0000000000000000000000000000000000000000;;		ServiceRest    *REST
0000000000000000000000000000000000000000;;		ProxyTransport http.RoundTripper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement Connecter
0000000000000000000000000000000000000000;;	var _ = rest.Connecter(&ProxyREST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var proxyMethods = []string{"GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns an empty service resource
0000000000000000000000000000000000000000;;	func (r *ProxyREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &api.Service{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConnectMethods returns the list of HTTP methods that can be proxied
0000000000000000000000000000000000000000;;	func (r *ProxyREST) ConnectMethods() []string {
0000000000000000000000000000000000000000;;		return proxyMethods
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewConnectOptions returns versioned resource that represents proxy parameters
0000000000000000000000000000000000000000;;	func (r *ProxyREST) NewConnectOptions() (runtime.Object, bool, string) {
0000000000000000000000000000000000000000;;		return &api.ServiceProxyOptions{}, true, "path"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Connect returns a handler for the service proxy
0000000000000000000000000000000000000000;;	func (r *ProxyREST) Connect(ctx genericapirequest.Context, id string, opts runtime.Object, responder rest.Responder) (http.Handler, error) {
0000000000000000000000000000000000000000;;		proxyOpts, ok := opts.(*api.ServiceProxyOptions)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Invalid options object: %#v", opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		location, transport, err := r.ServiceRest.ResourceLocation(ctx, id)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		location.Path = path.Join(location.Path, proxyOpts.Path)
0000000000000000000000000000000000000000;;		// Return a proxy handler that uses the desired transport, wrapped with additional proxy handling (to get URL rewriting, X-Forwarded-* headers, etc)
0000000000000000000000000000000000000000;;		return newThrottledUpgradeAwareProxyHandler(location, transport, true, false, responder), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newThrottledUpgradeAwareProxyHandler(location *url.URL, transport http.RoundTripper, wrapTransport, upgradeRequired bool, responder rest.Responder) *proxy.UpgradeAwareHandler {
0000000000000000000000000000000000000000;;		handler := proxy.NewUpgradeAwareHandler(location, transport, wrapTransport, upgradeRequired, responder)
0000000000000000000000000000000000000000;;		handler.MaxBytesPerSec = capabilities.Get().PerConnectionBandwidthLimitBytesPerSec
0000000000000000000000000000000000000000;;		return handler
0000000000000000000000000000000000000000;;	}
