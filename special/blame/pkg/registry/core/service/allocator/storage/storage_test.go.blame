0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b1eeaccc107052578d9c19418779718ae626f595;pkg/registry/service/allocator/etcd/etcd_test.go[pkg/registry/service/allocator/etcd/etcd_test.go][pkg/registry/core/service/allocator/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/core/service/allocator"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*Etcd, *etcdtesting.EtcdTestServer, allocator.Interface, *storagebackend.Config) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		mem := allocator.NewAllocationMap(100, "rangeSpecValue")
0000000000000000000000000000000000000000;;		etcd := NewEtcd(mem, "/ranges/serviceips", api.Resource("serviceipallocations"), etcdStorage)
0000000000000000000000000000000000000000;;		return etcd, server, mem, etcdStorage
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewRangeAllocation() *api.RangeAllocation {
0000000000000000000000000000000000000000;;		return &api.RangeAllocation{
0000000000000000000000000000000000000000;;			Range: "rangeSpecValue",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func key() string {
0000000000000000000000000000000000000000;;		return "/ranges/serviceips"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmpty(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server, _, _ := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		if _, err := storage.Allocate(1); !strings.Contains(err.Error(), "cannot allocate resources of type serviceipallocations at this time") {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStore(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server, backing, config := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		if err := storage.storage.Create(context.TODO(), key(), validNewRangeAllocation(), nil, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := storage.Allocate(2); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ok, err := backing.Allocate(2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Fatal("Expected backing allocation to fail")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ok, err := storage.Allocate(2); ok || err != nil {
0000000000000000000000000000000000000000;;			t.Fatal("Expected allocation to fail")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		other := allocator.NewAllocationMap(100, "rangeSpecValue")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allocation := &api.RangeAllocation{}
0000000000000000000000000000000000000000;;		if err := storage.storage.Get(context.TODO(), key(), "", allocation, false); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if allocation.Range != "rangeSpecValue" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected stored Range: %s", allocation.Range)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := other.Restore("rangeSpecValue", allocation.Data); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !other.Has(2) {
0000000000000000000000000000000000000000;;			t.Fatalf("could not restore allocated IP: %#v", other)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		other = allocator.NewAllocationMap(100, "rangeSpecValue")
0000000000000000000000000000000000000000;;		otherStorage := NewEtcd(other, "/ranges/serviceips", api.Resource("serviceipallocations"), config)
0000000000000000000000000000000000000000;;		if ok, err := otherStorage.Allocate(2); ok || err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
