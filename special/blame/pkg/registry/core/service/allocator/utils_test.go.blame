0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b1eeaccc107052578d9c19418779718ae626f595;pkg/registry/service/allocator/utils_test.go[pkg/registry/service/allocator/utils_test.go][pkg/registry/core/service/allocator/utils_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package allocator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/big"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBitCount(t *testing.T) {
0000000000000000000000000000000000000000;;		for i, c := range bitCounts {
0000000000000000000000000000000000000000;;			actual := 0
0000000000000000000000000000000000000000;;			for j := 0; j < 8; j++ {
0000000000000000000000000000000000000000;;				if ((1 << uint(j)) & i) != 0 {
0000000000000000000000000000000000000000;;					actual++
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if actual != int(c) {
0000000000000000000000000000000000000000;;				t.Errorf("%d should have %d bits but recorded as %d", i, actual, c)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCountBits(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			n        *big.Int
0000000000000000000000000000000000000000;;			expected int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{n: big.NewInt(int64(0)), expected: 0},
0000000000000000000000000000000000000000;;			{n: big.NewInt(int64(0xffffffffff)), expected: 40},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			actual := countBits(test.n)
0000000000000000000000000000000000000000;;			if test.expected != actual {
0000000000000000000000000000000000000000;;				t.Errorf("%d should have %d bits but recorded as %d", test.n, test.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
