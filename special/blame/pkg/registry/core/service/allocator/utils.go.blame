0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b1eeaccc107052578d9c19418779718ae626f595;pkg/registry/service/allocator/utils.go[pkg/registry/service/allocator/utils.go][pkg/registry/core/service/allocator/utils.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package allocator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "math/big"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// countBits returns the number of set bits in n
0000000000000000000000000000000000000000;;	func countBits(n *big.Int) int {
0000000000000000000000000000000000000000;;		var count int = 0
0000000000000000000000000000000000000000;;		for _, b := range n.Bytes() {
0000000000000000000000000000000000000000;;			count += int(bitCounts[b])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return count
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// bitCounts is all of the bits counted for each number between 0-255
0000000000000000000000000000000000000000;;	var bitCounts = []int8{
0000000000000000000000000000000000000000;;		0, 1, 1, 2, 1, 2, 2, 3,
0000000000000000000000000000000000000000;;		1, 2, 2, 3, 2, 3, 3, 4,
0000000000000000000000000000000000000000;;		1, 2, 2, 3, 2, 3, 3, 4,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		1, 2, 2, 3, 2, 3, 3, 4,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		1, 2, 2, 3, 2, 3, 3, 4,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		4, 5, 5, 6, 5, 6, 6, 7,
0000000000000000000000000000000000000000;;		1, 2, 2, 3, 2, 3, 3, 4,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		4, 5, 5, 6, 5, 6, 6, 7,
0000000000000000000000000000000000000000;;		2, 3, 3, 4, 3, 4, 4, 5,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		4, 5, 5, 6, 5, 6, 6, 7,
0000000000000000000000000000000000000000;;		3, 4, 4, 5, 4, 5, 5, 6,
0000000000000000000000000000000000000000;;		4, 5, 5, 6, 5, 6, 6, 7,
0000000000000000000000000000000000000000;;		4, 5, 5, 6, 5, 6, 6, 7,
0000000000000000000000000000000000000000;;		5, 6, 6, 7, 6, 7, 7, 8,
0000000000000000000000000000000000000000;;	}
