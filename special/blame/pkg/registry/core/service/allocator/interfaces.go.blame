0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b1eeaccc107052578d9c19418779718ae626f595;pkg/registry/service/allocator/interfaces.go[pkg/registry/service/allocator/interfaces.go][pkg/registry/core/service/allocator/interfaces.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package allocator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface manages the allocation of items out of a range. Interface
0000000000000000000000000000000000000000;;	// should be threadsafe.
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		Allocate(int) (bool, error)
0000000000000000000000000000000000000000;;		AllocateNext() (int, bool, error)
0000000000000000000000000000000000000000;;		Release(int) error
0000000000000000000000000000000000000000;;		ForEach(func(int))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For testing
0000000000000000000000000000000000000000;;		Has(int) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For testing
0000000000000000000000000000000000000000;;		Free() int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Snapshottable is an Interface that can be snapshotted and restored. Snapshottable
0000000000000000000000000000000000000000;;	// should be threadsafe.
0000000000000000000000000000000000000000;;	type Snapshottable interface {
0000000000000000000000000000000000000000;;		Interface
0000000000000000000000000000000000000000;;		Snapshot() (string, []byte)
0000000000000000000000000000000000000000;;		Restore(string, []byte) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AllocatorFactory func(max int, rangeSpec string) Interface
