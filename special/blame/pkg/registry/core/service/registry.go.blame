0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9fbdd758c00a160e902805405146a779d3acf5d8;pkg/registry/mock_service_registry.go[pkg/registry/mock_service_registry.go][pkg/registry/core/service/registry.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metainternalversion "k8s.io/apimachinery/pkg/apis/meta/internalversion"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Registry is an interface for things that know how to store services.
0000000000000000000000000000000000000000;;	type Registry interface {
0000000000000000000000000000000000000000;;		ListServices(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (*api.ServiceList, error)
0000000000000000000000000000000000000000;;		CreateService(ctx genericapirequest.Context, svc *api.Service) (*api.Service, error)
0000000000000000000000000000000000000000;;		GetService(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (*api.Service, error)
0000000000000000000000000000000000000000;;		DeleteService(ctx genericapirequest.Context, name string) error
0000000000000000000000000000000000000000;;		UpdateService(ctx genericapirequest.Context, svc *api.Service) (*api.Service, error)
0000000000000000000000000000000000000000;;		WatchServices(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (watch.Interface, error)
0000000000000000000000000000000000000000;;		ExportService(ctx genericapirequest.Context, name string, options metav1.ExportOptions) (*api.Service, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// storage puts strong typing around storage calls
0000000000000000000000000000000000000000;;	type storage struct {
0000000000000000000000000000000000000000;;		rest.StandardStorage
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRegistry returns a new Registry interface for the given Storage. Any mismatched
0000000000000000000000000000000000000000;;	// types will panic.
0000000000000000000000000000000000000000;;	func NewRegistry(s rest.StandardStorage) Registry {
0000000000000000000000000000000000000000;;		return &storage{s}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *storage) ListServices(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (*api.ServiceList, error) {
0000000000000000000000000000000000000000;;		obj, err := s.List(ctx, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*api.ServiceList), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *storage) CreateService(ctx genericapirequest.Context, svc *api.Service) (*api.Service, error) {
0000000000000000000000000000000000000000;;		obj, err := s.Create(ctx, svc, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*api.Service), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *storage) GetService(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (*api.Service, error) {
0000000000000000000000000000000000000000;;		obj, err := s.Get(ctx, name, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*api.Service), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *storage) DeleteService(ctx genericapirequest.Context, name string) error {
0000000000000000000000000000000000000000;;		_, _, err := s.Delete(ctx, name, nil)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *storage) UpdateService(ctx genericapirequest.Context, svc *api.Service) (*api.Service, error) {
0000000000000000000000000000000000000000;;		obj, _, err := s.Update(ctx, svc.Name, rest.DefaultUpdatedObjectInfo(svc, api.Scheme))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*api.Service), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *storage) WatchServices(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return s.Watch(ctx, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If StandardStorage implements rest.Exporter, returns exported service.
0000000000000000000000000000000000000000;;	// Otherwise export is not supported.
0000000000000000000000000000000000000000;;	func (s *storage) ExportService(ctx genericapirequest.Context, name string, options metav1.ExportOptions) (*api.Service, error) {
0000000000000000000000000000000000000000;;		exporter, isExporter := s.StandardStorage.(rest.Exporter)
0000000000000000000000000000000000000000;;		if !isExporter {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("export is not supported")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := exporter.Export(ctx, name, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*api.Service), nil
0000000000000000000000000000000000000000;;	}
