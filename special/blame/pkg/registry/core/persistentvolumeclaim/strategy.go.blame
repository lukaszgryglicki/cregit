0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
e61a353adf010ce30e84ea28ccbd1a64c46f93bd;pkg/registry/persistentvolumeclaim/rest.go[pkg/registry/persistentvolumeclaim/rest.go][pkg/registry/core/persistentvolumeclaim/strategy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package persistentvolumeclaim
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/names"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// persistentvolumeclaimStrategy implements behavior for PersistentVolumeClaim objects
0000000000000000000000000000000000000000;;	type persistentvolumeclaimStrategy struct {
0000000000000000000000000000000000000000;;		runtime.ObjectTyper
0000000000000000000000000000000000000000;;		names.NameGenerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Strategy is the default logic that applies when creating and updating PersistentVolumeClaim
0000000000000000000000000000000000000000;;	// objects via the REST API.
0000000000000000000000000000000000000000;;	var Strategy = persistentvolumeclaimStrategy{api.Scheme, names.SimpleNameGenerator}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStrategy) NamespaceScoped() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForCreate clears the Status field which is not allowed to be set by end users on creation.
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStrategy) PrepareForCreate(ctx genericapirequest.Context, obj runtime.Object) {
0000000000000000000000000000000000000000;;		pv := obj.(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;		pv.Status = api.PersistentVolumeClaimStatus{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStrategy) Validate(ctx genericapirequest.Context, obj runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		pvc := obj.(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;		return validation.ValidatePersistentVolumeClaim(pvc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Canonicalize normalizes the object after validation.
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStrategy) Canonicalize(obj runtime.Object) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStrategy) AllowCreateOnUpdate() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForUpdate sets the Status field which is not allowed to be set by end users on update
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newPvc := obj.(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;		oldPvc := old.(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;		newPvc.Status = oldPvc.Status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		errorList := validation.ValidatePersistentVolumeClaim(obj.(*api.PersistentVolumeClaim))
0000000000000000000000000000000000000000;;		return append(errorList, validation.ValidatePersistentVolumeClaimUpdate(obj.(*api.PersistentVolumeClaim), old.(*api.PersistentVolumeClaim))...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStrategy) AllowUnconditionalUpdate() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type persistentvolumeclaimStatusStrategy struct {
0000000000000000000000000000000000000000;;		persistentvolumeclaimStrategy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var StatusStrategy = persistentvolumeclaimStatusStrategy{Strategy}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForUpdate sets the Spec field which is not allowed to be changed when updating a PV's Status
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStatusStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newPv := obj.(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;		oldPv := old.(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;		newPv.Spec = oldPv.Spec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (persistentvolumeclaimStatusStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		return validation.ValidatePersistentVolumeClaimStatusUpdate(obj.(*api.PersistentVolumeClaim), old.(*api.PersistentVolumeClaim))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAttrs returns labels and fields of a given object for filtering purposes.
0000000000000000000000000000000000000000;;	func GetAttrs(obj runtime.Object) (labels.Set, fields.Set, bool, error) {
0000000000000000000000000000000000000000;;		persistentvolumeclaimObj, ok := obj.(*api.PersistentVolumeClaim)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, nil, false, fmt.Errorf("not a persistentvolumeclaim")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labels.Set(persistentvolumeclaimObj.Labels), PersistentVolumeClaimToSelectableFields(persistentvolumeclaimObj), persistentvolumeclaimObj.Initializers != nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchPersistentVolumeClaim returns a generic matcher for a given label and field selector.
0000000000000000000000000000000000000000;;	func MatchPersistentVolumeClaim(label labels.Selector, field fields.Selector) storage.SelectionPredicate {
0000000000000000000000000000000000000000;;		return storage.SelectionPredicate{
0000000000000000000000000000000000000000;;			Label:    label,
0000000000000000000000000000000000000000;;			Field:    field,
0000000000000000000000000000000000000000;;			GetAttrs: GetAttrs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PersistentVolumeClaimToSelectableFields returns a field set that represents the object
0000000000000000000000000000000000000000;;	func PersistentVolumeClaimToSelectableFields(persistentvolumeclaim *api.PersistentVolumeClaim) fields.Set {
0000000000000000000000000000000000000000;;		objectMetaFieldsSet := generic.ObjectMetaFieldsSet(&persistentvolumeclaim.ObjectMeta, true)
0000000000000000000000000000000000000000;;		specificFieldsSet := fields.Set{
0000000000000000000000000000000000000000;;			// This is a bug, but we need to support it for backward compatibility.
0000000000000000000000000000000000000000;;			"name": persistentvolumeclaim.Name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return generic.MergeFieldsSets(objectMetaFieldsSet, specificFieldsSet)
0000000000000000000000000000000000000000;;	}
