0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5e7747f1c9a550e48b91da41489073c1eb00d2e2;pkg/registry/resourcequota/rest_test.go[pkg/registry/resourcequota/rest_test.go][pkg/registry/core/resourcequota/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resourcequota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceQuotaStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		if !Strategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("ResourceQuota should be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if Strategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("ResourceQuota should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resourceQuota := &api.ResourceQuota{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;			Status: api.ResourceQuotaStatus{
0000000000000000000000000000000000000000;;				Used: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:                    resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceMemory:                 resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;					api.ResourcePods:                   resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServices:               resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceReplicationControllers: resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceQuotas:                 resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Hard: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:                    resource.MustParse("100"),
0000000000000000000000000000000000000000;;					api.ResourceMemory:                 resource.MustParse("4Gi"),
0000000000000000000000000000000000000000;;					api.ResourcePods:                   resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceServices:               resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceReplicationControllers: resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceQuotas:                 resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		Strategy.PrepareForCreate(genericapirequest.NewContext(), resourceQuota)
0000000000000000000000000000000000000000;;		if resourceQuota.Status.Used != nil {
0000000000000000000000000000000000000000;;			t.Errorf("ResourceQuota does not allow setting status on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversions(t *testing.T) {
0000000000000000000000000000000000000000;;		apitesting.TestSelectableFieldLabelConversionsOfKind(t,
0000000000000000000000000000000000000000;;			api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;			"ResourceQuota",
0000000000000000000000000000000000000000;;			ResourceQuotaToSelectableFields(&api.ResourceQuota{}),
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
