0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
48d784ab27f783111f7fa6fb6086b7eb7832c31a;pkg/registry/resourcequota/etcd/etcd_test.go[pkg/registry/resourcequota/etcd/etcd_test.go][pkg/registry/core/resourcequota/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*REST, *StatusREST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           etcdStorage,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 1,
0000000000000000000000000000000000000000;;			ResourcePrefix:          "resourcequotas",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resourceQuotaStorage, statusStorage := NewREST(restOptions)
0000000000000000000000000000000000000000;;		return resourceQuotaStorage, statusStorage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewResourceQuota() *api.ResourceQuota {
0000000000000000000000000000000000000000;;		return &api.ResourceQuota{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ResourceQuotaSpec{
0000000000000000000000000000000000000000;;				Hard: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:                    resource.MustParse("100"),
0000000000000000000000000000000000000000;;					api.ResourceMemory:                 resource.MustParse("4Gi"),
0000000000000000000000000000000000000000;;					api.ResourcePods:                   resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceServices:               resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceReplicationControllers: resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceQuotas:                 resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		resourcequota := validNewResourceQuota()
0000000000000000000000000000000000000000;;		resourcequota.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			resourcequota,
0000000000000000000000000000000000000000;;			// invalid
0000000000000000000000000000000000000000;;			&api.ResourceQuota{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "_-a123-a_"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateSetsFields(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		resourcequota := validNewResourceQuota()
0000000000000000000000000000000000000000;;		_, err := storage.Create(genericapirequest.NewDefaultContext(), resourcequota, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		object, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actual := object.(*api.ResourceQuota)
0000000000000000000000000000000000000000;;		if actual.Name != resourcequota.Name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected resourcequota: %#v", actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(actual.UID) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("expected resourcequota UID to be set: %#v", actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store).ReturnDeletedObject()
0000000000000000000000000000000000000000;;		test.TestDelete(validNewResourceQuota())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validNewResourceQuota())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestList(validNewResourceQuota())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validNewResourceQuota(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matchin fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, status, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key, _ := storage.KeyFunc(ctx, "foo")
0000000000000000000000000000000000000000;;		resourcequotaStart := validNewResourceQuota()
0000000000000000000000000000000000000000;;		err := storage.Storage.Create(ctx, key, resourcequotaStart, nil, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourcequotaIn := &api.ResourceQuota{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ResourceQuotaStatus{
0000000000000000000000000000000000000000;;				Used: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:                    resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceMemory:                 resource.MustParse("1Gi"),
0000000000000000000000000000000000000000;;					api.ResourcePods:                   resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceServices:               resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceReplicationControllers: resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceQuotas:                 resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Hard: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:                    resource.MustParse("100"),
0000000000000000000000000000000000000000;;					api.ResourceMemory:                 resource.MustParse("4Gi"),
0000000000000000000000000000000000000000;;					api.ResourcePods:                   resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceServices:               resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceReplicationControllers: resource.MustParse("10"),
0000000000000000000000000000000000000000;;					api.ResourceQuotas:                 resource.MustParse("1"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, err = status.Update(ctx, resourcequotaIn.Name, rest.DefaultUpdatedObjectInfo(resourcequotaIn, api.Scheme))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Get(ctx, "foo", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		rqOut := obj.(*api.ResourceQuota)
0000000000000000000000000000000000000000;;		// only compare the meaningful update b/c we can't compare due to metadata
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(resourcequotaIn.Status, rqOut.Status) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object: %s", diff.ObjectDiff(resourcequotaIn, rqOut))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestShortNames(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"quota"}
0000000000000000000000000000000000000000;;		registrytest.AssertShortNames(t, storage, expected)
0000000000000000000000000000000000000000;;	}
