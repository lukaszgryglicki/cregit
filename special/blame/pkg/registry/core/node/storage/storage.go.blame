0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
2fb5bc3bb091ed2b9b3820341b1a8c58a5532697;pkg/registry/minion/etcd/etcd.go[pkg/registry/minion/etcd/etcd.go][pkg/registry/core/node/storage/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		k8s_api_v1 "k8s.io/kubernetes/pkg/api/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/client"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/cachesize"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/core/node"
0000000000000000000000000000000000000000;;		noderest "k8s.io/kubernetes/pkg/registry/core/node/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeStorage includes storage for nodes and all sub resources
0000000000000000000000000000000000000000;;	type NodeStorage struct {
0000000000000000000000000000000000000000;;		Node   *REST
0000000000000000000000000000000000000000;;		Status *StatusREST
0000000000000000000000000000000000000000;;		Proxy  *noderest.ProxyREST
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KubeletConnectionInfo client.ConnectionInfoGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;		connection     client.ConnectionInfoGetter
0000000000000000000000000000000000000000;;		proxyTransport http.RoundTripper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatusREST implements the REST endpoint for changing the status of a pod.
0000000000000000000000000000000000000000;;	type StatusREST struct {
0000000000000000000000000000000000000000;;		store *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *StatusREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &api.Node{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the object from the storage. It is required to support Patch.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return r.store.Get(ctx, name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update alters the status subset of an object.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		return r.store.Update(ctx, name, objInfo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewStorage returns a NodeStorage object that will work against nodes.
0000000000000000000000000000000000000000;;	func NewStorage(optsGetter generic.RESTOptionsGetter, kubeletClientConfig client.KubeletClientConfig, proxyTransport http.RoundTripper) (*NodeStorage, error) {
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:            api.Scheme,
0000000000000000000000000000000000000000;;			NewFunc:           func() runtime.Object { return &api.Node{} },
0000000000000000000000000000000000000000;;			NewListFunc:       func() runtime.Object { return &api.NodeList{} },
0000000000000000000000000000000000000000;;			PredicateFunc:     node.MatchNode,
0000000000000000000000000000000000000000;;			QualifiedResource: api.Resource("nodes"),
0000000000000000000000000000000000000000;;			WatchCacheSize:    cachesize.GetWatchCacheSizeByResource("nodes"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: node.Strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: node.Strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: node.Strategy,
0000000000000000000000000000000000000000;;			ExportStrategy: node.Strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: node.GetAttrs, TriggerFunc: node.NodeNameTriggerFunc}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statusStore := *store
0000000000000000000000000000000000000000;;		statusStore.UpdateStrategy = node.StatusStrategy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set up REST handlers
0000000000000000000000000000000000000000;;		nodeREST := &REST{Store: store, proxyTransport: proxyTransport}
0000000000000000000000000000000000000000;;		statusREST := &StatusREST{store: &statusStore}
0000000000000000000000000000000000000000;;		proxyREST := &noderest.ProxyREST{Store: store, ProxyTransport: proxyTransport}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Build a NodeGetter that looks up nodes using the REST handler
0000000000000000000000000000000000000000;;		nodeGetter := client.NodeGetterFunc(func(nodeName string, options metav1.GetOptions) (*v1.Node, error) {
0000000000000000000000000000000000000000;;			obj, err := nodeREST.Get(genericapirequest.NewContext(), nodeName, &options)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			node, ok := obj.(*api.Node)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unexpected type %T", obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// TODO: Remove the conversion. Consider only return the NodeAddresses
0000000000000000000000000000000000000000;;			externalNode := &v1.Node{}
0000000000000000000000000000000000000000;;			err = k8s_api_v1.Convert_api_Node_To_v1_Node(node, externalNode, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("failed to convert to v1.Node: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return externalNode, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		connectionInfoGetter, err := client.NewNodeConnectionInfoGetter(nodeGetter, kubeletClientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nodeREST.connection = connectionInfoGetter
0000000000000000000000000000000000000000;;		proxyREST.Connection = connectionInfoGetter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &NodeStorage{
0000000000000000000000000000000000000000;;			Node:   nodeREST,
0000000000000000000000000000000000000000;;			Status: statusREST,
0000000000000000000000000000000000000000;;			Proxy:  proxyREST,
0000000000000000000000000000000000000000;;			KubeletConnectionInfo: connectionInfoGetter,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement Redirector.
0000000000000000000000000000000000000000;;	var _ = rest.Redirector(&REST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceLocation returns a URL to which one can send traffic for the specified node.
0000000000000000000000000000000000000000;;	func (r *REST) ResourceLocation(ctx genericapirequest.Context, id string) (*url.URL, http.RoundTripper, error) {
0000000000000000000000000000000000000000;;		return node.ResourceLocation(r, r.connection, r.proxyTransport, ctx, id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShortNames implements the ShortNamesProvider interface. Returns a list of short names for a resource.
0000000000000000000000000000000000000000;;	func (r *REST) ShortNames() []string {
0000000000000000000000000000000000000000;;		return []string{"no"}
0000000000000000000000000000000000000000;;	}
