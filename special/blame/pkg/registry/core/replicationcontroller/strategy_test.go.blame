0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
eab969622e05852c87c08b3487fd8624701af7ab;pkg/registry/controller/strategy_test.go[pkg/registry/controller/strategy_test.go][pkg/registry/core/replicationcontroller/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package replicationcontroller
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestControllerStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if !Strategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicationController must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if Strategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicationController should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rc := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Selector: validSelector,
0000000000000000000000000000000000000000;;				Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas:           1,
0000000000000000000000000000000000000000;;				ObservedGeneration: int64(10),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Strategy.PrepareForCreate(ctx, rc)
0000000000000000000000000000000000000000;;		if rc.Status.Replicas != 0 {
0000000000000000000000000000000000000000;;			t.Error("ReplicationController should not allow setting status.replicas on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if rc.Status.ObservedGeneration != int64(0) {
0000000000000000000000000000000000000000;;			t.Error("ReplicationController should not allow setting status.observedGeneration on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := Strategy.Validate(ctx, rc)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error validating %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidRc := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "bar", ResourceVersion: "4"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		Strategy.PrepareForUpdate(ctx, invalidRc, rc)
0000000000000000000000000000000000000000;;		errs = Strategy.ValidateUpdate(ctx, invalidRc, rc)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a validation error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if invalidRc.ResourceVersion != "4" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestControllerStatusStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if !StatusStrategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicationController must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if StatusStrategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("ReplicationController should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldController := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault, ResourceVersion: "10"},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: 3,
0000000000000000000000000000000000000000;;				Selector: validSelector,
0000000000000000000000000000000000000000;;				Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas:           1,
0000000000000000000000000000000000000000;;				ObservedGeneration: int64(10),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newController := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: metav1.NamespaceDefault, ResourceVersion: "9"},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: 1,
0000000000000000000000000000000000000000;;				Selector: validSelector,
0000000000000000000000000000000000000000;;				Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas:           3,
0000000000000000000000000000000000000000;;				ObservedGeneration: int64(11),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		StatusStrategy.PrepareForUpdate(ctx, newController, oldController)
0000000000000000000000000000000000000000;;		if newController.Status.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Replication controller status updates should allow change of replicas: %v", newController.Status.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if newController.Spec.Replicas != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("PrepareForUpdate should have preferred spec")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := StatusStrategy.ValidateUpdate(ctx, newController, oldController)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversions(t *testing.T) {
0000000000000000000000000000000000000000;;		apitesting.TestSelectableFieldLabelConversionsOfKind(t,
0000000000000000000000000000000000000000;;			api.Registry.GroupOrDie(api.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;			"ReplicationController",
0000000000000000000000000000000000000000;;			ControllerToSelectableFields(&api.ReplicationController{}),
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		validSelector := map[string]string{"a": "b"}
0000000000000000000000000000000000000000;;		validPodTemplate := api.PodTemplate{
0000000000000000000000000000000000000000;;			Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Labels: validSelector,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: "File"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldController := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "abc", Namespace: api.NamespaceDefault, ResourceVersion: "10", Annotations: make(map[string]string)},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: 3,
0000000000000000000000000000000000000000;;				Selector: validSelector,
0000000000000000000000000000000000000000;;				Template: &validPodTemplate.Template,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas:           1,
0000000000000000000000000000000000000000;;				ObservedGeneration: int64(10),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Conversion sets this annotation
0000000000000000000000000000000000000000;;		oldController.Annotations[api.NonConvertibleAnnotationPrefix+"/"+"spec.selector"] = "no way"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Deep-copy so we won't mutate both selectors.
0000000000000000000000000000000000000000;;		objCopy, err := api.Scheme.DeepCopy(oldController)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected deep-copy error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newController, ok := objCopy.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected object: %#v", objCopy)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Irrelevant (to the selector) update for the replication controller.
0000000000000000000000000000000000000000;;		newController.Spec.Replicas = 5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If they didn't try to update the selector then we should not return any error.
0000000000000000000000000000000000000000;;		errs := Strategy.ValidateUpdate(ctx, newController, oldController)
0000000000000000000000000000000000000000;;		if len(errs) > 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update the selector - validation should return an error.
0000000000000000000000000000000000000000;;		newController.Spec.Selector["shiny"] = "newlabel"
0000000000000000000000000000000000000000;;		newController.Spec.Template.Labels["shiny"] = "newlabel"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errs = Strategy.ValidateUpdate(ctx, newController, oldController)
0000000000000000000000000000000000000000;;		for _, err := range errs {
0000000000000000000000000000000000000000;;			t.Logf("%#v\n", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(errs) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("expected a validation error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(errs[0].Error(), "selector") {
0000000000000000000000000000000000000000;;			t.Fatalf("expected error related to the selector")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
