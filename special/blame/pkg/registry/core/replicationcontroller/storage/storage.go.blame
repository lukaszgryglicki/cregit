0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b8734677926f47ed24119dc96753a06630b53200;pkg/registry/controller/etcd/etcd.go[pkg/registry/controller/etcd/etcd.go][pkg/registry/core/replicationcontroller/storage/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If you make changes to this file, you should also make the corresponding change in ReplicaSet.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/cachesize"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/core/replicationcontroller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerStorage includes dummy storage for Replication Controllers and for Scale subresource.
0000000000000000000000000000000000000000;;	type ControllerStorage struct {
0000000000000000000000000000000000000000;;		Controller *REST
0000000000000000000000000000000000000000;;		Status     *StatusREST
0000000000000000000000000000000000000000;;		Scale      *ScaleREST
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStorage(optsGetter generic.RESTOptionsGetter) ControllerStorage {
0000000000000000000000000000000000000000;;		controllerREST, statusREST := NewREST(optsGetter)
0000000000000000000000000000000000000000;;		controllerRegistry := replicationcontroller.NewRegistry(controllerREST)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ControllerStorage{
0000000000000000000000000000000000000000;;			Controller: controllerREST,
0000000000000000000000000000000000000000;;			Status:     statusREST,
0000000000000000000000000000000000000000;;			Scale:      &ScaleREST{registry: controllerRegistry},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewREST returns a RESTStorage object that will work against replication controllers.
0000000000000000000000000000000000000000;;	func NewREST(optsGetter generic.RESTOptionsGetter) (*REST, *StatusREST) {
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:            api.Scheme,
0000000000000000000000000000000000000000;;			NewFunc:           func() runtime.Object { return &api.ReplicationController{} },
0000000000000000000000000000000000000000;;			NewListFunc:       func() runtime.Object { return &api.ReplicationControllerList{} },
0000000000000000000000000000000000000000;;			PredicateFunc:     replicationcontroller.MatchController,
0000000000000000000000000000000000000000;;			QualifiedResource: api.Resource("replicationcontrollers"),
0000000000000000000000000000000000000000;;			WatchCacheSize:    cachesize.GetWatchCacheSizeByResource("replicationcontrollers"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: replicationcontroller.Strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: replicationcontroller.Strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: replicationcontroller.Strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: replicationcontroller.GetAttrs}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statusStore := *store
0000000000000000000000000000000000000000;;		statusStore.UpdateStrategy = replicationcontroller.StatusStrategy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &REST{store}, &StatusREST{store: &statusStore}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement ShortNamesProvider
0000000000000000000000000000000000000000;;	var _ rest.ShortNamesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShortNames implements the ShortNamesProvider interface. Returns a list of short names for a resource.
0000000000000000000000000000000000000000;;	func (r *REST) ShortNames() []string {
0000000000000000000000000000000000000000;;		return []string{"rc"}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement CategoriesProvider
0000000000000000000000000000000000000000;;	var _ rest.CategoriesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Categories implements the CategoriesProvider interface. Returns a list of categories a resource is part of.
0000000000000000000000000000000000000000;;	func (r *REST) Categories() []string {
0000000000000000000000000000000000000000;;		return []string{"all"}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatusREST implements the REST endpoint for changing the status of a replication controller
0000000000000000000000000000000000000000;;	type StatusREST struct {
0000000000000000000000000000000000000000;;		store *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *StatusREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &api.ReplicationController{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the object from the storage. It is required to support Patch.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return r.store.Get(ctx, name, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update alters the status subset of an object.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		return r.store.Update(ctx, name, objInfo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScaleREST struct {
0000000000000000000000000000000000000000;;		registry replicationcontroller.Registry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScaleREST implements Patcher
0000000000000000000000000000000000000000;;	var _ = rest.Patcher(&ScaleREST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new Scale object
0000000000000000000000000000000000000000;;	func (r *ScaleREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &autoscaling.Scale{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ScaleREST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		rc, err := r.registry.GetController(ctx, name, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(autoscaling.Resource("replicationcontrollers/scale"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return scaleFromRC(rc), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ScaleREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		rc, err := r.registry.GetController(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewNotFound(autoscaling.Resource("replicationcontrollers/scale"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oldScale := scaleFromRC(rc)
0000000000000000000000000000000000000000;;		obj, err := objInfo.UpdatedObject(ctx, oldScale)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest("nil update passed to Scale")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale, ok := obj.(*autoscaling.Scale)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewBadRequest(fmt.Sprintf("wrong object passed to Scale update: %v", obj))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if errs := validation.ValidateScale(scale); len(errs) > 0 {
0000000000000000000000000000000000000000;;			return nil, false, errors.NewInvalid(autoscaling.Kind("Scale"), scale.Name, errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rc.Spec.Replicas = scale.Spec.Replicas
0000000000000000000000000000000000000000;;		rc.ResourceVersion = scale.ResourceVersion
0000000000000000000000000000000000000000;;		rc, err = r.registry.UpdateController(ctx, rc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return scaleFromRC(rc), false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scaleFromRC returns a scale subresource for a replication controller.
0000000000000000000000000000000000000000;;	func scaleFromRC(rc *api.ReplicationController) *autoscaling.Scale {
0000000000000000000000000000000000000000;;		return &autoscaling.Scale{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              rc.Name,
0000000000000000000000000000000000000000;;				Namespace:         rc.Namespace,
0000000000000000000000000000000000000000;;				UID:               rc.UID,
0000000000000000000000000000000000000000;;				ResourceVersion:   rc.ResourceVersion,
0000000000000000000000000000000000000000;;				CreationTimestamp: rc.CreationTimestamp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: autoscaling.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: rc.Spec.Replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: autoscaling.ScaleStatus{
0000000000000000000000000000000000000000;;				Replicas: rc.Status.Replicas,
0000000000000000000000000000000000000000;;				Selector: labels.SelectorFromSet(rc.Spec.Selector).String(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
