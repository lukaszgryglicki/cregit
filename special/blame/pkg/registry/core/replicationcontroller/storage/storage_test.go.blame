0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9fbdd758c00a160e902805405146a779d3acf5d8;pkg/registry/controller_registry_test.go[pkg/registry/controller_registry_test.go][pkg/registry/core/replicationcontroller/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;		name      = "foo"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (ControllerStorage, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, "")
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           etcdStorage,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 1,
0000000000000000000000000000000000000000;;			ResourcePrefix:          "replicationcontrollers",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		storage := NewStorage(restOptions)
0000000000000000000000000000000000000000;;		return storage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createController is a helper function that returns a controller with the updated resource version.
0000000000000000000000000000000000000000;;	func createController(storage *REST, rc api.ReplicationController, t *testing.T) (api.ReplicationController, error) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), rc.Namespace)
0000000000000000000000000000000000000000;;		obj, err := storage.Create(ctx, &rc, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to create controller, %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newRc := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		return *newRc, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewController() *api.ReplicationController {
0000000000000000000000000000000000000000;;		return &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				Namespace: namespace,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Selector: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;				Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:                     "test",
0000000000000000000000000000000000000000;;								Image:                    "test_image",
0000000000000000000000000000000000000000;;								ImagePullPolicy:          api.PullIfNotPresent,
0000000000000000000000000000000000000000;;								TerminationMessagePolicy: api.TerminationMessageReadFile,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validController = validNewController()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Controller.Store)
0000000000000000000000000000000000000000;;		controller := validNewController()
0000000000000000000000000000000000000000;;		controller.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			controller,
0000000000000000000000000000000000000000;;			// invalid (invalid selector)
0000000000000000000000000000000000000000;;			&api.ReplicationController{
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Replicas: 2,
0000000000000000000000000000000000000000;;					Selector: map[string]string{},
0000000000000000000000000000000000000000;;					Template: validController.Spec.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Controller.Store)
0000000000000000000000000000000000000000;;		test.TestUpdate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validNewController(),
0000000000000000000000000000000000000000;;			// valid updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;				object.Spec.Replicas = object.Spec.Replicas + 1
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;				object.Name = ""
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;				object.Spec.Selector = map[string]string{}
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Controller.Store)
0000000000000000000000000000000000000000;;		test.TestDelete(validNewController())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerationNumber(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		modifiedSno := *validNewController()
0000000000000000000000000000000000000000;;		modifiedSno.Generation = 100
0000000000000000000000000000000000000000;;		modifiedSno.Status.ObservedGeneration = 10
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		rc, err := createController(storage.Controller, modifiedSno, t)
0000000000000000000000000000000000000000;;		ctrl, err := storage.Controller.Get(ctx, rc.Name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		controller, _ := ctrl.(*api.ReplicationController)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generation initialization
0000000000000000000000000000000000000000;;		if controller.Generation != 1 && controller.Status.ObservedGeneration != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected generation number %v, status generation %v", controller.Generation, controller.Status.ObservedGeneration)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Updates to spec should increment the generation number
0000000000000000000000000000000000000000;;		controller.Spec.Replicas += 1
0000000000000000000000000000000000000000;;		storage.Controller.Update(ctx, controller.Name, rest.DefaultUpdatedObjectInfo(controller, api.Scheme))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctrl, err = storage.Controller.Get(ctx, rc.Name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		controller, _ = ctrl.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		if controller.Generation != 2 || controller.Status.ObservedGeneration != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected generation, spec: %v, status: %v", controller.Generation, controller.Status.ObservedGeneration)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Updates to status should not increment either spec or status generation numbers
0000000000000000000000000000000000000000;;		controller.Status.Replicas += 1
0000000000000000000000000000000000000000;;		storage.Controller.Update(ctx, controller.Name, rest.DefaultUpdatedObjectInfo(controller, api.Scheme))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctrl, err = storage.Controller.Get(ctx, rc.Name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		controller, _ = ctrl.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		if controller.Generation != 2 || controller.Status.ObservedGeneration != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected generation number, spec: %v, status: %v", controller.Generation, controller.Status.ObservedGeneration)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Controller.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validNewController())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Controller.Store)
0000000000000000000000000000000000000000;;		test.TestList(validNewController())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Controller.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validController,
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"a": "b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"a": "c"},
0000000000000000000000000000000000000000;;				{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"status.replicas": "0"},
0000000000000000000000000000000000000000;;				{"metadata.name": "foo"},
0000000000000000000000000000000000000000;;				{"status.replicas": "0", "metadata.name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// not matchin fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"status.replicas": "10"},
0000000000000000000000000000000000000000;;				{"metadata.name": "bar"},
0000000000000000000000000000000000000000;;				{"name": "foo"},
0000000000000000000000000000000000000000;;				{"status.replicas": "10", "metadata.name": "foo"},
0000000000000000000000000000000000000000;;				{"status.replicas": "0", "metadata.name": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//TODO TestUpdateStatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestScaleGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), namespace)
0000000000000000000000000000000000000000;;		rc, err := createController(storage.Controller, *validController, t)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error setting new replication controller %v: %v", *validController, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		want := &autoscaling.Scale{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              name,
0000000000000000000000000000000000000000;;				Namespace:         namespace,
0000000000000000000000000000000000000000;;				UID:               rc.UID,
0000000000000000000000000000000000000000;;				ResourceVersion:   rc.ResourceVersion,
0000000000000000000000000000000000000000;;				CreationTimestamp: rc.CreationTimestamp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: autoscaling.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: validController.Spec.Replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: autoscaling.ScaleStatus{
0000000000000000000000000000000000000000;;				Replicas: validController.Status.Replicas,
0000000000000000000000000000000000000000;;				Selector: labels.SelectorFromSet(validController.Spec.Template.Labels).String(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Scale.Get(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error fetching scale for %s: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		got := obj.(*autoscaling.Scale)
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(want, got) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected scale: %s", diff.ObjectDiff(want, got))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestScaleUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx := genericapirequest.WithNamespace(genericapirequest.NewContext(), namespace)
0000000000000000000000000000000000000000;;		rc, err := createController(storage.Controller, *validController, t)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error setting new replication controller %v: %v", *validController, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		replicas := int32(12)
0000000000000000000000000000000000000000;;		update := autoscaling.Scale{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespace},
0000000000000000000000000000000000000000;;			Spec: autoscaling.ScaleSpec{
0000000000000000000000000000000000000000;;				Replicas: replicas,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := storage.Scale.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(&update, api.Scheme)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error updating scale %v: %v", update, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := storage.Scale.Get(ctx, name, &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error fetching scale for %s: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scale := obj.(*autoscaling.Scale)
0000000000000000000000000000000000000000;;		if scale.Spec.Replicas != replicas {
0000000000000000000000000000000000000000;;			t.Errorf("wrong replicas count expected: %d got: %d", replicas, rc.Spec.Replicas)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		update.ResourceVersion = rc.ResourceVersion
0000000000000000000000000000000000000000;;		update.Spec.Replicas = 15
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err = storage.Scale.Update(ctx, update.Name, rest.DefaultUpdatedObjectInfo(&update, api.Scheme)); err != nil && !errors.IsConflict(err) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error, expecting an update conflict but got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestShortNames(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"rc"}
0000000000000000000000000000000000000000;;		registrytest.AssertShortNames(t, storage.Controller, expected)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCategories(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Controller.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"all"}
0000000000000000000000000000000000000000;;		registrytest.AssertCategories(t, storage.Controller, expected)
0000000000000000000000000000000000000000;;	}
