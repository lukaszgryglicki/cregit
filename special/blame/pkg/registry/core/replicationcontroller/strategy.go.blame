0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9fbdd758c00a160e902805405146a779d3acf5d8;pkg/registry/controller_registry.go[pkg/registry/controller_registry.go][pkg/registry/core/replicationcontroller/strategy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If you make changes to this file, you should also make the corresponding change in ReplicaSet.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package replicationcontroller
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		apistorage "k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/names"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rcStrategy implements verification logic for Replication Controllers.
0000000000000000000000000000000000000000;;	type rcStrategy struct {
0000000000000000000000000000000000000000;;		runtime.ObjectTyper
0000000000000000000000000000000000000000;;		names.NameGenerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Strategy is the default logic that applies when creating and updating Replication Controller objects.
0000000000000000000000000000000000000000;;	var Strategy = rcStrategy{api.Scheme, names.SimpleNameGenerator}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultGarbageCollectionPolicy returns Orphan because that was the default
0000000000000000000000000000000000000000;;	// behavior before the server-side garbage collection was implemented.
0000000000000000000000000000000000000000;;	func (rcStrategy) DefaultGarbageCollectionPolicy() rest.GarbageCollectionPolicy {
0000000000000000000000000000000000000000;;		return rest.OrphanDependents
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespaceScoped returns true because all Replication Controllers need to be within a namespace.
0000000000000000000000000000000000000000;;	func (rcStrategy) NamespaceScoped() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForCreate clears the status of a replication controller before creation.
0000000000000000000000000000000000000000;;	func (rcStrategy) PrepareForCreate(ctx genericapirequest.Context, obj runtime.Object) {
0000000000000000000000000000000000000000;;		controller := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		controller.Status = api.ReplicationControllerStatus{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		controller.Generation = 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForUpdate clears fields that are not allowed to be set by end users on update.
0000000000000000000000000000000000000000;;	func (rcStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newController := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		oldController := old.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		// update is not allowed to set status
0000000000000000000000000000000000000000;;		newController.Status = oldController.Status
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any changes to the spec increment the generation number, any changes to the
0000000000000000000000000000000000000000;;		// status should reflect the generation number of the corresponding object. We push
0000000000000000000000000000000000000000;;		// the burden of managing the status onto the clients because we can't (in general)
0000000000000000000000000000000000000000;;		// know here what version of spec the writer of the status has seen. It may seem like
0000000000000000000000000000000000000000;;		// we can at first -- since obj contains spec -- but in the future we will probably make
0000000000000000000000000000000000000000;;		// status its own object, and even if we don't, writes may be the result of a
0000000000000000000000000000000000000000;;		// read-update-write loop, so the contents of spec may not actually be the spec that
0000000000000000000000000000000000000000;;		// the controller has *seen*.
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(oldController.Spec, newController.Spec) {
0000000000000000000000000000000000000000;;			newController.Generation = oldController.Generation + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate validates a new replication controller.
0000000000000000000000000000000000000000;;	func (rcStrategy) Validate(ctx genericapirequest.Context, obj runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		controller := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		return validation.ValidateReplicationController(controller)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Canonicalize normalizes the object after validation.
0000000000000000000000000000000000000000;;	func (rcStrategy) Canonicalize(obj runtime.Object) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowCreateOnUpdate is false for replication controllers; this means a POST is
0000000000000000000000000000000000000000;;	// needed to create one.
0000000000000000000000000000000000000000;;	func (rcStrategy) AllowCreateOnUpdate() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateUpdate is the default update validation for an end user.
0000000000000000000000000000000000000000;;	func (rcStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		oldRc := old.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		newRc := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validationErrorList := validation.ValidateReplicationController(newRc)
0000000000000000000000000000000000000000;;		updateErrorList := validation.ValidateReplicationControllerUpdate(newRc, oldRc)
0000000000000000000000000000000000000000;;		errs := append(validationErrorList, updateErrorList...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for key, value := range helper.NonConvertibleFields(oldRc.Annotations) {
0000000000000000000000000000000000000000;;			parts := strings.Split(key, "/")
0000000000000000000000000000000000000000;;			if len(parts) != 2 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			brokenField := parts[1]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case strings.Contains(brokenField, "selector"):
0000000000000000000000000000000000000000;;				if !apiequality.Semantic.DeepEqual(oldRc.Spec.Selector, newRc.Spec.Selector) {
0000000000000000000000000000000000000000;;					errs = append(errs, field.Invalid(field.NewPath("spec").Child("selector"), newRc.Spec.Selector, "cannot update non-convertible selector"))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				errs = append(errs, &field.Error{Type: field.ErrorTypeNotFound, BadValue: value, Field: brokenField, Detail: "unknown non-convertible field"})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return errs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rcStrategy) AllowUnconditionalUpdate() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerToSelectableFields returns a field set that represents the object.
0000000000000000000000000000000000000000;;	func ControllerToSelectableFields(controller *api.ReplicationController) fields.Set {
0000000000000000000000000000000000000000;;		objectMetaFieldsSet := generic.ObjectMetaFieldsSet(&controller.ObjectMeta, true)
0000000000000000000000000000000000000000;;		controllerSpecificFieldsSet := fields.Set{
0000000000000000000000000000000000000000;;			"status.replicas": strconv.Itoa(int(controller.Status.Replicas)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return generic.MergeFieldsSets(objectMetaFieldsSet, controllerSpecificFieldsSet)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAttrs returns labels and fields of a given object for filtering purposes.
0000000000000000000000000000000000000000;;	func GetAttrs(obj runtime.Object) (labels.Set, fields.Set, bool, error) {
0000000000000000000000000000000000000000;;		rc, ok := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, nil, false, fmt.Errorf("given object is not a replication controller.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labels.Set(rc.ObjectMeta.Labels), ControllerToSelectableFields(rc), rc.Initializers != nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchController is the filter used by the generic etcd backend to route
0000000000000000000000000000000000000000;;	// watch events from etcd to clients of the apiserver only interested in specific
0000000000000000000000000000000000000000;;	// labels/fields.
0000000000000000000000000000000000000000;;	func MatchController(label labels.Selector, field fields.Selector) apistorage.SelectionPredicate {
0000000000000000000000000000000000000000;;		return apistorage.SelectionPredicate{
0000000000000000000000000000000000000000;;			Label:    label,
0000000000000000000000000000000000000000;;			Field:    field,
0000000000000000000000000000000000000000;;			GetAttrs: GetAttrs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rcStatusStrategy struct {
0000000000000000000000000000000000000000;;		rcStrategy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var StatusStrategy = rcStatusStrategy{Strategy}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rcStatusStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newRc := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		oldRc := old.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		// update is not allowed to set spec
0000000000000000000000000000000000000000;;		newRc.Spec = oldRc.Spec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rcStatusStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		return validation.ValidateReplicationControllerStatusUpdate(obj.(*api.ReplicationController), old.(*api.ReplicationController))
0000000000000000000000000000000000000000;;	}
