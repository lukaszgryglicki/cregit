0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a24be00138d9ba08090cb73499274a29cb78b5be;pkg/registry/componentstatus/rest.go[pkg/registry/componentstatus/rest.go][pkg/registry/core/componentstatus/rest.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package componentstatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metainternalversion "k8s.io/apimachinery/pkg/apis/meta/internalversion"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/probe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		GetServersToValidate func() map[string]*Server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewStorage returns a new REST.
0000000000000000000000000000000000000000;;	func NewStorage(serverRetriever func() map[string]*Server) *REST {
0000000000000000000000000000000000000000;;		return &REST{
0000000000000000000000000000000000000000;;			GetServersToValidate: serverRetriever,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rs *REST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &api.ComponentStatus{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rs *REST) NewList() runtime.Object {
0000000000000000000000000000000000000000;;		return &api.ComponentStatusList{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the list of component status. Note that the label and field are both ignored.
0000000000000000000000000000000000000000;;	// Note that this call doesn't support labels or selectors.
0000000000000000000000000000000000000000;;	func (rs *REST) List(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		servers := rs.GetServersToValidate()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wait := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		wait.Add(len(servers))
0000000000000000000000000000000000000000;;		statuses := make(chan api.ComponentStatus, len(servers))
0000000000000000000000000000000000000000;;		for k, v := range servers {
0000000000000000000000000000000000000000;;			go func(name string, server *Server) {
0000000000000000000000000000000000000000;;				defer wait.Done()
0000000000000000000000000000000000000000;;				status := rs.getComponentStatus(name, server)
0000000000000000000000000000000000000000;;				statuses <- *status
0000000000000000000000000000000000000000;;			}(k, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wait.Wait()
0000000000000000000000000000000000000000;;		close(statuses)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reply := []api.ComponentStatus{}
0000000000000000000000000000000000000000;;		for status := range statuses {
0000000000000000000000000000000000000000;;			reply = append(reply, status)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &api.ComponentStatusList{Items: reply}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rs *REST) Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		servers := rs.GetServersToValidate()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if server, ok := servers[name]; !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Component not found: %s", name)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return rs.getComponentStatus(name, server), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ToConditionStatus(s probe.Result) api.ConditionStatus {
0000000000000000000000000000000000000000;;		switch s {
0000000000000000000000000000000000000000;;		case probe.Success:
0000000000000000000000000000000000000000;;			return api.ConditionTrue
0000000000000000000000000000000000000000;;		case probe.Failure:
0000000000000000000000000000000000000000;;			return api.ConditionFalse
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return api.ConditionUnknown
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rs *REST) getComponentStatus(name string, server *Server) *api.ComponentStatus {
0000000000000000000000000000000000000000;;		status, msg, err := server.DoServerCheck()
0000000000000000000000000000000000000000;;		errorMsg := ""
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errorMsg = err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := &api.ComponentCondition{
0000000000000000000000000000000000000000;;			Type:    api.ComponentHealthy,
0000000000000000000000000000000000000000;;			Status:  ToConditionStatus(status),
0000000000000000000000000000000000000000;;			Message: msg,
0000000000000000000000000000000000000000;;			Error:   errorMsg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		retVal := &api.ComponentStatus{
0000000000000000000000000000000000000000;;			Conditions: []api.ComponentCondition{*c},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		retVal.Name = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return retVal
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement ShortNamesProvider
0000000000000000000000000000000000000000;;	var _ rest.ShortNamesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShortNames implements the ShortNamesProvider interface. Returns a list of short names for a resource.
0000000000000000000000000000000000000000;;	func (r *REST) ShortNames() []string {
0000000000000000000000000000000000000000;;		return []string{"cs"}
0000000000000000000000000000000000000000;;	}
