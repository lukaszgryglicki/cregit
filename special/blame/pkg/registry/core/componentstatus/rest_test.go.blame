0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a24be00138d9ba08090cb73499274a29cb78b5be;pkg/registry/componentstatus/rest_test.go[pkg/registry/componentstatus/rest_test.go][pkg/registry/core/componentstatus/rest_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package componentstatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/probe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeHttpProber struct {
0000000000000000000000000000000000000000;;		result probe.Result
0000000000000000000000000000000000000000;;		body   string
0000000000000000000000000000000000000000;;		err    error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeHttpProber) Probe(*url.URL, http.Header, time.Duration) (probe.Result, string, error) {
0000000000000000000000000000000000000000;;		return f.result, f.body, f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testResponse struct {
0000000000000000000000000000000000000000;;		result probe.Result
0000000000000000000000000000000000000000;;		data   string
0000000000000000000000000000000000000000;;		err    error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTestREST(resp testResponse) *REST {
0000000000000000000000000000000000000000;;		prober := &fakeHttpProber{
0000000000000000000000000000000000000000;;			result: resp.result,
0000000000000000000000000000000000000000;;			body:   resp.data,
0000000000000000000000000000000000000000;;			err:    resp.err,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &REST{
0000000000000000000000000000000000000000;;			GetServersToValidate: func() map[string]*Server {
0000000000000000000000000000000000000000;;				return map[string]*Server{
0000000000000000000000000000000000000000;;					"test1": {Addr: "testserver1", Port: 8000, Path: "/healthz", Prober: prober},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createTestStatus(name string, status api.ConditionStatus, msg string, err string) *api.ComponentStatus {
0000000000000000000000000000000000000000;;		retVal := &api.ComponentStatus{
0000000000000000000000000000000000000000;;			Conditions: []api.ComponentCondition{
0000000000000000000000000000000000000000;;				{Type: api.ComponentHealthy, Status: status, Message: msg, Error: err},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		retVal.Name = name
0000000000000000000000000000000000000000;;		return retVal
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList_NoError(t *testing.T) {
0000000000000000000000000000000000000000;;		r := NewTestREST(testResponse{result: probe.Success, data: "ok"})
0000000000000000000000000000000000000000;;		got, err := r.List(genericapirequest.NewContext(), nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expect := &api.ComponentStatusList{
0000000000000000000000000000000000000000;;			Items: []api.ComponentStatus{*(createTestStatus("test1", api.ConditionTrue, "ok", ""))},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expect, got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected object. Diff: %s", diff.ObjectDiff(e, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList_FailedCheck(t *testing.T) {
0000000000000000000000000000000000000000;;		r := NewTestREST(testResponse{result: probe.Failure, data: ""})
0000000000000000000000000000000000000000;;		got, err := r.List(genericapirequest.NewContext(), nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expect := &api.ComponentStatusList{
0000000000000000000000000000000000000000;;			Items: []api.ComponentStatus{
0000000000000000000000000000000000000000;;				*(createTestStatus("test1", api.ConditionFalse, "", ""))},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expect, got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected object. Diff: %s", diff.ObjectDiff(e, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList_UnknownError(t *testing.T) {
0000000000000000000000000000000000000000;;		r := NewTestREST(testResponse{result: probe.Unknown, data: "", err: fmt.Errorf("fizzbuzz error")})
0000000000000000000000000000000000000000;;		got, err := r.List(genericapirequest.NewContext(), nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expect := &api.ComponentStatusList{
0000000000000000000000000000000000000000;;			Items: []api.ComponentStatus{
0000000000000000000000000000000000000000;;				*(createTestStatus("test1", api.ConditionUnknown, "", "fizzbuzz error"))},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expect, got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected object. Diff: %s", diff.ObjectDiff(e, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet_NoError(t *testing.T) {
0000000000000000000000000000000000000000;;		r := NewTestREST(testResponse{result: probe.Success, data: "ok"})
0000000000000000000000000000000000000000;;		got, err := r.Get(genericapirequest.NewContext(), "test1", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expect := createTestStatus("test1", api.ConditionTrue, "ok", "")
0000000000000000000000000000000000000000;;		if e, a := expect, got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected object. Diff: %s", diff.ObjectDiff(e, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet_BadName(t *testing.T) {
0000000000000000000000000000000000000000;;		r := NewTestREST(testResponse{result: probe.Success, data: "ok"})
0000000000000000000000000000000000000000;;		_, err := r.Get(genericapirequest.NewContext(), "invalidname", &metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error, but did not get one")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), "Component not found: invalidname") {
0000000000000000000000000000000000000000;;			t.Fatalf("Got unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
