0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0c8817db8225ba5673861ec1616126e9d701bb42;pkg/apiserver/validator.go[pkg/apiserver/validator.go][pkg/registry/core/componentstatus/validator.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package componentstatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/probe"
0000000000000000000000000000000000000000;;		httpprober "k8s.io/kubernetes/pkg/probe/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		probeTimeOut = 20 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: this basic interface is duplicated in N places.  consolidate?
0000000000000000000000000000000000000000;;	type httpGet interface {
0000000000000000000000000000000000000000;;		Get(url string) (*http.Response, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ValidatorFn func([]byte) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Server struct {
0000000000000000000000000000000000000000;;		Addr        string
0000000000000000000000000000000000000000;;		Port        int
0000000000000000000000000000000000000000;;		Path        string
0000000000000000000000000000000000000000;;		EnableHTTPS bool
0000000000000000000000000000000000000000;;		TLSConfig   *tls.Config
0000000000000000000000000000000000000000;;		Validate    ValidatorFn
0000000000000000000000000000000000000000;;		Prober      httpprober.HTTPProber
0000000000000000000000000000000000000000;;		Once        sync.Once
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServerStatus struct {
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Component string `json:"component,omitempty"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Health string `json:"health,omitempty"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		HealthCode probe.Result `json:"healthCode,omitempty"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Msg string `json:"msg,omitempty"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Err string `json:"err,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (server *Server) DoServerCheck() (probe.Result, string, error) {
0000000000000000000000000000000000000000;;		// setup the prober
0000000000000000000000000000000000000000;;		server.Once.Do(func() {
0000000000000000000000000000000000000000;;			if server.Prober != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			server.Prober = httpprober.NewWithTLSConfig(server.TLSConfig)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme := "http"
0000000000000000000000000000000000000000;;		if server.EnableHTTPS {
0000000000000000000000000000000000000000;;			scheme = "https"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		url := utilnet.FormatURL(scheme, server.Addr, server.Port, server.Path)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, data, err := server.Prober.Probe(url, nil, probeTimeOut)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return probe.Unknown, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if result == probe.Failure {
0000000000000000000000000000000000000000;;			return probe.Failure, string(data), err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if server.Validate != nil {
0000000000000000000000000000000000000000;;			if err := server.Validate([]byte(data)); err != nil {
0000000000000000000000000000000000000000;;				return probe.Failure, string(data), err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, string(data), nil
0000000000000000000000000000000000000000;;	}
