0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0c8817db8225ba5673861ec1616126e9d701bb42;pkg/apiserver/validator_test.go[pkg/apiserver/validator_test.go][pkg/registry/core/componentstatus/validator_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package componentstatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/probe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func matchError(data []byte) error {
0000000000000000000000000000000000000000;;		if string(data) != "bar" {
0000000000000000000000000000000000000000;;			return errors.New("match error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			probeResult probe.Result
0000000000000000000000000000000000000000;;			probeData   string
0000000000000000000000000000000000000000;;			probeErr    error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectResult probe.Result
0000000000000000000000000000000000000000;;			expectData   string
0000000000000000000000000000000000000000;;			expectErr    bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			validator ValidatorFn
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{probe.Unknown, "", fmt.Errorf("probe error"), probe.Unknown, "", true, nil},
0000000000000000000000000000000000000000;;			{probe.Failure, "", nil, probe.Failure, "", false, nil},
0000000000000000000000000000000000000000;;			{probe.Success, "foo", nil, probe.Failure, "foo", true, matchError},
0000000000000000000000000000000000000000;;			{probe.Success, "foo", nil, probe.Success, "foo", false, nil},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := Server{Addr: "foo.com", Port: 8080, Path: "/healthz"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fakeProber := &fakeHttpProber{
0000000000000000000000000000000000000000;;				result: test.probeResult,
0000000000000000000000000000000000000000;;				body:   test.probeData,
0000000000000000000000000000000000000000;;				err:    test.probeErr,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			s.Validate = test.validator
0000000000000000000000000000000000000000;;			s.Prober = fakeProber
0000000000000000000000000000000000000000;;			result, data, err := s.DoServerCheck()
0000000000000000000000000000000000000000;;			if test.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if data != test.expectData {
0000000000000000000000000000000000000000;;				t.Errorf("expected %s, got %s", test.expectData, data)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result != test.expectResult {
0000000000000000000000000000000000000000;;				t.Errorf("expected %s, got %s", test.expectResult, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
