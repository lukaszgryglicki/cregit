0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d1a2b1250b433f23a01bfe06696cc1b4b51c5c7d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/admissionregistration"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/admissionregistration/externaladmissionhookconfiguration"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/cachesize"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rest implements a RESTStorage for pod disruption budgets against etcd
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewREST returns a RESTStorage object that will work against pod disruption budgets.
0000000000000000000000000000000000000000;;	func NewREST(optsGetter generic.RESTOptionsGetter) *REST {
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:      api.Scheme,
0000000000000000000000000000000000000000;;			NewFunc:     func() runtime.Object { return &admissionregistration.ExternalAdmissionHookConfiguration{} },
0000000000000000000000000000000000000000;;			NewListFunc: func() runtime.Object { return &admissionregistration.ExternalAdmissionHookConfigurationList{} },
0000000000000000000000000000000000000000;;			ObjectNameFunc: func(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;				return obj.(*admissionregistration.ExternalAdmissionHookConfiguration).Name, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			PredicateFunc:     externaladmissionhookconfiguration.MatchExternalAdmissionHookConfiguration,
0000000000000000000000000000000000000000;;			QualifiedResource: admissionregistration.Resource("externaladmissionhookconfigurations"),
0000000000000000000000000000000000000000;;			WatchCacheSize:    cachesize.GetWatchCacheSizeByResource("externaladmissionhookconfigurations"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: externaladmissionhookconfiguration.Strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: externaladmissionhookconfiguration.Strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: externaladmissionhookconfiguration.Strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: externaladmissionhookconfiguration.GetAttrs}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &REST{store}
0000000000000000000000000000000000000000;;	}
