0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
44bee642e09573beb3a56626990cb83ebcbf1999;pkg/registry/certificates/strategy_test.go[pkg/registry/certificates/strategy_test.go][pkg/registry/certificates/certificates/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package certificates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		certapi "k8s.io/kubernetes/pkg/apis/certificates"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStrategyCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			ctx         genericapirequest.Context
0000000000000000000000000000000000000000;;			obj         runtime.Object
0000000000000000000000000000000000000000;;			expectedObj runtime.Object
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no user in context, no user in obj": {
0000000000000000000000000000000000000000;;				ctx: genericapirequest.NewContext(),
0000000000000000000000000000000000000000;;				obj: &certapi.CertificateSigningRequest{},
0000000000000000000000000000000000000000;;				expectedObj: &certapi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;					Status: certapi.CertificateSigningRequestStatus{Conditions: []certapi.CertificateSigningRequestCondition{}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"user in context, no user in obj": {
0000000000000000000000000000000000000000;;				ctx: genericapirequest.WithUser(
0000000000000000000000000000000000000000;;					genericapirequest.NewContext(),
0000000000000000000000000000000000000000;;					&user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name:   "bob",
0000000000000000000000000000000000000000;;						UID:    "123",
0000000000000000000000000000000000000000;;						Groups: []string{"group1"},
0000000000000000000000000000000000000000;;						Extra:  map[string][]string{"foo": {"bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				),
0000000000000000000000000000000000000000;;				obj: &certapi.CertificateSigningRequest{},
0000000000000000000000000000000000000000;;				expectedObj: &certapi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;					Spec: certapi.CertificateSigningRequestSpec{
0000000000000000000000000000000000000000;;						Username: "bob",
0000000000000000000000000000000000000000;;						UID:      "123",
0000000000000000000000000000000000000000;;						Groups:   []string{"group1"},
0000000000000000000000000000000000000000;;						Extra:    map[string]certapi.ExtraValue{"foo": {"bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: certapi.CertificateSigningRequestStatus{Conditions: []certapi.CertificateSigningRequestCondition{}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no user in context, user in obj": {
0000000000000000000000000000000000000000;;				ctx: genericapirequest.NewContext(),
0000000000000000000000000000000000000000;;				obj: &certapi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;					Spec: certapi.CertificateSigningRequestSpec{
0000000000000000000000000000000000000000;;						Username: "bob",
0000000000000000000000000000000000000000;;						UID:      "123",
0000000000000000000000000000000000000000;;						Groups:   []string{"group1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedObj: &certapi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;					Status: certapi.CertificateSigningRequestStatus{Conditions: []certapi.CertificateSigningRequestCondition{}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"user in context, user in obj": {
0000000000000000000000000000000000000000;;				ctx: genericapirequest.WithUser(
0000000000000000000000000000000000000000;;					genericapirequest.NewContext(),
0000000000000000000000000000000000000000;;					&user.DefaultInfo{
0000000000000000000000000000000000000000;;						Name: "alice",
0000000000000000000000000000000000000000;;						UID:  "234",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				),
0000000000000000000000000000000000000000;;				obj: &certapi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;					Spec: certapi.CertificateSigningRequestSpec{
0000000000000000000000000000000000000000;;						Username: "bob",
0000000000000000000000000000000000000000;;						UID:      "123",
0000000000000000000000000000000000000000;;						Groups:   []string{"group1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedObj: &certapi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;					Spec: certapi.CertificateSigningRequestSpec{
0000000000000000000000000000000000000000;;						Username: "alice",
0000000000000000000000000000000000000000;;						UID:      "234",
0000000000000000000000000000000000000000;;						Groups:   nil,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: certapi.CertificateSigningRequestStatus{Conditions: []certapi.CertificateSigningRequestCondition{}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"pre-approved status": {
0000000000000000000000000000000000000000;;				ctx: genericapirequest.NewContext(),
0000000000000000000000000000000000000000;;				obj: &certapi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;					Status: certapi.CertificateSigningRequestStatus{
0000000000000000000000000000000000000000;;						Conditions: []certapi.CertificateSigningRequestCondition{
0000000000000000000000000000000000000000;;							{Type: certapi.CertificateApproved},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedObj: &certapi.CertificateSigningRequest{
0000000000000000000000000000000000000000;;					Status: certapi.CertificateSigningRequestStatus{Conditions: []certapi.CertificateSigningRequestCondition{}},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range tests {
0000000000000000000000000000000000000000;;			obj := tc.obj
0000000000000000000000000000000000000000;;			Strategy.PrepareForCreate(tc.ctx, obj)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj, tc.expectedObj) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: object diff: %s", k, diff.ObjectDiff(obj, tc.expectedObj))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
