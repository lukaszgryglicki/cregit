0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6207f4996446b241bfeec4e3539bf7e984c9fd1f;pkg/registry/certificates/etcd/etcd.go[pkg/registry/certificates/etcd/etcd.go][pkg/registry/certificates/certificates/storage/storage.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/certificates"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/cachesize"
0000000000000000000000000000000000000000;;		csrregistry "k8s.io/kubernetes/pkg/registry/certificates/certificates"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// REST implements a RESTStorage for CertificateSigningRequest
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewREST returns a registry which will store CertificateSigningRequest in the given helper
0000000000000000000000000000000000000000;;	func NewREST(optsGetter generic.RESTOptionsGetter) (*REST, *StatusREST, *ApprovalREST) {
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:            api.Scheme,
0000000000000000000000000000000000000000;;			NewFunc:           func() runtime.Object { return &certificates.CertificateSigningRequest{} },
0000000000000000000000000000000000000000;;			NewListFunc:       func() runtime.Object { return &certificates.CertificateSigningRequestList{} },
0000000000000000000000000000000000000000;;			PredicateFunc:     csrregistry.Matcher,
0000000000000000000000000000000000000000;;			QualifiedResource: certificates.Resource("certificatesigningrequests"),
0000000000000000000000000000000000000000;;			WatchCacheSize:    cachesize.GetWatchCacheSizeByResource("certificatesigningrequests"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: csrregistry.Strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: csrregistry.Strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: csrregistry.Strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: csrregistry.GetAttrs}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Subresources use the same store and creation strategy, which only
0000000000000000000000000000000000000000;;		// allows empty subs. Updates to an existing subresource are handled by
0000000000000000000000000000000000000000;;		// dedicated strategies.
0000000000000000000000000000000000000000;;		statusStore := *store
0000000000000000000000000000000000000000;;		statusStore.UpdateStrategy = csrregistry.StatusStrategy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		approvalStore := *store
0000000000000000000000000000000000000000;;		approvalStore.UpdateStrategy = csrregistry.ApprovalStrategy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &REST{store}, &StatusREST{store: &statusStore}, &ApprovalREST{store: &approvalStore}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implement ShortNamesProvider
0000000000000000000000000000000000000000;;	var _ rest.ShortNamesProvider = &REST{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShortNames implements the ShortNamesProvider interface. Returns a list of short names for a resource.
0000000000000000000000000000000000000000;;	func (r *REST) ShortNames() []string {
0000000000000000000000000000000000000000;;		return []string{"csr"}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatusREST implements the REST endpoint for changing the status of a CSR.
0000000000000000000000000000000000000000;;	type StatusREST struct {
0000000000000000000000000000000000000000;;		store *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *StatusREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &certificates.CertificateSigningRequest{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update alters the status subset of an object.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		return r.store.Update(ctx, name, objInfo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApprovalREST implements the REST endpoint for changing the approval state of a CSR.
0000000000000000000000000000000000000000;;	type ApprovalREST struct {
0000000000000000000000000000000000000000;;		store *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *ApprovalREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &certificates.CertificateSigningRequest{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update alters the approval subset of an object.
0000000000000000000000000000000000000000;;	func (r *ApprovalREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		return r.store.Update(ctx, name, objInfo)
0000000000000000000000000000000000000000;;	}
