0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
ae94fec781be41fe5bdda7d2261a0059df8bf624;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//use for --watch-cache-sizes param of kube-apiserver
0000000000000000000000000000000000000000;;	//make watch cache size of resources configurable
0000000000000000000000000000000000000000;;	package cachesize
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Resource string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		APIServices                Resource = "apiservices"
0000000000000000000000000000000000000000;;		CertificateSigningRequests Resource = "certificatesigningrequests"
0000000000000000000000000000000000000000;;		ClusterRoles               Resource = "clusterroles"
0000000000000000000000000000000000000000;;		ClusterRoleBindings        Resource = "clusterrolebindings"
0000000000000000000000000000000000000000;;		ConfigMaps                 Resource = "configmaps"
0000000000000000000000000000000000000000;;		Controllers                Resource = "controllers"
0000000000000000000000000000000000000000;;		Daemonsets                 Resource = "daemonsets"
0000000000000000000000000000000000000000;;		Deployments                Resource = "deployments"
0000000000000000000000000000000000000000;;		Endpoints                  Resource = "endpoints"
0000000000000000000000000000000000000000;;		HorizontalPodAutoscalers   Resource = "horizontalpodautoscalers"
0000000000000000000000000000000000000000;;		Ingress                    Resource = "ingress"
0000000000000000000000000000000000000000;;		PodDisruptionBudget        Resource = "poddisruptionbudgets"
0000000000000000000000000000000000000000;;		StatefulSet                Resource = "statefulset"
0000000000000000000000000000000000000000;;		Jobs                       Resource = "jobs"
0000000000000000000000000000000000000000;;		LimitRanges                Resource = "limitranges"
0000000000000000000000000000000000000000;;		Namespaces                 Resource = "namespaces"
0000000000000000000000000000000000000000;;		NetworkPolicys             Resource = "networkpolicies"
0000000000000000000000000000000000000000;;		Nodes                      Resource = "nodes"
0000000000000000000000000000000000000000;;		PersistentVolumes          Resource = "persistentvolumes"
0000000000000000000000000000000000000000;;		PersistentVolumeClaims     Resource = "persistentvolumeclaims"
0000000000000000000000000000000000000000;;		Pods                       Resource = "pods"
0000000000000000000000000000000000000000;;		PodSecurityPolicies        Resource = "podsecuritypolicies"
0000000000000000000000000000000000000000;;		PodTemplates               Resource = "podtemplates"
0000000000000000000000000000000000000000;;		Replicasets                Resource = "replicasets"
0000000000000000000000000000000000000000;;		ResourceQuotas             Resource = "resourcequotas"
0000000000000000000000000000000000000000;;		CronJobs                   Resource = "cronjobs"
0000000000000000000000000000000000000000;;		Roles                      Resource = "roles"
0000000000000000000000000000000000000000;;		RoleBindings               Resource = "rolebindings"
0000000000000000000000000000000000000000;;		Secrets                    Resource = "secrets"
0000000000000000000000000000000000000000;;		ServiceAccounts            Resource = "serviceaccounts"
0000000000000000000000000000000000000000;;		Services                   Resource = "services"
0000000000000000000000000000000000000000;;		StorageClasses             Resource = "storageclasses"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: This shouldn't be a global variable.
0000000000000000000000000000000000000000;;	var watchCacheSizes map[Resource]int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		watchCacheSizes = make(map[Resource]int)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func InitializeWatchCacheSizes(expectedRAMCapacityMB int) {
0000000000000000000000000000000000000000;;		// This is the heuristics that from memory capacity is trying to infer
0000000000000000000000000000000000000000;;		// the maximum number of nodes in the cluster and set cache sizes based
0000000000000000000000000000000000000000;;		// on that value.
0000000000000000000000000000000000000000;;		// From our documentation, we officially recommend 120GB machines for
0000000000000000000000000000000000000000;;		// 2000 nodes, and we scale from that point. Thus we assume ~60MB of
0000000000000000000000000000000000000000;;		// capacity per node.
0000000000000000000000000000000000000000;;		// TODO: Revisit this heuristics
0000000000000000000000000000000000000000;;		clusterSize := expectedRAMCapacityMB / 60
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We should specify cache size for a given resource only if it
0000000000000000000000000000000000000000;;		// is supposed to have non-default value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TODO: Figure out which resource we should have non-default value.
0000000000000000000000000000000000000000;;		watchCacheSizes[Controllers] = maxInt(5*clusterSize, 100)
0000000000000000000000000000000000000000;;		watchCacheSizes[Endpoints] = maxInt(10*clusterSize, 1000)
0000000000000000000000000000000000000000;;		watchCacheSizes[Nodes] = maxInt(5*clusterSize, 1000)
0000000000000000000000000000000000000000;;		watchCacheSizes[Pods] = maxInt(50*clusterSize, 1000)
0000000000000000000000000000000000000000;;		watchCacheSizes[Services] = maxInt(5*clusterSize, 1000)
0000000000000000000000000000000000000000;;		watchCacheSizes[APIServices] = maxInt(5*clusterSize, 1000)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetWatchCacheSizes(cacheSizes []string) {
0000000000000000000000000000000000000000;;		for _, c := range cacheSizes {
0000000000000000000000000000000000000000;;			tokens := strings.Split(c, "#")
0000000000000000000000000000000000000000;;			if len(tokens) != 2 {
0000000000000000000000000000000000000000;;				glog.Errorf("invalid value of watch cache capabilities: %s", c)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			size, err := strconv.Atoi(tokens[1])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("invalid size of watch cache capabilities: %s", c)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			watchCacheSizes[Resource(strings.ToLower(tokens[0]))] = size
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetWatchCacheSizeByResource returns the configured watch cache size for the given resource.
0000000000000000000000000000000000000000;;	// A nil value means to use a default size, zero means to disable caching.
0000000000000000000000000000000000000000;;	func GetWatchCacheSizeByResource(resource string) (ret *int) { // TODO this should use schema.GroupResource for lookups
0000000000000000000000000000000000000000;;		if value, found := watchCacheSizes[Resource(resource)]; found {
0000000000000000000000000000000000000000;;			return &value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func maxInt(a, b int) int {
0000000000000000000000000000000000000000;;		if a > b {
0000000000000000000000000000000000000000;;			return a
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
