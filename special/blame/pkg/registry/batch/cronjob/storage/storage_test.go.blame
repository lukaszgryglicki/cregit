0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a8b920ce08b4b2d13d67c00e34ee023de43072cd;pkg/registry/scheduledjob/etcd/etcd_test.go[pkg/registry/scheduledjob/etcd/etcd_test.go][pkg/registry/batch/cronjob/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/batch/v2alpha1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: allow for global factory override
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*REST, *StatusREST, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, batch.GroupName)
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{StorageConfig: etcdStorage, Decorator: generic.UndecoratedStorage, DeleteCollectionWorkers: 1}
0000000000000000000000000000000000000000;;		storage, statusStorage := NewREST(restOptions)
0000000000000000000000000000000000000000;;		return storage, statusStorage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewCronJob() *batch.CronJob {
0000000000000000000000000000000000000000;;		return &batch.CronJob{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batch.CronJobSpec{
0000000000000000000000000000000000000000;;				Schedule:          "* * * * ?",
0000000000000000000000000000000000000000;;				ConcurrencyPolicy: batch.AllowConcurrent,
0000000000000000000000000000000000000000;;				JobTemplate: batch.JobTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;								DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;								Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: api.PullIfNotPresent}},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		// scheduled jobs should be tested only when batch/v2alpha1 is enabled
0000000000000000000000000000000000000000;;		if *testapi.Batch.GroupVersion() != v2alpha1.SchemeGroupVersion {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		validCronJob := validNewCronJob()
0000000000000000000000000000000000000000;;		validCronJob.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validCronJob,
0000000000000000000000000000000000000000;;			// invalid (empty spec)
0000000000000000000000000000000000000000;;			&batch.CronJob{
0000000000000000000000000000000000000000;;				Spec: batch.CronJobSpec{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		// scheduled jobs should be tested only when batch/v2alpha1 is enabled
0000000000000000000000000000000000000000;;		if *testapi.Batch.GroupVersion() != v2alpha1.SchemeGroupVersion {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		schedule := "1 1 1 1 ?"
0000000000000000000000000000000000000000;;		test.TestUpdate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validNewCronJob(),
0000000000000000000000000000000000000000;;			// updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*batch.CronJob)
0000000000000000000000000000000000000000;;				object.Spec.Schedule = schedule
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*batch.CronJob)
0000000000000000000000000000000000000000;;				object.Spec.Schedule = "* * *"
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		// scheduled jobs should be tested only when batch/v2alpha1 is enabled
0000000000000000000000000000000000000000;;		if *testapi.Batch.GroupVersion() != v2alpha1.SchemeGroupVersion {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestDelete(validNewCronJob())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		// scheduled jobs should be tested only when batch/v2alpha1 is enabled
0000000000000000000000000000000000000000;;		if *testapi.Batch.GroupVersion() != v2alpha1.SchemeGroupVersion {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validNewCronJob())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		// scheduled jobs should be tested only when batch/v2alpha1 is enabled
0000000000000000000000000000000000000000;;		if *testapi.Batch.GroupVersion() != v2alpha1.SchemeGroupVersion {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestList(validNewCronJob())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		// scheduled jobs should be tested only when batch/v2alpha1 is enabled
0000000000000000000000000000000000000000;;		if *testapi.Batch.GroupVersion() != v2alpha1.SchemeGroupVersion {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storage, _, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validNewCronJob(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"x": "y"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{},
0000000000000000000000000000000000000000;;			// not matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "xyz"},
0000000000000000000000000000000000000000;;				{"name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: test update /status
