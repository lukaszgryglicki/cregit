0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7b29e87890a6f97479da4981ae22f1cfebe0c7a9;pkg/registry/job/strategy.go[pkg/registry/job/strategy.go][pkg/registry/batch/job/strategy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package job
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/names"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch/validation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// jobStrategy implements verification logic for Replication Controllers.
0000000000000000000000000000000000000000;;	type jobStrategy struct {
0000000000000000000000000000000000000000;;		runtime.ObjectTyper
0000000000000000000000000000000000000000;;		names.NameGenerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Strategy is the default logic that applies when creating and updating Replication Controller objects.
0000000000000000000000000000000000000000;;	var Strategy = jobStrategy{api.Scheme, names.SimpleNameGenerator}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultGarbageCollectionPolicy returns Orphan because that was the default
0000000000000000000000000000000000000000;;	// behavior before the server-side garbage collection was implemented.
0000000000000000000000000000000000000000;;	func (jobStrategy) DefaultGarbageCollectionPolicy() rest.GarbageCollectionPolicy {
0000000000000000000000000000000000000000;;		return rest.OrphanDependents
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespaceScoped returns true because all jobs need to be within a namespace.
0000000000000000000000000000000000000000;;	func (jobStrategy) NamespaceScoped() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForCreate clears the status of a job before creation.
0000000000000000000000000000000000000000;;	func (jobStrategy) PrepareForCreate(ctx genericapirequest.Context, obj runtime.Object) {
0000000000000000000000000000000000000000;;		job := obj.(*batch.Job)
0000000000000000000000000000000000000000;;		job.Status = batch.JobStatus{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareForUpdate clears fields that are not allowed to be set by end users on update.
0000000000000000000000000000000000000000;;	func (jobStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newJob := obj.(*batch.Job)
0000000000000000000000000000000000000000;;		oldJob := old.(*batch.Job)
0000000000000000000000000000000000000000;;		newJob.Status = oldJob.Status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate validates a new job.
0000000000000000000000000000000000000000;;	func (jobStrategy) Validate(ctx genericapirequest.Context, obj runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		job := obj.(*batch.Job)
0000000000000000000000000000000000000000;;		// TODO: move UID generation earlier and do this in defaulting logic?
0000000000000000000000000000000000000000;;		if job.Spec.ManualSelector == nil || *job.Spec.ManualSelector == false {
0000000000000000000000000000000000000000;;			generateSelector(job)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return validation.ValidateJob(job)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// generateSelector adds a selector to a job and labels to its template
0000000000000000000000000000000000000000;;	// which can be used to uniquely identify the pods created by that job,
0000000000000000000000000000000000000000;;	// if the user has requested this behavior.
0000000000000000000000000000000000000000;;	func generateSelector(obj *batch.Job) {
0000000000000000000000000000000000000000;;		if obj.Spec.Template.Labels == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Template.Labels = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// The job-name label is unique except in cases that are expected to be
0000000000000000000000000000000000000000;;		// quite uncommon, and is more user friendly than uid.  So, we add it as
0000000000000000000000000000000000000000;;		// a label.
0000000000000000000000000000000000000000;;		_, found := obj.Spec.Template.Labels["job-name"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			// User asked us to not automatically generate a selector and labels,
0000000000000000000000000000000000000000;;			// but set a possibly conflicting value.  If there is a conflict,
0000000000000000000000000000000000000000;;			// we will reject in validation.
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			obj.Spec.Template.Labels["job-name"] = string(obj.ObjectMeta.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// The controller-uid label makes the pods that belong to this job
0000000000000000000000000000000000000000;;		// only match this job.
0000000000000000000000000000000000000000;;		_, found = obj.Spec.Template.Labels["controller-uid"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			// User asked us to automatically generate a selector and labels,
0000000000000000000000000000000000000000;;			// but set a possibly conflicting value.  If there is a conflict,
0000000000000000000000000000000000000000;;			// we will reject in validation.
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			obj.Spec.Template.Labels["controller-uid"] = string(obj.ObjectMeta.UID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Select the controller-uid label.  This is sufficient for uniqueness.
0000000000000000000000000000000000000000;;		if obj.Spec.Selector == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Selector = &metav1.LabelSelector{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Spec.Selector.MatchLabels == nil {
0000000000000000000000000000000000000000;;			obj.Spec.Selector.MatchLabels = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, found := obj.Spec.Selector.MatchLabels["controller-uid"]; !found {
0000000000000000000000000000000000000000;;			obj.Spec.Selector.MatchLabels["controller-uid"] = string(obj.ObjectMeta.UID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If the user specified matchLabel controller-uid=$WRONGUID, then it should fail
0000000000000000000000000000000000000000;;		// in validation, either because the selector does not match the pod template
0000000000000000000000000000000000000000;;		// (controller-uid=$WRONGUID does not match controller-uid=$UID, which we applied
0000000000000000000000000000000000000000;;		// above, or we will reject in validation because the template has the wrong
0000000000000000000000000000000000000000;;		// labels.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: generalize generateSelector so it can work for other controller
0000000000000000000000000000000000000000;;	// objects such as ReplicaSet.  Can use pkg/api/meta to generically get the
0000000000000000000000000000000000000000;;	// UID, but need some way to generically access the selector and pod labels
0000000000000000000000000000000000000000;;	// fields.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Canonicalize normalizes the object after validation.
0000000000000000000000000000000000000000;;	func (jobStrategy) Canonicalize(obj runtime.Object) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (jobStrategy) AllowUnconditionalUpdate() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowCreateOnUpdate is false for jobs; this means a POST is needed to create one.
0000000000000000000000000000000000000000;;	func (jobStrategy) AllowCreateOnUpdate() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateUpdate is the default update validation for an end user.
0000000000000000000000000000000000000000;;	func (jobStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		validationErrorList := validation.ValidateJob(obj.(*batch.Job))
0000000000000000000000000000000000000000;;		updateErrorList := validation.ValidateJobUpdate(obj.(*batch.Job), old.(*batch.Job))
0000000000000000000000000000000000000000;;		return append(validationErrorList, updateErrorList...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type jobStatusStrategy struct {
0000000000000000000000000000000000000000;;		jobStrategy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var StatusStrategy = jobStatusStrategy{Strategy}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (jobStatusStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;		newJob := obj.(*batch.Job)
0000000000000000000000000000000000000000;;		oldJob := old.(*batch.Job)
0000000000000000000000000000000000000000;;		newJob.Spec = oldJob.Spec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (jobStatusStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		return validation.ValidateJobUpdateStatus(obj.(*batch.Job), old.(*batch.Job))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobSelectableFields returns a field set that represents the object for matching purposes.
0000000000000000000000000000000000000000;;	func JobToSelectableFields(job *batch.Job) fields.Set {
0000000000000000000000000000000000000000;;		objectMetaFieldsSet := generic.ObjectMetaFieldsSet(&job.ObjectMeta, true)
0000000000000000000000000000000000000000;;		specificFieldsSet := fields.Set{
0000000000000000000000000000000000000000;;			"status.successful": strconv.Itoa(int(job.Status.Succeeded)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return generic.MergeFieldsSets(objectMetaFieldsSet, specificFieldsSet)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAttrs returns labels and fields of a given object for filtering purposes.
0000000000000000000000000000000000000000;;	func GetAttrs(obj runtime.Object) (labels.Set, fields.Set, bool, error) {
0000000000000000000000000000000000000000;;		job, ok := obj.(*batch.Job)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, nil, false, fmt.Errorf("given object is not a job.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labels.Set(job.ObjectMeta.Labels), JobToSelectableFields(job), job.Initializers != nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchJob is the filter used by the generic etcd backend to route
0000000000000000000000000000000000000000;;	// watch events from etcd to clients of the apiserver only interested in specific
0000000000000000000000000000000000000000;;	// labels/fields.
0000000000000000000000000000000000000000;;	func MatchJob(label labels.Selector, field fields.Selector) storage.SelectionPredicate {
0000000000000000000000000000000000000000;;		return storage.SelectionPredicate{
0000000000000000000000000000000000000000;;			Label:    label,
0000000000000000000000000000000000000000;;			Field:    field,
0000000000000000000000000000000000000000;;			GetAttrs: GetAttrs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
