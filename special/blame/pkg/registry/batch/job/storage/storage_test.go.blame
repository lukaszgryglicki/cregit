0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7b29e87890a6f97479da4981ae22f1cfebe0c7a9;pkg/registry/job/etcd/etcd_test.go[pkg/registry/job/etcd/etcd_test.go][pkg/registry/batch/job/storage/storage_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/registry/registrytest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStorage(t *testing.T) (*JobStorage, *etcdtesting.EtcdTestServer) {
0000000000000000000000000000000000000000;;		etcdStorage, server := registrytest.NewEtcdStorage(t, batch.GroupName)
0000000000000000000000000000000000000000;;		restOptions := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           etcdStorage,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 1,
0000000000000000000000000000000000000000;;			ResourcePrefix:          "jobs",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		jobStorage := NewStorage(restOptions)
0000000000000000000000000000000000000000;;		return &jobStorage, server
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validNewJob() *batch.Job {
0000000000000000000000000000000000000000;;		completions := int32(1)
0000000000000000000000000000000000000000;;		parallelism := int32(1)
0000000000000000000000000000000000000000;;		return &batch.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: "default",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;				Completions: &completions,
0000000000000000000000000000000000000000;;				Parallelism: &parallelism,
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{
0000000000000000000000000000000000000000;;					MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ManualSelector: newBool(true),
0000000000000000000000000000000000000000;;				Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:                     "test",
0000000000000000000000000000000000000000;;								Image:                    "test_image",
0000000000000000000000000000000000000000;;								ImagePullPolicy:          api.PullIfNotPresent,
0000000000000000000000000000000000000000;;								TerminationMessagePolicy: api.TerminationMessageReadFile,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;						DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Job.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Job.Store)
0000000000000000000000000000000000000000;;		validJob := validNewJob()
0000000000000000000000000000000000000000;;		validJob.ObjectMeta = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		test.TestCreate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validJob,
0000000000000000000000000000000000000000;;			// invalid (empty selector)
0000000000000000000000000000000000000000;;			&batch.Job{
0000000000000000000000000000000000000000;;				Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;					Completions: validJob.Spec.Completions,
0000000000000000000000000000000000000000;;					Selector:    &metav1.LabelSelector{},
0000000000000000000000000000000000000000;;					Template:    validJob.Spec.Template,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Job.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Job.Store)
0000000000000000000000000000000000000000;;		two := int32(2)
0000000000000000000000000000000000000000;;		test.TestUpdate(
0000000000000000000000000000000000000000;;			// valid
0000000000000000000000000000000000000000;;			validNewJob(),
0000000000000000000000000000000000000000;;			// updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*batch.Job)
0000000000000000000000000000000000000000;;				object.Spec.Parallelism = &two
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// invalid updateFunc
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*batch.Job)
0000000000000000000000000000000000000000;;				object.Spec.Selector = &metav1.LabelSelector{}
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(obj runtime.Object) runtime.Object {
0000000000000000000000000000000000000000;;				object := obj.(*batch.Job)
0000000000000000000000000000000000000000;;				object.Spec.Completions = &two
0000000000000000000000000000000000000000;;				return object
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Job.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Job.Store)
0000000000000000000000000000000000000000;;		test.TestDelete(validNewJob())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Job.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Job.Store)
0000000000000000000000000000000000000000;;		test.TestGet(validNewJob())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Job.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Job.Store)
0000000000000000000000000000000000000000;;		test.TestList(validNewJob())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Job.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		test := registrytest.New(t, storage.Job.Store)
0000000000000000000000000000000000000000;;		test.TestWatch(
0000000000000000000000000000000000000000;;			validNewJob(),
0000000000000000000000000000000000000000;;			// matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{},
0000000000000000000000000000000000000000;;			// not matching labels
0000000000000000000000000000000000000000;;			[]labels.Set{
0000000000000000000000000000000000000000;;				{"x": "y"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{},
0000000000000000000000000000000000000000;;			// not matching fields
0000000000000000000000000000000000000000;;			[]fields.Set{
0000000000000000000000000000000000000000;;				{"metadata.name": "xyz"},
0000000000000000000000000000000000000000;;				{"name": "foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: test update /status
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBool(val bool) *bool {
0000000000000000000000000000000000000000;;		p := new(bool)
0000000000000000000000000000000000000000;;		*p = val
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCategories(t *testing.T) {
0000000000000000000000000000000000000000;;		storage, server := newStorage(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		defer storage.Job.Store.DestroyFunc()
0000000000000000000000000000000000000000;;		expected := []string{"all"}
0000000000000000000000000000000000000000;;		registrytest.AssertCategories(t, storage.Job, expected)
0000000000000000000000000000000000000000;;	}
