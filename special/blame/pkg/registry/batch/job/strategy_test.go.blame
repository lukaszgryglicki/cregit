0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d52f319d0caa070a612ea25a33052a52d646f76a;pkg/registry/job/strategy_test.go[pkg/registry/job/strategy_test.go][pkg/registry/batch/job/strategy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package job
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBool(a bool) *bool {
0000000000000000000000000000000000000000;;		r := new(bool)
0000000000000000000000000000000000000000;;		*r = a
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJobStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if !Strategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Job must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if Strategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Job should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validSelector := &metav1.LabelSelector{
0000000000000000000000000000000000000000;;			MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodTemplateSpec := api.PodTemplateSpec{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Labels: validSelector.MatchLabels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		job := &batch.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "myjob",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;				Selector:       validSelector,
0000000000000000000000000000000000000000;;				Template:       validPodTemplateSpec,
0000000000000000000000000000000000000000;;				ManualSelector: newBool(true),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: batch.JobStatus{
0000000000000000000000000000000000000000;;				Active: 11,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Strategy.PrepareForCreate(ctx, job)
0000000000000000000000000000000000000000;;		if job.Status.Active != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Job does not allow setting status on create")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := Strategy.Validate(ctx, job)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error validating %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parallelism := int32(10)
0000000000000000000000000000000000000000;;		updatedJob := &batch.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "bar", ResourceVersion: "4"},
0000000000000000000000000000000000000000;;			Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;				Parallelism: &parallelism,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: batch.JobStatus{
0000000000000000000000000000000000000000;;				Active: 11,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// ensure we do not change status
0000000000000000000000000000000000000000;;		job.Status.Active = 10
0000000000000000000000000000000000000000;;		Strategy.PrepareForUpdate(ctx, updatedJob, job)
0000000000000000000000000000000000000000;;		if updatedJob.Status.Active != 10 {
0000000000000000000000000000000000000000;;			t.Errorf("PrepareForUpdate should have preserved prior version status")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs = Strategy.ValidateUpdate(ctx, updatedJob, job)
0000000000000000000000000000000000000000;;		if len(errs) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a validation error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure we correctly implement the interface.
0000000000000000000000000000000000000000;;		// Otherwise a typo could silently change the default.
0000000000000000000000000000000000000000;;		var gcds rest.GarbageCollectionDeleteStrategy = Strategy
0000000000000000000000000000000000000000;;		if got, want := gcds.DefaultGarbageCollectionPolicy(), rest.OrphanDependents; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("DefaultGarbageCollectionPolicy() = %#v, want %#v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJobStrategyWithGeneration(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		theUID := types.UID("1a2b3c4d5e6f7g8h9i0k")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validPodTemplateSpec := api.PodTemplateSpec{
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		job := &batch.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "myjob2",
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				UID:       theUID,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;				Selector: nil,
0000000000000000000000000000000000000000;;				Template: validPodTemplateSpec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Strategy.PrepareForCreate(ctx, job)
0000000000000000000000000000000000000000;;		errs := Strategy.Validate(ctx, job)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error validating %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Validate the stuff that validation should have validated.
0000000000000000000000000000000000000000;;		if job.Spec.Selector == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Selector not generated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedLabels := make(map[string]string)
0000000000000000000000000000000000000000;;		expectedLabels["controller-uid"] = string(theUID)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(job.Spec.Selector.MatchLabels, expectedLabels) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected label selector not generated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if job.Spec.Template.ObjectMeta.Labels == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected template labels not generated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, ok := job.Spec.Template.ObjectMeta.Labels["job-name"]; !ok || v != "myjob2" {
0000000000000000000000000000000000000000;;			t.Errorf("Expected template labels not present")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, ok := job.Spec.Template.ObjectMeta.Labels["controller-uid"]; !ok || v != string(theUID) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected template labels not present: ok: %v, v: %v", ok, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJobStatusStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		if !StatusStrategy.NamespaceScoped() {
0000000000000000000000000000000000000000;;			t.Errorf("Job must be namespace scoped")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if StatusStrategy.AllowCreateOnUpdate() {
0000000000000000000000000000000000000000;;			t.Errorf("Job should not allow create on update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validSelector := &metav1.LabelSelector{
0000000000000000000000000000000000000000;;			MatchLabels: map[string]string{"a": "b"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		validPodTemplateSpec := api.PodTemplateSpec{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Labels: validSelector.MatchLabels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "abc", Image: "image", ImagePullPolicy: "IfNotPresent", TerminationMessagePolicy: api.TerminationMessageReadFile}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldParallelism := int32(10)
0000000000000000000000000000000000000000;;		newParallelism := int32(11)
0000000000000000000000000000000000000000;;		oldJob := &batch.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "myjob",
0000000000000000000000000000000000000000;;				Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				ResourceVersion: "10",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;				Selector:    validSelector,
0000000000000000000000000000000000000000;;				Template:    validPodTemplateSpec,
0000000000000000000000000000000000000000;;				Parallelism: &oldParallelism,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: batch.JobStatus{
0000000000000000000000000000000000000000;;				Active: 11,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newJob := &batch.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "myjob",
0000000000000000000000000000000000000000;;				Namespace:       metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				ResourceVersion: "9",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;				Selector:    validSelector,
0000000000000000000000000000000000000000;;				Template:    validPodTemplateSpec,
0000000000000000000000000000000000000000;;				Parallelism: &newParallelism,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: batch.JobStatus{
0000000000000000000000000000000000000000;;				Active: 12,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StatusStrategy.PrepareForUpdate(ctx, newJob, oldJob)
0000000000000000000000000000000000000000;;		if newJob.Status.Active != 12 {
0000000000000000000000000000000000000000;;			t.Errorf("Job status updates must allow changes to job status")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if *newJob.Spec.Parallelism != 10 {
0000000000000000000000000000000000000000;;			t.Errorf("Job status updates must now allow changes to job spec")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs := StatusStrategy.ValidateUpdate(ctx, newJob, oldJob)
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if newJob.ResourceVersion != "9" {
0000000000000000000000000000000000000000;;			t.Errorf("Incoming resource version on update should not be mutated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectableFieldLabelConversions(t *testing.T) {
0000000000000000000000000000000000000000;;		apitesting.TestSelectableFieldLabelConversionsOfKind(t,
0000000000000000000000000000000000000000;;			testapi.Batch.GroupVersion().String(),
0000000000000000000000000000000000000000;;			"Job",
0000000000000000000000000000000000000000;;			JobToSelectableFields(&batch.Job{}),
0000000000000000000000000000000000000000;;			nil,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
