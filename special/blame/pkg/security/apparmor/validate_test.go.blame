0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3a46d9adb44c3a53dc517d1fa014b4c179400588;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apparmor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetAppArmorFS(t *testing.T) {
0000000000000000000000000000000000000000;;		// This test only passes on systems running AppArmor with the default configuration.
0000000000000000000000000000000000000000;;		// The test should be manually run if modifying the getAppArmorFS function.
0000000000000000000000000000000000000000;;		t.Skip()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const expectedPath = "/sys/kernel/security/apparmor"
0000000000000000000000000000000000000000;;		actualPath, err := getAppArmorFS()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, expectedPath, actualPath)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateHost(t *testing.T) {
0000000000000000000000000000000000000000;;		// This test only passes on systems running AppArmor with the default configuration.
0000000000000000000000000000000000000000;;		// The test should be manually run if modifying the getAppArmorFS function.
0000000000000000000000000000000000000000;;		t.Skip()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.NoError(t, validateHost("docker"))
0000000000000000000000000000000000000000;;		assert.Error(t, validateHost("rkt"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateProfile(t *testing.T) {
0000000000000000000000000000000000000000;;		loadedProfiles := map[string]bool{
0000000000000000000000000000000000000000;;			"docker-default":                                true,
0000000000000000000000000000000000000000;;			"foo-bar":                                       true,
0000000000000000000000000000000000000000;;			"baz":                                           true,
0000000000000000000000000000000000000000;;			"/usr/sbin/ntpd":                                true,
0000000000000000000000000000000000000000;;			"/usr/lib/connman/scripts/dhclient-script":      true,
0000000000000000000000000000000000000000;;			"/usr/lib/NetworkManager/nm-dhcp-client.action": true,
0000000000000000000000000000000000000000;;			"/usr/bin/evince-previewer//sanitized_helper":   true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			profile     string
0000000000000000000000000000000000000000;;			expectValid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", true},
0000000000000000000000000000000000000000;;			{ProfileRuntimeDefault, true},
0000000000000000000000000000000000000000;;			{"baz", false}, // Missing local prefix.
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "/usr/sbin/ntpd", true},
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "foo-bar", true},
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "unloaded", false}, // Not loaded.
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := validateProfile(test.profile, loadedProfiles)
0000000000000000000000000000000000000000;;			if test.expectValid {
0000000000000000000000000000000000000000;;				assert.NoError(t, err, "Profile %s should be valid", test.profile)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.Error(t, err, fmt.Sprintf("Profile %s should not be valid", test.profile))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateBadHost(t *testing.T) {
0000000000000000000000000000000000000000;;		hostErr := errors.New("expected host error")
0000000000000000000000000000000000000000;;		v := &validator{
0000000000000000000000000000000000000000;;			validateHostErr: hostErr,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			profile     string
0000000000000000000000000000000000000000;;			expectValid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", true},
0000000000000000000000000000000000000000;;			{ProfileRuntimeDefault, false},
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "docker-default", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := v.Validate(getPodWithProfile(test.profile))
0000000000000000000000000000000000000000;;			if test.expectValid {
0000000000000000000000000000000000000000;;				assert.NoError(t, err, "Pod with profile %q should be valid", test.profile)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.Equal(t, hostErr, err, "Pod with profile %q should trigger a host validation error", test.profile)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateValidHost(t *testing.T) {
0000000000000000000000000000000000000000;;		v := &validator{
0000000000000000000000000000000000000000;;			appArmorFS: "./testdata/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			profile     string
0000000000000000000000000000000000000000;;			expectValid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", true},
0000000000000000000000000000000000000000;;			{ProfileRuntimeDefault, true},
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "docker-default", true},
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "foo-container", true},
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "/usr/sbin/ntpd", true},
0000000000000000000000000000000000000000;;			{"docker-default", false},
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "foo", false},
0000000000000000000000000000000000000000;;			{ProfileNamePrefix + "", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := v.Validate(getPodWithProfile(test.profile))
0000000000000000000000000000000000000000;;			if test.expectValid {
0000000000000000000000000000000000000000;;				assert.NoError(t, err, "Pod with profile %q should be valid", test.profile)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.Error(t, err, fmt.Sprintf("Pod with profile %q should trigger a validation error", test.profile))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test multi-container pod.
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					ContainerAnnotationKeyPrefix + "init":  ProfileNamePrefix + "foo-container",
0000000000000000000000000000000000000000;;					ContainerAnnotationKeyPrefix + "test1": ProfileRuntimeDefault,
0000000000000000000000000000000000000000;;					ContainerAnnotationKeyPrefix + "test2": ProfileNamePrefix + "docker-default",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				InitContainers: []v1.Container{
0000000000000000000000000000000000000000;;					{Name: "init"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{Name: "test1"},
0000000000000000000000000000000000000000;;					{Name: "test2"},
0000000000000000000000000000000000000000;;					{Name: "no-profile"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.NoError(t, v.Validate(pod), "Multi-container pod should validate")
0000000000000000000000000000000000000000;;		for k, val := range pod.Annotations {
0000000000000000000000000000000000000000;;			pod.Annotations[k] = val + "-bad"
0000000000000000000000000000000000000000;;			assert.Error(t, v.Validate(pod), fmt.Sprintf("Multi-container pod with invalid profile %s:%s", k, pod.Annotations[k]))
0000000000000000000000000000000000000000;;			pod.Annotations[k] = val // Restore.
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseProfileName(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct{ line, expected string }{
0000000000000000000000000000000000000000;;			{"foo://bar/baz (kill)", "foo://bar/baz"},
0000000000000000000000000000000000000000;;			{"foo-bar (enforce)", "foo-bar"},
0000000000000000000000000000000000000000;;			{"/usr/foo/bar/baz (complain)", "/usr/foo/bar/baz"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			name := parseProfileName(test.line)
0000000000000000000000000000000000000000;;			assert.Equal(t, test.expected, name, "Parsing %s", test.line)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPodWithProfile(profile string) *v1.Pod {
0000000000000000000000000000000000000000;;		annotations := map[string]string{
0000000000000000000000000000000000000000;;			ContainerAnnotationKeyPrefix + "test": profile,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if profile == "" {
0000000000000000000000000000000000000000;;			annotations = map[string]string{
0000000000000000000000000000000000000000;;				"foo": "bar",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Annotations: annotations,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
