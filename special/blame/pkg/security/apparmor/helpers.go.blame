0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3a46d9adb44c3a53dc517d1fa014b4c179400588;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apparmor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Move these values into the API package.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// The prefix to an annotation key specifying a container profile.
0000000000000000000000000000000000000000;;		ContainerAnnotationKeyPrefix = "container.apparmor.security.beta.kubernetes.io/"
0000000000000000000000000000000000000000;;		// The annotation key specifying the default AppArmor profile.
0000000000000000000000000000000000000000;;		DefaultProfileAnnotationKey = "apparmor.security.beta.kubernetes.io/defaultProfileName"
0000000000000000000000000000000000000000;;		// The annotation key specifying the allowed AppArmor profiles.
0000000000000000000000000000000000000000;;		AllowedProfilesAnnotationKey = "apparmor.security.beta.kubernetes.io/allowedProfileNames"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The profile specifying the runtime default.
0000000000000000000000000000000000000000;;		ProfileRuntimeDefault = "runtime/default"
0000000000000000000000000000000000000000;;		// The prefix for specifying profiles loaded on the node.
0000000000000000000000000000000000000000;;		ProfileNamePrefix = "localhost/"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Checks whether app armor is required for pod to be run.
0000000000000000000000000000000000000000;;	func isRequired(pod *v1.Pod) bool {
0000000000000000000000000000000000000000;;		for key := range pod.Annotations {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(key, ContainerAnnotationKeyPrefix) {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns the name of the profile to use with the container.
0000000000000000000000000000000000000000;;	func GetProfileName(pod *v1.Pod, containerName string) string {
0000000000000000000000000000000000000000;;		return GetProfileNameFromPodAnnotations(pod.Annotations, containerName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetProfileNameFromPodAnnotations gets the name of the profile to use with container from
0000000000000000000000000000000000000000;;	// pod annotations
0000000000000000000000000000000000000000;;	func GetProfileNameFromPodAnnotations(annotations map[string]string, containerName string) string {
0000000000000000000000000000000000000000;;		return annotations[ContainerAnnotationKeyPrefix+containerName]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sets the name of the profile to use with the container.
0000000000000000000000000000000000000000;;	func SetProfileName(pod *v1.Pod, containerName, profileName string) error {
0000000000000000000000000000000000000000;;		if pod.Annotations == nil {
0000000000000000000000000000000000000000;;			pod.Annotations = map[string]string{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Annotations[ContainerAnnotationKeyPrefix+containerName] = profileName
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sets the name of the profile to use with the container.
0000000000000000000000000000000000000000;;	func SetProfileNameFromPodAnnotations(annotations map[string]string, containerName, profileName string) error {
0000000000000000000000000000000000000000;;		if annotations == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		annotations[ContainerAnnotationKeyPrefix+containerName] = profileName
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
