0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
de98333fcf68b7b07e85168a2b477b745507741f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package seccomp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		withoutSeccomp    = map[string]string{"foo": "bar"}
0000000000000000000000000000000000000000;;		allowAnyNoDefault = map[string]string{
0000000000000000000000000000000000000000;;			AllowedProfilesAnnotationKey: "*",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		allowAnyDefault = map[string]string{
0000000000000000000000000000000000000000;;			AllowedProfilesAnnotationKey: "*",
0000000000000000000000000000000000000000;;			DefaultProfileAnnotationKey:  "foo",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		allowAnyAndSpecificDefault = map[string]string{
0000000000000000000000000000000000000000;;			AllowedProfilesAnnotationKey: "*,bar",
0000000000000000000000000000000000000000;;			DefaultProfileAnnotationKey:  "foo",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		allowSpecific = map[string]string{
0000000000000000000000000000000000000000;;			AllowedProfilesAnnotationKey: "foo",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewStrategy(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			annotations                   map[string]string
0000000000000000000000000000000000000000;;			expectedAllowedProfilesString string
0000000000000000000000000000000000000000;;			expectedAllowAny              bool
0000000000000000000000000000000000000000;;			expectedAllowedProfiles       map[string]bool
0000000000000000000000000000000000000000;;			expectedDefaultProfile        string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no seccomp": {
0000000000000000000000000000000000000000;;				annotations:                   withoutSeccomp,
0000000000000000000000000000000000000000;;				expectedAllowAny:              false,
0000000000000000000000000000000000000000;;				expectedAllowedProfilesString: "",
0000000000000000000000000000000000000000;;				expectedAllowedProfiles:       nil,
0000000000000000000000000000000000000000;;				expectedDefaultProfile:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"allow any, no default": {
0000000000000000000000000000000000000000;;				annotations:                   allowAnyNoDefault,
0000000000000000000000000000000000000000;;				expectedAllowAny:              true,
0000000000000000000000000000000000000000;;				expectedAllowedProfilesString: "*",
0000000000000000000000000000000000000000;;				expectedAllowedProfiles:       map[string]bool{},
0000000000000000000000000000000000000000;;				expectedDefaultProfile:        "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"allow any, default": {
0000000000000000000000000000000000000000;;				annotations:                   allowAnyDefault,
0000000000000000000000000000000000000000;;				expectedAllowAny:              true,
0000000000000000000000000000000000000000;;				expectedAllowedProfilesString: "*",
0000000000000000000000000000000000000000;;				expectedAllowedProfiles:       map[string]bool{},
0000000000000000000000000000000000000000;;				expectedDefaultProfile:        "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"allow any and specific, default": {
0000000000000000000000000000000000000000;;				annotations:                   allowAnyAndSpecificDefault,
0000000000000000000000000000000000000000;;				expectedAllowAny:              true,
0000000000000000000000000000000000000000;;				expectedAllowedProfilesString: "*,bar",
0000000000000000000000000000000000000000;;				expectedAllowedProfiles: map[string]bool{
0000000000000000000000000000000000000000;;					"bar": true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedDefaultProfile: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			strat := NewStrategy(v.annotations)
0000000000000000000000000000000000000000;;			internalStrat, _ := strat.(*strategy)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if internalStrat.allowAnyProfile != v.expectedAllowAny {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected allowAnyProfile to be %t but found %t", k, v.expectedAllowAny, internalStrat.allowAnyProfile)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if internalStrat.allowedProfilesString != v.expectedAllowedProfilesString {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected allowedProfilesString to be %s but found %s", k, v.expectedAllowedProfilesString, internalStrat.allowedProfilesString)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if internalStrat.defaultProfile != v.expectedDefaultProfile {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected defaultProfile to be %s but found %s", k, v.expectedDefaultProfile, internalStrat.defaultProfile)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(v.expectedAllowedProfiles, internalStrat.allowedProfiles) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected expectedAllowedProfiles to be %#v but found %#v", k, v.expectedAllowedProfiles, internalStrat.allowedProfiles)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			pspAnnotations  map[string]string
0000000000000000000000000000000000000000;;			podAnnotations  map[string]string
0000000000000000000000000000000000000000;;			expectedProfile string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no seccomp, no pod annotations": {
0000000000000000000000000000000000000000;;				pspAnnotations:  withoutSeccomp,
0000000000000000000000000000000000000000;;				podAnnotations:  nil,
0000000000000000000000000000000000000000;;				expectedProfile: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no seccomp, pod annotations": {
0000000000000000000000000000000000000000;;				pspAnnotations: withoutSeccomp,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedProfile: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"seccomp with no default, no pod annotations": {
0000000000000000000000000000000000000000;;				pspAnnotations:  allowAnyNoDefault,
0000000000000000000000000000000000000000;;				podAnnotations:  nil,
0000000000000000000000000000000000000000;;				expectedProfile: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"seccomp with no default, pod annotations": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowAnyNoDefault,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedProfile: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"seccomp with default, no pod annotations": {
0000000000000000000000000000000000000000;;				pspAnnotations:  allowAnyDefault,
0000000000000000000000000000000000000000;;				podAnnotations:  nil,
0000000000000000000000000000000000000000;;				expectedProfile: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"seccomp with default, pod annotations": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowAnyDefault,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedProfile: "bar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			strat := NewStrategy(v.pspAnnotations)
0000000000000000000000000000000000000000;;			actual, err := strat.Generate(v.podAnnotations, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s received error during generation %#v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if actual != v.expectedProfile {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected profile %s but received %s", k, v.expectedProfile, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePod(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			pspAnnotations map[string]string
0000000000000000000000000000000000000000;;			podAnnotations map[string]string
0000000000000000000000000000000000000000;;			expectedError  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no pod annotations, required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowSpecific,
0000000000000000000000000000000000000000;;				podAnnotations: nil,
0000000000000000000000000000000000000000;;				expectedError:  "Forbidden:  is not an allowed seccomp profile. Valid values are foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no pod annotations, no required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: withoutSeccomp,
0000000000000000000000000000000000000000;;				podAnnotations: nil,
0000000000000000000000000000000000000000;;				expectedError:  "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid pod annotations, required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowSpecific,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod annotations, required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowSpecific,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "Forbidden: bar is not an allowed seccomp profile. Valid values are foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"pod annotations, no required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: withoutSeccomp,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "Forbidden: seccomp may not be set",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"pod annotations, allow any": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowAnyNoDefault,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no pod annotations, allow any": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowAnyNoDefault,
0000000000000000000000000000000000000000;;				podAnnotations: nil,
0000000000000000000000000000000000000000;;				expectedError:  "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			pod := &api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Annotations: v.podAnnotations,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			strat := NewStrategy(v.pspAnnotations)
0000000000000000000000000000000000000000;;			errs := strat.ValidatePod(pod)
0000000000000000000000000000000000000000;;			if v.expectedError == "" && len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected no errors but received %#v", k, errs.ToAggregate().Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedError != "" && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected error %s but received none", k, v.expectedError)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedError != "" && len(errs) > 1 {
0000000000000000000000000000000000000000;;				t.Errorf("%s received multiple errors: %s", k, errs.ToAggregate().Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedError != "" && len(errs) == 1 && !strings.Contains(errs.ToAggregate().Error(), v.expectedError) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected error %s but received %s", k, v.expectedError, errs.ToAggregate().Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateContainer(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			pspAnnotations map[string]string
0000000000000000000000000000000000000000;;			podAnnotations map[string]string
0000000000000000000000000000000000000000;;			expectedError  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no pod annotations, required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowSpecific,
0000000000000000000000000000000000000000;;				podAnnotations: nil,
0000000000000000000000000000000000000000;;				expectedError:  "Forbidden:  is not an allowed seccomp profile. Valid values are foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no pod annotations, no required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: withoutSeccomp,
0000000000000000000000000000000000000000;;				podAnnotations: nil,
0000000000000000000000000000000000000000;;				expectedError:  "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid pod annotations, required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowSpecific,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompContainerAnnotationKeyPrefix + "container": "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid pod annotations, required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowSpecific,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompContainerAnnotationKeyPrefix + "container": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "Forbidden: bar is not an allowed seccomp profile. Valid values are foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"pod annotations, no required profiles": {
0000000000000000000000000000000000000000;;				pspAnnotations: withoutSeccomp,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompContainerAnnotationKeyPrefix + "container": "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "Forbidden: seccomp may not be set",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"pod annotations, allow any": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowAnyNoDefault,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompContainerAnnotationKeyPrefix + "container": "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no pod annotations, allow any": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowAnyNoDefault,
0000000000000000000000000000000000000000;;				podAnnotations: nil,
0000000000000000000000000000000000000000;;				expectedError:  "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"container inherits valid pod annotation": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowSpecific,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"container inherits invalid pod annotation": {
0000000000000000000000000000000000000000;;				pspAnnotations: allowSpecific,
0000000000000000000000000000000000000000;;				podAnnotations: map[string]string{
0000000000000000000000000000000000000000;;					api.SeccompPodAnnotationKey: "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: "Forbidden: bar is not an allowed seccomp profile. Valid values are foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			pod := &api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Annotations: v.podAnnotations,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			container := &api.Container{
0000000000000000000000000000000000000000;;				Name: "container",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			strat := NewStrategy(v.pspAnnotations)
0000000000000000000000000000000000000000;;			errs := strat.ValidateContainer(pod, container)
0000000000000000000000000000000000000000;;			if v.expectedError == "" && len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected no errors but received %#v", k, errs.ToAggregate().Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedError != "" && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected error %s but received none", k, v.expectedError)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedError != "" && len(errs) > 1 {
0000000000000000000000000000000000000000;;				t.Errorf("%s received multiple errors: %s", k, errs.ToAggregate().Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedError != "" && len(errs) == 1 && !strings.Contains(errs.ToAggregate().Error(), v.expectedError) {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected error %s but received %s", k, v.expectedError, errs.ToAggregate().Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
