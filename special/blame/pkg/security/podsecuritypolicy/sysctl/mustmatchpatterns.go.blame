0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
029bd8c93165b943bef925eceda033e9bdbcc6d8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package sysctl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mustMatchPatterns implements the SysctlsStrategy interface
0000000000000000000000000000000000000000;;	type mustMatchPatterns struct {
0000000000000000000000000000000000000000;;		patterns []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		_ SysctlsStrategy = &mustMatchPatterns{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultSysctlsPatterns = []string{"*"}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMustMatchPatterns creates a new mustMatchPatterns strategy that will provide validation.
0000000000000000000000000000000000000000;;	// Passing nil means the default pattern, passing an empty list means to disallow all sysctls.
0000000000000000000000000000000000000000;;	func NewMustMatchPatterns(patterns []string) SysctlsStrategy {
0000000000000000000000000000000000000000;;		if patterns == nil {
0000000000000000000000000000000000000000;;			patterns = defaultSysctlsPatterns
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &mustMatchPatterns{
0000000000000000000000000000000000000000;;			patterns: patterns,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate ensures that the specified values fall within the range of the strategy.
0000000000000000000000000000000000000000;;	func (s *mustMatchPatterns) Validate(pod *api.Pod) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;		allErrs = append(allErrs, s.validateAnnotation(pod, api.SysctlsPodAnnotationKey)...)
0000000000000000000000000000000000000000;;		allErrs = append(allErrs, s.validateAnnotation(pod, api.UnsafeSysctlsPodAnnotationKey)...)
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *mustMatchPatterns) validateAnnotation(pod *api.Pod, key string) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fieldPath := field.NewPath("pod", "metadata", "annotations").Key(key)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sysctls, err := helper.SysctlsFromPodAnnotation(pod.Annotations[key])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(fieldPath, pod.Annotations[key], err.Error()))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(sysctls) > 0 {
0000000000000000000000000000000000000000;;			if len(s.patterns) == 0 {
0000000000000000000000000000000000000000;;				allErrs = append(allErrs, field.Invalid(fieldPath, pod.Annotations[key], "sysctls are not allowed"))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for i, sysctl := range sysctls {
0000000000000000000000000000000000000000;;					allErrs = append(allErrs, s.ValidateSysctl(sysctl.Name, fieldPath.Index(i))...)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *mustMatchPatterns) ValidateSysctl(sysctlName string, fldPath *field.Path) field.ErrorList {
0000000000000000000000000000000000000000;;		for _, s := range s.patterns {
0000000000000000000000000000000000000000;;			if s[len(s)-1] == '*' {
0000000000000000000000000000000000000000;;				prefix := s[:len(s)-1]
0000000000000000000000000000000000000000;;				if strings.HasPrefix(sysctlName, string(prefix)) {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if sysctlName == s {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return field.ErrorList{field.Forbidden(fldPath, fmt.Sprintf("sysctl %q is not allowed", sysctlName))}
0000000000000000000000000000000000000000;;	}
