0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
029bd8c93165b943bef925eceda033e9bdbcc6d8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package sysctl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			patterns   []string
0000000000000000000000000000000000000000;;			allowed    []string
0000000000000000000000000000000000000000;;			disallowed []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// no container requests
0000000000000000000000000000000000000000;;			"nil": {
0000000000000000000000000000000000000000;;				patterns: nil,
0000000000000000000000000000000000000000;;				allowed:  []string{"foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				patterns:   []string{},
0000000000000000000000000000000000000000;;				disallowed: []string{"foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"without wildcard": {
0000000000000000000000000000000000000000;;				patterns:   []string{"a", "a.b"},
0000000000000000000000000000000000000000;;				allowed:    []string{"a", "a.b"},
0000000000000000000000000000000000000000;;				disallowed: []string{"b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"with catch-all wildcard": {
0000000000000000000000000000000000000000;;				patterns: []string{"*"},
0000000000000000000000000000000000000000;;				allowed:  []string{"a", "a.b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"with catch-all wildcard and non-wildcard": {
0000000000000000000000000000000000000000;;				patterns: []string{"a.b.c", "*"},
0000000000000000000000000000000000000000;;				allowed:  []string{"a", "a.b", "a.b.c", "b"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"without catch-all wildcard": {
0000000000000000000000000000000000000000;;				patterns:   []string{"a.*", "b.*", "c.d.e", "d.e.f.*"},
0000000000000000000000000000000000000000;;				allowed:    []string{"a.b", "b.c", "c.d.e", "d.e.f.g.h"},
0000000000000000000000000000000000000000;;				disallowed: []string{"a", "b", "c", "c.d", "d.e", "d.e.f"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			strategy := NewMustMatchPatterns(v.patterns)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pod := &api.Pod{}
0000000000000000000000000000000000000000;;			errs := strategy.Validate(pod)
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected validaton errors for empty sysctls: %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sysctls := []api.Sysctl{}
0000000000000000000000000000000000000000;;			for _, s := range v.allowed {
0000000000000000000000000000000000000000;;				sysctls = append(sysctls, api.Sysctl{
0000000000000000000000000000000000000000;;					Name:  s,
0000000000000000000000000000000000000000;;					Value: "dummy",
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			testAllowed := func(key string, category string) {
0000000000000000000000000000000000000000;;				pod.Annotations = map[string]string{
0000000000000000000000000000000000000000;;					key: helper.PodAnnotationsFromSysctls(sysctls),
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				errs = strategy.Validate(pod)
0000000000000000000000000000000000000000;;				if len(errs) != 0 {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected validaton errors for %s sysctls: %v", k, category, errs)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			testDisallowed := func(key string, category string) {
0000000000000000000000000000000000000000;;				for _, s := range v.disallowed {
0000000000000000000000000000000000000000;;					pod.Annotations = map[string]string{
0000000000000000000000000000000000000000;;						key: helper.PodAnnotationsFromSysctls([]api.Sysctl{{Name: s, Value: "dummy"}}),
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					errs = strategy.Validate(pod)
0000000000000000000000000000000000000000;;					if len(errs) == 0 {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected error for %s sysctl %q", k, category, s)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			testAllowed(api.SysctlsPodAnnotationKey, "safe")
0000000000000000000000000000000000000000;;			testAllowed(api.UnsafeSysctlsPodAnnotationKey, "unsafe")
0000000000000000000000000000000000000000;;			testDisallowed(api.SysctlsPodAnnotationKey, "safe")
0000000000000000000000000000000000000000;;			testDisallowed(api.UnsafeSysctlsPodAnnotationKey, "unsafe")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
