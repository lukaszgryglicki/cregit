0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
35fbd54b35b58b3ac95a0f0410ab62b8905746c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package podsecuritypolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/podsecuritypolicy/apparmor"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/podsecuritypolicy/capabilities"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/podsecuritypolicy/group"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/podsecuritypolicy/seccomp"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/podsecuritypolicy/selinux"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/podsecuritypolicy/sysctl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/podsecuritypolicy/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type simpleStrategyFactory struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ StrategyFactory = &simpleStrategyFactory{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSimpleStrategyFactory() StrategyFactory {
0000000000000000000000000000000000000000;;		return &simpleStrategyFactory{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *simpleStrategyFactory) CreateStrategies(psp *extensions.PodSecurityPolicy, namespace string) (*ProviderStrategies, error) {
0000000000000000000000000000000000000000;;		errs := []error{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		userStrat, err := createUserStrategy(&psp.Spec.RunAsUser)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		seLinuxStrat, err := createSELinuxStrategy(&psp.Spec.SELinux)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		appArmorStrat, err := createAppArmorStrategy(psp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		seccompStrat, err := createSeccompStrategy(psp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsGroupStrat, err := createFSGroupStrategy(&psp.Spec.FSGroup)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		supGroupStrat, err := createSupplementalGroupStrategy(&psp.Spec.SupplementalGroups)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capStrat, err := createCapabilitiesStrategy(psp.Spec.DefaultAddCapabilities, psp.Spec.RequiredDropCapabilities, psp.Spec.AllowedCapabilities)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errs = append(errs, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var unsafeSysctls []string
0000000000000000000000000000000000000000;;		if ann, found := psp.Annotations[extensions.SysctlsPodSecurityPolicyAnnotationKey]; found {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			unsafeSysctls, err = extensions.SysctlsFromPodSecurityPolicyAnnotation(ann)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errs = append(errs, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sysctlsStrat := createSysctlsStrategy(unsafeSysctls)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(errs) > 0 {
0000000000000000000000000000000000000000;;			return nil, errors.NewAggregate(errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		strategies := &ProviderStrategies{
0000000000000000000000000000000000000000;;			RunAsUserStrategy:         userStrat,
0000000000000000000000000000000000000000;;			SELinuxStrategy:           seLinuxStrat,
0000000000000000000000000000000000000000;;			AppArmorStrategy:          appArmorStrat,
0000000000000000000000000000000000000000;;			FSGroupStrategy:           fsGroupStrat,
0000000000000000000000000000000000000000;;			SupplementalGroupStrategy: supGroupStrat,
0000000000000000000000000000000000000000;;			CapabilitiesStrategy:      capStrat,
0000000000000000000000000000000000000000;;			SeccompStrategy:           seccompStrat,
0000000000000000000000000000000000000000;;			SysctlsStrategy:           sysctlsStrat,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return strategies, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createUserStrategy creates a new user strategy.
0000000000000000000000000000000000000000;;	func createUserStrategy(opts *extensions.RunAsUserStrategyOptions) (user.RunAsUserStrategy, error) {
0000000000000000000000000000000000000000;;		switch opts.Rule {
0000000000000000000000000000000000000000;;		case extensions.RunAsUserStrategyMustRunAs:
0000000000000000000000000000000000000000;;			return user.NewMustRunAs(opts)
0000000000000000000000000000000000000000;;		case extensions.RunAsUserStrategyMustRunAsNonRoot:
0000000000000000000000000000000000000000;;			return user.NewRunAsNonRoot(opts)
0000000000000000000000000000000000000000;;		case extensions.RunAsUserStrategyRunAsAny:
0000000000000000000000000000000000000000;;			return user.NewRunAsAny(opts)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Unrecognized RunAsUser strategy type %s", opts.Rule)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createSELinuxStrategy creates a new selinux strategy.
0000000000000000000000000000000000000000;;	func createSELinuxStrategy(opts *extensions.SELinuxStrategyOptions) (selinux.SELinuxStrategy, error) {
0000000000000000000000000000000000000000;;		switch opts.Rule {
0000000000000000000000000000000000000000;;		case extensions.SELinuxStrategyMustRunAs:
0000000000000000000000000000000000000000;;			return selinux.NewMustRunAs(opts)
0000000000000000000000000000000000000000;;		case extensions.SELinuxStrategyRunAsAny:
0000000000000000000000000000000000000000;;			return selinux.NewRunAsAny(opts)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Unrecognized SELinuxContext strategy type %s", opts.Rule)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createAppArmorStrategy creates a new AppArmor strategy.
0000000000000000000000000000000000000000;;	func createAppArmorStrategy(psp *extensions.PodSecurityPolicy) (apparmor.Strategy, error) {
0000000000000000000000000000000000000000;;		return apparmor.NewStrategy(psp.Annotations), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createSeccompStrategy creates a new seccomp strategy.
0000000000000000000000000000000000000000;;	func createSeccompStrategy(psp *extensions.PodSecurityPolicy) (seccomp.Strategy, error) {
0000000000000000000000000000000000000000;;		return seccomp.NewStrategy(psp.Annotations), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createFSGroupStrategy creates a new fsgroup strategy
0000000000000000000000000000000000000000;;	func createFSGroupStrategy(opts *extensions.FSGroupStrategyOptions) (group.GroupStrategy, error) {
0000000000000000000000000000000000000000;;		switch opts.Rule {
0000000000000000000000000000000000000000;;		case extensions.FSGroupStrategyRunAsAny:
0000000000000000000000000000000000000000;;			return group.NewRunAsAny()
0000000000000000000000000000000000000000;;		case extensions.FSGroupStrategyMustRunAs:
0000000000000000000000000000000000000000;;			return group.NewMustRunAs(opts.Ranges, fsGroupField)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Unrecognized FSGroup strategy type %s", opts.Rule)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createSupplementalGroupStrategy creates a new supplemental group strategy
0000000000000000000000000000000000000000;;	func createSupplementalGroupStrategy(opts *extensions.SupplementalGroupsStrategyOptions) (group.GroupStrategy, error) {
0000000000000000000000000000000000000000;;		switch opts.Rule {
0000000000000000000000000000000000000000;;		case extensions.SupplementalGroupsStrategyRunAsAny:
0000000000000000000000000000000000000000;;			return group.NewRunAsAny()
0000000000000000000000000000000000000000;;		case extensions.SupplementalGroupsStrategyMustRunAs:
0000000000000000000000000000000000000000;;			return group.NewMustRunAs(opts.Ranges, supplementalGroupsField)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Unrecognized SupplementalGroups strategy type %s", opts.Rule)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createCapabilitiesStrategy creates a new capabilities strategy.
0000000000000000000000000000000000000000;;	func createCapabilitiesStrategy(defaultAddCaps, requiredDropCaps, allowedCaps []api.Capability) (capabilities.Strategy, error) {
0000000000000000000000000000000000000000;;		return capabilities.NewDefaultCapabilities(defaultAddCaps, requiredDropCaps, allowedCaps)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createSysctlsStrategy creates a new unsafe sysctls strategy.
0000000000000000000000000000000000000000;;	func createSysctlsStrategy(sysctlsPatterns []string) sysctl.SysctlsStrategy {
0000000000000000000000000000000000000000;;		return sysctl.NewMustMatchPatterns(sysctlsPatterns)
0000000000000000000000000000000000000000;;	}
