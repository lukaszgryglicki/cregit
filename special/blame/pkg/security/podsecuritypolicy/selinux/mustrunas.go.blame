0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
35fbd54b35b58b3ac95a0f0410ab62b8905746c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package selinux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mustRunAs struct {
0000000000000000000000000000000000000000;;		opts *extensions.SELinuxStrategyOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ SELinuxStrategy = &mustRunAs{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMustRunAs(options *extensions.SELinuxStrategyOptions) (SELinuxStrategy, error) {
0000000000000000000000000000000000000000;;		if options == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("MustRunAs requires SELinuxContextStrategyOptions")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if options.SELinuxOptions == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("MustRunAs requires SELinuxOptions")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &mustRunAs{
0000000000000000000000000000000000000000;;			opts: options,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate creates the SELinuxOptions based on constraint rules.
0000000000000000000000000000000000000000;;	func (s *mustRunAs) Generate(pod *api.Pod, container *api.Container) (*api.SELinuxOptions, error) {
0000000000000000000000000000000000000000;;		return s.opts.SELinuxOptions, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate ensures that the specified values fall within the range of the strategy.
0000000000000000000000000000000000000000;;	func (s *mustRunAs) Validate(pod *api.Pod, container *api.Container) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if container.SecurityContext == nil {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("unable to validate nil security context for %s", container.Name)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(field.NewPath("securityContext"), container.SecurityContext, detail))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if container.SecurityContext.SELinuxOptions == nil {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("unable to validate nil seLinuxOptions for %s", container.Name)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(field.NewPath("seLinuxOptions"), container.SecurityContext.SELinuxOptions, detail))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		seLinuxOptionsPath := field.NewPath("seLinuxOptions")
0000000000000000000000000000000000000000;;		seLinux := container.SecurityContext.SELinuxOptions
0000000000000000000000000000000000000000;;		if seLinux.Level != s.opts.SELinuxOptions.Level {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("seLinuxOptions.level on %s does not match required level.  Found %s, wanted %s", container.Name, seLinux.Level, s.opts.SELinuxOptions.Level)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(seLinuxOptionsPath.Child("level"), seLinux.Level, detail))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if seLinux.Role != s.opts.SELinuxOptions.Role {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("seLinuxOptions.role on %s does not match required role.  Found %s, wanted %s", container.Name, seLinux.Role, s.opts.SELinuxOptions.Role)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(seLinuxOptionsPath.Child("role"), seLinux.Role, detail))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if seLinux.Type != s.opts.SELinuxOptions.Type {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("seLinuxOptions.type on %s does not match required type.  Found %s, wanted %s", container.Name, seLinux.Type, s.opts.SELinuxOptions.Type)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(seLinuxOptionsPath.Child("type"), seLinux.Type, detail))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if seLinux.User != s.opts.SELinuxOptions.User {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("seLinuxOptions.user on %s does not match required user.  Found %s, wanted %s", container.Name, seLinux.User, s.opts.SELinuxOptions.User)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(seLinuxOptionsPath.Child("user"), seLinux.User, detail))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
