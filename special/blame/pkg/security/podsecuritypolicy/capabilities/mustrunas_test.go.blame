0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
35fbd54b35b58b3ac95a0f0410ab62b8905746c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package capabilities
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateAdds(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			defaultAddCaps []api.Capability
0000000000000000000000000000000000000000;;			containerCaps  *api.Capabilities
0000000000000000000000000000000000000000;;			expectedCaps   *api.Capabilities
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no required, no container requests": {},
0000000000000000000000000000000000000000;;			"required, no container requests": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required, container requests add required": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multiple required, container requests add required": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo", "bar", "baz"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"bar", "baz", "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required, container requests add non-required": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"bar", "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"generation dedupes": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo", "foo", "foo", "foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo", "foo", "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"generation is case sensitive - will not dedupe": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"FOO"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"FOO", "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			container := &api.Container{
0000000000000000000000000000000000000000;;				SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;					Capabilities: v.containerCaps,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			strategy, err := NewDefaultCapabilities(v.defaultAddCaps, nil, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s failed: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			generatedCaps, err := strategy.Generate(nil, container)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s failed generating: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedCaps == nil && generatedCaps != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected nil caps to be generated but got %v", k, generatedCaps)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(v.expectedCaps, generatedCaps) {
0000000000000000000000000000000000000000;;				t.Errorf("%s did not generate correctly.  Expected: %#v, Actual: %#v", k, v.expectedCaps, generatedCaps)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateDrops(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			defaultAddCaps   []api.Capability
0000000000000000000000000000000000000000;;			requiredDropCaps []api.Capability
0000000000000000000000000000000000000000;;			containerCaps    *api.Capabilities
0000000000000000000000000000000000000000;;			expectedCaps     *api.Capabilities
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no required, no container requests": {
0000000000000000000000000000000000000000;;				expectedCaps: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required drops are defaulted": {
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required drops are defaulted when making container requests": {
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"foo", "bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"bar", "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"can drop a required add": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"can drop non-required add": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add:  []api.Capability{"foo"},
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"defaulting adds and drops, dropping a required add": {
0000000000000000000000000000000000000000;;				defaultAddCaps:   []api.Capability{"foo", "bar", "baz"},
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"abc"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add:  []api.Capability{"bar", "baz"},
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"abc", "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"generation dedupes": {
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"bar", "bar", "bar", "bar"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"bar", "bar", "bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"generation is case sensitive - will not dedupe": {
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"BAR"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"BAR", "bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			container := &api.Container{
0000000000000000000000000000000000000000;;				SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;					Capabilities: v.containerCaps,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			strategy, err := NewDefaultCapabilities(v.defaultAddCaps, v.requiredDropCaps, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s failed: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			generatedCaps, err := strategy.Generate(nil, container)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s failed generating: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedCaps == nil && generatedCaps != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s expected nil caps to be generated but got %#v", k, generatedCaps)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(v.expectedCaps, generatedCaps) {
0000000000000000000000000000000000000000;;				t.Errorf("%s did not generate correctly.  Expected: %#v, Actual: %#v", k, v.expectedCaps, generatedCaps)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateAdds(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			defaultAddCaps []api.Capability
0000000000000000000000000000000000000000;;			allowedCaps    []api.Capability
0000000000000000000000000000000000000000;;			containerCaps  *api.Capabilities
0000000000000000000000000000000000000000;;			expectedError  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// no container requests
0000000000000000000000000000000000000000;;			"no required, no allowed, no container requests": {},
0000000000000000000000000000000000000000;;			"no required, allowed, no container requests": {
0000000000000000000000000000000000000000;;				allowedCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required, no allowed, no container requests": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				expectedError:  `capabilities: Invalid value: "null": required capabilities are not set on the securityContext`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// container requests match required
0000000000000000000000000000000000000000;;			"required, no allowed, container requests valid": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required, no allowed, container requests invalid": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: `capabilities.add: Invalid value: "bar": capability may not be added`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// container requests match allowed
0000000000000000000000000000000000000000;;			"no required, allowed, container requests valid": {
0000000000000000000000000000000000000000;;				allowedCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no required, allowed, container requests invalid": {
0000000000000000000000000000000000000000;;				allowedCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: `capabilities.add: Invalid value: "bar": capability may not be added`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// required and allowed
0000000000000000000000000000000000000000;;			"required, allowed, container requests valid required": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				allowedCaps:    []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required, allowed, container requests valid allowed": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				allowedCaps:    []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required, allowed, container requests invalid": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				allowedCaps:    []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"baz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: `capabilities.add: Invalid value: "baz": capability may not be added`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"validation is case sensitive": {
0000000000000000000000000000000000000000;;				defaultAddCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Add: []api.Capability{"FOO"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: `capabilities.add: Invalid value: "FOO": capability may not be added`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			container := &api.Container{
0000000000000000000000000000000000000000;;				SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;					Capabilities: v.containerCaps,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			strategy, err := NewDefaultCapabilities(v.defaultAddCaps, nil, v.allowedCaps)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s failed: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errs := strategy.Validate(nil, container)
0000000000000000000000000000000000000000;;			if v.expectedError == "" && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s should have passed but had errors %v", k, errs)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedError != "" && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s should have failed but received no errors", k)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) == 1 && errs[0].Error() != v.expectedError {
0000000000000000000000000000000000000000;;				t.Errorf("%s should have failed with %v but received %v", k, v.expectedError, errs[0])
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) > 1 {
0000000000000000000000000000000000000000;;				t.Errorf("%s should have failed with at most one error, but received %v: %v", k, len(errs), errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDrops(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			requiredDropCaps []api.Capability
0000000000000000000000000000000000000000;;			containerCaps    *api.Capabilities
0000000000000000000000000000000000000000;;			expectedError    string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// no container requests
0000000000000000000000000000000000000000;;			"no required, no container requests": {},
0000000000000000000000000000000000000000;;			"required, no container requests": {
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				expectedError:    `capabilities: Invalid value: "null": required capabilities are not set on the securityContext`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// container requests match required
0000000000000000000000000000000000000000;;			"required, container requests valid": {
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"required, container requests invalid": {
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: `capabilities.drop: Invalid value: []api.Capability{"bar"}: foo is required to be dropped but was not found`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"validation is case sensitive": {
0000000000000000000000000000000000000000;;				requiredDropCaps: []api.Capability{"foo"},
0000000000000000000000000000000000000000;;				containerCaps: &api.Capabilities{
0000000000000000000000000000000000000000;;					Drop: []api.Capability{"FOO"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedError: `capabilities.drop: Invalid value: []api.Capability{"FOO"}: foo is required to be dropped but was not found`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			container := &api.Container{
0000000000000000000000000000000000000000;;				SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;					Capabilities: v.containerCaps,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			strategy, err := NewDefaultCapabilities(nil, v.requiredDropCaps, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s failed: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errs := strategy.Validate(nil, container)
0000000000000000000000000000000000000000;;			if v.expectedError == "" && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s should have passed but had errors %v", k, errs)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.expectedError != "" && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s should have failed but received no errors", k)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) == 1 && errs[0].Error() != v.expectedError {
0000000000000000000000000000000000000000;;				t.Errorf("%s should have failed with %v but received %v", k, v.expectedError, errs[0])
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) > 1 {
0000000000000000000000000000000000000000;;				t.Errorf("%s should have failed with at most one error, but received %v: %v", k, len(errs), errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
