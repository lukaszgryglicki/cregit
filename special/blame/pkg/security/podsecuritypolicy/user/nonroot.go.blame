0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
35fbd54b35b58b3ac95a0f0410ab62b8905746c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package user
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type nonRoot struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ RunAsUserStrategy = &nonRoot{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRunAsNonRoot(options *extensions.RunAsUserStrategyOptions) (RunAsUserStrategy, error) {
0000000000000000000000000000000000000000;;		return &nonRoot{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate creates the uid based on policy rules.  This strategy does return a UID.  It assumes
0000000000000000000000000000000000000000;;	// that the user will specify a UID or the container image specifies a UID.
0000000000000000000000000000000000000000;;	func (s *nonRoot) Generate(pod *api.Pod, container *api.Container) (*int64, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate ensures that the specified values fall within the range of the strategy.  Validation
0000000000000000000000000000000000000000;;	// of this will pass if either the UID is not set, assuming that the image will provided the UID
0000000000000000000000000000000000000000;;	// or if the UID is set it is not root.  Validation will fail if RunAsNonRoot is set to false.
0000000000000000000000000000000000000000;;	// In order to work properly this assumes that the kubelet performs a final check on runAsUser
0000000000000000000000000000000000000000;;	// or the image UID when runAsUser is nil.
0000000000000000000000000000000000000000;;	func (s *nonRoot) Validate(pod *api.Pod, container *api.Container) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;		securityContextPath := field.NewPath("securityContext")
0000000000000000000000000000000000000000;;		if container.SecurityContext == nil {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("unable to validate nil security context for container %s", container.Name)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(securityContextPath, container.SecurityContext, detail))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if container.SecurityContext.RunAsNonRoot != nil && *container.SecurityContext.RunAsNonRoot == false {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("RunAsNonRoot must be true for container %s", container.Name)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(securityContextPath.Child("runAsNonRoot"), *container.SecurityContext.RunAsNonRoot, detail))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if container.SecurityContext.RunAsUser != nil && *container.SecurityContext.RunAsUser == 0 {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("running with the root UID is forbidden by the pod security policy for container %s", container.Name)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(securityContextPath.Child("runAsUser"), *container.SecurityContext.RunAsUser, detail))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
