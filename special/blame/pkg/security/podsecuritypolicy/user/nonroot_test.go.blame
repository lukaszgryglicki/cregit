0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
35fbd54b35b58b3ac95a0f0410ab62b8905746c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package user
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNonRootOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := NewRunAsNonRoot(nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error initializing NewRunAsNonRoot %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = NewRunAsNonRoot(&extensions.RunAsUserStrategyOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing NewRunAsNonRoot %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNonRootGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		s, err := NewRunAsNonRoot(&extensions.RunAsUserStrategyOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error initializing NewRunAsNonRoot %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uid, err := s.Generate(nil, nil)
0000000000000000000000000000000000000000;;		if uid != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected nil uid but got %d", *uid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error generating uid %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNonRootValidate(t *testing.T) {
0000000000000000000000000000000000000000;;		goodUID := int64(1)
0000000000000000000000000000000000000000;;		badUID := int64(0)
0000000000000000000000000000000000000000;;		untrue := false
0000000000000000000000000000000000000000;;		unfalse := true
0000000000000000000000000000000000000000;;		s, err := NewRunAsNonRoot(&extensions.RunAsUserStrategyOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error initializing NewMustRunAs %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			container   *api.Container
0000000000000000000000000000000000000000;;			expectedErr bool
0000000000000000000000000000000000000000;;			msg         string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: &api.Container{
0000000000000000000000000000000000000000;;					SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;						RunAsUser: &badUID,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: true,
0000000000000000000000000000000000000000;;				msg:         "in test case %d, expected errors from root uid but got none: %v",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: &api.Container{
0000000000000000000000000000000000000000;;					SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;						RunAsUser: &goodUID,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: false,
0000000000000000000000000000000000000000;;				msg:         "in test case %d, expected no errors from non-root uid but got %v",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: &api.Container{
0000000000000000000000000000000000000000;;					SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;						RunAsNonRoot: &untrue,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: true,
0000000000000000000000000000000000000000;;				msg:         "in test case %d, expected errors from RunAsNonRoot but got none: %v",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: &api.Container{
0000000000000000000000000000000000000000;;					SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;						RunAsNonRoot: &unfalse,
0000000000000000000000000000000000000000;;						RunAsUser:    &goodUID,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: false,
0000000000000000000000000000000000000000;;				msg:         "in test case %d, expected no errors from non-root uid but got %v",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: &api.Container{
0000000000000000000000000000000000000000;;					SecurityContext: &api.SecurityContext{
0000000000000000000000000000000000000000;;						RunAsNonRoot: &unfalse,
0000000000000000000000000000000000000000;;						RunAsUser:    &badUID,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: true,
0000000000000000000000000000000000000000;;				msg:         "in test case %d, expected errors from root uid but got %v",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range tests {
0000000000000000000000000000000000000000;;			errs := s.Validate(nil, tc.container)
0000000000000000000000000000000000000000;;			if (len(errs) == 0) == tc.expectedErr {
0000000000000000000000000000000000000000;;				t.Errorf(tc.msg, i, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
