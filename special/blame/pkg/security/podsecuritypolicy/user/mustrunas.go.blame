0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
35fbd54b35b58b3ac95a0f0410ab62b8905746c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package user
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		psputil "k8s.io/kubernetes/pkg/security/podsecuritypolicy/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mustRunAs implements the RunAsUserStrategy interface
0000000000000000000000000000000000000000;;	type mustRunAs struct {
0000000000000000000000000000000000000000;;		opts *extensions.RunAsUserStrategyOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMustRunAs provides a strategy that requires the container to run as a specific UID in a range.
0000000000000000000000000000000000000000;;	func NewMustRunAs(options *extensions.RunAsUserStrategyOptions) (RunAsUserStrategy, error) {
0000000000000000000000000000000000000000;;		if options == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("MustRunAsRange requires run as user options")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(options.Ranges) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("MustRunAsRange requires at least one range")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &mustRunAs{
0000000000000000000000000000000000000000;;			opts: options,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate creates the uid based on policy rules.  MustRunAs returns the first range's Min.
0000000000000000000000000000000000000000;;	func (s *mustRunAs) Generate(pod *api.Pod, container *api.Container) (*int64, error) {
0000000000000000000000000000000000000000;;		return &s.opts.Ranges[0].Min, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate ensures that the specified values fall within the range of the strategy.
0000000000000000000000000000000000000000;;	func (s *mustRunAs) Validate(pod *api.Pod, container *api.Container) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		securityContextPath := field.NewPath("securityContext")
0000000000000000000000000000000000000000;;		if container.SecurityContext == nil {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("unable to validate nil security context for container %s", container.Name)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(securityContextPath, container.SecurityContext, detail))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if container.SecurityContext.RunAsUser == nil {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("unable to validate nil RunAsUser for container %s", container.Name)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(securityContextPath.Child("runAsUser"), container.SecurityContext.RunAsUser, detail))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !s.isValidUID(*container.SecurityContext.RunAsUser) {
0000000000000000000000000000000000000000;;			detail := fmt.Sprintf("UID on container %s does not match required range.  Found %d, allowed: %v",
0000000000000000000000000000000000000000;;				container.Name,
0000000000000000000000000000000000000000;;				*container.SecurityContext.RunAsUser,
0000000000000000000000000000000000000000;;				s.opts.Ranges)
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(securityContextPath.Child("runAsUser"), *container.SecurityContext.RunAsUser, detail))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *mustRunAs) isValidUID(id int64) bool {
0000000000000000000000000000000000000000;;		for _, rng := range s.opts.Ranges {
0000000000000000000000000000000000000000;;			if psputil.UserFallsInRange(id, rng) {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
