0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
35fbd54b35b58b3ac95a0f0410ab62b8905746c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package group
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		psputil "k8s.io/kubernetes/pkg/security/podsecuritypolicy/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mustRunAs implements the GroupStrategy interface
0000000000000000000000000000000000000000;;	type mustRunAs struct {
0000000000000000000000000000000000000000;;		ranges []extensions.GroupIDRange
0000000000000000000000000000000000000000;;		field  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ GroupStrategy = &mustRunAs{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMustRunAs provides a new MustRunAs strategy based on ranges.
0000000000000000000000000000000000000000;;	func NewMustRunAs(ranges []extensions.GroupIDRange, field string) (GroupStrategy, error) {
0000000000000000000000000000000000000000;;		if len(ranges) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("ranges must be supplied for MustRunAs")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &mustRunAs{
0000000000000000000000000000000000000000;;			ranges: ranges,
0000000000000000000000000000000000000000;;			field:  field,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate creates the group based on policy rules.  By default this returns the first group of the
0000000000000000000000000000000000000000;;	// first range (min val).
0000000000000000000000000000000000000000;;	func (s *mustRunAs) Generate(pod *api.Pod) ([]int64, error) {
0000000000000000000000000000000000000000;;		return []int64{s.ranges[0].Min}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate a single value to be applied.  This is used for FSGroup.  This strategy will return
0000000000000000000000000000000000000000;;	// the first group of the first range (min val).
0000000000000000000000000000000000000000;;	func (s *mustRunAs) GenerateSingle(pod *api.Pod) (*int64, error) {
0000000000000000000000000000000000000000;;		single := new(int64)
0000000000000000000000000000000000000000;;		*single = s.ranges[0].Min
0000000000000000000000000000000000000000;;		return single, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate ensures that the specified values fall within the range of the strategy.
0000000000000000000000000000000000000000;;	// Groups are passed in here to allow this strategy to support multiple group fields (fsgroup and
0000000000000000000000000000000000000000;;	// supplemental groups).
0000000000000000000000000000000000000000;;	func (s *mustRunAs) Validate(pod *api.Pod, groups []int64) field.ErrorList {
0000000000000000000000000000000000000000;;		allErrs := field.ErrorList{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if pod.Spec.SecurityContext == nil {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(field.NewPath("securityContext"), pod.Spec.SecurityContext, "unable to validate nil security context"))
0000000000000000000000000000000000000000;;			return allErrs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(groups) == 0 && len(s.ranges) > 0 {
0000000000000000000000000000000000000000;;			allErrs = append(allErrs, field.Invalid(field.NewPath(s.field), groups, "unable to validate empty groups against required ranges"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, group := range groups {
0000000000000000000000000000000000000000;;			if !s.isGroupValid(group) {
0000000000000000000000000000000000000000;;				detail := fmt.Sprintf("%d is not an allowed group", group)
0000000000000000000000000000000000000000;;				allErrs = append(allErrs, field.Invalid(field.NewPath(s.field), groups, detail))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allErrs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *mustRunAs) isGroupValid(group int64) bool {
0000000000000000000000000000000000000000;;		for _, rng := range s.ranges {
0000000000000000000000000000000000000000;;			if psputil.GroupFallsInRange(group, rng) {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
