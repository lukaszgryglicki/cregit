0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
35fbd54b35b58b3ac95a0f0410ab62b8905746c3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package group
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMustRunAsOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			ranges []extensions.GroupIDRange
0000000000000000000000000000000000000000;;			pass   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"ranges": {
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pass: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			_, err := NewMustRunAs(v.ranges, "")
0000000000000000000000000000000000000000;;			if v.pass && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("error creating strategy for %s: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !v.pass && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected error for %s but got none", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			ranges   []extensions.GroupIDRange
0000000000000000000000000000000000000000;;			expected []int64
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"multi value": {
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 2},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []int64{1},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"single value": {
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []int64{1},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multi range": {
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 1},
0000000000000000000000000000000000000000;;					{Min: 2, Max: 500},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []int64{1},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			s, err := NewMustRunAs(v.ranges, "")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("error creating strategy for %s: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			actual, err := s.Generate(nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error for %s: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(actual) != len(v.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected generated values.  Expected %v, got %v", v.expected, actual)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(actual) > 0 && len(v.expected) > 0 {
0000000000000000000000000000000000000000;;				if actual[0] != v.expected[0] {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected generated values.  Expected %v, got %v", v.expected, actual)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			single, err := s.GenerateSingle(nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error for %s: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if single == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected nil generated value for %s: %v", k, single)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if *single != v.expected[0] {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected generated single value.  Expected %v, got %v", v.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidate(t *testing.T) {
0000000000000000000000000000000000000000;;		validPod := func() *api.Pod {
0000000000000000000000000000000000000000;;			return &api.Pod{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					SecurityContext: &api.PodSecurityContext{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			ranges []extensions.GroupIDRange
0000000000000000000000000000000000000000;;			pod    *api.Pod
0000000000000000000000000000000000000000;;			groups []int64
0000000000000000000000000000000000000000;;			pass   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"nil security context": {
0000000000000000000000000000000000000000;;				pod: &api.Pod{},
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty groups": {
0000000000000000000000000000000000000000;;				pod: validPod(),
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"not in range": {
0000000000000000000000000000000000000000;;				pod:    validPod(),
0000000000000000000000000000000000000000;;				groups: []int64{5},
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 3},
0000000000000000000000000000000000000000;;					{Min: 4, Max: 4},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"in range 1": {
0000000000000000000000000000000000000000;;				pod:    validPod(),
0000000000000000000000000000000000000000;;				groups: []int64{2},
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pass: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"in range boundry min": {
0000000000000000000000000000000000000000;;				pod:    validPod(),
0000000000000000000000000000000000000000;;				groups: []int64{1},
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pass: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"in range boundry max": {
0000000000000000000000000000000000000000;;				pod:    validPod(),
0000000000000000000000000000000000000000;;				groups: []int64{3},
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 1, Max: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pass: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"singular range": {
0000000000000000000000000000000000000000;;				pod:    validPod(),
0000000000000000000000000000000000000000;;				groups: []int64{4},
0000000000000000000000000000000000000000;;				ranges: []extensions.GroupIDRange{
0000000000000000000000000000000000000000;;					{Min: 4, Max: 4},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pass: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, v := range tests {
0000000000000000000000000000000000000000;;			s, err := NewMustRunAs(v.ranges, "")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("error creating strategy for %s: %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errs := s.Validate(v.pod, v.groups)
0000000000000000000000000000000000000000;;			if v.pass && len(errs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected errors for %s: %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !v.pass && len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected no errors for %s but got: %v", k, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
