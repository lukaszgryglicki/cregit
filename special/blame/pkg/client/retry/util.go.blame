0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6ac6dc4c1cd8db912a22f5dabec14b7f857ed4dc;pkg/client/unversioned/util.go[pkg/client/unversioned/util.go][pkg/client/retry/util.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package retry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultRetry is the recommended retry for a conflict where multiple clients
0000000000000000000000000000000000000000;;	// are making changes to the same resource.
0000000000000000000000000000000000000000;;	var DefaultRetry = wait.Backoff{
0000000000000000000000000000000000000000;;		Steps:    5,
0000000000000000000000000000000000000000;;		Duration: 10 * time.Millisecond,
0000000000000000000000000000000000000000;;		Factor:   1.0,
0000000000000000000000000000000000000000;;		Jitter:   0.1,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultBackoff is the recommended backoff for a conflict where a client
0000000000000000000000000000000000000000;;	// may be attempting to make an unrelated modification to a resource under
0000000000000000000000000000000000000000;;	// active management by one or more controllers.
0000000000000000000000000000000000000000;;	var DefaultBackoff = wait.Backoff{
0000000000000000000000000000000000000000;;		Steps:    4,
0000000000000000000000000000000000000000;;		Duration: 10 * time.Millisecond,
0000000000000000000000000000000000000000;;		Factor:   5.0,
0000000000000000000000000000000000000000;;		Jitter:   0.1,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RetryConflict executes the provided function repeatedly, retrying if the server returns a conflicting
0000000000000000000000000000000000000000;;	// write. Callers should preserve previous executions if they wish to retry changes. It performs an
0000000000000000000000000000000000000000;;	// exponential backoff.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     var pod *api.Pod
0000000000000000000000000000000000000000;;	//     err := RetryOnConflict(DefaultBackoff, func() (err error) {
0000000000000000000000000000000000000000;;	//       pod, err = c.Pods("mynamespace").UpdateStatus(podStatus)
0000000000000000000000000000000000000000;;	//       return
0000000000000000000000000000000000000000;;	//     })
0000000000000000000000000000000000000000;;	//     if err != nil {
0000000000000000000000000000000000000000;;	//       // may be conflict if max retries were hit
0000000000000000000000000000000000000000;;	//       return err
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//     ...
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODO: Make Backoff an interface?
0000000000000000000000000000000000000000;;	func RetryOnConflict(backoff wait.Backoff, fn func() error) error {
0000000000000000000000000000000000000000;;		var lastConflictErr error
0000000000000000000000000000000000000000;;		err := wait.ExponentialBackoff(backoff, func() (bool, error) {
0000000000000000000000000000000000000000;;			err := fn()
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil:
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			case errors.IsConflict(err):
0000000000000000000000000000000000000000;;				lastConflictErr = err
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err == wait.ErrWaitTimeout {
0000000000000000000000000000000000000000;;			err = lastConflictErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
