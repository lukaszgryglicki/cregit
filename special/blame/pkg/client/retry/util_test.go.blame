0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e30513ff0cea7203a6f5be10c0c84c717a45a048;pkg/client/unversioned/conditions_test.go[pkg/client/unversioned/conditions_test.go][pkg/client/retry/util_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package retry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRetryOnConflict(t *testing.T) {
0000000000000000000000000000000000000000;;		opts := wait.Backoff{Factor: 1.0, Steps: 3}
0000000000000000000000000000000000000000;;		conflictErr := errors.NewConflict(schema.GroupResource{Resource: "test"}, "other", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// never returns
0000000000000000000000000000000000000000;;		err := RetryOnConflict(opts, func() error {
0000000000000000000000000000000000000000;;			return conflictErr
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != conflictErr {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// returns immediately
0000000000000000000000000000000000000000;;		i := 0
0000000000000000000000000000000000000000;;		err = RetryOnConflict(opts, func() error {
0000000000000000000000000000000000000000;;			i++
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil || i != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// returns immediately on error
0000000000000000000000000000000000000000;;		testErr := fmt.Errorf("some other error")
0000000000000000000000000000000000000000;;		err = RetryOnConflict(opts, func() error {
0000000000000000000000000000000000000000;;			return testErr
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != testErr {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// keeps retrying
0000000000000000000000000000000000000000;;		i = 0
0000000000000000000000000000000000000000;;		err = RetryOnConflict(opts, func() error {
0000000000000000000000000000000000000000;;			if i < 2 {
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;				return errors.NewConflict(schema.GroupResource{Resource: "test"}, "other", nil)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil || i != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
