0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c775e92676b98b0dd823f186d8afbf056931e9ad;pkg/client/testing/core/fake_test.go[pkg/client/testing/core/fake_test.go][pkg/client/tests/fake_client_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		clientsetfake "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_ "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeClientSetFiltering(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := clientsetfake.NewSimpleClientset(
0000000000000000000000000000000000000000;;			testPod("nsA", "pod-1"),
0000000000000000000000000000000000000000;;			testPod("nsB", "pod-2"),
0000000000000000000000000000000000000000;;			testSA("nsA", "sa-1"),
0000000000000000000000000000000000000000;;			testSA("nsA", "sa-2"),
0000000000000000000000000000000000000000;;			testSA("nsB", "sa-1"),
0000000000000000000000000000000000000000;;			testSA("nsB", "sa-2"),
0000000000000000000000000000000000000000;;			testSA("nsB", "sa-3"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		saList1, err := tc.Core().ServiceAccounts("nsA").List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("ServiceAccounts.List: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if actual, expected := len(saList1.Items), 2; expected != actual {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected %d records to match, got %d", expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, sa := range saList1.Items {
0000000000000000000000000000000000000000;;			if sa.Namespace != "nsA" {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected namespace %q; got %q", "nsA", sa.Namespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		saList2, err := tc.Core().ServiceAccounts("nsB").List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("ServiceAccounts.List: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if actual, expected := len(saList2.Items), 3; expected != actual {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected %d records to match, got %d", expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, sa := range saList2.Items {
0000000000000000000000000000000000000000;;			if sa.Namespace != "nsB" {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected namespace %q; got %q", "nsA", sa.Namespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod1, err := tc.Core().Pods("nsA").Get("pod-1", metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Pods.Get: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod1 == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected to find pod nsA/pod-1 but it wasn't found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod1.Namespace != "nsA" || pod1.Name != "pod-1" {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected to find pod nsA/pod-1t, got %s/%s", pod1.Namespace, pod1.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wrongPod, err := tc.Core().Pods("nsB").Get("pod-1", metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Pods.Get: expected nsB/pod-1 not to match, but it matched %s/%s", wrongPod.Namespace, wrongPod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allPods, err := tc.Core().Pods(metav1.NamespaceAll).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Pods.List: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if actual, expected := len(allPods.Items), 2; expected != actual {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected %d pods to match, got %d", expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allSAs, err := tc.Core().ServiceAccounts(metav1.NamespaceAll).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("ServiceAccounts.List: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if actual, expected := len(allSAs.Items), 5; expected != actual {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected %d service accounts to match, got %d", expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeClientsetInheritsNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := clientsetfake.NewSimpleClientset(
0000000000000000000000000000000000000000;;			testNamespace("nsA"),
0000000000000000000000000000000000000000;;			testPod("nsA", "pod-1"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := tc.Core().Namespaces().Create(testNamespace("nsB"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Namespaces.Create: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allNS, err := tc.Core().Namespaces().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Namespaces.List: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if actual, expected := len(allNS.Items), 2; expected != actual {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected %d namespaces to match, got %d", expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = tc.Core().Pods("nsB").Create(testPod("", "pod-1"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Pods.Create nsB/pod-1: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podB1, err := tc.Core().Pods("nsB").Get("pod-1", metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Pods.Get nsB/pod-1: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if podB1 == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected to find pod nsB/pod-1 but it wasn't found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if podB1.Namespace != "nsB" || podB1.Name != "pod-1" {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected to find pod nsB/pod-1t, got %s/%s", podB1.Namespace, podB1.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = tc.Core().Pods("nsA").Create(testPod("", "pod-1"))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected Pods.Create to fail with already exists error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = tc.Core().Pods("nsA").Update(testPod("", "pod-1"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Pods.Update nsA/pod-1: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = tc.Core().Pods("nsA").Create(testPod("nsB", "pod-2"))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected Pods.Create to fail with bad request from namespace mismtach")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err.Error() != `request namespace does not match object namespace, request: "nsA" object: "nsB"` {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected Pods.Create error to provide object and request namespaces, got %q", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = tc.Core().Pods("nsA").Update(testPod("", "pod-3"))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected Pods.Update nsA/pod-3 to fail with not found error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testSA(ns, name string) *api.ServiceAccount {
0000000000000000000000000000000000000000;;		return &api.ServiceAccount{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: ns,
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPod(ns, name string) *api.Pod {
0000000000000000000000000000000000000000;;		return &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: ns,
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testNamespace(ns string) *api.Namespace {
0000000000000000000000000000000000000000;;		return &api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: ns,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
