0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
90e753b7d893977fcb7246ab3277eaab11726cf4;pkg/client/informers/informers_generated/generic.go[pkg/client/informers/informers_generated/generic.go][pkg/client/informers/informers_generated/externalversions/generic.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by informer-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package externalversions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		v1alpha1 "k8s.io/api/admissionregistration/v1alpha1"
0000000000000000000000000000000000000000;;		v1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		v1 "k8s.io/api/autoscaling/v1"
0000000000000000000000000000000000000000;;		v2alpha1 "k8s.io/api/autoscaling/v2alpha1"
0000000000000000000000000000000000000000;;		batch_v1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		batch_v2alpha1 "k8s.io/api/batch/v2alpha1"
0000000000000000000000000000000000000000;;		certificates_v1beta1 "k8s.io/api/certificates/v1beta1"
0000000000000000000000000000000000000000;;		core_v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions_v1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		networking_v1 "k8s.io/api/networking/v1"
0000000000000000000000000000000000000000;;		policy_v1beta1 "k8s.io/api/policy/v1beta1"
0000000000000000000000000000000000000000;;		rbac_v1alpha1 "k8s.io/api/rbac/v1alpha1"
0000000000000000000000000000000000000000;;		rbac_v1beta1 "k8s.io/api/rbac/v1beta1"
0000000000000000000000000000000000000000;;		settings_v1alpha1 "k8s.io/api/settings/v1alpha1"
0000000000000000000000000000000000000000;;		storage_v1 "k8s.io/api/storage/v1"
0000000000000000000000000000000000000000;;		storage_v1beta1 "k8s.io/api/storage/v1beta1"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		cache "k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
0000000000000000000000000000000000000000;;	// sharedInformers based on type
0000000000000000000000000000000000000000;;	type GenericInformer interface {
0000000000000000000000000000000000000000;;		Informer() cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		Lister() cache.GenericLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type genericInformer struct {
0000000000000000000000000000000000000000;;		informer cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		resource schema.GroupResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Informer returns the SharedIndexInformer.
0000000000000000000000000000000000000000;;	func (f *genericInformer) Informer() cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		return f.informer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lister returns the GenericLister.
0000000000000000000000000000000000000000;;	func (f *genericInformer) Lister() cache.GenericLister {
0000000000000000000000000000000000000000;;		return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ForResource gives generic access to a shared informer of the matching type
0000000000000000000000000000000000000000;;	// TODO extend this to unknown resources with a client pool
0000000000000000000000000000000000000000;;	func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
0000000000000000000000000000000000000000;;		switch resource {
0000000000000000000000000000000000000000;;		// Group=Admissionregistration, Version=V1alpha1
0000000000000000000000000000000000000000;;		case v1alpha1.SchemeGroupVersion.WithResource("externaladmissionhookconfigurations"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Admissionregistration().V1alpha1().ExternalAdmissionHookConfigurations().Informer()}, nil
0000000000000000000000000000000000000000;;		case v1alpha1.SchemeGroupVersion.WithResource("initializerconfigurations"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Admissionregistration().V1alpha1().InitializerConfigurations().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Apps, Version=V1beta1
0000000000000000000000000000000000000000;;		case v1beta1.SchemeGroupVersion.WithResource("controllerrevisions"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Apps().V1beta1().ControllerRevisions().Informer()}, nil
0000000000000000000000000000000000000000;;		case v1beta1.SchemeGroupVersion.WithResource("deployments"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Apps().V1beta1().Deployments().Informer()}, nil
0000000000000000000000000000000000000000;;		case v1beta1.SchemeGroupVersion.WithResource("statefulsets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Apps().V1beta1().StatefulSets().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Autoscaling, Version=V1
0000000000000000000000000000000000000000;;		case v1.SchemeGroupVersion.WithResource("horizontalpodautoscalers"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscaling().V1().HorizontalPodAutoscalers().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Autoscaling, Version=V2alpha1
0000000000000000000000000000000000000000;;		case v2alpha1.SchemeGroupVersion.WithResource("horizontalpodautoscalers"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscaling().V2alpha1().HorizontalPodAutoscalers().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Batch, Version=V1
0000000000000000000000000000000000000000;;		case batch_v1.SchemeGroupVersion.WithResource("jobs"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().V1().Jobs().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Batch, Version=V2alpha1
0000000000000000000000000000000000000000;;		case batch_v2alpha1.SchemeGroupVersion.WithResource("cronjobs"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().V2alpha1().CronJobs().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Certificates, Version=V1beta1
0000000000000000000000000000000000000000;;		case certificates_v1beta1.SchemeGroupVersion.WithResource("certificatesigningrequests"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Certificates().V1beta1().CertificateSigningRequests().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Core, Version=V1
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("componentstatuses"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().ComponentStatuses().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("configmaps"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().ConfigMaps().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("endpoints"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().Endpoints().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("events"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().Events().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("limitranges"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().LimitRanges().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("namespaces"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().Namespaces().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("nodes"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().Nodes().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("persistentvolumes"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().PersistentVolumes().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("persistentvolumeclaims"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().PersistentVolumeClaims().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("pods"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().Pods().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("podtemplates"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().PodTemplates().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("replicationcontrollers"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().ReplicationControllers().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("resourcequotas"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().ResourceQuotas().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("secrets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().Secrets().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("services"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().Services().Informer()}, nil
0000000000000000000000000000000000000000;;		case core_v1.SchemeGroupVersion.WithResource("serviceaccounts"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().ServiceAccounts().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Extensions, Version=V1beta1
0000000000000000000000000000000000000000;;		case extensions_v1beta1.SchemeGroupVersion.WithResource("daemonsets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().V1beta1().DaemonSets().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions_v1beta1.SchemeGroupVersion.WithResource("deployments"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().V1beta1().Deployments().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions_v1beta1.SchemeGroupVersion.WithResource("ingresses"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().V1beta1().Ingresses().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions_v1beta1.SchemeGroupVersion.WithResource("podsecuritypolicies"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().V1beta1().PodSecurityPolicies().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions_v1beta1.SchemeGroupVersion.WithResource("replicasets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().V1beta1().ReplicaSets().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions_v1beta1.SchemeGroupVersion.WithResource("thirdpartyresources"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().V1beta1().ThirdPartyResources().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Networking, Version=V1
0000000000000000000000000000000000000000;;		case networking_v1.SchemeGroupVersion.WithResource("networkpolicies"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1().NetworkPolicies().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Policy, Version=V1beta1
0000000000000000000000000000000000000000;;		case policy_v1beta1.SchemeGroupVersion.WithResource("poddisruptionbudgets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Policy().V1beta1().PodDisruptionBudgets().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Rbac, Version=V1alpha1
0000000000000000000000000000000000000000;;		case rbac_v1alpha1.SchemeGroupVersion.WithResource("clusterroles"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1alpha1().ClusterRoles().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac_v1alpha1.SchemeGroupVersion.WithResource("clusterrolebindings"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1alpha1().ClusterRoleBindings().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac_v1alpha1.SchemeGroupVersion.WithResource("roles"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1alpha1().Roles().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac_v1alpha1.SchemeGroupVersion.WithResource("rolebindings"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1alpha1().RoleBindings().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Rbac, Version=V1beta1
0000000000000000000000000000000000000000;;		case rbac_v1beta1.SchemeGroupVersion.WithResource("clusterroles"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1beta1().ClusterRoles().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac_v1beta1.SchemeGroupVersion.WithResource("clusterrolebindings"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1beta1().ClusterRoleBindings().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac_v1beta1.SchemeGroupVersion.WithResource("roles"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1beta1().Roles().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac_v1beta1.SchemeGroupVersion.WithResource("rolebindings"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1beta1().RoleBindings().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Settings, Version=V1alpha1
0000000000000000000000000000000000000000;;		case settings_v1alpha1.SchemeGroupVersion.WithResource("podpresets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Settings().V1alpha1().PodPresets().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Storage, Version=V1
0000000000000000000000000000000000000000;;		case storage_v1.SchemeGroupVersion.WithResource("storageclasses"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1().StorageClasses().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Storage, Version=V1beta1
0000000000000000000000000000000000000000;;		case storage_v1beta1.SchemeGroupVersion.WithResource("storageclasses"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().V1beta1().StorageClasses().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("no informer found for %v", resource)
0000000000000000000000000000000000000000;;	}
