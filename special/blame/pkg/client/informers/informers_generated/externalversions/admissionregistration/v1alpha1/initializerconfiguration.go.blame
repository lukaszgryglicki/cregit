0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f0464e4a9de5487aec310abdedf3c27d38756cdc;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by informer-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		admissionregistration_v1alpha1 "k8s.io/api/admissionregistration/v1alpha1"
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		runtime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		cache "k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
0000000000000000000000000000000000000000;;		internalinterfaces "k8s.io/kubernetes/pkg/client/informers/informers_generated/externalversions/internalinterfaces"
0000000000000000000000000000000000000000;;		v1alpha1 "k8s.io/kubernetes/pkg/client/listers/admissionregistration/v1alpha1"
0000000000000000000000000000000000000000;;		time "time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InitializerConfigurationInformer provides access to a shared informer and lister for
0000000000000000000000000000000000000000;;	// InitializerConfigurations.
0000000000000000000000000000000000000000;;	type InitializerConfigurationInformer interface {
0000000000000000000000000000000000000000;;		Informer() cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		Lister() v1alpha1.InitializerConfigurationLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type initializerConfigurationInformer struct {
0000000000000000000000000000000000000000;;		factory internalinterfaces.SharedInformerFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInitializerConfigurationInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		sharedIndexInformer := cache.NewSharedIndexInformer(
0000000000000000000000000000000000000000;;			&cache.ListWatch{
0000000000000000000000000000000000000000;;				ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;					return client.AdmissionregistrationV1alpha1().InitializerConfigurations().List(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;					return client.AdmissionregistrationV1alpha1().InitializerConfigurations().Watch(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&admissionregistration_v1alpha1.InitializerConfiguration{},
0000000000000000000000000000000000000000;;			resyncPeriod,
0000000000000000000000000000000000000000;;			cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sharedIndexInformer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *initializerConfigurationInformer) Informer() cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		return f.factory.InformerFor(&admissionregistration_v1alpha1.InitializerConfiguration{}, newInitializerConfigurationInformer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *initializerConfigurationInformer) Lister() v1alpha1.InitializerConfigurationLister {
0000000000000000000000000000000000000000;;		return v1alpha1.NewInitializerConfigurationLister(f.Informer().GetIndexer())
0000000000000000000000000000000000000000;;	}
