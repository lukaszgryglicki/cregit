0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
90e753b7d893977fcb7246ab3277eaab11726cf4;pkg/client/informers/informers_generated/extensions/internalversion/ingress.go[pkg/client/informers/informers_generated/extensions/internalversion/ingress.go][pkg/client/informers/informers_generated/internalversion/extensions/internalversion/ingress.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by informer-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		runtime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		cache "k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		extensions "k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		internalclientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		internalinterfaces "k8s.io/kubernetes/pkg/client/informers/informers_generated/internalversion/internalinterfaces"
0000000000000000000000000000000000000000;;		internalversion "k8s.io/kubernetes/pkg/client/listers/extensions/internalversion"
0000000000000000000000000000000000000000;;		time "time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IngressInformer provides access to a shared informer and lister for
0000000000000000000000000000000000000000;;	// Ingresses.
0000000000000000000000000000000000000000;;	type IngressInformer interface {
0000000000000000000000000000000000000000;;		Informer() cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		Lister() internalversion.IngressLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ingressInformer struct {
0000000000000000000000000000000000000000;;		factory internalinterfaces.SharedInformerFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIngressInformer(client internalclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		sharedIndexInformer := cache.NewSharedIndexInformer(
0000000000000000000000000000000000000000;;			&cache.ListWatch{
0000000000000000000000000000000000000000;;				ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;					return client.Extensions().Ingresses(v1.NamespaceAll).List(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;					return client.Extensions().Ingresses(v1.NamespaceAll).Watch(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&extensions.Ingress{},
0000000000000000000000000000000000000000;;			resyncPeriod,
0000000000000000000000000000000000000000;;			cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sharedIndexInformer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *ingressInformer) Informer() cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		return f.factory.InformerFor(&extensions.Ingress{}, newIngressInformer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *ingressInformer) Lister() internalversion.IngressLister {
0000000000000000000000000000000000000000;;		return internalversion.NewIngressLister(f.Informer().GetIndexer())
0000000000000000000000000000000000000000;;	}
