0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
90e753b7d893977fcb7246ab3277eaab11726cf4;pkg/client/informers/informers_generated/generic.go[pkg/client/informers/informers_generated/generic.go][pkg/client/informers/informers_generated/internalversion/generic.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by informer-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		cache "k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		api "k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		admissionregistration "k8s.io/kubernetes/pkg/apis/admissionregistration"
0000000000000000000000000000000000000000;;		apps "k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;		autoscaling "k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;		batch "k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		certificates "k8s.io/kubernetes/pkg/apis/certificates"
0000000000000000000000000000000000000000;;		extensions "k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		networking "k8s.io/kubernetes/pkg/apis/networking"
0000000000000000000000000000000000000000;;		policy "k8s.io/kubernetes/pkg/apis/policy"
0000000000000000000000000000000000000000;;		rbac "k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		settings "k8s.io/kubernetes/pkg/apis/settings"
0000000000000000000000000000000000000000;;		storage "k8s.io/kubernetes/pkg/apis/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
0000000000000000000000000000000000000000;;	// sharedInformers based on type
0000000000000000000000000000000000000000;;	type GenericInformer interface {
0000000000000000000000000000000000000000;;		Informer() cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		Lister() cache.GenericLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type genericInformer struct {
0000000000000000000000000000000000000000;;		informer cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		resource schema.GroupResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Informer returns the SharedIndexInformer.
0000000000000000000000000000000000000000;;	func (f *genericInformer) Informer() cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		return f.informer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lister returns the GenericLister.
0000000000000000000000000000000000000000;;	func (f *genericInformer) Lister() cache.GenericLister {
0000000000000000000000000000000000000000;;		return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ForResource gives generic access to a shared informer of the matching type
0000000000000000000000000000000000000000;;	// TODO extend this to unknown resources with a client pool
0000000000000000000000000000000000000000;;	func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
0000000000000000000000000000000000000000;;		switch resource {
0000000000000000000000000000000000000000;;		// Group=Admissionregistration, Version=InternalVersion
0000000000000000000000000000000000000000;;		case admissionregistration.SchemeGroupVersion.WithResource("externaladmissionhookconfigurations"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Admissionregistration().InternalVersion().ExternalAdmissionHookConfigurations().Informer()}, nil
0000000000000000000000000000000000000000;;		case admissionregistration.SchemeGroupVersion.WithResource("initializerconfigurations"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Admissionregistration().InternalVersion().InitializerConfigurations().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Apps, Version=InternalVersion
0000000000000000000000000000000000000000;;		case apps.SchemeGroupVersion.WithResource("controllerrevisions"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Apps().InternalVersion().ControllerRevisions().Informer()}, nil
0000000000000000000000000000000000000000;;		case apps.SchemeGroupVersion.WithResource("statefulsets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Apps().InternalVersion().StatefulSets().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Autoscaling, Version=InternalVersion
0000000000000000000000000000000000000000;;		case autoscaling.SchemeGroupVersion.WithResource("horizontalpodautoscalers"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscaling().InternalVersion().HorizontalPodAutoscalers().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Batch, Version=InternalVersion
0000000000000000000000000000000000000000;;		case batch.SchemeGroupVersion.WithResource("cronjobs"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().InternalVersion().CronJobs().Informer()}, nil
0000000000000000000000000000000000000000;;		case batch.SchemeGroupVersion.WithResource("jobs"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().InternalVersion().Jobs().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Certificates, Version=InternalVersion
0000000000000000000000000000000000000000;;		case certificates.SchemeGroupVersion.WithResource("certificatesigningrequests"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Certificates().InternalVersion().CertificateSigningRequests().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Core, Version=InternalVersion
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("componentstatuses"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().ComponentStatuses().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("configmaps"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().ConfigMaps().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("endpoints"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().Endpoints().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("events"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().Events().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("limitranges"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().LimitRanges().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("namespaces"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().Namespaces().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("nodes"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().Nodes().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("persistentvolumes"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().PersistentVolumes().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("persistentvolumeclaims"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().PersistentVolumeClaims().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("pods"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().Pods().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("podtemplates"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().PodTemplates().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("replicationcontrollers"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().ReplicationControllers().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("resourcequotas"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().ResourceQuotas().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("secrets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().Secrets().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("services"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().Services().Informer()}, nil
0000000000000000000000000000000000000000;;		case api.SchemeGroupVersion.WithResource("serviceaccounts"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Core().InternalVersion().ServiceAccounts().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Extensions, Version=InternalVersion
0000000000000000000000000000000000000000;;		case extensions.SchemeGroupVersion.WithResource("daemonsets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().InternalVersion().DaemonSets().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions.SchemeGroupVersion.WithResource("deployments"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().InternalVersion().Deployments().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions.SchemeGroupVersion.WithResource("ingresses"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().InternalVersion().Ingresses().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions.SchemeGroupVersion.WithResource("networkpolicies"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().InternalVersion().NetworkPolicies().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions.SchemeGroupVersion.WithResource("podsecuritypolicies"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().InternalVersion().PodSecurityPolicies().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions.SchemeGroupVersion.WithResource("replicasets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().InternalVersion().ReplicaSets().Informer()}, nil
0000000000000000000000000000000000000000;;		case extensions.SchemeGroupVersion.WithResource("thirdpartyresources"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Extensions().InternalVersion().ThirdPartyResources().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Networking, Version=InternalVersion
0000000000000000000000000000000000000000;;		case networking.SchemeGroupVersion.WithResource("networkpolicies"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().InternalVersion().NetworkPolicies().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Policy, Version=InternalVersion
0000000000000000000000000000000000000000;;		case policy.SchemeGroupVersion.WithResource("poddisruptionbudgets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Policy().InternalVersion().PodDisruptionBudgets().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Rbac, Version=InternalVersion
0000000000000000000000000000000000000000;;		case rbac.SchemeGroupVersion.WithResource("clusterroles"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().InternalVersion().ClusterRoles().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac.SchemeGroupVersion.WithResource("clusterrolebindings"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().InternalVersion().ClusterRoleBindings().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac.SchemeGroupVersion.WithResource("roles"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().InternalVersion().Roles().Informer()}, nil
0000000000000000000000000000000000000000;;		case rbac.SchemeGroupVersion.WithResource("rolebindings"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().InternalVersion().RoleBindings().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Settings, Version=InternalVersion
0000000000000000000000000000000000000000;;		case settings.SchemeGroupVersion.WithResource("podpresets"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Settings().InternalVersion().PodPresets().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Group=Storage, Version=InternalVersion
0000000000000000000000000000000000000000;;		case storage.SchemeGroupVersion.WithResource("storageclasses"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Storage().InternalVersion().StorageClasses().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("no informer found for %v", resource)
0000000000000000000000000000000000000000;;	}
