0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f9092fa2506ef469f4e01b018926badab69dca46;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetLister helps list StatefulSets.
0000000000000000000000000000000000000000;;	type StatefulSetLister interface {
0000000000000000000000000000000000000000;;		// List lists all StatefulSets in the indexer.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1beta1.StatefulSet, err error)
0000000000000000000000000000000000000000;;		// StatefulSets returns an object that can list and get StatefulSets.
0000000000000000000000000000000000000000;;		StatefulSets(namespace string) StatefulSetNamespaceLister
0000000000000000000000000000000000000000;;		StatefulSetListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// statefulSetLister implements the StatefulSetLister interface.
0000000000000000000000000000000000000000;;	type statefulSetLister struct {
0000000000000000000000000000000000000000;;		indexer cache.Indexer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewStatefulSetLister returns a new StatefulSetLister.
0000000000000000000000000000000000000000;;	func NewStatefulSetLister(indexer cache.Indexer) StatefulSetLister {
0000000000000000000000000000000000000000;;		return &statefulSetLister{indexer: indexer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all StatefulSets in the indexer.
0000000000000000000000000000000000000000;;	func (s *statefulSetLister) List(selector labels.Selector) (ret []*v1beta1.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1beta1.StatefulSet))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSets returns an object that can list and get StatefulSets.
0000000000000000000000000000000000000000;;	func (s *statefulSetLister) StatefulSets(namespace string) StatefulSetNamespaceLister {
0000000000000000000000000000000000000000;;		return statefulSetNamespaceLister{indexer: s.indexer, namespace: namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetNamespaceLister helps list and get StatefulSets.
0000000000000000000000000000000000000000;;	type StatefulSetNamespaceLister interface {
0000000000000000000000000000000000000000;;		// List lists all StatefulSets in the indexer for a given namespace.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1beta1.StatefulSet, err error)
0000000000000000000000000000000000000000;;		// Get retrieves the StatefulSet from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;		Get(name string) (*v1beta1.StatefulSet, error)
0000000000000000000000000000000000000000;;		StatefulSetNamespaceListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// statefulSetNamespaceLister implements the StatefulSetNamespaceLister
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type statefulSetNamespaceLister struct {
0000000000000000000000000000000000000000;;		indexer   cache.Indexer
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all StatefulSets in the indexer for a given namespace.
0000000000000000000000000000000000000000;;	func (s statefulSetNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1beta1.StatefulSet))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the StatefulSet from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;	func (s statefulSetNamespaceLister) Get(name string) (*v1beta1.StatefulSet, error) {
0000000000000000000000000000000000000000;;		obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(v1beta1.Resource("statefulset"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1beta1.StatefulSet), nil
0000000000000000000000000000000000000000;;	}
