0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
27309f4673be3413f8111c6639fe8953b1ae6e2c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		batch "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// JobLister.
0000000000000000000000000000000000000000;;	type JobListerExpansion interface {
0000000000000000000000000000000000000000;;		// GetPodJobs returns a list of Jobs that potentially
0000000000000000000000000000000000000000;;		// match a Pod. Only the one specified in the Pod's ControllerRef
0000000000000000000000000000000000000000;;		// will actually manage it.
0000000000000000000000000000000000000000;;		// Returns an error only if no matching Jobs are found.
0000000000000000000000000000000000000000;;		GetPodJobs(pod *v1.Pod) (jobs []batch.Job, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodJobs returns a list of Jobs that potentially
0000000000000000000000000000000000000000;;	// match a Pod. Only the one specified in the Pod's ControllerRef
0000000000000000000000000000000000000000;;	// will actually manage it.
0000000000000000000000000000000000000000;;	// Returns an error only if no matching Jobs are found.
0000000000000000000000000000000000000000;;	func (l *jobLister) GetPodJobs(pod *v1.Pod) (jobs []batch.Job, err error) {
0000000000000000000000000000000000000000;;		if len(pod.Labels) == 0 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("no jobs found for pod %v because it has no labels", pod.Name)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var list []*batch.Job
0000000000000000000000000000000000000000;;		list, err = l.Jobs(pod.Namespace).List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, job := range list {
0000000000000000000000000000000000000000;;			selector, _ := metav1.LabelSelectorAsSelector(job.Spec.Selector)
0000000000000000000000000000000000000000;;			if !selector.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			jobs = append(jobs, *job)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(jobs) == 0 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("could not find jobs for pod %s in namespace %s with labels: %v", pod.Name, pod.Namespace, pod.Labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobNamespaceListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// JobNamespaceLister.
0000000000000000000000000000000000000000;;	type JobNamespaceListerExpansion interface{}
