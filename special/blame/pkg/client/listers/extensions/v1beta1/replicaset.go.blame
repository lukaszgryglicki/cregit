0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f9092fa2506ef469f4e01b018926badab69dca46;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplicaSetLister helps list ReplicaSets.
0000000000000000000000000000000000000000;;	type ReplicaSetLister interface {
0000000000000000000000000000000000000000;;		// List lists all ReplicaSets in the indexer.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1beta1.ReplicaSet, err error)
0000000000000000000000000000000000000000;;		// ReplicaSets returns an object that can list and get ReplicaSets.
0000000000000000000000000000000000000000;;		ReplicaSets(namespace string) ReplicaSetNamespaceLister
0000000000000000000000000000000000000000;;		ReplicaSetListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// replicaSetLister implements the ReplicaSetLister interface.
0000000000000000000000000000000000000000;;	type replicaSetLister struct {
0000000000000000000000000000000000000000;;		indexer cache.Indexer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewReplicaSetLister returns a new ReplicaSetLister.
0000000000000000000000000000000000000000;;	func NewReplicaSetLister(indexer cache.Indexer) ReplicaSetLister {
0000000000000000000000000000000000000000;;		return &replicaSetLister{indexer: indexer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all ReplicaSets in the indexer.
0000000000000000000000000000000000000000;;	func (s *replicaSetLister) List(selector labels.Selector) (ret []*v1beta1.ReplicaSet, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1beta1.ReplicaSet))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplicaSets returns an object that can list and get ReplicaSets.
0000000000000000000000000000000000000000;;	func (s *replicaSetLister) ReplicaSets(namespace string) ReplicaSetNamespaceLister {
0000000000000000000000000000000000000000;;		return replicaSetNamespaceLister{indexer: s.indexer, namespace: namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplicaSetNamespaceLister helps list and get ReplicaSets.
0000000000000000000000000000000000000000;;	type ReplicaSetNamespaceLister interface {
0000000000000000000000000000000000000000;;		// List lists all ReplicaSets in the indexer for a given namespace.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1beta1.ReplicaSet, err error)
0000000000000000000000000000000000000000;;		// Get retrieves the ReplicaSet from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;		Get(name string) (*v1beta1.ReplicaSet, error)
0000000000000000000000000000000000000000;;		ReplicaSetNamespaceListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// replicaSetNamespaceLister implements the ReplicaSetNamespaceLister
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type replicaSetNamespaceLister struct {
0000000000000000000000000000000000000000;;		indexer   cache.Indexer
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all ReplicaSets in the indexer for a given namespace.
0000000000000000000000000000000000000000;;	func (s replicaSetNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ReplicaSet, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1beta1.ReplicaSet))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the ReplicaSet from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;	func (s replicaSetNamespaceLister) Get(name string) (*v1beta1.ReplicaSet, error) {
0000000000000000000000000000000000000000;;		obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(v1beta1.Resource("replicaset"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1beta1.ReplicaSet), nil
0000000000000000000000000000000000000000;;	}
