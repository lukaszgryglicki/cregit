0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
144fc777f35284c6fed6527408eb4575da2b6064;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DaemonSetListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// DaemonSetLister.
0000000000000000000000000000000000000000;;	type DaemonSetListerExpansion interface {
0000000000000000000000000000000000000000;;		GetPodDaemonSets(pod *v1.Pod) ([]*v1beta1.DaemonSet, error)
0000000000000000000000000000000000000000;;		GetHistoryDaemonSets(history *apps.ControllerRevision) ([]*v1beta1.DaemonSet, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DaemonSetNamespaceListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// DaemonSetNamespaceLister.
0000000000000000000000000000000000000000;;	type DaemonSetNamespaceListerExpansion interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodDaemonSets returns a list of DaemonSets that potentially match a pod.
0000000000000000000000000000000000000000;;	// Only the one specified in the Pod's ControllerRef will actually manage it.
0000000000000000000000000000000000000000;;	// Returns an error only if no matching DaemonSets are found.
0000000000000000000000000000000000000000;;	func (s *daemonSetLister) GetPodDaemonSets(pod *v1.Pod) ([]*v1beta1.DaemonSet, error) {
0000000000000000000000000000000000000000;;		var selector labels.Selector
0000000000000000000000000000000000000000;;		var daemonSet *v1beta1.DaemonSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(pod.Labels) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("no daemon sets found for pod %v because it has no labels", pod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list, err := s.DaemonSets(pod.Namespace).List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var daemonSets []*v1beta1.DaemonSet
0000000000000000000000000000000000000000;;		for i := range list {
0000000000000000000000000000000000000000;;			daemonSet = list[i]
0000000000000000000000000000000000000000;;			if daemonSet.Namespace != pod.Namespace {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector, err = metav1.LabelSelectorAsSelector(daemonSet.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				// this should not happen if the DaemonSet passed validation
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// If a daemonSet with a nil or empty selector creeps in, it should match nothing, not everything.
0000000000000000000000000000000000000000;;			if selector.Empty() || !selector.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			daemonSets = append(daemonSets, daemonSet)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(daemonSets) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("could not find daemon set for pod %s in namespace %s with labels: %v", pod.Name, pod.Namespace, pod.Labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return daemonSets, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHistoryDaemonSets returns a list of DaemonSets that potentially
0000000000000000000000000000000000000000;;	// match a ControllerRevision. Only the one specified in the ControllerRevision's ControllerRef
0000000000000000000000000000000000000000;;	// will actually manage it.
0000000000000000000000000000000000000000;;	// Returns an error only if no matching DaemonSets are found.
0000000000000000000000000000000000000000;;	func (s *daemonSetLister) GetHistoryDaemonSets(history *apps.ControllerRevision) ([]*v1beta1.DaemonSet, error) {
0000000000000000000000000000000000000000;;		if len(history.Labels) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("no DaemonSet found for ControllerRevision %s because it has no labels", history.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list, err := s.DaemonSets(history.Namespace).List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var daemonSets []*v1beta1.DaemonSet
0000000000000000000000000000000000000000;;		for _, ds := range list {
0000000000000000000000000000000000000000;;			selector, err := metav1.LabelSelectorAsSelector(ds.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid label selector: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// If a DaemonSet with a nil or empty selector creeps in, it should match nothing, not everything.
0000000000000000000000000000000000000000;;			if selector.Empty() || !selector.Matches(labels.Set(history.Labels)) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			daemonSets = append(daemonSets, ds)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(daemonSets) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("could not find DaemonSets for ControllerRevision %s in namespace %s with labels: %v", history.Name, history.Namespace, history.Labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return daemonSets, nil
0000000000000000000000000000000000000000;;	}
