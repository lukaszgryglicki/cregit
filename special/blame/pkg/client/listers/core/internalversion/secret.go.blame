0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f9092fa2506ef469f4e01b018926badab69dca46;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		api "k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecretLister helps list Secrets.
0000000000000000000000000000000000000000;;	type SecretLister interface {
0000000000000000000000000000000000000000;;		// List lists all Secrets in the indexer.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*api.Secret, err error)
0000000000000000000000000000000000000000;;		// Secrets returns an object that can list and get Secrets.
0000000000000000000000000000000000000000;;		Secrets(namespace string) SecretNamespaceLister
0000000000000000000000000000000000000000;;		SecretListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// secretLister implements the SecretLister interface.
0000000000000000000000000000000000000000;;	type secretLister struct {
0000000000000000000000000000000000000000;;		indexer cache.Indexer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSecretLister returns a new SecretLister.
0000000000000000000000000000000000000000;;	func NewSecretLister(indexer cache.Indexer) SecretLister {
0000000000000000000000000000000000000000;;		return &secretLister{indexer: indexer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all Secrets in the indexer.
0000000000000000000000000000000000000000;;	func (s *secretLister) List(selector labels.Selector) (ret []*api.Secret, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*api.Secret))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Secrets returns an object that can list and get Secrets.
0000000000000000000000000000000000000000;;	func (s *secretLister) Secrets(namespace string) SecretNamespaceLister {
0000000000000000000000000000000000000000;;		return secretNamespaceLister{indexer: s.indexer, namespace: namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecretNamespaceLister helps list and get Secrets.
0000000000000000000000000000000000000000;;	type SecretNamespaceLister interface {
0000000000000000000000000000000000000000;;		// List lists all Secrets in the indexer for a given namespace.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*api.Secret, err error)
0000000000000000000000000000000000000000;;		// Get retrieves the Secret from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;		Get(name string) (*api.Secret, error)
0000000000000000000000000000000000000000;;		SecretNamespaceListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// secretNamespaceLister implements the SecretNamespaceLister
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type secretNamespaceLister struct {
0000000000000000000000000000000000000000;;		indexer   cache.Indexer
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all Secrets in the indexer for a given namespace.
0000000000000000000000000000000000000000;;	func (s secretNamespaceLister) List(selector labels.Selector) (ret []*api.Secret, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*api.Secret))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the Secret from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;	func (s secretNamespaceLister) Get(name string) (*api.Secret, error) {
0000000000000000000000000000000000000000;;		obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(api.Resource("secret"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*api.Secret), nil
0000000000000000000000000000000000000000;;	}
