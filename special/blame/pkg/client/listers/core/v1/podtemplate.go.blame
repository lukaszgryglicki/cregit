0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f9092fa2506ef469f4e01b018926badab69dca46;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodTemplateLister helps list PodTemplates.
0000000000000000000000000000000000000000;;	type PodTemplateLister interface {
0000000000000000000000000000000000000000;;		// List lists all PodTemplates in the indexer.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1.PodTemplate, err error)
0000000000000000000000000000000000000000;;		// PodTemplates returns an object that can list and get PodTemplates.
0000000000000000000000000000000000000000;;		PodTemplates(namespace string) PodTemplateNamespaceLister
0000000000000000000000000000000000000000;;		PodTemplateListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// podTemplateLister implements the PodTemplateLister interface.
0000000000000000000000000000000000000000;;	type podTemplateLister struct {
0000000000000000000000000000000000000000;;		indexer cache.Indexer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPodTemplateLister returns a new PodTemplateLister.
0000000000000000000000000000000000000000;;	func NewPodTemplateLister(indexer cache.Indexer) PodTemplateLister {
0000000000000000000000000000000000000000;;		return &podTemplateLister{indexer: indexer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all PodTemplates in the indexer.
0000000000000000000000000000000000000000;;	func (s *podTemplateLister) List(selector labels.Selector) (ret []*v1.PodTemplate, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1.PodTemplate))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodTemplates returns an object that can list and get PodTemplates.
0000000000000000000000000000000000000000;;	func (s *podTemplateLister) PodTemplates(namespace string) PodTemplateNamespaceLister {
0000000000000000000000000000000000000000;;		return podTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodTemplateNamespaceLister helps list and get PodTemplates.
0000000000000000000000000000000000000000;;	type PodTemplateNamespaceLister interface {
0000000000000000000000000000000000000000;;		// List lists all PodTemplates in the indexer for a given namespace.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1.PodTemplate, err error)
0000000000000000000000000000000000000000;;		// Get retrieves the PodTemplate from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;		Get(name string) (*v1.PodTemplate, error)
0000000000000000000000000000000000000000;;		PodTemplateNamespaceListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// podTemplateNamespaceLister implements the PodTemplateNamespaceLister
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type podTemplateNamespaceLister struct {
0000000000000000000000000000000000000000;;		indexer   cache.Indexer
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all PodTemplates in the indexer for a given namespace.
0000000000000000000000000000000000000000;;	func (s podTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1.PodTemplate, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1.PodTemplate))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the PodTemplate from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;	func (s podTemplateNamespaceLister) Get(name string) (*v1.PodTemplate, error) {
0000000000000000000000000000000000000000;;		obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(v1.Resource("podtemplate"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1.PodTemplate), nil
0000000000000000000000000000000000000000;;	}
