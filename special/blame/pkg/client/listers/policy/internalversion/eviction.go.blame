0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f5c8ab7e51237bf51fcaabf4ac6567e8704e0f90;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		policy "k8s.io/kubernetes/pkg/apis/policy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EvictionLister helps list Evictions.
0000000000000000000000000000000000000000;;	type EvictionLister interface {
0000000000000000000000000000000000000000;;		// List lists all Evictions in the indexer.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*policy.Eviction, err error)
0000000000000000000000000000000000000000;;		// Evictions returns an object that can list and get Evictions.
0000000000000000000000000000000000000000;;		Evictions(namespace string) EvictionNamespaceLister
0000000000000000000000000000000000000000;;		EvictionListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// evictionLister implements the EvictionLister interface.
0000000000000000000000000000000000000000;;	type evictionLister struct {
0000000000000000000000000000000000000000;;		indexer cache.Indexer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEvictionLister returns a new EvictionLister.
0000000000000000000000000000000000000000;;	func NewEvictionLister(indexer cache.Indexer) EvictionLister {
0000000000000000000000000000000000000000;;		return &evictionLister{indexer: indexer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all Evictions in the indexer.
0000000000000000000000000000000000000000;;	func (s *evictionLister) List(selector labels.Selector) (ret []*policy.Eviction, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*policy.Eviction))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Evictions returns an object that can list and get Evictions.
0000000000000000000000000000000000000000;;	func (s *evictionLister) Evictions(namespace string) EvictionNamespaceLister {
0000000000000000000000000000000000000000;;		return evictionNamespaceLister{indexer: s.indexer, namespace: namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EvictionNamespaceLister helps list and get Evictions.
0000000000000000000000000000000000000000;;	type EvictionNamespaceLister interface {
0000000000000000000000000000000000000000;;		// List lists all Evictions in the indexer for a given namespace.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*policy.Eviction, err error)
0000000000000000000000000000000000000000;;		// Get retrieves the Eviction from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;		Get(name string) (*policy.Eviction, error)
0000000000000000000000000000000000000000;;		EvictionNamespaceListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// evictionNamespaceLister implements the EvictionNamespaceLister
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type evictionNamespaceLister struct {
0000000000000000000000000000000000000000;;		indexer   cache.Indexer
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all Evictions in the indexer for a given namespace.
0000000000000000000000000000000000000000;;	func (s evictionNamespaceLister) List(selector labels.Selector) (ret []*policy.Eviction, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*policy.Eviction))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the Eviction from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;	func (s evictionNamespaceLister) Get(name string) (*policy.Eviction, error) {
0000000000000000000000000000000000000000;;		obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(policy.Resource("eviction"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*policy.Eviction), nil
0000000000000000000000000000000000000000;;	}
