0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
453af0b200e42ad2618189b8aab05f168d002e3e;pkg/client/clientset_generated/release_1_1/clientset.go[pkg/client/clientset_generated/release_1_1/clientset.go][pkg/client/clientset_generated/internalclientset/clientset.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalclientset
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		glog "github.com/golang/glog"
0000000000000000000000000000000000000000;;		discovery "k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		rest "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		flowcontrol "k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;		admissionregistrationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/admissionregistration/internalversion"
0000000000000000000000000000000000000000;;		appsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/apps/internalversion"
0000000000000000000000000000000000000000;;		authenticationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/authentication/internalversion"
0000000000000000000000000000000000000000;;		authorizationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/authorization/internalversion"
0000000000000000000000000000000000000000;;		autoscalinginternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/autoscaling/internalversion"
0000000000000000000000000000000000000000;;		batchinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/batch/internalversion"
0000000000000000000000000000000000000000;;		certificatesinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/certificates/internalversion"
0000000000000000000000000000000000000000;;		coreinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion"
0000000000000000000000000000000000000000;;		extensionsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/extensions/internalversion"
0000000000000000000000000000000000000000;;		networkinginternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/networking/internalversion"
0000000000000000000000000000000000000000;;		policyinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/policy/internalversion"
0000000000000000000000000000000000000000;;		rbacinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/rbac/internalversion"
0000000000000000000000000000000000000000;;		settingsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/settings/internalversion"
0000000000000000000000000000000000000000;;		storageinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/storage/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		Discovery() discovery.DiscoveryInterface
0000000000000000000000000000000000000000;;		Admissionregistration() admissionregistrationinternalversion.AdmissionregistrationInterface
0000000000000000000000000000000000000000;;		Core() coreinternalversion.CoreInterface
0000000000000000000000000000000000000000;;		Apps() appsinternalversion.AppsInterface
0000000000000000000000000000000000000000;;		Authentication() authenticationinternalversion.AuthenticationInterface
0000000000000000000000000000000000000000;;		Authorization() authorizationinternalversion.AuthorizationInterface
0000000000000000000000000000000000000000;;		Autoscaling() autoscalinginternalversion.AutoscalingInterface
0000000000000000000000000000000000000000;;		Batch() batchinternalversion.BatchInterface
0000000000000000000000000000000000000000;;		Certificates() certificatesinternalversion.CertificatesInterface
0000000000000000000000000000000000000000;;		Extensions() extensionsinternalversion.ExtensionsInterface
0000000000000000000000000000000000000000;;		Networking() networkinginternalversion.NetworkingInterface
0000000000000000000000000000000000000000;;		Policy() policyinternalversion.PolicyInterface
0000000000000000000000000000000000000000;;		Rbac() rbacinternalversion.RbacInterface
0000000000000000000000000000000000000000;;		Settings() settingsinternalversion.SettingsInterface
0000000000000000000000000000000000000000;;		Storage() storageinternalversion.StorageInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clientset contains the clients for groups. Each group has exactly one
0000000000000000000000000000000000000000;;	// version included in a Clientset.
0000000000000000000000000000000000000000;;	type Clientset struct {
0000000000000000000000000000000000000000;;		*discovery.DiscoveryClient
0000000000000000000000000000000000000000;;		*admissionregistrationinternalversion.AdmissionregistrationClient
0000000000000000000000000000000000000000;;		*coreinternalversion.CoreClient
0000000000000000000000000000000000000000;;		*appsinternalversion.AppsClient
0000000000000000000000000000000000000000;;		*authenticationinternalversion.AuthenticationClient
0000000000000000000000000000000000000000;;		*authorizationinternalversion.AuthorizationClient
0000000000000000000000000000000000000000;;		*autoscalinginternalversion.AutoscalingClient
0000000000000000000000000000000000000000;;		*batchinternalversion.BatchClient
0000000000000000000000000000000000000000;;		*certificatesinternalversion.CertificatesClient
0000000000000000000000000000000000000000;;		*extensionsinternalversion.ExtensionsClient
0000000000000000000000000000000000000000;;		*networkinginternalversion.NetworkingClient
0000000000000000000000000000000000000000;;		*policyinternalversion.PolicyClient
0000000000000000000000000000000000000000;;		*rbacinternalversion.RbacClient
0000000000000000000000000000000000000000;;		*settingsinternalversion.SettingsClient
0000000000000000000000000000000000000000;;		*storageinternalversion.StorageClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Admissionregistration retrieves the AdmissionregistrationClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Admissionregistration() admissionregistrationinternalversion.AdmissionregistrationInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.AdmissionregistrationClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Core retrieves the CoreClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Core() coreinternalversion.CoreInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.CoreClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Apps retrieves the AppsClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Apps() appsinternalversion.AppsInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.AppsClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authentication retrieves the AuthenticationClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Authentication() authenticationinternalversion.AuthenticationInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.AuthenticationClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authorization retrieves the AuthorizationClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Authorization() authorizationinternalversion.AuthorizationInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.AuthorizationClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Autoscaling retrieves the AutoscalingClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Autoscaling() autoscalinginternalversion.AutoscalingInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.AutoscalingClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Batch retrieves the BatchClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Batch() batchinternalversion.BatchInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.BatchClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Certificates retrieves the CertificatesClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Certificates() certificatesinternalversion.CertificatesInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.CertificatesClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extensions retrieves the ExtensionsClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Extensions() extensionsinternalversion.ExtensionsInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.ExtensionsClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Networking retrieves the NetworkingClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Networking() networkinginternalversion.NetworkingInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.NetworkingClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Policy retrieves the PolicyClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Policy() policyinternalversion.PolicyInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.PolicyClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rbac retrieves the RbacClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Rbac() rbacinternalversion.RbacInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.RbacClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Settings retrieves the SettingsClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Settings() settingsinternalversion.SettingsInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.SettingsClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Storage retrieves the StorageClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Storage() storageinternalversion.StorageInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.StorageClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Discovery retrieves the DiscoveryClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Discovery() discovery.DiscoveryInterface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.DiscoveryClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfig creates a new Clientset for the given config.
0000000000000000000000000000000000000000;;	func NewForConfig(c *rest.Config) (*Clientset, error) {
0000000000000000000000000000000000000000;;		configShallowCopy := *c
0000000000000000000000000000000000000000;;		if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
0000000000000000000000000000000000000000;;			configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		cs.AdmissionregistrationClient, err = admissionregistrationinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.CoreClient, err = coreinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.AppsClient, err = appsinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.AuthenticationClient, err = authenticationinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.AuthorizationClient, err = authorizationinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.AutoscalingClient, err = autoscalinginternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.BatchClient, err = batchinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.CertificatesClient, err = certificatesinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.ExtensionsClient, err = extensionsinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.NetworkingClient, err = networkinginternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.PolicyClient, err = policyinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.RbacClient, err = rbacinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.SettingsClient, err = settingsinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.StorageClient, err = storageinternalversion.NewForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("failed to create the DiscoveryClient: %v", err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &cs, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfigOrDie creates a new Clientset for the given config and
0000000000000000000000000000000000000000;;	// panics if there is an error in the config.
0000000000000000000000000000000000000000;;	func NewForConfigOrDie(c *rest.Config) *Clientset {
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;		cs.AdmissionregistrationClient = admissionregistrationinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.CoreClient = coreinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.AppsClient = appsinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.AuthenticationClient = authenticationinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.AuthorizationClient = authorizationinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.AutoscalingClient = autoscalinginternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.BatchClient = batchinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.CertificatesClient = certificatesinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.ExtensionsClient = extensionsinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.NetworkingClient = networkinginternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.PolicyClient = policyinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.RbacClient = rbacinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.SettingsClient = settingsinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;		cs.StorageClient = storageinternalversion.NewForConfigOrDie(c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
0000000000000000000000000000000000000000;;		return &cs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new Clientset for the given RESTClient.
0000000000000000000000000000000000000000;;	func New(c rest.Interface) *Clientset {
0000000000000000000000000000000000000000;;		var cs Clientset
0000000000000000000000000000000000000000;;		cs.AdmissionregistrationClient = admissionregistrationinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.CoreClient = coreinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.AppsClient = appsinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.AuthenticationClient = authenticationinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.AuthorizationClient = authorizationinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.AutoscalingClient = autoscalinginternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.BatchClient = batchinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.CertificatesClient = certificatesinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.ExtensionsClient = extensionsinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.NetworkingClient = networkinginternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.PolicyClient = policyinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.RbacClient = rbacinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.SettingsClient = settingsinternalversion.New(c)
0000000000000000000000000000000000000000;;		cs.StorageClient = storageinternalversion.New(c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
0000000000000000000000000000000000000000;;		return &cs
0000000000000000000000000000000000000000;;	}
