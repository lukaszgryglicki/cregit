0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
3e7d68ee4708cf3648c5b6ceb214cef7cd4a3439;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		runtime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		serializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		coreinternalversion "k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		admissionregistrationinternalversion "k8s.io/kubernetes/pkg/apis/admissionregistration"
0000000000000000000000000000000000000000;;		appsinternalversion "k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;		authenticationinternalversion "k8s.io/kubernetes/pkg/apis/authentication"
0000000000000000000000000000000000000000;;		authorizationinternalversion "k8s.io/kubernetes/pkg/apis/authorization"
0000000000000000000000000000000000000000;;		autoscalinginternalversion "k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;		batchinternalversion "k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		certificatesinternalversion "k8s.io/kubernetes/pkg/apis/certificates"
0000000000000000000000000000000000000000;;		extensionsinternalversion "k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		networkinginternalversion "k8s.io/kubernetes/pkg/apis/networking"
0000000000000000000000000000000000000000;;		policyinternalversion "k8s.io/kubernetes/pkg/apis/policy"
0000000000000000000000000000000000000000;;		rbacinternalversion "k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		settingsinternalversion "k8s.io/kubernetes/pkg/apis/settings"
0000000000000000000000000000000000000000;;		storageinternalversion "k8s.io/kubernetes/pkg/apis/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;	var codecs = serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;	var parameterCodec = runtime.NewParameterCodec(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		v1.AddToGroupVersion(scheme, schema.GroupVersion{Version: "v1"})
0000000000000000000000000000000000000000;;		AddToScheme(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddToScheme adds all types of this clientset into the given scheme. This allows composition
0000000000000000000000000000000000000000;;	// of clientsets, like in:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   import (
0000000000000000000000000000000000000000;;	//     "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;	//     clientsetscheme "k8s.io/client-go/kuberentes/scheme"
0000000000000000000000000000000000000000;;	//     aggregatorclientsetscheme "k8s.io/kube-aggregator/pkg/client/clientset_generated/clientset/scheme"
0000000000000000000000000000000000000000;;	//   )
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   kclientset, _ := kubernetes.NewForConfig(c)
0000000000000000000000000000000000000000;;	//   aggregatorclientsetscheme.AddToScheme(clientsetscheme.Scheme)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After this, RawExtensions in Kubernetes types will serialize kube-aggregator types
0000000000000000000000000000000000000000;;	// correctly.
0000000000000000000000000000000000000000;;	func AddToScheme(scheme *runtime.Scheme) {
0000000000000000000000000000000000000000;;		admissionregistrationinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		coreinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		appsinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		authenticationinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		authorizationinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		autoscalinginternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		batchinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		certificatesinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		extensionsinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		networkinginternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		policyinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		rbacinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		settingsinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		storageinternalversion.AddToScheme(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
