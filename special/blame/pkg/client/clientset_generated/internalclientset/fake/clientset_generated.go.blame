0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d411520f4df7bcb85546106000dcbeb792b636a7;pkg/client/testing/fake/clientset.go[pkg/client/testing/fake/clientset.go][pkg/client/clientset_generated/internalclientset/fake/clientset_generated.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		fakediscovery "k8s.io/client-go/discovery/fake"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		clientset "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		admissionregistrationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/admissionregistration/internalversion"
0000000000000000000000000000000000000000;;		fakeadmissionregistrationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/admissionregistration/internalversion/fake"
0000000000000000000000000000000000000000;;		appsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/apps/internalversion"
0000000000000000000000000000000000000000;;		fakeappsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/apps/internalversion/fake"
0000000000000000000000000000000000000000;;		authenticationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/authentication/internalversion"
0000000000000000000000000000000000000000;;		fakeauthenticationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/authentication/internalversion/fake"
0000000000000000000000000000000000000000;;		authorizationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/authorization/internalversion"
0000000000000000000000000000000000000000;;		fakeauthorizationinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/authorization/internalversion/fake"
0000000000000000000000000000000000000000;;		autoscalinginternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/autoscaling/internalversion"
0000000000000000000000000000000000000000;;		fakeautoscalinginternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/autoscaling/internalversion/fake"
0000000000000000000000000000000000000000;;		batchinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/batch/internalversion"
0000000000000000000000000000000000000000;;		fakebatchinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/batch/internalversion/fake"
0000000000000000000000000000000000000000;;		certificatesinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/certificates/internalversion"
0000000000000000000000000000000000000000;;		fakecertificatesinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/certificates/internalversion/fake"
0000000000000000000000000000000000000000;;		coreinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion"
0000000000000000000000000000000000000000;;		fakecoreinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion/fake"
0000000000000000000000000000000000000000;;		extensionsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/extensions/internalversion"
0000000000000000000000000000000000000000;;		fakeextensionsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/extensions/internalversion/fake"
0000000000000000000000000000000000000000;;		networkinginternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/networking/internalversion"
0000000000000000000000000000000000000000;;		fakenetworkinginternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/networking/internalversion/fake"
0000000000000000000000000000000000000000;;		policyinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/policy/internalversion"
0000000000000000000000000000000000000000;;		fakepolicyinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/policy/internalversion/fake"
0000000000000000000000000000000000000000;;		rbacinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/rbac/internalversion"
0000000000000000000000000000000000000000;;		fakerbacinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/rbac/internalversion/fake"
0000000000000000000000000000000000000000;;		settingsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/settings/internalversion"
0000000000000000000000000000000000000000;;		fakesettingsinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/settings/internalversion/fake"
0000000000000000000000000000000000000000;;		storageinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/storage/internalversion"
0000000000000000000000000000000000000000;;		fakestorageinternalversion "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/storage/internalversion/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSimpleClientset returns a clientset that will respond with the provided objects.
0000000000000000000000000000000000000000;;	// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
0000000000000000000000000000000000000000;;	// without applying any validations and/or defaults. It shouldn't be considered a replacement
0000000000000000000000000000000000000000;;	// for a real clientset and is mostly useful in simple unit tests.
0000000000000000000000000000000000000000;;	func NewSimpleClientset(objects ...runtime.Object) *Clientset {
0000000000000000000000000000000000000000;;		o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
0000000000000000000000000000000000000000;;		for _, obj := range objects {
0000000000000000000000000000000000000000;;			if err := o.Add(obj); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePtr := testing.Fake{}
0000000000000000000000000000000000000000;;		fakePtr.AddReactor("*", "*", testing.ObjectReaction(o))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePtr.AddWatchReactor("*", testing.DefaultWatchReactor(watch.NewFake(), nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Clientset{fakePtr}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clientset implements clientset.Interface. Meant to be embedded into a
0000000000000000000000000000000000000000;;	// struct to get a default implementation. This makes faking out just the method
0000000000000000000000000000000000000000;;	// you want to test easier.
0000000000000000000000000000000000000000;;	type Clientset struct {
0000000000000000000000000000000000000000;;		testing.Fake
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Clientset) Discovery() discovery.DiscoveryInterface {
0000000000000000000000000000000000000000;;		return &fakediscovery.FakeDiscovery{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ clientset.Interface = &Clientset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Admissionregistration retrieves the AdmissionregistrationClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Admissionregistration() admissionregistrationinternalversion.AdmissionregistrationInterface {
0000000000000000000000000000000000000000;;		return &fakeadmissionregistrationinternalversion.FakeAdmissionregistration{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Core retrieves the CoreClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Core() coreinternalversion.CoreInterface {
0000000000000000000000000000000000000000;;		return &fakecoreinternalversion.FakeCore{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Apps retrieves the AppsClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Apps() appsinternalversion.AppsInterface {
0000000000000000000000000000000000000000;;		return &fakeappsinternalversion.FakeApps{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authentication retrieves the AuthenticationClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Authentication() authenticationinternalversion.AuthenticationInterface {
0000000000000000000000000000000000000000;;		return &fakeauthenticationinternalversion.FakeAuthentication{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authorization retrieves the AuthorizationClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Authorization() authorizationinternalversion.AuthorizationInterface {
0000000000000000000000000000000000000000;;		return &fakeauthorizationinternalversion.FakeAuthorization{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Autoscaling retrieves the AutoscalingClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Autoscaling() autoscalinginternalversion.AutoscalingInterface {
0000000000000000000000000000000000000000;;		return &fakeautoscalinginternalversion.FakeAutoscaling{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Batch retrieves the BatchClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Batch() batchinternalversion.BatchInterface {
0000000000000000000000000000000000000000;;		return &fakebatchinternalversion.FakeBatch{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Certificates retrieves the CertificatesClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Certificates() certificatesinternalversion.CertificatesInterface {
0000000000000000000000000000000000000000;;		return &fakecertificatesinternalversion.FakeCertificates{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extensions retrieves the ExtensionsClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Extensions() extensionsinternalversion.ExtensionsInterface {
0000000000000000000000000000000000000000;;		return &fakeextensionsinternalversion.FakeExtensions{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Networking retrieves the NetworkingClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Networking() networkinginternalversion.NetworkingInterface {
0000000000000000000000000000000000000000;;		return &fakenetworkinginternalversion.FakeNetworking{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Policy retrieves the PolicyClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Policy() policyinternalversion.PolicyInterface {
0000000000000000000000000000000000000000;;		return &fakepolicyinternalversion.FakePolicy{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rbac retrieves the RbacClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Rbac() rbacinternalversion.RbacInterface {
0000000000000000000000000000000000000000;;		return &fakerbacinternalversion.FakeRbac{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Settings retrieves the SettingsClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Settings() settingsinternalversion.SettingsInterface {
0000000000000000000000000000000000000000;;		return &fakesettingsinternalversion.FakeSettings{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Storage retrieves the StorageClient
0000000000000000000000000000000000000000;;	func (c *Clientset) Storage() storageinternalversion.StorageInterface {
0000000000000000000000000000000000000000;;		return &fakestorageinternalversion.FakeStorage{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
