0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a14a857b6054e63c7317a72ffb64c14bcbe12407;pkg/client/clientset_generated/internalclientset/typed/extensions/unversioned/scale_expansion.go[pkg/client/clientset_generated/internalclientset/typed/extensions/unversioned/scale_expansion.go][pkg/client/clientset_generated/internalclientset/typed/extensions/internalversion/scale_expansion.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The ScaleExpansion interface allows manually adding extra methods to the ScaleInterface.
0000000000000000000000000000000000000000;;	type ScaleExpansion interface {
0000000000000000000000000000000000000000;;		Get(kind string, name string) (*extensions.Scale, error)
0000000000000000000000000000000000000000;;		Update(kind string, scale *extensions.Scale) (*extensions.Scale, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get takes the reference to scale subresource and returns the subresource or error, if one occurs.
0000000000000000000000000000000000000000;;	func (c *scales) Get(kind string, name string) (result *extensions.Scale, err error) {
0000000000000000000000000000000000000000;;		result = &extensions.Scale{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO this method needs to take a proper unambiguous kind
0000000000000000000000000000000000000000;;		fullyQualifiedKind := schema.GroupVersionKind{Kind: kind}
0000000000000000000000000000000000000000;;		resource, _ := meta.UnsafeGuessKindToResource(fullyQualifiedKind)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = c.client.Get().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource(resource.Resource).
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			SubResource("scale").
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *scales) Update(kind string, scale *extensions.Scale) (result *extensions.Scale, err error) {
0000000000000000000000000000000000000000;;		result = &extensions.Scale{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO this method needs to take a proper unambiguous kind
0000000000000000000000000000000000000000;;		fullyQualifiedKind := schema.GroupVersionKind{Kind: kind}
0000000000000000000000000000000000000000;;		resource, _ := meta.UnsafeGuessKindToResource(fullyQualifiedKind)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = c.client.Put().
0000000000000000000000000000000000000000;;			Namespace(scale.Namespace).
0000000000000000000000000000000000000000;;			Resource(resource.Resource).
0000000000000000000000000000000000000000;;			Name(scale.Name).
0000000000000000000000000000000000000000;;			SubResource("scale").
0000000000000000000000000000000000000000;;			Body(scale).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
