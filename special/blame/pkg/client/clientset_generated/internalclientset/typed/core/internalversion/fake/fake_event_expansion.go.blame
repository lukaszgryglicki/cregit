0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a14a857b6054e63c7317a72ffb64c14bcbe12407;pkg/client/clientset_generated/internalclientset/typed/core/unversioned/fake/fake_event_expansion.go[pkg/client/clientset_generated/internalclientset/typed/core/unversioned/fake/fake_event_expansion.go][pkg/client/clientset_generated/internalclientset/typed/core/internalversion/fake/fake_event_expansion.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeEvents) CreateWithEventNamespace(event *api.Event) (*api.Event, error) {
0000000000000000000000000000000000000000;;		action := core.NewRootCreateAction(eventsResource, event)
0000000000000000000000000000000000000000;;		if c.ns != "" {
0000000000000000000000000000000000000000;;			action = core.NewCreateAction(eventsResource, c.ns, event)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := c.Fake.Invokes(action, event)
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return obj.(*api.Event), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update replaces an existing event. Returns the copy of the event the server returns, or an error.
0000000000000000000000000000000000000000;;	func (c *FakeEvents) UpdateWithEventNamespace(event *api.Event) (*api.Event, error) {
0000000000000000000000000000000000000000;;		action := core.NewRootUpdateAction(eventsResource, event)
0000000000000000000000000000000000000000;;		if c.ns != "" {
0000000000000000000000000000000000000000;;			action = core.NewUpdateAction(eventsResource, c.ns, event)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := c.Fake.Invokes(action, event)
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return obj.(*api.Event), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PatchWithEventNamespace patches an existing event. Returns the copy of the event the server returns, or an error.
0000000000000000000000000000000000000000;;	func (c *FakeEvents) PatchWithEventNamespace(event *api.Event, data []byte) (*api.Event, error) {
0000000000000000000000000000000000000000;;		action := core.NewRootPatchAction(eventsResource, event.Name, data)
0000000000000000000000000000000000000000;;		if c.ns != "" {
0000000000000000000000000000000000000000;;			action = core.NewPatchAction(eventsResource, c.ns, event.Name, data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := c.Fake.Invokes(action, event)
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return obj.(*api.Event), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Search returns a list of events matching the specified object.
0000000000000000000000000000000000000000;;	func (c *FakeEvents) Search(scheme *runtime.Scheme, objOrRef runtime.Object) (*api.EventList, error) {
0000000000000000000000000000000000000000;;		action := core.NewRootListAction(eventsResource, eventsKind, metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if c.ns != "" {
0000000000000000000000000000000000000000;;			action = core.NewListAction(eventsResource, eventsKind, c.ns, metav1.ListOptions{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := c.Fake.Invokes(action, &api.EventList{})
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return obj.(*api.EventList), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeEvents) GetFieldSelector(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID *string) fields.Selector {
0000000000000000000000000000000000000000;;		action := core.GenericActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "get-field-selector"
0000000000000000000000000000000000000000;;		action.Resource = eventsResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Fake.Invokes(action, nil)
0000000000000000000000000000000000000000;;		return fields.Everything()
0000000000000000000000000000000000000000;;	}
