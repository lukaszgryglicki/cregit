0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e54cdac135d7cdc4672ee79b1a3d477ba80d9992;pkg/client/clientset_generated/internalclientset/typed/authorization/unversioned/authorization_client.go[pkg/client/clientset_generated/internalclientset/typed/authorization/unversioned/authorization_client.go][pkg/client/clientset_generated/internalclientset/typed/authorization/internalversion/authorization_client.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		rest "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/scheme"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthorizationInterface interface {
0000000000000000000000000000000000000000;;		RESTClient() rest.Interface
0000000000000000000000000000000000000000;;		LocalSubjectAccessReviewsGetter
0000000000000000000000000000000000000000;;		SelfSubjectAccessReviewsGetter
0000000000000000000000000000000000000000;;		SubjectAccessReviewsGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizationClient is used to interact with features provided by the authorization.k8s.io group.
0000000000000000000000000000000000000000;;	type AuthorizationClient struct {
0000000000000000000000000000000000000000;;		restClient rest.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AuthorizationClient) LocalSubjectAccessReviews(namespace string) LocalSubjectAccessReviewInterface {
0000000000000000000000000000000000000000;;		return newLocalSubjectAccessReviews(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AuthorizationClient) SelfSubjectAccessReviews() SelfSubjectAccessReviewInterface {
0000000000000000000000000000000000000000;;		return newSelfSubjectAccessReviews(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AuthorizationClient) SubjectAccessReviews() SubjectAccessReviewInterface {
0000000000000000000000000000000000000000;;		return newSubjectAccessReviews(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfig creates a new AuthorizationClient for the given config.
0000000000000000000000000000000000000000;;	func NewForConfig(c *rest.Config) (*AuthorizationClient, error) {
0000000000000000000000000000000000000000;;		config := *c
0000000000000000000000000000000000000000;;		if err := setConfigDefaults(&config); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client, err := rest.RESTClientFor(&config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &AuthorizationClient{client}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfigOrDie creates a new AuthorizationClient for the given config and
0000000000000000000000000000000000000000;;	// panics if there is an error in the config.
0000000000000000000000000000000000000000;;	func NewForConfigOrDie(c *rest.Config) *AuthorizationClient {
0000000000000000000000000000000000000000;;		client, err := NewForConfig(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new AuthorizationClient for the given RESTClient.
0000000000000000000000000000000000000000;;	func New(c rest.Interface) *AuthorizationClient {
0000000000000000000000000000000000000000;;		return &AuthorizationClient{c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setConfigDefaults(config *rest.Config) error {
0000000000000000000000000000000000000000;;		g, err := scheme.Registry.Group("authorization.k8s.io")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config.APIPath = "/apis"
0000000000000000000000000000000000000000;;		if config.UserAgent == "" {
0000000000000000000000000000000000000000;;			config.UserAgent = rest.DefaultKubernetesUserAgent()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.GroupVersion == nil || config.GroupVersion.Group != g.GroupVersion.Group {
0000000000000000000000000000000000000000;;			gv := g.GroupVersion
0000000000000000000000000000000000000000;;			config.GroupVersion = &gv
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.NegotiatedSerializer = scheme.Codecs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.QPS == 0 {
0000000000000000000000000000000000000000;;			config.QPS = 5
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.Burst == 0 {
0000000000000000000000000000000000000000;;			config.Burst = 10
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RESTClient returns a RESTClient that is used to communicate
0000000000000000000000000000000000000000;;	// with API server by this client implementation.
0000000000000000000000000000000000000000;;	func (c *AuthorizationClient) RESTClient() rest.Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.restClient
0000000000000000000000000000000000000000;;	}
