0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
be92145a24355bdd9bc4105853dc5f64ffb0127c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package scheme
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		announced "k8s.io/apimachinery/pkg/apimachinery/announced"
0000000000000000000000000000000000000000;;		registered "k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		runtime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		serializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		core "k8s.io/kubernetes/pkg/api/install"
0000000000000000000000000000000000000000;;		admissionregistration "k8s.io/kubernetes/pkg/apis/admissionregistration/install"
0000000000000000000000000000000000000000;;		apps "k8s.io/kubernetes/pkg/apis/apps/install"
0000000000000000000000000000000000000000;;		authentication "k8s.io/kubernetes/pkg/apis/authentication/install"
0000000000000000000000000000000000000000;;		authorization "k8s.io/kubernetes/pkg/apis/authorization/install"
0000000000000000000000000000000000000000;;		autoscaling "k8s.io/kubernetes/pkg/apis/autoscaling/install"
0000000000000000000000000000000000000000;;		batch "k8s.io/kubernetes/pkg/apis/batch/install"
0000000000000000000000000000000000000000;;		certificates "k8s.io/kubernetes/pkg/apis/certificates/install"
0000000000000000000000000000000000000000;;		extensions "k8s.io/kubernetes/pkg/apis/extensions/install"
0000000000000000000000000000000000000000;;		networking "k8s.io/kubernetes/pkg/apis/networking/install"
0000000000000000000000000000000000000000;;		policy "k8s.io/kubernetes/pkg/apis/policy/install"
0000000000000000000000000000000000000000;;		rbac "k8s.io/kubernetes/pkg/apis/rbac/install"
0000000000000000000000000000000000000000;;		settings "k8s.io/kubernetes/pkg/apis/settings/install"
0000000000000000000000000000000000000000;;		storage "k8s.io/kubernetes/pkg/apis/storage/install"
0000000000000000000000000000000000000000;;		os "os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var Scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;	var Codecs = serializer.NewCodecFactory(Scheme)
0000000000000000000000000000000000000000;;	var ParameterCodec = runtime.NewParameterCodec(Scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var Registry = registered.NewOrDie(os.Getenv("KUBE_API_VERSIONS"))
0000000000000000000000000000000000000000;;	var GroupFactoryRegistry = make(announced.APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		v1.AddToGroupVersion(Scheme, schema.GroupVersion{Version: "v1"})
0000000000000000000000000000000000000000;;		Install(GroupFactoryRegistry, Registry, Scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Install registers the API group and adds types to a scheme
0000000000000000000000000000000000000000;;	func Install(groupFactoryRegistry announced.APIGroupFactoryRegistry, registry *registered.APIRegistrationManager, scheme *runtime.Scheme) {
0000000000000000000000000000000000000000;;		admissionregistration.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		core.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		apps.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		authentication.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		authorization.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		autoscaling.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		batch.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		certificates.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		extensions.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		networking.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		policy.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		rbac.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		settings.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;		storage.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtraInstall(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;	}
