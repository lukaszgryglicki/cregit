0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9dfff1da2fcd4e746c1d06aae1836dcb766c5465;pkg/client/clientset_generated/release_1_5/typed/apps/v1beta1/statefulset.go[pkg/client/clientset_generated/release_1_5/typed/apps/v1beta1/statefulset.go][pkg/client/clientset_generated/clientset/typed/apps/v1beta1/statefulset.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		types "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		rest "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		scheme "k8s.io/kubernetes/pkg/client/clientset_generated/clientset/scheme"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetsGetter has a method to return a StatefulSetInterface.
0000000000000000000000000000000000000000;;	// A group's client should implement this interface.
0000000000000000000000000000000000000000;;	type StatefulSetsGetter interface {
0000000000000000000000000000000000000000;;		StatefulSets(namespace string) StatefulSetInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetInterface has methods to work with StatefulSet resources.
0000000000000000000000000000000000000000;;	type StatefulSetInterface interface {
0000000000000000000000000000000000000000;;		Create(*v1beta1.StatefulSet) (*v1beta1.StatefulSet, error)
0000000000000000000000000000000000000000;;		Update(*v1beta1.StatefulSet) (*v1beta1.StatefulSet, error)
0000000000000000000000000000000000000000;;		UpdateStatus(*v1beta1.StatefulSet) (*v1beta1.StatefulSet, error)
0000000000000000000000000000000000000000;;		Delete(name string, options *v1.DeleteOptions) error
0000000000000000000000000000000000000000;;		DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
0000000000000000000000000000000000000000;;		Get(name string, options v1.GetOptions) (*v1beta1.StatefulSet, error)
0000000000000000000000000000000000000000;;		List(opts v1.ListOptions) (*v1beta1.StatefulSetList, error)
0000000000000000000000000000000000000000;;		Watch(opts v1.ListOptions) (watch.Interface, error)
0000000000000000000000000000000000000000;;		Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.StatefulSet, err error)
0000000000000000000000000000000000000000;;		StatefulSetExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// statefulSets implements StatefulSetInterface
0000000000000000000000000000000000000000;;	type statefulSets struct {
0000000000000000000000000000000000000000;;		client rest.Interface
0000000000000000000000000000000000000000;;		ns     string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newStatefulSets returns a StatefulSets
0000000000000000000000000000000000000000;;	func newStatefulSets(c *AppsV1beta1Client, namespace string) *statefulSets {
0000000000000000000000000000000000000000;;		return &statefulSets{
0000000000000000000000000000000000000000;;			client: c.RESTClient(),
0000000000000000000000000000000000000000;;			ns:     namespace,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create takes the representation of a statefulSet and creates it.  Returns the server's representation of the statefulSet, and an error, if there is any.
0000000000000000000000000000000000000000;;	func (c *statefulSets) Create(statefulSet *v1beta1.StatefulSet) (result *v1beta1.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		result = &v1beta1.StatefulSet{}
0000000000000000000000000000000000000000;;		err = c.client.Post().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			Body(statefulSet).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update takes the representation of a statefulSet and updates it. Returns the server's representation of the statefulSet, and an error, if there is any.
0000000000000000000000000000000000000000;;	func (c *statefulSets) Update(statefulSet *v1beta1.StatefulSet) (result *v1beta1.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		result = &v1beta1.StatefulSet{}
0000000000000000000000000000000000000000;;		err = c.client.Put().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			Name(statefulSet.Name).
0000000000000000000000000000000000000000;;			Body(statefulSet).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateStatus was generated because the type contains a Status member.
0000000000000000000000000000000000000000;;	// Add a +genclientstatus=false comment above the type to avoid generating UpdateStatus().
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *statefulSets) UpdateStatus(statefulSet *v1beta1.StatefulSet) (result *v1beta1.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		result = &v1beta1.StatefulSet{}
0000000000000000000000000000000000000000;;		err = c.client.Put().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			Name(statefulSet.Name).
0000000000000000000000000000000000000000;;			SubResource("status").
0000000000000000000000000000000000000000;;			Body(statefulSet).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete takes name of the statefulSet and deletes it. Returns an error if one occurs.
0000000000000000000000000000000000000000;;	func (c *statefulSets) Delete(name string, options *v1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		return c.client.Delete().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			Body(options).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteCollection deletes a collection of objects.
0000000000000000000000000000000000000000;;	func (c *statefulSets) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
0000000000000000000000000000000000000000;;		return c.client.Delete().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			VersionedParams(&listOptions, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Body(options).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get takes name of the statefulSet, and returns the corresponding statefulSet object, and an error if there is any.
0000000000000000000000000000000000000000;;	func (c *statefulSets) Get(name string, options v1.GetOptions) (result *v1beta1.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		result = &v1beta1.StatefulSet{}
0000000000000000000000000000000000000000;;		err = c.client.Get().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			VersionedParams(&options, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List takes label and field selectors, and returns the list of StatefulSets that match those selectors.
0000000000000000000000000000000000000000;;	func (c *statefulSets) List(opts v1.ListOptions) (result *v1beta1.StatefulSetList, err error) {
0000000000000000000000000000000000000000;;		result = &v1beta1.StatefulSetList{}
0000000000000000000000000000000000000000;;		err = c.client.Get().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			VersionedParams(&opts, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watch returns a watch.Interface that watches the requested statefulSets.
0000000000000000000000000000000000000000;;	func (c *statefulSets) Watch(opts v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		opts.Watch = true
0000000000000000000000000000000000000000;;		return c.client.Get().
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			VersionedParams(&opts, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Watch()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patch applies the patch and returns the patched statefulSet.
0000000000000000000000000000000000000000;;	func (c *statefulSets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.StatefulSet, err error) {
0000000000000000000000000000000000000000;;		result = &v1beta1.StatefulSet{}
0000000000000000000000000000000000000000;;		err = c.client.Patch(pt).
0000000000000000000000000000000000000000;;			Namespace(c.ns).
0000000000000000000000000000000000000000;;			Resource("statefulsets").
0000000000000000000000000000000000000000;;			SubResource(subresources...).
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			Body(data).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
