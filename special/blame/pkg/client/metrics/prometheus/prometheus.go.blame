0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
62a8e51e5196864b96f4a50ee9a7b2eae836af3a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package prometheus creates and registers prometheus metrics with
0000000000000000000000000000000000000000;;	// rest clients. To use this package, you just have to import it.
0000000000000000000000000000000000000000;;	package prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/metrics"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// requestLatency is a Prometheus Summary metric type partitioned by
0000000000000000000000000000000000000000;;		// "verb" and "url" labels. It is used for the rest client latency metrics.
0000000000000000000000000000000000000000;;		requestLatency = prometheus.NewHistogramVec(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Name:    "rest_client_request_latency_seconds",
0000000000000000000000000000000000000000;;				Help:    "Request latency in seconds. Broken down by verb and URL.",
0000000000000000000000000000000000000000;;				Buckets: prometheus.ExponentialBuckets(0.001, 2, 10),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"verb", "url"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requestResult = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Name: "rest_client_requests_total",
0000000000000000000000000000000000000000;;				Help: "Number of HTTP requests, partitioned by status code, method, and host.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"code", "method", "host"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(requestLatency)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(requestResult)
0000000000000000000000000000000000000000;;		metrics.Register(&latencyAdapter{requestLatency}, &resultAdapter{requestResult})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type latencyAdapter struct {
0000000000000000000000000000000000000000;;		m *prometheus.HistogramVec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *latencyAdapter) Observe(verb string, u url.URL, latency time.Duration) {
0000000000000000000000000000000000000000;;		l.m.WithLabelValues(verb, u.String()).Observe(latency.Seconds())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type resultAdapter struct {
0000000000000000000000000000000000000000;;		m *prometheus.CounterVec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *resultAdapter) Increment(code, method, host string) {
0000000000000000000000000000000000000000;;		r.m.WithLabelValues(code, method, host).Inc()
0000000000000000000000000000000000000000;;	}
