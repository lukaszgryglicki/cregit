0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
bbb765945c4852a29a7919d60180aa915976537a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package chaosclient
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestLogChaos struct {
0000000000000000000000000000000000000000;;		*testing.T
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t TestLogChaos) OnChaos(req *http.Request, c Chaos) {
0000000000000000000000000000000000000000;;		t.Logf("CHAOS: chaotic behavior for %s %s: %v", req.Method, req.URL.String(), c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unwrapURLError(err error) error {
0000000000000000000000000000000000000000;;		if urlErr, ok := err.(*url.Error); ok && urlErr != nil {
0000000000000000000000000000000000000000;;			return urlErr.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestChaos(t *testing.T) {
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		client := http.Client{
0000000000000000000000000000000000000000;;			Transport: NewChaosRoundTripper(http.DefaultTransport, TestLogChaos{t}, ErrSimulatedConnectionResetByPeer),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := client.Get(server.URL)
0000000000000000000000000000000000000000;;		if unwrapURLError(err) != ErrSimulatedConnectionResetByPeer.error {
0000000000000000000000000000000000000000;;			t.Fatalf("expected reset by peer: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected no response object: %#v", resp)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPartialChaos(t *testing.T) {
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		seed := NewSeed(1)
0000000000000000000000000000000000000000;;		client := http.Client{
0000000000000000000000000000000000000000;;			Transport: NewChaosRoundTripper(
0000000000000000000000000000000000000000;;				http.DefaultTransport, TestLogChaos{t},
0000000000000000000000000000000000000000;;				seed.P(0.5, ErrSimulatedConnectionResetByPeer),
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		success, fail := 0, 0
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			_, err := client.Get(server.URL)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fail++
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				success++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if success > 1 && fail > 1 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
