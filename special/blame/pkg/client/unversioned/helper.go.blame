0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9472c561825dd219ec6085421403b772dfa76a1f;pkg/client/helper.go[pkg/client/helper.go][pkg/client/unversioned/helper.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unversioned
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		// Import solely to initialize client auth plugins.
0000000000000000000000000000000000000000;;		_ "k8s.io/client-go/plugin/pkg/client/auth"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		legacyAPIPath  = "/api"
0000000000000000000000000000000000000000;;		defaultAPIPath = "/apis"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKubernetesDefaults sets default values on the provided client config for accessing the
0000000000000000000000000000000000000000;;	// Kubernetes API or returns an error if any of the defaults are impossible or invalid.
0000000000000000000000000000000000000000;;	// TODO: this method needs to be split into one that sets defaults per group, expected to be fix in PR "Refactoring clientcache.go and helper.go #14592"
0000000000000000000000000000000000000000;;	func SetKubernetesDefaults(config *restclient.Config) error {
0000000000000000000000000000000000000000;;		if config.APIPath == "" {
0000000000000000000000000000000000000000;;			config.APIPath = legacyAPIPath
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO chase down uses and tolerate nil
0000000000000000000000000000000000000000;;		if config.GroupVersion == nil {
0000000000000000000000000000000000000000;;			config.GroupVersion = &schema.GroupVersion{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.NegotiatedSerializer == nil {
0000000000000000000000000000000000000000;;			config.NegotiatedSerializer = api.Codecs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return restclient.SetKubernetesDefaults(config)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setGroupDefaults(groupName string, config *restclient.Config) error {
0000000000000000000000000000000000000000;;		config.APIPath = defaultAPIPath
0000000000000000000000000000000000000000;;		if config.UserAgent == "" {
0000000000000000000000000000000000000000;;			config.UserAgent = restclient.DefaultKubernetesUserAgent()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.GroupVersion == nil || config.GroupVersion.Group != groupName {
0000000000000000000000000000000000000000;;			g, err := api.Registry.Group(groupName)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			copyGroupVersion := g.GroupVersion
0000000000000000000000000000000000000000;;			config.GroupVersion = &copyGroupVersion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.NegotiatedSerializer == nil {
0000000000000000000000000000000000000000;;			config.NegotiatedSerializer = api.Codecs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
