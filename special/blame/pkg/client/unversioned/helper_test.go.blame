0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9472c561825dd219ec6085421403b772dfa76a1f;pkg/client/helper_test.go[pkg/client/helper_test.go][pkg/client/unversioned/helper_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unversioned
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetKubernetesDefaults(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Config restclient.Config
0000000000000000000000000000000000000000;;			After  restclient.Config
0000000000000000000000000000000000000000;;			Err    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				restclient.Config{},
0000000000000000000000000000000000000000;;				restclient.Config{
0000000000000000000000000000000000000000;;					APIPath: "/api",
0000000000000000000000000000000000000000;;					ContentConfig: restclient.ContentConfig{
0000000000000000000000000000000000000000;;						GroupVersion:         &schema.GroupVersion{},
0000000000000000000000000000000000000000;;						NegotiatedSerializer: testapi.Default.NegotiatedSerializer(),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Add this test back when we fixed config and SetKubernetesDefaults
0000000000000000000000000000000000000000;;			// {
0000000000000000000000000000000000000000;;			// 	restclient.Config{
0000000000000000000000000000000000000000;;			// 		GroupVersion: &schema.GroupVersion{Group: "not.a.group", Version: "not_an_api"},
0000000000000000000000000000000000000000;;			// 	},
0000000000000000000000000000000000000000;;			// 	restclient.Config{},
0000000000000000000000000000000000000000;;			// 	true,
0000000000000000000000000000000000000000;;			// },
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			val := &testCase.Config
0000000000000000000000000000000000000000;;			err := SetKubernetesDefaults(val)
0000000000000000000000000000000000000000;;			val.UserAgent = ""
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil && testCase.Err:
0000000000000000000000000000000000000000;;				t.Errorf("expected error but was nil")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil && !testCase.Err:
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil:
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(*val, testCase.After) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected result object: %#v", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHelperGetServerAPIVersions(t *testing.T) {
0000000000000000000000000000000000000000;;		expect := []string{"v1", "v2", "v3"}
0000000000000000000000000000000000000000;;		APIVersions := metav1.APIVersions{Versions: expect}
0000000000000000000000000000000000000000;;		expect = append(expect, "group1/v1", "group1/v2", "group2/v1", "group2/v2")
0000000000000000000000000000000000000000;;		APIGroupList := metav1.APIGroupList{
0000000000000000000000000000000000000000;;			Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							GroupVersion: "group1/v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							GroupVersion: "group1/v2",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							GroupVersion: "group2/v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							GroupVersion: "group2/v2",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			var output []byte
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			switch req.URL.Path {
0000000000000000000000000000000000000000;;			case "/api":
0000000000000000000000000000000000000000;;				output, err = json.Marshal(APIVersions)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case "/apis":
0000000000000000000000000000000000000000;;				output, err = json.Marshal(APIGroupList)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write(output)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		got, err := restclient.ServerAPIVersions(&restclient.Config{Host: server.URL, ContentConfig: restclient.ContentConfig{GroupVersion: &schema.GroupVersion{Group: "invalid version", Version: "one"}, NegotiatedSerializer: testapi.Default.NegotiatedSerializer()}})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expect, got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetsCodec(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			Err                  bool
0000000000000000000000000000000000000000;;			Prefix               string
0000000000000000000000000000000000000000;;			NegotiatedSerializer runtime.NegotiatedSerializer
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			api.Registry.GroupOrDie(api.GroupName).GroupVersion.Version: {
0000000000000000000000000000000000000000;;				Err:                  false,
0000000000000000000000000000000000000000;;				Prefix:               "/api/" + api.Registry.GroupOrDie(api.GroupName).GroupVersion.Version,
0000000000000000000000000000000000000000;;				NegotiatedSerializer: testapi.Default.NegotiatedSerializer(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Add this test back when we fixed config and SetKubernetesDefaults
0000000000000000000000000000000000000000;;			// "invalidVersion":                       {true, "", nil},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for version, expected := range testCases {
0000000000000000000000000000000000000000;;			conf := &restclient.Config{
0000000000000000000000000000000000000000;;				Host: "127.0.0.1",
0000000000000000000000000000000000000000;;				ContentConfig: restclient.ContentConfig{
0000000000000000000000000000000000000000;;					GroupVersion: &schema.GroupVersion{Version: version},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var versionedPath string
0000000000000000000000000000000000000000;;			err := SetKubernetesDefaults(conf)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				_, versionedPath, err = restclient.DefaultServerURL(conf.Host, conf.APIPath, *conf.GroupVersion, false)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil && expected.Err:
0000000000000000000000000000000000000000;;				t.Errorf("expected error but was nil")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil && !expected.Err:
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil:
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := expected.Prefix, versionedPath; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %#v, got %#v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := expected.NegotiatedSerializer, conf.NegotiatedSerializer; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %#v, got %#v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
