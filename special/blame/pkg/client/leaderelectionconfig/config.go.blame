0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6b5acfc08939d848e6c49aa7ca0324869a0ee04c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package leaderelectionconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		rl "k8s.io/client-go/tools/leaderelection/resourcelock"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/componentconfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DefaultLeaseDuration = 15 * time.Second
0000000000000000000000000000000000000000;;		DefaultRenewDeadline = 10 * time.Second
0000000000000000000000000000000000000000;;		DefaultRetryPeriod   = 2 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DefaultLeaderElectionConfiguration() componentconfig.LeaderElectionConfiguration {
0000000000000000000000000000000000000000;;		return componentconfig.LeaderElectionConfiguration{
0000000000000000000000000000000000000000;;			LeaderElect:   false,
0000000000000000000000000000000000000000;;			LeaseDuration: metav1.Duration{Duration: DefaultLeaseDuration},
0000000000000000000000000000000000000000;;			RenewDeadline: metav1.Duration{Duration: DefaultRenewDeadline},
0000000000000000000000000000000000000000;;			RetryPeriod:   metav1.Duration{Duration: DefaultRetryPeriod},
0000000000000000000000000000000000000000;;			ResourceLock:  rl.EndpointsResourceLock,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BindFlags binds the common LeaderElectionCLIConfig flags to a flagset
0000000000000000000000000000000000000000;;	func BindFlags(l *componentconfig.LeaderElectionConfiguration, fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		fs.BoolVar(&l.LeaderElect, "leader-elect", l.LeaderElect, ""+
0000000000000000000000000000000000000000;;			"Start a leader election client and gain leadership before "+
0000000000000000000000000000000000000000;;			"executing the main loop. Enable this when running replicated "+
0000000000000000000000000000000000000000;;			"components for high availability.")
0000000000000000000000000000000000000000;;		fs.DurationVar(&l.LeaseDuration.Duration, "leader-elect-lease-duration", l.LeaseDuration.Duration, ""+
0000000000000000000000000000000000000000;;			"The duration that non-leader candidates will wait after observing a leadership "+
0000000000000000000000000000000000000000;;			"renewal until attempting to acquire leadership of a led but unrenewed leader "+
0000000000000000000000000000000000000000;;			"slot. This is effectively the maximum duration that a leader can be stopped "+
0000000000000000000000000000000000000000;;			"before it is replaced by another candidate. This is only applicable if leader "+
0000000000000000000000000000000000000000;;			"election is enabled.")
0000000000000000000000000000000000000000;;		fs.DurationVar(&l.RenewDeadline.Duration, "leader-elect-renew-deadline", l.RenewDeadline.Duration, ""+
0000000000000000000000000000000000000000;;			"The interval between attempts by the acting master to renew a leadership slot "+
0000000000000000000000000000000000000000;;			"before it stops leading. This must be less than or equal to the lease duration. "+
0000000000000000000000000000000000000000;;			"This is only applicable if leader election is enabled.")
0000000000000000000000000000000000000000;;		fs.DurationVar(&l.RetryPeriod.Duration, "leader-elect-retry-period", l.RetryPeriod.Duration, ""+
0000000000000000000000000000000000000000;;			"The duration the clients should wait between attempting acquisition and renewal "+
0000000000000000000000000000000000000000;;			"of a leadership. This is only applicable if leader election is enabled.")
0000000000000000000000000000000000000000;;		fs.StringVar(&l.ResourceLock, "leader-elect-resource-lock", l.ResourceLock, ""+
0000000000000000000000000000000000000000;;			"The type of resource resource object that is used for locking during"+
0000000000000000000000000000000000000000;;			"leader election. Supported options are `endpoints` (default) and `configmap`.")
0000000000000000000000000000000000000000;;	}
