0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
75d24ec01a9bf21c11e6217a4686a76a4bd8e805;pkg/kubectl/custom_column_printer_test.go[pkg/kubectl/custom_column_printer_test.go][pkg/printers/customcolumn_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package printers_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMassageJSONPath(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			input          string
0000000000000000000000000000000000000000;;			expectedOutput string
0000000000000000000000000000000000000000;;			expectErr      bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{input: "foo.bar", expectedOutput: "{.foo.bar}"},
0000000000000000000000000000000000000000;;			{input: "{foo.bar}", expectedOutput: "{.foo.bar}"},
0000000000000000000000000000000000000000;;			{input: ".foo.bar", expectedOutput: "{.foo.bar}"},
0000000000000000000000000000000000000000;;			{input: "{.foo.bar}", expectedOutput: "{.foo.bar}"},
0000000000000000000000000000000000000000;;			{input: "", expectedOutput: ""},
0000000000000000000000000000000000000000;;			{input: "{foo.bar", expectErr: true},
0000000000000000000000000000000000000000;;			{input: "foo.bar}", expectErr: true},
0000000000000000000000000000000000000000;;			{input: "{foo.bar}}", expectErr: true},
0000000000000000000000000000000000000000;;			{input: "{{foo.bar}", expectErr: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			output, err := printers.RelaxedJSONPathExpression(test.input)
0000000000000000000000000000000000000000;;			if err != nil && !test.expectErr {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if output != test.expectedOutput {
0000000000000000000000000000000000000000;;				t.Errorf("input: %s, expected: %s, saw: %s", test.input, test.expectedOutput, output)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewColumnPrinterFromSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			spec            string
0000000000000000000000000000000000000000;;			expectedColumns []printers.Column
0000000000000000000000000000000000000000;;			expectErr       bool
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;			noHeaders       bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				name:      "empty",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "invalid",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				name:      "invalid1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "invalid=foobar",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				name:      "invalid2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "invalid,foobar:blah",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				name:      "invalid3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: "NAME:metadata.name,API_VERSION:apiVersion",
0000000000000000000000000000000000000000;;				name: "ok",
0000000000000000000000000000000000000000;;				expectedColumns: []printers.Column{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "NAME",
0000000000000000000000000000000000000000;;						FieldSpec: "{.metadata.name}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "API_VERSION",
0000000000000000000000000000000000000000;;						FieldSpec: "{.apiVersion}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "API_VERSION:apiVersion",
0000000000000000000000000000000000000000;;				name:      "no-headers",
0000000000000000000000000000000000000000;;				noHeaders: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			printer, err := printers.NewCustomColumnsPrinterFromSpec(test.spec, api.Codecs.UniversalDecoder(), test.noHeaders)
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] unexpected non-error", test.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.noHeaders {
0000000000000000000000000000000000000000;;				buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				printer.PrintObj(&api.Pod{}, buffer)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("An error occurred printing Pod: %#v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if contains(strings.Fields(buffer.String()), "API_VERSION") {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected header API_VERSION")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			} else if !reflect.DeepEqual(test.expectedColumns, printer.Columns) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s]\nexpected:\n%v\nsaw:\n%v\n", test.name, test.expectedColumns, printer.Columns)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func contains(arr []string, s string) bool {
0000000000000000000000000000000000000000;;		for i := range arr {
0000000000000000000000000000000000000000;;			if arr[i] == s {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const exampleTemplateOne = `NAME               API_VERSION
0000000000000000000000000000000000000000;;	{metadata.name}    {apiVersion}`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const exampleTemplateTwo = `NAME               		API_VERSION
0000000000000000000000000000000000000000;;								{metadata.name}    {apiVersion}`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewColumnPrinterFromTemplate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			spec            string
0000000000000000000000000000000000000000;;			expectedColumns []printers.Column
0000000000000000000000000000000000000000;;			expectErr       bool
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				name:      "empty",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "invalid",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				name:      "invalid1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "invalid=foobar",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				name:      "invalid2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "invalid,foobar:blah",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				name:      "invalid3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: exampleTemplateOne,
0000000000000000000000000000000000000000;;				name: "ok",
0000000000000000000000000000000000000000;;				expectedColumns: []printers.Column{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "NAME",
0000000000000000000000000000000000000000;;						FieldSpec: "{.metadata.name}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "API_VERSION",
0000000000000000000000000000000000000000;;						FieldSpec: "{.apiVersion}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: exampleTemplateTwo,
0000000000000000000000000000000000000000;;				name: "ok-2",
0000000000000000000000000000000000000000;;				expectedColumns: []printers.Column{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "NAME",
0000000000000000000000000000000000000000;;						FieldSpec: "{.metadata.name}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "API_VERSION",
0000000000000000000000000000000000000000;;						FieldSpec: "{.apiVersion}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			reader := bytes.NewBufferString(test.spec)
0000000000000000000000000000000000000000;;			printer, err := printers.NewCustomColumnsPrinterFromTemplate(reader, api.Codecs.UniversalDecoder())
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] unexpected non-error", test.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedColumns, printer.Columns) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s]\nexpected:\n%v\nsaw:\n%v\n", test.name, test.expectedColumns, printer.Columns)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestColumnPrint(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			columns        []printers.Column
0000000000000000000000000000000000000000;;			obj            runtime.Object
0000000000000000000000000000000000000000;;			expectedOutput string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				columns: []printers.Column{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "NAME",
0000000000000000000000000000000000000000;;						FieldSpec: "{.metadata.name}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				obj: &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}},
0000000000000000000000000000000000000000;;				expectedOutput: `NAME
0000000000000000000000000000000000000000;;	foo
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				columns: []printers.Column{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "NAME",
0000000000000000000000000000000000000000;;						FieldSpec: "{.metadata.name}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				obj: &v1.PodList{
0000000000000000000000000000000000000000;;					Items: []v1.Pod{
0000000000000000000000000000000000000000;;						{ObjectMeta: metav1.ObjectMeta{Name: "foo"}},
0000000000000000000000000000000000000000;;						{ObjectMeta: metav1.ObjectMeta{Name: "bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedOutput: `NAME
0000000000000000000000000000000000000000;;	foo
0000000000000000000000000000000000000000;;	bar
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				columns: []printers.Column{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "NAME",
0000000000000000000000000000000000000000;;						FieldSpec: "{.metadata.name}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Header:    "API_VERSION",
0000000000000000000000000000000000000000;;						FieldSpec: "{.apiVersion}",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				obj: &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, TypeMeta: metav1.TypeMeta{APIVersion: "baz"}},
0000000000000000000000000000000000000000;;				expectedOutput: `NAME      API_VERSION
0000000000000000000000000000000000000000;;	foo       baz
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			printer := &printers.CustomColumnsPrinter{
0000000000000000000000000000000000000000;;				Columns: test.columns,
0000000000000000000000000000000000000000;;				Decoder: api.Codecs.UniversalDecoder(),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(test.obj, buffer); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buffer.String() != test.expectedOutput {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n'%s'\nsaw\n'%s'\n", test.expectedOutput, buffer.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
