0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d4c1bea151e6a908e64c0756c48fb11aeb0af019;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package printers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourcePrinter is an interface that knows how to print runtime objects.
0000000000000000000000000000000000000000;;	type ResourcePrinter interface {
0000000000000000000000000000000000000000;;		// Print receives a runtime object, formats it and prints it to a writer.
0000000000000000000000000000000000000000;;		PrintObj(runtime.Object, io.Writer) error
0000000000000000000000000000000000000000;;		HandledResources() []string
0000000000000000000000000000000000000000;;		//Can be used to print out warning/clarifications if needed
0000000000000000000000000000000000000000;;		//after all objects were printed
0000000000000000000000000000000000000000;;		AfterPrint(io.Writer, string) error
0000000000000000000000000000000000000000;;		// Identify if it is a generic printer
0000000000000000000000000000000000000000;;		IsGeneric() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourcePrinterFunc is a function that can print objects
0000000000000000000000000000000000000000;;	type ResourcePrinterFunc func(runtime.Object, io.Writer) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrintObj implements ResourcePrinter
0000000000000000000000000000000000000000;;	func (fn ResourcePrinterFunc) PrintObj(obj runtime.Object, w io.Writer) error {
0000000000000000000000000000000000000000;;		return fn(obj, w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: implement HandledResources()
0000000000000000000000000000000000000000;;	func (fn ResourcePrinterFunc) HandledResources() []string {
0000000000000000000000000000000000000000;;		return []string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fn ResourcePrinterFunc) AfterPrint(io.Writer, string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fn ResourcePrinterFunc) IsGeneric() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrintOptions struct {
0000000000000000000000000000000000000000;;		NoHeaders          bool
0000000000000000000000000000000000000000;;		WithNamespace      bool
0000000000000000000000000000000000000000;;		WithKind           bool
0000000000000000000000000000000000000000;;		Wide               bool
0000000000000000000000000000000000000000;;		ShowAll            bool
0000000000000000000000000000000000000000;;		ShowLabels         bool
0000000000000000000000000000000000000000;;		AbsoluteTimestamps bool
0000000000000000000000000000000000000000;;		Kind               string
0000000000000000000000000000000000000000;;		ColumnLabels       []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describer generates output for the named resource or an error
0000000000000000000000000000000000000000;;	// if the output could not be generated. Implementers typically
0000000000000000000000000000000000000000;;	// abstract the retrieval of the named object from a remote server.
0000000000000000000000000000000000000000;;	type Describer interface {
0000000000000000000000000000000000000000;;		Describe(namespace, name string, describerSettings DescriberSettings) (output string, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescriberSettings holds display configuration for each object
0000000000000000000000000000000000000000;;	// describer to control what is printed.
0000000000000000000000000000000000000000;;	type DescriberSettings struct {
0000000000000000000000000000000000000000;;		ShowEvents bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectDescriber is an interface for displaying arbitrary objects with extra
0000000000000000000000000000000000000000;;	// information. Use when an object is in hand (on disk, or already retrieved).
0000000000000000000000000000000000000000;;	// Implementers may ignore the additional information passed on extra, or use it
0000000000000000000000000000000000000000;;	// by default. ObjectDescribers may return ErrNoDescriber if no suitable describer
0000000000000000000000000000000000000000;;	// is found.
0000000000000000000000000000000000000000;;	type ObjectDescriber interface {
0000000000000000000000000000000000000000;;		DescribeObject(object interface{}, extra ...interface{}) (output string, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrNoDescriber is a structured error indicating the provided object or objects
0000000000000000000000000000000000000000;;	// cannot be described.
0000000000000000000000000000000000000000;;	type ErrNoDescriber struct {
0000000000000000000000000000000000000000;;		Types []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error implements the error interface.
0000000000000000000000000000000000000000;;	func (e ErrNoDescriber) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("no describer has been defined for %v", e.Types)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OutputOptions represents resource output options which is used to generate a resource printer.
0000000000000000000000000000000000000000;;	type OutputOptions struct {
0000000000000000000000000000000000000000;;		// supported Format types can be found in pkg/printers/printers.go
0000000000000000000000000000000000000000;;		FmtType string
0000000000000000000000000000000000000000;;		FmtArg  string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// indicates if it is OK to ignore missing keys for rendering an output template.
0000000000000000000000000000000000000000;;		AllowMissingKeys bool
0000000000000000000000000000000000000000;;	}
