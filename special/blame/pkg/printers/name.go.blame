0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d4c1bea151e6a908e64c0756c48fb11aeb0af019;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package printers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamePrinter is an implementation of ResourcePrinter which outputs "resource/name" pair of an object.
0000000000000000000000000000000000000000;;	type NamePrinter struct {
0000000000000000000000000000000000000000;;		Decoders []runtime.Decoder
0000000000000000000000000000000000000000;;		Typer    runtime.ObjectTyper
0000000000000000000000000000000000000000;;		Mapper   meta.RESTMapper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *NamePrinter) AfterPrint(w io.Writer, res string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrintObj is an implementation of ResourcePrinter.PrintObj which decodes the object
0000000000000000000000000000000000000000;;	// and print "resource/name" pair. If the object is a List, print all items in it.
0000000000000000000000000000000000000000;;	func (p *NamePrinter) PrintObj(obj runtime.Object, w io.Writer) error {
0000000000000000000000000000000000000000;;		if meta.IsListType(obj) {
0000000000000000000000000000000000000000;;			items, err := meta.ExtractList(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs := runtime.DecodeList(items, p.Decoders...); len(errs) > 0 {
0000000000000000000000000000000000000000;;				return utilerrors.NewAggregate(errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, obj := range items {
0000000000000000000000000000000000000000;;				if err := p.PrintObj(obj, w); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name := "<unknown>"
0000000000000000000000000000000000000000;;		if acc, err := meta.Accessor(obj); err == nil {
0000000000000000000000000000000000000000;;			if n := acc.GetName(); len(n) > 0 {
0000000000000000000000000000000000000000;;				name = n
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupVersionKind := obj.GetObjectKind().GroupVersionKind()
0000000000000000000000000000000000000000;;		if len(groupVersionKind.Kind) > 0 {
0000000000000000000000000000000000000000;;			if mappings, err := p.Mapper.RESTMappings(groupVersionKind.GroupKind(), groupVersionKind.Version); err == nil && len(mappings) > 0 {
0000000000000000000000000000000000000000;;				fmt.Fprintf(w, "%s/%s\n", mappings[0].Resource, name)
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if gvks, _, err := p.Typer.ObjectKinds(obj); err == nil {
0000000000000000000000000000000000000000;;			for _, gvk := range gvks {
0000000000000000000000000000000000000000;;				if mappings, err := p.Mapper.RESTMappings(gvk.GroupKind(), gvk.Version); err == nil && len(mappings) > 0 {
0000000000000000000000000000000000000000;;					fmt.Fprintf(w, "%s/%s\n", mappings[0].Resource, name)
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Fprintf(w, "<unknown>/%s\n", name)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: implement HandledResources()
0000000000000000000000000000000000000000;;	func (p *NamePrinter) HandledResources() []string {
0000000000000000000000000000000000000000;;		return []string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *NamePrinter) IsGeneric() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
