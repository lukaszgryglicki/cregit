0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
109abe04daa011acab1be0d57acf1b4cc20aaf7d;pkg/kubectl/resource_printer_test.go[pkg/kubectl/resource_printer_test.go][pkg/printers/internalversion/printers_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		metav1alpha1 "k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		yamlserializer "k8s.io/apimachinery/pkg/runtime/serializer/yaml"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/policy"
0000000000000000000000000000000000000000;;		kubectltesting "k8s.io/kubernetes/pkg/kubectl/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		api.Scheme.AddKnownTypes(testapi.Default.InternalGroupVersion(), &kubectltesting.TestStruct{})
0000000000000000000000000000000000000000;;		api.Scheme.AddKnownTypes(api.Registry.GroupOrDie(api.GroupName).GroupVersion, &kubectltesting.TestStruct{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var testData = kubectltesting.TestStruct{
0000000000000000000000000000000000000000;;		Key:        "testValue",
0000000000000000000000000000000000000000;;		Map:        map[string]int{"TestSubkey": 1},
0000000000000000000000000000000000000000;;		StringList: []string{"a", "b", "c"},
0000000000000000000000000000000000000000;;		IntList:    []int{1, 2, 3},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVersionedPrinter(t *testing.T) {
0000000000000000000000000000000000000000;;		original := &kubectltesting.TestStruct{Key: "value"}
0000000000000000000000000000000000000000;;		p := printers.NewVersionedPrinter(
0000000000000000000000000000000000000000;;			printers.ResourcePrinterFunc(func(obj runtime.Object, w io.Writer) error {
0000000000000000000000000000000000000000;;				if obj == original {
0000000000000000000000000000000000000000;;					t.Fatalf("object should not be identical: %#v", obj)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if obj.(*kubectltesting.TestStruct).Key != "value" {
0000000000000000000000000000000000000000;;					t.Fatalf("object was not converted: %#v", obj)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			api.Scheme,
0000000000000000000000000000000000000000;;			api.Registry.GroupOrDie(api.GroupName).GroupVersion,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err := p.PrintObj(original, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintDefault(t *testing.T) {
0000000000000000000000000000000000000000;;		printerTests := []struct {
0000000000000000000000000000000000000000;;			Name   string
0000000000000000000000000000000000000000;;			Format string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"test wide", "wide"},
0000000000000000000000000000000000000000;;			{"test blank format", ""},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range printerTests {
0000000000000000000000000000000000000000;;			printer, err := printers.GetStandardPrinter(&printers.OutputOptions{AllowMissingKeys: false}, false, nil, nil, api.Codecs.LegacyCodec(api.Registry.EnabledVersions()...), []runtime.Decoder{api.Codecs.UniversalDecoder(), unstructured.UnstructuredJSONScheme}, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, unexpected error: %#v", test.Name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if printer.IsGeneric() {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, printer should not be generic: %#v", test.Name, printer)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintUnstructuredObject(t *testing.T) {
0000000000000000000000000000000000000000;;		obj := &unstructured.Unstructured{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"apiVersion": "v1",
0000000000000000000000000000000000000000;;				"kind":       "Test",
0000000000000000000000000000000000000000;;				"dummy1":     "present",
0000000000000000000000000000000000000000;;				"dummy2":     "present",
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":              "MyName",
0000000000000000000000000000000000000000;;					"namespace":         "MyNamespace",
0000000000000000000000000000000000000000;;					"creationTimestamp": "2017-04-01T00:00:00Z",
0000000000000000000000000000000000000000;;					"resourceVersion":   123,
0000000000000000000000000000000000000000;;					"uid":               "00000000-0000-0000-0000-000000000001",
0000000000000000000000000000000000000000;;					"dummy3":            "present",
0000000000000000000000000000000000000000;;					"labels":            map[string]interface{}{"test": "other"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				/*"items": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"itemBool": true,
0000000000000000000000000000000000000000;;						"itemInt":  42,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},*/
0000000000000000000000000000000000000000;;				"url":    "http://localhost",
0000000000000000000000000000000000000000;;				"status": "ok",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;			options  printers.PrintOptions
0000000000000000000000000000000000000000;;			object   runtime.Object
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				expected: "NAME\\s+AGE\nMyName\\s+\\d+",
0000000000000000000000000000000000000000;;				object:   obj,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				options: printers.PrintOptions{
0000000000000000000000000000000000000000;;					WithNamespace: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "NAMESPACE\\s+NAME\\s+AGE\nMyNamespace\\s+MyName\\s+\\d+",
0000000000000000000000000000000000000000;;				object:   obj,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				options: printers.PrintOptions{
0000000000000000000000000000000000000000;;					ShowLabels:    true,
0000000000000000000000000000000000000000;;					WithNamespace: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "NAMESPACE\\s+NAME\\s+AGE\\s+LABELS\nMyNamespace\\s+MyName\\s+\\d+\\w+\\s+test\\=other",
0000000000000000000000000000000000000000;;				object:   obj,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				expected: "NAME\\s+AGE\nMyName\\s+\\d+\\w+\nMyName2\\s+\\d+",
0000000000000000000000000000000000000000;;				object: &unstructured.Unstructured{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{
0000000000000000000000000000000000000000;;						"apiVersion": "v1",
0000000000000000000000000000000000000000;;						"kind":       "Test",
0000000000000000000000000000000000000000;;						"dummy1":     "present",
0000000000000000000000000000000000000000;;						"dummy2":     "present",
0000000000000000000000000000000000000000;;						"items": []interface{}{
0000000000000000000000000000000000000000;;							map[string]interface{}{
0000000000000000000000000000000000000000;;								"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;									"name":              "MyName",
0000000000000000000000000000000000000000;;									"namespace":         "MyNamespace",
0000000000000000000000000000000000000000;;									"creationTimestamp": "2017-04-01T00:00:00Z",
0000000000000000000000000000000000000000;;									"resourceVersion":   123,
0000000000000000000000000000000000000000;;									"uid":               "00000000-0000-0000-0000-000000000001",
0000000000000000000000000000000000000000;;									"dummy3":            "present",
0000000000000000000000000000000000000000;;									"labels":            map[string]interface{}{"test": "other"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							map[string]interface{}{
0000000000000000000000000000000000000000;;								"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;									"name":              "MyName2",
0000000000000000000000000000000000000000;;									"namespace":         "MyNamespace",
0000000000000000000000000000000000000000;;									"creationTimestamp": "2017-04-01T00:00:00Z",
0000000000000000000000000000000000000000;;									"resourceVersion":   123,
0000000000000000000000000000000000000000;;									"uid":               "00000000-0000-0000-0000-000000000001",
0000000000000000000000000000000000000000;;									"dummy3":            "present",
0000000000000000000000000000000000000000;;									"labels":            "badlabel",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						"url":    "http://localhost",
0000000000000000000000000000000000000000;;						"status": "ok",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			out.Reset()
0000000000000000000000000000000000000000;;			printer := printers.NewHumanReadablePrinter(nil, nil, test.options).With(AddDefaultHandlers)
0000000000000000000000000000000000000000;;			printer.PrintObj(test.object, out)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			matches, err := regexp.MatchString(test.expected, out.String())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !matches {
0000000000000000000000000000000000000000;;				t.Errorf("wanted:\n%s\ngot:\n%s", test.expected, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestPrintType struct {
0000000000000000000000000000000000000000;;		Data string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *TestPrintType) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestUnknownType struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *TestUnknownType) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrinter(t *testing.T) {
0000000000000000000000000000000000000000;;		//test inputs
0000000000000000000000000000000000000000;;		simpleTest := &TestPrintType{"foo"}
0000000000000000000000000000000000000000;;		podTest := &api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}}
0000000000000000000000000000000000000000;;		podListTest := &api.PodList{
0000000000000000000000000000000000000000;;			Items: []api.Pod{
0000000000000000000000000000000000000000;;				{ObjectMeta: metav1.ObjectMeta{Name: "foo"}},
0000000000000000000000000000000000000000;;				{ObjectMeta: metav1.ObjectMeta{Name: "bar"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emptyListTest := &api.PodList{}
0000000000000000000000000000000000000000;;		testapi, err := api.Scheme.ConvertToVersion(podTest, api.Registry.GroupOrDie(api.GroupName).GroupVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		printerTests := []struct {
0000000000000000000000000000000000000000;;			Name           string
0000000000000000000000000000000000000000;;			OutputOpts     *printers.OutputOptions
0000000000000000000000000000000000000000;;			Input          runtime.Object
0000000000000000000000000000000000000000;;			OutputVersions []schema.GroupVersion
0000000000000000000000000000000000000000;;			Expect         string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"test json", &printers.OutputOptions{FmtType: "json", AllowMissingKeys: true}, simpleTest, nil, "{\n    \"Data\": \"foo\"\n}\n"},
0000000000000000000000000000000000000000;;			{"test yaml", &printers.OutputOptions{FmtType: "yaml", AllowMissingKeys: true}, simpleTest, nil, "Data: foo\n"},
0000000000000000000000000000000000000000;;			{"test template", &printers.OutputOptions{FmtType: "template", FmtArg: "{{if .id}}{{.id}}{{end}}{{if .metadata.name}}{{.metadata.name}}{{end}}", AllowMissingKeys: true},
0000000000000000000000000000000000000000;;				podTest, []schema.GroupVersion{v1.SchemeGroupVersion}, "foo"},
0000000000000000000000000000000000000000;;			{"test jsonpath", &printers.OutputOptions{FmtType: "jsonpath", FmtArg: "{.metadata.name}", AllowMissingKeys: true}, podTest, []schema.GroupVersion{v1.SchemeGroupVersion}, "foo"},
0000000000000000000000000000000000000000;;			{"test jsonpath list", &printers.OutputOptions{FmtType: "jsonpath", FmtArg: "{.items[*].metadata.name}", AllowMissingKeys: true}, podListTest, []schema.GroupVersion{v1.SchemeGroupVersion}, "foo bar"},
0000000000000000000000000000000000000000;;			{"test jsonpath empty list", &printers.OutputOptions{FmtType: "jsonpath", FmtArg: "{.items[*].metadata.name}", AllowMissingKeys: true}, emptyListTest, []schema.GroupVersion{v1.SchemeGroupVersion}, ""},
0000000000000000000000000000000000000000;;			{"test name", &printers.OutputOptions{FmtType: "name", AllowMissingKeys: true}, podTest, []schema.GroupVersion{v1.SchemeGroupVersion}, "pods/foo\n"},
0000000000000000000000000000000000000000;;			{"emits versioned objects", &printers.OutputOptions{FmtType: "template", FmtArg: "{{.kind}}", AllowMissingKeys: true}, testapi, []schema.GroupVersion{v1.SchemeGroupVersion}, "Pod"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range printerTests {
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;			printer, err := printers.GetStandardPrinter(test.OutputOpts, false, api.Registry.RESTMapper(api.Registry.EnabledVersions()...), api.Scheme, api.Codecs.LegacyCodec(api.Registry.EnabledVersions()...), []runtime.Decoder{api.Codecs.UniversalDecoder(), unstructured.UnstructuredJSONScheme}, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, unexpected error: %#v", test.Name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if printer.IsGeneric() && len(test.OutputVersions) > 0 {
0000000000000000000000000000000000000000;;				printer = printers.NewVersionedPrinter(printer, api.Scheme, test.OutputVersions...)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(test.Input, buf); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, unexpected error: %#v", test.Name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf.String() != test.Expect {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, expect %q, got %q", test.Name, test.Expect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBadPrinter(t *testing.T) {
0000000000000000000000000000000000000000;;		badPrinterTests := []struct {
0000000000000000000000000000000000000000;;			Name       string
0000000000000000000000000000000000000000;;			OutputOpts *printers.OutputOptions
0000000000000000000000000000000000000000;;			Error      error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"empty template", &printers.OutputOptions{FmtType: "template", AllowMissingKeys: false}, fmt.Errorf("template format specified but no template given")},
0000000000000000000000000000000000000000;;			{"bad template", &printers.OutputOptions{FmtType: "template", FmtArg: "{{ .Name", AllowMissingKeys: false}, fmt.Errorf("error parsing template {{ .Name, template: output:1: unclosed action\n")},
0000000000000000000000000000000000000000;;			{"bad templatefile", &printers.OutputOptions{FmtType: "templatefile", AllowMissingKeys: false}, fmt.Errorf("templatefile format specified but no template file given")},
0000000000000000000000000000000000000000;;			{"bad jsonpath", &printers.OutputOptions{FmtType: "jsonpath", FmtArg: "{.Name", AllowMissingKeys: false}, fmt.Errorf("error parsing jsonpath {.Name, unclosed action\n")},
0000000000000000000000000000000000000000;;			{"unknown format", &printers.OutputOptions{FmtType: "anUnknownFormat", FmtArg: "", AllowMissingKeys: false}, fmt.Errorf("output format \"anUnknownFormat\" not recognized")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range badPrinterTests {
0000000000000000000000000000000000000000;;			_, err := printers.GetStandardPrinter(test.OutputOpts, false, api.Registry.RESTMapper(api.Registry.EnabledVersions()...), api.Scheme, api.Codecs.LegacyCodec(api.Registry.EnabledVersions()...), []runtime.Decoder{api.Codecs.UniversalDecoder(), unstructured.UnstructuredJSONScheme}, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err == nil || err.Error() != test.Error.Error() {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, expect %s, got %s", test.Name, test.Error, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPrinter(t *testing.T, printer printers.ResourcePrinter, unmarshalFunc func(data []byte, v interface{}) error) {
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := printer.PrintObj(&testData, buf)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var poutput kubectltesting.TestStruct
0000000000000000000000000000000000000000;;		// Verify that given function runs without error.
0000000000000000000000000000000000000000;;		err = unmarshalFunc(buf.Bytes(), &poutput)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Use real decode function to undo the versioning process.
0000000000000000000000000000000000000000;;		poutput = kubectltesting.TestStruct{}
0000000000000000000000000000000000000000;;		s := yamlserializer.NewDecodingSerializer(testapi.Default.Codec())
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(s, buf.Bytes(), &poutput); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(testData, poutput) {
0000000000000000000000000000000000000000;;			t.Errorf("Test data and unmarshaled data are not equal: %v", diff.ObjectDiff(poutput, testData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf.Reset()
0000000000000000000000000000000000000000;;		printer.PrintObj(obj, buf)
0000000000000000000000000000000000000000;;		var objOut api.Pod
0000000000000000000000000000000000000000;;		// Verify that given function runs without error.
0000000000000000000000000000000000000000;;		err = unmarshalFunc(buf.Bytes(), &objOut)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Use real decode function to undo the versioning process.
0000000000000000000000000000000000000000;;		objOut = api.Pod{}
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(s, buf.Bytes(), &objOut); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(obj, &objOut) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected inequality:\n%v", diff.ObjectDiff(obj, &objOut))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestYAMLPrinter(t *testing.T) {
0000000000000000000000000000000000000000;;		testPrinter(t, &printers.YAMLPrinter{}, yaml.Unmarshal)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJSONPrinter(t *testing.T) {
0000000000000000000000000000000000000000;;		testPrinter(t, &printers.JSONPrinter{}, json.Unmarshal)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFormatResourceName(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			kind, name string
0000000000000000000000000000000000000000;;			want       string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", "", ""},
0000000000000000000000000000000000000000;;			{"", "name", "name"},
0000000000000000000000000000000000000000;;			{"kind", "", "kind/"}, // should not happen in practice
0000000000000000000000000000000000000000;;			{"kind", "name", "kind/name"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			if got := printers.FormatResourceName(tt.kind, tt.name, true); got != tt.want {
0000000000000000000000000000000000000000;;				t.Errorf("formatResourceName(%q, %q) = %q, want %q", tt.kind, tt.name, got, tt.want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func PrintCustomType(obj *TestPrintType, w io.Writer, options printers.PrintOptions) error {
0000000000000000000000000000000000000000;;		data := obj.Data
0000000000000000000000000000000000000000;;		kind := options.Kind
0000000000000000000000000000000000000000;;		if options.WithKind {
0000000000000000000000000000000000000000;;			data = kind + "/" + data
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err := fmt.Fprintf(w, "%s", data)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ErrorPrintHandler(obj *TestPrintType, w io.Writer, options printers.PrintOptions) error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("ErrorPrintHandler error")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCustomTypePrinting(t *testing.T) {
0000000000000000000000000000000000000000;;		columns := []string{"Data"}
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		printer.Handler(columns, nil, PrintCustomType)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := TestPrintType{"test object"}
0000000000000000000000000000000000000000;;		buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		err := printer.PrintObj(&obj, buffer)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("An error occurred printing the custom type: %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedOutput := "DATA\ntest object"
0000000000000000000000000000000000000000;;		if buffer.String() != expectedOutput {
0000000000000000000000000000000000000000;;			t.Errorf("The data was not printed as expected. Expected:\n%s\nGot:\n%s", expectedOutput, buffer.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCustomTypePrintingWithKind(t *testing.T) {
0000000000000000000000000000000000000000;;		columns := []string{"Data"}
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		printer.Handler(columns, nil, PrintCustomType)
0000000000000000000000000000000000000000;;		printer.EnsurePrintWithKind("test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := TestPrintType{"test object"}
0000000000000000000000000000000000000000;;		buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		err := printer.PrintObj(&obj, buffer)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("An error occurred printing the custom type: %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedOutput := "DATA\ntest/test object"
0000000000000000000000000000000000000000;;		if buffer.String() != expectedOutput {
0000000000000000000000000000000000000000;;			t.Errorf("The data was not printed as expected. Expected:\n%s\nGot:\n%s", expectedOutput, buffer.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintHandlerError(t *testing.T) {
0000000000000000000000000000000000000000;;		columns := []string{"Data"}
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		printer.Handler(columns, nil, ErrorPrintHandler)
0000000000000000000000000000000000000000;;		obj := TestPrintType{"test object"}
0000000000000000000000000000000000000000;;		buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		err := printer.PrintObj(&obj, buffer)
0000000000000000000000000000000000000000;;		if err == nil || err.Error() != "ErrorPrintHandler error" {
0000000000000000000000000000000000000000;;			t.Errorf("Did not get the expected error: %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnknownTypePrinting(t *testing.T) {
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		err := printer.PrintObj(&TestUnknownType{}, buffer)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("An error was expected from printing unknown type")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTemplatePanic(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpl := `{{and ((index .currentState.info "foo").state.running.startedAt) .currentState.info.net.state.running.startedAt}}`
0000000000000000000000000000000000000000;;		printer, err := printers.NewTemplatePrinter([]byte(tmpl))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("tmpl fail: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		err = printer.PrintObj(&api.Pod{}, buffer)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected that template to crash")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if buffer.String() == "" {
0000000000000000000000000000000000000000;;			t.Errorf("no debugging info was printed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamePrinter(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			obj    runtime.Object
0000000000000000000000000000000000000000;;			expect string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"singleObject": {
0000000000000000000000000000000000000000;;				&api.Pod{
0000000000000000000000000000000000000000;;					TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;						Kind: "Pod",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"pods/foo\n"},
0000000000000000000000000000000000000000;;			"List": {
0000000000000000000000000000000000000000;;				&v1.List{
0000000000000000000000000000000000000000;;					TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;						Kind: "List",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Items: []runtime.RawExtension{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Raw: []byte(`{"kind": "Pod", "apiVersion": "v1", "metadata": { "name": "foo"}}`),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Raw: []byte(`{"kind": "Pod", "apiVersion": "v1", "metadata": { "name": "bar"}}`),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"pods/foo\npods/bar\n"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		outputOpts := &printers.OutputOptions{FmtType: "name", AllowMissingKeys: false}
0000000000000000000000000000000000000000;;		printer, _ := printers.GetStandardPrinter(outputOpts, false, api.Registry.RESTMapper(api.Registry.EnabledVersions()...), api.Scheme, api.Codecs.LegacyCodec(api.Registry.EnabledVersions()...), []runtime.Decoder{api.Codecs.UniversalDecoder(), unstructured.UnstructuredJSONScheme}, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		for name, item := range tests {
0000000000000000000000000000000000000000;;			buff := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			err := printer.PrintObj(item.obj, buff)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected err: %v", name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got := buff.String()
0000000000000000000000000000000000000000;;			if item.expect != got {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", name, item.expect, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTemplateStrings(t *testing.T) {
0000000000000000000000000000000000000000;;		// This unit tests the "exists" function as well as the template from update.sh
0000000000000000000000000000000000000000;;		table := map[string]struct {
0000000000000000000000000000000000000000;;			pod    api.Pod
0000000000000000000000000000000000000000;;			expect string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"nilInfo":   {api.Pod{}, "false"},
0000000000000000000000000000000000000000;;			"emptyInfo": {api.Pod{Status: api.PodStatus{ContainerStatuses: []api.ContainerStatus{}}}, "false"},
0000000000000000000000000000000000000000;;			"fooExists": {
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"false",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"barExists": {
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "bar",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"false",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bothExist": {
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "bar",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"false",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"barValid": {
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "bar",
0000000000000000000000000000000000000000;;								State: api.ContainerState{
0000000000000000000000000000000000000000;;									Running: &api.ContainerStateRunning{
0000000000000000000000000000000000000000;;										StartedAt: metav1.Time{},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"false",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bothValid": {
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "foo",
0000000000000000000000000000000000000000;;								State: api.ContainerState{
0000000000000000000000000000000000000000;;									Running: &api.ContainerStateRunning{
0000000000000000000000000000000000000000;;										StartedAt: metav1.Time{},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "bar",
0000000000000000000000000000000000000000;;								State: api.ContainerState{
0000000000000000000000000000000000000000;;									Running: &api.ContainerStateRunning{
0000000000000000000000000000000000000000;;										StartedAt: metav1.Time{},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"true",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// The point of this test is to verify that the below template works.
0000000000000000000000000000000000000000;;		tmpl := `{{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "foo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}`
0000000000000000000000000000000000000000;;		p, err := printers.NewTemplatePrinter([]byte(tmpl))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("tmpl fail: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		printer := printers.NewVersionedPrinter(p, api.Scheme, api.Registry.GroupOrDie(api.GroupName).GroupVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, item := range table {
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			err = printer.PrintObj(&item.pod, buffer)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected err: %v", name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			actual := buffer.String()
0000000000000000000000000000000000000000;;			if len(actual) == 0 {
0000000000000000000000000000000000000000;;				actual = "false"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e := item.expect; e != actual {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", name, e, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrinters(t *testing.T) {
0000000000000000000000000000000000000000;;		om := func(name string) metav1.ObjectMeta { return metav1.ObjectMeta{Name: name} }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			err              error
0000000000000000000000000000000000000000;;			templatePrinter  printers.ResourcePrinter
0000000000000000000000000000000000000000;;			templatePrinter2 printers.ResourcePrinter
0000000000000000000000000000000000000000;;			jsonpathPrinter  printers.ResourcePrinter
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		templatePrinter, err = printers.NewTemplatePrinter([]byte("{{.name}}"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		templatePrinter = printers.NewVersionedPrinter(templatePrinter, api.Scheme, v1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		templatePrinter2, err = printers.NewTemplatePrinter([]byte("{{len .items}}"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		templatePrinter2 = printers.NewVersionedPrinter(templatePrinter2, api.Scheme, v1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonpathPrinter, err = printers.NewJSONPathPrinter("{.metadata.name}")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		jsonpathPrinter = printers.NewVersionedPrinter(jsonpathPrinter, api.Scheme, v1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allPrinters := map[string]printers.ResourcePrinter{
0000000000000000000000000000000000000000;;			"humanReadable": printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;				NoHeaders: true,
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			"humanReadableHeaders": printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{}),
0000000000000000000000000000000000000000;;			"json":                 &printers.JSONPrinter{},
0000000000000000000000000000000000000000;;			"yaml":                 &printers.YAMLPrinter{},
0000000000000000000000000000000000000000;;			"template":             templatePrinter,
0000000000000000000000000000000000000000;;			"template2":            templatePrinter2,
0000000000000000000000000000000000000000;;			"jsonpath":             jsonpathPrinter,
0000000000000000000000000000000000000000;;			"name": &printers.NamePrinter{
0000000000000000000000000000000000000000;;				Typer:    api.Scheme,
0000000000000000000000000000000000000000;;				Decoders: []runtime.Decoder{api.Codecs.UniversalDecoder(), unstructured.UnstructuredJSONScheme},
0000000000000000000000000000000000000000;;				Mapper:   api.Registry.RESTMapper(api.Registry.EnabledVersions()...),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		AddHandlers((allPrinters["humanReadable"]).(*printers.HumanReadablePrinter))
0000000000000000000000000000000000000000;;		AddHandlers((allPrinters["humanReadableHeaders"]).(*printers.HumanReadablePrinter))
0000000000000000000000000000000000000000;;		objects := map[string]runtime.Object{
0000000000000000000000000000000000000000;;			"pod":             &api.Pod{ObjectMeta: om("pod")},
0000000000000000000000000000000000000000;;			"emptyPodList":    &api.PodList{},
0000000000000000000000000000000000000000;;			"nonEmptyPodList": &api.PodList{Items: []api.Pod{{}}},
0000000000000000000000000000000000000000;;			"endpoints": &api.Endpoints{
0000000000000000000000000000000000000000;;				Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;					Addresses: []api.EndpointAddress{{IP: "127.0.0.1"}, {IP: "localhost"}},
0000000000000000000000000000000000000000;;					Ports:     []api.EndpointPort{{Port: 8080}},
0000000000000000000000000000000000000000;;				}}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// map of printer name to set of objects it should fail on.
0000000000000000000000000000000000000000;;		expectedErrors := map[string]sets.String{
0000000000000000000000000000000000000000;;			"template2": sets.NewString("pod", "emptyPodList", "endpoints"),
0000000000000000000000000000000000000000;;			"jsonpath":  sets.NewString("emptyPodList", "nonEmptyPodList", "endpoints"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for pName, p := range allPrinters {
0000000000000000000000000000000000000000;;			for oName, obj := range objects {
0000000000000000000000000000000000000000;;				b := &bytes.Buffer{}
0000000000000000000000000000000000000000;;				if err := p.PrintObj(obj, b); err != nil {
0000000000000000000000000000000000000000;;					if set, found := expectedErrors[pName]; found && set.Has(oName) {
0000000000000000000000000000000000000000;;						// expected error
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					t.Errorf("printer '%v', object '%v'; error: '%v'", pName, oName, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintEventsResultSorted(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		AddHandlers(printer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := api.EventList{
0000000000000000000000000000000000000000;;			Items: []api.Event{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Source:         api.EventSource{Component: "kubelet"},
0000000000000000000000000000000000000000;;					Message:        "Item 1",
0000000000000000000000000000000000000000;;					FirstTimestamp: metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					LastTimestamp:  metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					Count:          1,
0000000000000000000000000000000000000000;;					Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Source:         api.EventSource{Component: "scheduler"},
0000000000000000000000000000000000000000;;					Message:        "Item 2",
0000000000000000000000000000000000000000;;					FirstTimestamp: metav1.NewTime(time.Date(1987, time.June, 17, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					LastTimestamp:  metav1.NewTime(time.Date(1987, time.June, 17, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					Count:          1,
0000000000000000000000000000000000000000;;					Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Source:         api.EventSource{Component: "kubelet"},
0000000000000000000000000000000000000000;;					Message:        "Item 3",
0000000000000000000000000000000000000000;;					FirstTimestamp: metav1.NewTime(time.Date(2002, time.December, 25, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					LastTimestamp:  metav1.NewTime(time.Date(2002, time.December, 25, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					Count:          1,
0000000000000000000000000000000000000000;;					Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		err := printer.PrintObj(&obj, buffer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("An error occurred printing the EventList: %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out := buffer.String()
0000000000000000000000000000000000000000;;		VerifyDatesInOrder(out, "\n" /* rowDelimiter */, "  " /* columnDelimiter */, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintNodeStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		AddHandlers(printer)
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			node   api.Node
0000000000000000000000000000000000000000;;			status string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo1"},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Conditions: []api.NodeCondition{{Type: api.NodeReady, Status: api.ConditionTrue}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "Ready",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo2"},
0000000000000000000000000000000000000000;;					Spec:       api.NodeSpec{Unschedulable: true},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Conditions: []api.NodeCondition{{Type: api.NodeReady, Status: api.ConditionTrue}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "Ready,SchedulingDisabled",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo3"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{Conditions: []api.NodeCondition{
0000000000000000000000000000000000000000;;						{Type: api.NodeReady, Status: api.ConditionTrue},
0000000000000000000000000000000000000000;;						{Type: api.NodeReady, Status: api.ConditionTrue}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "Ready",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo4"},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Conditions: []api.NodeCondition{{Type: api.NodeReady, Status: api.ConditionFalse}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "NotReady",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo5"},
0000000000000000000000000000000000000000;;					Spec:       api.NodeSpec{Unschedulable: true},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Conditions: []api.NodeCondition{{Type: api.NodeReady, Status: api.ConditionFalse}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "NotReady,SchedulingDisabled",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo6"},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Conditions: []api.NodeCondition{{Type: "InvalidValue", Status: api.ConditionTrue}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "Unknown",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo7"},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Conditions: []api.NodeCondition{{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "Unknown",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo8"},
0000000000000000000000000000000000000000;;					Spec:       api.NodeSpec{Unschedulable: true},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Conditions: []api.NodeCondition{{Type: "InvalidValue", Status: api.ConditionTrue}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "Unknown,SchedulingDisabled",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo9"},
0000000000000000000000000000000000000000;;					Spec:       api.NodeSpec{Unschedulable: true},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Conditions: []api.NodeCondition{{}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: "Unknown,SchedulingDisabled",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range table {
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			err := printer.PrintObj(&test.node, buffer)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("An error occurred printing Node: %#v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !contains(strings.Fields(buffer.String()), test.status) {
0000000000000000000000000000000000000000;;				t.Fatalf("Expect printing node %s with status %#v, got: %#v", test.node.Name, test.status, buffer.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintNodeOSImage(t *testing.T) {
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;			Wide:         true,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		AddHandlers(printer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			node    api.Node
0000000000000000000000000000000000000000;;			osImage string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo1"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{
0000000000000000000000000000000000000000;;						NodeInfo:  api.NodeSystemInfo{OSImage: "fake-os-image"},
0000000000000000000000000000000000000000;;						Addresses: []api.NodeAddress{{Type: api.NodeExternalIP, Address: "1.1.1.1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				osImage: "fake-os-image",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo2"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{
0000000000000000000000000000000000000000;;						NodeInfo:  api.NodeSystemInfo{KernelVersion: "fake-kernel-version"},
0000000000000000000000000000000000000000;;						Addresses: []api.NodeAddress{{Type: api.NodeExternalIP, Address: "1.1.1.1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				osImage: "<unknown>",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range table {
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			err := printer.PrintObj(&test.node, buffer)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("An error occurred printing Node: %#v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !contains(strings.Fields(buffer.String()), test.osImage) {
0000000000000000000000000000000000000000;;				t.Fatalf("Expect printing node %s with os image %#v, got: %#v", test.node.Name, test.osImage, buffer.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintNodeKernelVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;			Wide:         true,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		AddHandlers(printer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			node          api.Node
0000000000000000000000000000000000000000;;			kernelVersion string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo1"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{
0000000000000000000000000000000000000000;;						NodeInfo:  api.NodeSystemInfo{KernelVersion: "fake-kernel-version"},
0000000000000000000000000000000000000000;;						Addresses: []api.NodeAddress{{Type: api.NodeExternalIP, Address: "1.1.1.1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				kernelVersion: "fake-kernel-version",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo2"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{
0000000000000000000000000000000000000000;;						NodeInfo:  api.NodeSystemInfo{OSImage: "fake-os-image"},
0000000000000000000000000000000000000000;;						Addresses: []api.NodeAddress{{Type: api.NodeExternalIP, Address: "1.1.1.1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				kernelVersion: "<unknown>",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range table {
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			err := printer.PrintObj(&test.node, buffer)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("An error occurred printing Node: %#v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !contains(strings.Fields(buffer.String()), test.kernelVersion) {
0000000000000000000000000000000000000000;;				t.Fatalf("Expect printing node %s with kernel version %#v, got: %#v", test.node.Name, test.kernelVersion, buffer.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintNodeContainerRuntimeVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;			Wide:         true,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		AddHandlers(printer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			node                    api.Node
0000000000000000000000000000000000000000;;			containerRuntimeVersion string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo1"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{
0000000000000000000000000000000000000000;;						NodeInfo:  api.NodeSystemInfo{ContainerRuntimeVersion: "foo://1.2.3"},
0000000000000000000000000000000000000000;;						Addresses: []api.NodeAddress{{Type: api.NodeExternalIP, Address: "1.1.1.1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerRuntimeVersion: "foo://1.2.3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo2"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{
0000000000000000000000000000000000000000;;						NodeInfo:  api.NodeSystemInfo{},
0000000000000000000000000000000000000000;;						Addresses: []api.NodeAddress{{Type: api.NodeExternalIP, Address: "1.1.1.1"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerRuntimeVersion: "<unknown>",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range table {
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			err := printer.PrintObj(&test.node, buffer)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("An error occurred printing Node: %#v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !contains(strings.Fields(buffer.String()), test.containerRuntimeVersion) {
0000000000000000000000000000000000000000;;				t.Fatalf("Expect printing node %s with kernel version %#v, got: %#v", test.node.Name, test.containerRuntimeVersion, buffer.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintNodeName(t *testing.T) {
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			Wide: true,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		AddHandlers(printer)
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			node api.Node
0000000000000000000000000000000000000000;;			Name string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "127.0.0.1"},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Name: "127.0.0.1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: ""},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Name: "<unknown>",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range table {
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			err := printer.PrintObj(&test.node, buffer)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("An error occurred printing Node: %#v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !contains(strings.Fields(buffer.String()), test.Name) {
0000000000000000000000000000000000000000;;				t.Fatalf("Expect printing node %s with node name %#v, got: %#v", test.node.Name, test.Name, buffer.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintNodeExternalIP(t *testing.T) {
0000000000000000000000000000000000000000;;		printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			Wide: true,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		AddHandlers(printer)
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			node       api.Node
0000000000000000000000000000000000000000;;			externalIP string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo1"},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Addresses: []api.NodeAddress{{Type: api.NodeExternalIP, Address: "1.1.1.1"}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				externalIP: "1.1.1.1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo2"},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{Addresses: []api.NodeAddress{{Type: api.NodeInternalIP, Address: "1.1.1.1"}}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				externalIP: "<none>",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				node: api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo3"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{Addresses: []api.NodeAddress{
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "2.2.2.2"},
0000000000000000000000000000000000000000;;						{Type: api.NodeInternalIP, Address: "3.3.3.3"},
0000000000000000000000000000000000000000;;						{Type: api.NodeExternalIP, Address: "4.4.4.4"},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				externalIP: "2.2.2.2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range table {
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			err := printer.PrintObj(&test.node, buffer)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("An error occurred printing Node: %#v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !contains(strings.Fields(buffer.String()), test.externalIP) {
0000000000000000000000000000000000000000;;				t.Fatalf("Expect printing node %s with external ip %#v, got: %#v", test.node.Name, test.externalIP, buffer.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func contains(fields []string, field string) bool {
0000000000000000000000000000000000000000;;		for _, v := range fields {
0000000000000000000000000000000000000000;;			if v == field {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintHunmanReadableIngressWithColumnLabels(t *testing.T) {
0000000000000000000000000000000000000000;;		ingress := extensions.Ingress{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              "test1",
0000000000000000000000000000000000000000;;				CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"app_name": "kubectl_test_ingress",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.IngressSpec{
0000000000000000000000000000000000000000;;				Backend: &extensions.IngressBackend{
0000000000000000000000000000000000000000;;					ServiceName: "svc",
0000000000000000000000000000000000000000;;					ServicePort: intstr.FromInt(93),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: extensions.IngressStatus{
0000000000000000000000000000000000000000;;				LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;					Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							IP:       "2.3.4.5",
0000000000000000000000000000000000000000;;							Hostname: "localhost.localdomain",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buff := bytes.Buffer{}
0000000000000000000000000000000000000000;;		printIngress(&ingress, &buff, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ColumnLabels: []string{"app_name"},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		output := string(buff.Bytes())
0000000000000000000000000000000000000000;;		appName := ingress.ObjectMeta.Labels["app_name"]
0000000000000000000000000000000000000000;;		if !strings.Contains(output, appName) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to container app_name label value %s, but doesn't %s", appName, output)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintHumanReadableService(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []api.Service{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;					ClusterIP: "1.2.3.4",
0000000000000000000000000000000000000000;;					Type:      "LoadBalancer",
0000000000000000000000000000000000000000;;					Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     80,
0000000000000000000000000000000000000000;;							Protocol: "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.ServiceStatus{
0000000000000000000000000000000000000000;;					LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;						Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								IP: "2.3.4.5",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								IP: "3.4.5.6",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;					ClusterIP: "1.3.4.5",
0000000000000000000000000000000000000000;;					Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     80,
0000000000000000000000000000000000000000;;							Protocol: "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     8090,
0000000000000000000000000000000000000000;;							Protocol: "UDP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     8000,
0000000000000000000000000000000000000000;;							Protocol: "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;					ClusterIP: "1.4.5.6",
0000000000000000000000000000000000000000;;					Type:      "LoadBalancer",
0000000000000000000000000000000000000000;;					Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     80,
0000000000000000000000000000000000000000;;							Protocol: "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     8090,
0000000000000000000000000000000000000000;;							Protocol: "UDP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     8000,
0000000000000000000000000000000000000000;;							Protocol: "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.ServiceStatus{
0000000000000000000000000000000000000000;;					LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;						Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								IP: "2.3.4.5",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;					ClusterIP: "1.5.6.7",
0000000000000000000000000000000000000000;;					Type:      "LoadBalancer",
0000000000000000000000000000000000000000;;					Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     80,
0000000000000000000000000000000000000000;;							Protocol: "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     8090,
0000000000000000000000000000000000000000;;							Protocol: "UDP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Port:     8000,
0000000000000000000000000000000000000000;;							Protocol: "TCP",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.ServiceStatus{
0000000000000000000000000000000000000000;;					LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;						Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								IP: "2.3.4.5",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								IP: "3.4.5.6",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								IP:       "5.6.7.8",
0000000000000000000000000000000000000000;;								Hostname: "host5678",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, svc := range tests {
0000000000000000000000000000000000000000;;			for _, wide := range []bool{false, true} {
0000000000000000000000000000000000000000;;				buff := bytes.Buffer{}
0000000000000000000000000000000000000000;;				printService(&svc, &buff, printers.PrintOptions{Wide: wide})
0000000000000000000000000000000000000000;;				output := string(buff.Bytes())
0000000000000000000000000000000000000000;;				ip := svc.Spec.ClusterIP
0000000000000000000000000000000000000000;;				if !strings.Contains(output, ip) {
0000000000000000000000000000000000000000;;					t.Errorf("expected to contain ClusterIP %s, but doesn't: %s", ip, output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for n, ingress := range svc.Status.LoadBalancer.Ingress {
0000000000000000000000000000000000000000;;					ip = ingress.IP
0000000000000000000000000000000000000000;;					// For non-wide output, we only guarantee the first IP to be printed
0000000000000000000000000000000000000000;;					if (n == 0 || wide) && !strings.Contains(output, ip) {
0000000000000000000000000000000000000000;;						t.Errorf("expected to contain ingress ip %s with wide=%v, but doesn't: %s", ip, wide, output)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for _, port := range svc.Spec.Ports {
0000000000000000000000000000000000000000;;					portSpec := fmt.Sprintf("%d/%s", port.Port, port.Protocol)
0000000000000000000000000000000000000000;;					if !strings.Contains(output, portSpec) {
0000000000000000000000000000000000000000;;						t.Errorf("expected to contain port: %s, but doesn't: %s", portSpec, output)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// Each service should print on one line
0000000000000000000000000000000000000000;;				if 1 != strings.Count(output, "\n") {
0000000000000000000000000000000000000000;;					t.Errorf("expected a single newline, found %d", strings.Count(output, "\n"))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintHumanReadableWithNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		namespaceName := "testnamespace"
0000000000000000000000000000000000000000;;		name := "test"
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			obj          runtime.Object
0000000000000000000000000000000000000000;;			isNamespaced bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 2,
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"name": "foo",
0000000000000000000000000000000000000000;;									"type": "production",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Image: "foo/bar",
0000000000000000000000000000000000000000;;										TerminationMessagePath: api.TerminationMessagePathDefault,
0000000000000000000000000000000000000000;;										ImagePullPolicy:        api.PullIfNotPresent,
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;								DNSPolicy:     api.DNSDefault,
0000000000000000000000000000000000000000;;								NodeSelector: map[string]string{
0000000000000000000000000000000000000000;;									"baz": "blah",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						ClusterIP: "1.2.3.4",
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:     80,
0000000000000000000000000000000000000000;;								Protocol: "TCP",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ServiceStatus{
0000000000000000000000000000000000000000;;						LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;							Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									IP: "2.3.4.5",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;					Subsets: []api.EndpointSubset{{
0000000000000000000000000000000000000000;;						Addresses: []api.EndpointAddress{{IP: "127.0.0.1"}, {IP: "localhost"}},
0000000000000000000000000000000000000000;;						Ports:     []api.EndpointPort{{Port: 8080}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.Secret{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.ServiceAccount{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;					Secrets:    []api.ObjectReference{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name},
0000000000000000000000000000000000000000;;					Status:     api.NodeStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.PersistentVolume{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;					Spec:       api.PersistentVolumeSpec{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.PersistentVolumeClaim{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;					Spec:       api.PersistentVolumeClaimSpec{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.Event{
0000000000000000000000000000000000000000;;					ObjectMeta:     metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;					Source:         api.EventSource{Component: "kubelet"},
0000000000000000000000000000000000000000;;					Message:        "Item 1",
0000000000000000000000000000000000000000;;					FirstTimestamp: metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					LastTimestamp:  metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					Count:          1,
0000000000000000000000000000000000000000;;					Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.LimitRange{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.ResourceQuota{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: name, Namespace: namespaceName},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.ComponentStatus{
0000000000000000000000000000000000000000;;					Conditions: []api.ComponentCondition{
0000000000000000000000000000000000000000;;						{Type: api.ComponentHealthy, Status: api.ConditionTrue, Message: "ok", Error: ""},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				isNamespaced: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range table {
0000000000000000000000000000000000000000;;			if test.isNamespaced {
0000000000000000000000000000000000000000;;				// Expect output to include namespace when requested.
0000000000000000000000000000000000000000;;				printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;					WithNamespace: true,
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				AddHandlers(printer)
0000000000000000000000000000000000000000;;				buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;				err := printer.PrintObj(test.obj, buffer)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("An error occurred printing object: %#v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				matched := contains(strings.Fields(buffer.String()), fmt.Sprintf("%s", namespaceName))
0000000000000000000000000000000000000000;;				if !matched {
0000000000000000000000000000000000000000;;					t.Errorf("%d: Expect printing object to contain namespace: %#v", i, test.obj)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// Expect error when trying to get all namespaces for un-namespaced object.
0000000000000000000000000000000000000000;;				printer := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;					WithNamespace: true,
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;				err := printer.PrintObj(test.obj, buffer)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("Expected error when printing un-namespaced type")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintPodTable(t *testing.T) {
0000000000000000000000000000000000000000;;		runningPod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "test1", Labels: map[string]string{"a": "1", "b": "2"}},
0000000000000000000000000000000000000000;;			Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;			Status: api.PodStatus{
0000000000000000000000000000000000000000;;				Phase: "Running",
0000000000000000000000000000000000000000;;				ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;					{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;					{RestartCount: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		failedPod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "test2", Labels: map[string]string{"b": "2"}},
0000000000000000000000000000000000000000;;			Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;			Status: api.PodStatus{
0000000000000000000000000000000000000000;;				Phase: "Failed",
0000000000000000000000000000000000000000;;				ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;					{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;					{RestartCount: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			obj          runtime.Object
0000000000000000000000000000000000000000;;			opts         printers.PrintOptions
0000000000000000000000000000000000000000;;			expect       string
0000000000000000000000000000000000000000;;			ignoreLegacy bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: runningPod, opts: printers.PrintOptions{},
0000000000000000000000000000000000000000;;				expect: "NAME\tREADY\tSTATUS\tRESTARTS\tAGE\ntest1\t1/2\tRunning\t6\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: runningPod, opts: printers.PrintOptions{WithKind: true, Kind: "pods"},
0000000000000000000000000000000000000000;;				expect: "NAME\tREADY\tSTATUS\tRESTARTS\tAGE\npods/test1\t1/2\tRunning\t6\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: runningPod, opts: printers.PrintOptions{ShowLabels: true},
0000000000000000000000000000000000000000;;				expect: "NAME\tREADY\tSTATUS\tRESTARTS\tAGE\tLABELS\ntest1\t1/2\tRunning\t6\t<unknown>\ta=1,b=2\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: &api.PodList{Items: []api.Pod{*runningPod, *failedPod}}, opts: printers.PrintOptions{ShowAll: true, ColumnLabels: []string{"a"}},
0000000000000000000000000000000000000000;;				expect: "NAME\tREADY\tSTATUS\tRESTARTS\tAGE\tA\ntest1\t1/2\tRunning\t6\t<unknown>\t1\ntest2\t1/2\tFailed\t6\t<unknown>\t\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: runningPod, opts: printers.PrintOptions{NoHeaders: true},
0000000000000000000000000000000000000000;;				expect: "test1\t1/2\tRunning\t6\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: failedPod, opts: printers.PrintOptions{},
0000000000000000000000000000000000000000;;				expect:       "NAME\tREADY\tSTATUS\tRESTARTS\tAGE\n",
0000000000000000000000000000000000000000;;				ignoreLegacy: true, // filtering is not done by the printer in the legacy path
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				obj: failedPod, opts: printers.PrintOptions{ShowAll: true},
0000000000000000000000000000000000000000;;				expect: "NAME\tREADY\tSTATUS\tRESTARTS\tAGE\ntest2\t1/2\tFailed\t6\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			table, err := printers.NewTablePrinter().With(AddHandlers).PrintTable(test.obj, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			p := printers.NewHumanReadablePrinter(nil, nil, test.opts).With(AddHandlers).AddTabWriter(false)
0000000000000000000000000000000000000000;;			if err := p.PrintObj(table, buf); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expect != buf.String() {
0000000000000000000000000000000000000000;;				t.Errorf("%d mismatch:\n%s\n%s", i, strconv.Quote(test.expect), strconv.Quote(buf.String()))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.ignoreLegacy {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;			if err := p.PrintObj(test.obj, buf); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expect != buf.String() {
0000000000000000000000000000000000000000;;				t.Errorf("%d legacy mismatch:\n%s\n%s", i, strconv.Quote(test.expect), strconv.Quote(buf.String()))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestPrintPod(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod    api.Pod
0000000000000000000000000000000000000000;;			expect []metav1alpha1.TableRow
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test name, num of containers, restarts, container ready status
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test1"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test1", "1/2", "podPhase", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test container error overwrites pod phase
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test2"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{State: api.ContainerState{Waiting: &api.ContainerStateWaiting{Reason: "ContainerWaitingReason"}}, RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test2", "1/2", "ContainerWaitingReason", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test the same as the above but with Terminated state and the first container overwrites the rest
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test3"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{State: api.ContainerState{Waiting: &api.ContainerStateWaiting{Reason: "ContainerWaitingReason"}}, RestartCount: 3},
0000000000000000000000000000000000000000;;							{State: api.ContainerState{Terminated: &api.ContainerStateTerminated{Reason: "ContainerTerminatedReason"}}, RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test3", "0/2", "ContainerWaitingReason", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test ready is not enough for reporting running
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test4"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test4", "1/2", "podPhase", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test ready is not enough for reporting running
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test5"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Reason: "OutOfDisk",
0000000000000000000000000000000000000000;;						Phase:  "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test5", "1/2", "OutOfDisk", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			rows, err := printPod(&test.pod, printers.PrintOptions{ShowAll: true})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range rows {
0000000000000000000000000000000000000000;;				rows[i].Object.Object = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expect, rows) {
0000000000000000000000000000000000000000;;				t.Errorf("%d mismatch: %s", i, diff.ObjectReflectDiff(test.expect, rows))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintPodList(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pods   api.PodList
0000000000000000000000000000000000000000;;			expect []metav1alpha1.TableRow
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Test podList's pod: name, num of containers, restarts, container ready status
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				api.PodList{
0000000000000000000000000000000000000000;;					Items: []api.Pod{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "test1"},
0000000000000000000000000000000000000000;;							Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;							Status: api.PodStatus{
0000000000000000000000000000000000000000;;								Phase: "podPhase",
0000000000000000000000000000000000000000;;								ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;									{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;									{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "test2"},
0000000000000000000000000000000000000000;;							Spec:       api.PodSpec{Containers: make([]api.Container, 1)},
0000000000000000000000000000000000000000;;							Status: api.PodStatus{
0000000000000000000000000000000000000000;;								Phase: "podPhase",
0000000000000000000000000000000000000000;;								ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;									{Ready: true, RestartCount: 1, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test1", "2/2", "podPhase", 6, "<unknown>"}}, {Cells: []interface{}{"test2", "1/1", "podPhase", 1, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			rows, err := printPodList(&test.pods, printers.PrintOptions{ShowAll: true})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range rows {
0000000000000000000000000000000000000000;;				rows[i].Object.Object = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expect, rows) {
0000000000000000000000000000000000000000;;				t.Errorf("mismatch: %s", diff.ObjectReflectDiff(test.expect, rows))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintNonTerminatedPod(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod    api.Pod
0000000000000000000000000000000000000000;;			expect []metav1alpha1.TableRow
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test pod phase Running should be printed
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test1"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodRunning,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test1", "1/2", "Running", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test pod phase Pending should be printed
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test2"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodPending,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test2", "1/2", "Pending", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test pod phase Unknown should be printed
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test3"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodUnknown,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test3", "1/2", "Unknown", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test pod phase Succeeded shouldn't be printed
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test4"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodSucceeded,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test4", "1/2", "Succeeded", 6, "<unknown>"}, Conditions: podSuccessConditions}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test pod phase Failed shouldn't be printed
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test5"},
0000000000000000000000000000000000000000;;					Spec:       api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodFailed,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test5", "1/2", "Failed", 6, "<unknown>"}, Conditions: podFailedConditions}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			table, err := printers.NewTablePrinter().With(AddHandlers).PrintTable(&test.pod, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rows := table.Rows
0000000000000000000000000000000000000000;;			for i := range rows {
0000000000000000000000000000000000000000;;				rows[i].Object.Object = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expect, rows) {
0000000000000000000000000000000000000000;;				t.Errorf("%d mismatch: %s", i, diff.ObjectReflectDiff(test.expect, rows))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintPodWithLabels(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod          api.Pod
0000000000000000000000000000000000000000;;			labelColumns []string
0000000000000000000000000000000000000000;;			expect       []metav1alpha1.TableRow
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test name, num of containers, restarts, container ready status
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "test1",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"col1": "asd", "COL2": "zxc"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{"col1", "COL2"},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test1", "1/2", "podPhase", 6, "<unknown>", "asd", "zxc"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test name, num of containers, restarts, container ready status
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "test1",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"col1": "asd", "COL2": "zxc"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test1", "1/2", "podPhase", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			table, err := printers.NewTablePrinter().With(AddHandlers).PrintTable(&test.pod, printers.PrintOptions{ColumnLabels: test.labelColumns})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rows := table.Rows
0000000000000000000000000000000000000000;;			for i := range rows {
0000000000000000000000000000000000000000;;				rows[i].Object.Object = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expect, rows) {
0000000000000000000000000000000000000000;;				t.Errorf("%d mismatch: %s", i, diff.ObjectReflectDiff(test.expect, rows))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type stringTestList []struct {
0000000000000000000000000000000000000000;;		name, got, exp string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTranslateTimestamp(t *testing.T) {
0000000000000000000000000000000000000000;;		tl := stringTestList{
0000000000000000000000000000000000000000;;			{"a while from now", translateTimestamp(metav1.Time{Time: time.Now().Add(2.1e9)}), "<invalid>"},
0000000000000000000000000000000000000000;;			{"almost now", translateTimestamp(metav1.Time{Time: time.Now().Add(1.9e9)}), "0s"},
0000000000000000000000000000000000000000;;			{"now", translateTimestamp(metav1.Time{Time: time.Now()}), "0s"},
0000000000000000000000000000000000000000;;			{"unknown", translateTimestamp(metav1.Time{}), "<unknown>"},
0000000000000000000000000000000000000000;;			{"30 seconds ago", translateTimestamp(metav1.Time{Time: time.Now().Add(-3e10)}), "30s"},
0000000000000000000000000000000000000000;;			{"5 minutes ago", translateTimestamp(metav1.Time{Time: time.Now().Add(-3e11)}), "5m"},
0000000000000000000000000000000000000000;;			{"an hour ago", translateTimestamp(metav1.Time{Time: time.Now().Add(-6e12)}), "1h"},
0000000000000000000000000000000000000000;;			{"2 days ago", translateTimestamp(metav1.Time{Time: time.Now().UTC().AddDate(0, 0, -2)}), "2d"},
0000000000000000000000000000000000000000;;			{"months ago", translateTimestamp(metav1.Time{Time: time.Now().UTC().AddDate(0, 0, -90)}), "90d"},
0000000000000000000000000000000000000000;;			{"10 years ago", translateTimestamp(metav1.Time{Time: time.Now().UTC().AddDate(-10, 0, 0)}), "10y"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tl {
0000000000000000000000000000000000000000;;			if test.got != test.exp {
0000000000000000000000000000000000000000;;				t.Errorf("On %v, expected '%v', but got '%v'",
0000000000000000000000000000000000000000;;					test.name, test.exp, test.got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			deployment extensions.Deployment
0000000000000000000000000000000000000000;;			expect     string
0000000000000000000000000000000000000000;;			wideExpect string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test1",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: 5,
0000000000000000000000000000000000000000;;						Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "fake-container1",
0000000000000000000000000000000000000000;;										Image: "fake-image1",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "fake-container2",
0000000000000000000000000000000000000000;;										Image: "fake-image2",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DeploymentStatus{
0000000000000000000000000000000000000000;;						Replicas:            10,
0000000000000000000000000000000000000000;;						UpdatedReplicas:     2,
0000000000000000000000000000000000000000;;						AvailableReplicas:   1,
0000000000000000000000000000000000000000;;						UnavailableReplicas: 4,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test1\t5\t10\t2\t1\t0s\n",
0000000000000000000000000000000000000000;;				"test1\t5\t10\t2\t1\t0s\tfake-container1,fake-container2\tfake-image1,fake-image2\tfoo=bar\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			printDeployment(&test.deployment, buf, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if buf.String() != test.expect {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected: %s, got: %s", test.expect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;			// print deployment with '-o wide' option
0000000000000000000000000000000000000000;;			printDeployment(&test.deployment, buf, printers.PrintOptions{Wide: true})
0000000000000000000000000000000000000000;;			if buf.String() != test.wideExpect {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected: %s, got: %s", test.wideExpect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintDaemonSet(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			ds         extensions.DaemonSet
0000000000000000000000000000000000000000;;			startsWith string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test1",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;						Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.DaemonSetStatus{
0000000000000000000000000000000000000000;;						CurrentNumberScheduled: 2,
0000000000000000000000000000000000000000;;						DesiredNumberScheduled: 3,
0000000000000000000000000000000000000000;;						NumberReady:            1,
0000000000000000000000000000000000000000;;						UpdatedNumberScheduled: 2,
0000000000000000000000000000000000000000;;						NumberAvailable:        0,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test1\t3\t2\t1\t2\t0\t<none>\t0s\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			table, err := printers.NewTablePrinter().With(AddHandlers).PrintTable(&test.ds, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printers.PrintTable(table, buf, printers.PrintOptions{NoHeaders: true}); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !strings.HasPrefix(buf.String(), test.startsWith) {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected to start with %s but got %s", test.startsWith, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintJob(t *testing.T) {
0000000000000000000000000000000000000000;;		completions := int32(2)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			job    batch.Job
0000000000000000000000000000000000000000;;			expect string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "job1",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Completions: &completions,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: batch.JobStatus{
0000000000000000000000000000000000000000;;						Succeeded: 1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"job1\t2\t1\t0s\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "job2",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Completions: nil,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: batch.JobStatus{
0000000000000000000000000000000000000000;;						Succeeded: 0,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"job2\t<none>\t0\t10y\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			table, err := printers.NewTablePrinter().With(AddHandlers).PrintTable(&test.job, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printers.PrintTable(table, buf, printers.PrintOptions{NoHeaders: true}); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf.String() != test.expect {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected: %s, got: %s", test.expect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintHPA(t *testing.T) {
0000000000000000000000000000000000000000;;		minReplicasVal := int32(2)
0000000000000000000000000000000000000000;;		targetUtilizationVal := int32(80)
0000000000000000000000000000000000000000;;		currentUtilizationVal := int32(50)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			hpa      autoscaling.HorizontalPodAutoscaler
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// minReplicas unset
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t<none>\t<unset>\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// pods source type (no current)
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "some-pods-metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t<unknown> / 100m\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// pods source type
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "some-pods-metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricStatus{
0000000000000000000000000000000000000000;;									MetricName:          "some-pods-metric",
0000000000000000000000000000000000000000;;									CurrentAverageValue: *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t50m / 100m\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// object source type (no current)
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;								Object: &autoscaling.ObjectMetricSource{
0000000000000000000000000000000000000000;;									Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;										Name: "some-service",
0000000000000000000000000000000000000000;;										Kind: "Service",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									MetricName:  "some-service-metric",
0000000000000000000000000000000000000000;;									TargetValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t<unknown> / 100m\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// object source type
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;								Object: &autoscaling.ObjectMetricSource{
0000000000000000000000000000000000000000;;									Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;										Name: "some-service",
0000000000000000000000000000000000000000;;										Kind: "Service",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									MetricName:  "some-service-metric",
0000000000000000000000000000000000000000;;									TargetValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;								Object: &autoscaling.ObjectMetricStatus{
0000000000000000000000000000000000000000;;									Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;										Name: "some-service",
0000000000000000000000000000000000000000;;										Kind: "Service",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									MetricName:   "some-service-metric",
0000000000000000000000000000000000000000;;									CurrentValue: *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t50m / 100m\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// resource source type, targetVal (no current)
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name:               api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageValue: resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t<unknown> / 100m\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// resource source type, targetVal
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name:               api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageValue: resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricStatus{
0000000000000000000000000000000000000000;;									Name:                api.ResourceCPU,
0000000000000000000000000000000000000000;;									CurrentAverageValue: *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t50m / 100m\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// resource source type, targetUtil (no current)
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: &targetUtilizationVal,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t<unknown> / 80%\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// resource source type, targetUtil
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: &targetUtilizationVal,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricStatus{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									CurrentAverageUtilization: &currentUtilizationVal,
0000000000000000000000000000000000000000;;									CurrentAverageValue:       *resource.NewMilliQuantity(40, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t50% / 80%\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// multiple specs
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "some-hpa"},
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "some-pods-metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: &targetUtilizationVal,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "other-pods-metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(400, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricStatus{
0000000000000000000000000000000000000000;;									MetricName:          "some-pods-metric",
0000000000000000000000000000000000000000;;									CurrentAverageValue: *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricStatus{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									CurrentAverageUtilization: &currentUtilizationVal,
0000000000000000000000000000000000000000;;									CurrentAverageValue:       *resource.NewMilliQuantity(40, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"some-hpa\tReplicationController/some-rc\t50m / 100m, 50% / 80% + 1 more...\t2\t10\t4\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buff := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := printHorizontalPodAutoscaler(&test.hpa, buff, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected %q, got error: %v", test.expected, err)
0000000000000000000000000000000000000000;;				buff.Reset()
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if buff.String() != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("expected %q, got %q", test.expected, buff.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			buff.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintPodShowLabels(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod        api.Pod
0000000000000000000000000000000000000000;;			showLabels bool
0000000000000000000000000000000000000000;;			expect     []metav1alpha1.TableRow
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test name, num of containers, restarts, container ready status
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "test1",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"col1": "asd", "COL2": "zxc"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test1", "1/2", "podPhase", 6, "<unknown>", "COL2=zxc,col1=asd"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test name, num of containers, restarts, container ready status
0000000000000000000000000000000000000000;;				api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "test1",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"col3": "asd", "COL4": "zxc"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{Containers: make([]api.Container, 2)},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: "podPhase",
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]metav1alpha1.TableRow{{Cells: []interface{}{"test1", "1/2", "podPhase", 6, "<unknown>"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			table, err := printers.NewTablePrinter().With(AddHandlers).PrintTable(&test.pod, printers.PrintOptions{ShowLabels: test.showLabels})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rows := table.Rows
0000000000000000000000000000000000000000;;			for i := range rows {
0000000000000000000000000000000000000000;;				rows[i].Object.Object = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expect, rows) {
0000000000000000000000000000000000000000;;				t.Errorf("%d mismatch: %s", i, diff.ObjectReflectDiff(test.expect, rows))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintService(t *testing.T) {
0000000000000000000000000000000000000000;;		single_ExternalIP := []string{"80.11.12.10"}
0000000000000000000000000000000000000000;;		mul_ExternalIP := []string{"80.11.12.10", "80.11.12.11"}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			service api.Service
0000000000000000000000000000000000000000;;			expect  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test name, cluster ip, port with protocol
0000000000000000000000000000000000000000;;				api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test1"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol: "tcp",
0000000000000000000000000000000000000000;;								Port:     2233,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP: "10.9.8.7",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test1\tClusterIP\t10.9.8.7\t<none>\t2233/tcp\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test NodePort service
0000000000000000000000000000000000000000;;				api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test2"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol: "tcp",
0000000000000000000000000000000000000000;;								Port:     8888,
0000000000000000000000000000000000000000;;								NodePort: 9999,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP: "10.9.8.7",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test2\tNodePort\t10.9.8.7\t<none>\t8888:9999/tcp\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test LoadBalancer service
0000000000000000000000000000000000000000;;				api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test3"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol: "tcp",
0000000000000000000000000000000000000000;;								Port:     8888,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP: "10.9.8.7",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test3\tLoadBalancer\t10.9.8.7\t<pending>\t8888/tcp\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test LoadBalancer service with single ExternalIP and no LoadBalancerStatus
0000000000000000000000000000000000000000;;				api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test4"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol: "tcp",
0000000000000000000000000000000000000000;;								Port:     8888,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP:   "10.9.8.7",
0000000000000000000000000000000000000000;;						ExternalIPs: single_ExternalIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test4\tLoadBalancer\t10.9.8.7\t80.11.12.10\t8888/tcp\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test LoadBalancer service with single ExternalIP
0000000000000000000000000000000000000000;;				api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test5"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol: "tcp",
0000000000000000000000000000000000000000;;								Port:     8888,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP:   "10.9.8.7",
0000000000000000000000000000000000000000;;						ExternalIPs: single_ExternalIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ServiceStatus{
0000000000000000000000000000000000000000;;						LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;							Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									IP:       "3.4.5.6",
0000000000000000000000000000000000000000;;									Hostname: "test.cluster.com",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test5\tLoadBalancer\t10.9.8.7\t3.4.5.6,80.11.12.10\t8888/tcp\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test LoadBalancer service with mul ExternalIPs
0000000000000000000000000000000000000000;;				api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test6"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol: "tcp",
0000000000000000000000000000000000000000;;								Port:     8888,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP:   "10.9.8.7",
0000000000000000000000000000000000000000;;						ExternalIPs: mul_ExternalIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ServiceStatus{
0000000000000000000000000000000000000000;;						LoadBalancer: api.LoadBalancerStatus{
0000000000000000000000000000000000000000;;							Ingress: []api.LoadBalancerIngress{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									IP:       "2.3.4.5",
0000000000000000000000000000000000000000;;									Hostname: "test.cluster.local",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									IP:       "3.4.5.6",
0000000000000000000000000000000000000000;;									Hostname: "test.cluster.com",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test6\tLoadBalancer\t10.9.8.7\t2.3.4.5,3.4.5.6,80.11.12.10,80.11.12.11\t8888/tcp\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Test ExternalName service
0000000000000000000000000000000000000000;;				api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "test7"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type:         api.ServiceTypeExternalName,
0000000000000000000000000000000000000000;;						ExternalName: "my.database.example.com",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test7\tExternalName\t<none>\tmy.database.example.com\t<none>\t<unknown>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			printService(&test.service, buf, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			// We ignore time
0000000000000000000000000000000000000000;;			if buf.String() != test.expect {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected: %s, but got: %s", test.expect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintPodDisruptionBudget(t *testing.T) {
0000000000000000000000000000000000000000;;		minAvailable := intstr.FromInt(22)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pdb    policy.PodDisruptionBudget
0000000000000000000000000000000000000000;;			expect string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				policy.PodDisruptionBudget{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace:         "ns1",
0000000000000000000000000000000000000000;;						Name:              "pdb1",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: policy.PodDisruptionBudgetSpec{
0000000000000000000000000000000000000000;;						MinAvailable: &minAvailable,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: policy.PodDisruptionBudgetStatus{
0000000000000000000000000000000000000000;;						PodDisruptionsAllowed: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"pdb1\t22\tN/A\t5\t0s\n",
0000000000000000000000000000000000000000;;			}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			table, err := printers.NewTablePrinter().With(AddHandlers).PrintTable(&test.pdb, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printers.PrintTable(table, buf, printers.PrintOptions{NoHeaders: true}); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf.String() != test.expect {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected: %s, got: %s", test.expect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAllowMissingKeys(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			Name       string
0000000000000000000000000000000000000000;;			OutputOpts *printers.OutputOptions
0000000000000000000000000000000000000000;;			Input      runtime.Object
0000000000000000000000000000000000000000;;			Expect     string
0000000000000000000000000000000000000000;;			Error      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"test template, allow missing keys", &printers.OutputOptions{FmtType: "template", FmtArg: "{{.blarg}}", AllowMissingKeys: true}, &api.Pod{}, "<no value>", ""},
0000000000000000000000000000000000000000;;			{"test template, strict", &printers.OutputOptions{FmtType: "template", FmtArg: "{{.blarg}}", AllowMissingKeys: false}, &api.Pod{}, "", `error executing template "{{.blarg}}": template: output:1:2: executing "output" at <.blarg>: map has no entry for key "blarg"`},
0000000000000000000000000000000000000000;;			{"test jsonpath, allow missing keys", &printers.OutputOptions{FmtType: "jsonpath", FmtArg: "{.blarg}", AllowMissingKeys: true}, &api.Pod{}, "", ""},
0000000000000000000000000000000000000000;;			{"test jsonpath, strict", &printers.OutputOptions{FmtType: "jsonpath", FmtArg: "{.blarg}", AllowMissingKeys: false}, &api.Pod{}, "", "error executing jsonpath \"{.blarg}\": blarg is not found\n"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;			printer, err := printers.GetStandardPrinter(test.OutputOpts, false, api.Registry.RESTMapper(api.Registry.EnabledVersions()...), api.Scheme, api.Codecs.LegacyCodec(api.Registry.EnabledVersions()...), []runtime.Decoder{api.Codecs.UniversalDecoder(), unstructured.UnstructuredJSONScheme}, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, unexpected error: %#v", test.Name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err = printer.PrintObj(test.Input, buf)
0000000000000000000000000000000000000000;;			if len(test.Error) == 0 && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, unexpected error: %v", test.Name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(test.Error) > 0 {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("in %s, expected to get error: %v", test.Name, test.Error)
0000000000000000000000000000000000000000;;				} else if e, a := test.Error, err.Error(); e != a {
0000000000000000000000000000000000000000;;					t.Errorf("in %s, expected error %q, got %q", test.Name, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf.String() != test.Expect {
0000000000000000000000000000000000000000;;				t.Errorf("in %s, expect %q, got %q", test.Name, test.Expect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintControllerRevision(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			history apps.ControllerRevision
0000000000000000000000000000000000000000;;			expect  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				apps.ControllerRevision{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test1",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;						OwnerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Controller: boolP(true),
0000000000000000000000000000000000000000;;								Kind:       "DaemonSet",
0000000000000000000000000000000000000000;;								Name:       "foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Revision: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test1\tDaemonSet/foo\t1\t0s\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				apps.ControllerRevision{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test2",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;						OwnerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Controller: boolP(false),
0000000000000000000000000000000000000000;;								Kind:       "ABC",
0000000000000000000000000000000000000000;;								Name:       "foo",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Revision: 2,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test2\t<none>\t2\t0s\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				apps.ControllerRevision{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test3",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;						OwnerReferences:   []metav1.OwnerReference{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Revision: 3,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test3\t<none>\t3\t0s\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				apps.ControllerRevision{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test4",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;						OwnerReferences:   nil,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Revision: 4,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test4\t<none>\t4\t0s\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			printControllerRevision(&test.history, buf, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if buf.String() != test.expect {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected: %s, but got: %s", test.expect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func boolP(b bool) *bool {
0000000000000000000000000000000000000000;;		return &b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintReplicaSet(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			replicaSet extensions.ReplicaSet
0000000000000000000000000000000000000000;;			expect     string
0000000000000000000000000000000000000000;;			wideExpect string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test1",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Replicas: 5,
0000000000000000000000000000000000000000;;						Template: api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "fake-container1",
0000000000000000000000000000000000000000;;										Image: "fake-image1",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "fake-container2",
0000000000000000000000000000000000000000;;										Image: "fake-image2",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: extensions.ReplicaSetStatus{
0000000000000000000000000000000000000000;;						Replicas:      5,
0000000000000000000000000000000000000000;;						ReadyReplicas: 2,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"test1\t5\t5\t2\t0s\n",
0000000000000000000000000000000000000000;;				"test1\t5\t5\t2\t0s\tfake-container1,fake-container2\tfake-image1,fake-image2\tfoo=bar\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			table, err := printers.NewTablePrinter().With(AddHandlers).PrintTable(&test.replicaSet, printers.PrintOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printers.PrintTable(table, buf, printers.PrintOptions{NoHeaders: true}); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf.String() != test.expect {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected: %s, got: %s", test.expect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			table, err = printers.NewTablePrinter().With(AddHandlers).PrintTable(&test.replicaSet, printers.PrintOptions{Wide: true})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printers.PrintTable(table, buf, printers.PrintOptions{NoHeaders: true, Wide: true}); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf.String() != test.wideExpect {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected: %s, got: %s", test.wideExpect, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
