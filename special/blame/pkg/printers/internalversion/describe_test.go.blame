0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0445f1304094b4becc936a22a192a4eb67abd7b7;pkg/kubectl/describe_test.go[pkg/kubectl/describe_test.go][pkg/printers/internalversion/describe_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/federation/apis/federation"
0000000000000000000000000000000000000000;;		fedfake "k8s.io/kubernetes/federation/client/clientset_generated/federation_internalclientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/policy"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/storage"
0000000000000000000000000000000000000000;;		versionedfake "k8s.io/kubernetes/pkg/client/clientset_generated/clientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type describeClient struct {
0000000000000000000000000000000000000000;;		T         *testing.T
0000000000000000000000000000000000000000;;		Namespace string
0000000000000000000000000000000000000000;;		Err       error
0000000000000000000000000000000000000000;;		internalclientset.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribePod(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		c := &describeClient{T: t, Namespace: "foo", Interface: fake}
0000000000000000000000000000000000000000;;		d := PodDescriber{c}
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "bar") || !strings.Contains(out, "Status:") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribePodNode(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				NodeName: "all-in-one",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.PodStatus{
0000000000000000000000000000000000000000;;				HostIP: "127.0.0.1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		c := &describeClient{T: t, Namespace: "foo", Interface: fake}
0000000000000000000000000000000000000000;;		d := PodDescriber{c}
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "all-in-one/127.0.0.1") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribePodTolerations(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Tolerations: []api.Toleration{
0000000000000000000000000000000000000000;;					{Key: "key0", Operator: api.TolerationOpExists},
0000000000000000000000000000000000000000;;					{Key: "key1", Value: "value1"},
0000000000000000000000000000000000000000;;					{Key: "key2", Operator: api.TolerationOpEqual, Value: "value2", Effect: api.TaintEffectNoSchedule},
0000000000000000000000000000000000000000;;					{Key: "key3", Value: "value3", Effect: api.TaintEffectNoExecute, TolerationSeconds: &[]int64{300}[0]},
0000000000000000000000000000000000000000;;					{Key: "key4", Effect: api.TaintEffectNoExecute, TolerationSeconds: &[]int64{60}[0]},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		c := &describeClient{T: t, Namespace: "foo", Interface: fake}
0000000000000000000000000000000000000000;;		d := PodDescriber{c}
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "bar", printers.DescriberSettings{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "key0\n") ||
0000000000000000000000000000000000000000;;			!strings.Contains(out, "key1=value1\n") ||
0000000000000000000000000000000000000000;;			!strings.Contains(out, "key2=value2:NoSchedule\n") ||
0000000000000000000000000000000000000000;;			!strings.Contains(out, "key3=value3:NoExecute for 300s\n") ||
0000000000000000000000000000000000000000;;			!strings.Contains(out, "key4:NoExecute for 60s\n") ||
0000000000000000000000000000000000000000;;			!strings.Contains(out, "Tolerations:") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out:\n%s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&api.Namespace{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "myns",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		c := &describeClient{T: t, Namespace: "", Interface: fake}
0000000000000000000000000000000000000000;;		d := NamespaceDescriber{c}
0000000000000000000000000000000000000000;;		out, err := d.Describe("", "myns", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "myns") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeConfigMap(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&api.ConfigMap{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "mycm",
0000000000000000000000000000000000000000;;				Namespace: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: map[string]string{
0000000000000000000000000000000000000000;;				"key1": "value1",
0000000000000000000000000000000000000000;;				"key2": "value2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		c := &describeClient{T: t, Namespace: "foo", Interface: fake}
0000000000000000000000000000000000000000;;		d := ConfigMapDescriber{c}
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "mycm", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "foo") || !strings.Contains(out, "mycm") || !strings.Contains(out, "key1") || !strings.Contains(out, "value1") || !strings.Contains(out, "key2") || !strings.Contains(out, "value2") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeService(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&api.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		c := &describeClient{T: t, Namespace: "foo", Interface: fake}
0000000000000000000000000000000000000000;;		d := ServiceDescriber{c}
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "Labels:") || !strings.Contains(out, "bar") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodDescribeResultsSorted(t *testing.T) {
0000000000000000000000000000000000000000;;		// Arrange
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(
0000000000000000000000000000000000000000;;			&api.EventList{
0000000000000000000000000000000000000000;;				Items: []api.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta:     metav1.ObjectMeta{Name: "one"},
0000000000000000000000000000000000000000;;						Source:         api.EventSource{Component: "kubelet"},
0000000000000000000000000000000000000000;;						Message:        "Item 1",
0000000000000000000000000000000000000000;;						FirstTimestamp: metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;						LastTimestamp:  metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;						Count:          1,
0000000000000000000000000000000000000000;;						Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta:     metav1.ObjectMeta{Name: "two"},
0000000000000000000000000000000000000000;;						Source:         api.EventSource{Component: "scheduler"},
0000000000000000000000000000000000000000;;						Message:        "Item 2",
0000000000000000000000000000000000000000;;						FirstTimestamp: metav1.NewTime(time.Date(1987, time.June, 17, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;						LastTimestamp:  metav1.NewTime(time.Date(1987, time.June, 17, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;						Count:          1,
0000000000000000000000000000000000000000;;						Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta:     metav1.ObjectMeta{Name: "three"},
0000000000000000000000000000000000000000;;						Source:         api.EventSource{Component: "kubelet"},
0000000000000000000000000000000000000000;;						Message:        "Item 3",
0000000000000000000000000000000000000000;;						FirstTimestamp: metav1.NewTime(time.Date(2002, time.December, 25, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;						LastTimestamp:  metav1.NewTime(time.Date(2002, time.December, 25, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;						Count:          1,
0000000000000000000000000000000000000000;;						Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&api.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: "foo", Name: "bar"}},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		c := &describeClient{T: t, Namespace: "foo", Interface: fake}
0000000000000000000000000000000000000000;;		d := PodDescriber{c}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Act
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Assert
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		VerifyDatesInOrder(out, "\n" /* rowDelimiter */, "\t" /* columnDelimiter */, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VerifyDatesInOrder checks the start of each line for a RFC1123Z date
0000000000000000000000000000000000000000;;	// and posts error if all subsequent dates are not equal or increasing
0000000000000000000000000000000000000000;;	func VerifyDatesInOrder(
0000000000000000000000000000000000000000;;		resultToTest, rowDelimiter, columnDelimiter string, t *testing.T) {
0000000000000000000000000000000000000000;;		lines := strings.Split(resultToTest, rowDelimiter)
0000000000000000000000000000000000000000;;		var previousTime time.Time
0000000000000000000000000000000000000000;;		for _, str := range lines {
0000000000000000000000000000000000000000;;			columns := strings.Split(str, columnDelimiter)
0000000000000000000000000000000000000000;;			if len(columns) > 0 {
0000000000000000000000000000000000000000;;				currentTime, err := time.Parse(time.RFC1123Z, columns[0])
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					if previousTime.After(currentTime) {
0000000000000000000000000000000000000000;;						t.Errorf(
0000000000000000000000000000000000000000;;							"Output is not sorted by time. %s should be listed after %s. Complete output: %s",
0000000000000000000000000000000000000000;;							previousTime.Format(time.RFC1123Z),
0000000000000000000000000000000000000000;;							currentTime.Format(time.RFC1123Z),
0000000000000000000000000000000000000000;;							resultToTest)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					previousTime = currentTime
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeContainers(t *testing.T) {
0000000000000000000000000000000000000000;;		trueVal := true
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			container        api.Container
0000000000000000000000000000000000000000;;			status           api.ContainerStatus
0000000000000000000000000000000000000000;;			expectedElements []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Running state.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image"},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name: "test",
0000000000000000000000000000000000000000;;					State: api.ContainerState{
0000000000000000000000000000000000000000;;						Running: &api.ContainerStateRunning{
0000000000000000000000000000000000000000;;							StartedAt: metav1.NewTime(time.Now()),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Running", "Ready", "True", "Restart Count", "7", "Image", "image", "Started"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Waiting state.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image"},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name: "test",
0000000000000000000000000000000000000000;;					State: api.ContainerState{
0000000000000000000000000000000000000000;;						Waiting: &api.ContainerStateWaiting{
0000000000000000000000000000000000000000;;							Reason: "potato",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image", "Reason", "potato"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Terminated state.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image"},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name: "test",
0000000000000000000000000000000000000000;;					State: api.ContainerState{
0000000000000000000000000000000000000000;;						Terminated: &api.ContainerStateTerminated{
0000000000000000000000000000000000000000;;							StartedAt:  metav1.NewTime(time.Now()),
0000000000000000000000000000000000000000;;							FinishedAt: metav1.NewTime(time.Now()),
0000000000000000000000000000000000000000;;							Reason:     "potato",
0000000000000000000000000000000000000000;;							ExitCode:   2,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Terminated", "Ready", "True", "Restart Count", "7", "Image", "image", "Reason", "potato", "Started", "Finished", "Exit Code", "2"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Last Terminated
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image"},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name: "test",
0000000000000000000000000000000000000000;;					State: api.ContainerState{
0000000000000000000000000000000000000000;;						Running: &api.ContainerStateRunning{
0000000000000000000000000000000000000000;;							StartedAt: metav1.NewTime(time.Now()),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					LastTerminationState: api.ContainerState{
0000000000000000000000000000000000000000;;						Terminated: &api.ContainerStateTerminated{
0000000000000000000000000000000000000000;;							StartedAt:  metav1.NewTime(time.Now().Add(time.Second * 3)),
0000000000000000000000000000000000000000;;							FinishedAt: metav1.NewTime(time.Now()),
0000000000000000000000000000000000000000;;							Reason:     "crashing",
0000000000000000000000000000000000000000;;							ExitCode:   3,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Terminated", "Ready", "True", "Restart Count", "7", "Image", "image", "Started", "Finished", "Exit Code", "2", "crashing", "3"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// No state defaults to waiting.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image"},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Env
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image", Env: []api.EnvVar{{Name: "envname", Value: "xyz"}}, EnvFrom: []api.EnvFromSource{{ConfigMapRef: &api.ConfigMapEnvSource{LocalObjectReference: api.LocalObjectReference{Name: "a123"}}}}},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image", "envname", "xyz", "a123\tConfigMap\tOptional: false"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image", Env: []api.EnvVar{{Name: "envname", Value: "xyz"}}, EnvFrom: []api.EnvFromSource{{Prefix: "p_", ConfigMapRef: &api.ConfigMapEnvSource{LocalObjectReference: api.LocalObjectReference{Name: "a123"}}}}},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image", "envname", "xyz", "a123\tConfigMap with prefix 'p_'\tOptional: false"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image", Env: []api.EnvVar{{Name: "envname", Value: "xyz"}}, EnvFrom: []api.EnvFromSource{{ConfigMapRef: &api.ConfigMapEnvSource{Optional: &trueVal, LocalObjectReference: api.LocalObjectReference{Name: "a123"}}}}},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image", "envname", "xyz", "a123\tConfigMap\tOptional: true"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image", Env: []api.EnvVar{{Name: "envname", Value: "xyz"}}, EnvFrom: []api.EnvFromSource{{SecretRef: &api.SecretEnvSource{LocalObjectReference: api.LocalObjectReference{Name: "a123"}, Optional: &trueVal}}}},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image", "envname", "xyz", "a123\tSecret\tOptional: true"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image", Env: []api.EnvVar{{Name: "envname", Value: "xyz"}}, EnvFrom: []api.EnvFromSource{{Prefix: "p_", SecretRef: &api.SecretEnvSource{LocalObjectReference: api.LocalObjectReference{Name: "a123"}}}}},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image", "envname", "xyz", "a123\tSecret with prefix 'p_'\tOptional: false"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Command
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image", Command: []string{"sleep", "1000"}},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image", "sleep", "1000"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Args
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{Name: "test", Image: "image", Args: []string{"time", "1000"}},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"test", "State", "Waiting", "Ready", "True", "Restart Count", "7", "Image", "image", "time", "1000"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Using limits.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{
0000000000000000000000000000000000000000;;					Name:  "test",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Limits: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceCPU):     resource.MustParse("1000"),
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceMemory):  resource.MustParse("4G"),
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("20G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: api.ContainerStatus{
0000000000000000000000000000000000000000;;					Name:         "test",
0000000000000000000000000000000000000000;;					Ready:        true,
0000000000000000000000000000000000000000;;					RestartCount: 7,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"cpu", "1k", "memory", "4G", "storage", "20G"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Using requests.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: api.Container{
0000000000000000000000000000000000000000;;					Name:  "test",
0000000000000000000000000000000000000000;;					Image: "image",
0000000000000000000000000000000000000000;;					Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;						Requests: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceCPU):     resource.MustParse("1000"),
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceMemory):  resource.MustParse("4G"),
0000000000000000000000000000000000000000;;							api.ResourceName(api.ResourceStorage): resource.MustParse("20G"),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedElements: []string{"cpu", "1k", "memory", "4G", "storage", "20G"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			out := new(bytes.Buffer)
0000000000000000000000000000000000000000;;			pod := api.Pod{
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []api.Container{testCase.container},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.PodStatus{
0000000000000000000000000000000000000000;;					ContainerStatuses: []api.ContainerStatus{testCase.status},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			writer := NewPrefixWriter(out)
0000000000000000000000000000000000000000;;			describeContainers("Containers", pod.Spec.Containers, pod.Status.ContainerStatuses, EnvValueRetriever(&pod), writer, "")
0000000000000000000000000000000000000000;;			output := out.String()
0000000000000000000000000000000000000000;;			for _, expected := range testCase.expectedElements {
0000000000000000000000000000000000000000;;				if !strings.Contains(output, expected) {
0000000000000000000000000000000000000000;;					t.Errorf("Test case %d: expected to find %q in output: %q", i, expected, output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribers(t *testing.T) {
0000000000000000000000000000000000000000;;		first := &api.Event{}
0000000000000000000000000000000000000000;;		second := &api.Pod{}
0000000000000000000000000000000000000000;;		var third *api.Pod
0000000000000000000000000000000000000000;;		testErr := fmt.Errorf("test")
0000000000000000000000000000000000000000;;		d := Describers{}
0000000000000000000000000000000000000000;;		d.Add(
0000000000000000000000000000000000000000;;			func(e *api.Event, p *api.Pod) (string, error) {
0000000000000000000000000000000000000000;;				if e != first {
0000000000000000000000000000000000000000;;					t.Errorf("first argument not equal: %#v", e)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if p != second {
0000000000000000000000000000000000000000;;					t.Errorf("second argument not equal: %#v", p)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return "test", testErr
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if out, err := d.DescribeObject(first, second); out != "test" || err != testErr {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected result: %s %v", out, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if out, err := d.DescribeObject(first, second, third); out != "" || err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected result: %s %v", out, err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if noDescriber, ok := err.(printers.ErrNoDescriber); ok {
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(noDescriber.Types, []string{"*api.Event", "*api.Pod", "*api.Pod"}) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected describer: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error type: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.Add(
0000000000000000000000000000000000000000;;			func(e *api.Event) (string, error) {
0000000000000000000000000000000000000000;;				if e != first {
0000000000000000000000000000000000000000;;					t.Errorf("first argument not equal: %#v", e)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return "simpler", testErr
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if out, err := d.DescribeObject(first); out != "simpler" || err != testErr {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected result: %s %v", out, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDefaultDescribers(t *testing.T) {
0000000000000000000000000000000000000000;;		out, err := DefaultObjectDescriber.DescribeObject(&api.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "foo") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err = DefaultObjectDescriber.DescribeObject(&api.Service{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "foo") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err = DefaultObjectDescriber.DescribeObject(&api.ReplicationController{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "foo") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err = DefaultObjectDescriber.DescribeObject(&api.Node{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "foo") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodsTotalRequests(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			pods                         *api.PodList
0000000000000000000000000000000000000000;;			expectedReqs, expectedLimits map[api.ResourceName]resource.Quantity
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pods: &api.PodList{
0000000000000000000000000000000000000000;;					Items: []api.Pod{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;											Requests: api.ResourceList{
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceCPU):     resource.MustParse("1"),
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceMemory):  resource.MustParse("300Mi"),
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceStorage): resource.MustParse("1G"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;											Requests: api.ResourceList{
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceCPU):     resource.MustParse("90m"),
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceMemory):  resource.MustParse("120Mi"),
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceStorage): resource.MustParse("200M"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;											Requests: api.ResourceList{
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceCPU):     resource.MustParse("60m"),
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceMemory):  resource.MustParse("43Mi"),
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceStorage): resource.MustParse("500M"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Resources: api.ResourceRequirements{
0000000000000000000000000000000000000000;;											Requests: api.ResourceList{
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceCPU):     resource.MustParse("34m"),
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceMemory):  resource.MustParse("83Mi"),
0000000000000000000000000000000000000000;;												api.ResourceName(api.ResourceStorage): resource.MustParse("700M"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedReqs: map[api.ResourceName]resource.Quantity{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceCPU):     resource.MustParse("1.184"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceMemory):  resource.MustParse("546Mi"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceStorage): resource.MustParse("2.4G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			reqs, _, err := getPodsTotalRequestsAndLimits(testCase.pods)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(reqs, testCase.expectedReqs) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", testCase.expectedReqs, reqs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPersistentVolumeDescriber(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]*api.PersistentVolume{
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"hostpath": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						HostPath: &api.HostPathVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"gce": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						GCEPersistentDisk: &api.GCEPersistentDiskVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"ebs": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						AWSElasticBlockStore: &api.AWSElasticBlockStoreVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"nfs": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						NFS: &api.NFSVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"iscsi": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						ISCSI: &api.ISCSIVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"gluster": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						Glusterfs: &api.GlusterfsVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"rbd": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						RBD: &api.RBDVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"quobyte": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						Quobyte: &api.QuobyteVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"cinder": {
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec: api.PersistentVolumeSpec{
0000000000000000000000000000000000000000;;					PersistentVolumeSource: api.PersistentVolumeSource{
0000000000000000000000000000000000000000;;						Cinder: &api.CinderVolumeSource{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, pv := range tests {
0000000000000000000000000000000000000000;;			fake := fake.NewSimpleClientset(pv)
0000000000000000000000000000000000000000;;			c := PersistentVolumeDescriber{fake}
0000000000000000000000000000000000000000;;			str, err := c.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error for test %s: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if str == "" {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected empty string for test %s.  Expected PV Describer output", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		versionedFake := versionedfake.NewSimpleClientset(&v1beta1.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: util.Int32Ptr(1),
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{},
0000000000000000000000000000000000000000;;				Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{Image: "mytest-image:latest"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		d := DeploymentDescriber{fake, versionedFake}
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "bar") || !strings.Contains(out, "foo") || !strings.Contains(out, "Containers:") || !strings.Contains(out, "mytest-image:latest") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		cluster := federation.Cluster{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "foo",
0000000000000000000000000000000000000000;;				ResourceVersion: "4",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"name": "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: federation.ClusterSpec{
0000000000000000000000000000000000000000;;				ServerAddressByClientCIDRs: []federation.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;						ServerAddress: "localhost:8888",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: federation.ClusterStatus{
0000000000000000000000000000000000000000;;				Conditions: []federation.ClusterCondition{
0000000000000000000000000000000000000000;;					{Type: federation.ClusterReady, Status: api.ConditionTrue},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fake := fedfake.NewSimpleClientset(&cluster)
0000000000000000000000000000000000000000;;		d := ClusterDescriber{Interface: fake}
0000000000000000000000000000000000000000;;		out, err := d.Describe("any", "foo", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "foo") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeStorageClass(t *testing.T) {
0000000000000000000000000000000000000000;;		f := fake.NewSimpleClientset(&storage.StorageClass{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "foo",
0000000000000000000000000000000000000000;;				ResourceVersion: "4",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					"name": "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Provisioner: "my-provisioner",
0000000000000000000000000000000000000000;;			Parameters: map[string]string{
0000000000000000000000000000000000000000;;				"param1": "value1",
0000000000000000000000000000000000000000;;				"param2": "value2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		s := StorageClassDescriber{f}
0000000000000000000000000000000000000000;;		out, err := s.Describe("", "foo", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "foo") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribePodDisruptionBudget(t *testing.T) {
0000000000000000000000000000000000000000;;		minAvailable := intstr.FromInt(22)
0000000000000000000000000000000000000000;;		f := fake.NewSimpleClientset(&policy.PodDisruptionBudget{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:         "ns1",
0000000000000000000000000000000000000000;;				Name:              "pdb1",
0000000000000000000000000000000000000000;;				CreationTimestamp: metav1.Time{Time: time.Now().Add(1.9e9)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: policy.PodDisruptionBudgetSpec{
0000000000000000000000000000000000000000;;				MinAvailable: &minAvailable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: policy.PodDisruptionBudgetStatus{
0000000000000000000000000000000000000000;;				PodDisruptionsAllowed: 5,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		s := PodDisruptionBudgetDescriber{f}
0000000000000000000000000000000000000000;;		out, err := s.Describe("ns1", "pdb1", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "pdb1") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeHorizontalPodAutoscaler(t *testing.T) {
0000000000000000000000000000000000000000;;		minReplicasVal := int32(2)
0000000000000000000000000000000000000000;;		targetUtilizationVal := int32(80)
0000000000000000000000000000000000000000;;		currentUtilizationVal := int32(50)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			hpa  autoscaling.HorizontalPodAutoscaler
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"minReplicas unset",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"pods source type (no current)",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "some-pods-metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"pods source type (with current)",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "some-pods-metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricStatus{
0000000000000000000000000000000000000000;;									MetricName:          "some-pods-metric",
0000000000000000000000000000000000000000;;									CurrentAverageValue: *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"object source type (no current)",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;								Object: &autoscaling.ObjectMetricSource{
0000000000000000000000000000000000000000;;									Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;										Name: "some-service",
0000000000000000000000000000000000000000;;										Kind: "Service",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									MetricName:  "some-service-metric",
0000000000000000000000000000000000000000;;									TargetValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"object source type (with current)",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;								Object: &autoscaling.ObjectMetricSource{
0000000000000000000000000000000000000000;;									Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;										Name: "some-service",
0000000000000000000000000000000000000000;;										Kind: "Service",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									MetricName:  "some-service-metric",
0000000000000000000000000000000000000000;;									TargetValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ObjectMetricSourceType,
0000000000000000000000000000000000000000;;								Object: &autoscaling.ObjectMetricStatus{
0000000000000000000000000000000000000000;;									Target: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;										Name: "some-service",
0000000000000000000000000000000000000000;;										Kind: "Service",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									MetricName:   "some-service-metric",
0000000000000000000000000000000000000000;;									CurrentValue: *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"resource source type, target average value (no current)",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name:               api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageValue: resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"resource source type, target average value (with current)",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name:               api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageValue: resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricStatus{
0000000000000000000000000000000000000000;;									Name:                api.ResourceCPU,
0000000000000000000000000000000000000000;;									CurrentAverageValue: *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"resource source type, target utilization (no current)",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: &targetUtilizationVal,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"resource source type, target utilization (with current)",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: &targetUtilizationVal,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricStatus{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									CurrentAverageUtilization: &currentUtilizationVal,
0000000000000000000000000000000000000000;;									CurrentAverageValue:       *resource.NewMilliQuantity(40, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"multiple metrics",
0000000000000000000000000000000000000000;;				autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;						ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;							Name: "some-rc",
0000000000000000000000000000000000000000;;							Kind: "ReplicationController",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						MinReplicas: &minReplicasVal,
0000000000000000000000000000000000000000;;						MaxReplicas: 10,
0000000000000000000000000000000000000000;;						Metrics: []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "some-pods-metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(100, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									TargetAverageUtilization: &targetUtilizationVal,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricSource{
0000000000000000000000000000000000000000;;									MetricName:         "other-pods-metric",
0000000000000000000000000000000000000000;;									TargetAverageValue: *resource.NewMilliQuantity(400, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: autoscaling.HorizontalPodAutoscalerStatus{
0000000000000000000000000000000000000000;;						CurrentReplicas: 4,
0000000000000000000000000000000000000000;;						DesiredReplicas: 5,
0000000000000000000000000000000000000000;;						CurrentMetrics: []autoscaling.MetricStatus{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.PodsMetricSourceType,
0000000000000000000000000000000000000000;;								Pods: &autoscaling.PodsMetricStatus{
0000000000000000000000000000000000000000;;									MetricName:          "some-pods-metric",
0000000000000000000000000000000000000000;;									CurrentAverageValue: *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;								Resource: &autoscaling.ResourceMetricStatus{
0000000000000000000000000000000000000000;;									Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;									CurrentAverageUtilization: &currentUtilizationVal,
0000000000000000000000000000000000000000;;									CurrentAverageValue:       *resource.NewMilliQuantity(40, resource.DecimalSI),
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			test.hpa.ObjectMeta = metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "foo",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fake := fake.NewSimpleClientset(&test.hpa)
0000000000000000000000000000000000000000;;			desc := HorizontalPodAutoscalerDescriber{fake}
0000000000000000000000000000000000000000;;			str, err := desc.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error for test %s: %v", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if str == "" {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected empty string for test %s.  Expected HPA Describer output", test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Logf("Description for %q:\n%s", test.name, str)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeEvents(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		events := &api.EventList{
0000000000000000000000000000000000000000;;			Items: []api.Event{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Source:         api.EventSource{Component: "kubelet"},
0000000000000000000000000000000000000000;;					Message:        "Item 1",
0000000000000000000000000000000000000000;;					FirstTimestamp: metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					LastTimestamp:  metav1.NewTime(time.Date(2014, time.January, 15, 0, 0, 0, 0, time.UTC)),
0000000000000000000000000000000000000000;;					Count:          1,
0000000000000000000000000000000000000000;;					Type:           api.EventTypeNormal,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m := map[string]printers.Describer{
0000000000000000000000000000000000000000;;			"DaemonSetDescriber": &DaemonSetDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&extensions.DaemonSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"DeploymentDescriber": &DeploymentDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(events),
0000000000000000000000000000000000000000;;				versionedfake.NewSimpleClientset(&v1beta1.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: util.Int32Ptr(1),
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"EndpointsDescriber": &EndpointsDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&api.Endpoints{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// TODO(jchaloup): add tests for:
0000000000000000000000000000000000000000;;			// - IngressDescriber
0000000000000000000000000000000000000000;;			// - JobDescriber
0000000000000000000000000000000000000000;;			"NodeDescriber": &NodeDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&api.Node{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:     "bar",
0000000000000000000000000000000000000000;;						SelfLink: "url/url/url",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"PersistentVolumeDescriber": &PersistentVolumeDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&api.PersistentVolume{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:     "bar",
0000000000000000000000000000000000000000;;						SelfLink: "url/url/url",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"PodDescriber": &PodDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;						SelfLink:  "url/url/url",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"ReplicaSetDescriber": &ReplicaSetDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"ReplicationControllerDescriber": &ReplicationControllerDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"Service": &ServiceDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"StorageClass": &StorageClassDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&storage.StorageClass{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"HorizontalPodAutoscaler": &HorizontalPodAutoscalerDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"ConfigMap": &ConfigMapDescriber{
0000000000000000000000000000000000000000;;				fake.NewSimpleClientset(&api.ConfigMap{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}, events),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, d := range m {
0000000000000000000000000000000000000000;;			out, err := d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error for %q: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !strings.Contains(out, "bar") {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected out for %q: %s", name, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !strings.Contains(out, "Events:") {
0000000000000000000000000000000000000000;;				t.Errorf("events not found for %q when ShowEvents=true: %s", name, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			out, err = d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: false})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error for %q: %s", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !strings.Contains(out, "bar") {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected out for %q: %s", name, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strings.Contains(out, "Events:") {
0000000000000000000000000000000000000000;;				t.Errorf("events found for %q when ShowEvents=false: %s", name, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrintLabelsMultiline(t *testing.T) {
0000000000000000000000000000000000000000;;		var maxLenAnnotationStr string = "MaxLenAnnotation=Multicast addressing can be used in the link layer (Layer 2 in the OSI model), such as Ethernet multicast, and at the internet layer (Layer 3 for OSI) for Internet Protocol Version 4 "
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			annotations map[string]string
0000000000000000000000000000000000000000;;			expectPrint string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				annotations: map[string]string{"col1": "asd", "COL2": "zxc"},
0000000000000000000000000000000000000000;;				expectPrint: "Annotations:\tCOL2=zxc\n\tcol1=asd\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				annotations: map[string]string{"MaxLenAnnotation": maxLenAnnotationStr[17:]},
0000000000000000000000000000000000000000;;				expectPrint: "Annotations:\t" + maxLenAnnotationStr + "\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				annotations: map[string]string{"MaxLenAnnotation": maxLenAnnotationStr[17:] + "1"},
0000000000000000000000000000000000000000;;				expectPrint: "Annotations:\t" + maxLenAnnotationStr + "...\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				annotations: map[string]string{},
0000000000000000000000000000000000000000;;				expectPrint: "Annotations:\t<none>\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			out := new(bytes.Buffer)
0000000000000000000000000000000000000000;;			writer := NewPrefixWriter(out)
0000000000000000000000000000000000000000;;			printAnnotationsMultiline(writer, "Annotations", testCase.annotations)
0000000000000000000000000000000000000000;;			output := out.String()
0000000000000000000000000000000000000000;;			if output != testCase.expectPrint {
0000000000000000000000000000000000000000;;				t.Errorf("Test case %d: expected to find %q in output: %q", i, testCase.expectPrint, output)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeUnstructuredContent(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			expected   string
0000000000000000000000000000000000000000;;			unexpected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				expected: `API Version:	v1
0000000000000000000000000000000000000000;;	Dummy 2:	present
0000000000000000000000000000000000000000;;	Items:
0000000000000000000000000000000000000000;;	  Item Bool:	true
0000000000000000000000000000000000000000;;	  Item Int:	42
0000000000000000000000000000000000000000;;	Kind:	Test
0000000000000000000000000000000000000000;;	Metadata:
0000000000000000000000000000000000000000;;	  Creation Timestamp:	2017-04-01T00:00:00Z
0000000000000000000000000000000000000000;;	  Name:	MyName
0000000000000000000000000000000000000000;;	  Namespace:	MyNamespace
0000000000000000000000000000000000000000;;	  Resource Version:	123
0000000000000000000000000000000000000000;;	  UID:	00000000-0000-0000-0000-000000000001
0000000000000000000000000000000000000000;;	Status:	ok
0000000000000000000000000000000000000000;;	URL:	http://localhost
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				unexpected: "\nDummy 1:\tpresent\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				unexpected: "Dummy 1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				unexpected: "Dummy 3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				unexpected: "Dummy3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				unexpected: "dummy3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				unexpected: "dummy 3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		w := NewPrefixWriter(out)
0000000000000000000000000000000000000000;;		obj := &unstructured.Unstructured{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"apiVersion": "v1",
0000000000000000000000000000000000000000;;				"kind":       "Test",
0000000000000000000000000000000000000000;;				"dummy1":     "present",
0000000000000000000000000000000000000000;;				"dummy2":     "present",
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":              "MyName",
0000000000000000000000000000000000000000;;					"namespace":         "MyNamespace",
0000000000000000000000000000000000000000;;					"creationTimestamp": "2017-04-01T00:00:00Z",
0000000000000000000000000000000000000000;;					"resourceVersion":   123,
0000000000000000000000000000000000000000;;					"uid":               "00000000-0000-0000-0000-000000000001",
0000000000000000000000000000000000000000;;					"dummy3":            "present",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"items": []interface{}{
0000000000000000000000000000000000000000;;					map[string]interface{}{
0000000000000000000000000000000000000000;;						"itemBool": true,
0000000000000000000000000000000000000000;;						"itemInt":  42,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"url":    "http://localhost",
0000000000000000000000000000000000000000;;				"status": "ok",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		printUnstructuredContent(w, LEVEL_0, obj.UnstructuredContent(), "", ".dummy1", ".metadata.dummy3")
0000000000000000000000000000000000000000;;		output := out.String()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			if len(test.expected) > 0 {
0000000000000000000000000000000000000000;;				if !strings.Contains(output, test.expected) {
0000000000000000000000000000000000000000;;					t.Errorf("Expected to find %q in: %q", test.expected, output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(test.unexpected) > 0 {
0000000000000000000000000000000000000000;;				if strings.Contains(output, test.unexpected) {
0000000000000000000000000000000000000000;;					t.Errorf("Didn't expect to find %q in: %q", test.unexpected, output)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeResourceQuota(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&api.ResourceQuota{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ResourceQuotaStatus{
0000000000000000000000000000000000000000;;				Hard: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceCPU):            resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceLimitsCPU):      resource.MustParse("2"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceLimitsMemory):   resource.MustParse("2G"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceMemory):         resource.MustParse("1G"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceRequestsCPU):    resource.MustParse("1"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceRequestsMemory): resource.MustParse("1G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Used: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceCPU):            resource.MustParse("0"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceLimitsCPU):      resource.MustParse("0"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceLimitsMemory):   resource.MustParse("0G"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceMemory):         resource.MustParse("0G"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceRequestsCPU):    resource.MustParse("0"),
0000000000000000000000000000000000000000;;					api.ResourceName(api.ResourceRequestsMemory): resource.MustParse("0G"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		c := &describeClient{T: t, Namespace: "foo", Interface: fake}
0000000000000000000000000000000000000000;;		d := ResourceQuotaDescriber{c}
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedOut := []string{"bar", "foo", "limits.cpu", "2", "limits.memory", "2G", "requests.cpu", "1", "requests.memory", "1G"}
0000000000000000000000000000000000000000;;		for _, expected := range expectedOut {
0000000000000000000000000000000000000000;;			if !strings.Contains(out, expected) {
0000000000000000000000000000000000000000;;				t.Errorf("expected to find %q in output: %q", expected, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// boolPtr returns a pointer to a bool
0000000000000000000000000000000000000000;;	func boolPtr(b bool) *bool {
0000000000000000000000000000000000000000;;		o := b
0000000000000000000000000000000000000000;;		return &o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestControllerRef(t *testing.T) {
0000000000000000000000000000000000000000;;		f := fake.NewSimpleClientset(
0000000000000000000000000000000000000000;;			&api.ReplicationController{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;					UID:       "123456",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;					Kind: "ReplicationController",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;					Replicas: 1,
0000000000000000000000000000000000000000;;					Selector: map[string]string{"abc": "xyz"},
0000000000000000000000000000000000000000;;					Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;						Spec: api.PodSpec{
0000000000000000000000000000000000000000;;							Containers: []api.Container{
0000000000000000000000000000000000000000;;								{Image: "mytest-image:latest"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:            "barpod",
0000000000000000000000000000000000000000;;					Namespace:       "foo",
0000000000000000000000000000000000000000;;					Labels:          map[string]string{"abc": "xyz"},
0000000000000000000000000000000000000000;;					OwnerReferences: []metav1.OwnerReference{{Name: "bar", UID: "123456", Controller: boolPtr(true)}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;					Kind: "Pod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []api.Container{
0000000000000000000000000000000000000000;;						{Image: "mytest-image:latest"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.PodStatus{
0000000000000000000000000000000000000000;;					Phase: api.PodRunning,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:      "orphan",
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;					Labels:    map[string]string{"abc": "xyz"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;					Kind: "Pod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []api.Container{
0000000000000000000000000000000000000000;;						{Image: "mytest-image:latest"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.PodStatus{
0000000000000000000000000000000000000000;;					Phase: api.PodRunning,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:            "buzpod",
0000000000000000000000000000000000000000;;					Namespace:       "foo",
0000000000000000000000000000000000000000;;					Labels:          map[string]string{"abc": "xyz"},
0000000000000000000000000000000000000000;;					OwnerReferences: []metav1.OwnerReference{{Name: "buz", UID: "654321", Controller: boolPtr(true)}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;					Kind: "Pod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: api.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []api.Container{
0000000000000000000000000000000000000000;;						{Image: "mytest-image:latest"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.PodStatus{
0000000000000000000000000000000000000000;;					Phase: api.PodRunning,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		d := ReplicationControllerDescriber{f}
0000000000000000000000000000000000000000;;		out, err := d.Describe("foo", "bar", printers.DescriberSettings{ShowEvents: false})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(out, "1 Running") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected out: %s", out)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
