0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d4c1bea151e6a908e64c0756c48fb11aeb0af019;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package printers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetStandardPrinter takes a format type, an optional format argument. It will return
0000000000000000000000000000000000000000;;	// a printer or an error. The printer is agnostic to schema versions, so you must
0000000000000000000000000000000000000000;;	// send arguments to PrintObj in the version you wish them to be shown using a
0000000000000000000000000000000000000000;;	// VersionedPrinter (typically when generic is true).
0000000000000000000000000000000000000000;;	func GetStandardPrinter(outputOpts *OutputOptions, noHeaders bool, mapper meta.RESTMapper, typer runtime.ObjectTyper, encoder runtime.Encoder, decoders []runtime.Decoder, options PrintOptions) (ResourcePrinter, error) {
0000000000000000000000000000000000000000;;		if outputOpts == nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("no output options specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		format, formatArgument, allowMissingTemplateKeys := outputOpts.FmtType, outputOpts.FmtArg, outputOpts.AllowMissingKeys
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var printer ResourcePrinter
0000000000000000000000000000000000000000;;		switch format {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "json":
0000000000000000000000000000000000000000;;			printer = &JSONPrinter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "yaml":
0000000000000000000000000000000000000000;;			printer = &YAMLPrinter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "name":
0000000000000000000000000000000000000000;;			printer = &NamePrinter{
0000000000000000000000000000000000000000;;				Typer:    typer,
0000000000000000000000000000000000000000;;				Decoders: decoders,
0000000000000000000000000000000000000000;;				Mapper:   mapper,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "template", "go-template":
0000000000000000000000000000000000000000;;			if len(formatArgument) == 0 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("template format specified but no template given")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			templatePrinter, err := NewTemplatePrinter([]byte(formatArgument))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("error parsing template %s, %v\n", formatArgument, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			templatePrinter.AllowMissingKeys(allowMissingTemplateKeys)
0000000000000000000000000000000000000000;;			printer = templatePrinter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "templatefile", "go-template-file":
0000000000000000000000000000000000000000;;			if len(formatArgument) == 0 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("templatefile format specified but no template file given")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			data, err := ioutil.ReadFile(formatArgument)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("error reading template %s, %v\n", formatArgument, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			templatePrinter, err := NewTemplatePrinter(data)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("error parsing template %s, %v\n", string(data), err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			templatePrinter.AllowMissingKeys(allowMissingTemplateKeys)
0000000000000000000000000000000000000000;;			printer = templatePrinter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "jsonpath":
0000000000000000000000000000000000000000;;			if len(formatArgument) == 0 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("jsonpath template format specified but no template given")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			jsonpathPrinter, err := NewJSONPathPrinter(formatArgument)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("error parsing jsonpath %s, %v\n", formatArgument, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			jsonpathPrinter.AllowMissingKeys(allowMissingTemplateKeys)
0000000000000000000000000000000000000000;;			printer = jsonpathPrinter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "jsonpath-file":
0000000000000000000000000000000000000000;;			if len(formatArgument) == 0 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("jsonpath file format specified but no template file file given")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			data, err := ioutil.ReadFile(formatArgument)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("error reading template %s, %v\n", formatArgument, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			jsonpathPrinter, err := NewJSONPathPrinter(string(data))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("error parsing template %s, %v\n", string(data), err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			jsonpathPrinter.AllowMissingKeys(allowMissingTemplateKeys)
0000000000000000000000000000000000000000;;			printer = jsonpathPrinter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "custom-columns":
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			if printer, err = NewCustomColumnsPrinterFromSpec(formatArgument, decoders[0], noHeaders); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "custom-columns-file":
0000000000000000000000000000000000000000;;			file, err := os.Open(formatArgument)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("error reading template %s, %v\n", formatArgument, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer file.Close()
0000000000000000000000000000000000000000;;			if printer, err = NewCustomColumnsPrinterFromTemplate(file, decoders[0]); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case "wide":
0000000000000000000000000000000000000000;;			fallthrough
0000000000000000000000000000000000000000;;		case "":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			printer = NewHumanReadablePrinter(encoder, decoders[0], options)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("output format %q not recognized", format)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return printer, nil
0000000000000000000000000000000000000000;;	}
