0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d4c1bea151e6a908e64c0756c48fb11aeb0af019;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package printers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"text/template"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TemplatePrinter is an implementation of ResourcePrinter which formats data with a Go Template.
0000000000000000000000000000000000000000;;	type TemplatePrinter struct {
0000000000000000000000000000000000000000;;		rawTemplate string
0000000000000000000000000000000000000000;;		template    *template.Template
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTemplatePrinter(tmpl []byte) (*TemplatePrinter, error) {
0000000000000000000000000000000000000000;;		t, err := template.New("output").
0000000000000000000000000000000000000000;;			Funcs(template.FuncMap{"exists": exists}).
0000000000000000000000000000000000000000;;			Parse(string(tmpl))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &TemplatePrinter{
0000000000000000000000000000000000000000;;			rawTemplate: string(tmpl),
0000000000000000000000000000000000000000;;			template:    t,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowMissingKeys tells the template engine if missing keys are allowed.
0000000000000000000000000000000000000000;;	func (p *TemplatePrinter) AllowMissingKeys(allow bool) {
0000000000000000000000000000000000000000;;		if allow {
0000000000000000000000000000000000000000;;			p.template.Option("missingkey=default")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			p.template.Option("missingkey=error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *TemplatePrinter) AfterPrint(w io.Writer, res string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrintObj formats the obj with the Go Template.
0000000000000000000000000000000000000000;;	func (p *TemplatePrinter) PrintObj(obj runtime.Object, w io.Writer) error {
0000000000000000000000000000000000000000;;		var data []byte
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		data, err = json.Marshal(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out := map[string]interface{}{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &out); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = p.safeExecute(w, out); err != nil {
0000000000000000000000000000000000000000;;			// It is way easier to debug this stuff when it shows up in
0000000000000000000000000000000000000000;;			// stdout instead of just stdin. So in addition to returning
0000000000000000000000000000000000000000;;			// a nice error, also print useful stuff with the writer.
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "Error executing template: %v. Printing more information for debugging the template:\n", err)
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "\ttemplate was:\n\t\t%v\n", p.rawTemplate)
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "\traw data was:\n\t\t%v\n", string(data))
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "\tobject given to template engine was:\n\t\t%+v\n\n", out)
0000000000000000000000000000000000000000;;			return fmt.Errorf("error executing template %q: %v", p.rawTemplate, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: implement HandledResources()
0000000000000000000000000000000000000000;;	func (p *TemplatePrinter) HandledResources() []string {
0000000000000000000000000000000000000000;;		return []string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *TemplatePrinter) IsGeneric() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// safeExecute tries to execute the template, but catches panics and returns an error
0000000000000000000000000000000000000000;;	// should the template engine panic.
0000000000000000000000000000000000000000;;	func (p *TemplatePrinter) safeExecute(w io.Writer, obj interface{}) error {
0000000000000000000000000000000000000000;;		var panicErr error
0000000000000000000000000000000000000000;;		// Sorry for the double anonymous function. There's probably a clever way
0000000000000000000000000000000000000000;;		// to do this that has the defer'd func setting the value to be returned, but
0000000000000000000000000000000000000000;;		// that would be even less obvious.
0000000000000000000000000000000000000000;;		retErr := func() error {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				if x := recover(); x != nil {
0000000000000000000000000000000000000000;;					panicErr = fmt.Errorf("caught panic: %+v", x)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			return p.template.Execute(w, obj)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		if panicErr != nil {
0000000000000000000000000000000000000000;;			return panicErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return retErr
0000000000000000000000000000000000000000;;	}
