0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d4c1bea151e6a908e64c0756c48fb11aeb0af019;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package printers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/jsonpath"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// exists returns true if it would be possible to call the index function
0000000000000000000000000000000000000000;;	// with these arguments.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODO: how to document this for users?
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// index returns the result of indexing its first argument by the following
0000000000000000000000000000000000000000;;	// arguments.  Thus "index x 1 2 3" is, in Go syntax, x[1][2][3]. Each
0000000000000000000000000000000000000000;;	// indexed item must be a map, slice, or array.
0000000000000000000000000000000000000000;;	func exists(item interface{}, indices ...interface{}) bool {
0000000000000000000000000000000000000000;;		v := reflect.ValueOf(item)
0000000000000000000000000000000000000000;;		for _, i := range indices {
0000000000000000000000000000000000000000;;			index := reflect.ValueOf(i)
0000000000000000000000000000000000000000;;			var isNil bool
0000000000000000000000000000000000000000;;			if v, isNil = indirect(v); isNil {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			switch v.Kind() {
0000000000000000000000000000000000000000;;			case reflect.Array, reflect.Slice, reflect.String:
0000000000000000000000000000000000000000;;				var x int64
0000000000000000000000000000000000000000;;				switch index.Kind() {
0000000000000000000000000000000000000000;;				case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;					x = index.Int()
0000000000000000000000000000000000000000;;				case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
0000000000000000000000000000000000000000;;					x = int64(index.Uint())
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if x < 0 || x >= int64(v.Len()) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				v = v.Index(int(x))
0000000000000000000000000000000000000000;;			case reflect.Map:
0000000000000000000000000000000000000000;;				if !index.IsValid() {
0000000000000000000000000000000000000000;;					index = reflect.Zero(v.Type().Key())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !index.Type().AssignableTo(v.Type().Key()) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if x := v.MapIndex(index); x.IsValid() {
0000000000000000000000000000000000000000;;					v = x
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					v = reflect.Zero(v.Type().Elem())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, isNil := indirect(v); isNil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stolen from text/template
0000000000000000000000000000000000000000;;	// indirect returns the item at the end of indirection, and a bool to indicate if it's nil.
0000000000000000000000000000000000000000;;	// We indirect through pointers and empty interfaces (only) because
0000000000000000000000000000000000000000;;	// non-empty interfaces have methods we might need.
0000000000000000000000000000000000000000;;	func indirect(v reflect.Value) (rv reflect.Value, isNil bool) {
0000000000000000000000000000000000000000;;		for ; v.Kind() == reflect.Ptr || v.Kind() == reflect.Interface; v = v.Elem() {
0000000000000000000000000000000000000000;;			if v.IsNil() {
0000000000000000000000000000000000000000;;				return v, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.Kind() == reflect.Interface && v.NumMethod() > 0 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONPathPrinter is an implementation of ResourcePrinter which formats data with jsonpath expression.
0000000000000000000000000000000000000000;;	type JSONPathPrinter struct {
0000000000000000000000000000000000000000;;		rawTemplate string
0000000000000000000000000000000000000000;;		*jsonpath.JSONPath
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewJSONPathPrinter(tmpl string) (*JSONPathPrinter, error) {
0000000000000000000000000000000000000000;;		j := jsonpath.New("out")
0000000000000000000000000000000000000000;;		if err := j.Parse(tmpl); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &JSONPathPrinter{tmpl, j}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (j *JSONPathPrinter) AfterPrint(w io.Writer, res string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrintObj formats the obj with the JSONPath Template.
0000000000000000000000000000000000000000;;	func (j *JSONPathPrinter) PrintObj(obj runtime.Object, w io.Writer) error {
0000000000000000000000000000000000000000;;		var queryObj interface{} = obj
0000000000000000000000000000000000000000;;		if meta.IsListType(obj) {
0000000000000000000000000000000000000000;;			data, err := json.Marshal(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			queryObj = map[string]interface{}{}
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(data, &queryObj); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if unknown, ok := obj.(*runtime.Unknown); ok {
0000000000000000000000000000000000000000;;			data, err := json.Marshal(unknown)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			queryObj = map[string]interface{}{}
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(data, &queryObj); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if unstructured, ok := obj.(runtime.Unstructured); ok {
0000000000000000000000000000000000000000;;			queryObj = unstructured.UnstructuredContent()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := j.JSONPath.Execute(w, queryObj); err != nil {
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "Error executing template: %v. Printing more information for debugging the template:\n", err)
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "\ttemplate was:\n\t\t%v\n", j.rawTemplate)
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "\tobject given to jsonpath engine was:\n\t\t%#v\n\n", queryObj)
0000000000000000000000000000000000000000;;			return fmt.Errorf("error executing jsonpath %q: %v\n", j.rawTemplate, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: implement HandledResources()
0000000000000000000000000000000000000000;;	func (p *JSONPathPrinter) HandledResources() []string {
0000000000000000000000000000000000000000;;		return []string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *JSONPathPrinter) IsGeneric() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
