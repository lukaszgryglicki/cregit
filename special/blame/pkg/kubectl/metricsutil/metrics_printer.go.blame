0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2b934ba029573c39bdac328d720ca9bd8c22aa1e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metricsutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;		metricsapi "k8s.io/metrics/pkg/apis/metrics/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		MeasuredResources = []api.ResourceName{
0000000000000000000000000000000000000000;;			api.ResourceCPU,
0000000000000000000000000000000000000000;;			api.ResourceMemory,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		NodeColumns     = []string{"NAME", "CPU(cores)", "CPU%", "MEMORY(bytes)", "MEMORY%"}
0000000000000000000000000000000000000000;;		PodColumns      = []string{"NAME", "CPU(cores)", "MEMORY(bytes)"}
0000000000000000000000000000000000000000;;		NamespaceColumn = "NAMESPACE"
0000000000000000000000000000000000000000;;		PodColumn       = "POD"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceMetricsInfo struct {
0000000000000000000000000000000000000000;;		Name      string
0000000000000000000000000000000000000000;;		Metrics   api.ResourceList
0000000000000000000000000000000000000000;;		Available api.ResourceList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TopCmdPrinter struct {
0000000000000000000000000000000000000000;;		out io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTopCmdPrinter(out io.Writer) *TopCmdPrinter {
0000000000000000000000000000000000000000;;		return &TopCmdPrinter{out: out}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (printer *TopCmdPrinter) PrintNodeMetrics(metrics []metricsapi.NodeMetrics, availableResources map[string]api.ResourceList) error {
0000000000000000000000000000000000000000;;		if len(metrics) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w := printers.GetNewTabWriter(printer.out)
0000000000000000000000000000000000000000;;		defer w.Flush()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		printColumnNames(w, NodeColumns)
0000000000000000000000000000000000000000;;		var usage api.ResourceList
0000000000000000000000000000000000000000;;		for _, m := range metrics {
0000000000000000000000000000000000000000;;			err := api.Scheme.Convert(&m.Usage, &usage, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			printMetricsLine(w, &ResourceMetricsInfo{
0000000000000000000000000000000000000000;;				Name:      m.Name,
0000000000000000000000000000000000000000;;				Metrics:   usage,
0000000000000000000000000000000000000000;;				Available: availableResources[m.Name],
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (printer *TopCmdPrinter) PrintPodMetrics(metrics []metricsapi.PodMetrics, printContainers bool, withNamespace bool) error {
0000000000000000000000000000000000000000;;		if len(metrics) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w := printers.GetNewTabWriter(printer.out)
0000000000000000000000000000000000000000;;		defer w.Flush()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if withNamespace {
0000000000000000000000000000000000000000;;			printValue(w, NamespaceColumn)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if printContainers {
0000000000000000000000000000000000000000;;			printValue(w, PodColumn)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		printColumnNames(w, PodColumns)
0000000000000000000000000000000000000000;;		for _, m := range metrics {
0000000000000000000000000000000000000000;;			err := printSinglePodMetrics(w, &m, printContainers, withNamespace)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printColumnNames(out io.Writer, names []string) {
0000000000000000000000000000000000000000;;		for _, name := range names {
0000000000000000000000000000000000000000;;			printValue(out, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Fprint(out, "\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printSinglePodMetrics(out io.Writer, m *metricsapi.PodMetrics, printContainersOnly bool, withNamespace bool) error {
0000000000000000000000000000000000000000;;		containers := make(map[string]api.ResourceList)
0000000000000000000000000000000000000000;;		podMetrics := make(api.ResourceList)
0000000000000000000000000000000000000000;;		for _, res := range MeasuredResources {
0000000000000000000000000000000000000000;;			podMetrics[res], _ = resource.ParseQuantity("0")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range m.Containers {
0000000000000000000000000000000000000000;;			var usage api.ResourceList
0000000000000000000000000000000000000000;;			err := api.Scheme.Convert(&c.Usage, &usage, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			containers[c.Name] = usage
0000000000000000000000000000000000000000;;			if !printContainersOnly {
0000000000000000000000000000000000000000;;				for _, res := range MeasuredResources {
0000000000000000000000000000000000000000;;					quantity := podMetrics[res]
0000000000000000000000000000000000000000;;					quantity.Add(usage[res])
0000000000000000000000000000000000000000;;					podMetrics[res] = quantity
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if printContainersOnly {
0000000000000000000000000000000000000000;;			for contName := range containers {
0000000000000000000000000000000000000000;;				if withNamespace {
0000000000000000000000000000000000000000;;					printValue(out, m.Namespace)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				printValue(out, m.Name)
0000000000000000000000000000000000000000;;				printMetricsLine(out, &ResourceMetricsInfo{
0000000000000000000000000000000000000000;;					Name:      contName,
0000000000000000000000000000000000000000;;					Metrics:   containers[contName],
0000000000000000000000000000000000000000;;					Available: api.ResourceList{},
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if withNamespace {
0000000000000000000000000000000000000000;;				printValue(out, m.Namespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			printMetricsLine(out, &ResourceMetricsInfo{
0000000000000000000000000000000000000000;;				Name:      m.Name,
0000000000000000000000000000000000000000;;				Metrics:   podMetrics,
0000000000000000000000000000000000000000;;				Available: api.ResourceList{},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printMetricsLine(out io.Writer, metrics *ResourceMetricsInfo) {
0000000000000000000000000000000000000000;;		printValue(out, metrics.Name)
0000000000000000000000000000000000000000;;		printAllResourceUsages(out, metrics)
0000000000000000000000000000000000000000;;		fmt.Fprint(out, "\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printValue(out io.Writer, value interface{}) {
0000000000000000000000000000000000000000;;		fmt.Fprintf(out, "%v\t", value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printAllResourceUsages(out io.Writer, metrics *ResourceMetricsInfo) {
0000000000000000000000000000000000000000;;		for _, res := range MeasuredResources {
0000000000000000000000000000000000000000;;			quantity := metrics.Metrics[res]
0000000000000000000000000000000000000000;;			printSingleResourceUsage(out, res, quantity)
0000000000000000000000000000000000000000;;			fmt.Fprint(out, "\t")
0000000000000000000000000000000000000000;;			if available, found := metrics.Available[res]; found {
0000000000000000000000000000000000000000;;				fraction := float64(quantity.MilliValue()) / float64(available.MilliValue()) * 100
0000000000000000000000000000000000000000;;				fmt.Fprintf(out, "%d%%\t", int64(fraction))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printSingleResourceUsage(out io.Writer, resourceType api.ResourceName, quantity resource.Quantity) {
0000000000000000000000000000000000000000;;		switch resourceType {
0000000000000000000000000000000000000000;;		case api.ResourceCPU:
0000000000000000000000000000000000000000;;			fmt.Fprintf(out, "%vm", quantity.MilliValue())
0000000000000000000000000000000000000000;;		case api.ResourceMemory:
0000000000000000000000000000000000000000;;			fmt.Fprintf(out, "%vMi", quantity.Value()/(1024*1024))
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			fmt.Fprintf(out, "%v", quantity.Value())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
