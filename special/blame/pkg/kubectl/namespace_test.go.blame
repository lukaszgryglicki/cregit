0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f5c3f879514cf5b75e7d79535df3a924c9c4ae20;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamespaceGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *api.Namespace
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;			index     int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name": "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &api.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params:    map[string]interface{}{},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name": 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name": "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name": nil,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name_wrong_key": "some_value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"NAME": "some_value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		generator := NamespaceGeneratorV1{}
0000000000000000000000000000000000000000;;		for index, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case test.expectErr && err != nil:
0000000000000000000000000000000000000000;;				continue // loop, since there's no output to check
0000000000000000000000000000000000000000;;			case test.expectErr && err == nil:
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected error and didn't get one", index)
0000000000000000000000000000000000000000;;				continue // loop, no expected output object
0000000000000000000000000000000000000000;;			case !test.expectErr && err != nil:
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error %v", index, err)
0000000000000000000000000000000000000000;;				continue // loop, no output object
0000000000000000000000000000000000000000;;			case !test.expectErr && err == nil:
0000000000000000000000000000000000000000;;				// do nothing and drop through
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*api.Namespace), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v", test.expected, obj.(*api.Namespace))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
