0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f763bbcdb97725724165834097217292d1549489;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetupOutputWriterNoOp(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []string{"", "-"}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			out := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			f, _, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;			cmd := NewCmdClusterInfoDump(f, os.Stdout)
0000000000000000000000000000000000000000;;			cmd.Flag("output-directory").Value.Set(test)
0000000000000000000000000000000000000000;;			writer := setupOutputWriter(cmd, out, "/some/file/that/should/be/ignored")
0000000000000000000000000000000000000000;;			if writer != out {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %v, saw: %v", out, writer)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetupOutputWriterFile(t *testing.T) {
0000000000000000000000000000000000000000;;		file := "output.json"
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir(os.TempDir(), "out")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fullPath := path.Join(dir, file)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		f, _, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		cmd := NewCmdClusterInfoDump(f, os.Stdout)
0000000000000000000000000000000000000000;;		cmd.Flag("output-directory").Value.Set(dir)
0000000000000000000000000000000000000000;;		writer := setupOutputWriter(cmd, out, file)
0000000000000000000000000000000000000000;;		if writer == out {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %v, saw: %v", out, writer)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output := "some data here"
0000000000000000000000000000000000000000;;		writer.Write([]byte(output))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile(fullPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(data) != output {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %v, saw: %v", output, data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
