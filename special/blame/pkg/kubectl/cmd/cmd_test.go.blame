0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
4eab0655b8ebe70748db24e78fa71c855efe7db3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		stdstrings "strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;		printersinternal "k8s.io/kubernetes/pkg/printers/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initTestErrorHandler(t *testing.T) {
0000000000000000000000000000000000000000;;		cmdutil.BehaviorOnFatal(func(str string, code int) {
0000000000000000000000000000000000000000;;			t.Errorf("Error running command (exit code %d): %s", code, str)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultHeader() http.Header {
0000000000000000000000000000000000000000;;		header := http.Header{}
0000000000000000000000000000000000000000;;		header.Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;		return header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultClientConfig() *restclient.Config {
0000000000000000000000000000000000000000;;		return &restclient.Config{
0000000000000000000000000000000000000000;;			APIPath: "/api",
0000000000000000000000000000000000000000;;			ContentConfig: restclient.ContentConfig{
0000000000000000000000000000000000000000;;				NegotiatedSerializer: api.Codecs,
0000000000000000000000000000000000000000;;				ContentType:          runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				GroupVersion:         &api.Registry.GroupOrDie(api.GroupName).GroupVersion,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultClientConfigForVersion(version *schema.GroupVersion) *restclient.Config {
0000000000000000000000000000000000000000;;		return &restclient.Config{
0000000000000000000000000000000000000000;;			APIPath: "/api",
0000000000000000000000000000000000000000;;			ContentConfig: restclient.ContentConfig{
0000000000000000000000000000000000000000;;				NegotiatedSerializer: api.Codecs,
0000000000000000000000000000000000000000;;				ContentType:          runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				GroupVersion:         version,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testPrinter struct {
0000000000000000000000000000000000000000;;		Objects        []runtime.Object
0000000000000000000000000000000000000000;;		Err            error
0000000000000000000000000000000000000000;;		GenericPrinter bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testPrinter) PrintObj(obj runtime.Object, out io.Writer) error {
0000000000000000000000000000000000000000;;		t.Objects = append(t.Objects, obj)
0000000000000000000000000000000000000000;;		fmt.Fprintf(out, "%#v", obj)
0000000000000000000000000000000000000000;;		return t.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: implement HandledResources()
0000000000000000000000000000000000000000;;	func (t *testPrinter) HandledResources() []string {
0000000000000000000000000000000000000000;;		return []string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testPrinter) AfterPrint(output io.Writer, res string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testPrinter) IsGeneric() bool {
0000000000000000000000000000000000000000;;		return t.GenericPrinter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testDescriber struct {
0000000000000000000000000000000000000000;;		Name, Namespace string
0000000000000000000000000000000000000000;;		Settings        printers.DescriberSettings
0000000000000000000000000000000000000000;;		Output          string
0000000000000000000000000000000000000000;;		Err             error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testDescriber) Describe(namespace, name string, describerSettings printers.DescriberSettings) (output string, err error) {
0000000000000000000000000000000000000000;;		t.Namespace, t.Name = namespace, name
0000000000000000000000000000000000000000;;		t.Settings = describerSettings
0000000000000000000000000000000000000000;;		return t.Output, t.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func objBody(codec runtime.Codec, obj runtime.Object) io.ReadCloser {
0000000000000000000000000000000000000000;;		return ioutil.NopCloser(bytes.NewReader([]byte(runtime.EncodeOrDie(codec, obj))))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func policyObjBody(obj runtime.Object) io.ReadCloser {
0000000000000000000000000000000000000000;;		return ioutil.NopCloser(bytes.NewReader([]byte(runtime.EncodeOrDie(testapi.Policy.Codec(), obj))))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func bytesBody(bodyBytes []byte) io.ReadCloser {
0000000000000000000000000000000000000000;;		return ioutil.NopCloser(bytes.NewReader(bodyBytes))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringBody(body string) io.ReadCloser {
0000000000000000000000000000000000000000;;		return ioutil.NopCloser(bytes.NewReader([]byte(body)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(jlowdermilk): refactor the Factory so we can test client versions properly,
0000000000000000000000000000000000000000;;	// with different client/server version skew scenarios.
0000000000000000000000000000000000000000;;	// Verify that resource.RESTClients constructed from a factory respect mapping.APIVersion
0000000000000000000000000000000000000000;;	//func TestClientVersions(t *testing.T) {
0000000000000000000000000000000000000000;;	//	f := cmdutil.NewFactory(nil)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	version := testapi.Default.Version()
0000000000000000000000000000000000000000;;	//	mapping := &meta.RESTMapping{
0000000000000000000000000000000000000000;;	//		APIVersion: version,
0000000000000000000000000000000000000000;;	//	}
0000000000000000000000000000000000000000;;	//	c, err := f.ClientForMapping(mapping)
0000000000000000000000000000000000000000;;	//	if err != nil {
0000000000000000000000000000000000000000;;	//		t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;	//	}
0000000000000000000000000000000000000000;;	//	client := c.(*client.RESTClient)
0000000000000000000000000000000000000000;;	//	if client.APIVersion() != version {
0000000000000000000000000000000000000000;;	//		t.Errorf("unexpected Client APIVersion: %s %v", client.APIVersion, client)
0000000000000000000000000000000000000000;;	//	}
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_printReplicationControllerWithNamespace() {
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		p := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			WithNamespace: true,
0000000000000000000000000000000000000000;;			ColumnLabels:  []string{},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		printersinternal.AddHandlers(p)
0000000000000000000000000000000000000000;;		tf.Printer = p
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client:               nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := NewCmdRun(f, os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;		ctrl := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              "foo",
0000000000000000000000000000000000000000;;				Namespace:         "beep",
0000000000000000000000000000000000000000;;				Labels:            map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: 1,
0000000000000000000000000000000000000000;;				Selector: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "foo",
0000000000000000000000000000000000000000;;								Image: "someimage",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas:      1,
0000000000000000000000000000000000000000;;				ReadyReplicas: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		err := f.PrintObject(cmd, false, mapper, ctrl, os.Stdout)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// NAMESPACE   NAME      DESIRED   CURRENT   READY     AGE
0000000000000000000000000000000000000000;;		// beep        foo       1         1         1         10y
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_printMultiContainersReplicationControllerWithWide() {
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		p := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			Wide:         true,
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		printersinternal.AddHandlers(p)
0000000000000000000000000000000000000000;;		tf.Printer = p
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client:               nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := NewCmdRun(f, os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;		ctrl := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              "foo",
0000000000000000000000000000000000000000;;				Labels:            map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: 1,
0000000000000000000000000000000000000000;;				Selector: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "foo",
0000000000000000000000000000000000000000;;								Image: "someimage",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "foo2",
0000000000000000000000000000000000000000;;								Image: "someimage2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		err := f.PrintObject(cmd, false, mapper, ctrl, os.Stdout)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// NAME      DESIRED   CURRENT   READY     AGE       CONTAINERS   IMAGES                 SELECTOR
0000000000000000000000000000000000000000;;		// foo       1         1         0         10y       foo,foo2     someimage,someimage2   foo=bar
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_printReplicationController() {
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		p := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		printersinternal.AddHandlers(p)
0000000000000000000000000000000000000000;;		tf.Printer = p
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client:               nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := NewCmdRun(f, os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;		ctrl := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              "foo",
0000000000000000000000000000000000000000;;				Labels:            map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: 1,
0000000000000000000000000000000000000000;;				Selector: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;				Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []api.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "foo",
0000000000000000000000000000000000000000;;								Image: "someimage",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:  "foo2",
0000000000000000000000000000000000000000;;								Image: "someimage",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		err := f.PrintObject(cmd, false, mapper, ctrl, os.Stdout)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// NAME      DESIRED   CURRENT   READY     AGE
0000000000000000000000000000000000000000;;		// foo       1         1         0         10y
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_printPodWithWideFormat() {
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		p := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			Wide:         true,
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		printersinternal.AddHandlers(p)
0000000000000000000000000000000000000000;;		tf.Printer = p
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client:               nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nodeName := "kubernetes-node-abcd"
0000000000000000000000000000000000000000;;		cmd := NewCmdRun(f, os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              "test1",
0000000000000000000000000000000000000000;;				CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: make([]api.Container, 2),
0000000000000000000000000000000000000000;;				NodeName:   nodeName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.PodStatus{
0000000000000000000000000000000000000000;;				Phase: "podPhase",
0000000000000000000000000000000000000000;;				ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;					{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;					{RestartCount: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				PodIP: "10.1.1.3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		err := f.PrintObject(cmd, false, mapper, pod, os.Stdout)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// NAME      READY     STATUS     RESTARTS   AGE       IP         NODE
0000000000000000000000000000000000000000;;		// test1     1/2       podPhase   6          10y       10.1.1.3   kubernetes-node-abcd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_printPodWithShowLabels() {
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		p := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ShowLabels:   true,
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		printersinternal.AddHandlers(p)
0000000000000000000000000000000000000000;;		tf.Printer = p
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client:               nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nodeName := "kubernetes-node-abcd"
0000000000000000000000000000000000000000;;		cmd := NewCmdRun(f, os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;		pod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:              "test1",
0000000000000000000000000000000000000000;;				CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"l1": "key",
0000000000000000000000000000000000000000;;					"l2": "value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				Containers: make([]api.Container, 2),
0000000000000000000000000000000000000000;;				NodeName:   nodeName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.PodStatus{
0000000000000000000000000000000000000000;;				Phase: "podPhase",
0000000000000000000000000000000000000000;;				ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;					{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;					{RestartCount: 3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		err := f.PrintObject(cmd, false, mapper, pod, os.Stdout)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// NAME      READY     STATUS     RESTARTS   AGE       LABELS
0000000000000000000000000000000000000000;;		// test1     1/2       podPhase   6          10y       l1=key,l2=value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAllPhasePodList() *api.PodList {
0000000000000000000000000000000000000000;;		nodeName := "kubernetes-node-abcd"
0000000000000000000000000000000000000000;;		return &api.PodList{
0000000000000000000000000000000000000000;;			Items: []api.Pod{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test1",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: make([]api.Container, 2),
0000000000000000000000000000000000000000;;						NodeName:   nodeName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodPending,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test2",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: make([]api.Container, 2),
0000000000000000000000000000000000000000;;						NodeName:   nodeName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodRunning,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test3",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: make([]api.Container, 2),
0000000000000000000000000000000000000000;;						NodeName:   nodeName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodSucceeded,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test4",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: make([]api.Container, 2),
0000000000000000000000000000000000000000;;						NodeName:   nodeName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodFailed,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "test5",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.PodSpec{
0000000000000000000000000000000000000000;;						Containers: make([]api.Container, 2),
0000000000000000000000000000000000000000;;						NodeName:   nodeName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.PodStatus{
0000000000000000000000000000000000000000;;						Phase: api.PodUnknown,
0000000000000000000000000000000000000000;;						ContainerStatuses: []api.ContainerStatus{
0000000000000000000000000000000000000000;;							{Ready: true, RestartCount: 3, State: api.ContainerState{Running: &api.ContainerStateRunning{}}},
0000000000000000000000000000000000000000;;							{RestartCount: 3},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_printPodHideTerminated() {
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		p := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		printersinternal.AddHandlers(p)
0000000000000000000000000000000000000000;;		tf.Printer = p
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client:               nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := NewCmdRun(f, os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;		podList := newAllPhasePodList()
0000000000000000000000000000000000000000;;		// filter pods
0000000000000000000000000000000000000000;;		filterFuncs := f.DefaultResourceFilterFunc()
0000000000000000000000000000000000000000;;		filterOpts := f.DefaultResourceFilterOptions(cmd, false)
0000000000000000000000000000000000000000;;		_, filteredPodList, errs := cmdutil.FilterResourceList(podList, filterFuncs, filterOpts)
0000000000000000000000000000000000000000;;		if errs != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected filter error: %v\n", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, pod := range filteredPodList {
0000000000000000000000000000000000000000;;			mapper, _ := f.Object()
0000000000000000000000000000000000000000;;			err := f.PrintObject(cmd, false, mapper, pod, os.Stdout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// NAME      READY     STATUS    RESTARTS   AGE
0000000000000000000000000000000000000000;;		// test1     1/2       Pending   6          10y
0000000000000000000000000000000000000000;;		// test2     1/2       Running   6         10y
0000000000000000000000000000000000000000;;		// test5     1/2       Unknown   6         10y
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_printPodShowAll() {
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		p := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ShowAll:      true,
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		printersinternal.AddHandlers(p)
0000000000000000000000000000000000000000;;		tf.Printer = p
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client:               nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := NewCmdRun(f, os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;		podList := newAllPhasePodList()
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		err := f.PrintObject(cmd, false, mapper, podList, os.Stdout)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// NAME      READY     STATUS      RESTARTS   AGE
0000000000000000000000000000000000000000;;		// test1     1/2       Pending     6          10y
0000000000000000000000000000000000000000;;		// test2     1/2       Running     6          10y
0000000000000000000000000000000000000000;;		// test3     1/2       Succeeded   6          10y
0000000000000000000000000000000000000000;;		// test4     1/2       Failed      6          10y
0000000000000000000000000000000000000000;;		// test5     1/2       Unknown     6          10y
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_printServiceWithNamespacesAndLabels() {
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		p := printers.NewHumanReadablePrinter(nil, nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			WithNamespace: true,
0000000000000000000000000000000000000000;;			ColumnLabels:  []string{"l1"},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		printersinternal.AddHandlers(p)
0000000000000000000000000000000000000000;;		tf.Printer = p
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client:               nil,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := NewCmdRun(f, os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;		svc := &api.ServiceList{
0000000000000000000000000000000000000000;;			Items: []api.Service{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "svc1",
0000000000000000000000000000000000000000;;						Namespace:         "ns1",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"l1": "value",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Protocol: "UDP", Port: 53},
0000000000000000000000000000000000000000;;							{Protocol: "TCP", Port: 53},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"s": "magic",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP: "10.1.1.1",
0000000000000000000000000000000000000000;;						Type:      api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ServiceStatus{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:              "svc2",
0000000000000000000000000000000000000000;;						Namespace:         "ns2",
0000000000000000000000000000000000000000;;						CreationTimestamp: metav1.Time{Time: time.Now().AddDate(-10, 0, 0)},
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"l1": "dolla-bill-yall",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{Protocol: "TCP", Port: 80},
0000000000000000000000000000000000000000;;							{Protocol: "TCP", Port: 8080},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"s": "kazam",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP: "10.1.1.2",
0000000000000000000000000000000000000000;;						Type:      api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: api.ServiceStatus{},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ld := strings.NewLineDelimiter(os.Stdout, "|")
0000000000000000000000000000000000000000;;		defer ld.Flush()
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		err := f.PrintObject(cmd, false, mapper, svc, ld)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// |NAMESPACE   NAME      TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)           AGE       L1|
0000000000000000000000000000000000000000;;		// |ns1         svc1      ClusterIP   10.1.1.1     <none>        53/UDP,53/TCP     10y       value|
0000000000000000000000000000000000000000;;		// |ns2         svc2      ClusterIP   10.1.1.2     <none>        80/TCP,8080/TCP   10y       dolla-bill-yall|
0000000000000000000000000000000000000000;;		// ||
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNormalizationFuncGlobalExistence(t *testing.T) {
0000000000000000000000000000000000000000;;		// This test can be safely deleted when we will not support multiple flag formats
0000000000000000000000000000000000000000;;		root := NewKubectlCommand(cmdutil.NewFactory(nil), os.Stdin, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if root.Parent() != nil {
0000000000000000000000000000000000000000;;			t.Fatal("We expect the root command to be returned")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if root.GlobalNormalizationFunc() == nil {
0000000000000000000000000000000000000000;;			t.Fatal("We expect that root command has a global normalization function")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reflect.ValueOf(root.GlobalNormalizationFunc()).Pointer() != reflect.ValueOf(root.Flags().GetNormalizeFunc()).Pointer() {
0000000000000000000000000000000000000000;;			t.Fatal("root command seems to have a wrong normalization function")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sub := root
0000000000000000000000000000000000000000;;		for sub.HasSubCommands() {
0000000000000000000000000000000000000000;;			sub = sub.Commands()[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// In case of failure of this test check this PR: spf13/cobra#110
0000000000000000000000000000000000000000;;		if reflect.ValueOf(sub.Flags().GetNormalizeFunc()).Pointer() != reflect.ValueOf(root.Flags().GetNormalizeFunc()).Pointer() {
0000000000000000000000000000000000000000;;			t.Fatal("child and root commands should have the same normalization functions")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func genResponseWithJsonEncodedBody(bodyStruct interface{}) (*http.Response, error) {
0000000000000000000000000000000000000000;;		jsonBytes, err := json.Marshal(bodyStruct)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: bytesBody(jsonBytes)}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test_deprecatedAlias(t *testing.T) {
0000000000000000000000000000000000000000;;		var correctCommandCalled bool
0000000000000000000000000000000000000000;;		makeCobraCommand := func() *cobra.Command {
0000000000000000000000000000000000000000;;			cobraCmd := new(cobra.Command)
0000000000000000000000000000000000000000;;			cobraCmd.Use = "print five lines"
0000000000000000000000000000000000000000;;			cobraCmd.Run = func(*cobra.Command, []string) {
0000000000000000000000000000000000000000;;				correctCommandCalled = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return cobraCmd
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		original := makeCobraCommand()
0000000000000000000000000000000000000000;;		alias := deprecatedAlias("echo", makeCobraCommand())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(alias.Deprecated) == 0 {
0000000000000000000000000000000000000000;;			t.Error("deprecatedAlias should always have a non-empty .Deprecated")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !stdstrings.Contains(alias.Deprecated, "print") {
0000000000000000000000000000000000000000;;			t.Error("deprecatedAlias should give the name of the new function in its .Deprecated field")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !alias.Hidden {
0000000000000000000000000000000000000000;;			t.Error("deprecatedAlias should never have .Hidden == false (deprecated aliases should be hidden)")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if alias.Name() != "echo" {
0000000000000000000000000000000000000000;;			t.Errorf("deprecatedAlias has name %q, expected %q",
0000000000000000000000000000000000000000;;				alias.Name(), "echo")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if original.Name() != "print" {
0000000000000000000000000000000000000000;;			t.Errorf("original command has name %q, expected %q",
0000000000000000000000000000000000000000;;				original.Name(), "print")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buffer := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		alias.SetOutput(buffer)
0000000000000000000000000000000000000000;;		alias.Execute()
0000000000000000000000000000000000000000;;		str := buffer.String()
0000000000000000000000000000000000000000;;		if !stdstrings.Contains(str, "deprecated") || !stdstrings.Contains(str, "print") {
0000000000000000000000000000000000000000;;			t.Errorf("deprecation warning %q does not include enough information", str)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// It would be nice to test to see that original.Run == alias.Run
0000000000000000000000000000000000000000;;		// Unfortunately Golang does not allow comparing functions. I could do
0000000000000000000000000000000000000000;;		// this with reflect, but that's technically invoking undefined
0000000000000000000000000000000000000000;;		// behavior. Best we can do is make sure that the function is called.
0000000000000000000000000000000000000000;;		if !correctCommandCalled {
0000000000000000000000000000000000000000;;			t.Errorf("original function doesn't appear to have been called by alias")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
