0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
190eee7359b576ce001a5fff90122a19e77f8834;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateQuota(t *testing.T) {
0000000000000000000000000000000000000000;;		resourceQuotaObject := &api.ResourceQuota{}
0000000000000000000000000000000000000000;;		resourceQuotaObject.Name = "my-quota"
0000000000000000000000000000000000000000;;		f, tf, codec, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/resourcequotas" && m == "POST":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 201, Header: defaultHeader(), Body: objBody(codec, resourceQuotaObject)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			flags          []string
0000000000000000000000000000000000000000;;			expectedOutput string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"single resource": {
0000000000000000000000000000000000000000;;				flags:          []string{"--hard=cpu=1"},
0000000000000000000000000000000000000000;;				expectedOutput: "resourcequota/" + resourceQuotaObject.Name + "\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"single resource with a scope": {
0000000000000000000000000000000000000000;;				flags:          []string{"--hard=cpu=1", "--scopes=BestEffort"},
0000000000000000000000000000000000000000;;				expectedOutput: "resourcequota/" + resourceQuotaObject.Name + "\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multiple resources": {
0000000000000000000000000000000000000000;;				flags:          []string{"--hard=cpu=1,pods=42", "--scopes=BestEffort"},
0000000000000000000000000000000000000000;;				expectedOutput: "resourcequota/" + resourceQuotaObject.Name + "\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"single resource with multiple scopes": {
0000000000000000000000000000000000000000;;				flags:          []string{"--hard=cpu=1", "--scopes=BestEffort,NotTerminating"},
0000000000000000000000000000000000000000;;				expectedOutput: "resourcequota/" + resourceQuotaObject.Name + "\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;			cmd := NewCmdCreateQuota(f, buf)
0000000000000000000000000000000000000000;;			cmd.Flags().Parse(test.flags)
0000000000000000000000000000000000000000;;			cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;			cmd.Run(cmd, []string{resourceQuotaObject.Name})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if buf.String() != test.expectedOutput {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected output: %s, but got: %s", name, test.expectedOutput, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
