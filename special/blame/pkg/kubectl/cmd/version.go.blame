0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
109abe04daa011acab1be0d57acf1b4cc20aaf7d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apimachineryversion "k8s.io/apimachinery/pkg/version"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/version"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Version struct {
0000000000000000000000000000000000000000;;		ClientVersion *apimachineryversion.Info `json:"clientVersion,omitempty" yaml:"clientVersion,omitempty"`
0000000000000000000000000000000000000000;;		ServerVersion *apimachineryversion.Info `json:"serverVersion,omitempty" yaml:"serverVersion,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		versionExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Print the client and server versions for the current context
0000000000000000000000000000000000000000;;			kubectl version`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdVersion(f cmdutil.Factory, out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "version",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Print the client and server version information"),
0000000000000000000000000000000000000000;;			Long:    "Print the client and server version information for the current context",
0000000000000000000000000000000000000000;;			Example: versionExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := RunVersion(f, out, cmd)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Flags().BoolP("client", "c", false, "Client version only (no server required).")
0000000000000000000000000000000000000000;;		cmd.Flags().BoolP("short", "", false, "Print just the version number.")
0000000000000000000000000000000000000000;;		cmd.Flags().String("output", "", "output format, options available are yaml and json")
0000000000000000000000000000000000000000;;		cmd.Flags().MarkShorthandDeprecated("client", "please use --client instead.")
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RunVersion(f cmdutil.Factory, out io.Writer, cmd *cobra.Command) error {
0000000000000000000000000000000000000000;;		var serverVersion *apimachineryversion.Info = nil
0000000000000000000000000000000000000000;;		var serverErr error = nil
0000000000000000000000000000000000000000;;		vo := Version{nil, nil}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientVersion := version.Get()
0000000000000000000000000000000000000000;;		vo.ClientVersion = &clientVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !cmdutil.GetFlagBool(cmd, "client") {
0000000000000000000000000000000000000000;;			serverVersion, serverErr = retrieveServerVersion(f)
0000000000000000000000000000000000000000;;			vo.ServerVersion = serverVersion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch of := cmdutil.GetFlagString(cmd, "output"); of {
0000000000000000000000000000000000000000;;		case "":
0000000000000000000000000000000000000000;;			if cmdutil.GetFlagBool(cmd, "short") {
0000000000000000000000000000000000000000;;				fmt.Fprintf(out, "Client Version: %s\n", clientVersion.GitVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if serverVersion != nil {
0000000000000000000000000000000000000000;;					fmt.Fprintf(out, "Server Version: %s\n", serverVersion.GitVersion)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fmt.Fprintf(out, "Client Version: %s\n", fmt.Sprintf("%#v", clientVersion))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if serverVersion != nil {
0000000000000000000000000000000000000000;;					fmt.Fprintf(out, "Server Version: %s\n", fmt.Sprintf("%#v", *serverVersion))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case "yaml":
0000000000000000000000000000000000000000;;			y, err := yaml.Marshal(&vo)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fmt.Fprintln(out, string(y))
0000000000000000000000000000000000000000;;		case "json":
0000000000000000000000000000000000000000;;			y, err := json.Marshal(&vo)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintln(out, string(y))
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errors.New("invalid output format: " + of)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return serverErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func retrieveServerVersion(f cmdutil.Factory) (*apimachineryversion.Info, error) {
0000000000000000000000000000000000000000;;		discoveryClient, err := f.DiscoveryClient()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Always request fresh data from the server
0000000000000000000000000000000000000000;;		discoveryClient.Invalidate()
0000000000000000000000000000000000000000;;		return discoveryClient.ServerVersion()
0000000000000000000000000000000000000000;;	}
