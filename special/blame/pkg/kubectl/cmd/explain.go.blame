0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a604e8a8b25abda3b5d6bf73bc99b3c20fdbb3f1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		explainLong = templates.LongDesc(`
0000000000000000000000000000000000000000;;			Documentation of resources.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			` + validResources)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		explainExamples = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Get the documentation of the resource and its fields
0000000000000000000000000000000000000000;;			kubectl explain pods
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Get the documentation of a specific field of a resource
0000000000000000000000000000000000000000;;			kubectl explain pods.spec.containers`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdExplain returns a cobra command for swagger docs
0000000000000000000000000000000000000000;;	func NewCmdExplain(f cmdutil.Factory, out, cmdErr io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "explain RESOURCE",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Documentation of resources"),
0000000000000000000000000000000000000000;;			Long:    explainLong,
0000000000000000000000000000000000000000;;			Example: explainExamples,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := RunExplain(f, out, cmdErr, cmd, args)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Flags().Bool("recursive", false, "Print the fields of fields (Currently only 1 level deep)")
0000000000000000000000000000000000000000;;		cmd.Flags().String("api-version", "", "Get different explanations for particular API version")
0000000000000000000000000000000000000000;;		cmdutil.AddInclude3rdPartyFlags(cmd)
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunExplain executes the appropriate steps to print a model's documentation
0000000000000000000000000000000000000000;;	func RunExplain(f cmdutil.Factory, out, cmdErr io.Writer, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		if len(args) == 0 {
0000000000000000000000000000000000000000;;			fmt.Fprint(cmdErr, "You must specify the type of resource to explain. ", validResources)
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, "Required resource not specified.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(args) > 1 {
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, "We accept only this format: explain RESOURCE")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		recursive := cmdutil.GetFlagBool(cmd, "recursive")
0000000000000000000000000000000000000000;;		apiVersionString := cmdutil.GetFlagString(cmd, "api-version")
0000000000000000000000000000000000000000;;		apiVersion := schema.GroupVersion{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		// TODO: After we figured out the new syntax to separate group and resource, allow
0000000000000000000000000000000000000000;;		// the users to use it in explain (kubectl explain <group><syntax><resource>).
0000000000000000000000000000000000000000;;		// Refer to issue #16039 for why we do this. Refer to PR #15808 that used "/" syntax.
0000000000000000000000000000000000000000;;		inModel, fieldsPath, err := kubectl.SplitAndParseResourceRequest(args[0], mapper)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: We should deduce the group for a resource by discovering the supported resources at server.
0000000000000000000000000000000000000000;;		fullySpecifiedGVR, groupResource := schema.ParseResourceArg(inModel)
0000000000000000000000000000000000000000;;		gvk := schema.GroupVersionKind{}
0000000000000000000000000000000000000000;;		if fullySpecifiedGVR != nil {
0000000000000000000000000000000000000000;;			gvk, _ = mapper.KindFor(*fullySpecifiedGVR)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if gvk.Empty() {
0000000000000000000000000000000000000000;;			gvk, err = mapper.KindFor(groupResource.WithVersion(""))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(apiVersionString) == 0 {
0000000000000000000000000000000000000000;;			groupMeta, err := api.Registry.Group(gvk.Group)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			apiVersion = groupMeta.GroupVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			apiVersion, err = schema.ParseGroupVersion(apiVersionString)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		schema, err := f.SwaggerSchema(apiVersion.WithKind(gvk.Kind))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return kubectl.PrintModelDescription(inModel, fieldsPath, out, schema, recursive)
0000000000000000000000000000000000000000;;	}
