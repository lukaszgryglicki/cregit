0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9438c00dee8eab71f46df60b41ed2435a958f825;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		clusterRoleBindingLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			Create a ClusterRoleBinding for a particular ClusterRole.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterRoleBindingExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			  # Create a ClusterRoleBinding for user1, user2, and group1 using the cluster-admin ClusterRole
0000000000000000000000000000000000000000;;			  kubectl create clusterrolebinding cluster-admin --clusterrole=cluster-admin --user=user1 --user=user2 --group=group1`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClusterRoleBinding is a command to ease creating ClusterRoleBindings.
0000000000000000000000000000000000000000;;	func NewCmdCreateClusterRoleBinding(f cmdutil.Factory, cmdOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "clusterrolebinding NAME --clusterrole=NAME [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run]",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Create a ClusterRoleBinding for a particular ClusterRole"),
0000000000000000000000000000000000000000;;			Long:    clusterRoleBindingLong,
0000000000000000000000000000000000000000;;			Example: clusterRoleBindingExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := CreateClusterRoleBinding(f, cmdOut, cmd, args)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdutil.AddApplyAnnotationFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddValidateFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddPrinterFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddGeneratorFlags(cmd, cmdutil.ClusterRoleBindingV1GeneratorName)
0000000000000000000000000000000000000000;;		cmd.Flags().String("clusterrole", "", i18n.T("ClusterRole this ClusterRoleBinding should reference"))
0000000000000000000000000000000000000000;;		cmd.Flags().StringArray("user", []string{}, "usernames to bind to the role")
0000000000000000000000000000000000000000;;		cmd.Flags().StringArray("group", []string{}, "groups to bind to the role")
0000000000000000000000000000000000000000;;		cmd.Flags().StringArray("serviceaccount", []string{}, "service accounts to bind to the role, in the format <namespace>:<name>")
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateClusterRoleBinding is the implementation of the create configmap command.
0000000000000000000000000000000000000000;;	func CreateClusterRoleBinding(f cmdutil.Factory, cmdOut io.Writer, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		name, err := NameFromCommandArgs(cmd, args)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var generator kubectl.StructuredGenerator
0000000000000000000000000000000000000000;;		switch generatorName := cmdutil.GetFlagString(cmd, "generator"); generatorName {
0000000000000000000000000000000000000000;;		case cmdutil.ClusterRoleBindingV1GeneratorName:
0000000000000000000000000000000000000000;;			generator = &kubectl.ClusterRoleBindingGeneratorV1{
0000000000000000000000000000000000000000;;				Name:            name,
0000000000000000000000000000000000000000;;				ClusterRole:     cmdutil.GetFlagString(cmd, "clusterrole"),
0000000000000000000000000000000000000000;;				Users:           cmdutil.GetFlagStringArray(cmd, "user"),
0000000000000000000000000000000000000000;;				Groups:          cmdutil.GetFlagStringArray(cmd, "group"),
0000000000000000000000000000000000000000;;				ServiceAccounts: cmdutil.GetFlagStringArray(cmd, "serviceaccount"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errUnsupportedGenerator(cmd, generatorName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return RunCreateSubcommand(f, cmd, cmdOut, &CreateSubcommandOptions{
0000000000000000000000000000000000000000;;			Name:                name,
0000000000000000000000000000000000000000;;			StructuredGenerator: generator,
0000000000000000000000000000000000000000;;			DryRun:              cmdutil.GetDryRunFlag(cmd),
0000000000000000000000000000000000000000;;			OutputFormat:        cmdutil.GetFlagString(cmd, "output"),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
