0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8685ae8eb778d2bae157d2cec197309982111873;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testClusterRolePrinter struct {
0000000000000000000000000000000000000000;;		CachedClusterRole *rbac.ClusterRole
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testClusterRolePrinter) PrintObj(obj runtime.Object, out io.Writer) error {
0000000000000000000000000000000000000000;;		t.CachedClusterRole = obj.(*rbac.ClusterRole)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testClusterRolePrinter) AfterPrint(output io.Writer, res string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testClusterRolePrinter) HandledResources() []string {
0000000000000000000000000000000000000000;;		return []string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testClusterRolePrinter) IsGeneric() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateClusterRole(t *testing.T) {
0000000000000000000000000000000000000000;;		clusterRoleName := "my-cluster-role"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		printer := &testClusterRolePrinter{}
0000000000000000000000000000000000000000;;		tf.Printer = printer
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{}
0000000000000000000000000000000000000000;;		tf.ClientConfig = defaultClientConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			verbs               string
0000000000000000000000000000000000000000;;			resources           string
0000000000000000000000000000000000000000;;			nonResourceURL      string
0000000000000000000000000000000000000000;;			resourceNames       string
0000000000000000000000000000000000000000;;			expectedClusterRole *rbac.ClusterRole
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"test-duplicate-resources": {
0000000000000000000000000000000000000000;;				verbs:     "get,watch,list",
0000000000000000000000000000000000000000;;				resources: "pods,pods",
0000000000000000000000000000000000000000;;				expectedClusterRole: &rbac.ClusterRole{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: clusterRoleName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get", "watch", "list"},
0000000000000000000000000000000000000000;;							Resources:     []string{"pods"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{""},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case-with-multiple-apigroups": {
0000000000000000000000000000000000000000;;				verbs:     "get,watch,list",
0000000000000000000000000000000000000000;;				resources: "pods,deployments.extensions",
0000000000000000000000000000000000000000;;				expectedClusterRole: &rbac.ClusterRole{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: clusterRoleName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get", "watch", "list"},
0000000000000000000000000000000000000000;;							Resources:     []string{"pods"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{""},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get", "watch", "list"},
0000000000000000000000000000000000000000;;							Resources:     []string{"deployments"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{"extensions"},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-non-resource-url": {
0000000000000000000000000000000000000000;;				verbs:          "get",
0000000000000000000000000000000000000000;;				nonResourceURL: "/logs/,/healthz",
0000000000000000000000000000000000000000;;				expectedClusterRole: &rbac.ClusterRole{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: clusterRoleName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:           []string{"get"},
0000000000000000000000000000000000000000;;							NonResourceURLs: []string{"/logs/", "/healthz"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-resource-and-non-resource-url": {
0000000000000000000000000000000000000000;;				verbs:          "get",
0000000000000000000000000000000000000000;;				nonResourceURL: "/logs/,/healthz",
0000000000000000000000000000000000000000;;				resources:      "pods",
0000000000000000000000000000000000000000;;				expectedClusterRole: &rbac.ClusterRole{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: clusterRoleName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get"},
0000000000000000000000000000000000000000;;							Resources:     []string{"pods"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{""},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:           []string{"get"},
0000000000000000000000000000000000000000;;							NonResourceURLs: []string{"/logs/", "/healthz"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;			cmd := NewCmdCreateClusterRole(f, buf)
0000000000000000000000000000000000000000;;			cmd.Flags().Set("dry-run", "true")
0000000000000000000000000000000000000000;;			cmd.Flags().Set("output", "object")
0000000000000000000000000000000000000000;;			cmd.Flags().Set("verb", test.verbs)
0000000000000000000000000000000000000000;;			cmd.Flags().Set("resource", test.resources)
0000000000000000000000000000000000000000;;			cmd.Flags().Set("non-resource-url", test.nonResourceURL)
0000000000000000000000000000000000000000;;			if test.resourceNames != "" {
0000000000000000000000000000000000000000;;				cmd.Flags().Set("resource-name", test.resourceNames)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cmd.Run(cmd, []string{clusterRoleName})
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedClusterRole, printer.CachedClusterRole) {
0000000000000000000000000000000000000000;;				t.Errorf("%s:\nexpected:\n%#v\nsaw:\n%#v", name, test.expectedClusterRole, printer.CachedClusterRole)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestClusterRoleValidate(t *testing.T) {
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			clusterRoleOptions *CreateClusterRoleOptions
0000000000000000000000000000000000000000;;			expectErr          bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"test-missing-name": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-verb": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name: "my-clusterrole",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-resource": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"get"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-resource-existing-apigroup": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"get"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Group: "extensions",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-resource-existing-subresource": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"get"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								SubResource: "scale",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-invalid-verb": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"invalid-verb"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource: "pods",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-nonresource-verb": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"post"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource: "pods",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-special-verb": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"use"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource: "pods",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-mix-verbs": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"impersonate", "use"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource:    "userextras",
0000000000000000000000000000000000000000;;								SubResource: "scopes",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-special-verb-with-wrong-apigroup": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"impersonate"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource:    "userextras",
0000000000000000000000000000000000000000;;								SubResource: "scopes",
0000000000000000000000000000000000000000;;								Group:       "extensions",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-invalid-resource": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"get"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource: "invalid-resource",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-resource-name-with-multiple-resources": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"get"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource: "pods",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource: "deployments",
0000000000000000000000000000000000000000;;								Group:    "extensions",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "role-binder",
0000000000000000000000000000000000000000;;						Verbs: []string{"get", "list", "bind"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource: "roles",
0000000000000000000000000000000000000000;;								Group:    "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case-with-subresource": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"get", "list"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource:    "replicasets",
0000000000000000000000000000000000000000;;								SubResource: "scale",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case-with-additional-resource": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"impersonate"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource:    "userextras",
0000000000000000000000000000000000000000;;								SubResource: "scopes",
0000000000000000000000000000000000000000;;								Group:       "authentication.k8s.io",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-invalid-verb-for-non-resource-url": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"create"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					NonResourceURLs: []string{"/logs/"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-resource-and-non-resource-url-specified-together": {
0000000000000000000000000000000000000000;;				clusterRoleOptions: &CreateClusterRoleOptions{
0000000000000000000000000000000000000000;;					CreateRoleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;						Name:  "my-clusterrole",
0000000000000000000000000000000000000000;;						Verbs: []string{"get"},
0000000000000000000000000000000000000000;;						Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Resource:    "replicasets",
0000000000000000000000000000000000000000;;								SubResource: "scale",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					NonResourceURLs: []string{"/logs/"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			test.clusterRoleOptions.Mapper, _ = f.Object()
0000000000000000000000000000000000000000;;			err := test.clusterRoleOptions.Validate()
0000000000000000000000000000000000000000;;			if test.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expect error happens, but validate passes.", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
