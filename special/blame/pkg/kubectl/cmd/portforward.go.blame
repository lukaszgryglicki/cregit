0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
351764b6cae066588e87a3efee44135d8f7e8120;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/signal"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/portforward"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/transport/spdy"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		coreclient "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PortForwardOptions contains all the options for running the port-forward cli command.
0000000000000000000000000000000000000000;;	type PortForwardOptions struct {
0000000000000000000000000000000000000000;;		Namespace     string
0000000000000000000000000000000000000000;;		PodName       string
0000000000000000000000000000000000000000;;		RESTClient    *restclient.RESTClient
0000000000000000000000000000000000000000;;		Config        *restclient.Config
0000000000000000000000000000000000000000;;		PodClient     coreclient.PodsGetter
0000000000000000000000000000000000000000;;		Ports         []string
0000000000000000000000000000000000000000;;		PortForwarder portForwarder
0000000000000000000000000000000000000000;;		StopChannel   chan struct{}
0000000000000000000000000000000000000000;;		ReadyChannel  chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		portforwardExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod
0000000000000000000000000000000000000000;;			kubectl port-forward mypod 5000 6000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Listen on port 8888 locally, forwarding to 5000 in the pod
0000000000000000000000000000000000000000;;			kubectl port-forward mypod 8888:5000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Listen on a random port locally, forwarding to 5000 in the pod
0000000000000000000000000000000000000000;;			kubectl port-forward mypod :5000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Listen on a random port locally, forwarding to 5000 in the pod
0000000000000000000000000000000000000000;;			kubectl port-forward mypod 0:5000`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdPortForward(f cmdutil.Factory, cmdOut, cmdErr io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		opts := &PortForwardOptions{
0000000000000000000000000000000000000000;;			PortForwarder: &defaultPortForwarder{
0000000000000000000000000000000000000000;;				cmdOut: cmdOut,
0000000000000000000000000000000000000000;;				cmdErr: cmdErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "port-forward POD [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N]",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Forward one or more local ports to a pod"),
0000000000000000000000000000000000000000;;			Long:    "Forward one or more local ports to a pod.",
0000000000000000000000000000000000000000;;			Example: portforwardExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				if err := opts.Complete(f, cmd, args); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := opts.Validate(); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(cmdutil.UsageErrorf(cmd, "%v", err.Error()))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := opts.RunPortForward(); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Flags().StringP("pod", "p", "", "Pod name")
0000000000000000000000000000000000000000;;		// TODO support UID
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type portForwarder interface {
0000000000000000000000000000000000000000;;		ForwardPorts(method string, url *url.URL, opts PortForwardOptions) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type defaultPortForwarder struct {
0000000000000000000000000000000000000000;;		cmdOut, cmdErr io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *defaultPortForwarder) ForwardPorts(method string, url *url.URL, opts PortForwardOptions) error {
0000000000000000000000000000000000000000;;		transport, upgrader, err := spdy.RoundTripperFor(opts.Config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dialer := spdy.NewDialer(upgrader, &http.Client{Transport: transport}, method, url)
0000000000000000000000000000000000000000;;		fw, err := portforward.New(dialer, opts.Ports, opts.StopChannel, opts.ReadyChannel, f.cmdOut, f.cmdErr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fw.ForwardPorts()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Complete completes all the required options for port-forward cmd.
0000000000000000000000000000000000000000;;	func (o *PortForwardOptions) Complete(f cmdutil.Factory, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		o.PodName = cmdutil.GetFlagString(cmd, "pod")
0000000000000000000000000000000000000000;;		if len(o.PodName) == 0 && len(args) == 0 {
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, "POD is required for port-forward")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(o.PodName) != 0 {
0000000000000000000000000000000000000000;;			printDeprecationWarning("port-forward POD", "-p POD")
0000000000000000000000000000000000000000;;			o.Ports = args
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			o.PodName = args[0]
0000000000000000000000000000000000000000;;			o.Ports = args[1:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.Namespace, _, err = f.DefaultNamespace()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset, err := f.ClientSet()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.PodClient = clientset.Core()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.Config, err = f.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.RESTClient, err = f.RESTClient()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.StopChannel = make(chan struct{}, 1)
0000000000000000000000000000000000000000;;		o.ReadyChannel = make(chan struct{})
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate validates all the required options for port-forward cmd.
0000000000000000000000000000000000000000;;	func (o PortForwardOptions) Validate() error {
0000000000000000000000000000000000000000;;		if len(o.PodName) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("pod name must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(o.Ports) < 1 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("at least 1 PORT is required for port-forward")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if o.PortForwarder == nil || o.PodClient == nil || o.RESTClient == nil || o.Config == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("client, client config, restClient, and portforwarder must be provided")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunPortForward implements all the necessary functionality for port-forward cmd.
0000000000000000000000000000000000000000;;	func (o PortForwardOptions) RunPortForward() error {
0000000000000000000000000000000000000000;;		pod, err := o.PodClient.Pods(o.Namespace).Get(o.PodName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if pod.Status.Phase != api.PodRunning {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unable to forward port because pod is not running. Current status=%v", pod.Status.Phase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signals := make(chan os.Signal, 1)
0000000000000000000000000000000000000000;;		signal.Notify(signals, os.Interrupt)
0000000000000000000000000000000000000000;;		defer signal.Stop(signals)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			<-signals
0000000000000000000000000000000000000000;;			if o.StopChannel != nil {
0000000000000000000000000000000000000000;;				close(o.StopChannel)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := o.RESTClient.Post().
0000000000000000000000000000000000000000;;			Resource("pods").
0000000000000000000000000000000000000000;;			Namespace(o.Namespace).
0000000000000000000000000000000000000000;;			Name(pod.Name).
0000000000000000000000000000000000000000;;			SubResource("portforward")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return o.PortForwarder.ForwardPorts("POST", req.URL(), o)
0000000000000000000000000000000000000000;;	}
