0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
fcdb73d2719d5b222a681f51a72a9206cb6991f9;pkg/kubectl/cmd/update_test.go[pkg/kubectl/cmd/update_test.go][pkg/kubectl/cmd/replace_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplaceObject(t *testing.T) {
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		deleted := false
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/test" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &api.Namespace{})}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == http.MethodDelete:
0000000000000000000000000000000000000000;;					deleted = true
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == http.MethodPut:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					statusCode := http.StatusOK
0000000000000000000000000000000000000000;;					if deleted {
0000000000000000000000000000000000000000;;						statusCode = http.StatusNotFound
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: statusCode, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers" && m == http.MethodPost:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusCreated, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdReplace(f, buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy/redis-master-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// uses the name from the file, not the response
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/rc1\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf.Reset()
0000000000000000000000000000000000000000;;		cmd.Flags().Set("force", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/redis-master\nreplicationcontroller/rc1\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplaceMultipleObject(t *testing.T) {
0000000000000000000000000000000000000000;;		_, svc, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		redisMasterDeleted := false
0000000000000000000000000000000000000000;;		frontendDeleted := false
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/test" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &api.Namespace{})}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == http.MethodDelete:
0000000000000000000000000000000000000000;;					redisMasterDeleted = true
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == http.MethodPut:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					statusCode := http.StatusOK
0000000000000000000000000000000000000000;;					if redisMasterDeleted {
0000000000000000000000000000000000000000;;						statusCode = http.StatusNotFound
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: statusCode, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers" && m == http.MethodPost:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusCreated, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/frontend" && m == http.MethodDelete:
0000000000000000000000000000000000000000;;					frontendDeleted = true
0000000000000000000000000000000000000000;;					fallthrough
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/frontend" && m == http.MethodPut:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/frontend" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					statusCode := http.StatusOK
0000000000000000000000000000000000000000;;					if frontendDeleted {
0000000000000000000000000000000000000000;;						statusCode = http.StatusNotFound
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: statusCode, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services" && m == http.MethodPost:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusCreated, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdReplace(f, buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy/redis-master-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/frontend-service.yaml")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/rc1\nservice/baz\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf.Reset()
0000000000000000000000000000000000000000;;		cmd.Flags().Set("force", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/redis-master\nservice/frontend\nreplicationcontroller/rc1\nservice/baz\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplaceDirectory(t *testing.T) {
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		created := map[string]bool{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/test" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &api.Namespace{})}, nil
0000000000000000000000000000000000000000;;				case strings.HasPrefix(p, "/namespaces/test/replicationcontrollers/") && m == http.MethodPut:
0000000000000000000000000000000000000000;;					created[p] = true
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case strings.HasPrefix(p, "/namespaces/test/replicationcontrollers/") && m == http.MethodGet:
0000000000000000000000000000000000000000;;					statusCode := http.StatusNotFound
0000000000000000000000000000000000000000;;					if created[p] {
0000000000000000000000000000000000000000;;						statusCode = http.StatusOK
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: statusCode, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case strings.HasPrefix(p, "/namespaces/test/replicationcontrollers/") && m == http.MethodDelete:
0000000000000000000000000000000000000000;;					delete(created, p)
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case strings.HasPrefix(p, "/namespaces/test/replicationcontrollers") && m == http.MethodPost:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusCreated, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdReplace(f, buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("namespace", "test")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/rc1\nreplicationcontroller/rc1\nreplicationcontroller/rc1\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf.Reset()
0000000000000000000000000000000000000000;;		cmd.Flags().Set("force", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/frontend\nreplicationcontroller/redis-master\nreplicationcontroller/redis-slave\n"+
0000000000000000000000000000000000000000;;			"replicationcontroller/rc1\nreplicationcontroller/rc1\nreplicationcontroller/rc1\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestForceReplaceObjectNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/test" && m == http.MethodGet:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusOK, Header: defaultHeader(), Body: objBody(codec, &api.Namespace{})}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && (m == http.MethodGet || m == http.MethodDelete):
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusNotFound, Header: defaultHeader(), Body: stringBody("")}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers" && m == http.MethodPost:
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: http.StatusCreated, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdReplace(f, buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy/redis-master-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("force", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/rc1\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
