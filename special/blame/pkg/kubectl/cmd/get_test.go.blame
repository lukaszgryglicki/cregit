0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
4eab0655b8ebe70748db24e78fa71c855efe7db3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		encjson "encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/json"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/streaming"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		restclientwatch "k8s.io/client-go/rest/watch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/util/openapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testData() (*api.PodList, *api.ServiceList, *api.ReplicationControllerList) {
0000000000000000000000000000000000000000;;		pods := &api.PodList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "15",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []api.Pod{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "test", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;					Spec:       apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "bar", Namespace: "test", ResourceVersion: "11"},
0000000000000000000000000000000000000000;;					Spec:       apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		svc := &api.ServiceList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "16",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []api.Service{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						SessionAffinity: "None",
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rc := &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "17",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []api.ReplicationController{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "rc1", Namespace: "test", ResourceVersion: "18"},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 1,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pods, svc, rc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testComponentStatusData() *api.ComponentStatusList {
0000000000000000000000000000000000000000;;		good := api.ComponentStatus{
0000000000000000000000000000000000000000;;			Conditions: []api.ComponentCondition{
0000000000000000000000000000000000000000;;				{Type: api.ComponentHealthy, Status: api.ConditionTrue, Message: "ok"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "servergood"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bad := api.ComponentStatus{
0000000000000000000000000000000000000000;;			Conditions: []api.ComponentCondition{
0000000000000000000000000000000000000000;;				{Type: api.ComponentHealthy, Status: api.ConditionFalse, Message: "", Error: "bad status: 500"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "serverbad"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unknown := api.ComponentStatus{
0000000000000000000000000000000000000000;;			Conditions: []api.ComponentCondition{
0000000000000000000000000000000000000000;;				{Type: api.ComponentHealthy, Status: api.ConditionUnknown, Message: "", Error: "fizzbuzz error"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "serverunknown"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &api.ComponentStatusList{
0000000000000000000000000000000000000000;;			Items: []api.ComponentStatus{good, bad, unknown},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verifies that schemas that are not in the master tree of Kubernetes can be retrieved via Get.
0000000000000000000000000000000000000000;;	func TestGetUnknownSchemaObject(t *testing.T) {
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		_, _, codec, _ := cmdtesting.NewTestFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, cmdtesting.NewInternalType("", "", "foo"))},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.ClientConfig = &restclient.Config{ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}}
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"type", "foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{cmdtesting.NewInternalType("", "", "foo")}
0000000000000000000000000000000000000000;;		actual := tf.Printer.(*testPrinter).Objects
0000000000000000000000000000000000000000;;		if len(actual) != len(expected) {
0000000000000000000000000000000000000000;;			t.Fatal(actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, obj := range actual {
0000000000000000000000000000000000000000;;			expectedJSON := runtime.EncodeOrDie(codec, expected[i])
0000000000000000000000000000000000000000;;			expectedMap := map[string]interface{}{}
0000000000000000000000000000000000000000;;			if err := encjson.Unmarshal([]byte(expectedJSON), &expectedMap); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actualJSON := runtime.EncodeOrDie(api.Codecs.LegacyCodec(), obj)
0000000000000000000000000000000000000000;;			actualMap := map[string]interface{}{}
0000000000000000000000000000000000000000;;			if err := encjson.Unmarshal([]byte(actualJSON), &actualMap); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(expectedMap, actualMap) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected object: \n%#v\n%#v", expectedMap, actualMap)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verifies that schemas that are not in the master tree of Kubernetes can be retrieved via Get.
0000000000000000000000000000000000000000;;	func TestGetSchemaObject(t *testing.T) {
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Mapper = testapi.Default.RESTMapper()
0000000000000000000000000000000000000000;;		tf.Typer = api.Scheme
0000000000000000000000000000000000000000;;		codec := testapi.Default.Codec()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &api.ReplicationController{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.ClientConfig = &restclient.Config{ContentConfig: restclient.ContentConfig{GroupVersion: &schema.GroupVersion{Version: "v1"}}}
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"replicationcontrollers", "foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !strings.Contains(buf.String(), "\"foo\"") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetObjectsWithOpenAPIOutputFormatPresent(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		// overide the openAPISchema function to return custom output
0000000000000000000000000000000000000000;;		// for Pod type.
0000000000000000000000000000000000000000;;		tf.OpenAPISchemaFunc = testOpenAPISchemaData
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods.Items[0])},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set(useOpenAPIPrintColumnFlagLabel, "true")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods", "foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{&pods.Items[0]}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testOpenAPISchemaData() (*openapi.Resources, error) {
0000000000000000000000000000000000000000;;		return &openapi.Resources{
0000000000000000000000000000000000000000;;			GroupVersionKindToName: map[schema.GroupVersionKind]string{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Version: "v1",
0000000000000000000000000000000000000000;;					Kind:    "Pod",
0000000000000000000000000000000000000000;;				}: "io.k8s.kubernetes.pkg.api.v1.Pod",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			NameToDefinition: map[string]openapi.Kind{
0000000000000000000000000000000000000000;;				"io.k8s.kubernetes.pkg.api.v1.Pod": {
0000000000000000000000000000000000000000;;					Name:       "io.k8s.kubernetes.pkg.api.v1.Pod",
0000000000000000000000000000000000000000;;					IsResource: false,
0000000000000000000000000000000000000000;;					Extensions: spec.Extensions{
0000000000000000000000000000000000000000;;						"x-kubernetes-print-columns": "custom-columns=NAME:.metadata.name,RSRC:.metadata.resourceVersion",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetObjects(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods.Items[0])},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods", "foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{&pods.Items[0]}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetObjectsFiltered(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;		pods.Items[0].Status.Phase = api.PodFailed
0000000000000000000000000000000000000000;;		first := &pods.Items[0]
0000000000000000000000000000000000000000;;		second := &pods.Items[1]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			args           []string
0000000000000000000000000000000000000000;;			resp           runtime.Object
0000000000000000000000000000000000000000;;			flags          map[string]string
0000000000000000000000000000000000000000;;			expect         []runtime.Object
0000000000000000000000000000000000000000;;			genericPrinter bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{args: []string{"pods", "foo"}, resp: first, expect: []runtime.Object{first}, genericPrinter: true},
0000000000000000000000000000000000000000;;			{args: []string{"pods", "foo"}, flags: map[string]string{"show-all": "false"}, resp: first, expect: []runtime.Object{first}, genericPrinter: true},
0000000000000000000000000000000000000000;;			{args: []string{"pods"}, flags: map[string]string{"show-all": "true"}, resp: pods, expect: []runtime.Object{first, second}},
0000000000000000000000000000000000000000;;			{args: []string{"pods/foo"}, resp: first, expect: []runtime.Object{first}, genericPrinter: true},
0000000000000000000000000000000000000000;;			{args: []string{"pods"}, flags: map[string]string{"output": "yaml"}, resp: pods, expect: []runtime.Object{second}},
0000000000000000000000000000000000000000;;			{args: []string{}, flags: map[string]string{"filename": "../../../examples/storage/cassandra/cassandra-controller.yaml"}, resp: pods, expect: []runtime.Object{first, second}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{args: []string{"pods"}, resp: pods, expect: []runtime.Object{second}},
0000000000000000000000000000000000000000;;			{args: []string{"pods"}, flags: map[string]string{"show-all": "true", "output": "yaml"}, resp: pods, expect: []runtime.Object{first, second}},
0000000000000000000000000000000000000000;;			{args: []string{"pods"}, flags: map[string]string{"show-all": "false"}, resp: pods, expect: []runtime.Object{second}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			t.Logf("%d", i)
0000000000000000000000000000000000000000;;			f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;			tf.Printer = &testPrinter{GenericPrinter: test.genericPrinter}
0000000000000000000000000000000000000000;;			tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;				APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;				NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;				Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, test.resp)},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tf.Namespace = "test"
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;			errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;			cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;			for k, v := range test.flags {
0000000000000000000000000000000000000000;;				cmd.Flags().Lookup(k).Value.Set(v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cmd.Run(cmd, test.args)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			verifyObjects(t, test.expect, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected empty output", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetObjectIgnoreNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := &api.NamespaceList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []api.Namespace{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "testns", Namespace: "test", ResourceVersion: "11"},
0000000000000000000000000000000000000000;;					Spec:       api.NamespaceSpec{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{GenericPrinter: true}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/pods/nonexistentpod" && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 404, Header: defaultHeader(), Body: stringBody("")}, nil
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/test" && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &ns.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("ignore-not-found", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "yaml")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods", "nonexistentpod"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetSortedObjects(t *testing.T) {
0000000000000000000000000000000000000000;;		pods := &api.PodList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "15",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []api.Pod{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "c", Namespace: "test", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;					Spec:       apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "b", Namespace: "test", ResourceVersion: "11"},
0000000000000000000000000000000000000000;;					Spec:       apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "a", Namespace: "test", ResourceVersion: "9"},
0000000000000000000000000000000000000000;;					Spec:       apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.ClientConfig = &restclient.Config{ContentConfig: restclient.ContentConfig{GroupVersion: &schema.GroupVersion{Version: "v1"}}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sorting with metedata.name
0000000000000000000000000000000000000000;;		cmd.Flags().Set("sort-by", ".metadata.name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// expect sorted: a,b,c
0000000000000000000000000000000000000000;;		expected := []runtime.Object{&pods.Items[2], &pods.Items[1], &pods.Items[0]}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyObjects(t *testing.T, expected, actual []runtime.Object) {
0000000000000000000000000000000000000000;;		var actualObj runtime.Object
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(actual) != len(expected) {
0000000000000000000000000000000000000000;;			t.Fatalf("expected %d, got %d", len(expected), len(actual))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, obj := range actual {
0000000000000000000000000000000000000000;;			switch obj.(type) {
0000000000000000000000000000000000000000;;			case runtime.Unstructured, *runtime.Unknown:
0000000000000000000000000000000000000000;;				actualObj, err = runtime.Decode(
0000000000000000000000000000000000000000;;					api.Codecs.UniversalDecoder(),
0000000000000000000000000000000000000000;;					[]byte(runtime.EncodeOrDie(api.Codecs.LegacyCodec(), obj)))
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				actualObj = obj
0000000000000000000000000000000000000000;;				err = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(expected[i], actualObj) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected object: %d \n%#v\n%#v", i, expected[i], actualObj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetObjectsIdentifiedByFile(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{GenericPrinter: true}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods.Items[0])},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/storage/cassandra/cassandra-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{&pods.Items[0]}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetListObjects(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected, err := extractResourceList([]runtime.Object{pods})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func extractResourceList(objs []runtime.Object) ([]runtime.Object, error) {
0000000000000000000000000000000000000000;;		finalObjs := []runtime.Object{}
0000000000000000000000000000000000000000;;		for _, obj := range objs {
0000000000000000000000000000000000000000;;			items, err := meta.ExtractList(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			finalObjs = append(finalObjs, items...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return finalObjs, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetAllListObjects(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("show-all", "true")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected, err := extractResourceList([]runtime.Object{pods})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetListComponentStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		statuses := testComponentStatusData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, statuses)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"componentstatuses"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected, err := extractResourceList([]runtime.Object{statuses})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetMultipleTypeObjects(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svc, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)}, nil
0000000000000000000000000000000000000000;;				case "/namespaces/test/services":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, svc)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods,services"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected, err := extractResourceList([]runtime.Object{pods, svc})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetMultipleTypeObjectsAsList(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svc, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{GenericPrinter: true}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)}, nil
0000000000000000000000000000000000000000;;				case "/namespaces/test/services":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, svc)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.ClientConfig = &restclient.Config{ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}}
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "json")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods,services"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actual := tf.Printer.(*testPrinter).Objects
0000000000000000000000000000000000000000;;		fn := func(obj runtime.Object) unstructured.Unstructured {
0000000000000000000000000000000000000000;;			data, err := runtime.Encode(api.Codecs.LegacyCodec(schema.GroupVersion{Version: "v1"}), obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out := &unstructured.Unstructured{Object: make(map[string]interface{})}
0000000000000000000000000000000000000000;;			if err := encjson.Unmarshal(data, &out.Object); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return *out
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := &unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{"kind": "List", "apiVersion": "v1", "metadata": map[string]interface{}{"selfLink": "", "resourceVersion": ""}},
0000000000000000000000000000000000000000;;			Items: []unstructured.Unstructured{
0000000000000000000000000000000000000000;;				fn(&pods.Items[0]),
0000000000000000000000000000000000000000;;				fn(&pods.Items[1]),
0000000000000000000000000000000000000000;;				fn(&svc.Items[0]),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actualBytes, err := encjson.Marshal(actual[0])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedBytes, err := encjson.Marshal(expected)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(actualBytes) != string(expectedBytes) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object:\n%s\n%s", expectedBytes, actualBytes)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetMultipleTypeObjectsWithSelector(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svc, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				if req.URL.Query().Get(metav1.LabelSelectorQueryParam(api.Registry.GroupOrDie(api.GroupName).GroupVersion.String())) != "a=b" {
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)}, nil
0000000000000000000000000000000000000000;;				case "/namespaces/test/services":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, svc)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Set("selector", "a=b")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods,services"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected, err := extractResourceList([]runtime.Object{pods, svc})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetMultipleTypeObjectsWithDirectReference(t *testing.T) {
0000000000000000000000000000000000000000;;		_, svc, _ := testData()
0000000000000000000000000000000000000000;;		node := &api.Node{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.NodeSpec{
0000000000000000000000000000000000000000;;				ExternalID: "ext",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/nodes/foo":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, node)}, nil
0000000000000000000000000000000000000000;;				case "/namespaces/test/services/bar":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"services/bar", "node/foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{&svc.Items[0], node}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetByFormatForcesFlag(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{GenericPrinter: true}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods.Items[0])},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Lookup("output").Value.Set("yaml")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		showAllFlag, _ := cmd.Flags().GetBool("show-all")
0000000000000000000000000000000000000000;;		if showAllFlag {
0000000000000000000000000000000000000000;;			t.Errorf("expected showAll to not be true when getting resource")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func watchTestData() ([]api.Pod, []watch.Event) {
0000000000000000000000000000000000000000;;		pods := []api.Pod{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:            "bar",
0000000000000000000000000000000000000000;;					Namespace:       "test",
0000000000000000000000000000000000000000;;					ResourceVersion: "9",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:            "foo",
0000000000000000000000000000000000000000;;					Namespace:       "test",
0000000000000000000000000000000000000000;;					ResourceVersion: "10",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		events := []watch.Event{
0000000000000000000000000000000000000000;;			// current state events
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: watch.Added,
0000000000000000000000000000000000000000;;				Object: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "bar",
0000000000000000000000000000000000000000;;						Namespace:       "test",
0000000000000000000000000000000000000000;;						ResourceVersion: "9",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: watch.Added,
0000000000000000000000000000000000000000;;				Object: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "foo",
0000000000000000000000000000000000000000;;						Namespace:       "test",
0000000000000000000000000000000000000000;;						ResourceVersion: "10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// resource events
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: watch.Modified,
0000000000000000000000000000000000000000;;				Object: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "foo",
0000000000000000000000000000000000000000;;						Namespace:       "test",
0000000000000000000000000000000000000000;;						ResourceVersion: "11",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Type: watch.Deleted,
0000000000000000000000000000000000000000;;				Object: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            "foo",
0000000000000000000000000000000000000000;;						Namespace:       "test",
0000000000000000000000000000000000000000;;						ResourceVersion: "12",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pods, events
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatchSelector(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, events := watchTestData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		podList := &api.PodList{
0000000000000000000000000000000000000000;;			Items: pods,
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "10",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				if req.URL.Query().Get(metav1.LabelSelectorQueryParam(api.Registry.GroupOrDie(api.GroupName).GroupVersion.String())) != "a=b" {
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods":
0000000000000000000000000000000000000000;;					if req.URL.Query().Get("watch") == "true" {
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: watchBody(codec, events[2:])}, nil
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, podList)}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Set("watch", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("selector", "a=b")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{&pods[0], &pods[1], events[2].Object, events[3].Object}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatchResource(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, events := watchTestData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods/foo":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods[1])}, nil
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods":
0000000000000000000000000000000000000000;;					if req.URL.Query().Get("watch") == "true" && req.URL.Query().Get("fieldSelector") == "metadata.name=foo" {
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: watchBody(codec, events[1:])}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Set("watch", "true")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods", "foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{&pods[1], events[2].Object, events[3].Object}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatchResourceIdentifiedByFile(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, events := watchTestData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/namespaces/test/replicationcontrollers/cassandra":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods[1])}, nil
0000000000000000000000000000000000000000;;				case "/namespaces/test/replicationcontrollers":
0000000000000000000000000000000000000000;;					if req.URL.Query().Get("watch") == "true" && req.URL.Query().Get("fieldSelector") == "metadata.name=cassandra" {
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: watchBody(codec, events[1:])}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Set("watch", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/storage/cassandra/cassandra-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{&pods[1], events[2].Object, events[3].Object}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatchOnlyResource(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, events := watchTestData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods/foo":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods[1])}, nil
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods":
0000000000000000000000000000000000000000;;					if req.URL.Query().Get("watch") == "true" && req.URL.Query().Get("fieldSelector") == "metadata.name=foo" {
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: watchBody(codec, events[1:])}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Set("watch-only", "true")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods", "foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{events[2].Object, events[3].Object}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatchOnlyList(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, events := watchTestData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		podList := &api.PodList{
0000000000000000000000000000000000000000;;			Items: pods,
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "10",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/namespaces/test/pods":
0000000000000000000000000000000000000000;;					if req.URL.Query().Get("watch") == "true" {
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: watchBody(codec, events[2:])}, nil
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, podList)}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdGet(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Set("watch-only", "true")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := []runtime.Object{events[2].Object, events[3].Object}
0000000000000000000000000000000000000000;;		verifyObjects(t, expected, tf.Printer.(*testPrinter).Objects)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(buf.String()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected empty output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func watchBody(codec runtime.Codec, events []watch.Event) io.ReadCloser {
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		enc := restclientwatch.NewEncoder(streaming.NewEncoder(buf, codec), codec)
0000000000000000000000000000000000000000;;		for i := range events {
0000000000000000000000000000000000000000;;			enc.Encode(&events[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Framer.NewFrameReader(ioutil.NopCloser(buf))
0000000000000000000000000000000000000000;;	}
