0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2b934ba029573c39bdac328d720ca9bd8c22aa1e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		metricsapi "k8s.io/metrics/pkg/apis/metrics/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		baseHeapsterServiceAddress = "/api/v1/namespaces/kube-system/services/http:heapster:/proxy"
0000000000000000000000000000000000000000;;		baseMetricsAddress         = baseHeapsterServiceAddress + "/apis/metrics"
0000000000000000000000000000000000000000;;		metricsApiVersion          = "v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopSubcommandsExist(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, _, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdTop(f, buf, buf)
0000000000000000000000000000000000000000;;		if !cmd.HasSubCommands() {
0000000000000000000000000000000000000000;;			t.Error("top command should have subcommands")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshallBody(metrics interface{}) (io.ReadCloser, error) {
0000000000000000000000000000000000000000;;		result, err := json.Marshal(metrics)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ioutil.NopCloser(bytes.NewReader(result)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testNodeMetricsData() (*metricsapi.NodeMetricsList, *api.NodeList) {
0000000000000000000000000000000000000000;;		metrics := &metricsapi.NodeMetricsList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []metricsapi.NodeMetrics{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "node1", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;					Window:     metav1.Duration{Duration: time.Minute},
0000000000000000000000000000000000000000;;					Usage: clientv1.ResourceList{
0000000000000000000000000000000000000000;;						clientv1.ResourceCPU:     *resource.NewMilliQuantity(1, resource.DecimalSI),
0000000000000000000000000000000000000000;;						clientv1.ResourceMemory:  *resource.NewQuantity(2*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						clientv1.ResourceStorage: *resource.NewQuantity(3*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "node2", ResourceVersion: "11"},
0000000000000000000000000000000000000000;;					Window:     metav1.Duration{Duration: time.Minute},
0000000000000000000000000000000000000000;;					Usage: clientv1.ResourceList{
0000000000000000000000000000000000000000;;						clientv1.ResourceCPU:     *resource.NewMilliQuantity(5, resource.DecimalSI),
0000000000000000000000000000000000000000;;						clientv1.ResourceMemory:  *resource.NewQuantity(6*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						clientv1.ResourceStorage: *resource.NewQuantity(7*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nodes := &api.NodeList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "15",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []api.Node{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "node1", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{
0000000000000000000000000000000000000000;;						Allocatable: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceCPU:     *resource.NewMilliQuantity(10, resource.DecimalSI),
0000000000000000000000000000000000000000;;							api.ResourceMemory:  *resource.NewQuantity(20*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;							api.ResourceStorage: *resource.NewQuantity(30*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "node2", ResourceVersion: "11"},
0000000000000000000000000000000000000000;;					Status: api.NodeStatus{
0000000000000000000000000000000000000000;;						Allocatable: api.ResourceList{
0000000000000000000000000000000000000000;;							api.ResourceCPU:     *resource.NewMilliQuantity(50, resource.DecimalSI),
0000000000000000000000000000000000000000;;							api.ResourceMemory:  *resource.NewQuantity(60*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;							api.ResourceStorage: *resource.NewQuantity(70*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return metrics, nodes
0000000000000000000000000000000000000000;;	}
