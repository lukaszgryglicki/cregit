0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f873bab65037ea834de9fad9276de0f308a52a82;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreatePdb(t *testing.T) {
0000000000000000000000000000000000000000;;		pdbName := "my-pdb"
0000000000000000000000000000000000000000;;		f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				return &http.Response{
0000000000000000000000000000000000000000;;					StatusCode: http.StatusOK,
0000000000000000000000000000000000000000;;					Body:       ioutil.NopCloser(&bytes.Buffer{}),
0000000000000000000000000000000000000000;;				}, nil
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.ClientConfig = &restclient.Config{}
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdCreatePodDisruptionBudget(f, buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("min-available", "1")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("selector", "app=rails")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("dry-run", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		CreatePodDisruptionBudget(f, buf, cmd, []string{pdbName})
0000000000000000000000000000000000000000;;		expectedOutput := "poddisruptionbudget/" + pdbName + "\n"
0000000000000000000000000000000000000000;;		if buf.String() != expectedOutput {
0000000000000000000000000000000000000000;;			t.Errorf("expected output: %s, but got: %s", expectedOutput, buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
