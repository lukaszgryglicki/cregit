0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ee795af1ab60955bd25d7da6e3b02fd1fd34628c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package set
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientcmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLocalAndDryRunFlags(t *testing.T) {
0000000000000000000000000000000000000000;;		out := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		errout := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		f := clientcmdutil.NewFactory(nil)
0000000000000000000000000000000000000000;;		setCmd := NewCmdSet(f, out, errout)
0000000000000000000000000000000000000000;;		ensureLocalAndDryRunFlagsOnChildren(t, setCmd, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ensureLocalAndDryRunFlagsOnChildren(t *testing.T, c *cobra.Command, prefix string) {
0000000000000000000000000000000000000000;;		for _, cmd := range c.Commands() {
0000000000000000000000000000000000000000;;			name := prefix + cmd.Name()
0000000000000000000000000000000000000000;;			if localFlag := cmd.Flag("local"); localFlag == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Command %s does not implement the --local flag", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if dryRunFlag := cmd.Flag("dry-run"); dryRunFlag == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Command %s does not implement the --dry-run flag", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ensureLocalAndDryRunFlagsOnChildren(t, cmd, name+".")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
