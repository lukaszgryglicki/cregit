0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
03c314a111524c9e895917454c57f07ded9c4891;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package set
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestImageLocal(t *testing.T) {
0000000000000000000000000000000000000000;;		f, tf, codec, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected request: %s %#v\n%#v", req.Method, req.URL, req)
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.ClientConfig = &restclient.Config{ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdImage(f, buf, buf)
0000000000000000000000000000000000000000;;		cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("local", "true")
0000000000000000000000000000000000000000;;		mapper, typer := f.Object()
0000000000000000000000000000000000000000;;		tf.Printer = &printers.NamePrinter{Decoders: []runtime.Decoder{codec}, Typer: typer, Mapper: mapper}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		opts := ImageOptions{FilenameOptions: resource.FilenameOptions{
0000000000000000000000000000000000000000;;			Filenames: []string{"../../../../examples/storage/cassandra/cassandra-controller.yaml"}},
0000000000000000000000000000000000000000;;			Out:   buf,
0000000000000000000000000000000000000000;;			Local: true}
0000000000000000000000000000000000000000;;		err := opts.Complete(f, cmd, []string{"cassandra=thingy"})
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			err = opts.Validate()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			err = opts.Run()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(buf.String(), "replicationcontrollers/cassandra") {
0000000000000000000000000000000000000000;;			t.Errorf("did not set image: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetImageValidation(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name         string
0000000000000000000000000000000000000000;;			imageOptions *ImageOptions
0000000000000000000000000000000000000000;;			expectErr    string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "test resource < 1 and filenames empty",
0000000000000000000000000000000000000000;;				imageOptions: &ImageOptions{},
0000000000000000000000000000000000000000;;				expectErr:    "[one or more resources must be specified as <resource> <name> or <resource>/<name>, at least one image update is required]",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "test containerImages < 1",
0000000000000000000000000000000000000000;;				imageOptions: &ImageOptions{
0000000000000000000000000000000000000000;;					Resources: []string{"a", "b", "c"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					FilenameOptions: resource.FilenameOptions{
0000000000000000000000000000000000000000;;						Filenames: []string{"testFile"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: "at least one image update is required",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "test containerImages > 1 and all containers are already specified by *",
0000000000000000000000000000000000000000;;				imageOptions: &ImageOptions{
0000000000000000000000000000000000000000;;					Resources: []string{"a", "b", "c"},
0000000000000000000000000000000000000000;;					FilenameOptions: resource.FilenameOptions{
0000000000000000000000000000000000000000;;						Filenames: []string{"testFile"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ContainerImages: map[string]string{
0000000000000000000000000000000000000000;;						"test": "test",
0000000000000000000000000000000000000000;;						"*":    "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: "all containers are already specified by *, but saw more than one container_name=container_image pairs",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "sucess case",
0000000000000000000000000000000000000000;;				imageOptions: &ImageOptions{
0000000000000000000000000000000000000000;;					Resources: []string{"a", "b", "c"},
0000000000000000000000000000000000000000;;					FilenameOptions: resource.FilenameOptions{
0000000000000000000000000000000000000000;;						Filenames: []string{"testFile"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ContainerImages: map[string]string{
0000000000000000000000000000000000000000;;						"test": "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			err := testCase.imageOptions.Validate()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err.Error() != testCase.expectErr {
0000000000000000000000000000000000000000;;					t.Errorf("[%s]:expect err:%s got err:%s", testCase.name, testCase.expectErr, err.Error())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && (testCase.expectErr != "") {
0000000000000000000000000000000000000000;;				t.Errorf("[%s]:expect err:%s got err:%v", testCase.name, testCase.expectErr, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
