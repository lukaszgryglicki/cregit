0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c301ebb8e6300465ba3e109f15a881efa18ac6c1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package set
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidate(t *testing.T) {
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			options   *SubjectOptions
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"test-missing-subjects": {
0000000000000000000000000000000000000000;;				options: &SubjectOptions{
0000000000000000000000000000000000000000;;					Users:           []string{},
0000000000000000000000000000000000000000;;					Groups:          []string{},
0000000000000000000000000000000000000000;;					ServiceAccounts: []string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-invalid-serviceaccounts": {
0000000000000000000000000000000000000000;;				options: &SubjectOptions{
0000000000000000000000000000000000000000;;					Users:           []string{},
0000000000000000000000000000000000000000;;					Groups:          []string{},
0000000000000000000000000000000000000000;;					ServiceAccounts: []string{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-serviceaccounts-name": {
0000000000000000000000000000000000000000;;				options: &SubjectOptions{
0000000000000000000000000000000000000000;;					Users:           []string{},
0000000000000000000000000000000000000000;;					Groups:          []string{},
0000000000000000000000000000000000000000;;					ServiceAccounts: []string{"foo:"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-serviceaccounts-namespace": {
0000000000000000000000000000000000000000;;				options: &SubjectOptions{
0000000000000000000000000000000000000000;;					Infos: []*resource.Info{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: &rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;								ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;									Name: "clusterrolebinding",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								RoleRef: rbac.RoleRef{
0000000000000000000000000000000000000000;;									APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;									Kind:     "ClusterRole",
0000000000000000000000000000000000000000;;									Name:     "role",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Users:           []string{},
0000000000000000000000000000000000000000;;					Groups:          []string{},
0000000000000000000000000000000000000000;;					ServiceAccounts: []string{":foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case": {
0000000000000000000000000000000000000000;;				options: &SubjectOptions{
0000000000000000000000000000000000000000;;					Infos: []*resource.Info{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: &rbac.RoleBinding{
0000000000000000000000000000000000000000;;								ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;									Name:      "rolebinding",
0000000000000000000000000000000000000000;;									Namespace: "one",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								RoleRef: rbac.RoleRef{
0000000000000000000000000000000000000000;;									APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;									Kind:     "ClusterRole",
0000000000000000000000000000000000000000;;									Name:     "role",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Users:           []string{"foo"},
0000000000000000000000000000000000000000;;					Groups:          []string{"foo"},
0000000000000000000000000000000000000000;;					ServiceAccounts: []string{"ns:foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			test.options.Mapper, _ = f.Object()
0000000000000000000000000000000000000000;;			err := test.options.Validate()
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateSubjectForObject(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			Name     string
0000000000000000000000000000000000000000;;			obj      runtime.Object
0000000000000000000000000000000000000000;;			subjects []rbac.Subject
0000000000000000000000000000000000000000;;			expected []rbac.Subject
0000000000000000000000000000000000000000;;			wantErr  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "invalid object type",
0000000000000000000000000000000000000000;;				obj: &rbac.Role{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "role",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "add resource with users in rolebinding",
0000000000000000000000000000000000000000;;				obj: &rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "rolebinding",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;							Kind:     "User",
0000000000000000000000000000000000000000;;							Name:     "a",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "add resource with groups in rolebinding",
0000000000000000000000000000000000000000;;				obj: &rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "rolebinding",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;							Kind:     "Group",
0000000000000000000000000000000000000000;;							Name:     "a",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "Group",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "Group",
0000000000000000000000000000000000000000;;						Name:     "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "Group",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "Group",
0000000000000000000000000000000000000000;;						Name:     "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "add resource with serviceaccounts in rolebinding",
0000000000000000000000000000000000000000;;				obj: &rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "rolebinding",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;							Namespace: "one",
0000000000000000000000000000000000000000;;							Name:      "a",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "add resource with serviceaccounts in clusterrolebinding",
0000000000000000000000000000000000000000;;				obj: &rbac.ClusterRoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "clusterrolebinding",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;							Kind:     "User",
0000000000000000000000000000000000000000;;							Name:     "a",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;							Kind:     "Group",
0000000000000000000000000000000000000000;;							Name:     "a",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "Group",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			if _, err := updateSubjectForObject(tt.obj, tt.subjects, addSubjects); (err != nil) != tt.wantErr {
0000000000000000000000000000000000000000;;				t.Errorf("%q. updateSubjectForObject() error = %v, wantErr %v", tt.Name, err, tt.wantErr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			want := tt.expected
0000000000000000000000000000000000000000;;			var got []rbac.Subject
0000000000000000000000000000000000000000;;			switch t := tt.obj.(type) {
0000000000000000000000000000000000000000;;			case *rbac.RoleBinding:
0000000000000000000000000000000000000000;;				got = t.Subjects
0000000000000000000000000000000000000000;;			case *rbac.ClusterRoleBinding:
0000000000000000000000000000000000000000;;				got = t.Subjects
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;				t.Errorf("%q. updateSubjectForObject() failed", tt.Name)
0000000000000000000000000000000000000000;;				t.Errorf("Got: %v", got)
0000000000000000000000000000000000000000;;				t.Errorf("Want: %v", want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddSubject(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			Name       string
0000000000000000000000000000000000000000;;			existing   []rbac.Subject
0000000000000000000000000000000000000000;;			subjects   []rbac.Subject
0000000000000000000000000000000000000000;;			expected   []rbac.Subject
0000000000000000000000000000000000000000;;			wantChange bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "add resource with users",
0000000000000000000000000000000000000000;;				existing: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						Kind:     "User",
0000000000000000000000000000000000000000;;						Name:     "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantChange: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name: "add resource with serviceaccounts",
0000000000000000000000000000000000000000;;				existing: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "two",
0000000000000000000000000000000000000000;;						Name:      "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []rbac.Subject{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "one",
0000000000000000000000000000000000000000;;						Name:      "b",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Kind:      "ServiceAccount",
0000000000000000000000000000000000000000;;						Namespace: "two",
0000000000000000000000000000000000000000;;						Name:      "a",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantChange: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			changed := false
0000000000000000000000000000000000000000;;			got := []rbac.Subject{}
0000000000000000000000000000000000000000;;			if changed, got = addSubjects(tt.existing, tt.subjects); (changed != false) != tt.wantChange {
0000000000000000000000000000000000000000;;				t.Errorf("%q. addSubjects() changed = %v, wantChange = %v", tt.Name, changed, tt.wantChange)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			want := tt.expected
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;				t.Errorf("%q. addSubjects() failed", tt.Name)
0000000000000000000000000000000000000000;;				t.Errorf("Got: %v", got)
0000000000000000000000000000000000000000;;				t.Errorf("Want: %v", want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
