0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e8b4a99efbc041f69c223c311b21498524548b8e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testRolePrinter struct {
0000000000000000000000000000000000000000;;		CachedRole *rbac.Role
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testRolePrinter) PrintObj(obj runtime.Object, out io.Writer) error {
0000000000000000000000000000000000000000;;		t.CachedRole = obj.(*rbac.Role)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testRolePrinter) AfterPrint(output io.Writer, res string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testRolePrinter) HandledResources() []string {
0000000000000000000000000000000000000000;;		return []string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testRolePrinter) IsGeneric() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateRole(t *testing.T) {
0000000000000000000000000000000000000000;;		roleName := "my-role"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		printer := &testRolePrinter{}
0000000000000000000000000000000000000000;;		tf.Printer = printer
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{}
0000000000000000000000000000000000000000;;		tf.ClientConfig = defaultClientConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			verbs         string
0000000000000000000000000000000000000000;;			resources     string
0000000000000000000000000000000000000000;;			resourceNames string
0000000000000000000000000000000000000000;;			expectedRole  *rbac.Role
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"test-duplicate-resources": {
0000000000000000000000000000000000000000;;				verbs:     "get,watch,list",
0000000000000000000000000000000000000000;;				resources: "pods,pods",
0000000000000000000000000000000000000000;;				expectedRole: &rbac.Role{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: roleName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get", "watch", "list"},
0000000000000000000000000000000000000000;;							Resources:     []string{"pods"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{""},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-subresources": {
0000000000000000000000000000000000000000;;				verbs:     "get,watch,list",
0000000000000000000000000000000000000000;;				resources: "replicasets/scale",
0000000000000000000000000000000000000000;;				expectedRole: &rbac.Role{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: roleName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get", "watch", "list"},
0000000000000000000000000000000000000000;;							Resources:     []string{"replicasets/scale"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{"extensions"},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-subresources-with-apigroup": {
0000000000000000000000000000000000000000;;				verbs:     "get,watch,list",
0000000000000000000000000000000000000000;;				resources: "replicasets.extensions/scale",
0000000000000000000000000000000000000000;;				expectedRole: &rbac.Role{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: roleName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get", "watch", "list"},
0000000000000000000000000000000000000000;;							Resources:     []string{"replicasets/scale"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{"extensions"},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case-with-multiple-apigroups": {
0000000000000000000000000000000000000000;;				verbs:     "get,watch,list",
0000000000000000000000000000000000000000;;				resources: "pods,deployments.extensions",
0000000000000000000000000000000000000000;;				expectedRole: &rbac.Role{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: roleName,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Rules: []rbac.PolicyRule{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get", "watch", "list"},
0000000000000000000000000000000000000000;;							Resources:     []string{"pods"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{""},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Verbs:         []string{"get", "watch", "list"},
0000000000000000000000000000000000000000;;							Resources:     []string{"deployments"},
0000000000000000000000000000000000000000;;							APIGroups:     []string{"extensions"},
0000000000000000000000000000000000000000;;							ResourceNames: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;			cmd := NewCmdCreateRole(f, buf)
0000000000000000000000000000000000000000;;			cmd.Flags().Set("dry-run", "true")
0000000000000000000000000000000000000000;;			cmd.Flags().Set("output", "object")
0000000000000000000000000000000000000000;;			cmd.Flags().Set("verb", test.verbs)
0000000000000000000000000000000000000000;;			cmd.Flags().Set("resource", test.resources)
0000000000000000000000000000000000000000;;			if test.resourceNames != "" {
0000000000000000000000000000000000000000;;				cmd.Flags().Set("resource-name", test.resourceNames)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cmd.Run(cmd, []string{roleName})
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedRole, printer.CachedRole) {
0000000000000000000000000000000000000000;;				t.Errorf("%s:\nexpected:\n%#v\nsaw:\n%#v", name, test.expectedRole, printer.CachedRole)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidate(t *testing.T) {
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			roleOptions *CreateRoleOptions
0000000000000000000000000000000000000000;;			expectErr   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"test-missing-name": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{},
0000000000000000000000000000000000000000;;				expectErr:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-verb": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name: "my-role",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-resource": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"get"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-resource-existing-apigroup": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"get"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Group: "extensions",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-resource-existing-subresource": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"get"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							SubResource: "scale",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-invalid-verb": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"invalid-verb"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-nonresource-verb": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"post"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-special-verb": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"use"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-mix-verbs": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"impersonate", "use"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource:    "userextras",
0000000000000000000000000000000000000000;;							SubResource: "scopes",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-special-verb-with-wrong-apigroup": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"impersonate"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource:    "userextras",
0000000000000000000000000000000000000000;;							SubResource: "scopes",
0000000000000000000000000000000000000000;;							Group:       "extensions",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-invalid-resource": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"get"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "invalid-resource",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-resource-name-with-multiple-resources": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"get"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "deployments",
0000000000000000000000000000000000000000;;							Group:    "extensions",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceNames: []string{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "role-binder",
0000000000000000000000000000000000000000;;					Verbs: []string{"get", "list", "bind"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "roles",
0000000000000000000000000000000000000000;;							Group:    "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceNames: []string{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case-with-subresource": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"get", "list"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource:    "replicasets",
0000000000000000000000000000000000000000;;							SubResource: "scale",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceNames: []string{"bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case-with-additional-resource": {
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  "my-role",
0000000000000000000000000000000000000000;;					Verbs: []string{"impersonate"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource:    "userextras",
0000000000000000000000000000000000000000;;							SubResource: "scopes",
0000000000000000000000000000000000000000;;							Group:       "authentication.k8s.io",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			test.roleOptions.Mapper, _ = f.Object()
0000000000000000000000000000000000000000;;			err := test.roleOptions.Validate()
0000000000000000000000000000000000000000;;			if test.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expect error happens but validate passes.", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestComplete(t *testing.T) {
0000000000000000000000000000000000000000;;		roleName := "my-role"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{}
0000000000000000000000000000000000000000;;		tf.ClientConfig = defaultClientConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdCreateRole(f, buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("resource", "pods,deployments.extensions")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			params      []string
0000000000000000000000000000000000000000;;			roleOptions *CreateRoleOptions
0000000000000000000000000000000000000000;;			expected    *CreateRoleOptions
0000000000000000000000000000000000000000;;			expectErr   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"test-missing-name": {
0000000000000000000000000000000000000000;;				params:      []string{},
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{},
0000000000000000000000000000000000000000;;				expectErr:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-duplicate-verbs": {
0000000000000000000000000000000000000000;;				params: []string{roleName},
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name: roleName,
0000000000000000000000000000000000000000;;					Verbs: []string{
0000000000000000000000000000000000000000;;						"get",
0000000000000000000000000000000000000000;;						"watch",
0000000000000000000000000000000000000000;;						"list",
0000000000000000000000000000000000000000;;						"get",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name: roleName,
0000000000000000000000000000000000000000;;					Verbs: []string{
0000000000000000000000000000000000000000;;						"get",
0000000000000000000000000000000000000000;;						"watch",
0000000000000000000000000000000000000000;;						"list",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;							Group:    "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "deployments",
0000000000000000000000000000000000000000;;							Group:    "extensions",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceNames: []string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-verball": {
0000000000000000000000000000000000000000;;				params: []string{roleName},
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name: roleName,
0000000000000000000000000000000000000000;;					Verbs: []string{
0000000000000000000000000000000000000000;;						"get",
0000000000000000000000000000000000000000;;						"watch",
0000000000000000000000000000000000000000;;						"list",
0000000000000000000000000000000000000000;;						"*",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  roleName,
0000000000000000000000000000000000000000;;					Verbs: []string{"*"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;							Group:    "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "deployments",
0000000000000000000000000000000000000000;;							Group:    "extensions",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceNames: []string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-duplicate-resourcenames": {
0000000000000000000000000000000000000000;;				params: []string{roleName},
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:          roleName,
0000000000000000000000000000000000000000;;					Verbs:         []string{"*"},
0000000000000000000000000000000000000000;;					ResourceNames: []string{"foo", "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  roleName,
0000000000000000000000000000000000000000;;					Verbs: []string{"*"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;							Group:    "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "deployments",
0000000000000000000000000000000000000000;;							Group:    "extensions",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceNames: []string{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-complete-case": {
0000000000000000000000000000000000000000;;				params: []string{roleName},
0000000000000000000000000000000000000000;;				roleOptions: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:          roleName,
0000000000000000000000000000000000000000;;					Verbs:         []string{"*"},
0000000000000000000000000000000000000000;;					ResourceNames: []string{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &CreateRoleOptions{
0000000000000000000000000000000000000000;;					Name:  roleName,
0000000000000000000000000000000000000000;;					Verbs: []string{"*"},
0000000000000000000000000000000000000000;;					Resources: []ResourceOptions{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "pods",
0000000000000000000000000000000000000000;;							Group:    "",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Resource: "deployments",
0000000000000000000000000000000000000000;;							Group:    "extensions",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					ResourceNames: []string{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			err := test.roleOptions.Complete(f, cmd, test.params)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expect error happens but test passes.", name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.roleOptions.Name != test.expected.Name {
0000000000000000000000000000000000000000;;				t.Errorf("%s:\nexpected name:\n%#v\nsaw name:\n%#v", name, test.expected.Name, test.roleOptions.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.roleOptions.Verbs, test.expected.Verbs) {
0000000000000000000000000000000000000000;;				t.Errorf("%s:\nexpected verbs:\n%#v\nsaw verbs:\n%#v", name, test.expected.Verbs, test.roleOptions.Verbs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.roleOptions.Resources, test.expected.Resources) {
0000000000000000000000000000000000000000;;				t.Errorf("%s:\nexpected resources:\n%#v\nsaw resources:\n%#v", name, test.expected.Resources, test.roleOptions.Resources)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.roleOptions.ResourceNames, test.expected.ResourceNames) {
0000000000000000000000000000000000000000;;				t.Errorf("%s:\nexpected resource names:\n%#v\nsaw resource names:\n%#v", name, test.expected.ResourceNames, test.roleOptions.ResourceNames)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
