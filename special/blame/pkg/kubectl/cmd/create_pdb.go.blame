0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9438d257a1c06e69dc525195ecf1ec8c63a2b71e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		pdbLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			Create a pod disruption budget with the specified name, selector, and desired minimum available pods`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pdbExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Create a pod disruption budget named my-pdb that will select all pods with the app=rails label
0000000000000000000000000000000000000000;;			# and require at least one of them being available at any point in time.
0000000000000000000000000000000000000000;;			kubectl create poddisruptionbudget my-pdb --selector=app=rails --min-available=1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Create a pod disruption budget named my-pdb that will select all pods with the app=nginx label
0000000000000000000000000000000000000000;;			# and require at least half of the pods selected to be available at any point in time.
0000000000000000000000000000000000000000;;			kubectl create pdb my-pdb --selector=app=nginx --min-available=50%`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdCreatePodDisruptionBudget is a macro command to create a new pod disruption budget.
0000000000000000000000000000000000000000;;	func NewCmdCreatePodDisruptionBudget(f cmdutil.Factory, cmdOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "poddisruptionbudget NAME --selector=SELECTOR --min-available=N [--dry-run]",
0000000000000000000000000000000000000000;;			Aliases: []string{"pdb"},
0000000000000000000000000000000000000000;;			Short:   i18n.T("Create a pod disruption budget with the specified name."),
0000000000000000000000000000000000000000;;			Long:    pdbLong,
0000000000000000000000000000000000000000;;			Example: pdbExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := CreatePodDisruptionBudget(f, cmdOut, cmd, args)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmdutil.AddApplyAnnotationFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddValidateFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddPrinterFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddGeneratorFlags(cmd, cmdutil.PodDisruptionBudgetV2GeneratorName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().String("min-available", "", i18n.T("The minimum number or percentage of available pods this budget requires."))
0000000000000000000000000000000000000000;;		cmd.Flags().String("max-unavailable", "", i18n.T("The maximum number or percentage of unavailable pods this budget requires."))
0000000000000000000000000000000000000000;;		cmd.Flags().String("selector", "", i18n.T("A label selector to use for this budget. Only equality-based selector requirements are supported."))
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreatePodDisruptionBudget implements the behavior to run the create pdb command.
0000000000000000000000000000000000000000;;	func CreatePodDisruptionBudget(f cmdutil.Factory, cmdOut io.Writer, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		name, err := NameFromCommandArgs(cmd, args)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var generator kubectl.StructuredGenerator
0000000000000000000000000000000000000000;;		switch generatorName := cmdutil.GetFlagString(cmd, "generator"); generatorName {
0000000000000000000000000000000000000000;;		case cmdutil.PodDisruptionBudgetV1GeneratorName:
0000000000000000000000000000000000000000;;			generator = &kubectl.PodDisruptionBudgetV1Generator{
0000000000000000000000000000000000000000;;				Name:         name,
0000000000000000000000000000000000000000;;				MinAvailable: cmdutil.GetFlagString(cmd, "min-available"),
0000000000000000000000000000000000000000;;				Selector:     cmdutil.GetFlagString(cmd, "selector"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case cmdutil.PodDisruptionBudgetV2GeneratorName:
0000000000000000000000000000000000000000;;			generator = &kubectl.PodDisruptionBudgetV2Generator{
0000000000000000000000000000000000000000;;				Name:           name,
0000000000000000000000000000000000000000;;				MinAvailable:   cmdutil.GetFlagString(cmd, "min-available"),
0000000000000000000000000000000000000000;;				MaxUnavailable: cmdutil.GetFlagString(cmd, "max-unavailable"),
0000000000000000000000000000000000000000;;				Selector:       cmdutil.GetFlagString(cmd, "selector"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errUnsupportedGenerator(cmd, generatorName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return RunCreateSubcommand(f, cmd, cmdOut, &CreateSubcommandOptions{
0000000000000000000000000000000000000000;;			Name:                name,
0000000000000000000000000000000000000000;;			StructuredGenerator: generator,
0000000000000000000000000000000000000000;;			DryRun:              cmdutil.GetFlagBool(cmd, "dry-run"),
0000000000000000000000000000000000000000;;			OutputFormat:        cmdutil.GetFlagString(cmd, "output"),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
