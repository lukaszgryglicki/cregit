0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ -z "${1-}" ]]; then
0000000000000000000000000000000000000000;;	    echo "Usage: record_testcase.sh testcase-name"
0000000000000000000000000000000000000000;;	    exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Clean up the test server
0000000000000000000000000000000000000000;;	function cleanup {
0000000000000000000000000000000000000000;;	    if [[ ! -z "${pid-}" ]]; then
0000000000000000000000000000000000000000;;	        echo "Stopping recording server (${pid})"
0000000000000000000000000000000000000000;;	        # kill the process `go run` launched
0000000000000000000000000000000000000000;;	        pkill -P "${pid}"
0000000000000000000000000000000000000000;;	        # kill the `go run` process itself
0000000000000000000000000000000000000000;;	        kill -9 "${pid}"
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	testcase="${1}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	test_root="$(dirname "${BASH_SOURCE}")"
0000000000000000000000000000000000000000;;	testcase_dir="${test_root}/testcase-${testcase}"
0000000000000000000000000000000000000000;;	mkdir -p "${testcase_dir}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	pushd "${testcase_dir}"
0000000000000000000000000000000000000000;;	    export EDITOR="../record_editor.sh"
0000000000000000000000000000000000000000;;	    go run "../record.go" &
0000000000000000000000000000000000000000;;	    pid=$!
0000000000000000000000000000000000000000;;	    trap cleanup EXIT
0000000000000000000000000000000000000000;;	    echo "Started recording server (${pid})"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Make a kubeconfig that makes kubectl talk to our test server
0000000000000000000000000000000000000000;;	    edit_kubeconfig="${TMP:-/tmp}/edit_test.kubeconfig"
0000000000000000000000000000000000000000;;	    echo "apiVersion: v1
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    server: http://localhost:8081
0000000000000000000000000000000000000000;;	  name: test
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: test
0000000000000000000000000000000000000000;;	    user: test
0000000000000000000000000000000000000000;;	  name: test
0000000000000000000000000000000000000000;;	current-context: test
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	users: []
0000000000000000000000000000000000000000;;	" > "${edit_kubeconfig}"
0000000000000000000000000000000000000000;;	    export KUBECONFIG="${edit_kubeconfig}"
0000000000000000000000000000000000000000;;	    
0000000000000000000000000000000000000000;;	    echo "Starting subshell. Type exit when finished."
0000000000000000000000000000000000000000;;	    bash
0000000000000000000000000000000000000000;;	popd
