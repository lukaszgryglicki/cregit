0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ff550bb0a95d44aa707dba31ea71b37001da9f5f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdCreateService is a macro command to create a new service
0000000000000000000000000000000000000000;;	func NewCmdCreateService(f cmdutil.Factory, cmdOut, errOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "service",
0000000000000000000000000000000000000000;;			Aliases: []string{"svc"},
0000000000000000000000000000000000000000;;			Short:   i18n.T("Create a service using specified subcommand."),
0000000000000000000000000000000000000000;;			Long:    "Create a service using specified subcommand.",
0000000000000000000000000000000000000000;;			Run:     cmdutil.DefaultSubCommandRun(errOut),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdCreateServiceClusterIP(f, cmdOut))
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdCreateServiceNodePort(f, cmdOut))
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdCreateServiceLoadBalancer(f, cmdOut))
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdCreateServiceExternalName(f, cmdOut))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		serviceClusterIPLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;	    Create a clusterIP service with the specified name.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serviceClusterIPExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;	    # Create a new clusterIP service named my-cs
0000000000000000000000000000000000000000;;	    kubectl create service clusterip my-cs --tcp=5678:8080
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Create a new clusterIP service named my-cs (in headless mode)
0000000000000000000000000000000000000000;;	    kubectl create service clusterip my-cs --clusterip="None"`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addPortFlags(cmd *cobra.Command) {
0000000000000000000000000000000000000000;;		cmd.Flags().StringSlice("tcp", []string{}, "Port pairs can be specified as '<port>:<targetPort>'.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdCreateServiceClusterIP is a command to create a clusterIP service
0000000000000000000000000000000000000000;;	func NewCmdCreateServiceClusterIP(f cmdutil.Factory, cmdOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "clusterip NAME [--tcp=<port>:<targetPort>] [--dry-run]",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Create a clusterIP service."),
0000000000000000000000000000000000000000;;			Long:    serviceClusterIPLong,
0000000000000000000000000000000000000000;;			Example: serviceClusterIPExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := CreateServiceClusterIP(f, cmdOut, cmd, args)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdutil.AddApplyAnnotationFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddValidateFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddPrinterFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddGeneratorFlags(cmd, cmdutil.ServiceClusterIPGeneratorV1Name)
0000000000000000000000000000000000000000;;		addPortFlags(cmd)
0000000000000000000000000000000000000000;;		cmd.Flags().String("clusterip", "", i18n.T("Assign your own ClusterIP or set to 'None' for a 'headless' service (no loadbalancing)."))
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func errUnsupportedGenerator(cmd *cobra.Command, generatorName string) error {
0000000000000000000000000000000000000000;;		return cmdutil.UsageErrorf(cmd, "Generator %s not supported. ", generatorName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateServiceClusterIP implements the behavior to run the create service clusterIP command
0000000000000000000000000000000000000000;;	func CreateServiceClusterIP(f cmdutil.Factory, cmdOut io.Writer, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		name, err := NameFromCommandArgs(cmd, args)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var generator kubectl.StructuredGenerator
0000000000000000000000000000000000000000;;		switch generatorName := cmdutil.GetFlagString(cmd, "generator"); generatorName {
0000000000000000000000000000000000000000;;		case cmdutil.ServiceClusterIPGeneratorV1Name:
0000000000000000000000000000000000000000;;			generator = &kubectl.ServiceCommonGeneratorV1{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				TCP:       cmdutil.GetFlagStringSlice(cmd, "tcp"),
0000000000000000000000000000000000000000;;				Type:      api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				ClusterIP: cmdutil.GetFlagString(cmd, "clusterip"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errUnsupportedGenerator(cmd, generatorName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return RunCreateSubcommand(f, cmd, cmdOut, &CreateSubcommandOptions{
0000000000000000000000000000000000000000;;			Name:                name,
0000000000000000000000000000000000000000;;			StructuredGenerator: generator,
0000000000000000000000000000000000000000;;			DryRun:              cmdutil.GetDryRunFlag(cmd),
0000000000000000000000000000000000000000;;			OutputFormat:        cmdutil.GetFlagString(cmd, "output"),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		serviceNodePortLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;	    Create a nodeport service with the specified name.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serviceNodePortExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;	    # Create a new nodeport service named my-ns
0000000000000000000000000000000000000000;;	    kubectl create service nodeport my-ns --tcp=5678:8080`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdCreateServiceNodePort is a macro command for creating a NodePort service
0000000000000000000000000000000000000000;;	func NewCmdCreateServiceNodePort(f cmdutil.Factory, cmdOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "nodeport NAME [--tcp=port:targetPort] [--dry-run]",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Create a NodePort service."),
0000000000000000000000000000000000000000;;			Long:    serviceNodePortLong,
0000000000000000000000000000000000000000;;			Example: serviceNodePortExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := CreateServiceNodePort(f, cmdOut, cmd, args)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdutil.AddApplyAnnotationFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddValidateFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddPrinterFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddGeneratorFlags(cmd, cmdutil.ServiceNodePortGeneratorV1Name)
0000000000000000000000000000000000000000;;		cmd.Flags().Int("node-port", 0, "Port used to expose the service on each node in a cluster.")
0000000000000000000000000000000000000000;;		addPortFlags(cmd)
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateServiceNodePort is the implementation of the create service nodeport command
0000000000000000000000000000000000000000;;	func CreateServiceNodePort(f cmdutil.Factory, cmdOut io.Writer, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		name, err := NameFromCommandArgs(cmd, args)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var generator kubectl.StructuredGenerator
0000000000000000000000000000000000000000;;		switch generatorName := cmdutil.GetFlagString(cmd, "generator"); generatorName {
0000000000000000000000000000000000000000;;		case cmdutil.ServiceNodePortGeneratorV1Name:
0000000000000000000000000000000000000000;;			generator = &kubectl.ServiceCommonGeneratorV1{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				TCP:       cmdutil.GetFlagStringSlice(cmd, "tcp"),
0000000000000000000000000000000000000000;;				Type:      api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;				ClusterIP: "",
0000000000000000000000000000000000000000;;				NodePort:  cmdutil.GetFlagInt(cmd, "node-port"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errUnsupportedGenerator(cmd, generatorName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return RunCreateSubcommand(f, cmd, cmdOut, &CreateSubcommandOptions{
0000000000000000000000000000000000000000;;			Name:                name,
0000000000000000000000000000000000000000;;			StructuredGenerator: generator,
0000000000000000000000000000000000000000;;			DryRun:              cmdutil.GetDryRunFlag(cmd),
0000000000000000000000000000000000000000;;			OutputFormat:        cmdutil.GetFlagString(cmd, "output"),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		serviceLoadBalancerLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;	    Create a LoadBalancer service with the specified name.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serviceLoadBalancerExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;	    # Create a new LoadBalancer service named my-lbs
0000000000000000000000000000000000000000;;	    kubectl create service loadbalancer my-lbs --tcp=5678:8080`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdCreateServiceLoadBalancer is a macro command for creating a LoadBalancer service
0000000000000000000000000000000000000000;;	func NewCmdCreateServiceLoadBalancer(f cmdutil.Factory, cmdOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "loadbalancer NAME [--tcp=port:targetPort] [--dry-run]",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Create a LoadBalancer service."),
0000000000000000000000000000000000000000;;			Long:    serviceLoadBalancerLong,
0000000000000000000000000000000000000000;;			Example: serviceLoadBalancerExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := CreateServiceLoadBalancer(f, cmdOut, cmd, args)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdutil.AddApplyAnnotationFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddValidateFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddPrinterFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddGeneratorFlags(cmd, cmdutil.ServiceLoadBalancerGeneratorV1Name)
0000000000000000000000000000000000000000;;		addPortFlags(cmd)
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateServiceLoadBalancer is the implementation of the service loadbalancer command
0000000000000000000000000000000000000000;;	func CreateServiceLoadBalancer(f cmdutil.Factory, cmdOut io.Writer, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		name, err := NameFromCommandArgs(cmd, args)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var generator kubectl.StructuredGenerator
0000000000000000000000000000000000000000;;		switch generatorName := cmdutil.GetFlagString(cmd, "generator"); generatorName {
0000000000000000000000000000000000000000;;		case cmdutil.ServiceLoadBalancerGeneratorV1Name:
0000000000000000000000000000000000000000;;			generator = &kubectl.ServiceCommonGeneratorV1{
0000000000000000000000000000000000000000;;				Name:      name,
0000000000000000000000000000000000000000;;				TCP:       cmdutil.GetFlagStringSlice(cmd, "tcp"),
0000000000000000000000000000000000000000;;				Type:      api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;				ClusterIP: "",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errUnsupportedGenerator(cmd, generatorName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return RunCreateSubcommand(f, cmd, cmdOut, &CreateSubcommandOptions{
0000000000000000000000000000000000000000;;			Name:                name,
0000000000000000000000000000000000000000;;			StructuredGenerator: generator,
0000000000000000000000000000000000000000;;			DryRun:              cmdutil.GetFlagBool(cmd, "dry-run"),
0000000000000000000000000000000000000000;;			OutputFormat:        cmdutil.GetFlagString(cmd, "output"),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		serviceExternalNameLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;		Create an ExternalName service with the specified name.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalName service references to an external DNS address instead of
0000000000000000000000000000000000000000;;		only pods, which will allow application authors to reference services
0000000000000000000000000000000000000000;;		that exist off platform, on other clusters, or locally.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serviceExternalNameExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;		# Create a new ExternalName service named my-ns 
0000000000000000000000000000000000000000;;		kubectl create service externalname my-ns --external-name bar.com`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdCreateServiceExternalName is a macro command for creating a ExternalName service
0000000000000000000000000000000000000000;;	func NewCmdCreateServiceExternalName(f cmdutil.Factory, cmdOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "externalname NAME --external-name external.name [--dry-run]",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Create an ExternalName service."),
0000000000000000000000000000000000000000;;			Long:    serviceExternalNameLong,
0000000000000000000000000000000000000000;;			Example: serviceExternalNameExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := CreateExternalNameService(f, cmdOut, cmd, args)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdutil.AddApplyAnnotationFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddValidateFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddPrinterFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddGeneratorFlags(cmd, cmdutil.ServiceExternalNameGeneratorV1Name)
0000000000000000000000000000000000000000;;		addPortFlags(cmd)
0000000000000000000000000000000000000000;;		cmd.Flags().String("external-name", "", i18n.T("external name of service"))
0000000000000000000000000000000000000000;;		cmd.MarkFlagRequired("external-name")
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateExternalNameService is the implementation of the service externalname command
0000000000000000000000000000000000000000;;	func CreateExternalNameService(f cmdutil.Factory, cmdOut io.Writer, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		name, err := NameFromCommandArgs(cmd, args)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var generator kubectl.StructuredGenerator
0000000000000000000000000000000000000000;;		switch generatorName := cmdutil.GetFlagString(cmd, "generator"); generatorName {
0000000000000000000000000000000000000000;;		case cmdutil.ServiceExternalNameGeneratorV1Name:
0000000000000000000000000000000000000000;;			generator = &kubectl.ServiceCommonGeneratorV1{
0000000000000000000000000000000000000000;;				Name:         name,
0000000000000000000000000000000000000000;;				Type:         api.ServiceTypeExternalName,
0000000000000000000000000000000000000000;;				ExternalName: cmdutil.GetFlagString(cmd, "external-name"),
0000000000000000000000000000000000000000;;				ClusterIP:    "",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errUnsupportedGenerator(cmd, generatorName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return RunCreateSubcommand(f, cmd, cmdOut, &CreateSubcommandOptions{
0000000000000000000000000000000000000000;;			Name:                name,
0000000000000000000000000000000000000000;;			StructuredGenerator: generator,
0000000000000000000000000000000000000000;;			DryRun:              cmdutil.GetDryRunFlag(cmd),
0000000000000000000000000000000000000000;;			OutputFormat:        cmdutil.GetFlagString(cmd, "output"),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
