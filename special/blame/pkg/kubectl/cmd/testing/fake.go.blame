0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
03c314a111524c9e895917454c57f07ded9c4891;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		swagger "github.com/emicklei/go-restful-swagger12"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		fedclientset "k8s.io/kubernetes/federation/client/clientset_generated/federation_internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/util/openapi"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/plugins"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InternalType struct {
0000000000000000000000000000000000000000;;		Kind       string
0000000000000000000000000000000000000000;;		APIVersion string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalType struct {
0000000000000000000000000000000000000000;;		Kind       string `json:"kind"`
0000000000000000000000000000000000000000;;		APIVersion string `json:"apiVersion"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalType2 struct {
0000000000000000000000000000000000000000;;		Kind       string `json:"kind"`
0000000000000000000000000000000000000000;;		APIVersion string `json:"apiVersion"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *InternalType) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	func (obj *InternalType) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *InternalType) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *ExternalType) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	func (obj *ExternalType) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *ExternalType) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *ExternalType2) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	func (obj *ExternalType2) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *ExternalType2) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInternalType(kind, apiversion, name string) *InternalType {
0000000000000000000000000000000000000000;;		item := InternalType{Kind: kind,
0000000000000000000000000000000000000000;;			APIVersion: apiversion,
0000000000000000000000000000000000000000;;			Name:       name}
0000000000000000000000000000000000000000;;		return &item
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InternalNamespacedType struct {
0000000000000000000000000000000000000000;;		Kind       string
0000000000000000000000000000000000000000;;		APIVersion string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name      string
0000000000000000000000000000000000000000;;		Namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalNamespacedType struct {
0000000000000000000000000000000000000000;;		Kind       string `json:"kind"`
0000000000000000000000000000000000000000;;		APIVersion string `json:"apiVersion"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name      string `json:"name"`
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalNamespacedType2 struct {
0000000000000000000000000000000000000000;;		Kind       string `json:"kind"`
0000000000000000000000000000000000000000;;		APIVersion string `json:"apiVersion"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name      string `json:"name"`
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *InternalNamespacedType) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	func (obj *InternalNamespacedType) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *InternalNamespacedType) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *ExternalNamespacedType) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	func (obj *ExternalNamespacedType) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *ExternalNamespacedType) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *ExternalNamespacedType2) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	func (obj *ExternalNamespacedType2) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *ExternalNamespacedType2) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInternalNamespacedType(kind, apiversion, name, namespace string) *InternalNamespacedType {
0000000000000000000000000000000000000000;;		item := InternalNamespacedType{Kind: kind,
0000000000000000000000000000000000000000;;			APIVersion: apiversion,
0000000000000000000000000000000000000000;;			Name:       name,
0000000000000000000000000000000000000000;;			Namespace:  namespace}
0000000000000000000000000000000000000000;;		return &item
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var versionErr = errors.New("not a version")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func versionErrIfFalse(b bool) error {
0000000000000000000000000000000000000000;;		if b {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return versionErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var ValidVersion = api.Registry.GroupOrDie(api.GroupName).GroupVersion.Version
0000000000000000000000000000000000000000;;	var InternalGV = schema.GroupVersion{Group: "apitest", Version: runtime.APIVersionInternal}
0000000000000000000000000000000000000000;;	var UnlikelyGV = schema.GroupVersion{Group: "apitest", Version: "unlikelyversion"}
0000000000000000000000000000000000000000;;	var ValidVersionGV = schema.GroupVersion{Group: "apitest", Version: ValidVersion}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newExternalScheme() (*runtime.Scheme, meta.RESTMapper, runtime.Codec) {
0000000000000000000000000000000000000000;;		scheme := runtime.NewScheme()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(InternalGV.WithKind("Type"), &InternalType{})
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(UnlikelyGV.WithKind("Type"), &ExternalType{})
0000000000000000000000000000000000000000;;		//This tests that kubectl will not confuse the external scheme with the internal scheme, even when they accidentally have versions of the same name.
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(ValidVersionGV.WithKind("Type"), &ExternalType2{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(InternalGV.WithKind("NamespacedType"), &InternalNamespacedType{})
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(UnlikelyGV.WithKind("NamespacedType"), &ExternalNamespacedType{})
0000000000000000000000000000000000000000;;		//This tests that kubectl will not confuse the external scheme with the internal scheme, even when they accidentally have versions of the same name.
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(ValidVersionGV.WithKind("NamespacedType"), &ExternalNamespacedType2{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		codecs := serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;		codec := codecs.LegacyCodec(UnlikelyGV)
0000000000000000000000000000000000000000;;		mapper := meta.NewDefaultRESTMapper([]schema.GroupVersion{UnlikelyGV, ValidVersionGV}, func(version schema.GroupVersion) (*meta.VersionInterfaces, error) {
0000000000000000000000000000000000000000;;			return &meta.VersionInterfaces{
0000000000000000000000000000000000000000;;				ObjectConvertor:  scheme,
0000000000000000000000000000000000000000;;				MetadataAccessor: meta.NewAccessor(),
0000000000000000000000000000000000000000;;			}, versionErrIfFalse(version == ValidVersionGV || version == UnlikelyGV)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		for _, gv := range []schema.GroupVersion{UnlikelyGV, ValidVersionGV} {
0000000000000000000000000000000000000000;;			for kind := range scheme.KnownTypes(gv) {
0000000000000000000000000000000000000000;;				gvk := gv.WithKind(kind)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				scope := meta.RESTScopeNamespace
0000000000000000000000000000000000000000;;				mapper.Add(gvk, scope)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return scheme, mapper, codec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeCachedDiscoveryClient struct {
0000000000000000000000000000000000000000;;		discovery.DiscoveryInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *fakeCachedDiscoveryClient) Fresh() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *fakeCachedDiscoveryClient) Invalidate() {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *fakeCachedDiscoveryClient) ServerResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		return []*metav1.APIResourceList{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestFactory struct {
0000000000000000000000000000000000000000;;		Mapper             meta.RESTMapper
0000000000000000000000000000000000000000;;		Typer              runtime.ObjectTyper
0000000000000000000000000000000000000000;;		Client             kubectl.RESTClient
0000000000000000000000000000000000000000;;		UnstructuredClient kubectl.RESTClient
0000000000000000000000000000000000000000;;		Describer          printers.Describer
0000000000000000000000000000000000000000;;		Printer            printers.ResourcePrinter
0000000000000000000000000000000000000000;;		Validator          validation.Schema
0000000000000000000000000000000000000000;;		Namespace          string
0000000000000000000000000000000000000000;;		ClientConfig       *restclient.Config
0000000000000000000000000000000000000000;;		Err                error
0000000000000000000000000000000000000000;;		Command            string
0000000000000000000000000000000000000000;;		TmpDir             string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClientForMappingFunc             func(mapping *meta.RESTMapping) (resource.RESTClient, error)
0000000000000000000000000000000000000000;;		UnstructuredClientForMappingFunc func(mapping *meta.RESTMapping) (resource.RESTClient, error)
0000000000000000000000000000000000000000;;		OpenAPISchemaFunc                func() (*openapi.Resources, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeFactory struct {
0000000000000000000000000000000000000000;;		tf    *TestFactory
0000000000000000000000000000000000000000;;		Codec runtime.Codec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTestFactory() (cmdutil.Factory, *TestFactory, runtime.Codec, runtime.NegotiatedSerializer) {
0000000000000000000000000000000000000000;;		scheme, mapper, codec := newExternalScheme()
0000000000000000000000000000000000000000;;		t := &TestFactory{
0000000000000000000000000000000000000000;;			Validator: validation.NullSchema{},
0000000000000000000000000000000000000000;;			Mapper:    mapper,
0000000000000000000000000000000000000000;;			Typer:     scheme,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		negotiatedSerializer := serializer.NegotiatedSerializerWrapper(runtime.SerializerInfo{Serializer: codec})
0000000000000000000000000000000000000000;;		return &FakeFactory{
0000000000000000000000000000000000000000;;			tf:    t,
0000000000000000000000000000000000000000;;			Codec: codec,
0000000000000000000000000000000000000000;;		}, t, codec, negotiatedSerializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) DiscoveryClient() (discovery.CachedDiscoveryInterface, error) {
0000000000000000000000000000000000000000;;		discoveryClient, err := discovery.NewDiscoveryClientForConfig(f.tf.ClientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &fakeCachedDiscoveryClient{DiscoveryInterface: discoveryClient}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) FlagSet() *pflag.FlagSet {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Object() (meta.RESTMapper, runtime.ObjectTyper) {
0000000000000000000000000000000000000000;;		return api.Registry.RESTMapper(), f.tf.Typer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) UnstructuredObject() (meta.RESTMapper, runtime.ObjectTyper, error) {
0000000000000000000000000000000000000000;;		groupResources := testDynamicResources()
0000000000000000000000000000000000000000;;		mapper := discovery.NewRESTMapper(groupResources, meta.InterfacesForUnstructured)
0000000000000000000000000000000000000000;;		typer := discovery.NewUnstructuredObjectTyper(groupResources)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeDs := &fakeCachedDiscoveryClient{}
0000000000000000000000000000000000000000;;		expander, err := cmdutil.NewShortcutExpander(mapper, fakeDs)
0000000000000000000000000000000000000000;;		return expander, typer, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) CategoryExpander() resource.CategoryExpander {
0000000000000000000000000000000000000000;;		return resource.LegacyCategoryExpander
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Decoder(bool) runtime.Decoder {
0000000000000000000000000000000000000000;;		return f.Codec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) JSONEncoder() runtime.Encoder {
0000000000000000000000000000000000000000;;		return f.Codec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) RESTClient() (*restclient.RESTClient, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) ClientSet() (internalclientset.Interface, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) ClientConfig() (*restclient.Config, error) {
0000000000000000000000000000000000000000;;		return f.tf.ClientConfig, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) BareClientConfig() (*restclient.Config, error) {
0000000000000000000000000000000000000000;;		return f.tf.ClientConfig, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) ClientForMapping(mapping *meta.RESTMapping) (resource.RESTClient, error) {
0000000000000000000000000000000000000000;;		if f.tf.ClientForMappingFunc != nil {
0000000000000000000000000000000000000000;;			return f.tf.ClientForMappingFunc(mapping)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.tf.Client, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) FederationClientSetForVersion(version *schema.GroupVersion) (fedclientset.Interface, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f *FakeFactory) FederationClientForVersion(version *schema.GroupVersion) (*restclient.RESTClient, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f *FakeFactory) ClientSetForVersion(requiredVersion *schema.GroupVersion) (internalclientset.Interface, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f *FakeFactory) ClientConfigForVersion(requiredVersion *schema.GroupVersion) (*restclient.Config, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) UnstructuredClientForMapping(mapping *meta.RESTMapping) (resource.RESTClient, error) {
0000000000000000000000000000000000000000;;		if f.tf.UnstructuredClientForMappingFunc != nil {
0000000000000000000000000000000000000000;;			return f.tf.UnstructuredClientForMappingFunc(mapping)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.tf.UnstructuredClient, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Describer(*meta.RESTMapping) (printers.Describer, error) {
0000000000000000000000000000000000000000;;		return f.tf.Describer, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) PrinterForCommand(cmd *cobra.Command, isLocal bool, outputOpts *printers.OutputOptions, options printers.PrintOptions) (printers.ResourcePrinter, error) {
0000000000000000000000000000000000000000;;		return f.tf.Printer, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Printer(mapping *meta.RESTMapping, options printers.PrintOptions) (printers.ResourcePrinter, error) {
0000000000000000000000000000000000000000;;		return f.tf.Printer, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Scaler(*meta.RESTMapping) (kubectl.Scaler, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Reaper(*meta.RESTMapping) (kubectl.Reaper, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) HistoryViewer(*meta.RESTMapping) (kubectl.HistoryViewer, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Rollbacker(*meta.RESTMapping) (kubectl.Rollbacker, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) StatusViewer(*meta.RESTMapping) (kubectl.StatusViewer, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) MapBasedSelectorForObject(runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) PortsForObject(runtime.Object) ([]string, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) ProtocolsForObject(runtime.Object) (map[string]string, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) LabelsForObject(runtime.Object) (map[string]string, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) LogsForObject(object, options runtime.Object, timeout time.Duration) (*restclient.Request, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Pauser(info *resource.Info) ([]byte, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Resumer(info *resource.Info) ([]byte, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) ResolveImage(name string) (string, error) {
0000000000000000000000000000000000000000;;		return name, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Validator(validate bool, cacheDir string) (validation.Schema, error) {
0000000000000000000000000000000000000000;;		return f.tf.Validator, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) SwaggerSchema(schema.GroupVersionKind) (*swagger.ApiDeclaration, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) OpenAPISchema(cacheDir string) (*openapi.Resources, error) {
0000000000000000000000000000000000000000;;		return &openapi.Resources{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) DefaultNamespace() (string, bool, error) {
0000000000000000000000000000000000000000;;		return f.tf.Namespace, false, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Generators(cmdName string) map[string]kubectl.Generator {
0000000000000000000000000000000000000000;;		var generator map[string]kubectl.Generator
0000000000000000000000000000000000000000;;		switch cmdName {
0000000000000000000000000000000000000000;;		case "run":
0000000000000000000000000000000000000000;;			generator = map[string]kubectl.Generator{
0000000000000000000000000000000000000000;;				cmdutil.DeploymentV1Beta1GeneratorName: kubectl.DeploymentV1Beta1{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return generator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) CanBeExposed(schema.GroupKind) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) CanBeAutoscaled(schema.GroupKind) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) AttachablePodForObject(ob runtime.Object, timeout time.Duration) (*api.Pod, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) UpdatePodSpecForObject(obj runtime.Object, fn func(*api.PodSpec) error) (bool, error) {
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) EditorEnvs() []string {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) PrintObjectSpecificMessage(obj runtime.Object, out io.Writer) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) Command(*cobra.Command, bool) string {
0000000000000000000000000000000000000000;;		return f.tf.Command
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) BindFlags(flags *pflag.FlagSet) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) BindExternalFlags(flags *pflag.FlagSet) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) PrintObject(cmd *cobra.Command, isLocal bool, mapper meta.RESTMapper, obj runtime.Object, out io.Writer) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) PrinterForMapping(cmd *cobra.Command, isLocal bool, outputOpts *printers.OutputOptions, mapping *meta.RESTMapping, withNamespace bool) (printers.ResourcePrinter, error) {
0000000000000000000000000000000000000000;;		return f.tf.Printer, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) NewBuilder(allowRemoteCalls bool) *resource.Builder {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) NewUnstructuredBuilder(allowRemoteCalls bool) (*resource.Builder, error) {
0000000000000000000000000000000000000000;;		if !allowRemoteCalls {
0000000000000000000000000000000000000000;;			return f.NewBuilder(allowRemoteCalls), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapper, typer, err := f.UnstructuredObject()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resource.NewBuilder(mapper, f.CategoryExpander(), typer, resource.ClientMapperFunc(f.UnstructuredClientForMapping), unstructured.UnstructuredJSONScheme), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) DefaultResourceFilterOptions(cmd *cobra.Command, withNamespace bool) *printers.PrintOptions {
0000000000000000000000000000000000000000;;		return &printers.PrintOptions{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) DefaultResourceFilterFunc() kubectl.Filters {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) SuggestedPodTemplateResources() []schema.GroupResource {
0000000000000000000000000000000000000000;;		return []schema.GroupResource{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) PluginLoader() plugins.PluginLoader {
0000000000000000000000000000000000000000;;		return &plugins.DummyPluginLoader{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeFactory) PluginRunner() plugins.PluginRunner {
0000000000000000000000000000000000000000;;		return &plugins.ExecPluginRunner{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeMixedFactory struct {
0000000000000000000000000000000000000000;;		cmdutil.Factory
0000000000000000000000000000000000000000;;		tf        *TestFactory
0000000000000000000000000000000000000000;;		apiClient resource.RESTClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeMixedFactory) Object() (meta.RESTMapper, runtime.ObjectTyper) {
0000000000000000000000000000000000000000;;		var multiRESTMapper meta.MultiRESTMapper
0000000000000000000000000000000000000000;;		multiRESTMapper = append(multiRESTMapper, f.tf.Mapper)
0000000000000000000000000000000000000000;;		multiRESTMapper = append(multiRESTMapper, testapi.Default.RESTMapper())
0000000000000000000000000000000000000000;;		priorityRESTMapper := meta.PriorityRESTMapper{
0000000000000000000000000000000000000000;;			Delegate: multiRESTMapper,
0000000000000000000000000000000000000000;;			ResourcePriority: []schema.GroupVersionResource{
0000000000000000000000000000000000000000;;				{Group: meta.AnyGroup, Version: "v1", Resource: meta.AnyResource},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			KindPriority: []schema.GroupVersionKind{
0000000000000000000000000000000000000000;;				{Group: meta.AnyGroup, Version: "v1", Kind: meta.AnyKind},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return priorityRESTMapper, runtime.MultiObjectTyper{f.tf.Typer, api.Scheme}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeMixedFactory) ClientForMapping(m *meta.RESTMapping) (resource.RESTClient, error) {
0000000000000000000000000000000000000000;;		if m.ObjectConvertor == api.Scheme {
0000000000000000000000000000000000000000;;			return f.apiClient, f.tf.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f.tf.ClientForMappingFunc != nil {
0000000000000000000000000000000000000000;;			return f.tf.ClientForMappingFunc(m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.tf.Client, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMixedFactory(apiClient resource.RESTClient) (cmdutil.Factory, *TestFactory, runtime.Codec) {
0000000000000000000000000000000000000000;;		f, t, c, _ := NewAPIFactory()
0000000000000000000000000000000000000000;;		return &fakeMixedFactory{
0000000000000000000000000000000000000000;;			Factory:   f,
0000000000000000000000000000000000000000;;			tf:        t,
0000000000000000000000000000000000000000;;			apiClient: apiClient,
0000000000000000000000000000000000000000;;		}, t, c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeAPIFactory struct {
0000000000000000000000000000000000000000;;		cmdutil.Factory
0000000000000000000000000000000000000000;;		tf *TestFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) Object() (meta.RESTMapper, runtime.ObjectTyper) {
0000000000000000000000000000000000000000;;		return testapi.Default.RESTMapper(), api.Scheme
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) UnstructuredObject() (meta.RESTMapper, runtime.ObjectTyper, error) {
0000000000000000000000000000000000000000;;		groupResources := testDynamicResources()
0000000000000000000000000000000000000000;;		mapper := discovery.NewRESTMapper(groupResources, meta.InterfacesForUnstructured)
0000000000000000000000000000000000000000;;		typer := discovery.NewUnstructuredObjectTyper(groupResources)
0000000000000000000000000000000000000000;;		fakeDs := &fakeCachedDiscoveryClient{}
0000000000000000000000000000000000000000;;		expander, err := cmdutil.NewShortcutExpander(mapper, fakeDs)
0000000000000000000000000000000000000000;;		return expander, typer, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) Decoder(bool) runtime.Decoder {
0000000000000000000000000000000000000000;;		return testapi.Default.Codec()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) JSONEncoder() runtime.Encoder {
0000000000000000000000000000000000000000;;		return testapi.Default.Codec()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) ClientSet() (internalclientset.Interface, error) {
0000000000000000000000000000000000000000;;		// Swap the HTTP client out of the REST client with the fake
0000000000000000000000000000000000000000;;		// version.
0000000000000000000000000000000000000000;;		fakeClient := f.tf.Client.(*fake.RESTClient)
0000000000000000000000000000000000000000;;		clientset := internalclientset.NewForConfigOrDie(f.tf.ClientConfig)
0000000000000000000000000000000000000000;;		clientset.CoreClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.AuthenticationClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.AuthorizationClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.AutoscalingClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.BatchClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.CertificatesClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.ExtensionsClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.RbacClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.StorageClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.AppsClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.PolicyClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset.DiscoveryClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;		return clientset, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) RESTClient() (*restclient.RESTClient, error) {
0000000000000000000000000000000000000000;;		// Swap out the HTTP client out of the client with the fake's version.
0000000000000000000000000000000000000000;;		fakeClient := f.tf.Client.(*fake.RESTClient)
0000000000000000000000000000000000000000;;		restClient, err := restclient.RESTClientFor(f.tf.ClientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		restClient.Client = fakeClient.Client
0000000000000000000000000000000000000000;;		return restClient, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) DiscoveryClient() (discovery.CachedDiscoveryInterface, error) {
0000000000000000000000000000000000000000;;		fakeClient := f.tf.Client.(*fake.RESTClient)
0000000000000000000000000000000000000000;;		discoveryClient := discovery.NewDiscoveryClientForConfigOrDie(f.tf.ClientConfig)
0000000000000000000000000000000000000000;;		discoveryClient.RESTClient().(*restclient.RESTClient).Client = fakeClient.Client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cacheDir := filepath.Join(f.tf.TmpDir, ".kube", "cache", "discovery")
0000000000000000000000000000000000000000;;		return cmdutil.NewCachedDiscoveryClient(discoveryClient, cacheDir, time.Duration(10*time.Minute)), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) ClientSetForVersion(requiredVersion *schema.GroupVersion) (internalclientset.Interface, error) {
0000000000000000000000000000000000000000;;		return f.ClientSet()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) ClientConfig() (*restclient.Config, error) {
0000000000000000000000000000000000000000;;		return f.tf.ClientConfig, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) ClientForMapping(m *meta.RESTMapping) (resource.RESTClient, error) {
0000000000000000000000000000000000000000;;		if f.tf.ClientForMappingFunc != nil {
0000000000000000000000000000000000000000;;			return f.tf.ClientForMappingFunc(m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.tf.Client, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) UnstructuredClientForMapping(m *meta.RESTMapping) (resource.RESTClient, error) {
0000000000000000000000000000000000000000;;		if f.tf.UnstructuredClientForMappingFunc != nil {
0000000000000000000000000000000000000000;;			return f.tf.UnstructuredClientForMappingFunc(m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.tf.UnstructuredClient, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) PrinterForCommand(cmd *cobra.Command, isLocal bool, outputOpts *printers.OutputOptions, options printers.PrintOptions) (printers.ResourcePrinter, error) {
0000000000000000000000000000000000000000;;		return f.tf.Printer, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) Describer(*meta.RESTMapping) (printers.Describer, error) {
0000000000000000000000000000000000000000;;		return f.tf.Describer, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) Printer(mapping *meta.RESTMapping, options printers.PrintOptions) (printers.ResourcePrinter, error) {
0000000000000000000000000000000000000000;;		return f.tf.Printer, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) LogsForObject(object, options runtime.Object, timeout time.Duration) (*restclient.Request, error) {
0000000000000000000000000000000000000000;;		c, err := f.ClientSet()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch t := object.(type) {
0000000000000000000000000000000000000000;;		case *api.Pod:
0000000000000000000000000000000000000000;;			opts, ok := options.(*api.PodLogOptions)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil, errors.New("provided options object is not a PodLogOptions")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return c.Core().Pods(f.tf.Namespace).GetLogs(t.Name, opts), nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			fqKinds, _, err := api.Scheme.ObjectKinds(object)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("cannot get the logs from %v", fqKinds[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) AttachablePodForObject(object runtime.Object, timeout time.Duration) (*api.Pod, error) {
0000000000000000000000000000000000000000;;		switch t := object.(type) {
0000000000000000000000000000000000000000;;		case *api.Pod:
0000000000000000000000000000000000000000;;			return t, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			gvks, _, err := api.Scheme.ObjectKinds(object)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("cannot attach to %v: not implemented", gvks[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) Validator(validate bool, cacheDir string) (validation.Schema, error) {
0000000000000000000000000000000000000000;;		return f.tf.Validator, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) DefaultNamespace() (string, bool, error) {
0000000000000000000000000000000000000000;;		return f.tf.Namespace, false, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) Command(*cobra.Command, bool) string {
0000000000000000000000000000000000000000;;		return f.tf.Command
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) Generators(cmdName string) map[string]kubectl.Generator {
0000000000000000000000000000000000000000;;		return cmdutil.DefaultGenerators(cmdName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) PrintObject(cmd *cobra.Command, isLocal bool, mapper meta.RESTMapper, obj runtime.Object, out io.Writer) error {
0000000000000000000000000000000000000000;;		gvks, _, err := api.Scheme.ObjectKinds(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapping, err := mapper.RESTMapping(gvks[0].GroupKind())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		printer, err := f.PrinterForMapping(cmd, isLocal, nil, mapping, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return printer.PrintObj(obj, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) PrinterForMapping(cmd *cobra.Command, isLocal bool, outputOpts *printers.OutputOptions, mapping *meta.RESTMapping, withNamespace bool) (printers.ResourcePrinter, error) {
0000000000000000000000000000000000000000;;		return f.tf.Printer, f.tf.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) NewBuilder(allowRemoteCalls bool) *resource.Builder {
0000000000000000000000000000000000000000;;		mapper, typer := f.Object()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resource.NewBuilder(mapper, f.CategoryExpander(), typer, resource.ClientMapperFunc(f.ClientForMapping), f.Decoder(true))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) NewUnstructuredBuilder(allowRemoteCalls bool) (*resource.Builder, error) {
0000000000000000000000000000000000000000;;		if !allowRemoteCalls {
0000000000000000000000000000000000000000;;			return f.NewBuilder(allowRemoteCalls), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapper, typer, err := f.UnstructuredObject()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resource.NewBuilder(mapper, f.CategoryExpander(), typer, resource.ClientMapperFunc(f.UnstructuredClientForMapping), unstructured.UnstructuredJSONScheme), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) SuggestedPodTemplateResources() []schema.GroupResource {
0000000000000000000000000000000000000000;;		return []schema.GroupResource{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) SwaggerSchema(schema.GroupVersionKind) (*swagger.ApiDeclaration, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeAPIFactory) OpenAPISchema(cacheDir string) (*openapi.Resources, error) {
0000000000000000000000000000000000000000;;		if f.tf.OpenAPISchemaFunc != nil {
0000000000000000000000000000000000000000;;			return f.tf.OpenAPISchemaFunc()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &openapi.Resources{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAPIFactory() (cmdutil.Factory, *TestFactory, runtime.Codec, runtime.NegotiatedSerializer) {
0000000000000000000000000000000000000000;;		t := &TestFactory{
0000000000000000000000000000000000000000;;			Validator: validation.NullSchema{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rf := cmdutil.NewFactory(nil)
0000000000000000000000000000000000000000;;		return &fakeAPIFactory{
0000000000000000000000000000000000000000;;			Factory: rf,
0000000000000000000000000000000000000000;;			tf:      t,
0000000000000000000000000000000000000000;;		}, t, testapi.Default.Codec(), testapi.Default.NegotiatedSerializer()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testDynamicResources() []*discovery.APIGroupResources {
0000000000000000000000000000000000000000;;		return []*discovery.APIGroupResources{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group: metav1.APIGroup{
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{Version: "v1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{Version: "v1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VersionedResources: map[string][]metav1.APIResource{
0000000000000000000000000000000000000000;;					"v1": {
0000000000000000000000000000000000000000;;						{Name: "pods", Namespaced: true, Kind: "Pod"},
0000000000000000000000000000000000000000;;						{Name: "services", Namespaced: true, Kind: "Service"},
0000000000000000000000000000000000000000;;						{Name: "replicationcontrollers", Namespaced: true, Kind: "ReplicationController"},
0000000000000000000000000000000000000000;;						{Name: "componentstatuses", Namespaced: false, Kind: "ComponentStatus"},
0000000000000000000000000000000000000000;;						{Name: "nodes", Namespaced: false, Kind: "Node"},
0000000000000000000000000000000000000000;;						{Name: "secrets", Namespaced: true, Kind: "Secret"},
0000000000000000000000000000000000000000;;						{Name: "configmaps", Namespaced: true, Kind: "ConfigMap"},
0000000000000000000000000000000000000000;;						{Name: "type", Namespaced: false, Kind: "Type"},
0000000000000000000000000000000000000000;;						{Name: "namespacedtype", Namespaced: true, Kind: "NamespacedType"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group: metav1.APIGroup{
0000000000000000000000000000000000000000;;					Name: "extensions",
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{Version: "v1beta1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{Version: "v1beta1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VersionedResources: map[string][]metav1.APIResource{
0000000000000000000000000000000000000000;;					"v1beta1": {
0000000000000000000000000000000000000000;;						{Name: "deployments", Namespaced: true, Kind: "Deployment"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group: metav1.APIGroup{
0000000000000000000000000000000000000000;;					Name: "storage.k8s.io",
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{Version: "v1beta1"},
0000000000000000000000000000000000000000;;						{Version: "v0"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{Version: "v1beta1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VersionedResources: map[string][]metav1.APIResource{
0000000000000000000000000000000000000000;;					"v1beta1": {
0000000000000000000000000000000000000000;;						{Name: "storageclasses", Namespaced: false, Kind: "StorageClass"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					// bogus version of a known group/version/resource to make sure kubectl falls back to generic object mode
0000000000000000000000000000000000000000;;					"v0": {
0000000000000000000000000000000000000000;;						{Name: "storageclasses", Namespaced: false, Kind: "StorageClass"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group: metav1.APIGroup{
0000000000000000000000000000000000000000;;					Name: "company.com",
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{Version: "v1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{Version: "v1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VersionedResources: map[string][]metav1.APIResource{
0000000000000000000000000000000000000000;;					"v1": {
0000000000000000000000000000000000000000;;						{Name: "bars", Namespaced: true, Kind: "Bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group: metav1.APIGroup{
0000000000000000000000000000000000000000;;					Name: "unit-test.test.com",
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{GroupVersion: "unit-test.test.com/v1", Version: "v1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						GroupVersion: "unit-test.test.com/v1",
0000000000000000000000000000000000000000;;						Version:      "v1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VersionedResources: map[string][]metav1.APIResource{
0000000000000000000000000000000000000000;;					"v1": {
0000000000000000000000000000000000000000;;						{Name: "widgets", Namespaced: true, Kind: "Widget"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
