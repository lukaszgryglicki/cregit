0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2b934ba029573c39bdac328d720ca9bd8c22aa1e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/metrics/pkg/apis/metrics/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		apiPrefix  = "api"
0000000000000000000000000000000000000000;;		apiVersion = "v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopNodeAllMetrics(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		metrics, nodes := testNodeMetricsData()
0000000000000000000000000000000000000000;;		expectedMetricsPath := fmt.Sprintf("%s/%s/nodes", baseMetricsAddress, metricsApiVersion)
0000000000000000000000000000000000000000;;		expectedNodePath := fmt.Sprintf("/%s/%s/nodes", apiPrefix, apiVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == expectedMetricsPath && m == "GET":
0000000000000000000000000000000000000000;;					body, err := marshallBody(metrics)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: body}, nil
0000000000000000000000000000000000000000;;				case p == expectedNodePath && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, nodes)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\nGot URL: %#v\nExpected path: %#v", req, req.URL, expectedMetricsPath)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.ClientConfig = defaultClientConfig()
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdTopNode(f, buf)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check the presence of node names in the output.
0000000000000000000000000000000000000000;;		result := buf.String()
0000000000000000000000000000000000000000;;		for _, m := range metrics.Items {
0000000000000000000000000000000000000000;;			if !strings.Contains(result, m.Name) {
0000000000000000000000000000000000000000;;				t.Errorf("missing metrics for %s: \n%s", m.Name, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopNodeWithNameMetrics(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		metrics, nodes := testNodeMetricsData()
0000000000000000000000000000000000000000;;		expectedMetrics := metrics.Items[0]
0000000000000000000000000000000000000000;;		expectedNode := nodes.Items[0]
0000000000000000000000000000000000000000;;		nonExpectedMetrics := v1alpha1.NodeMetricsList{
0000000000000000000000000000000000000000;;			ListMeta: metrics.ListMeta,
0000000000000000000000000000000000000000;;			Items:    metrics.Items[1:],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedPath := fmt.Sprintf("%s/%s/nodes/%s", baseMetricsAddress, metricsApiVersion, expectedMetrics.Name)
0000000000000000000000000000000000000000;;		expectedNodePath := fmt.Sprintf("/%s/%s/nodes/%s", apiPrefix, apiVersion, expectedMetrics.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == expectedPath && m == "GET":
0000000000000000000000000000000000000000;;					body, err := marshallBody(expectedMetrics)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: body}, nil
0000000000000000000000000000000000000000;;				case p == expectedNodePath && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &expectedNode)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\nGot URL: %#v\nExpected path: %#v", req, req.URL, expectedPath)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.ClientConfig = defaultClientConfig()
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdTopNode(f, buf)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{expectedMetrics.Name})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check the presence of node names in the output.
0000000000000000000000000000000000000000;;		result := buf.String()
0000000000000000000000000000000000000000;;		if !strings.Contains(result, expectedMetrics.Name) {
0000000000000000000000000000000000000000;;			t.Errorf("missing metrics for %s: \n%s", expectedMetrics.Name, result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, m := range nonExpectedMetrics.Items {
0000000000000000000000000000000000000000;;			if strings.Contains(result, m.Name) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected metrics for %s: \n%s", m.Name, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopNodeWithLabelSelectorMetrics(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		metrics, nodes := testNodeMetricsData()
0000000000000000000000000000000000000000;;		expectedMetrics := v1alpha1.NodeMetricsList{
0000000000000000000000000000000000000000;;			ListMeta: metrics.ListMeta,
0000000000000000000000000000000000000000;;			Items:    metrics.Items[0:1],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedNodes := api.NodeList{
0000000000000000000000000000000000000000;;			ListMeta: nodes.ListMeta,
0000000000000000000000000000000000000000;;			Items:    nodes.Items[0:1],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nonExpectedMetrics := v1alpha1.NodeMetricsList{
0000000000000000000000000000000000000000;;			ListMeta: metrics.ListMeta,
0000000000000000000000000000000000000000;;			Items:    metrics.Items[1:],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		label := "key=value"
0000000000000000000000000000000000000000;;		expectedPath := fmt.Sprintf("%s/%s/nodes", baseMetricsAddress, metricsApiVersion)
0000000000000000000000000000000000000000;;		expectedQuery := fmt.Sprintf("labelSelector=%s", url.QueryEscape(label))
0000000000000000000000000000000000000000;;		expectedNodePath := fmt.Sprintf("/%s/%s/nodes", apiPrefix, apiVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m, q := req.URL.Path, req.Method, req.URL.RawQuery; {
0000000000000000000000000000000000000000;;				case p == expectedPath && m == "GET" && q == expectedQuery:
0000000000000000000000000000000000000000;;					body, err := marshallBody(expectedMetrics)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: body}, nil
0000000000000000000000000000000000000000;;				case p == expectedNodePath && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &expectedNodes)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\nGot URL: %#v\nExpected path: %#v", req, req.URL, expectedPath)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		tf.ClientConfig = defaultClientConfig()
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdTopNode(f, buf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("selector", label)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check the presence of node names in the output.
0000000000000000000000000000000000000000;;		result := buf.String()
0000000000000000000000000000000000000000;;		for _, m := range expectedMetrics.Items {
0000000000000000000000000000000000000000;;			if !strings.Contains(result, m.Name) {
0000000000000000000000000000000000000000;;				t.Errorf("missing metrics for %s: \n%s", m.Name, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, m := range nonExpectedMetrics.Items {
0000000000000000000000000000000000000000;;			if strings.Contains(result, m.Name) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected metrics for %s: \n%s", m.Name, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
