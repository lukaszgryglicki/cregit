0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bc58f90b7471291fb9538090872f36ef3ae627ac;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RenameContextOptions contains the options for running the rename-context cli command.
0000000000000000000000000000000000000000;;	type RenameContextOptions struct {
0000000000000000000000000000000000000000;;		configAccess clientcmd.ConfigAccess
0000000000000000000000000000000000000000;;		contextName  string
0000000000000000000000000000000000000000;;		newName      string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		renameContextUse = "rename-context CONTEXT_NAME NEW_NAME"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		renameContextShort = "Renames a context from the kubeconfig file."
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		renameContextLong = templates.LongDesc(`
0000000000000000000000000000000000000000;;			Renames a context from the kubeconfig file .
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CONTEXT_NAME is the context name that you wish change.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			NEW_NAME is the new name you wish to set.
0000000000000000000000000000000000000000;;			
0000000000000000000000000000000000000000;;			Note: In case the context being renamed is the 'current-context', this field will also be updated.`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		renameContextExample = templates.Examples(`
0000000000000000000000000000000000000000;;			# Rename the context 'old-name' to 'new-name' in your kubeconfig file
0000000000000000000000000000000000000000;;			kubectl config rename-context old-name new-name`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdConfigRenameContext creates a command object for the "rename-context" action
0000000000000000000000000000000000000000;;	func NewCmdConfigRenameContext(out io.Writer, configAccess clientcmd.ConfigAccess) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &RenameContextOptions{configAccess: configAccess}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     renameContextUse,
0000000000000000000000000000000000000000;;			Short:   renameContextShort,
0000000000000000000000000000000000000000;;			Long:    renameContextLong,
0000000000000000000000000000000000000000;;			Example: renameContextExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				if err := options.Complete(cmd, args, out); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := options.Validate(); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.UsageErrorf(cmd, err.Error())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := options.RunRenameContext(out); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Complete assigns RenameContextOptions from the args.
0000000000000000000000000000000000000000;;	func (o *RenameContextOptions) Complete(cmd *cobra.Command, args []string, out io.Writer) error {
0000000000000000000000000000000000000000;;		if len(args) != 2 {
0000000000000000000000000000000000000000;;			cmd.Help()
0000000000000000000000000000000000000000;;			return fmt.Errorf("Unexpected args: %v", args)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.contextName = args[0]
0000000000000000000000000000000000000000;;		o.newName = args[1]
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o RenameContextOptions) Validate() error {
0000000000000000000000000000000000000000;;		if len(o.newName) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("You must specify a new non-empty context name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o RenameContextOptions) RunRenameContext(out io.Writer) error {
0000000000000000000000000000000000000000;;		config, err := o.configAccess.GetStartingConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		configFile := o.configAccess.GetDefaultFilename()
0000000000000000000000000000000000000000;;		if o.configAccess.IsExplicitFile() {
0000000000000000000000000000000000000000;;			configFile = o.configAccess.GetExplicitFile()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		context, exists := config.Contexts[o.contextName]
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot rename the context %q, it's not in %s", o.contextName, configFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, newExists := config.Contexts[o.newName]
0000000000000000000000000000000000000000;;		if newExists {
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot rename the context %q, the context %q already exists in %s", o.contextName, o.newName, configFile)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config.Contexts[o.newName] = context
0000000000000000000000000000000000000000;;		delete(config.Contexts, o.contextName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.CurrentContext == o.contextName {
0000000000000000000000000000000000000000;;			config.CurrentContext = o.newName
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := clientcmd.ModifyConfig(o.configAccess, *config, true); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Fprintf(out, "Context %q was renamed to %q.\n", o.contextName, o.newName)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
