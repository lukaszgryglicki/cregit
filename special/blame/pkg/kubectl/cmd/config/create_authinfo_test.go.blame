0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2f34db3d0f9912022feb36f6b5bb34b4d71b6317;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringFlagFor(s string) flag.StringFlag {
0000000000000000000000000000000000000000;;		var f flag.StringFlag
0000000000000000000000000000000000000000;;		f.Set(s)
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateAuthInfoOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			flags           []string
0000000000000000000000000000000000000000;;			wantParseErr    bool
0000000000000000000000000000000000000000;;			wantCompleteErr bool
0000000000000000000000000000000000000000;;			wantValidateErr bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			wantOptions *createAuthInfoOptions
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;					"me",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantOptions: &createAuthInfoOptions{
0000000000000000000000000000000000000000;;					name: "me",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;					"me",
0000000000000000000000000000000000000000;;					"--token=foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantOptions: &createAuthInfoOptions{
0000000000000000000000000000000000000000;;					name:  "me",
0000000000000000000000000000000000000000;;					token: stringFlagFor("foo"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;					"me",
0000000000000000000000000000000000000000;;					"--username=jane",
0000000000000000000000000000000000000000;;					"--password=bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantOptions: &createAuthInfoOptions{
0000000000000000000000000000000000000000;;					name:     "me",
0000000000000000000000000000000000000000;;					username: stringFlagFor("jane"),
0000000000000000000000000000000000000000;;					password: stringFlagFor("bar"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Cannot provide both token and basic auth.
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;					"me",
0000000000000000000000000000000000000000;;					"--token=foo",
0000000000000000000000000000000000000000;;					"--username=jane",
0000000000000000000000000000000000000000;;					"--password=bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantValidateErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;					"--auth-provider=oidc",
0000000000000000000000000000000000000000;;					"--auth-provider-arg=client-id=foo",
0000000000000000000000000000000000000000;;					"--auth-provider-arg=client-secret=bar",
0000000000000000000000000000000000000000;;					"me",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantOptions: &createAuthInfoOptions{
0000000000000000000000000000000000000000;;					name:         "me",
0000000000000000000000000000000000000000;;					authProvider: stringFlagFor("oidc"),
0000000000000000000000000000000000000000;;					authProviderArgs: map[string]string{
0000000000000000000000000000000000000000;;						"client-id":     "foo",
0000000000000000000000000000000000000000;;						"client-secret": "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					authProviderArgsToRemove: []string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;					"--auth-provider=oidc",
0000000000000000000000000000000000000000;;					"--auth-provider-arg=client-id-",
0000000000000000000000000000000000000000;;					"--auth-provider-arg=client-secret-",
0000000000000000000000000000000000000000;;					"me",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantOptions: &createAuthInfoOptions{
0000000000000000000000000000000000000000;;					name:             "me",
0000000000000000000000000000000000000000;;					authProvider:     stringFlagFor("oidc"),
0000000000000000000000000000000000000000;;					authProviderArgs: map[string]string{},
0000000000000000000000000000000000000000;;					authProviderArgsToRemove: []string{
0000000000000000000000000000000000000000;;						"client-id",
0000000000000000000000000000000000000000;;						"client-secret",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;					"--auth-provider-arg=client-id-", // auth provider name not required
0000000000000000000000000000000000000000;;					"--auth-provider-arg=client-secret-",
0000000000000000000000000000000000000000;;					"me",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantOptions: &createAuthInfoOptions{
0000000000000000000000000000000000000000;;					name:             "me",
0000000000000000000000000000000000000000;;					authProviderArgs: map[string]string{},
0000000000000000000000000000000000000000;;					authProviderArgsToRemove: []string{
0000000000000000000000000000000000000000;;						"client-id",
0000000000000000000000000000000000000000;;						"client-secret",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;					"--auth-provider=oidc",
0000000000000000000000000000000000000000;;					"--auth-provider-arg=client-id", // values must be of form 'key=value' or 'key-'
0000000000000000000000000000000000000000;;					"me",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantCompleteErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flags: []string{
0000000000000000000000000000000000000000;;				// No name for authinfo provided.
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				wantCompleteErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			buff := new(bytes.Buffer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			opts := new(createAuthInfoOptions)
0000000000000000000000000000000000000000;;			cmd := newCmdConfigSetAuthInfo(buff, opts)
0000000000000000000000000000000000000000;;			if err := cmd.ParseFlags(test.flags); err != nil {
0000000000000000000000000000000000000000;;				if !test.wantParseErr {
0000000000000000000000000000000000000000;;					t.Errorf("case %d: parsing error for flags %q: %v: %s", i, test.flags, err, buff)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.wantParseErr {
0000000000000000000000000000000000000000;;				t.Errorf("case %d: expected parsing error for flags %q: %s", i, test.flags, buff)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := opts.complete(cmd, buff); err != nil {
0000000000000000000000000000000000000000;;				if !test.wantCompleteErr {
0000000000000000000000000000000000000000;;					t.Errorf("case %d: complete() error for flags %q: %s", i, test.flags, buff)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.wantCompleteErr {
0000000000000000000000000000000000000000;;				t.Errorf("case %d: complete() expected errors for flags %q: %s", i, test.flags, buff)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := opts.validate(); err != nil {
0000000000000000000000000000000000000000;;				if !test.wantValidateErr {
0000000000000000000000000000000000000000;;					t.Errorf("case %d: flags %q: validate failed: %v", i, test.flags, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.wantValidateErr {
0000000000000000000000000000000000000000;;				t.Errorf("case %d: flags %q: expected validate to fail", i, test.flags)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(opts, test.wantOptions) {
0000000000000000000000000000000000000000;;				t.Errorf("case %d: flags %q: mis-matched options,\nwanted=%#v\ngot=   %#v", i, test.flags, test.wantOptions, opts)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type createAuthInfoTest struct {
0000000000000000000000000000000000000000;;		description    string
0000000000000000000000000000000000000000;;		config         clientcmdapi.Config
0000000000000000000000000000000000000000;;		args           []string
0000000000000000000000000000000000000000;;		flags          []string
0000000000000000000000000000000000000000;;		expected       string
0000000000000000000000000000000000000000;;		expectedConfig clientcmdapi.Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateAuthInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{}
0000000000000000000000000000000000000000;;		test := createAuthInfoTest{
0000000000000000000000000000000000000000;;			description: "Testing for create aythinfo",
0000000000000000000000000000000000000000;;			config:      conf,
0000000000000000000000000000000000000000;;			args:        []string{"cluster-admin"},
0000000000000000000000000000000000000000;;			flags: []string{
0000000000000000000000000000000000000000;;				"--username=admin",
0000000000000000000000000000000000000000;;				"--password=uXFGweU9l35qcif",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			expected: `User "cluster-admin" set.` + "\n",
0000000000000000000000000000000000000000;;			expectedConfig: clientcmdapi.Config{
0000000000000000000000000000000000000000;;				AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;					"cluster-admin": {Username: "admin", Password: "uXFGweU9l35qcif"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (test createAuthInfoTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile(os.TempDir(), "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.config, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigSetAuthInfo(buf, pathOptions)
0000000000000000000000000000000000000000;;		cmd.SetArgs(test.args)
0000000000000000000000000000000000000000;;		cmd.Flags().Parse(test.flags)
0000000000000000000000000000000000000000;;		if err := cmd.Execute(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error executing command: %v,kubectl config set-credentials  args: %v,flags: %v", err, test.args, test.flags)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config, err := clientcmd.LoadFromFile(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error loading kubeconfig file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(test.expected) != 0 {
0000000000000000000000000000000000000000;;			if buf.String() != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Fail in %q:\n expected %v\n but got %v\n", test.description, test.expected, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if test.expectedConfig.AuthInfos != nil {
0000000000000000000000000000000000000000;;			expectAuthInfo := test.expectedConfig.AuthInfos[test.args[0]]
0000000000000000000000000000000000000000;;			actualAuthInfo := config.AuthInfos[test.args[0]]
0000000000000000000000000000000000000000;;			if expectAuthInfo.Username != actualAuthInfo.Username || expectAuthInfo.Password != actualAuthInfo.Password {
0000000000000000000000000000000000000000;;				t.Errorf("Fail in %q:\n expected AuthInfo%v\n but found %v in kubeconfig\n", test.description, expectAuthInfo, actualAuthInfo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
