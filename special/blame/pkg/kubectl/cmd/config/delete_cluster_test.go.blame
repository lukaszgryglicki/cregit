0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
dc59519e19260ef6c49bdf1cbbfe360567e68165;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type deleteClusterTest struct {
0000000000000000000000000000000000000000;;		config           clientcmdapi.Config
0000000000000000000000000000000000000000;;		clusterToDelete  string
0000000000000000000000000000000000000000;;		expectedClusters []string
0000000000000000000000000000000000000000;;		expectedOut      string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"minikube":  {Server: "https://192.168.0.99"},
0000000000000000000000000000000000000000;;				"otherkube": {Server: "https://192.168.0.100"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := deleteClusterTest{
0000000000000000000000000000000000000000;;			config:           conf,
0000000000000000000000000000000000000000;;			clusterToDelete:  "minikube",
0000000000000000000000000000000000000000;;			expectedClusters: []string{"otherkube"},
0000000000000000000000000000000000000000;;			expectedOut:      "deleted cluster minikube from %s\n",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test deleteClusterTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.config, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigDeleteCluster(buf, pathOptions)
0000000000000000000000000000000000000000;;		cmd.SetArgs([]string{test.clusterToDelete})
0000000000000000000000000000000000000000;;		if err := cmd.Execute(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error executing command: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedOutWithFile := fmt.Sprintf(test.expectedOut, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if expectedOutWithFile != buf.String() {
0000000000000000000000000000000000000000;;			t.Errorf("expected output %s, but got %s", expectedOutWithFile, buf.String())
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Verify cluster was removed from kubeconfig file
0000000000000000000000000000000000000000;;		config, err := clientcmd.LoadFromFile(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error loading kubeconfig file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusters := make([]string, 0, len(config.Clusters))
0000000000000000000000000000000000000000;;		for k := range config.Clusters {
0000000000000000000000000000000000000000;;			clusters = append(clusters, k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(test.expectedClusters, clusters) {
0000000000000000000000000000000000000000;;			t.Errorf("expected clusters %v, but found %v in kubeconfig", test.expectedClusters, clusters)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
