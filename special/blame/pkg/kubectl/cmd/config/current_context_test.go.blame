0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c76f24218018182a55d3d2cb93a5a566a47dc09f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type currentContextTest struct {
0000000000000000000000000000000000000000;;		startingConfig clientcmdapi.Config
0000000000000000000000000000000000000000;;		expectedError  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFederalContextConfig() clientcmdapi.Config {
0000000000000000000000000000000000000000;;		return clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: "federal-context",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCurrentContextWithSetContext(t *testing.T) {
0000000000000000000000000000000000000000;;		test := currentContextTest{
0000000000000000000000000000000000000000;;			startingConfig: newFederalContextConfig(),
0000000000000000000000000000000000000000;;			expectedError:  "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCurrentContextWithUnsetContext(t *testing.T) {
0000000000000000000000000000000000000000;;		test := currentContextTest{
0000000000000000000000000000000000000000;;			startingConfig: *clientcmdapi.NewConfig(),
0000000000000000000000000000000000000000;;			expectedError:  "current-context is not set",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test currentContextTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.startingConfig, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		options := CurrentContextOptions{
0000000000000000000000000000000000000000;;			ConfigAccess: pathOptions,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		err = RunCurrentContext(buf, &options)
0000000000000000000000000000000000000000;;		if len(test.expectedError) != 0 {
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Did not get %v", test.expectedError)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if !strings.Contains(err.Error(), test.expectedError) {
0000000000000000000000000000000000000000;;					t.Errorf("Expected %v, but got %v", test.expectedError, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
