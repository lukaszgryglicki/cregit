0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
737c4e3c5d30ba52180aa18ac8372018684b2a24;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd/api/latest"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ViewOptions struct {
0000000000000000000000000000000000000000;;		ConfigAccess clientcmd.ConfigAccess
0000000000000000000000000000000000000000;;		Merge        flag.Tristate
0000000000000000000000000000000000000000;;		Flatten      bool
0000000000000000000000000000000000000000;;		Minify       bool
0000000000000000000000000000000000000000;;		RawByteData  bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		view_long = templates.LongDesc(`
0000000000000000000000000000000000000000;;			Display merged kubeconfig settings or a specified kubeconfig file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			You can use --output jsonpath={...} to extract specific values using a jsonpath expression.`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		view_example = templates.Examples(`
0000000000000000000000000000000000000000;;			# Show Merged kubeconfig settings.
0000000000000000000000000000000000000000;;			kubectl config view
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Get the password for the e2e user
0000000000000000000000000000000000000000;;			kubectl config view -o jsonpath='{.users[?(@.name == "e2e")].user.password}'`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdConfigView(out, errOut io.Writer, ConfigAccess clientcmd.ConfigAccess) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &ViewOptions{ConfigAccess: ConfigAccess}
0000000000000000000000000000000000000000;;		// Default to yaml
0000000000000000000000000000000000000000;;		defaultOutputFormat := "yaml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "view",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Display merged kubeconfig settings or a specified kubeconfig file"),
0000000000000000000000000000000000000000;;			Long:    view_long,
0000000000000000000000000000000000000000;;			Example: view_example,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				options.Complete()
0000000000000000000000000000000000000000;;				outputFormat := cmdutil.GetFlagString(cmd, "output")
0000000000000000000000000000000000000000;;				if outputFormat == "wide" {
0000000000000000000000000000000000000000;;					fmt.Fprintf(errOut, "--output wide is not available in kubectl config view; reset to default output format (%s)\n\n", defaultOutputFormat)
0000000000000000000000000000000000000000;;					// TODO: once printing is abstracted, this should be handled at flag declaration time
0000000000000000000000000000000000000000;;					cmd.Flags().Set("output", defaultOutputFormat)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if outputFormat == "" {
0000000000000000000000000000000000000000;;					fmt.Fprintf(errOut, "Reset to default output format (%s) as --output is empty\n", defaultOutputFormat)
0000000000000000000000000000000000000000;;					// TODO: once printing is abstracted, this should be handled at flag declaration time
0000000000000000000000000000000000000000;;					cmd.Flags().Set("output", defaultOutputFormat)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				printer, err := cmdutil.PrinterForCommand(cmd, nil, meta.NewDefaultRESTMapper(nil, nil), latest.Scheme, nil, []runtime.Decoder{latest.Codec}, printers.PrintOptions{})
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				printer = printers.NewVersionedPrinter(printer, latest.Scheme, latest.ExternalVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(options.Run(out, printer))
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmdutil.AddPrinterFlags(cmd)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", defaultOutputFormat)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		options.Merge.Default(true)
0000000000000000000000000000000000000000;;		f := cmd.Flags().VarPF(&options.Merge, "merge", "", "merge the full hierarchy of kubeconfig files")
0000000000000000000000000000000000000000;;		f.NoOptDefVal = "true"
0000000000000000000000000000000000000000;;		cmd.Flags().BoolVar(&options.RawByteData, "raw", false, "display raw byte data")
0000000000000000000000000000000000000000;;		cmd.Flags().BoolVar(&options.Flatten, "flatten", false, "flatten the resulting kubeconfig file into self-contained output (useful for creating portable kubeconfig files)")
0000000000000000000000000000000000000000;;		cmd.Flags().BoolVar(&options.Minify, "minify", false, "remove all information not used by current-context from the output")
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ViewOptions) Run(out io.Writer, printer printers.ResourcePrinter) error {
0000000000000000000000000000000000000000;;		config, err := o.loadConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if o.Minify {
0000000000000000000000000000000000000000;;			if err := clientcmdapi.MinifyConfig(config); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if o.Flatten {
0000000000000000000000000000000000000000;;			if err := clientcmdapi.FlattenConfig(config); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if !o.RawByteData {
0000000000000000000000000000000000000000;;			clientcmdapi.ShortenConfig(config)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = printer.PrintObj(config, out)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ViewOptions) Complete() bool {
0000000000000000000000000000000000000000;;		if o.ConfigAccess.IsExplicitFile() {
0000000000000000000000000000000000000000;;			if !o.Merge.Provided() {
0000000000000000000000000000000000000000;;				o.Merge.Set("false")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ViewOptions) loadConfig() (*clientcmdapi.Config, error) {
0000000000000000000000000000000000000000;;		err := o.Validate()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config, err := o.getStartingConfig()
0000000000000000000000000000000000000000;;		return config, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o ViewOptions) Validate() error {
0000000000000000000000000000000000000000;;		if !o.Merge.Value() && !o.ConfigAccess.IsExplicitFile() {
0000000000000000000000000000000000000000;;			return errors.New("if merge==false a precise file must to specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getStartingConfig returns the Config object built from the sources specified by the options, the filename read (only if it was a single file), and an error if something goes wrong
0000000000000000000000000000000000000000;;	func (o *ViewOptions) getStartingConfig() (*clientcmdapi.Config, error) {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case !o.Merge.Value():
0000000000000000000000000000000000000000;;			return clientcmd.LoadFromFile(o.ConfigAccess.GetExplicitFile())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return o.ConfigAccess.GetStartingConfig()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
