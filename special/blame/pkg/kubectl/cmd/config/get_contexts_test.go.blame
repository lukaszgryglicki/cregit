0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
43d413c7eebc638148582a1a52ea4a72cf561270;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type getContextsTest struct {
0000000000000000000000000000000000000000;;		startingConfig clientcmdapi.Config
0000000000000000000000000000000000000000;;		names          []string
0000000000000000000000000000000000000000;;		noHeader       bool
0000000000000000000000000000000000000000;;		nameOnly       bool
0000000000000000000000000000000000000000;;		expectedOut    string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContextsAll(t *testing.T) {
0000000000000000000000000000000000000000;;		tconf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: "shaker-context",
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"shaker-context": {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"}}}
0000000000000000000000000000000000000000;;		test := getContextsTest{
0000000000000000000000000000000000000000;;			startingConfig: tconf,
0000000000000000000000000000000000000000;;			names:          []string{},
0000000000000000000000000000000000000000;;			noHeader:       false,
0000000000000000000000000000000000000000;;			nameOnly:       false,
0000000000000000000000000000000000000000;;			expectedOut: `CURRENT   NAME             CLUSTER       AUTHINFO    NAMESPACE
0000000000000000000000000000000000000000;;	*         shaker-context   big-cluster   blue-user   saw-ns
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContextsAllNoHeader(t *testing.T) {
0000000000000000000000000000000000000000;;		tconf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: "shaker-context",
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"shaker-context": {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"}}}
0000000000000000000000000000000000000000;;		test := getContextsTest{
0000000000000000000000000000000000000000;;			startingConfig: tconf,
0000000000000000000000000000000000000000;;			names:          []string{},
0000000000000000000000000000000000000000;;			noHeader:       true,
0000000000000000000000000000000000000000;;			nameOnly:       false,
0000000000000000000000000000000000000000;;			expectedOut:    "*         shaker-context   big-cluster   blue-user   saw-ns\n",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContextsAllName(t *testing.T) {
0000000000000000000000000000000000000000;;		tconf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"shaker-context": {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"}}}
0000000000000000000000000000000000000000;;		test := getContextsTest{
0000000000000000000000000000000000000000;;			startingConfig: tconf,
0000000000000000000000000000000000000000;;			names:          []string{},
0000000000000000000000000000000000000000;;			noHeader:       false,
0000000000000000000000000000000000000000;;			nameOnly:       true,
0000000000000000000000000000000000000000;;			expectedOut:    "shaker-context\n",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContextsAllNameNoHeader(t *testing.T) {
0000000000000000000000000000000000000000;;		tconf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: "shaker-context",
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"shaker-context": {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"}}}
0000000000000000000000000000000000000000;;		test := getContextsTest{
0000000000000000000000000000000000000000;;			startingConfig: tconf,
0000000000000000000000000000000000000000;;			names:          []string{},
0000000000000000000000000000000000000000;;			noHeader:       true,
0000000000000000000000000000000000000000;;			nameOnly:       true,
0000000000000000000000000000000000000000;;			expectedOut:    "shaker-context\n",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContextsAllNone(t *testing.T) {
0000000000000000000000000000000000000000;;		test := getContextsTest{
0000000000000000000000000000000000000000;;			startingConfig: *clientcmdapi.NewConfig(),
0000000000000000000000000000000000000000;;			names:          []string{},
0000000000000000000000000000000000000000;;			noHeader:       true,
0000000000000000000000000000000000000000;;			nameOnly:       false,
0000000000000000000000000000000000000000;;			expectedOut:    "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContextsSelectOneOfTwo(t *testing.T) {
0000000000000000000000000000000000000000;;		tconf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: "shaker-context",
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"shaker-context": {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"},
0000000000000000000000000000000000000000;;				"not-this":       {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"}}}
0000000000000000000000000000000000000000;;		test := getContextsTest{
0000000000000000000000000000000000000000;;			startingConfig: tconf,
0000000000000000000000000000000000000000;;			names:          []string{"shaker-context"},
0000000000000000000000000000000000000000;;			noHeader:       true,
0000000000000000000000000000000000000000;;			nameOnly:       true,
0000000000000000000000000000000000000000;;			expectedOut:    "shaker-context\n",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test getContextsTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.startingConfig, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		options := GetContextsOptions{
0000000000000000000000000000000000000000;;			configAccess: pathOptions,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigGetContexts(buf, options.configAccess)
0000000000000000000000000000000000000000;;		if test.nameOnly {
0000000000000000000000000000000000000000;;			cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if test.noHeader {
0000000000000000000000000000000000000000;;			cmd.Flags().Set("no-headers", "true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Run(cmd, test.names)
0000000000000000000000000000000000000000;;		if len(test.expectedOut) != 0 {
0000000000000000000000000000000000000000;;			if buf.String() != test.expectedOut {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, but got %v", test.expectedOut, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
