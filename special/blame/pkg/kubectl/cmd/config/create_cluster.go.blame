0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
737c4e3c5d30ba52180aa18ac8372018684b2a24;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type createClusterOptions struct {
0000000000000000000000000000000000000000;;		configAccess          clientcmd.ConfigAccess
0000000000000000000000000000000000000000;;		name                  string
0000000000000000000000000000000000000000;;		server                flag.StringFlag
0000000000000000000000000000000000000000;;		insecureSkipTLSVerify flag.Tristate
0000000000000000000000000000000000000000;;		certificateAuthority  flag.StringFlag
0000000000000000000000000000000000000000;;		embedCAData           flag.Tristate
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		create_cluster_long = templates.LongDesc(`
0000000000000000000000000000000000000000;;			Sets a cluster entry in kubeconfig.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Specifying a name that already exists will merge new fields on top of existing values for those fields.`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		create_cluster_example = templates.Examples(`
0000000000000000000000000000000000000000;;			# Set only the server field on the e2e cluster entry without touching other values.
0000000000000000000000000000000000000000;;			kubectl config set-cluster e2e --server=https://1.2.3.4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Embed certificate authority data for the e2e cluster entry
0000000000000000000000000000000000000000;;			kubectl config set-cluster e2e --certificate-authority=~/.kube/e2e/kubernetes.ca.crt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Disable cert checking for the dev cluster entry
0000000000000000000000000000000000000000;;			kubectl config set-cluster e2e --insecure-skip-tls-verify=true`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdConfigSetCluster(out io.Writer, configAccess clientcmd.ConfigAccess) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &createClusterOptions{configAccess: configAccess}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     fmt.Sprintf("set-cluster NAME [--%v=server] [--%v=path/to/certificate/authority] [--%v=true]", clientcmd.FlagAPIServer, clientcmd.FlagCAFile, clientcmd.FlagInsecure),
0000000000000000000000000000000000000000;;			Short:   i18n.T("Sets a cluster entry in kubeconfig"),
0000000000000000000000000000000000000000;;			Long:    create_cluster_long,
0000000000000000000000000000000000000000;;			Example: create_cluster_example,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(options.complete(cmd))
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(options.run())
0000000000000000000000000000000000000000;;				fmt.Fprintf(out, "Cluster %q set.\n", options.name)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		options.insecureSkipTLSVerify.Default(false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Var(&options.server, clientcmd.FlagAPIServer, clientcmd.FlagAPIServer+" for the cluster entry in kubeconfig")
0000000000000000000000000000000000000000;;		f := cmd.Flags().VarPF(&options.insecureSkipTLSVerify, clientcmd.FlagInsecure, "", clientcmd.FlagInsecure+" for the cluster entry in kubeconfig")
0000000000000000000000000000000000000000;;		f.NoOptDefVal = "true"
0000000000000000000000000000000000000000;;		cmd.Flags().Var(&options.certificateAuthority, clientcmd.FlagCAFile, "path to "+clientcmd.FlagCAFile+" file for the cluster entry in kubeconfig")
0000000000000000000000000000000000000000;;		cmd.MarkFlagFilename(clientcmd.FlagCAFile)
0000000000000000000000000000000000000000;;		f = cmd.Flags().VarPF(&options.embedCAData, clientcmd.FlagEmbedCerts, "", clientcmd.FlagEmbedCerts+" for the cluster entry in kubeconfig")
0000000000000000000000000000000000000000;;		f.NoOptDefVal = "true"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o createClusterOptions) run() error {
0000000000000000000000000000000000000000;;		err := o.validate()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config, err := o.configAccess.GetStartingConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingStanza, exists := config.Clusters[o.name]
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			startingStanza = clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cluster := o.modifyCluster(*startingStanza)
0000000000000000000000000000000000000000;;		config.Clusters[o.name] = &cluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := clientcmd.ModifyConfig(o.configAccess, *config, true); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cluster builds a Cluster object from the options
0000000000000000000000000000000000000000;;	func (o *createClusterOptions) modifyCluster(existingCluster clientcmdapi.Cluster) clientcmdapi.Cluster {
0000000000000000000000000000000000000000;;		modifiedCluster := existingCluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if o.server.Provided() {
0000000000000000000000000000000000000000;;			modifiedCluster.Server = o.server.Value()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.insecureSkipTLSVerify.Provided() {
0000000000000000000000000000000000000000;;			modifiedCluster.InsecureSkipTLSVerify = o.insecureSkipTLSVerify.Value()
0000000000000000000000000000000000000000;;			// Specifying insecure mode clears any certificate authority
0000000000000000000000000000000000000000;;			if modifiedCluster.InsecureSkipTLSVerify {
0000000000000000000000000000000000000000;;				modifiedCluster.CertificateAuthority = ""
0000000000000000000000000000000000000000;;				modifiedCluster.CertificateAuthorityData = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.certificateAuthority.Provided() {
0000000000000000000000000000000000000000;;			caPath := o.certificateAuthority.Value()
0000000000000000000000000000000000000000;;			if o.embedCAData.Value() {
0000000000000000000000000000000000000000;;				modifiedCluster.CertificateAuthorityData, _ = ioutil.ReadFile(caPath)
0000000000000000000000000000000000000000;;				modifiedCluster.InsecureSkipTLSVerify = false
0000000000000000000000000000000000000000;;				modifiedCluster.CertificateAuthority = ""
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				caPath, _ = filepath.Abs(caPath)
0000000000000000000000000000000000000000;;				modifiedCluster.CertificateAuthority = caPath
0000000000000000000000000000000000000000;;				// Specifying a certificate authority file clears certificate authority data and insecure mode
0000000000000000000000000000000000000000;;				if caPath != "" {
0000000000000000000000000000000000000000;;					modifiedCluster.InsecureSkipTLSVerify = false
0000000000000000000000000000000000000000;;					modifiedCluster.CertificateAuthorityData = nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return modifiedCluster
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *createClusterOptions) complete(cmd *cobra.Command) error {
0000000000000000000000000000000000000000;;		args := cmd.Flags().Args()
0000000000000000000000000000000000000000;;		if len(args) != 1 {
0000000000000000000000000000000000000000;;			cmd.Help()
0000000000000000000000000000000000000000;;			return fmt.Errorf("Unexpected args: %v", args)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.name = args[0]
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o createClusterOptions) validate() error {
0000000000000000000000000000000000000000;;		if len(o.name) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("you must specify a non-empty cluster name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.insecureSkipTLSVerify.Value() && o.certificateAuthority.Value() != "" {
0000000000000000000000000000000000000000;;			return errors.New("you cannot specify a certificate authority and insecure mode at the same time")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.embedCAData.Value() {
0000000000000000000000000000000000000000;;			caPath := o.certificateAuthority.Value()
0000000000000000000000000000000000000000;;			if caPath == "" {
0000000000000000000000000000000000000000;;				return fmt.Errorf("you must specify a --%s to embed", clientcmd.FlagCAFile)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := ioutil.ReadFile(caPath); err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("could not read %s data from %s: %v", clientcmd.FlagCAFile, caPath, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
