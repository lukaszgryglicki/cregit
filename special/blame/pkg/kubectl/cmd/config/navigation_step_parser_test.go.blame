0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
868dd0d5e77c22c2b02024e2b8c6fa7613825702;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type stepParserTest struct {
0000000000000000000000000000000000000000;;		path                    string
0000000000000000000000000000000000000000;;		expectedNavigationSteps navigationSteps
0000000000000000000000000000000000000000;;		expectedError           string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseWithDots(t *testing.T) {
0000000000000000000000000000000000000000;;		test := stepParserTest{
0000000000000000000000000000000000000000;;			path: "clusters.my.dot.delimited.name.server",
0000000000000000000000000000000000000000;;			expectedNavigationSteps: navigationSteps{
0000000000000000000000000000000000000000;;				steps: []navigationStep{
0000000000000000000000000000000000000000;;					{"clusters", reflect.TypeOf(make(map[string]*clientcmdapi.Cluster))},
0000000000000000000000000000000000000000;;					{"my.dot.delimited.name", reflect.TypeOf(clientcmdapi.Cluster{})},
0000000000000000000000000000000000000000;;					{"server", reflect.TypeOf("")},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseWithDotsEndingWithName(t *testing.T) {
0000000000000000000000000000000000000000;;		test := stepParserTest{
0000000000000000000000000000000000000000;;			path: "contexts.10.12.12.12",
0000000000000000000000000000000000000000;;			expectedNavigationSteps: navigationSteps{
0000000000000000000000000000000000000000;;				steps: []navigationStep{
0000000000000000000000000000000000000000;;					{"contexts", reflect.TypeOf(make(map[string]*clientcmdapi.Context))},
0000000000000000000000000000000000000000;;					{"10.12.12.12", reflect.TypeOf(clientcmdapi.Context{})},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseWithBadValue(t *testing.T) {
0000000000000000000000000000000000000000;;		test := stepParserTest{
0000000000000000000000000000000000000000;;			path: "user.bad",
0000000000000000000000000000000000000000;;			expectedNavigationSteps: navigationSteps{
0000000000000000000000000000000000000000;;				steps: []navigationStep{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			expectedError: "unable to parse user.bad after [] at api.Config",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test stepParserTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		actualSteps, err := newNavigationSteps(test.path)
0000000000000000000000000000000000000000;;		if len(test.expectedError) != 0 {
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Did not get %v", test.expectedError)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if !strings.Contains(err.Error(), test.expectedError) {
0000000000000000000000000000000000000000;;					t.Errorf("Expected %v, but got %v", test.expectedError, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(test.expectedNavigationSteps, *actualSteps) {
0000000000000000000000000000000000000000;;			t.Errorf("diff: %v", diff.ObjectDiff(test.expectedNavigationSteps, *actualSteps))
0000000000000000000000000000000000000000;;			t.Errorf("expected: %#v\n actual:   %#v", test.expectedNavigationSteps, *actualSteps)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
