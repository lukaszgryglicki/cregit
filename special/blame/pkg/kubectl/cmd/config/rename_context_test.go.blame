0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bc58f90b7471291fb9538090872f36ef3ae627ac;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		currentContext            = "current-context"
0000000000000000000000000000000000000000;;		newContext                = "new-context"
0000000000000000000000000000000000000000;;		nonexistentCurrentContext = "nonexistent-current-context"
0000000000000000000000000000000000000000;;		existentNewContext        = "existent-new-context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		contextData *clientcmdapi.Context = clientcmdapi.NewContext()
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type renameContextTest struct {
0000000000000000000000000000000000000000;;		description    string
0000000000000000000000000000000000000000;;		initialConfig  clientcmdapi.Config // initial config
0000000000000000000000000000000000000000;;		expectedConfig clientcmdapi.Config // expected config
0000000000000000000000000000000000000000;;		args           []string            // kubectl rename-context args
0000000000000000000000000000000000000000;;		expectedOut    string              // expected out message
0000000000000000000000000000000000000000;;		expectedErr    string              // expected error message
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRenameContext(t *testing.T) {
0000000000000000000000000000000000000000;;		initialConfig := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: currentContext,
0000000000000000000000000000000000000000;;			Contexts:       map[string]*clientcmdapi.Context{currentContext: contextData}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: newContext,
0000000000000000000000000000000000000000;;			Contexts:       map[string]*clientcmdapi.Context{newContext: contextData}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := renameContextTest{
0000000000000000000000000000000000000000;;			description:    "Testing for kubectl config rename-context whose context to be renamed is the CurrentContext",
0000000000000000000000000000000000000000;;			initialConfig:  initialConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;			args:           []string{currentContext, newContext},
0000000000000000000000000000000000000000;;			expectedOut:    fmt.Sprintf("Context %q was renamed to %q.\n", currentContext, newContext),
0000000000000000000000000000000000000000;;			expectedErr:    "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRenameNonexistentContext(t *testing.T) {
0000000000000000000000000000000000000000;;		initialConfig := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: currentContext,
0000000000000000000000000000000000000000;;			Contexts:       map[string]*clientcmdapi.Context{currentContext: contextData}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := renameContextTest{
0000000000000000000000000000000000000000;;			description:    "Testing for kubectl config rename-context whose context to be renamed no exists",
0000000000000000000000000000000000000000;;			initialConfig:  initialConfig,
0000000000000000000000000000000000000000;;			expectedConfig: initialConfig,
0000000000000000000000000000000000000000;;			args:           []string{nonexistentCurrentContext, newContext},
0000000000000000000000000000000000000000;;			expectedOut:    "",
0000000000000000000000000000000000000000;;			expectedErr:    fmt.Sprintf("cannot rename the context %q, it's not in", nonexistentCurrentContext),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRenameToAlreadyExistingContext(t *testing.T) {
0000000000000000000000000000000000000000;;		initialConfig := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: currentContext,
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				currentContext:     contextData,
0000000000000000000000000000000000000000;;				existentNewContext: contextData}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := renameContextTest{
0000000000000000000000000000000000000000;;			description:    "Testing for kubectl config rename-context whose the new name is already in another context.",
0000000000000000000000000000000000000000;;			initialConfig:  initialConfig,
0000000000000000000000000000000000000000;;			expectedConfig: initialConfig,
0000000000000000000000000000000000000000;;			args:           []string{currentContext, existentNewContext},
0000000000000000000000000000000000000000;;			expectedOut:    "",
0000000000000000000000000000000000000000;;			expectedErr:    fmt.Sprintf("cannot rename the context %q, the context %q already exists", currentContext, existentNewContext),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test renameContextTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err := clientcmd.WriteToFile(test.initialConfig, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		options := RenameContextOptions{
0000000000000000000000000000000000000000;;			configAccess: pathOptions,
0000000000000000000000000000000000000000;;			contextName:  test.args[0],
0000000000000000000000000000000000000000;;			newName:      test.args[1],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigRenameContext(buf, options.configAccess)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		options.Complete(cmd, test.args, buf)
0000000000000000000000000000000000000000;;		options.Validate()
0000000000000000000000000000000000000000;;		err = options.RunRenameContext(buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(test.expectedErr) != 0 {
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Did not get %v", test.expectedErr)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if !strings.Contains(err.Error(), test.expectedErr) {
0000000000000000000000000000000000000000;;					t.Errorf("Expected error %v, but got %v", test.expectedErr, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config, err := clientcmd.LoadFromFile(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error loading kubeconfig file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, oldExists := config.Contexts[currentContext]
0000000000000000000000000000000000000000;;		_, newExists := config.Contexts[newContext]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if (!newExists) || (oldExists) || (config.CurrentContext != newContext) {
0000000000000000000000000000000000000000;;			t.Errorf("Failed in: %q\n expected %v\n but got %v", test.description, test.expectedConfig, *config)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(test.expectedOut) != 0 {
0000000000000000000000000000000000000000;;			if buf.String() != test.expectedOut {
0000000000000000000000000000000000000000;;				t.Errorf("Failed in:%q\n expected out %v\n but got %v", test.description, test.expectedOut, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
