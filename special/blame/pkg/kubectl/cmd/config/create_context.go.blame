0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
737c4e3c5d30ba52180aa18ac8372018684b2a24;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/flag"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type createContextOptions struct {
0000000000000000000000000000000000000000;;		configAccess clientcmd.ConfigAccess
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		cluster      flag.StringFlag
0000000000000000000000000000000000000000;;		authInfo     flag.StringFlag
0000000000000000000000000000000000000000;;		namespace    flag.StringFlag
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		create_context_long = templates.LongDesc(`
0000000000000000000000000000000000000000;;			Sets a context entry in kubeconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Specifying a name that already exists will merge new fields on top of existing values for those fields.`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		create_context_example = templates.Examples(`
0000000000000000000000000000000000000000;;			# Set the user field on the gce context entry without touching other values
0000000000000000000000000000000000000000;;			kubectl config set-context gce --user=cluster-admin`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdConfigSetContext(out io.Writer, configAccess clientcmd.ConfigAccess) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &createContextOptions{configAccess: configAccess}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     fmt.Sprintf("set-context NAME [--%v=cluster_nickname] [--%v=user_nickname] [--%v=namespace]", clientcmd.FlagClusterName, clientcmd.FlagAuthInfoName, clientcmd.FlagNamespace),
0000000000000000000000000000000000000000;;			Short:   i18n.T("Sets a context entry in kubeconfig"),
0000000000000000000000000000000000000000;;			Long:    create_context_long,
0000000000000000000000000000000000000000;;			Example: create_context_example,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(options.complete(cmd))
0000000000000000000000000000000000000000;;				exists, err := options.run()
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				if exists {
0000000000000000000000000000000000000000;;					fmt.Fprintf(out, "Context %q modified.\n", options.name)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					fmt.Fprintf(out, "Context %q created.\n", options.name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().Var(&options.cluster, clientcmd.FlagClusterName, clientcmd.FlagClusterName+" for the context entry in kubeconfig")
0000000000000000000000000000000000000000;;		cmd.Flags().Var(&options.authInfo, clientcmd.FlagAuthInfoName, clientcmd.FlagAuthInfoName+" for the context entry in kubeconfig")
0000000000000000000000000000000000000000;;		cmd.Flags().Var(&options.namespace, clientcmd.FlagNamespace, clientcmd.FlagNamespace+" for the context entry in kubeconfig")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o createContextOptions) run() (bool, error) {
0000000000000000000000000000000000000000;;		err := o.validate()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config, err := o.configAccess.GetStartingConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingStanza, exists := config.Contexts[o.name]
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			startingStanza = clientcmdapi.NewContext()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		context := o.modifyContext(*startingStanza)
0000000000000000000000000000000000000000;;		config.Contexts[o.name] = &context
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := clientcmd.ModifyConfig(o.configAccess, *config, true); err != nil {
0000000000000000000000000000000000000000;;			return exists, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return exists, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *createContextOptions) modifyContext(existingContext clientcmdapi.Context) clientcmdapi.Context {
0000000000000000000000000000000000000000;;		modifiedContext := existingContext
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if o.cluster.Provided() {
0000000000000000000000000000000000000000;;			modifiedContext.Cluster = o.cluster.Value()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.authInfo.Provided() {
0000000000000000000000000000000000000000;;			modifiedContext.AuthInfo = o.authInfo.Value()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.namespace.Provided() {
0000000000000000000000000000000000000000;;			modifiedContext.Namespace = o.namespace.Value()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return modifiedContext
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *createContextOptions) complete(cmd *cobra.Command) error {
0000000000000000000000000000000000000000;;		args := cmd.Flags().Args()
0000000000000000000000000000000000000000;;		if len(args) != 1 {
0000000000000000000000000000000000000000;;			cmd.Help()
0000000000000000000000000000000000000000;;			return fmt.Errorf("Unexpected args: %v", args)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.name = args[0]
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o createContextOptions) validate() error {
0000000000000000000000000000000000000000;;		if len(o.name) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("you must specify a non-empty context name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
