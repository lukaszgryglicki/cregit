0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
938e49837069713c65dc3b91a1aaa79cf13d8434;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type createContextTest struct {
0000000000000000000000000000000000000000;;		description    string
0000000000000000000000000000000000000000;;		config         clientcmdapi.Config //initiate kubectl config
0000000000000000000000000000000000000000;;		args           []string            //kubectl set-context args
0000000000000000000000000000000000000000;;		flags          []string            //kubectl set-context flags
0000000000000000000000000000000000000000;;		expected       string              //expectd out
0000000000000000000000000000000000000000;;		expectedConfig clientcmdapi.Config //expect kubectl config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateContext(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{}
0000000000000000000000000000000000000000;;		test := createContextTest{
0000000000000000000000000000000000000000;;			description: "Testing for create a new context",
0000000000000000000000000000000000000000;;			config:      conf,
0000000000000000000000000000000000000000;;			args:        []string{"shaker-context"},
0000000000000000000000000000000000000000;;			flags: []string{
0000000000000000000000000000000000000000;;				"--cluster=cluster_nickname",
0000000000000000000000000000000000000000;;				"--user=user_nickname",
0000000000000000000000000000000000000000;;				"--namespace=namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			expected: `Context "shaker-context" created.` + "\n",
0000000000000000000000000000000000000000;;			expectedConfig: clientcmdapi.Config{
0000000000000000000000000000000000000000;;				Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;					"shaker-context": {AuthInfo: "user_nickname", Cluster: "cluster_nickname", Namespace: "namespace"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestModifyContext(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"shaker-context": {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"},
0000000000000000000000000000000000000000;;				"not-this":       {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"}}}
0000000000000000000000000000000000000000;;		test := createContextTest{
0000000000000000000000000000000000000000;;			description: "Testing for modify a already exist context",
0000000000000000000000000000000000000000;;			config:      conf,
0000000000000000000000000000000000000000;;			args:        []string{"shaker-context"},
0000000000000000000000000000000000000000;;			flags: []string{
0000000000000000000000000000000000000000;;				"--cluster=cluster_nickname",
0000000000000000000000000000000000000000;;				"--user=user_nickname",
0000000000000000000000000000000000000000;;				"--namespace=namespace",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			expected: `Context "shaker-context" modified.` + "\n",
0000000000000000000000000000000000000000;;			expectedConfig: clientcmdapi.Config{
0000000000000000000000000000000000000000;;				Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;					"shaker-context": {AuthInfo: "user_nickname", Cluster: "cluster_nickname", Namespace: "namespace"},
0000000000000000000000000000000000000000;;					"not-this":       {AuthInfo: "blue-user", Cluster: "big-cluster", Namespace: "saw-ns"}}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test createContextTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile(os.TempDir(), "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.config, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigSetContext(buf, pathOptions)
0000000000000000000000000000000000000000;;		cmd.SetArgs(test.args)
0000000000000000000000000000000000000000;;		cmd.Flags().Parse(test.flags)
0000000000000000000000000000000000000000;;		if err := cmd.Execute(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error executing command: %v,kubectl set-context args: %v,flags: %v", err, test.args, test.flags)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config, err := clientcmd.LoadFromFile(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error loading kubeconfig file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(test.expected) != 0 {
0000000000000000000000000000000000000000;;			if buf.String() != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Fail in %q:\n expected %v\n but got %v\n", test.description, test.expected, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if test.expectedConfig.Contexts != nil {
0000000000000000000000000000000000000000;;			expectContext := test.expectedConfig.Contexts[test.args[0]]
0000000000000000000000000000000000000000;;			actualContext := config.Contexts[test.args[0]]
0000000000000000000000000000000000000000;;			if expectContext.AuthInfo != actualContext.AuthInfo || expectContext.Cluster != actualContext.Cluster ||
0000000000000000000000000000000000000000;;				expectContext.Namespace != actualContext.Namespace {
0000000000000000000000000000000000000000;;				t.Errorf("Fail in %q:\n expected Context %v\n but found %v in kubeconfig\n", test.description, expectContext, actualContext)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
