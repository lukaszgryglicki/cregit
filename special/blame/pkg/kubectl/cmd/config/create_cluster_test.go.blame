0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
79e10cce3f285a739ed177f0b1e9d0c43585d1a9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type createClusterTest struct {
0000000000000000000000000000000000000000;;		description    string
0000000000000000000000000000000000000000;;		config         clientcmdapi.Config
0000000000000000000000000000000000000000;;		args           []string
0000000000000000000000000000000000000000;;		flags          []string
0000000000000000000000000000000000000000;;		expected       string
0000000000000000000000000000000000000000;;		expectedConfig clientcmdapi.Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{}
0000000000000000000000000000000000000000;;		test := createClusterTest{
0000000000000000000000000000000000000000;;			description: "Testing 'kubectl config set-cluster' with a new cluster",
0000000000000000000000000000000000000000;;			config:      conf,
0000000000000000000000000000000000000000;;			args:        []string{"my-cluster"},
0000000000000000000000000000000000000000;;			flags: []string{
0000000000000000000000000000000000000000;;				"--server=http://192.168.0.1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			expected: `Cluster "my-cluster" set.` + "\n",
0000000000000000000000000000000000000000;;			expectedConfig: clientcmdapi.Config{
0000000000000000000000000000000000000000;;				Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;					"my-cluster": {Server: "http://192.168.0.1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestModifyCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"my-cluster": {Server: "https://192.168.0.1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := createClusterTest{
0000000000000000000000000000000000000000;;			description: "Testing 'kubectl config set-cluster' with an existing cluster",
0000000000000000000000000000000000000000;;			config:      conf,
0000000000000000000000000000000000000000;;			args:        []string{"my-cluster"},
0000000000000000000000000000000000000000;;			flags: []string{
0000000000000000000000000000000000000000;;				"--server=https://192.168.0.99",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			expected: `Cluster "my-cluster" set.` + "\n",
0000000000000000000000000000000000000000;;			expectedConfig: clientcmdapi.Config{
0000000000000000000000000000000000000000;;				Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;					"my-cluster": {Server: "https://192.168.0.99"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test createClusterTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile(os.TempDir(), "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.config, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigSetCluster(buf, pathOptions)
0000000000000000000000000000000000000000;;		cmd.SetArgs(test.args)
0000000000000000000000000000000000000000;;		cmd.Flags().Parse(test.flags)
0000000000000000000000000000000000000000;;		if err := cmd.Execute(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error executing command: %v, args: %v, flags: %v", err, test.args, test.flags)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config, err := clientcmd.LoadFromFile(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error loading kubeconfig file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(test.expected) != 0 {
0000000000000000000000000000000000000000;;			if buf.String() != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Failed in %q\n expected %v\n but got %v", test.description, test.expected, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(test.args) > 0 {
0000000000000000000000000000000000000000;;			cluster, ok := config.Clusters[test.args[0]]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("expected cluster %v, but got nil", test.args[0])
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if cluster.Server != test.expectedConfig.Clusters[test.args[0]].Server {
0000000000000000000000000000000000000000;;				t.Errorf("Fail in %q\n expected cluster server %v\n but got %v\n ", test.description, test.expectedConfig.Clusters[test.args[0]].Server, cluster.Server)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
