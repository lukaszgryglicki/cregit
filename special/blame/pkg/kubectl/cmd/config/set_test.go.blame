0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d3efb70371d797cf4432a6343a4d2334f4a33430;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type setConfigTest struct {
0000000000000000000000000000000000000000;;		description    string
0000000000000000000000000000000000000000;;		config         clientcmdapi.Config
0000000000000000000000000000000000000000;;		args           []string
0000000000000000000000000000000000000000;;		expected       string
0000000000000000000000000000000000000000;;		expectedConfig clientcmdapi.Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetConfigCurrentContext(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Kind:           "Config",
0000000000000000000000000000000000000000;;			APIVersion:     "v1",
0000000000000000000000000000000000000000;;			CurrentContext: "minikube",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedConfig := *clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		expectedConfig.CurrentContext = "my-cluster"
0000000000000000000000000000000000000000;;		test := setConfigTest{
0000000000000000000000000000000000000000;;			description:    "Testing for kubectl config set current-context",
0000000000000000000000000000000000000000;;			config:         conf,
0000000000000000000000000000000000000000;;			args:           []string{"current-context", "my-cluster"},
0000000000000000000000000000000000000000;;			expected:       `Property "current-context" set.` + "\n",
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test setConfigTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.config, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigSet(buf, pathOptions)
0000000000000000000000000000000000000000;;		cmd.SetArgs(test.args)
0000000000000000000000000000000000000000;;		if err := cmd.Execute(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error executing command: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config, err := clientcmd.LoadFromFile(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error loading kubeconfig file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(test.expected) != 0 {
0000000000000000000000000000000000000000;;			if buf.String() != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Failded in:%q\n expected %v\n but got %v", test.description, test.expected, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(*config, test.expectedConfig) {
0000000000000000000000000000000000000000;;			t.Errorf("Failed in: %q\n expected %v\n but got %v", test.description, *config, test.expectedConfig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
