0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d10399b22549fdd3f29544a93233b13cbed07e89;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type useContextTest struct {
0000000000000000000000000000000000000000;;		description    string
0000000000000000000000000000000000000000;;		config         clientcmdapi.Config //initiate kubectl config
0000000000000000000000000000000000000000;;		args           []string            //kubectl config use-context args
0000000000000000000000000000000000000000;;		expected       string              //expect out
0000000000000000000000000000000000000000;;		expectedConfig clientcmdapi.Config //expect kubectl config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUseContext(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Kind:       "Config",
0000000000000000000000000000000000000000;;			APIVersion: "v1",
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"minikube":   {Server: "https://192.168.99.100:8443"},
0000000000000000000000000000000000000000;;				"my-cluster": {Server: "https://192.168.0.1:3434"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"minikube":   {AuthInfo: "minikube", Cluster: "minikube"},
0000000000000000000000000000000000000000;;				"my-cluster": {AuthInfo: "mu-cluster", Cluster: "my-cluster"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			CurrentContext: "minikube",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := useContextTest{
0000000000000000000000000000000000000000;;			description: "Testing for kubectl config use-context",
0000000000000000000000000000000000000000;;			config:      conf,
0000000000000000000000000000000000000000;;			args:        []string{"my-cluster"},
0000000000000000000000000000000000000000;;			expected:    `Switched to context "my-cluster".` + "\n",
0000000000000000000000000000000000000000;;			expectedConfig: clientcmdapi.Config{
0000000000000000000000000000000000000000;;				Kind:       "Config",
0000000000000000000000000000000000000000;;				APIVersion: "v1",
0000000000000000000000000000000000000000;;				Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;					"minikube":   {Server: "https://192.168.99.100:8443"},
0000000000000000000000000000000000000000;;					"my-cluster": {Server: "https://192.168.0.1:3434"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;					"minikube":   {AuthInfo: "minikube", Cluster: "minikube"},
0000000000000000000000000000000000000000;;					"my-cluster": {AuthInfo: "mu-cluster", Cluster: "my-cluster"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				CurrentContext: "my-cluster",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test useContextTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile(os.TempDir(), "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.config, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigUseContext(buf, pathOptions)
0000000000000000000000000000000000000000;;		cmd.SetArgs(test.args)
0000000000000000000000000000000000000000;;		if err := cmd.Execute(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error executing command: %v,kubectl config use-context args: %v", err, test.args)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config, err := clientcmd.LoadFromFile(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error loading kubeconfig file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(test.expected) != 0 {
0000000000000000000000000000000000000000;;			if buf.String() != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Failed in :%q\n expected %v\n, but got %v\n", test.description, test.expected, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if test.expectedConfig.CurrentContext != config.CurrentContext {
0000000000000000000000000000000000000000;;			t.Errorf("Failed in :%q\n expected config %v, but found %v\n in kubeconfig\n", test.description, test.expectedConfig, config)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
