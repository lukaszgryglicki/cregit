0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
737c4e3c5d30ba52180aa18ac8372018684b2a24;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRedFederalCowHammerConfig() clientcmdapi.Config {
0000000000000000000000000000000000000000;;		return clientcmdapi.Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"red-user": {Token: "red-token"}},
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"cow-cluster": {Server: "http://cow.org:8080"}},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"federal-context": {AuthInfo: "red-user", Cluster: "cow-cluster"}},
0000000000000000000000000000000000000000;;			CurrentContext: "federal-context",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_view() {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"view"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output := test.run(nil)
0000000000000000000000000000000000000000;;		fmt.Printf("%v", output)
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// apiVersion: v1
0000000000000000000000000000000000000000;;		// clusters:
0000000000000000000000000000000000000000;;		// - cluster:
0000000000000000000000000000000000000000;;		//     server: http://cow.org:8080
0000000000000000000000000000000000000000;;		//   name: cow-cluster
0000000000000000000000000000000000000000;;		// contexts:
0000000000000000000000000000000000000000;;		// - context:
0000000000000000000000000000000000000000;;		//     cluster: cow-cluster
0000000000000000000000000000000000000000;;		//     user: red-user
0000000000000000000000000000000000000000;;		//   name: federal-context
0000000000000000000000000000000000000000;;		// current-context: federal-context
0000000000000000000000000000000000000000;;		// kind: Config
0000000000000000000000000000000000000000;;		// preferences: {}
0000000000000000000000000000000000000000;;		// users:
0000000000000000000000000000000000000000;;		// - name: red-user
0000000000000000000000000000000000000000;;		//   user:
0000000000000000000000000000000000000000;;		//     token: red-token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCurrentContext(t *testing.T) {
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:            []string{"current-context"},
0000000000000000000000000000000000000000;;			startingConfig:  startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig:  startingConfig,
0000000000000000000000000000000000000000;;			expectedOutputs: []string{startingConfig.CurrentContext},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetCurrentContext(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newContextName := "the-new-context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig.Contexts[newContextName] = clientcmdapi.NewContext()
0000000000000000000000000000000000000000;;		expectedConfig.Contexts[newContextName] = clientcmdapi.NewContext()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig.CurrentContext = newContextName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"use-context", "the-new-context"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetNonExistentContext(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"use-context", "non-existent-config"},
0000000000000000000000000000000000000000;;			startingConfig: expectedConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				// Restore cmdutil behavior.
0000000000000000000000000000000000000000;;				cmdutil.DefaultBehaviorOnFatal()
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check exit code.
0000000000000000000000000000000000000000;;			cmdutil.BehaviorOnFatal(func(e string, code int) {
0000000000000000000000000000000000000000;;				if code != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("The exit code is %d, expected 1", code)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				expectedOutputs := []string{`no context exists with the name: "non-existent-config"`}
0000000000000000000000000000000000000000;;				test.checkOutput(e, expectedOutputs, t)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			test.run(t)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetIntoExistingStruct(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["red-user"].Password = "new-path-value"
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set", "users.red-user.password", "new-path-value"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetWithPathPrefixIntoExistingStruct(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["cow-cluster"].Server = "http://cow.org:8080/foo/baz"
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set", "clusters.cow-cluster.server", "http://cow.org:8080/foo/baz"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dc := clientcmd.NewDefaultClientConfig(expectedConfig, &clientcmd.ConfigOverrides{})
0000000000000000000000000000000000000000;;		dcc, err := dc.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedHost := "http://cow.org:8080/foo/baz"
0000000000000000000000000000000000000000;;		if expectedHost != dcc.Host {
0000000000000000000000000000000000000000;;			t.Fatalf("expected client.Config.Host = %q instead of %q", expectedHost, dcc.Host)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnsetStruct(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		delete(expectedConfig.AuthInfos, "red-user")
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"unset", "users.red-user"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnsetField(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["red-user"] = clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"unset", "users.red-user.token"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetIntoNewStruct(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		cluster := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		cluster.Server = "new-server-value"
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["big-cluster"] = cluster
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set", "clusters.big-cluster.server", "new-server-value"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetBoolean(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		cluster := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		cluster.InsecureSkipTLSVerify = true
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["big-cluster"] = cluster
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set", "clusters.big-cluster.insecure-skip-tls-verify", "true"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetIntoNewConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := *clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		context := clientcmdapi.NewContext()
0000000000000000000000000000000000000000;;		context.AuthInfo = "fake-user"
0000000000000000000000000000000000000000;;		expectedConfig.Contexts["new-context"] = context
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set", "contexts.new-context.user", "fake-user"},
0000000000000000000000000000000000000000;;			startingConfig: *clientcmdapi.NewConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewEmptyAuth(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := *clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["the-user-name"] = clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "the-user-name"},
0000000000000000000000000000000000000000;;			startingConfig: *clientcmdapi.NewConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdditionalAuth(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		authInfo := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfo.Token = "token"
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfo
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagBearerToken + "=token"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmbedClientCert(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeCertFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(fakeCertFile.Name())
0000000000000000000000000000000000000000;;		fakeData := []byte("fake-data")
0000000000000000000000000000000000000000;;		ioutil.WriteFile(fakeCertFile.Name(), fakeData, 0600)
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		authInfo := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfo.ClientCertificateData = fakeData
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagCertFile + "=" + fakeCertFile.Name(), "--" + clientcmd.FlagEmbedCerts + "=true"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmbedClientKey(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKeyFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKeyFile.Name())
0000000000000000000000000000000000000000;;		fakeData := []byte("fake-data")
0000000000000000000000000000000000000000;;		ioutil.WriteFile(fakeKeyFile.Name(), fakeData, 0600)
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		authInfo := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfo.ClientKeyData = fakeData
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagKeyFile + "=" + fakeKeyFile.Name(), "--" + clientcmd.FlagEmbedCerts + "=true"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmbedNoKeyOrCertDisallowed(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagEmbedCerts + "=true"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				// Restore cmdutil behavior.
0000000000000000000000000000000000000000;;				cmdutil.DefaultBehaviorOnFatal()
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check exit code.
0000000000000000000000000000000000000000;;			cmdutil.BehaviorOnFatal(func(e string, code int) {
0000000000000000000000000000000000000000;;				if code != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("The exit code is %d, expected 1", code)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				expectedOutputs := []string{"--client-certificate", "--client-key", "embed"}
0000000000000000000000000000000000000000;;				test.checkOutput(e, expectedOutputs, t)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			test.run(t)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmptyTokenAndCertAllowed(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeCertFile, _ := ioutil.TempFile("", "cert-file")
0000000000000000000000000000000000000000;;		defer os.Remove(fakeCertFile.Name())
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		authInfo := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfo.ClientCertificate = path.Base(fakeCertFile.Name())
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagCertFile + "=" + fakeCertFile.Name(), "--" + clientcmd.FlagBearerToken + "="},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTokenAndCertAllowed(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		authInfo := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfo.Token = "token"
0000000000000000000000000000000000000000;;		authInfo.ClientCertificate = "/cert-file"
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfo
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagCertFile + "=/cert-file", "--" + clientcmd.FlagBearerToken + "=token"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTokenAndBasicDisallowed(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagUsername + "=myuser", "--" + clientcmd.FlagBearerToken + "=token"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				// Restore cmdutil behavior.
0000000000000000000000000000000000000000;;				cmdutil.DefaultBehaviorOnFatal()
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check exit code.
0000000000000000000000000000000000000000;;			cmdutil.BehaviorOnFatal(func(e string, code int) {
0000000000000000000000000000000000000000;;				if code != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("The exit code is %d, expected 1", code)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedOutputs := []string{"--token", "--username"}
0000000000000000000000000000000000000000;;				test.checkOutput(e, expectedOutputs, t)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			test.run(t)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBasicClearsToken(t *testing.T) {
0000000000000000000000000000000000000000;;		authInfoWithToken := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfoWithToken.Token = "token"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authInfoWithBasic := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfoWithBasic.Username = "myuser"
0000000000000000000000000000000000000000;;		authInfoWithBasic.Password = "mypass"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.AuthInfos["another-user"] = authInfoWithToken
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfoWithBasic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagUsername + "=myuser", "--" + clientcmd.FlagPassword + "=mypass"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTokenClearsBasic(t *testing.T) {
0000000000000000000000000000000000000000;;		authInfoWithBasic := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfoWithBasic.Username = "myuser"
0000000000000000000000000000000000000000;;		authInfoWithBasic.Password = "mypass"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authInfoWithToken := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfoWithToken.Token = "token"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.AuthInfos["another-user"] = authInfoWithBasic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfoWithToken
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagBearerToken + "=token"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTokenLeavesCert(t *testing.T) {
0000000000000000000000000000000000000000;;		authInfoWithCerts := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfoWithCerts.ClientCertificate = "cert"
0000000000000000000000000000000000000000;;		authInfoWithCerts.ClientCertificateData = []byte("certdata")
0000000000000000000000000000000000000000;;		authInfoWithCerts.ClientKey = "key"
0000000000000000000000000000000000000000;;		authInfoWithCerts.ClientKeyData = []byte("keydata")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts.Token = "token"
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts.ClientCertificate = "cert"
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts.ClientCertificateData = []byte("certdata")
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts.ClientKey = "key"
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts.ClientKeyData = []byte("keydata")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.AuthInfos["another-user"] = authInfoWithCerts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfoWithTokenAndCerts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagBearerToken + "=token"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCertLeavesToken(t *testing.T) {
0000000000000000000000000000000000000000;;		authInfoWithToken := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfoWithToken.Token = "token"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts := clientcmdapi.NewAuthInfo()
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts.Token = "token"
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts.ClientCertificate = "/cert"
0000000000000000000000000000000000000000;;		authInfoWithTokenAndCerts.ClientKey = "/key"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.AuthInfos["another-user"] = authInfoWithToken
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["another-user"] = authInfoWithTokenAndCerts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "another-user", "--" + clientcmd.FlagCertFile + "=/cert", "--" + clientcmd.FlagKeyFile + "=/key"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetBytesBad(t *testing.T) {
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.Clusters["another-cluster"] = clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set", "clusters.another-cluster.certificate-authority-data", "cadata"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: startingConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				// Restore cmdutil behavior.
0000000000000000000000000000000000000000;;				cmdutil.DefaultBehaviorOnFatal()
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check exit code.
0000000000000000000000000000000000000000;;			cmdutil.BehaviorOnFatal(func(e string, code int) {
0000000000000000000000000000000000000000;;				if code != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("The exit code is %d, expected 1", code)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			test.run(t)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetBytes(t *testing.T) {
0000000000000000000000000000000000000000;;		clusterInfoWithCAData := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCAData.CertificateAuthorityData = []byte("cadata")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.Clusters["another-cluster"] = clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["another-cluster"] = clusterInfoWithCAData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set", "clusters.another-cluster.certificate-authority-data", "cadata", "--set-raw-bytes"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetBase64Bytes(t *testing.T) {
0000000000000000000000000000000000000000;;		clusterInfoWithCAData := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCAData.CertificateAuthorityData = []byte("cadata")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.Clusters["another-cluster"] = clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["another-cluster"] = clusterInfoWithCAData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set", "clusters.another-cluster.certificate-authority-data", "Y2FkYXRh"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnsetBytes(t *testing.T) {
0000000000000000000000000000000000000000;;		clusterInfoWithCAData := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCAData.CertificateAuthorityData = []byte("cadata")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.Clusters["another-cluster"] = clusterInfoWithCAData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["another-cluster"] = clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"unset", "clusters.another-cluster.certificate-authority-data"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCAClearsInsecure(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeCAFile, _ := ioutil.TempFile("", "ca-file")
0000000000000000000000000000000000000000;;		defer os.Remove(fakeCAFile.Name())
0000000000000000000000000000000000000000;;		clusterInfoWithInsecure := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithInsecure.InsecureSkipTLSVerify = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterInfoWithCA := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCA.CertificateAuthority = path.Base(fakeCAFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.Clusters["another-cluster"] = clusterInfoWithInsecure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["another-cluster"] = clusterInfoWithCA
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "another-cluster", "--" + clientcmd.FlagCAFile + "=" + fakeCAFile.Name()},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCAClearsCAData(t *testing.T) {
0000000000000000000000000000000000000000;;		clusterInfoWithCAData := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCAData.CertificateAuthorityData = []byte("cadata")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterInfoWithCA := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCA.CertificateAuthority = "/cafile"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.Clusters["another-cluster"] = clusterInfoWithCAData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["another-cluster"] = clusterInfoWithCA
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "another-cluster", "--" + clientcmd.FlagCAFile + "=/cafile", "--" + clientcmd.FlagInsecure + "=false"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInsecureClearsCA(t *testing.T) {
0000000000000000000000000000000000000000;;		clusterInfoWithInsecure := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithInsecure.InsecureSkipTLSVerify = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterInfoWithCA := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCA.CertificateAuthority = "cafile"
0000000000000000000000000000000000000000;;		clusterInfoWithCA.CertificateAuthorityData = []byte("cadata")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.Clusters["another-cluster"] = clusterInfoWithCA
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["another-cluster"] = clusterInfoWithInsecure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "another-cluster", "--" + clientcmd.FlagInsecure + "=true"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCADataClearsCA(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeCAFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(fakeCAFile.Name())
0000000000000000000000000000000000000000;;		fakeData := []byte("cadata")
0000000000000000000000000000000000000000;;		ioutil.WriteFile(fakeCAFile.Name(), fakeData, 0600)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterInfoWithCAData := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCAData.CertificateAuthorityData = fakeData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterInfoWithCA := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		clusterInfoWithCA.CertificateAuthority = "cafile"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		startingConfig.Clusters["another-cluster"] = clusterInfoWithCA
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["another-cluster"] = clusterInfoWithCAData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "another-cluster", "--" + clientcmd.FlagCAFile + "=" + fakeCAFile.Name(), "--" + clientcmd.FlagEmbedCerts + "=true"},
0000000000000000000000000000000000000000;;			startingConfig: startingConfig,
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmbedNoCADisallowed(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "another-cluster", "--" + clientcmd.FlagEmbedCerts + "=true"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				// Restore cmdutil behavior.
0000000000000000000000000000000000000000;;				cmdutil.DefaultBehaviorOnFatal()
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check exit code.
0000000000000000000000000000000000000000;;			cmdutil.BehaviorOnFatal(func(e string, code int) {
0000000000000000000000000000000000000000;;				if code != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("The exit code is %d, expected 1", code)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedOutputs := []string{"--certificate-authority", "embed"}
0000000000000000000000000000000000000000;;				test.checkOutput(e, expectedOutputs, t)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			test.run(t)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCAAndInsecureDisallowed(t *testing.T) {
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "another-cluster", "--" + clientcmd.FlagCAFile + "=cafile", "--" + clientcmd.FlagInsecure + "=true"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				// Restore cmdutil behavior.
0000000000000000000000000000000000000000;;				cmdutil.DefaultBehaviorOnFatal()
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check exit code.
0000000000000000000000000000000000000000;;			cmdutil.BehaviorOnFatal(func(e string, code int) {
0000000000000000000000000000000000000000;;				if code != 1 {
0000000000000000000000000000000000000000;;					t.Errorf("The exit code is %d, expected 1", code)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedOutputs := []string{"certificate", "insecure"}
0000000000000000000000000000000000000000;;				test.checkOutput(e, expectedOutputs, t)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			test.run(t)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeExistingAuth(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		authInfo := expectedConfig.AuthInfos["red-user"]
0000000000000000000000000000000000000000;;		authInfo.ClientKey = "/key"
0000000000000000000000000000000000000000;;		expectedConfig.AuthInfos["red-user"] = authInfo
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-credentials", "red-user", "--" + clientcmd.FlagKeyFile + "=/key"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewEmptyCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := *clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["new-cluster"] = clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "new-cluster"},
0000000000000000000000000000000000000000;;			startingConfig: *clientcmdapi.NewConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdditionalCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		cluster := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		cluster.CertificateAuthority = "/ca-location"
0000000000000000000000000000000000000000;;		cluster.InsecureSkipTLSVerify = false
0000000000000000000000000000000000000000;;		cluster.Server = "serverlocation"
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["different-cluster"] = cluster
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "different-cluster", "--" + clientcmd.FlagAPIServer + "=serverlocation", "--" + clientcmd.FlagInsecure + "=false", "--" + clientcmd.FlagCAFile + "=/ca-location"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOverwriteExistingCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		cluster := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		cluster.Server = "serverlocation"
0000000000000000000000000000000000000000;;		expectedConfig.Clusters["cow-cluster"] = cluster
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-cluster", "cow-cluster", "--" + clientcmd.FlagAPIServer + "=serverlocation"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewEmptyContext(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := *clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		expectedConfig.Contexts["new-context"] = clientcmdapi.NewContext()
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-context", "new-context"},
0000000000000000000000000000000000000000;;			startingConfig: *clientcmdapi.NewConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdditionalContext(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		context := clientcmdapi.NewContext()
0000000000000000000000000000000000000000;;		context.Cluster = "some-cluster"
0000000000000000000000000000000000000000;;		context.AuthInfo = "some-user"
0000000000000000000000000000000000000000;;		context.Namespace = "different-namespace"
0000000000000000000000000000000000000000;;		expectedConfig.Contexts["different-context"] = context
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-context", "different-context", "--" + clientcmd.FlagClusterName + "=some-cluster", "--" + clientcmd.FlagAuthInfoName + "=some-user", "--" + clientcmd.FlagNamespace + "=different-namespace"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeExistingContext(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedConfig := newRedFederalCowHammerConfig()
0000000000000000000000000000000000000000;;		context := expectedConfig.Contexts["federal-context"]
0000000000000000000000000000000000000000;;		context.Namespace = "hammer"
0000000000000000000000000000000000000000;;		expectedConfig.Contexts["federal-context"] = context
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := configCommandTest{
0000000000000000000000000000000000000000;;			args:           []string{"set-context", "federal-context", "--" + clientcmd.FlagNamespace + "=hammer"},
0000000000000000000000000000000000000000;;			startingConfig: newRedFederalCowHammerConfig(),
0000000000000000000000000000000000000000;;			expectedConfig: expectedConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestToBool(t *testing.T) {
0000000000000000000000000000000000000000;;		type test struct {
0000000000000000000000000000000000000000;;			in  string
0000000000000000000000000000000000000000;;			out bool
0000000000000000000000000000000000000000;;			err string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []test{
0000000000000000000000000000000000000000;;			{"", false, ""},
0000000000000000000000000000000000000000;;			{"true", true, ""},
0000000000000000000000000000000000000000;;			{"on", false, `strconv.ParseBool: parsing "on": invalid syntax`},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, curr := range tests {
0000000000000000000000000000000000000000;;			b, err := toBool(curr.in)
0000000000000000000000000000000000000000;;			if (len(curr.err) != 0) && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Expected error: %v, but got nil", curr.err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if (len(curr.err) == 0) && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if (err != nil) && (err.Error() != curr.err) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", curr.err, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if b != curr.out {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", curr.out, b)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testConfigCommand(args []string, startingConfig clientcmdapi.Config, t *testing.T) (string, clientcmdapi.Config) {
0000000000000000000000000000000000000000;;		fakeKubeFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err := clientcmd.WriteToFile(startingConfig, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		argsToUse := make([]string, 0, 2+len(args))
0000000000000000000000000000000000000000;;		argsToUse = append(argsToUse, "--kubeconfig="+fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		argsToUse = append(argsToUse, args...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdConfig(clientcmd.NewDefaultPathOptions(), buf, buf)
0000000000000000000000000000000000000000;;		cmd.SetArgs(argsToUse)
0000000000000000000000000000000000000000;;		cmd.Execute()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// outBytes, _ := ioutil.ReadFile(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		config := clientcmd.GetConfigFromFileOrDie(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return buf.String(), *config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configCommandTest struct {
0000000000000000000000000000000000000000;;		args            []string
0000000000000000000000000000000000000000;;		startingConfig  clientcmdapi.Config
0000000000000000000000000000000000000000;;		expectedConfig  clientcmdapi.Config
0000000000000000000000000000000000000000;;		expectedOutputs []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test configCommandTest) checkOutput(out string, expectedOutputs []string, t *testing.T) {
0000000000000000000000000000000000000000;;		for _, expectedOutput := range expectedOutputs {
0000000000000000000000000000000000000000;;			if !strings.Contains(out, expectedOutput) {
0000000000000000000000000000000000000000;;				t.Errorf("expected '%s' in output, got '%s'", expectedOutput, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test configCommandTest) run(t *testing.T) string {
0000000000000000000000000000000000000000;;		out, actualConfig := testConfigCommand(test.args, test.startingConfig, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testSetNilMapsToEmpties(reflect.ValueOf(&test.expectedConfig))
0000000000000000000000000000000000000000;;		testSetNilMapsToEmpties(reflect.ValueOf(&actualConfig))
0000000000000000000000000000000000000000;;		testClearLocationOfOrigin(&actualConfig)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(test.expectedConfig, actualConfig) {
0000000000000000000000000000000000000000;;			t.Errorf("diff: %v", diff.ObjectDiff(test.expectedConfig, actualConfig))
0000000000000000000000000000000000000000;;			t.Errorf("expected: %#v\n actual:   %#v", test.expectedConfig, actualConfig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.checkOutput(out, test.expectedOutputs, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func testClearLocationOfOrigin(config *clientcmdapi.Config) {
0000000000000000000000000000000000000000;;		for key, obj := range config.AuthInfos {
0000000000000000000000000000000000000000;;			obj.LocationOfOrigin = ""
0000000000000000000000000000000000000000;;			config.AuthInfos[key] = obj
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, obj := range config.Clusters {
0000000000000000000000000000000000000000;;			obj.LocationOfOrigin = ""
0000000000000000000000000000000000000000;;			config.Clusters[key] = obj
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, obj := range config.Contexts {
0000000000000000000000000000000000000000;;			obj.LocationOfOrigin = ""
0000000000000000000000000000000000000000;;			config.Contexts[key] = obj
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func testSetNilMapsToEmpties(curr reflect.Value) {
0000000000000000000000000000000000000000;;		actualCurrValue := curr
0000000000000000000000000000000000000000;;		if curr.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			actualCurrValue = curr.Elem()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch actualCurrValue.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Map:
0000000000000000000000000000000000000000;;			for _, mapKey := range actualCurrValue.MapKeys() {
0000000000000000000000000000000000000000;;				currMapValue := actualCurrValue.MapIndex(mapKey)
0000000000000000000000000000000000000000;;				testSetNilMapsToEmpties(currMapValue)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case reflect.Struct:
0000000000000000000000000000000000000000;;			for fieldIndex := 0; fieldIndex < actualCurrValue.NumField(); fieldIndex++ {
0000000000000000000000000000000000000000;;				currFieldValue := actualCurrValue.Field(fieldIndex)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if currFieldValue.Kind() == reflect.Map && currFieldValue.IsNil() {
0000000000000000000000000000000000000000;;					newValue := reflect.MakeMap(currFieldValue.Type())
0000000000000000000000000000000000000000;;					currFieldValue.Set(newValue)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					testSetNilMapsToEmpties(currFieldValue.Addr())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
