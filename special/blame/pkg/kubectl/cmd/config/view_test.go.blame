0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d8fb8df23895ff552aa74eadfe4cbb02abffb844;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type viewClusterTest struct {
0000000000000000000000000000000000000000;;		description string
0000000000000000000000000000000000000000;;		config      clientcmdapi.Config //initiate kubectl config
0000000000000000000000000000000000000000;;		flags       []string            //kubectl config viw flags
0000000000000000000000000000000000000000;;		expected    string              //expect out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestViewCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Kind:       "Config",
0000000000000000000000000000000000000000;;			APIVersion: "v1",
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"minikube":   {Server: "https://192.168.99.100:8443"},
0000000000000000000000000000000000000000;;				"my-cluster": {Server: "https://192.168.0.1:3434"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"minikube":  {AuthInfo: "minikube", Cluster: "minikube"},
0000000000000000000000000000000000000000;;				"my-cluser": {AuthInfo: "mu-cluster", Cluster: "my-cluster"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			CurrentContext: "minikube",
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"minikube":  {Token: "minikube-token"},
0000000000000000000000000000000000000000;;				"my-cluser": {Token: "minikube-token"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := viewClusterTest{
0000000000000000000000000000000000000000;;			description: "Testing for kubectl config view",
0000000000000000000000000000000000000000;;			config:      conf,
0000000000000000000000000000000000000000;;			flags:       []string{},
0000000000000000000000000000000000000000;;			expected: `apiVersion: v1
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    server: https://192.168.99.100:8443
0000000000000000000000000000000000000000;;	  name: minikube
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    server: https://192.168.0.1:3434
0000000000000000000000000000000000000000;;	  name: my-cluster
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: minikube
0000000000000000000000000000000000000000;;	    user: minikube
0000000000000000000000000000000000000000;;	  name: minikube
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: my-cluster
0000000000000000000000000000000000000000;;	    user: mu-cluster
0000000000000000000000000000000000000000;;	  name: my-cluser
0000000000000000000000000000000000000000;;	current-context: minikube
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	preferences: {}
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: minikube
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: minikube-token
0000000000000000000000000000000000000000;;	- name: my-cluser
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: minikube-token` + "\n"}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestViewClusterMinify(t *testing.T) {
0000000000000000000000000000000000000000;;		conf := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			Kind:       "Config",
0000000000000000000000000000000000000000;;			APIVersion: "v1",
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"minikube":   {Server: "https://192.168.99.100:8443"},
0000000000000000000000000000000000000000;;				"my-cluster": {Server: "https://192.168.0.1:3434"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"minikube":  {AuthInfo: "minikube", Cluster: "minikube"},
0000000000000000000000000000000000000000;;				"my-cluser": {AuthInfo: "mu-cluster", Cluster: "my-cluster"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			CurrentContext: "minikube",
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"minikube":  {Token: "minikube-token"},
0000000000000000000000000000000000000000;;				"my-cluser": {Token: "minikube-token"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := viewClusterTest{
0000000000000000000000000000000000000000;;			description: "Testing for kubectl config view --minify=true",
0000000000000000000000000000000000000000;;			config:      conf,
0000000000000000000000000000000000000000;;			flags:       []string{"--minify=true"},
0000000000000000000000000000000000000000;;			expected: `apiVersion: v1
0000000000000000000000000000000000000000;;	clusters:
0000000000000000000000000000000000000000;;	- cluster:
0000000000000000000000000000000000000000;;	    server: https://192.168.99.100:8443
0000000000000000000000000000000000000000;;	  name: minikube
0000000000000000000000000000000000000000;;	contexts:
0000000000000000000000000000000000000000;;	- context:
0000000000000000000000000000000000000000;;	    cluster: minikube
0000000000000000000000000000000000000000;;	    user: minikube
0000000000000000000000000000000000000000;;	  name: minikube
0000000000000000000000000000000000000000;;	current-context: minikube
0000000000000000000000000000000000000000;;	kind: Config
0000000000000000000000000000000000000000;;	preferences: {}
0000000000000000000000000000000000000000;;	users:
0000000000000000000000000000000000000000;;	- name: minikube
0000000000000000000000000000000000000000;;	  user:
0000000000000000000000000000000000000000;;	    token: minikube-token` + "\n"}
0000000000000000000000000000000000000000;;		test.run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (test viewClusterTest) run(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeKubeFile, err := ioutil.TempFile(os.TempDir(), "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		err = clientcmd.WriteToFile(test.config, fakeKubeFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pathOptions := clientcmd.NewDefaultPathOptions()
0000000000000000000000000000000000000000;;		pathOptions.GlobalFile = fakeKubeFile.Name()
0000000000000000000000000000000000000000;;		pathOptions.EnvVar = ""
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdConfigView(buf, errBuf, pathOptions)
0000000000000000000000000000000000000000;;		cmd.Flags().Parse(test.flags)
0000000000000000000000000000000000000000;;		if err := cmd.Execute(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error executing command: %v,kubectl config view flags: %v", err, test.flags)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(test.expected) != 0 {
0000000000000000000000000000000000000000;;			if buf.String() != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Failed in %q\n expected %v\n but got %v\n", test.description, test.expected, buf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
