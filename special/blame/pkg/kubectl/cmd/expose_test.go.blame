0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
98ac71cb77040d1593707d44a3a1ed2c94fa9770;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunExposeService(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			args     []string
0000000000000000000000000000000000000000;;			ns       string
0000000000000000000000000000000000000000;;			calls    map[string]string
0000000000000000000000000000000000000000;;			input    runtime.Object
0000000000000000000000000000000000000000;;			flags    map[string]string
0000000000000000000000000000000000000000;;			output   runtime.Object
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;			status   int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-service-from-service-no-selector-defined",
0000000000000000000000000000000000000000;;				args: []string{"service", "baz"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/baz",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"protocol": "UDP", "port": "14", "name": "foo", "labels": "svc=test"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "test"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       14,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(14),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "service \"foo\" exposed",
0000000000000000000000000000000000000000;;				status:   200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-service-from-service",
0000000000000000000000000000000000000000;;				args: []string{"service", "baz"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/baz",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "func=stream", "protocol": "UDP", "port": "14", "name": "foo", "labels": "svc=test"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "test"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       14,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(14),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{"func": "stream"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "service \"foo\" exposed",
0000000000000000000000000000000000000000;;				status:   200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no-name-passed-from-the-cli",
0000000000000000000000000000000000000000;;				args: []string{"service", "mayor"},
0000000000000000000000000000000000000000;;				ns:   "default",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/default/services/mayor",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/default/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mayor", Namespace: "default", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"run": "this"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				// No --name flag specified below. Service will use the rc's name passed via the 'default-name' parameter
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "run=this", "port": "80", "labels": "runas=amayor"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "mayor", Namespace: "", Labels: map[string]string{"runas": "amayor"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{"run": "this"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "service \"mayor\" exposed",
0000000000000000000000000000000000000000;;				status:   200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-service",
0000000000000000000000000000000000000000;;				args: []string{"service", "baz"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/baz",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "func=stream", "protocol": "UDP", "port": "14", "name": "foo", "labels": "svc=test", "type": "LoadBalancer", "dry-run": "true"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "test"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       14,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(14),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{"func": "stream"},
0000000000000000000000000000000000000000;;						Type:     api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: 200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-affinity-service",
0000000000000000000000000000000000000000;;				args: []string{"service", "baz"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/baz",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "func=stream", "protocol": "UDP", "port": "14", "name": "foo", "labels": "svc=test", "type": "LoadBalancer", "session-affinity": "ClientIP", "dry-run": "true"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "test"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       14,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(14),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:        map[string]string{"func": "stream"},
0000000000000000000000000000000000000000;;						Type:            api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: 200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-service-cluster-ip",
0000000000000000000000000000000000000000;;				args: []string{"service", "baz"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/baz",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "func=stream", "protocol": "UDP", "port": "14", "name": "foo", "labels": "svc=test", "cluster-ip": "10.10.10.10", "dry-run": "true"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "test"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       14,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(14),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:  map[string]string{"func": "stream"},
0000000000000000000000000000000000000000;;						ClusterIP: "10.10.10.10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "service \"foo\" exposed",
0000000000000000000000000000000000000000;;				status:   200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-headless-service",
0000000000000000000000000000000000000000;;				args: []string{"service", "baz"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/baz",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "func=stream", "protocol": "UDP", "port": "14", "name": "foo", "labels": "svc=test", "cluster-ip": "None", "dry-run": "true"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "test"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       14,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(14),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector:  map[string]string{"func": "stream"},
0000000000000000000000000000000000000000;;						ClusterIP: api.ClusterIPNone,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "service \"foo\" exposed",
0000000000000000000000000000000000000000;;				status:   200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-headless-service-no-port",
0000000000000000000000000000000000000000;;				args: []string{"service", "baz"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/baz",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "func=stream", "name": "foo", "labels": "svc=test", "cluster-ip": "None", "dry-run": "true"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "test"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports:     []api.ServicePort{},
0000000000000000000000000000000000000000;;						Selector:  map[string]string{"func": "stream"},
0000000000000000000000000000000000000000;;						ClusterIP: api.ClusterIPNone,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "service \"foo\" exposed",
0000000000000000000000000000000000000000;;				status:   200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-from-file",
0000000000000000000000000000000000000000;;				args: []string{},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/redis-master",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "redis-master", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"app": "go"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"filename": "../../../examples/guestbook/redis-master-service.yaml", "selector": "func=stream", "protocol": "UDP", "port": "14", "name": "foo", "labels": "svc=test", "dry-run": "true"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Labels: map[string]string{"svc": "test"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       14,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(14),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{"func": "stream"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: 200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "truncate-name",
0000000000000000000000000000000000000000;;				args: []string{"pod", "a-name-that-is-toooo-big-for-a-service-because-it-can-only-handle-63-characters"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/pods/a-name-that-is-toooo-big-for-a-service-because-it-can-only-handle-63-characters",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "svc=frompod", "port": "90", "labels": "svc=frompod", "generator": "service/v2"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "a-name-that-is-toooo-big-for-a-service-because-it-can-only-handle-63-characters", Namespace: "", Labels: map[string]string{"svc": "frompod"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								Port:       90,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(90),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{"svc": "frompod"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: "service \"a-name-that-is-toooo-big-for-a-service-because-it-can-only-hand\" exposed",
0000000000000000000000000000000000000000;;				status:   200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-multiport-object",
0000000000000000000000000000000000000000;;				args: []string{"service", "foo"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/foo",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "multiport"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								Port:       443,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(443),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "svc=fromfoo", "generator": "service/v2", "name": "fromfoo", "dry-run": "true"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "fromfoo", Namespace: "", Labels: map[string]string{"svc": "multiport"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-1",
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-2",
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								Port:       443,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(443),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{"svc": "fromfoo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: 200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "expose-multiprotocol-object",
0000000000000000000000000000000000000000;;				args: []string{"service", "foo"},
0000000000000000000000000000000000000000;;				ns:   "test",
0000000000000000000000000000000000000000;;				calls: map[string]string{
0000000000000000000000000000000000000000;;					"GET":  "/namespaces/test/services/foo",
0000000000000000000000000000000000000000;;					"POST": "/namespaces/test/services",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				input: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "", Labels: map[string]string{"svc": "multiport"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       8080,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(8080),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       8081,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(8081),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				flags: map[string]string{"selector": "svc=fromfoo", "generator": "service/v2", "name": "fromfoo", "dry-run": "true"},
0000000000000000000000000000000000000000;;				output: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "fromfoo", Namespace: "", Labels: map[string]string{"svc": "multiport"}},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-1",
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-2",
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       8080,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(8080),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-3",
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								Port:       8081,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(8081),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{"svc": "fromfoo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				status: 200,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			f, tf, codec, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;			tf.Printer = &printers.JSONPrinter{}
0000000000000000000000000000000000000000;;			tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;				APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;				NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;				Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;					switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;					case p == test.calls[m] && m == "GET":
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: test.status, Header: defaultHeader(), Body: objBody(codec, test.input)}, nil
0000000000000000000000000000000000000000;;					case p == test.calls[m] && m == "POST":
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: test.status, Header: defaultHeader(), Body: objBody(codec, test.output)}, nil
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;						return nil, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tf.Namespace = test.ns
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cmd := NewCmdExposeService(f, buf)
0000000000000000000000000000000000000000;;			cmd.SetOutput(buf)
0000000000000000000000000000000000000000;;			for flag, value := range test.flags {
0000000000000000000000000000000000000000;;				cmd.Flags().Set(flag, value)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cmd.Run(cmd, test.args)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			out := buf.String()
0000000000000000000000000000000000000000;;			if _, ok := test.flags["dry-run"]; ok {
0000000000000000000000000000000000000000;;				buf.Reset()
0000000000000000000000000000000000000000;;				if err := tf.Printer.PrintObj(test.output, buf); err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: Unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				test.expected = fmt.Sprintf("service %q exposed (dry run)", test.flags["name"])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !strings.Contains(out, test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Unexpected output! Expected\n%s\ngot\n%s", test.name, test.expected, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
