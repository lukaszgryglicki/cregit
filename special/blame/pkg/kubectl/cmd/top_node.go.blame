0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2b934ba029573c39bdac328d720ca9bd8c22aa1e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		coreclient "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/metricsutil"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TopNodeOptions contains all the options for running the top-node cli command.
0000000000000000000000000000000000000000;;	type TopNodeOptions struct {
0000000000000000000000000000000000000000;;		ResourceName    string
0000000000000000000000000000000000000000;;		Selector        string
0000000000000000000000000000000000000000;;		NodeClient      coreclient.NodesGetter
0000000000000000000000000000000000000000;;		HeapsterOptions HeapsterTopOptions
0000000000000000000000000000000000000000;;		Client          *metricsutil.HeapsterMetricsClient
0000000000000000000000000000000000000000;;		Printer         *metricsutil.TopCmdPrinter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HeapsterTopOptions struct {
0000000000000000000000000000000000000000;;		Namespace string
0000000000000000000000000000000000000000;;		Service   string
0000000000000000000000000000000000000000;;		Scheme    string
0000000000000000000000000000000000000000;;		Port      string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *HeapsterTopOptions) Bind(flags *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		flags.StringVar(&o.Namespace, "heapster-namespace", metricsutil.DefaultHeapsterNamespace, "Namespace Heapster service is located in")
0000000000000000000000000000000000000000;;		flags.StringVar(&o.Service, "heapster-service", metricsutil.DefaultHeapsterService, "Name of Heapster service")
0000000000000000000000000000000000000000;;		flags.StringVar(&o.Scheme, "heapster-scheme", metricsutil.DefaultHeapsterScheme, "Scheme (http or https) to connect to Heapster as")
0000000000000000000000000000000000000000;;		flags.StringVar(&o.Port, "heapster-port", metricsutil.DefaultHeapsterPort, "Port name in service to use")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		topNodeLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			Display Resource (CPU/Memory/Storage) usage of nodes.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			The top-node command allows you to see the resource consumption of nodes.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		topNodeExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			  # Show metrics for all nodes
0000000000000000000000000000000000000000;;			  kubectl top node
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			  # Show metrics for a given node
0000000000000000000000000000000000000000;;			  kubectl top node NODE_NAME`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdTopNode(f cmdutil.Factory, out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &TopNodeOptions{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "node [NAME | -l label]",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Display Resource (CPU/Memory/Storage) usage of nodes"),
0000000000000000000000000000000000000000;;			Long:    topNodeLong,
0000000000000000000000000000000000000000;;			Example: topNodeExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				if err := options.Complete(f, cmd, args, out); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := options.Validate(); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(cmdutil.UsageErrorf(cmd, "%v", err))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := options.RunTopNode(); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Aliases: []string{"nodes", "no"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Flags().StringVarP(&options.Selector, "selector", "l", "", "Selector (label query) to filter on, supports '=', '==', and '!='.")
0000000000000000000000000000000000000000;;		options.HeapsterOptions.Bind(cmd.Flags())
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *TopNodeOptions) Complete(f cmdutil.Factory, cmd *cobra.Command, args []string, out io.Writer) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if len(args) == 1 {
0000000000000000000000000000000000000000;;			o.ResourceName = args[0]
0000000000000000000000000000000000000000;;		} else if len(args) > 1 {
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, "%s", cmd.Use)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset, err := f.ClientSet()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.NodeClient = clientset.Core()
0000000000000000000000000000000000000000;;		o.Client = metricsutil.NewHeapsterMetricsClient(clientset.Core(), o.HeapsterOptions.Namespace, o.HeapsterOptions.Scheme, o.HeapsterOptions.Service, o.HeapsterOptions.Port)
0000000000000000000000000000000000000000;;		o.Printer = metricsutil.NewTopCmdPrinter(out)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *TopNodeOptions) Validate() error {
0000000000000000000000000000000000000000;;		if len(o.ResourceName) > 0 && len(o.Selector) > 0 {
0000000000000000000000000000000000000000;;			return errors.New("only one of NAME or --selector can be provided")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(o.Selector) > 0 {
0000000000000000000000000000000000000000;;			_, err := labels.Parse(o.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o TopNodeOptions) RunTopNode() error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		selector := labels.Everything()
0000000000000000000000000000000000000000;;		if len(o.Selector) > 0 {
0000000000000000000000000000000000000000;;			selector, err = labels.Parse(o.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		metrics, err := o.Client.GetNodeMetrics(o.ResourceName, selector)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(metrics) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("metrics not available yet")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var nodes []api.Node
0000000000000000000000000000000000000000;;		if len(o.ResourceName) > 0 {
0000000000000000000000000000000000000000;;			node, err := o.NodeClient.Nodes().Get(o.ResourceName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			nodes = append(nodes, *node)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			nodeList, err := o.NodeClient.Nodes().List(metav1.ListOptions{
0000000000000000000000000000000000000000;;				LabelSelector: selector.String(),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			nodes = append(nodes, nodeList.Items...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allocatable := make(map[string]api.ResourceList)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, n := range nodes {
0000000000000000000000000000000000000000;;			allocatable[n.Name] = n.Status.Allocatable
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return o.Printer.PrintNodeMetrics(metrics, allocatable)
0000000000000000000000000000000000000000;;	}
