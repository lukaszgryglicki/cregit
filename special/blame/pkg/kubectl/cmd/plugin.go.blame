0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
44e20c6ab03d072b05da641781825ee8c6171a11;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/plugins"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		plugin_long = templates.LongDesc(`
0000000000000000000000000000000000000000;;			Runs a command-line plugin.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Plugins are subcommands that are not part of the major command-line distribution 
0000000000000000000000000000000000000000;;			and can even be provided by third-parties. Please refer to the documentation and 
0000000000000000000000000000000000000000;;			examples for more information about how to install and write your own plugins.`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdPlugin creates the command that is the top-level for plugin commands.
0000000000000000000000000000000000000000;;	func NewCmdPlugin(f cmdutil.Factory, in io.Reader, out, err io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		// Loads plugins and create commands for each plugin identified
0000000000000000000000000000000000000000;;		loadedPlugins, loadErr := f.PluginLoader().Load()
0000000000000000000000000000000000000000;;		if loadErr != nil {
0000000000000000000000000000000000000000;;			glog.V(1).Infof("Unable to load plugins: %v", loadErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "plugin NAME",
0000000000000000000000000000000000000000;;			Short: i18n.T("Runs a command-line plugin"),
0000000000000000000000000000000000000000;;			Long:  plugin_long,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				if len(loadedPlugins) == 0 {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(fmt.Errorf("no plugins installed."))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				cmdutil.DefaultSubCommandRun(err)(cmd, args)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(loadedPlugins) > 0 {
0000000000000000000000000000000000000000;;			pluginRunner := f.PluginRunner()
0000000000000000000000000000000000000000;;			for _, p := range loadedPlugins {
0000000000000000000000000000000000000000;;				cmd.AddCommand(NewCmdForPlugin(f, p, pluginRunner, in, out, err))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdForPlugin creates a command capable of running the provided plugin.
0000000000000000000000000000000000000000;;	func NewCmdForPlugin(f cmdutil.Factory, plugin *plugins.Plugin, runner plugins.PluginRunner, in io.Reader, out, errout io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		if !plugin.IsValid() {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     plugin.Name,
0000000000000000000000000000000000000000;;			Short:   plugin.ShortDesc,
0000000000000000000000000000000000000000;;			Long:    templates.LongDesc(plugin.LongDesc),
0000000000000000000000000000000000000000;;			Example: templates.Examples(plugin.Example),
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				if len(plugin.Command) == 0 {
0000000000000000000000000000000000000000;;					cmdutil.DefaultSubCommandRun(errout)(cmd, args)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				envProvider := &plugins.MultiEnvProvider{
0000000000000000000000000000000000000000;;					&plugins.PluginCallerEnvProvider{},
0000000000000000000000000000000000000000;;					&plugins.OSEnvProvider{},
0000000000000000000000000000000000000000;;					&plugins.PluginDescriptorEnvProvider{
0000000000000000000000000000000000000000;;						Plugin: plugin,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					&flagsPluginEnvProvider{
0000000000000000000000000000000000000000;;						cmd: cmd,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					&factoryAttrsPluginEnvProvider{
0000000000000000000000000000000000000000;;						factory: f,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				runningContext := plugins.RunningContext{
0000000000000000000000000000000000000000;;					In:          in,
0000000000000000000000000000000000000000;;					Out:         out,
0000000000000000000000000000000000000000;;					ErrOut:      errout,
0000000000000000000000000000000000000000;;					Args:        args,
0000000000000000000000000000000000000000;;					EnvProvider: envProvider,
0000000000000000000000000000000000000000;;					WorkingDir:  plugin.Dir,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if err := runner.Run(plugin, runningContext); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, childPlugin := range plugin.Tree {
0000000000000000000000000000000000000000;;			cmd.AddCommand(NewCmdForPlugin(f, childPlugin, runner, in, out, errout))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type flagsPluginEnvProvider struct {
0000000000000000000000000000000000000000;;		cmd *cobra.Command
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *flagsPluginEnvProvider) Env() (plugins.EnvList, error) {
0000000000000000000000000000000000000000;;		prefix := "KUBECTL_PLUGINS_GLOBAL_FLAG_"
0000000000000000000000000000000000000000;;		env := plugins.EnvList{}
0000000000000000000000000000000000000000;;		p.cmd.Flags().VisitAll(func(flag *pflag.Flag) {
0000000000000000000000000000000000000000;;			env = append(env, plugins.FlagToEnv(flag, prefix))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return env, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type factoryAttrsPluginEnvProvider struct {
0000000000000000000000000000000000000000;;		factory cmdutil.Factory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *factoryAttrsPluginEnvProvider) Env() (plugins.EnvList, error) {
0000000000000000000000000000000000000000;;		cmdNamespace, _, err := p.factory.DefaultNamespace()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return plugins.EnvList{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return plugins.EnvList{
0000000000000000000000000000000000000000;;			plugins.Env{N: "KUBECTL_PLUGINS_CURRENT_NAMESPACE", V: cmdNamespace},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
