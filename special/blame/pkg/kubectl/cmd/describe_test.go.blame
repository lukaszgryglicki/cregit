0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
4eab0655b8ebe70748db24e78fa71c855efe7db3;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verifies that schemas that are not in the master tree of Kubernetes can be retrieved via Get.
0000000000000000000000000000000000000000;;	func TestDescribeUnknownSchemaObject(t *testing.T) {
0000000000000000000000000000000000000000;;		d := &testDescriber{Output: "test output"}
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewTestFactory()
0000000000000000000000000000000000000000;;		tf.Describer = d
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, cmdtesting.NewInternalType("", "", "foo"))},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "non-default"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		buferr := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDescribe(f, buf, buferr)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"type", "foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if d.Name != "foo" || d.Namespace != "" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected describer: %#v", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != fmt.Sprintf("%s", d.Output) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verifies that schemas that are not in the master tree of Kubernetes can be retrieved via Get.
0000000000000000000000000000000000000000;;	func TestDescribeUnknownNamespacedSchemaObject(t *testing.T) {
0000000000000000000000000000000000000000;;		d := &testDescriber{Output: "test output"}
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewTestFactory()
0000000000000000000000000000000000000000;;		tf.Describer = d
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, cmdtesting.NewInternalNamespacedType("", "", "foo", "non-default"))},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "non-default"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		buferr := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDescribe(f, buf, buferr)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"namespacedtype", "foo"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if d.Name != "foo" || d.Namespace != "non-default" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected describer: %#v", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != fmt.Sprintf("%s", d.Output) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeObject(t *testing.T) {
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		d := &testDescriber{Output: "test output"}
0000000000000000000000000000000000000000;;		tf.Describer = d
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		buferr := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDescribe(f, buf, buferr)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy/redis-master-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if d.Name != "redis-master" || d.Namespace != "test" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected describer: %#v", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != fmt.Sprintf("%s", d.Output) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeListObjects(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		d := &testDescriber{Output: "test output"}
0000000000000000000000000000000000000000;;		tf.Describer = d
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		buferr := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDescribe(f, buf, buferr)
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;		if buf.String() != fmt.Sprintf("%s\n\n%s", d.Output, d.Output) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeObjectShowEvents(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		d := &testDescriber{Output: "test output"}
0000000000000000000000000000000000000000;;		tf.Describer = d
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		buferr := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDescribe(f, buf, buferr)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("show-events", "true")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;		if d.Settings.ShowEvents != true {
0000000000000000000000000000000000000000;;			t.Errorf("ShowEvents = true expected, got ShowEvents = %v", d.Settings.ShowEvents)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDescribeObjectSkipEvents(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		d := &testDescriber{Output: "test output"}
0000000000000000000000000000000000000000;;		tf.Describer = d
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Resp:                 &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		buferr := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDescribe(f, buf, buferr)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("show-events", "false")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods"})
0000000000000000000000000000000000000000;;		if d.Settings.ShowEvents != false {
0000000000000000000000000000000000000000;;			t.Errorf("ShowEvents = false expected, got ShowEvents = %v", d.Settings.ShowEvents)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
