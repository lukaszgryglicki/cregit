0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5f5f7481cc7678a58e6a50bc349da87412bbe870;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractFileSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			spec              string
0000000000000000000000000000000000000000;;			expectedPod       string
0000000000000000000000000000000000000000;;			expectedNamespace string
0000000000000000000000000000000000000000;;			expectedFile      string
0000000000000000000000000000000000000000;;			expectErr         bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:              "namespace/pod:/some/file",
0000000000000000000000000000000000000000;;				expectedPod:       "pod",
0000000000000000000000000000000000000000;;				expectedNamespace: "namespace",
0000000000000000000000000000000000000000;;				expectedFile:      "/some/file",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:         "pod:/some/file",
0000000000000000000000000000000000000000;;				expectedPod:  "pod",
0000000000000000000000000000000000000000;;				expectedFile: "/some/file",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:         "/some/file",
0000000000000000000000000000000000000000;;				expectedFile: "/some/file",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:      "some:bad:spec",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			spec, err := extractFileSpec(test.spec)
0000000000000000000000000000000000000000;;			if test.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil && !test.expectErr {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if spec.PodName != test.expectedPod {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %s, saw: %s", test.expectedPod, spec.PodName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if spec.PodNamespace != test.expectedNamespace {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %s, saw: %s", test.expectedNamespace, spec.PodNamespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if spec.File != test.expectedFile {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %s, saw: %s", test.expectedFile, spec.File)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			input    string
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "/foo/bar",
0000000000000000000000000000000000000000;;				expected: "foo/bar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:    "foo/bar",
0000000000000000000000000000000000000000;;				expected: "foo/bar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			out := getPrefix(test.input)
0000000000000000000000000000000000000000;;			if out != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %s, saw: %s", test.expected, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTarUntar(t *testing.T) {
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir(os.TempDir(), "input")
0000000000000000000000000000000000000000;;		dir2, err2 := ioutil.TempDir(os.TempDir(), "output")
0000000000000000000000000000000000000000;;		if err != nil || err2 != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v | %v", err, err2)
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error cleaning up: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := os.RemoveAll(dir2); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error cleaning up: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		files := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			data string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "foo",
0000000000000000000000000000000000000000;;				data: "foobarbaz",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "dir/blah",
0000000000000000000000000000000000000000;;				data: "bazblahfoo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "some/other/directory",
0000000000000000000000000000000000000000;;				data: "with more data here",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "blah",
0000000000000000000000000000000000000000;;				data: "same file name different data",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, file := range files {
0000000000000000000000000000000000000000;;			filepath := path.Join(dir, file.name)
0000000000000000000000000000000000000000;;			if err := os.MkdirAll(path.Dir(filepath), 0755); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			f, err := os.Create(filepath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer f.Close()
0000000000000000000000000000000000000000;;			if _, err := io.Copy(f, bytes.NewBuffer([]byte(file.data))); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				t.FailNow()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		writer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		if err := makeTar(dir, writer); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reader := bytes.NewBuffer(writer.Bytes())
0000000000000000000000000000000000000000;;		if err := untarAll(reader, dir2, ""); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, file := range files {
0000000000000000000000000000000000000000;;			filepath := path.Join(dir, file.name)
0000000000000000000000000000000000000000;;			f, err := os.Open(filepath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer f.Close()
0000000000000000000000000000000000000000;;			buff := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			io.Copy(buff, f)
0000000000000000000000000000000000000000;;			if file.data != string(buff.Bytes()) {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %s, saw: %s", file.data, string(buff.Bytes()))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
