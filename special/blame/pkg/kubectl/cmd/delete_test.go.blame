0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
56f6becb3b4520f244736958ad2567ee95d3690d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/dynamic"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var unstructuredSerializer = dynamic.ContentConfig().NegotiatedSerializer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteObjectByTuple(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// replication controller with cascade off
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master-controller" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// secret with cascade on, but no client-side reaper
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/secrets/mysecret" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					// Ensures no GET is performed when deleting by name
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("namespace", "test")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"replicationcontrollers/redis-master-controller"})
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/redis-master-controller\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test cascading delete of object without client-side reaper doesn't make GET requests
0000000000000000000000000000000000000000;;		buf, errBuf = bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd = NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("namespace", "test")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"secrets/mysecret"})
0000000000000000000000000000000000000000;;		if buf.String() != "secret/mysecret\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func hasExpectedOrphanDependents(body io.ReadCloser, expectedOrphanDependents *bool) bool {
0000000000000000000000000000000000000000;;		if body == nil || expectedOrphanDependents == nil {
0000000000000000000000000000000000000000;;			return body == nil && expectedOrphanDependents == nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var parsedBody metav1.DeleteOptions
0000000000000000000000000000000000000000;;		rawBody, _ := ioutil.ReadAll(body)
0000000000000000000000000000000000000000;;		json.Unmarshal(rawBody, &parsedBody)
0000000000000000000000000000000000000000;;		if parsedBody.OrphanDependents == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *expectedOrphanDependents == *parsedBody.OrphanDependents
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Tests that DeleteOptions.OrphanDependents is appropriately set while deleting objects.
0000000000000000000000000000000000000000;;	func TestOrphanDependentsInDeleteObject(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		var expectedOrphanDependents *bool
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m, b := req.URL.Path, req.Method, req.Body; {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/secrets/mysecret" && m == "DELETE" && hasExpectedOrphanDependents(b, expectedOrphanDependents):
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DeleteOptions.OrphanDependents should be false, when cascade is true (default).
0000000000000000000000000000000000000000;;		falseVar := false
0000000000000000000000000000000000000000;;		expectedOrphanDependents = &falseVar
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("namespace", "test")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"secrets/mysecret"})
0000000000000000000000000000000000000000;;		if buf.String() != "secret/mysecret\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test that delete options should be set to orphan when cascade is false.
0000000000000000000000000000000000000000;;		trueVar := true
0000000000000000000000000000000000000000;;		expectedOrphanDependents = &trueVar
0000000000000000000000000000000000000000;;		buf, errBuf = bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd = NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("namespace", "test")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"secrets/mysecret"})
0000000000000000000000000000000000000000;;		if buf.String() != "secret/mysecret\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteNamedObject(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// replication controller with cascade off
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master-controller" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// secret with cascade on, but no client-side reaper
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/secrets/mysecret" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					// Ensures no GET is performed when deleting by name
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("namespace", "test")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"replicationcontrollers", "redis-master-controller"})
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/redis-master-controller\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test cascading delete of object without client-side reaper doesn't make GET requests
0000000000000000000000000000000000000000;;		buf, errBuf = bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		cmd = NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("namespace", "test")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"secrets", "mysecret"})
0000000000000000000000000000000000000000;;		if buf.String() != "secret/mysecret\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteObject(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy/redis-master-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// uses the name from the file, not the response
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/redis-master\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeReaper struct {
0000000000000000000000000000000000000000;;		namespace, name string
0000000000000000000000000000000000000000;;		timeout         time.Duration
0000000000000000000000000000000000000000;;		deleteOptions   *metav1.DeleteOptions
0000000000000000000000000000000000000000;;		err             error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *fakeReaper) Stop(namespace, name string, timeout time.Duration, gracePeriod *metav1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		r.namespace, r.name = namespace, name
0000000000000000000000000000000000000000;;		r.timeout = timeout
0000000000000000000000000000000000000000;;		r.deleteOptions = gracePeriod
0000000000000000000000000000000000000000;;		return r.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeReaperFactory struct {
0000000000000000000000000000000000000000;;		cmdutil.Factory
0000000000000000000000000000000000000000;;		reaper kubectl.Reaper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeReaperFactory) Reaper(mapping *meta.RESTMapping) (kubectl.Reaper, error) {
0000000000000000000000000000000000000000;;		return f.reaper, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteObjectGraceZero(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		pods, _, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		objectDeletionWaitInterval = time.Millisecond
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				t.Logf("got request %s %s", req.Method, req.URL.Path)
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/pods/nginx" && m == "GET":
0000000000000000000000000000000000000000;;					count++
0000000000000000000000000000000000000000;;					switch count {
0000000000000000000000000000000000000000;;					case 1, 2, 3:
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods.Items[0])}, nil
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 404, Header: defaultHeader(), Body: objBody(codec, &metav1.Status{})}, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case p == "/api/v1/namespaces/test" && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &api.Namespace{})}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/pods/nginx" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reaper := &fakeReaper{}
0000000000000000000000000000000000000000;;		fake := &fakeReaperFactory{Factory: f, reaper: reaper}
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(fake, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("grace-period", "0")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pod/nginx"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// uses the name from the file, not the response
0000000000000000000000000000000000000000;;		if buf.String() != "pod/nginx\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s\n---\n%s", buf.String(), errBuf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if reaper.deleteOptions == nil || reaper.deleteOptions.GracePeriodSeconds == nil || *reaper.deleteOptions.GracePeriodSeconds != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected reaper options: %#v", reaper)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if count != 4 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected calls to GET: %d", count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteObjectNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 404, Header: defaultHeader(), Body: stringBody("")}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		options := &DeleteOptions{
0000000000000000000000000000000000000000;;			FilenameOptions: resource.FilenameOptions{
0000000000000000000000000000000000000000;;				Filenames: []string{"../../../examples/guestbook/legacy/redis-master-controller.yaml"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			GracePeriod: -1,
0000000000000000000000000000000000000000;;			Cascade:     false,
0000000000000000000000000000000000000000;;			Output:      "name",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := options.Complete(f, buf, errBuf, []string{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = options.RunDelete()
0000000000000000000000000000000000000000;;		if err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: expected NotFound, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteObjectIgnoreNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 404, Header: defaultHeader(), Body: stringBody("")}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy/redis-master-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("ignore-not-found", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteAllNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, svc, _ := testData()
0000000000000000000000000000000000000000;;		// Add an item to the list which will result in a 404 on delete
0000000000000000000000000000000000000000;;		svc.Items = append(svc.Items, api.Service{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})
0000000000000000000000000000000000000000;;		notFoundError := &errors.NewNotFound(api.Resource("services"), "foo").ErrStatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services" && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, svc)}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/foo" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 404, Header: defaultHeader(), Body: objBody(codec, notFoundError)}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/baz" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure we can explicitly choose to fail on NotFound errors, even with --all
0000000000000000000000000000000000000000;;		options := &DeleteOptions{
0000000000000000000000000000000000000000;;			FilenameOptions: resource.FilenameOptions{},
0000000000000000000000000000000000000000;;			GracePeriod:     -1,
0000000000000000000000000000000000000000;;			Cascade:         false,
0000000000000000000000000000000000000000;;			DeleteAll:       true,
0000000000000000000000000000000000000000;;			IgnoreNotFound:  false,
0000000000000000000000000000000000000000;;			Output:          "name",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := options.Complete(f, buf, errBuf, []string{"services"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = options.RunDelete()
0000000000000000000000000000000000000000;;		if err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: expected NotFound, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteAllIgnoreNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, svc, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add an item to the list which will result in a 404 on delete
0000000000000000000000000000000000000000;;		svc.Items = append(svc.Items, api.Service{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})
0000000000000000000000000000000000000000;;		notFoundError := &errors.NewNotFound(api.Resource("services"), "foo").ErrStatus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services" && m == "GET":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, svc)}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/foo" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 404, Header: defaultHeader(), Body: objBody(codec, notFoundError)}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/baz" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("all", "true")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"services"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "service/baz\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteMultipleObject(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, svc, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/frontend" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy/redis-master-controller.yaml")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/frontend-service.yaml")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/redis-master\nservice/frontend\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteMultipleObjectContinueOnMissing(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, svc, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/redis-master" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 404, Header: defaultHeader(), Body: stringBody("")}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/frontend" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		options := &DeleteOptions{
0000000000000000000000000000000000000000;;			FilenameOptions: resource.FilenameOptions{
0000000000000000000000000000000000000000;;				Filenames: []string{"../../../examples/guestbook/legacy/redis-master-controller.yaml", "../../../examples/guestbook/frontend-service.yaml"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			GracePeriod: -1,
0000000000000000000000000000000000000000;;			Cascade:     false,
0000000000000000000000000000000000000000;;			Output:      "name",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := options.Complete(f, buf, errBuf, []string{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = options.RunDelete()
0000000000000000000000000000000000000000;;		if err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: expected NotFound, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "service/frontend\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteMultipleResourcesWithTheSameName(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, svc, rc := testData()
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/baz" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/replicationcontrollers/foo" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/baz" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services/foo" && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					// Ensures no GET is performed when deleting by name
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("namespace", "test")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"replicationcontrollers,services", "baz", "foo"})
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/baz\nreplicationcontroller/foo\nservice/baz\nservice/foo\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteDirectory(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		_, _, rc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case strings.HasPrefix(p, "/namespaces/test/replicationcontrollers/") && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &rc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("filename", "../../../examples/guestbook/legacy")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "replicationcontroller/frontend\nreplicationcontroller/redis-master\nreplicationcontroller/redis-slave\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteMultipleSelector(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		pods, svc, _ := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f, tf, codec, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;		tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;		tf.UnstructuredClient = &fake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;			Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/pods" && m == "GET":
0000000000000000000000000000000000000000;;					if req.URL.Query().Get(metav1.LabelSelectorQueryParam(api.Registry.GroupOrDie(api.GroupName).GroupVersion.String())) != "a=b" {
0000000000000000000000000000000000000000;;						t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, pods)}, nil
0000000000000000000000000000000000000000;;				case p == "/namespaces/test/services" && m == "GET":
0000000000000000000000000000000000000000;;					if req.URL.Query().Get(metav1.LabelSelectorQueryParam(api.Registry.GroupOrDie(api.GroupName).GroupVersion.String())) != "a=b" {
0000000000000000000000000000000000000000;;						t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, svc)}, nil
0000000000000000000000000000000000000000;;				case strings.HasPrefix(p, "/namespaces/test/pods/") && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &pods.Items[0])}, nil
0000000000000000000000000000000000000000;;				case strings.HasPrefix(p, "/namespaces/test/services/") && m == "DELETE":
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: objBody(codec, &svc.Items[0])}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tf.Namespace = "test"
0000000000000000000000000000000000000000;;		buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := NewCmdDelete(f, buf, errBuf)
0000000000000000000000000000000000000000;;		cmd.Flags().Set("selector", "a=b")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("cascade", "false")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("output", "name")
0000000000000000000000000000000000000000;;		cmd.Run(cmd, []string{"pods,services"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf.String() != "pod/foo\npod/bar\nservice/baz\n" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected output: %s", buf.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceErrors(t *testing.T) {
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			args  []string
0000000000000000000000000000000000000000;;			errFn func(error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no args": {
0000000000000000000000000000000000000000;;				args:  []string{},
0000000000000000000000000000000000000000;;				errFn: func(err error) bool { return strings.Contains(err.Error(), "You must provide one or more resources") },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"resources but no selectors": {
0000000000000000000000000000000000000000;;				args: []string{"pods"},
0000000000000000000000000000000000000000;;				errFn: func(err error) bool {
0000000000000000000000000000000000000000;;					return strings.Contains(err.Error(), "resource(s) were provided, but no name, label selector, or --all flag specified")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multiple resources but no selectors": {
0000000000000000000000000000000000000000;;				args: []string{"pods,deployments"},
0000000000000000000000000000000000000000;;				errFn: func(err error) bool {
0000000000000000000000000000000000000000;;					return strings.Contains(err.Error(), "resource(s) were provided, but no name, label selector, or --all flag specified")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, testCase := range testCases {
0000000000000000000000000000000000000000;;			f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;			tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;			tf.Namespace = "test"
0000000000000000000000000000000000000000;;			tf.ClientConfig = &restclient.Config{ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			buf, errBuf := bytes.NewBuffer([]byte{}), bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			options := &DeleteOptions{
0000000000000000000000000000000000000000;;				FilenameOptions: resource.FilenameOptions{},
0000000000000000000000000000000000000000;;				GracePeriod:     -1,
0000000000000000000000000000000000000000;;				Cascade:         false,
0000000000000000000000000000000000000000;;				Output:          "name",
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := options.Complete(f, buf, errBuf, testCase.args)
0000000000000000000000000000000000000000;;			if !testCase.errFn(err) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tf.Printer.(*testPrinter).Objects != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected print to default printer")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf.Len() > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("buffer should be empty: %s", string(buf.Bytes()))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
