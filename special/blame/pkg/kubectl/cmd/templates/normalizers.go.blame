0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
38fff57e32fdf56845e03791a2cc829632ea16c9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package templates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/MakeNowJust/heredoc"
0000000000000000000000000000000000000000;;		"github.com/russross/blackfriday"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const Indentation = `  `
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LongDesc normalizes a command's long description to follow the conventions.
0000000000000000000000000000000000000000;;	func LongDesc(s string) string {
0000000000000000000000000000000000000000;;		if len(s) == 0 {
0000000000000000000000000000000000000000;;			return s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return normalizer{s}.heredoc().markdown().trim().string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Examples normalizes a command's examples to follow the conventions.
0000000000000000000000000000000000000000;;	func Examples(s string) string {
0000000000000000000000000000000000000000;;		if len(s) == 0 {
0000000000000000000000000000000000000000;;			return s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return normalizer{s}.trim().indent().string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Normalize perform all required normalizations on a given command.
0000000000000000000000000000000000000000;;	func Normalize(cmd *cobra.Command) *cobra.Command {
0000000000000000000000000000000000000000;;		if len(cmd.Long) > 0 {
0000000000000000000000000000000000000000;;			cmd.Long = LongDesc(cmd.Long)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(cmd.Example) > 0 {
0000000000000000000000000000000000000000;;			cmd.Example = Examples(cmd.Example)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NormalizeAll perform all required normalizations in the entire command tree.
0000000000000000000000000000000000000000;;	func NormalizeAll(cmd *cobra.Command) *cobra.Command {
0000000000000000000000000000000000000000;;		if cmd.HasSubCommands() {
0000000000000000000000000000000000000000;;			for _, subCmd := range cmd.Commands() {
0000000000000000000000000000000000000000;;				NormalizeAll(subCmd)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		Normalize(cmd)
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type normalizer struct {
0000000000000000000000000000000000000000;;		string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s normalizer) markdown() normalizer {
0000000000000000000000000000000000000000;;		bytes := []byte(s.string)
0000000000000000000000000000000000000000;;		formatted := blackfriday.Markdown(bytes, &ASCIIRenderer{Indentation: Indentation}, 0)
0000000000000000000000000000000000000000;;		s.string = string(formatted)
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s normalizer) heredoc() normalizer {
0000000000000000000000000000000000000000;;		s.string = heredoc.Doc(s.string)
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s normalizer) trim() normalizer {
0000000000000000000000000000000000000000;;		s.string = strings.TrimSpace(s.string)
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s normalizer) indent() normalizer {
0000000000000000000000000000000000000000;;		indentedLines := []string{}
0000000000000000000000000000000000000000;;		for _, line := range strings.Split(s.string, "\n") {
0000000000000000000000000000000000000000;;			trimmed := strings.TrimSpace(line)
0000000000000000000000000000000000000000;;			indented := Indentation + trimmed
0000000000000000000000000000000000000000;;			indentedLines = append(indentedLines, indented)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.string = strings.Join(indentedLines, "\n")
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
