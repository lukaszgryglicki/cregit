0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2b21b280daf4df9a96625adaeb05cbdec7d2ea36;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package templates
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CommandGroup struct {
0000000000000000000000000000000000000000;;		Message  string
0000000000000000000000000000000000000000;;		Commands []*cobra.Command
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CommandGroups []CommandGroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g CommandGroups) Add(c *cobra.Command) {
0000000000000000000000000000000000000000;;		for _, group := range g {
0000000000000000000000000000000000000000;;			for _, command := range group.Commands {
0000000000000000000000000000000000000000;;				c.AddCommand(command)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g CommandGroups) Has(c *cobra.Command) bool {
0000000000000000000000000000000000000000;;		for _, group := range g {
0000000000000000000000000000000000000000;;			for _, command := range group.Commands {
0000000000000000000000000000000000000000;;				if command == c {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AddAdditionalCommands(g CommandGroups, message string, cmds []*cobra.Command) CommandGroups {
0000000000000000000000000000000000000000;;		group := CommandGroup{Message: message}
0000000000000000000000000000000000000000;;		for _, c := range cmds {
0000000000000000000000000000000000000000;;			// Don't show commands that have no short description
0000000000000000000000000000000000000000;;			if !g.Has(c) && len(c.Short) != 0 {
0000000000000000000000000000000000000000;;				group.Commands = append(group.Commands, c)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(group.Commands) == 0 {
0000000000000000000000000000000000000000;;			return g
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return append(g, group)
0000000000000000000000000000000000000000;;	}
