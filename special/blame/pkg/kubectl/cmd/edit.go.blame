0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f5dd30c85056db9ada0222d6954c0704d9d0a991;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/util/editor"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		editLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			Edit a resource from the default editor.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			The edit command allows you to directly edit any API resource you can retrieve via the
0000000000000000000000000000000000000000;;			command line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR
0000000000000000000000000000000000000000;;			environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows.
0000000000000000000000000000000000000000;;			You can edit multiple objects, although changes are applied one at a time. The command
0000000000000000000000000000000000000000;;			accepts filenames as well as command line arguments, although the files you point to must
0000000000000000000000000000000000000000;;			be previously saved versions of resources.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Editing is done with the API version used to fetch the resource.
0000000000000000000000000000000000000000;;			To edit using a specific API version, fully-qualify the resource, version, and group.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			The default format is YAML. To edit in JSON, specify "-o json".
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			The flag --windows-line-endings can be used to force Windows line endings,
0000000000000000000000000000000000000000;;			otherwise the default for your operating system will be used.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			In the event an error occurs while updating, a temporary file will be created on disk
0000000000000000000000000000000000000000;;			that contains your unapplied changes. The most common error when updating a resource
0000000000000000000000000000000000000000;;			is another editor changing the resource on the server. When this occurs, you will have
0000000000000000000000000000000000000000;;			to apply your changes to the newer version of the resource, or update your temporary
0000000000000000000000000000000000000000;;			saved copy to include the latest resource version.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		editExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Edit the service named 'docker-registry':
0000000000000000000000000000000000000000;;			kubectl edit svc/docker-registry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Use an alternative editor
0000000000000000000000000000000000000000;;			KUBE_EDITOR="nano" kubectl edit svc/docker-registry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Edit the job 'myjob' in JSON using the v1 API format:
0000000000000000000000000000000000000000;;			kubectl edit job.v1.batch/myjob -o json
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation:
0000000000000000000000000000000000000000;;			kubectl edit deployment/mydeployment -o yaml --save-config`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdEdit(f cmdutil.Factory, out, errOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &editor.EditOptions{
0000000000000000000000000000000000000000;;			EditMode: editor.NormalEditMode,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// retrieve a list of handled resources from printer as valid args
0000000000000000000000000000000000000000;;		validArgs, argAliases := []string{}, []string{}
0000000000000000000000000000000000000000;;		p, err := f.Printer(nil, printers.PrintOptions{
0000000000000000000000000000000000000000;;			ColumnLabels: []string{},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;		if p != nil {
0000000000000000000000000000000000000000;;			validArgs = p.HandledResources()
0000000000000000000000000000000000000000;;			argAliases = kubectl.ResourceAliases(validArgs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "edit (RESOURCE/NAME | -f FILENAME)",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Edit a resource on the server"),
0000000000000000000000000000000000000000;;			Long:    editLong,
0000000000000000000000000000000000000000;;			Example: fmt.Sprintf(editExample),
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				options.ChangeCause = f.Command(cmd, false)
0000000000000000000000000000000000000000;;				if err := options.Complete(f, out, errOut, args); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := options.Run(); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ValidArgs:  validArgs,
0000000000000000000000000000000000000000;;			ArgAliases: argAliases,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		usage := "to use to edit the resource"
0000000000000000000000000000000000000000;;		cmdutil.AddFilenameOptionFlags(cmd, &options.FilenameOptions, usage)
0000000000000000000000000000000000000000;;		cmdutil.AddValidateOptionFlags(cmd, &options.ValidateOptions)
0000000000000000000000000000000000000000;;		cmd.Flags().StringVarP(&options.Output, "output", "o", "yaml", "Output format. One of: yaml|json.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().BoolVar(&options.WindowsLineEndings, "windows-line-endings", runtime.GOOS == "windows",
0000000000000000000000000000000000000000;;			"Defaults to the line ending native to your platform.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmdutil.AddApplyAnnotationVarFlags(cmd, &options.ApplyAnnotation)
0000000000000000000000000000000000000000;;		cmdutil.AddRecordVarFlag(cmd, &options.Record)
0000000000000000000000000000000000000000;;		cmdutil.AddInclude3rdPartyVarFlags(cmd, &options.Include3rdParty)
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
