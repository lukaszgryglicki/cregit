0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cbdab4ce8e41afdca728fb5a6e41d63e53c64f5e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var helpLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;		Help provides help for any command in the application.
0000000000000000000000000000000000000000;;		Simply type kubectl help [path to command] for full details.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdHelp() *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:   "help [command] | STRING_TO_SEARCH",
0000000000000000000000000000000000000000;;			Short: i18n.T("Help about any command"),
0000000000000000000000000000000000000000;;			Long:  helpLong,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Run: RunHelp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RunHelp(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;		foundCmd, _, err := cmd.Root().Find(args)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NOTE(andreykurilin): actually, I did not find any cases when foundCmd can be nil,
0000000000000000000000000000000000000000;;		//   but let's make this check since it is included in original code of initHelpCmd
0000000000000000000000000000000000000000;;		//   from github.com/spf13/cobra
0000000000000000000000000000000000000000;;		if foundCmd == nil {
0000000000000000000000000000000000000000;;			cmd.Printf("Unknown help topic %#q.\n", args)
0000000000000000000000000000000000000000;;			cmd.Root().Usage()
0000000000000000000000000000000000000000;;		} else if err != nil {
0000000000000000000000000000000000000000;;			// print error message at first, since it can contain suggestions
0000000000000000000000000000000000000000;;			cmd.Println(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			argsString := strings.Join(args, " ")
0000000000000000000000000000000000000000;;			var matchedMsgIsPrinted bool = false
0000000000000000000000000000000000000000;;			for _, foundCmd := range foundCmd.Commands() {
0000000000000000000000000000000000000000;;				if strings.Contains(foundCmd.Short, argsString) {
0000000000000000000000000000000000000000;;					if !matchedMsgIsPrinted {
0000000000000000000000000000000000000000;;						cmd.Printf("Matchers of string '%s' in short descriptions of commands: \n", argsString)
0000000000000000000000000000000000000000;;						matchedMsgIsPrinted = true
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					cmd.Printf("  %-14s %s\n", foundCmd.Name(), foundCmd.Short)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !matchedMsgIsPrinted {
0000000000000000000000000000000000000000;;				// if nothing is found, just print usage
0000000000000000000000000000000000000000;;				cmd.Root().Usage()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if len(args) == 0 {
0000000000000000000000000000000000000000;;				// help message for help command :)
0000000000000000000000000000000000000000;;				foundCmd = cmd
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			helpFunc := foundCmd.HelpFunc()
0000000000000000000000000000000000000000;;			helpFunc(foundCmd, args)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
