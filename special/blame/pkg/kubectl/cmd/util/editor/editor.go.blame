0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f5dd30c85056db9ada0222d6954c0704d9d0a991;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package editor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/util/term"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// sorry, blame Git
0000000000000000000000000000000000000000;;		// TODO: on Windows rely on 'start' to launch the editor associated
0000000000000000000000000000000000000000;;		// with the given file type. If we can't because of the need of
0000000000000000000000000000000000000000;;		// blocking, use a script with 'ftype' and 'assoc' to detect it.
0000000000000000000000000000000000000000;;		defaultEditor = "vi"
0000000000000000000000000000000000000000;;		defaultShell  = "/bin/bash"
0000000000000000000000000000000000000000;;		windowsEditor = "notepad"
0000000000000000000000000000000000000000;;		windowsShell  = "cmd"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Editor struct {
0000000000000000000000000000000000000000;;		Args  []string
0000000000000000000000000000000000000000;;		Shell bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultEditor creates a struct Editor that uses the OS environment to
0000000000000000000000000000000000000000;;	// locate the editor program, looking at EDITOR environment variable to find
0000000000000000000000000000000000000000;;	// the proper command line. If the provided editor has no spaces, or no quotes,
0000000000000000000000000000000000000000;;	// it is treated as a bare command to be loaded. Otherwise, the string will
0000000000000000000000000000000000000000;;	// be passed to the user's shell for execution.
0000000000000000000000000000000000000000;;	func NewDefaultEditor(envs []string) Editor {
0000000000000000000000000000000000000000;;		args, shell := defaultEnvEditor(envs)
0000000000000000000000000000000000000000;;		return Editor{
0000000000000000000000000000000000000000;;			Args:  args,
0000000000000000000000000000000000000000;;			Shell: shell,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultEnvShell() []string {
0000000000000000000000000000000000000000;;		shell := os.Getenv("SHELL")
0000000000000000000000000000000000000000;;		if len(shell) == 0 {
0000000000000000000000000000000000000000;;			shell = platformize(defaultShell, windowsShell)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		flag := "-c"
0000000000000000000000000000000000000000;;		if shell == windowsShell {
0000000000000000000000000000000000000000;;			flag = "/C"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return []string{shell, flag}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultEnvEditor(envs []string) ([]string, bool) {
0000000000000000000000000000000000000000;;		var editor string
0000000000000000000000000000000000000000;;		for _, env := range envs {
0000000000000000000000000000000000000000;;			if len(env) > 0 {
0000000000000000000000000000000000000000;;				editor = os.Getenv(env)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(editor) > 0 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(editor) == 0 {
0000000000000000000000000000000000000000;;			editor = platformize(defaultEditor, windowsEditor)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(editor, " ") {
0000000000000000000000000000000000000000;;			return []string{editor}, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.ContainsAny(editor, "\"'\\") {
0000000000000000000000000000000000000000;;			return strings.Split(editor, " "), false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// rather than parse the shell arguments ourselves, punt to the shell
0000000000000000000000000000000000000000;;		shell := defaultEnvShell()
0000000000000000000000000000000000000000;;		return append(shell, editor), true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Editor) args(path string) []string {
0000000000000000000000000000000000000000;;		args := make([]string, len(e.Args))
0000000000000000000000000000000000000000;;		copy(args, e.Args)
0000000000000000000000000000000000000000;;		if e.Shell {
0000000000000000000000000000000000000000;;			last := args[len(args)-1]
0000000000000000000000000000000000000000;;			args[len(args)-1] = fmt.Sprintf("%s %q", last, path)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			args = append(args, path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return args
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Launch opens the described or returns an error. The TTY will be protected, and
0000000000000000000000000000000000000000;;	// SIGQUIT, SIGTERM, and SIGINT will all be trapped.
0000000000000000000000000000000000000000;;	func (e Editor) Launch(path string) error {
0000000000000000000000000000000000000000;;		if len(e.Args) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("no editor defined, can't open %s", path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		abs, err := filepath.Abs(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		args := e.args(abs)
0000000000000000000000000000000000000000;;		cmd := exec.Command(args[0], args[1:]...)
0000000000000000000000000000000000000000;;		cmd.Stdout = os.Stdout
0000000000000000000000000000000000000000;;		cmd.Stderr = os.Stderr
0000000000000000000000000000000000000000;;		cmd.Stdin = os.Stdin
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Opening file with editor %v", args)
0000000000000000000000000000000000000000;;		if err := (term.TTY{In: os.Stdin, TryDev: true}).Safe(cmd.Run); err != nil {
0000000000000000000000000000000000000000;;			if err, ok := err.(*exec.Error); ok {
0000000000000000000000000000000000000000;;				if err.Err == exec.ErrNotFound {
0000000000000000000000000000000000000000;;					return fmt.Errorf("unable to launch the editor %q", strings.Join(e.Args, " "))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return fmt.Errorf("there was a problem with the editor %q", strings.Join(e.Args, " "))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LaunchTempFile reads the provided stream into a temporary file in the given directory
0000000000000000000000000000000000000000;;	// and file prefix, and then invokes Launch with the path of that file. It will return
0000000000000000000000000000000000000000;;	// the contents of the file after launch, any errors that occur, and the path of the
0000000000000000000000000000000000000000;;	// temporary file so the caller can clean it up as needed.
0000000000000000000000000000000000000000;;	func (e Editor) LaunchTempFile(prefix, suffix string, r io.Reader) ([]byte, string, error) {
0000000000000000000000000000000000000000;;		f, err := tempFile(prefix, suffix)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;		path := f.Name()
0000000000000000000000000000000000000000;;		if _, err := io.Copy(f, r); err != nil {
0000000000000000000000000000000000000000;;			os.Remove(path)
0000000000000000000000000000000000000000;;			return nil, path, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// This file descriptor needs to close so the next process (Launch) can claim it.
0000000000000000000000000000000000000000;;		f.Close()
0000000000000000000000000000000000000000;;		if err := e.Launch(path); err != nil {
0000000000000000000000000000000000000000;;			return nil, path, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		bytes, err := ioutil.ReadFile(path)
0000000000000000000000000000000000000000;;		return bytes, path, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func tempFile(prefix, suffix string) (f *os.File, err error) {
0000000000000000000000000000000000000000;;		dir := os.TempDir()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 10000; i++ {
0000000000000000000000000000000000000000;;			name := filepath.Join(dir, prefix+randSeq(5)+suffix)
0000000000000000000000000000000000000000;;			f, err = os.OpenFile(name, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0600)
0000000000000000000000000000000000000000;;			if os.IsExist(err) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			break
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var letters = []rune("abcdefghijklmnopqrstuvwxyz0123456789")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func randSeq(n int) string {
0000000000000000000000000000000000000000;;		b := make([]rune, n)
0000000000000000000000000000000000000000;;		for i := range b {
0000000000000000000000000000000000000000;;			b[i] = letters[rand.Intn(len(letters))]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func platformize(linux, windows string) string {
0000000000000000000000000000000000000000;;		if runtime.GOOS == "windows" {
0000000000000000000000000000000000000000;;			return windows
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return linux
0000000000000000000000000000000000000000;;	}
