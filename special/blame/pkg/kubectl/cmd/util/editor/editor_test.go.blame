0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f5dd30c85056db9ada0222d6954c0704d9d0a991;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package editor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestArgs(t *testing.T) {
0000000000000000000000000000000000000000;;		if e, a := []string{"/bin/bash", "-c \"test\""}, (Editor{Args: []string{"/bin/bash", "-c"}, Shell: true}).args("test"); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected args: %v", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := []string{"/bin/bash", "-c", "test"}, (Editor{Args: []string{"/bin/bash", "-c"}, Shell: false}).args("test"); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected args: %v", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := []string{"/bin/bash", "-i -c \"test\""}, (Editor{Args: []string{"/bin/bash", "-i -c"}, Shell: true}).args("test"); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected args: %v", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := []string{"/test", "test"}, (Editor{Args: []string{"/test"}}).args("test"); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected args: %v", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEditor(t *testing.T) {
0000000000000000000000000000000000000000;;		edit := Editor{Args: []string{"cat"}}
0000000000000000000000000000000000000000;;		testStr := "test something\n"
0000000000000000000000000000000000000000;;		contents, path, err := edit.LaunchTempFile("", "someprefix", bytes.NewBufferString(testStr))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := os.Stat(path); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("no temp file: %s", path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(path)
0000000000000000000000000000000000000000;;		if disk, err := ioutil.ReadFile(path); err != nil || !bytes.Equal(contents, disk) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected file on disk: %v %s", err, string(disk))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !bytes.Equal(contents, []byte(testStr)) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected contents: %s", string(contents))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(path, "someprefix") {
0000000000000000000000000000000000000000;;			t.Errorf("path not expected: %s", path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
