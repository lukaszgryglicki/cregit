0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f38cbb2eace6d73c4290164fb1eb981670a524de;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful-swagger12"
0000000000000000000000000000000000000000;;		"github.com/googleapis/gnostic/OpenAPIv2"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/version"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCachedDiscoveryClient_Fresh(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(d)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := fakeDiscoveryClient{}
0000000000000000000000000000000000000000;;		cdc := NewCachedDiscoveryClient(&c, d, 60*time.Second)
0000000000000000000000000000000000000000;;		assert.True(cdc.Fresh(), "should be fresh after creation")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.ServerGroups()
0000000000000000000000000000000000000000;;		assert.True(cdc.Fresh(), "should be fresh after groups call without cache")
0000000000000000000000000000000000000000;;		assert.Equal(c.groupCalls, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.ServerGroups()
0000000000000000000000000000000000000000;;		assert.True(cdc.Fresh(), "should be fresh after another groups call")
0000000000000000000000000000000000000000;;		assert.Equal(c.groupCalls, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.ServerResources()
0000000000000000000000000000000000000000;;		assert.True(cdc.Fresh(), "should be fresh after resources call")
0000000000000000000000000000000000000000;;		assert.Equal(c.resourceCalls, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.ServerResources()
0000000000000000000000000000000000000000;;		assert.True(cdc.Fresh(), "should be fresh after another resources call")
0000000000000000000000000000000000000000;;		assert.Equal(c.resourceCalls, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc = NewCachedDiscoveryClient(&c, d, 60*time.Second)
0000000000000000000000000000000000000000;;		cdc.ServerGroups()
0000000000000000000000000000000000000000;;		assert.False(cdc.Fresh(), "should NOT be fresh after recreation with existing groups cache")
0000000000000000000000000000000000000000;;		assert.Equal(c.groupCalls, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.ServerResources()
0000000000000000000000000000000000000000;;		assert.False(cdc.Fresh(), "should NOT be fresh after recreation with existing resources cache")
0000000000000000000000000000000000000000;;		assert.Equal(c.resourceCalls, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.Invalidate()
0000000000000000000000000000000000000000;;		assert.True(cdc.Fresh(), "should be fresh after cache invalidation")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.ServerResources()
0000000000000000000000000000000000000000;;		assert.True(cdc.Fresh(), "should ignore existing resources cache after invalidation")
0000000000000000000000000000000000000000;;		assert.Equal(c.resourceCalls, 2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewCachedDiscoveryClient_TTL(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;		defer os.RemoveAll(d)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := fakeDiscoveryClient{}
0000000000000000000000000000000000000000;;		cdc := NewCachedDiscoveryClient(&c, d, 1*time.Nanosecond)
0000000000000000000000000000000000000000;;		cdc.ServerGroups()
0000000000000000000000000000000000000000;;		assert.Equal(c.groupCalls, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		time.Sleep(1 * time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.ServerGroups()
0000000000000000000000000000000000000000;;		assert.Equal(c.groupCalls, 2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeDiscoveryClient struct {
0000000000000000000000000000000000000000;;		groupCalls    int
0000000000000000000000000000000000000000;;		resourceCalls int
0000000000000000000000000000000000000000;;		versionCalls  int
0000000000000000000000000000000000000000;;		swaggerCalls  int
0000000000000000000000000000000000000000;;		openAPICalls  int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverResourcesHandler func() ([]*metav1.APIResourceList, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ discovery.DiscoveryInterface = &fakeDiscoveryClient{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) RESTClient() restclient.Interface {
0000000000000000000000000000000000000000;;		return &fake.RESTClient{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) ServerGroups() (*metav1.APIGroupList, error) {
0000000000000000000000000000000000000000;;		c.groupCalls = c.groupCalls + 1
0000000000000000000000000000000000000000;;		return &metav1.APIGroupList{
0000000000000000000000000000000000000000;;			Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "a",
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							GroupVersion: "a/v1",
0000000000000000000000000000000000000000;;							Version:      "v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						GroupVersion: "a/v1",
0000000000000000000000000000000000000000;;						Version:      "v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) ServerResourcesForGroupVersion(groupVersion string) (*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		c.resourceCalls = c.resourceCalls + 1
0000000000000000000000000000000000000000;;		if groupVersion == "a/v1" {
0000000000000000000000000000000000000000;;			return &metav1.APIResourceList{APIResources: []metav1.APIResource{{Name: "widgets", Kind: "Widget"}}}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, errors.NewNotFound(schema.GroupResource{}, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) ServerResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		c.resourceCalls = c.resourceCalls + 1
0000000000000000000000000000000000000000;;		if c.serverResourcesHandler != nil {
0000000000000000000000000000000000000000;;			return c.serverResourcesHandler()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return []*metav1.APIResourceList{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) ServerPreferredResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		c.resourceCalls = c.resourceCalls + 1
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) ServerPreferredNamespacedResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		c.resourceCalls = c.resourceCalls + 1
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) ServerVersion() (*version.Info, error) {
0000000000000000000000000000000000000000;;		c.versionCalls = c.versionCalls + 1
0000000000000000000000000000000000000000;;		return &version.Info{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) SwaggerSchema(version schema.GroupVersion) (*swagger.ApiDeclaration, error) {
0000000000000000000000000000000000000000;;		c.swaggerCalls = c.swaggerCalls + 1
0000000000000000000000000000000000000000;;		return &swagger.ApiDeclaration{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscoveryClient) OpenAPISchema() (*openapi_v2.Document, error) {
0000000000000000000000000000000000000000;;		c.openAPICalls = c.openAPICalls + 1
0000000000000000000000000000000000000000;;		return &openapi_v2.Document{}, nil
0000000000000000000000000000000000000000;;	}
