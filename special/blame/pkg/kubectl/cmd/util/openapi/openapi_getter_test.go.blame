0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
b686ac2b7b769442753ede7cb3064fe40d943d45;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openapi_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/util/openapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = Describe("Getting the Resources", func() {
0000000000000000000000000000000000000000;;		var client *fakeOpenAPIClient
0000000000000000000000000000000000000000;;		var expectedData *openapi.Resources
0000000000000000000000000000000000000000;;		var instance openapi.Getter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			client = &fakeOpenAPIClient{}
0000000000000000000000000000000000000000;;			d, err := data.OpenAPISchema()
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedData, err = openapi.NewOpenAPIData(d)
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			instance = openapi.NewOpenAPIGetter("", "", client)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("when the server returns a successful result", func() {
0000000000000000000000000000000000000000;;			It("should return the same data for multiple calls", func() {
0000000000000000000000000000000000000000;;				Expect(client.calls).To(Equal(0))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				result, err := instance.Get()
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				expectEqual(result, expectedData)
0000000000000000000000000000000000000000;;				Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				result, err = instance.Get()
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				expectEqual(result, expectedData)
0000000000000000000000000000000000000000;;				// No additional client calls expected
0000000000000000000000000000000000000000;;				Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("when the server returns an unsuccessful result", func() {
0000000000000000000000000000000000000000;;			It("should return the same instance for multiple calls.", func() {
0000000000000000000000000000000000000000;;				Expect(client.calls).To(Equal(0))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				client.err = fmt.Errorf("expected error")
0000000000000000000000000000000000000000;;				_, err := instance.Get()
0000000000000000000000000000000000000000;;				Expect(err).To(Equal(client.err))
0000000000000000000000000000000000000000;;				Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				_, err = instance.Get()
0000000000000000000000000000000000000000;;				Expect(err).To(Equal(client.err))
0000000000000000000000000000000000000000;;				// No additional client calls expected
0000000000000000000000000000000000000000;;				Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
