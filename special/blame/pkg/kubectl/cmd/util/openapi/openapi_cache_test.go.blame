0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
b686ac2b7b769442753ede7cb3064fe40d943d45;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openapi_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"gopkg.in/yaml.v2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/googleapis/gnostic/OpenAPIv2"
0000000000000000000000000000000000000000;;		"github.com/googleapis/gnostic/compiler"
0000000000000000000000000000000000000000;;		. "github.com/onsi/ginkgo"
0000000000000000000000000000000000000000;;		. "github.com/onsi/gomega"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/util/openapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = Describe("When reading openAPIData", func() {
0000000000000000000000000000000000000000;;		var tmpDir string
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		var client *fakeOpenAPIClient
0000000000000000000000000000000000000000;;		var instance *openapi.CachingOpenAPIClient
0000000000000000000000000000000000000000;;		var expectedData *openapi.Resources
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			tmpDir, err = ioutil.TempDir("", "openapi_cache_test")
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			client = &fakeOpenAPIClient{}
0000000000000000000000000000000000000000;;			instance = openapi.NewCachingOpenAPIClient(client, "v1.6", tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			d, err := data.OpenAPISchema()
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedData, err = openapi.NewOpenAPIData(d)
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AfterEach(func() {
0000000000000000000000000000000000000000;;			os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should write to the cache", func() {
0000000000000000000000000000000000000000;;			By("getting the live openapi spec from the server")
0000000000000000000000000000000000000000;;			result, err := instance.OpenAPIData()
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			expectEqual(result, expectedData)
0000000000000000000000000000000000000000;;			Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			By("writing the live openapi spec to a local cache file")
0000000000000000000000000000000000000000;;			names, err := getFilenames(tmpDir)
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			Expect(names).To(ConsistOf("v1.6"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			names, err = getFilenames(filepath.Join(tmpDir, "v1.6"))
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			Expect(names).To(HaveLen(1))
0000000000000000000000000000000000000000;;			clientVersion := names[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			names, err = getFilenames(filepath.Join(tmpDir, "v1.6", clientVersion))
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			Expect(names).To(ContainElement("openapi_cache"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("should read from the cache", func() {
0000000000000000000000000000000000000000;;			// First call should use the client
0000000000000000000000000000000000000000;;			result, err := instance.OpenAPIData()
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			expectEqual(result, expectedData)
0000000000000000000000000000000000000000;;			Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Second call shouldn't use the client
0000000000000000000000000000000000000000;;			result, err = instance.OpenAPIData()
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			expectEqual(result, expectedData)
0000000000000000000000000000000000000000;;			Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			names, err := getFilenames(tmpDir)
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			Expect(names).To(ConsistOf("v1.6"))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		It("propagate errors that are encountered", func() {
0000000000000000000000000000000000000000;;			// Expect an error
0000000000000000000000000000000000000000;;			client.err = fmt.Errorf("expected error")
0000000000000000000000000000000000000000;;			result, err := instance.OpenAPIData()
0000000000000000000000000000000000000000;;			Expect(err.Error()).To(Equal(client.err.Error()))
0000000000000000000000000000000000000000;;			Expect(result).To(BeNil())
0000000000000000000000000000000000000000;;			Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// No cache file is written
0000000000000000000000000000000000000000;;			files, err := ioutil.ReadDir(tmpDir)
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;			Expect(files).To(HaveLen(0))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Client error is not cached
0000000000000000000000000000000000000000;;			result, err = instance.OpenAPIData()
0000000000000000000000000000000000000000;;			Expect(err.Error()).To(Equal(client.err.Error()))
0000000000000000000000000000000000000000;;			Expect(result).To(BeNil())
0000000000000000000000000000000000000000;;			Expect(client.calls).To(Equal(2))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = Describe("Reading openAPIData", func() {
0000000000000000000000000000000000000000;;		var tmpDir string
0000000000000000000000000000000000000000;;		var serverVersion string
0000000000000000000000000000000000000000;;		var cacheDir string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BeforeEach(func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			tmpDir, err = ioutil.TempDir("", "openapi_cache_test")
0000000000000000000000000000000000000000;;			Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AfterEach(func() {
0000000000000000000000000000000000000000;;			os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set the serverVersion to empty
0000000000000000000000000000000000000000;;		Context("when the server version is empty", func() {
0000000000000000000000000000000000000000;;			BeforeEach(func() {
0000000000000000000000000000000000000000;;				serverVersion = ""
0000000000000000000000000000000000000000;;				cacheDir = tmpDir
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should not cache the result", func() {
0000000000000000000000000000000000000000;;				client := &fakeOpenAPIClient{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				instance := openapi.NewCachingOpenAPIClient(client, serverVersion, cacheDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				d, err := data.OpenAPISchema()
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedData, err := openapi.NewOpenAPIData(d)
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("getting the live openapi schema")
0000000000000000000000000000000000000000;;				result, err := instance.OpenAPIData()
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				expectEqual(result, expectedData)
0000000000000000000000000000000000000000;;				Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				files, err := ioutil.ReadDir(tmpDir)
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				Expect(files).To(HaveLen(0))
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context("when the cache directory is empty", func() {
0000000000000000000000000000000000000000;;			BeforeEach(func() {
0000000000000000000000000000000000000000;;				serverVersion = "v1.6"
0000000000000000000000000000000000000000;;				cacheDir = ""
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			It("should not cache the result", func() {
0000000000000000000000000000000000000000;;				client := &fakeOpenAPIClient{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				instance := openapi.NewCachingOpenAPIClient(client, serverVersion, cacheDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				d, err := data.OpenAPISchema()
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedData, err := openapi.NewOpenAPIData(d)
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				By("getting the live openapi schema")
0000000000000000000000000000000000000000;;				result, err := instance.OpenAPIData()
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				expectEqual(result, expectedData)
0000000000000000000000000000000000000000;;				Expect(client.calls).To(Equal(1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				files, err := ioutil.ReadDir(tmpDir)
0000000000000000000000000000000000000000;;				Expect(err).To(BeNil())
0000000000000000000000000000000000000000;;				Expect(files).To(HaveLen(0))
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test Utils
0000000000000000000000000000000000000000;;	func getFilenames(path string) ([]string, error) {
0000000000000000000000000000000000000000;;		files, err := ioutil.ReadDir(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result := []string{}
0000000000000000000000000000000000000000;;		for _, n := range files {
0000000000000000000000000000000000000000;;			result = append(result, n.Name())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func expectEqual(a *openapi.Resources, b *openapi.Resources) {
0000000000000000000000000000000000000000;;		Expect(a.NameToDefinition).To(HaveLen(len(b.NameToDefinition)))
0000000000000000000000000000000000000000;;		for k, v := range a.NameToDefinition {
0000000000000000000000000000000000000000;;			Expect(v).To(Equal(b.NameToDefinition[k]),
0000000000000000000000000000000000000000;;				fmt.Sprintf("Names for GVK do not match %v", k))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		Expect(a.GroupVersionKindToName).To(HaveLen(len(b.GroupVersionKindToName)))
0000000000000000000000000000000000000000;;		for k, v := range a.GroupVersionKindToName {
0000000000000000000000000000000000000000;;			Expect(v).To(Equal(b.GroupVersionKindToName[k]),
0000000000000000000000000000000000000000;;				fmt.Sprintf("Values for name do not match %v", k))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeOpenAPIClient struct {
0000000000000000000000000000000000000000;;		calls int
0000000000000000000000000000000000000000;;		err   error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeOpenAPIClient) OpenAPISchema() (*openapi_v2.Document, error) {
0000000000000000000000000000000000000000;;		f.calls = f.calls + 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if f.err != nil {
0000000000000000000000000000000000000000;;			return nil, f.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return data.OpenAPISchema()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test utils
0000000000000000000000000000000000000000;;	var data apiData
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type apiData struct {
0000000000000000000000000000000000000000;;		sync.Once
0000000000000000000000000000000000000000;;		data *openapi_v2.Document
0000000000000000000000000000000000000000;;		err  error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *apiData) OpenAPISchema() (*openapi_v2.Document, error) {
0000000000000000000000000000000000000000;;		d.Do(func() {
0000000000000000000000000000000000000000;;			// Get the path to the swagger.json file
0000000000000000000000000000000000000000;;			wd, err := os.Getwd()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				d.err = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			abs, err := filepath.Abs(wd)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				d.err = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			root := filepath.Dir(filepath.Dir(filepath.Dir(filepath.Dir(filepath.Dir(abs)))))
0000000000000000000000000000000000000000;;			specpath := filepath.Join(root, "api", "openapi-spec", "swagger.json")
0000000000000000000000000000000000000000;;			_, err = os.Stat(specpath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				d.err = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			spec, err := ioutil.ReadFile(specpath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				d.err = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var info yaml.MapSlice
0000000000000000000000000000000000000000;;			err = yaml.Unmarshal(spec, &info)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				d.err = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			d.data, d.err = openapi_v2.NewDocument(info, compiler.NewContext("$root", nil))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return d.data, d.err
0000000000000000000000000000000000000000;;	}
