0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
bdcdb675d201031c6ee62686afe1805f73b4880c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddPrinterFlags adds printing related flags to a command (e.g. output format, no headers, template path)
0000000000000000000000000000000000000000;;	func AddPrinterFlags(cmd *cobra.Command) {
0000000000000000000000000000000000000000;;		AddNonDeprecatedPrinterFlags(cmd)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().String("output-version", "", "DEPRECATED: To use a specific API version, fully-qualify the resource, version, and group (for example: 'jobs.v1.batch/myjob').")
0000000000000000000000000000000000000000;;		cmd.Flags().MarkDeprecated("output-version", "the resource is used exactly as fetched from the API. To get a specific API version, fully-qualify the resource, version, and group (for example: 'jobs.v1.batch/myjob').")
0000000000000000000000000000000000000000;;		cmd.Flags().MarkHidden("output-version")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddNonDeprecatedPrinterFlags supports the conversion case which must logically have output-version.  Once output-version
0000000000000000000000000000000000000000;;	// is completely removed, this function can go away.
0000000000000000000000000000000000000000;;	func AddNonDeprecatedPrinterFlags(cmd *cobra.Command) {
0000000000000000000000000000000000000000;;		AddOutputFlags(cmd)
0000000000000000000000000000000000000000;;		AddNoHeadersFlags(cmd)
0000000000000000000000000000000000000000;;		cmd.Flags().Bool("show-labels", false, "When printing, show all labels as the last column (default hide labels column)")
0000000000000000000000000000000000000000;;		cmd.Flags().String("template", "", "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].")
0000000000000000000000000000000000000000;;		cmd.MarkFlagFilename("template")
0000000000000000000000000000000000000000;;		cmd.Flags().String("sort-by", "", "If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.")
0000000000000000000000000000000000000000;;		cmd.Flags().BoolP("show-all", "a", false, "When printing, show all resources (default hide terminated pods.)")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddOutputFlagsForMutation adds output related flags to a command. Used by mutations only.
0000000000000000000000000000000000000000;;	func AddOutputFlagsForMutation(cmd *cobra.Command) {
0000000000000000000000000000000000000000;;		cmd.Flags().StringP("output", "o", "", "Output mode. Use \"-o name\" for shorter output (resource/name).")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddOutputVarFlagsForMutation adds output related flags to a command. Used by mutations only.
0000000000000000000000000000000000000000;;	func AddOutputVarFlagsForMutation(cmd *cobra.Command, output *string) {
0000000000000000000000000000000000000000;;		cmd.Flags().StringVarP(output, "output", "o", "", "Output mode. Use \"-o name\" for shorter output (resource/name).")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddOutputFlags adds output related flags to a command.
0000000000000000000000000000000000000000;;	func AddOutputFlags(cmd *cobra.Command) {
0000000000000000000000000000000000000000;;		cmd.Flags().StringP("output", "o", "", "Output format. One of: json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=... See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [http://kubernetes.io/docs/user-guide/jsonpath].")
0000000000000000000000000000000000000000;;		cmd.Flags().Bool("allow-missing-template-keys", true, "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddNoHeadersFlags adds no-headers flags to a command.
0000000000000000000000000000000000000000;;	func AddNoHeadersFlags(cmd *cobra.Command) {
0000000000000000000000000000000000000000;;		cmd.Flags().Bool("no-headers", false, "When using the default or custom-column output format, don't print headers (default print headers).")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrintSuccess prints message after finishing mutating operations
0000000000000000000000000000000000000000;;	func PrintSuccess(mapper meta.RESTMapper, shortOutput bool, out io.Writer, resource string, name string, dryRun bool, operation string) {
0000000000000000000000000000000000000000;;		resource, _ = mapper.ResourceSingularizer(resource)
0000000000000000000000000000000000000000;;		dryRunMsg := ""
0000000000000000000000000000000000000000;;		if dryRun {
0000000000000000000000000000000000000000;;			dryRunMsg = " (dry run)"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if shortOutput {
0000000000000000000000000000000000000000;;			// -o name: prints resource/name
0000000000000000000000000000000000000000;;			if len(resource) > 0 {
0000000000000000000000000000000000000000;;				fmt.Fprintf(out, "%s/%s\n", resource, name)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fmt.Fprintf(out, "%s\n", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// understandable output by default
0000000000000000000000000000000000000000;;			if len(resource) > 0 {
0000000000000000000000000000000000000000;;				fmt.Fprintf(out, "%s \"%s\" %s%s\n", resource, name, operation, dryRunMsg)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fmt.Fprintf(out, "\"%s\" %s%s\n", name, operation, dryRunMsg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateOutputArgs validates -o flag args for mutations
0000000000000000000000000000000000000000;;	func ValidateOutputArgs(cmd *cobra.Command) error {
0000000000000000000000000000000000000000;;		outputMode := GetFlagString(cmd, "output")
0000000000000000000000000000000000000000;;		if outputMode != "" && outputMode != "name" {
0000000000000000000000000000000000000000;;			return UsageErrorf(cmd, "Unexpected -o output mode: %v. We only support '-o name'.", outputMode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrinterForCommand returns the printer for the outputOptions (if given) or
0000000000000000000000000000000000000000;;	// returns the default printer for the command. Requires that printer flags have
0000000000000000000000000000000000000000;;	// been added to cmd (see AddPrinterFlags).
0000000000000000000000000000000000000000;;	// TODO: remove the dependency on cmd object
0000000000000000000000000000000000000000;;	func PrinterForCommand(cmd *cobra.Command, outputOpts *printers.OutputOptions, mapper meta.RESTMapper, typer runtime.ObjectTyper, encoder runtime.Encoder, decoders []runtime.Decoder, options printers.PrintOptions) (printers.ResourcePrinter, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if outputOpts == nil {
0000000000000000000000000000000000000000;;			outputOpts = extractOutputOptions(cmd)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// this function may be invoked by a command that did not call AddPrinterFlags first, so we need
0000000000000000000000000000000000000000;;		// to be safe about how we access the no-headers flag
0000000000000000000000000000000000000000;;		noHeaders := false
0000000000000000000000000000000000000000;;		if cmd.Flags().Lookup("no-headers") != nil {
0000000000000000000000000000000000000000;;			noHeaders = GetFlagBool(cmd, "no-headers")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		printer, err := printers.GetStandardPrinter(outputOpts, noHeaders, mapper, typer, encoder, decoders, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return maybeWrapSortingPrinter(cmd, printer), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrintResourceInfoForCommand receives a *cobra.Command and a *resource.Info and
0000000000000000000000000000000000000000;;	// attempts to print an info object based on the specified output format. If the
0000000000000000000000000000000000000000;;	// object passed is non-generic, it attempts to print the object using a HumanReadablePrinter.
0000000000000000000000000000000000000000;;	// Requires that printer flags have been added to cmd (see AddPrinterFlags).
0000000000000000000000000000000000000000;;	func PrintResourceInfoForCommand(cmd *cobra.Command, info *resource.Info, f Factory, out io.Writer) error {
0000000000000000000000000000000000000000;;		printer, err := f.PrinterForCommand(cmd, false, nil, printers.PrintOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !printer.IsGeneric() {
0000000000000000000000000000000000000000;;			printer, err = f.PrinterForMapping(cmd, false, nil, nil, false)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return printer.PrintObj(info.Object, out)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// extractOutputOptions parses printer specific commandline args and returns
0000000000000000000000000000000000000000;;	// printers.OutputsOptions object.
0000000000000000000000000000000000000000;;	func extractOutputOptions(cmd *cobra.Command) *printers.OutputOptions {
0000000000000000000000000000000000000000;;		flags := cmd.Flags()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var outputFormat string
0000000000000000000000000000000000000000;;		if flags.Lookup("output") != nil {
0000000000000000000000000000000000000000;;			outputFormat = GetFlagString(cmd, "output")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// templates are logically optional for specifying a format.
0000000000000000000000000000000000000000;;		// TODO once https://github.com/kubernetes/kubernetes/issues/12668 is fixed, this should fall back to GetFlagString
0000000000000000000000000000000000000000;;		var templateFile string
0000000000000000000000000000000000000000;;		if flags.Lookup("template") != nil {
0000000000000000000000000000000000000000;;			templateFile = GetFlagString(cmd, "template")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(outputFormat) == 0 && len(templateFile) != 0 {
0000000000000000000000000000000000000000;;			outputFormat = "template"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		templateFormats := []string{
0000000000000000000000000000000000000000;;			"go-template=", "go-template-file=", "jsonpath=", "jsonpath-file=", "custom-columns=", "custom-columns-file=",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, format := range templateFormats {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(outputFormat, format) {
0000000000000000000000000000000000000000;;				templateFile = outputFormat[len(format):]
0000000000000000000000000000000000000000;;				outputFormat = format[:len(format)-1]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// this function may be invoked by a command that did not call AddPrinterFlags first, so we need
0000000000000000000000000000000000000000;;		// to be safe about how we access the allow-missing-template-keys flag
0000000000000000000000000000000000000000;;		allowMissingTemplateKeys := false
0000000000000000000000000000000000000000;;		if flags.Lookup("allow-missing-template-keys") != nil {
0000000000000000000000000000000000000000;;			allowMissingTemplateKeys = GetFlagBool(cmd, "allow-missing-template-keys")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &printers.OutputOptions{
0000000000000000000000000000000000000000;;			FmtType:          outputFormat,
0000000000000000000000000000000000000000;;			FmtArg:           templateFile,
0000000000000000000000000000000000000000;;			AllowMissingKeys: allowMissingTemplateKeys,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func maybeWrapSortingPrinter(cmd *cobra.Command, printer printers.ResourcePrinter) printers.ResourcePrinter {
0000000000000000000000000000000000000000;;		sorting, err := cmd.Flags().GetString("sort-by")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// error can happen on missing flag or bad flag type.  In either case, this command didn't intent to sort
0000000000000000000000000000000000000000;;			return printer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(sorting) != 0 {
0000000000000000000000000000000000000000;;			return &kubectl.SortingPrinter{
0000000000000000000000000000000000000000;;				Delegate:  printer,
0000000000000000000000000000000000000000;;				SortField: fmt.Sprintf("{%s}", sorting),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return printer
0000000000000000000000000000000000000000;;	}
