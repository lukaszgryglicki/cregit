0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
328e2c9ed0a81df6dcb2d06aa8af6bd678a59d46;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		testclient "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/apps"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeClientAccessFactory struct {
0000000000000000000000000000000000000000;;		ClientAccessFactory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClientset *fake.Clientset
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeClientAccessFactory) ClientSetForVersion(requiredVersion *schema.GroupVersion) (internalclientset.Interface, error) {
0000000000000000000000000000000000000000;;		return f.fakeClientset, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeClientAccessFactory(objs []runtime.Object) *fakeClientAccessFactory {
0000000000000000000000000000000000000000;;		return &fakeClientAccessFactory{
0000000000000000000000000000000000000000;;			fakeClientset: fake.NewSimpleClientset(objs...),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		podsResource = schema.GroupVersionResource{Resource: "pods"}
0000000000000000000000000000000000000000;;		podsKind     = schema.GroupVersionKind{Kind: "Pod"}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLogsForObject(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name    string
0000000000000000000000000000000000000000;;			obj     runtime.Object
0000000000000000000000000000000000000000;;			opts    *api.PodLogOptions
0000000000000000000000000000000000000000;;			pods    []runtime.Object
0000000000000000000000000000000000000000;;			actions []testclient.Action
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "pod logs",
0000000000000000000000000000000000000000;;				obj: &api.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "hello", Namespace: "test"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pods: []runtime.Object{testPod()},
0000000000000000000000000000000000000000;;				actions: []testclient.Action{
0000000000000000000000000000000000000000;;					getLogsAction("test", nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "replication controller logs",
0000000000000000000000000000000000000000;;				obj: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "hello", Namespace: "test"},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pods: []runtime.Object{testPod()},
0000000000000000000000000000000000000000;;				actions: []testclient.Action{
0000000000000000000000000000000000000000;;					testclient.NewListAction(podsResource, podsKind, "test", metav1.ListOptions{LabelSelector: "foo=bar"}),
0000000000000000000000000000000000000000;;					getLogsAction("test", nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "replica set logs",
0000000000000000000000000000000000000000;;				obj: &extensions.ReplicaSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "hello", Namespace: "test"},
0000000000000000000000000000000000000000;;					Spec: extensions.ReplicaSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pods: []runtime.Object{testPod()},
0000000000000000000000000000000000000000;;				actions: []testclient.Action{
0000000000000000000000000000000000000000;;					testclient.NewListAction(podsResource, podsKind, "test", metav1.ListOptions{LabelSelector: "foo=bar"}),
0000000000000000000000000000000000000000;;					getLogsAction("test", nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "deployment logs",
0000000000000000000000000000000000000000;;				obj: &extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "hello", Namespace: "test"},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pods: []runtime.Object{testPod()},
0000000000000000000000000000000000000000;;				actions: []testclient.Action{
0000000000000000000000000000000000000000;;					testclient.NewListAction(podsResource, podsKind, "test", metav1.ListOptions{LabelSelector: "foo=bar"}),
0000000000000000000000000000000000000000;;					getLogsAction("test", nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "job logs",
0000000000000000000000000000000000000000;;				obj: &batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "hello", Namespace: "test"},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pods: []runtime.Object{testPod()},
0000000000000000000000000000000000000000;;				actions: []testclient.Action{
0000000000000000000000000000000000000000;;					testclient.NewListAction(podsResource, podsKind, "test", metav1.ListOptions{LabelSelector: "foo=bar"}),
0000000000000000000000000000000000000000;;					getLogsAction("test", nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "stateful set logs",
0000000000000000000000000000000000000000;;				obj: &apps.StatefulSet{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "hello", Namespace: "test"},
0000000000000000000000000000000000000000;;					Spec: apps.StatefulSetSpec{
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				pods: []runtime.Object{testPod()},
0000000000000000000000000000000000000000;;				actions: []testclient.Action{
0000000000000000000000000000000000000000;;					testclient.NewListAction(podsResource, podsKind, "test", metav1.ListOptions{LabelSelector: "foo=bar"}),
0000000000000000000000000000000000000000;;					getLogsAction("test", nil),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			caf := newFakeClientAccessFactory(test.pods)
0000000000000000000000000000000000000000;;			omf := NewObjectMappingFactory(caf)
0000000000000000000000000000000000000000;;			_, err := omf.LogsForObject(test.obj, test.opts, 20*time.Second)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range test.actions {
0000000000000000000000000000000000000000;;				if len(caf.fakeClientset.Actions()) < i {
0000000000000000000000000000000000000000;;					t.Errorf("%s: action %d does not exists in actual actions: %#v",
0000000000000000000000000000000000000000;;						test.name, i, caf.fakeClientset.Actions())
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				got := caf.fakeClientset.Actions()[i]
0000000000000000000000000000000000000000;;				want := test.actions[i]
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected action: %s", test.name, diff.ObjectDiff(got, want))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPod() runtime.Object {
0000000000000000000000000000000000000000;;		return &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Namespace: "test",
0000000000000000000000000000000000000000;;				Labels:    map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.PodSpec{
0000000000000000000000000000000000000000;;				RestartPolicy: api.RestartPolicyAlways,
0000000000000000000000000000000000000000;;				DNSPolicy:     api.DNSClusterFirst,
0000000000000000000000000000000000000000;;				Containers:    []api.Container{{Name: "c1"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getLogsAction(namespace string, opts *api.PodLogOptions) testclient.Action {
0000000000000000000000000000000000000000;;		action := testclient.GenericActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "get"
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Resource = podsResource
0000000000000000000000000000000000000000;;		action.Subresource = "logs"
0000000000000000000000000000000000000000;;		action.Value = opts
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
