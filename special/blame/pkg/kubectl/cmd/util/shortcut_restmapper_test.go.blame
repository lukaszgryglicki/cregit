0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ce19a09e6c2e06e821ee2bd1970796ae2df42381;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplaceAliases(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			arg      string
0000000000000000000000000000000000000000;;			expected schema.GroupVersionResource
0000000000000000000000000000000000000000;;			srvRes   []*metav1.APIResourceList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "rc-resolves-to-replicationcontrollers",
0000000000000000000000000000000000000000;;				arg:      "rc",
0000000000000000000000000000000000000000;;				expected: schema.GroupVersionResource{Resource: "replicationcontrollers"},
0000000000000000000000000000000000000000;;				srvRes:   []*metav1.APIResourceList{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "storageclasses-no-replacement",
0000000000000000000000000000000000000000;;				arg:      "storageclasses",
0000000000000000000000000000000000000000;;				expected: schema.GroupVersionResource{Resource: "storageclasses"},
0000000000000000000000000000000000000000;;				srvRes:   []*metav1.APIResourceList{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "hpa-priority",
0000000000000000000000000000000000000000;;				arg:      "hpa",
0000000000000000000000000000000000000000;;				expected: schema.GroupVersionResource{Resource: "superhorizontalpodautoscalers"},
0000000000000000000000000000000000000000;;				srvRes: []*metav1.APIResourceList{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						GroupVersion: "autoscaling/v1",
0000000000000000000000000000000000000000;;						APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "superhorizontalpodautoscalers",
0000000000000000000000000000000000000000;;								ShortNames: []string{"hpa"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						GroupVersion: "autoscaling/v1",
0000000000000000000000000000000000000000;;						APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "horizontalpodautoscalers",
0000000000000000000000000000000000000000;;								ShortNames: []string{"hpa"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ds := &fakeDiscoveryClient{}
0000000000000000000000000000000000000000;;		mapper, err := NewShortcutExpander(testapi.Default.RESTMapper(), ds)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create shortcut expander, err %s", err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			ds.serverResourcesHandler = func() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;				return test.srvRes, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			actual := mapper.expandResourceShortcut(schema.GroupVersionResource{Resource: test.arg})
0000000000000000000000000000000000000000;;			if actual != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected argument: expected %s, got %s", test.name, test.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestKindFor(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			in       schema.GroupVersionResource
0000000000000000000000000000000000000000;;			expected schema.GroupVersionKind
0000000000000000000000000000000000000000;;			srvRes   []*metav1.APIResourceList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in:       schema.GroupVersionResource{Group: "storage.k8s.io", Version: "", Resource: "sc"},
0000000000000000000000000000000000000000;;				expected: schema.GroupVersionKind{Group: "storage.k8s.io", Version: "v1", Kind: "StorageClass"},
0000000000000000000000000000000000000000;;				srvRes: []*metav1.APIResourceList{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						GroupVersion: "storage.k8s.io/v1",
0000000000000000000000000000000000000000;;						APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "storageclasses",
0000000000000000000000000000000000000000;;								ShortNames: []string{"sc"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in:       schema.GroupVersionResource{Group: "", Version: "", Resource: "sc"},
0000000000000000000000000000000000000000;;				expected: schema.GroupVersionKind{Group: "storage.k8s.io", Version: "v1", Kind: "StorageClass"},
0000000000000000000000000000000000000000;;				srvRes: []*metav1.APIResourceList{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						GroupVersion: "storage.k8s.io/v1",
0000000000000000000000000000000000000000;;						APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "storageclasses",
0000000000000000000000000000000000000000;;								ShortNames: []string{"sc"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ds := &fakeDiscoveryClient{}
0000000000000000000000000000000000000000;;		mapper, err := NewShortcutExpander(testapi.Default.RESTMapper(), ds)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unable to create shortcut expander, err %s", err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			ds.serverResourcesHandler = func() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;				return test.srvRes, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ret, err := mapper.KindFor(test.in)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected error returned %s", i, err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ret != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected data returned %#v, expected %#v", i, ret, test.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
