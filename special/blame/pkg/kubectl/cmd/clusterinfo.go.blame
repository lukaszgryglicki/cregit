0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
c7751f6b12d026f459f653baed76a514f84eee9f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ct "github.com/daviddengcn/go-colortext"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		longDescr = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;	  Display addresses of the master and services with label kubernetes.io/cluster-service=true
0000000000000000000000000000000000000000;;	  To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clusterinfoExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Print the address of the master and cluster services
0000000000000000000000000000000000000000;;			kubectl cluster-info`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdClusterInfo(f cmdutil.Factory, out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "cluster-info",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Display cluster info"),
0000000000000000000000000000000000000000;;			Long:    longDescr,
0000000000000000000000000000000000000000;;			Example: clusterinfoExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := RunClusterInfo(f, out, cmd)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdutil.AddInclude3rdPartyFlags(cmd)
0000000000000000000000000000000000000000;;		cmd.AddCommand(NewCmdClusterInfoDump(f, out))
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RunClusterInfo(f cmdutil.Factory, out io.Writer, cmd *cobra.Command) error {
0000000000000000000000000000000000000000;;		client, err := f.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		printService(out, "Kubernetes master", client.Host)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmdNamespace := cmdutil.GetFlagString(cmd, "namespace")
0000000000000000000000000000000000000000;;		if cmdNamespace == "" {
0000000000000000000000000000000000000000;;			cmdNamespace = metav1.NamespaceSystem
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO use generalized labels once they are implemented (#341)
0000000000000000000000000000000000000000;;		b := f.NewBuilder(true).
0000000000000000000000000000000000000000;;			NamespaceParam(cmdNamespace).DefaultNamespace().
0000000000000000000000000000000000000000;;			SelectorParam("kubernetes.io/cluster-service=true").
0000000000000000000000000000000000000000;;			ResourceTypeOrNameArgs(false, []string{"services"}...).
0000000000000000000000000000000000000000;;			Latest()
0000000000000000000000000000000000000000;;		b.Do().Visit(func(r *resource.Info, err error) error {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			services := r.Object.(*api.ServiceList).Items
0000000000000000000000000000000000000000;;			for _, service := range services {
0000000000000000000000000000000000000000;;				var link string
0000000000000000000000000000000000000000;;				if len(service.Status.LoadBalancer.Ingress) > 0 {
0000000000000000000000000000000000000000;;					ingress := service.Status.LoadBalancer.Ingress[0]
0000000000000000000000000000000000000000;;					ip := ingress.IP
0000000000000000000000000000000000000000;;					if ip == "" {
0000000000000000000000000000000000000000;;						ip = ingress.Hostname
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					for _, port := range service.Spec.Ports {
0000000000000000000000000000000000000000;;						link += "http://" + ip + ":" + strconv.Itoa(int(port.Port)) + " "
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if len(client.GroupVersion.Group) == 0 {
0000000000000000000000000000000000000000;;						link = client.Host + "/api/" + client.GroupVersion.Version + "/namespaces/" + service.ObjectMeta.Namespace + "/services/" + service.ObjectMeta.Name + "/proxy"
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						link = client.Host + "/api/" + client.GroupVersion.Group + "/" + client.GroupVersion.Version + "/namespaces/" + service.ObjectMeta.Namespace + "/services/" + service.ObjectMeta.Name + "/proxy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				name := service.ObjectMeta.Labels["kubernetes.io/name"]
0000000000000000000000000000000000000000;;				if len(name) == 0 {
0000000000000000000000000000000000000000;;					name = service.ObjectMeta.Name
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				printService(out, name, link)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		out.Write([]byte("\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n"))
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO consider printing more information about cluster
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func printService(out io.Writer, name, link string) {
0000000000000000000000000000000000000000;;		ct.ChangeColor(ct.Green, false, ct.None, false)
0000000000000000000000000000000000000000;;		fmt.Fprint(out, name)
0000000000000000000000000000000000000000;;		ct.ResetColor()
0000000000000000000000000000000000000000;;		fmt.Fprintf(out, " is running at ")
0000000000000000000000000000000000000000;;		ct.ChangeColor(ct.Yellow, false, ct.None, false)
0000000000000000000000000000000000000000;;		fmt.Fprint(out, link)
0000000000000000000000000000000000000000;;		ct.ResetColor()
0000000000000000000000000000000000000000;;		fmt.Fprintln(out, "")
0000000000000000000000000000000000000000;;	}
