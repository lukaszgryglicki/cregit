0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9da054200828f1b91f2249d5499a52c071916e83;pkg/kubectl/cmd/resize.go[pkg/kubectl/cmd/resize.go][pkg/kubectl/cmd/scale.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		scaleLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Scale also allows users to specify one or more preconditions for the scale action.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			If --current-replicas or --resource-version is specified, it is validated before the
0000000000000000000000000000000000000000;;			scale is attempted, and it is guaranteed that the precondition holds true when the
0000000000000000000000000000000000000000;;			scale is sent to the server.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scaleExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Scale a replicaset named 'foo' to 3.
0000000000000000000000000000000000000000;;			kubectl scale --replicas=3 rs/foo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Scale a resource identified by type and name specified in "foo.yaml" to 3.
0000000000000000000000000000000000000000;;			kubectl scale --replicas=3 -f foo.yaml
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# If the deployment named mysql's current size is 2, scale mysql to 3.
0000000000000000000000000000000000000000;;			kubectl scale --current-replicas=2 --replicas=3 deployment/mysql
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Scale multiple replication controllers.
0000000000000000000000000000000000000000;;			kubectl scale --replicas=5 rc/foo rc/bar rc/baz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Scale job named 'cron' to 3.
0000000000000000000000000000000000000000;;			kubectl scale --replicas=3 job/cron`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdScale returns a cobra command with the appropriate configuration and flags to run scale
0000000000000000000000000000000000000000;;	func NewCmdScale(f cmdutil.Factory, out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &resource.FilenameOptions{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		validArgs := []string{"deployment", "replicaset", "replicationcontroller", "job", "statefulset"}
0000000000000000000000000000000000000000;;		argAliases := kubectl.ResourceAliases(validArgs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job"),
0000000000000000000000000000000000000000;;			Long:    scaleLong,
0000000000000000000000000000000000000000;;			Example: scaleExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(cmdutil.ValidateOutputArgs(cmd))
0000000000000000000000000000000000000000;;				shortOutput := cmdutil.GetFlagString(cmd, "output") == "name"
0000000000000000000000000000000000000000;;				err := RunScale(f, out, cmd, args, shortOutput, options)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ValidArgs:  validArgs,
0000000000000000000000000000000000000000;;			ArgAliases: argAliases,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Flags().String("resource-version", "", i18n.T("Precondition for resource version. Requires that the current resource version match this value in order to scale."))
0000000000000000000000000000000000000000;;		cmd.Flags().Int("current-replicas", -1, "Precondition for current size. Requires that the current size of the resource match this value in order to scale.")
0000000000000000000000000000000000000000;;		cmd.Flags().Int("replicas", -1, "The new desired number of replicas. Required.")
0000000000000000000000000000000000000000;;		cmd.MarkFlagRequired("replicas")
0000000000000000000000000000000000000000;;		cmd.Flags().Duration("timeout", 0, "The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).")
0000000000000000000000000000000000000000;;		cmdutil.AddOutputFlagsForMutation(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddRecordFlag(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddInclude3rdPartyFlags(cmd)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		usage := "identifying the resource to set a new size"
0000000000000000000000000000000000000000;;		cmdutil.AddFilenameOptionFlags(cmd, options, usage)
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunScale executes the scaling
0000000000000000000000000000000000000000;;	func RunScale(f cmdutil.Factory, out io.Writer, cmd *cobra.Command, args []string, shortOutput bool, options *resource.FilenameOptions) error {
0000000000000000000000000000000000000000;;		cmdNamespace, enforceNamespace, err := f.DefaultNamespace()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		r := f.NewBuilder(true).
0000000000000000000000000000000000000000;;			ContinueOnError().
0000000000000000000000000000000000000000;;			NamespaceParam(cmdNamespace).DefaultNamespace().
0000000000000000000000000000000000000000;;			FilenameParam(enforceNamespace, options).
0000000000000000000000000000000000000000;;			ResourceTypeOrNameArgs(false, args...).
0000000000000000000000000000000000000000;;			Flatten().
0000000000000000000000000000000000000000;;			Do()
0000000000000000000000000000000000000000;;		err = r.Err()
0000000000000000000000000000000000000000;;		if resource.IsUsageError(err) {
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, "%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		count := cmdutil.GetFlagInt(cmd, "replicas")
0000000000000000000000000000000000000000;;		if count < 0 {
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, "The --replicas=COUNT flag is required, and COUNT must be greater than or equal to 0")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		infos := []*resource.Info{}
0000000000000000000000000000000000000000;;		err = r.Visit(func(info *resource.Info, err error) error {
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				infos = append(infos, info)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceVersion := cmdutil.GetFlagString(cmd, "resource-version")
0000000000000000000000000000000000000000;;		if len(resourceVersion) != 0 && len(infos) > 1 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot use --resource-version with multiple resources")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		counter := 0
0000000000000000000000000000000000000000;;		err = r.Visit(func(info *resource.Info, err error) error {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mapping := info.ResourceMapping()
0000000000000000000000000000000000000000;;			scaler, err := f.Scaler(mapping)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			currentSize := cmdutil.GetFlagInt(cmd, "current-replicas")
0000000000000000000000000000000000000000;;			precondition := &kubectl.ScalePrecondition{Size: currentSize, ResourceVersion: resourceVersion}
0000000000000000000000000000000000000000;;			retry := kubectl.NewRetryParams(kubectl.Interval, kubectl.Timeout)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var waitForReplicas *kubectl.RetryParams
0000000000000000000000000000000000000000;;			if timeout := cmdutil.GetFlagDuration(cmd, "timeout"); timeout != 0 {
0000000000000000000000000000000000000000;;				waitForReplicas = kubectl.NewRetryParams(kubectl.Interval, timeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := scaler.Scale(info.Namespace, info.Name, uint(count), precondition, retry, waitForReplicas); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if cmdutil.ShouldRecord(cmd, info) {
0000000000000000000000000000000000000000;;				patchBytes, patchType, err := cmdutil.ChangeResourcePatch(info, f.Command(cmd, true))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				mapping := info.ResourceMapping()
0000000000000000000000000000000000000000;;				client, err := f.ClientForMapping(mapping)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				helper := resource.NewHelper(client, mapping)
0000000000000000000000000000000000000000;;				_, err = helper.Patch(info.Namespace, info.Name, patchType, patchBytes)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			counter++
0000000000000000000000000000000000000000;;			cmdutil.PrintSuccess(mapper, shortOutput, out, info.Mapping.Resource, info.Name, false, "scaled")
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if counter == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("no objects passed to scale")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
