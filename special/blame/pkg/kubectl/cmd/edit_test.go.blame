0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9a1b2da555b2b085407773a43b05de02e359b846;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		yaml "gopkg.in/yaml.v2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EditTestCase struct {
0000000000000000000000000000000000000000;;		Description string `yaml:"description"`
0000000000000000000000000000000000000000;;		// create or edit
0000000000000000000000000000000000000000;;		Mode             string   `yaml:"mode"`
0000000000000000000000000000000000000000;;		Args             []string `yaml:"args"`
0000000000000000000000000000000000000000;;		Filename         string   `yaml:"filename"`
0000000000000000000000000000000000000000;;		Output           string   `yaml:"outputFormat"`
0000000000000000000000000000000000000000;;		SaveConfig       string   `yaml:"saveConfig"`
0000000000000000000000000000000000000000;;		Namespace        string   `yaml:"namespace"`
0000000000000000000000000000000000000000;;		ExpectedStdout   []string `yaml:"expectedStdout"`
0000000000000000000000000000000000000000;;		ExpectedStderr   []string `yaml:"expectedStderr"`
0000000000000000000000000000000000000000;;		ExpectedExitCode int      `yaml:"expectedExitCode"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Steps []EditStep `yaml:"steps"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EditStep struct {
0000000000000000000000000000000000000000;;		// edit or request
0000000000000000000000000000000000000000;;		StepType string `yaml:"type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// only applies to request
0000000000000000000000000000000000000000;;		RequestMethod      string `yaml:"expectedMethod,omitempty"`
0000000000000000000000000000000000000000;;		RequestPath        string `yaml:"expectedPath,omitempty"`
0000000000000000000000000000000000000000;;		RequestContentType string `yaml:"expectedContentType,omitempty"`
0000000000000000000000000000000000000000;;		Input              string `yaml:"expectedInput"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// only applies to request
0000000000000000000000000000000000000000;;		ResponseStatusCode int `yaml:"resultingStatusCode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Output string `yaml:"resultingOutput"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEdit(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			name     string
0000000000000000000000000000000000000000;;			testcase EditTestCase
0000000000000000000000000000000000000000;;			i        int
0000000000000000000000000000000000000000;;			err      error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const updateEnvVar = "UPDATE_EDIT_FIXTURE_DATA"
0000000000000000000000000000000000000000;;		updateInputFixtures := os.Getenv(updateEnvVar) == "true"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqResp := func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;			defer func() { i++ }()
0000000000000000000000000000000000000000;;			if i > len(testcase.Steps)-1 {
0000000000000000000000000000000000000000;;				t.Fatalf("%s, step %d: more requests than steps, got %s %s", name, i, req.Method, req.URL.Path)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			step := testcase.Steps[i]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			body := []byte{}
0000000000000000000000000000000000000000;;			if req.Body != nil {
0000000000000000000000000000000000000000;;				body, err = ioutil.ReadAll(req.Body)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s, step %d: %v", name, i, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			inputFile := filepath.Join("testdata/edit", "testcase-"+name, step.Input)
0000000000000000000000000000000000000000;;			expectedInput, err := ioutil.ReadFile(inputFile)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s, step %d: %v", name, i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			outputFile := filepath.Join("testdata/edit", "testcase-"+name, step.Output)
0000000000000000000000000000000000000000;;			resultingOutput, err := ioutil.ReadFile(outputFile)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s, step %d: %v", name, i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if req.Method == "POST" && req.URL.Path == "/callback" {
0000000000000000000000000000000000000000;;				if step.StepType != "edit" {
0000000000000000000000000000000000000000;;					t.Fatalf("%s, step %d: expected edit step, got %s %s", name, i, req.Method, req.URL.Path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !bytes.Equal(body, expectedInput) {
0000000000000000000000000000000000000000;;					if updateInputFixtures {
0000000000000000000000000000000000000000;;						// Convenience to allow recapturing the input and persisting it here
0000000000000000000000000000000000000000;;						ioutil.WriteFile(inputFile, body, os.FileMode(0644))
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						t.Errorf("%s, step %d: diff in edit content:\n%s", name, i, diff.StringDiff(string(body), string(expectedInput)))
0000000000000000000000000000000000000000;;						t.Logf("If the change in input is expected, rerun tests with %s=true to update input fixtures", updateEnvVar)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return &http.Response{StatusCode: 200, Body: ioutil.NopCloser(bytes.NewReader(resultingOutput))}, nil
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if step.StepType != "request" {
0000000000000000000000000000000000000000;;					t.Fatalf("%s, step %d: expected request step, got %s %s", name, i, req.Method, req.URL.Path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				body = tryIndent(body)
0000000000000000000000000000000000000000;;				expectedInput = tryIndent(expectedInput)
0000000000000000000000000000000000000000;;				if req.Method != step.RequestMethod || req.URL.Path != step.RequestPath || req.Header.Get("Content-Type") != step.RequestContentType {
0000000000000000000000000000000000000000;;					t.Fatalf(
0000000000000000000000000000000000000000;;						"%s, step %d: expected \n%s %s (content-type=%s)\ngot\n%s %s (content-type=%s)", name, i,
0000000000000000000000000000000000000000;;						step.RequestMethod, step.RequestPath, step.RequestContentType,
0000000000000000000000000000000000000000;;						req.Method, req.URL.Path, req.Header.Get("Content-Type"),
0000000000000000000000000000000000000000;;					)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !bytes.Equal(body, expectedInput) {
0000000000000000000000000000000000000000;;					if updateInputFixtures {
0000000000000000000000000000000000000000;;						// Convenience to allow recapturing the input and persisting it here
0000000000000000000000000000000000000000;;						ioutil.WriteFile(inputFile, body, os.FileMode(0644))
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						t.Errorf("%s, step %d: diff in edit content:\n%s", name, i, diff.StringDiff(string(body), string(expectedInput)))
0000000000000000000000000000000000000000;;						t.Logf("If the change in input is expected, rerun tests with %s=true to update input fixtures", updateEnvVar)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return &http.Response{StatusCode: step.ResponseStatusCode, Header: defaultHeader(), Body: ioutil.NopCloser(bytes.NewReader(resultingOutput))}, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler := http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			resp, _ := reqResp(req)
0000000000000000000000000000000000000000;;			for k, vs := range resp.Header {
0000000000000000000000000000000000000000;;				w.Header().Del(k)
0000000000000000000000000000000000000000;;				for _, v := range vs {
0000000000000000000000000000000000000000;;					w.Header().Add(k, v)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w.WriteHeader(resp.StatusCode)
0000000000000000000000000000000000000000;;			io.Copy(w, resp.Body)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server := httptest.NewServer(handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		os.Setenv("KUBE_EDITOR", "testdata/edit/test_editor.sh")
0000000000000000000000000000000000000000;;		os.Setenv("KUBE_EDITOR_CALLBACK", server.URL+"/callback")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testcases := sets.NewString()
0000000000000000000000000000000000000000;;		filepath.Walk("testdata/edit", func(path string, info os.FileInfo, err error) error {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if path == "testdata/edit" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			name := filepath.Base(path)
0000000000000000000000000000000000000000;;			if info.IsDir() {
0000000000000000000000000000000000000000;;				if strings.HasPrefix(name, "testcase-") {
0000000000000000000000000000000000000000;;					testcases.Insert(strings.TrimPrefix(name, "testcase-"))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return filepath.SkipDir
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		// sanity check that we found the right folder
0000000000000000000000000000000000000000;;		if !testcases.Has("create-list") {
0000000000000000000000000000000000000000;;			t.Fatalf("Error locating edit testcases")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, testcaseName := range testcases.List() {
0000000000000000000000000000000000000000;;			t.Logf("Running testcase: %s", testcaseName)
0000000000000000000000000000000000000000;;			i = 0
0000000000000000000000000000000000000000;;			name = testcaseName
0000000000000000000000000000000000000000;;			testcase = EditTestCase{}
0000000000000000000000000000000000000000;;			testcaseDir := filepath.Join("testdata", "edit", "testcase-"+name)
0000000000000000000000000000000000000000;;			testcaseData, err := ioutil.ReadFile(filepath.Join(testcaseDir, "test.yaml"))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := yaml.Unmarshal(testcaseData, &testcase); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: %v", name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f, tf, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;			tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;			tf.UnstructuredClientForMappingFunc = func(mapping *meta.RESTMapping) (resource.RESTClient, error) {
0000000000000000000000000000000000000000;;				versionedAPIPath := ""
0000000000000000000000000000000000000000;;				if mapping.GroupVersionKind.Group == "" {
0000000000000000000000000000000000000000;;					versionedAPIPath = "/api/" + mapping.GroupVersionKind.Version
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					versionedAPIPath = "/apis/" + mapping.GroupVersionKind.Group + "/" + mapping.GroupVersionKind.Version
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return &fake.RESTClient{
0000000000000000000000000000000000000000;;					APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;					VersionedAPIPath:     versionedAPIPath,
0000000000000000000000000000000000000000;;					NegotiatedSerializer: unstructuredSerializer,
0000000000000000000000000000000000000000;;					Client:               fake.CreateHTTPClient(reqResp),
0000000000000000000000000000000000000000;;				}, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(testcase.Namespace) > 0 {
0000000000000000000000000000000000000000;;				tf.Namespace = testcase.Namespace
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tf.ClientConfig = defaultClientConfig()
0000000000000000000000000000000000000000;;			tf.Command = "edit test cmd invocation"
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;			errBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var cmd *cobra.Command
0000000000000000000000000000000000000000;;			switch testcase.Mode {
0000000000000000000000000000000000000000;;			case "edit":
0000000000000000000000000000000000000000;;				cmd = NewCmdEdit(f, buf, errBuf)
0000000000000000000000000000000000000000;;			case "create":
0000000000000000000000000000000000000000;;				cmd = NewCmdCreate(f, buf, errBuf)
0000000000000000000000000000000000000000;;				cmd.Flags().Set("edit", "true")
0000000000000000000000000000000000000000;;			case "edit-last-applied":
0000000000000000000000000000000000000000;;				cmd = NewCmdApplyEditLastApplied(f, buf, errBuf)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected mode %s", name, testcase.Mode)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(testcase.Filename) > 0 {
0000000000000000000000000000000000000000;;				cmd.Flags().Set("filename", filepath.Join(testcaseDir, testcase.Filename))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(testcase.Output) > 0 {
0000000000000000000000000000000000000000;;				cmd.Flags().Set("output", testcase.Output)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(testcase.SaveConfig) > 0 {
0000000000000000000000000000000000000000;;				cmd.Flags().Set("save-config", testcase.SaveConfig)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cmdutil.BehaviorOnFatal(func(str string, code int) {
0000000000000000000000000000000000000000;;				errBuf.WriteString(str)
0000000000000000000000000000000000000000;;				if testcase.ExpectedExitCode != code {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected exit code %d, got %d: %s", name, testcase.ExpectedExitCode, code, str)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cmd.Run(cmd, testcase.Args)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			stdout := buf.String()
0000000000000000000000000000000000000000;;			stderr := errBuf.String()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, s := range testcase.ExpectedStdout {
0000000000000000000000000000000000000000;;				if !strings.Contains(stdout, s) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected to see '%s' in stdout\n\nstdout:\n%s\n\nstderr:\n%s", name, s, stdout, stderr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, s := range testcase.ExpectedStderr {
0000000000000000000000000000000000000000;;				if !strings.Contains(stderr, s) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected to see '%s' in stderr\n\nstdout:\n%s\n\nstderr:\n%s", name, s, stdout, stderr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func tryIndent(data []byte) []byte {
0000000000000000000000000000000000000000;;		indented := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		if err := json.Indent(indented, data, "", "\t"); err == nil {
0000000000000000000000000000000000000000;;			return indented.Bytes()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return data
0000000000000000000000000000000000000000;;	}
