0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
b5c41cd0061862beda7ecc5a71521571a159700d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package auth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunAccessCheck(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			o         *CanIOptions
0000000000000000000000000000000000000000;;			args      []string
0000000000000000000000000000000000000000;;			allowed   bool
0000000000000000000000000000000000000000;;			serverErr error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedBodyStrings []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:    "restmapping for args",
0000000000000000000000000000000000000000;;				o:       &CanIOptions{},
0000000000000000000000000000000000000000;;				args:    []string{"get", "replicaset"},
0000000000000000000000000000000000000000;;				allowed: true,
0000000000000000000000000000000000000000;;				expectedBodyStrings: []string{
0000000000000000000000000000000000000000;;					`{"resourceAttributes":{"namespace":"test","verb":"get","group":"extensions","resource":"replicasets"}}`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:    "simple success",
0000000000000000000000000000000000000000;;				o:       &CanIOptions{},
0000000000000000000000000000000000000000;;				args:    []string{"get", "deployments.extensions/foo"},
0000000000000000000000000000000000000000;;				allowed: true,
0000000000000000000000000000000000000000;;				expectedBodyStrings: []string{
0000000000000000000000000000000000000000;;					`{"resourceAttributes":{"namespace":"test","verb":"get","group":"extensions","resource":"deployments","name":"foo"}}`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "all namespaces",
0000000000000000000000000000000000000000;;				o: &CanIOptions{
0000000000000000000000000000000000000000;;					AllNamespaces: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				args:    []string{"get", "deployments.extensions/foo"},
0000000000000000000000000000000000000000;;				allowed: true,
0000000000000000000000000000000000000000;;				expectedBodyStrings: []string{
0000000000000000000000000000000000000000;;					`{"resourceAttributes":{"verb":"get","group":"extensions","resource":"deployments","name":"foo"}}`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallowed",
0000000000000000000000000000000000000000;;				o: &CanIOptions{
0000000000000000000000000000000000000000;;					AllNamespaces: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				args:    []string{"get", "deployments.extensions/foo"},
0000000000000000000000000000000000000000;;				allowed: false,
0000000000000000000000000000000000000000;;				expectedBodyStrings: []string{
0000000000000000000000000000000000000000;;					`{"resourceAttributes":{"verb":"get","group":"extensions","resource":"deployments","name":"foo"}}`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "forcedError",
0000000000000000000000000000000000000000;;				o: &CanIOptions{
0000000000000000000000000000000000000000;;					AllNamespaces: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				args:      []string{"get", "deployments.extensions/foo"},
0000000000000000000000000000000000000000;;				allowed:   false,
0000000000000000000000000000000000000000;;				serverErr: fmt.Errorf("forcedError"),
0000000000000000000000000000000000000000;;				expectedBodyStrings: []string{
0000000000000000000000000000000000000000;;					`{"resourceAttributes":{"verb":"get","group":"extensions","resource":"deployments","name":"foo"}}`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "sub resource",
0000000000000000000000000000000000000000;;				o: &CanIOptions{
0000000000000000000000000000000000000000;;					AllNamespaces: true,
0000000000000000000000000000000000000000;;					Subresource:   "log",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				args:    []string{"get", "pods"},
0000000000000000000000000000000000000000;;				allowed: true,
0000000000000000000000000000000000000000;;				expectedBodyStrings: []string{
0000000000000000000000000000000000000000;;					`{"resourceAttributes":{"verb":"get","resource":"pods","subresource":"log"}}`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:    "nonResourceURL",
0000000000000000000000000000000000000000;;				o:       &CanIOptions{},
0000000000000000000000000000000000000000;;				args:    []string{"get", "/logs"},
0000000000000000000000000000000000000000;;				allowed: true,
0000000000000000000000000000000000000000;;				expectedBodyStrings: []string{
0000000000000000000000000000000000000000;;					`{"nonResourceAttributes":{"path":"/logs","verb":"get"}}`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			test.o.Out = ioutil.Discard
0000000000000000000000000000000000000000;;			test.o.Err = ioutil.Discard
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;			tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;				APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;				NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;				Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;					if req.URL.Path != "/apis/authorization.k8s.io/v1/selfsubjectaccessreviews" {
0000000000000000000000000000000000000000;;						t.Errorf("%s: %v", test.name, req.URL.Path)
0000000000000000000000000000000000000000;;						return nil, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					bodyBits, err := ioutil.ReadAll(req.Body)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("%s: %v", test.name, err)
0000000000000000000000000000000000000000;;						return nil, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					body := string(bodyBits)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					for _, expectedBody := range test.expectedBodyStrings {
0000000000000000000000000000000000000000;;						if !strings.Contains(body, expectedBody) {
0000000000000000000000000000000000000000;;							t.Errorf("%s expecting %s in %s", test.name, expectedBody, body)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					return &http.Response{
0000000000000000000000000000000000000000;;							StatusCode: http.StatusOK,
0000000000000000000000000000000000000000;;							Body: ioutil.NopCloser(bytes.NewBufferString(
0000000000000000000000000000000000000000;;								fmt.Sprintf(`{"kind":"SelfSubjectAccessReview","apiVersion":"authorization.k8s.io/v1","status":{"allowed":%v}}`, test.allowed),
0000000000000000000000000000000000000000;;							)),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						test.serverErr
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tf.Namespace = "test"
0000000000000000000000000000000000000000;;			tf.ClientConfig = &restclient.Config{ContentConfig: restclient.ContentConfig{GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := test.o.Complete(f, test.args); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actualAllowed, err := test.o.RunAccessCheck()
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case test.serverErr == nil && err == nil:
0000000000000000000000000000000000000000;;				// pass
0000000000000000000000000000000000000000;;			case err != nil && test.serverErr != nil && strings.Contains(err.Error(), test.serverErr.Error()):
0000000000000000000000000000000000000000;;				// pass
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.serverErr, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if actualAllowed != test.allowed {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.allowed, actualAllowed)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
