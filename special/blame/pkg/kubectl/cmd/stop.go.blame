0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a18cddc2602cbfa22d60f258fe3bda28bcd48577;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		stopLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			Deprecated: Gracefully shut down a resource by name or filename.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			The stop command is deprecated, all its functionalities are covered by delete command.
0000000000000000000000000000000000000000;;			See 'kubectl delete --help' for more details.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Attempts to shut down and delete a resource that supports graceful termination.
0000000000000000000000000000000000000000;;			If the resource is scalable it will be scaled to 0 before deletion.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stopExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Shut down foo.
0000000000000000000000000000000000000000;;			kubectl stop replicationcontroller foo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Stop pods and services with label name=myLabel.
0000000000000000000000000000000000000000;;			kubectl stop pods,services -l name=myLabel
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Shut down the service defined in service.json
0000000000000000000000000000000000000000;;			kubectl stop -f service.json
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Shut down all resources in the path/to/resources directory
0000000000000000000000000000000000000000;;			kubectl stop -f path/to/resources`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdStop(f cmdutil.Factory, out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &resource.FilenameOptions{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:        "stop (-f FILENAME | TYPE (NAME | -l label | --all))",
0000000000000000000000000000000000000000;;			Short:      i18n.T("Deprecated: Gracefully shut down a resource by name or filename"),
0000000000000000000000000000000000000000;;			Long:       stopLong,
0000000000000000000000000000000000000000;;			Example:    stopExample,
0000000000000000000000000000000000000000;;			Deprecated: fmt.Sprintf("use %q instead.", "delete"),
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(cmdutil.ValidateOutputArgs(cmd))
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(RunStop(f, cmd, args, out, options))
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		usage := "of resource(s) to be stopped."
0000000000000000000000000000000000000000;;		cmdutil.AddFilenameOptionFlags(cmd, options, usage)
0000000000000000000000000000000000000000;;		cmd.Flags().StringP("selector", "l", "", "Selector (label query) to filter on.")
0000000000000000000000000000000000000000;;		cmd.Flags().Bool("all", false, "select all resources in the namespace of the specified resource types.")
0000000000000000000000000000000000000000;;		cmd.Flags().Bool("ignore-not-found", false, "Treat \"resource not found\" as a successful stop.")
0000000000000000000000000000000000000000;;		cmd.Flags().Int("grace-period", -1, "Period of time in seconds given to the resource to terminate gracefully. Ignored if negative.")
0000000000000000000000000000000000000000;;		cmd.Flags().Duration("timeout", 0, "The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object")
0000000000000000000000000000000000000000;;		cmdutil.AddOutputFlagsForMutation(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddInclude3rdPartyFlags(cmd)
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RunStop(f cmdutil.Factory, cmd *cobra.Command, args []string, out io.Writer, options *resource.FilenameOptions) error {
0000000000000000000000000000000000000000;;		cmdNamespace, enforceNamespace, err := f.DefaultNamespace()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapper, _ := f.Object()
0000000000000000000000000000000000000000;;		r := f.NewBuilder(true).
0000000000000000000000000000000000000000;;			ContinueOnError().
0000000000000000000000000000000000000000;;			NamespaceParam(cmdNamespace).DefaultNamespace().
0000000000000000000000000000000000000000;;			ResourceTypeOrNameArgs(false, args...).
0000000000000000000000000000000000000000;;			FilenameParam(enforceNamespace, options).
0000000000000000000000000000000000000000;;			SelectorParam(cmdutil.GetFlagString(cmd, "selector")).
0000000000000000000000000000000000000000;;			SelectAllParam(cmdutil.GetFlagBool(cmd, "all")).
0000000000000000000000000000000000000000;;			Flatten().
0000000000000000000000000000000000000000;;			Do()
0000000000000000000000000000000000000000;;		if r.Err() != nil {
0000000000000000000000000000000000000000;;			return r.Err()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		shortOutput := cmdutil.GetFlagString(cmd, "output") == "name"
0000000000000000000000000000000000000000;;		gracePeriod := cmdutil.GetFlagInt(cmd, "grace-period")
0000000000000000000000000000000000000000;;		waitForDeletion := false
0000000000000000000000000000000000000000;;		if gracePeriod == 0 {
0000000000000000000000000000000000000000;;			// To preserve backwards compatibility, but prevent accidental data loss, we convert --grace-period=0
0000000000000000000000000000000000000000;;			// into --grace-period=1 and wait until the object is successfully deleted.
0000000000000000000000000000000000000000;;			gracePeriod = 1
0000000000000000000000000000000000000000;;			waitForDeletion = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ReapResult(r, f, out, false, cmdutil.GetFlagBool(cmd, "ignore-not-found"), cmdutil.GetFlagDuration(cmd, "timeout"), gracePeriod, waitForDeletion, shortOutput, mapper, false)
0000000000000000000000000000000000000000;;	}
