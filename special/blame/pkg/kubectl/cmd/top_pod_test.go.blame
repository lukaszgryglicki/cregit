0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2b934ba029573c39bdac328d720ca9bd8c22aa1e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;		metricsapi "k8s.io/metrics/pkg/apis/metrics/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		topPathPrefix = baseMetricsAddress + "/" + metricsApiVersion
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTopPod(t *testing.T) {
0000000000000000000000000000000000000000;;		testNS := "testns"
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;			namespace       string
0000000000000000000000000000000000000000;;			flags           map[string]string
0000000000000000000000000000000000000000;;			args            []string
0000000000000000000000000000000000000000;;			expectedPath    string
0000000000000000000000000000000000000000;;			expectedQuery   string
0000000000000000000000000000000000000000;;			namespaces      []string
0000000000000000000000000000000000000000;;			containers      bool
0000000000000000000000000000000000000000;;			listsNamespaces bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:            "all namespaces",
0000000000000000000000000000000000000000;;				flags:           map[string]string{"all-namespaces": "true"},
0000000000000000000000000000000000000000;;				expectedPath:    topPathPrefix + "/pods",
0000000000000000000000000000000000000000;;				namespaces:      []string{testNS, "secondtestns", "thirdtestns"},
0000000000000000000000000000000000000000;;				listsNamespaces: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "all in namespace",
0000000000000000000000000000000000000000;;				expectedPath: topPathPrefix + "/namespaces/" + testNS + "/pods",
0000000000000000000000000000000000000000;;				namespaces:   []string{testNS, testNS},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "pod with name",
0000000000000000000000000000000000000000;;				args:         []string{"pod1"},
0000000000000000000000000000000000000000;;				expectedPath: topPathPrefix + "/namespaces/" + testNS + "/pods/pod1",
0000000000000000000000000000000000000000;;				namespaces:   []string{testNS},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:          "pod with label selector",
0000000000000000000000000000000000000000;;				flags:         map[string]string{"selector": "key=value"},
0000000000000000000000000000000000000000;;				expectedPath:  topPathPrefix + "/namespaces/" + testNS + "/pods",
0000000000000000000000000000000000000000;;				expectedQuery: "labelSelector=" + url.QueryEscape("key=value"),
0000000000000000000000000000000000000000;;				namespaces:    []string{testNS, testNS},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "pod with container metrics",
0000000000000000000000000000000000000000;;				flags:        map[string]string{"containers": "true"},
0000000000000000000000000000000000000000;;				args:         []string{"pod1"},
0000000000000000000000000000000000000000;;				expectedPath: topPathPrefix + "/namespaces/" + testNS + "/pods/pod1",
0000000000000000000000000000000000000000;;				namespaces:   []string{testNS},
0000000000000000000000000000000000000000;;				containers:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		initTestErrorHandler(t)
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			t.Logf("Running test case: %s", testCase.name)
0000000000000000000000000000000000000000;;			metricsList := testPodMetricsData()
0000000000000000000000000000000000000000;;			var expectedMetrics []metricsapi.PodMetrics
0000000000000000000000000000000000000000;;			var expectedContainerNames, nonExpectedMetricsNames []string
0000000000000000000000000000000000000000;;			for n, m := range metricsList {
0000000000000000000000000000000000000000;;				if n < len(testCase.namespaces) {
0000000000000000000000000000000000000000;;					m.Namespace = testCase.namespaces[n]
0000000000000000000000000000000000000000;;					expectedMetrics = append(expectedMetrics, m)
0000000000000000000000000000000000000000;;					for _, c := range m.Containers {
0000000000000000000000000000000000000000;;						expectedContainerNames = append(expectedContainerNames, c.Name)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					nonExpectedMetricsNames = append(nonExpectedMetricsNames, m.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var response interface{}
0000000000000000000000000000000000000000;;			if len(expectedMetrics) == 1 {
0000000000000000000000000000000000000000;;				response = expectedMetrics[0]
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				response = metricsapi.PodMetricsList{
0000000000000000000000000000000000000000;;					ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "2",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Items: expectedMetrics,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f, tf, _, ns := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;			tf.Printer = &testPrinter{}
0000000000000000000000000000000000000000;;			tf.Client = &fake.RESTClient{
0000000000000000000000000000000000000000;;				APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;				NegotiatedSerializer: ns,
0000000000000000000000000000000000000000;;				Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;					switch p, m, q := req.URL.Path, req.Method, req.URL.RawQuery; {
0000000000000000000000000000000000000000;;					case p == testCase.expectedPath && m == "GET" && (testCase.expectedQuery == "" || q == testCase.expectedQuery):
0000000000000000000000000000000000000000;;						body, err := marshallBody(response)
0000000000000000000000000000000000000000;;						if err != nil {
0000000000000000000000000000000000000000;;							t.Errorf("%s: unexpected error: %v", testCase.name, err)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						return &http.Response{StatusCode: 200, Header: defaultHeader(), Body: body}, nil
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						t.Fatalf("%s: unexpected request: %#v\nGot URL: %#v\nExpected path: %#v\nExpected query: %#v",
0000000000000000000000000000000000000000;;							testCase.name, req, req.URL, testCase.expectedPath, testCase.expectedQuery)
0000000000000000000000000000000000000000;;						return nil, nil
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tf.Namespace = testNS
0000000000000000000000000000000000000000;;			tf.ClientConfig = defaultClientConfig()
0000000000000000000000000000000000000000;;			buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cmd := NewCmdTopPod(f, buf)
0000000000000000000000000000000000000000;;			for name, value := range testCase.flags {
0000000000000000000000000000000000000000;;				cmd.Flags().Set(name, value)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cmd.Run(cmd, testCase.args)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check the presence of pod names&namespaces/container names in the output.
0000000000000000000000000000000000000000;;			result := buf.String()
0000000000000000000000000000000000000000;;			if testCase.containers {
0000000000000000000000000000000000000000;;				for _, containerName := range expectedContainerNames {
0000000000000000000000000000000000000000;;					if !strings.Contains(result, containerName) {
0000000000000000000000000000000000000000;;						t.Errorf("%s: missing metrics for container %s: \n%s", testCase.name, containerName, result)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, m := range expectedMetrics {
0000000000000000000000000000000000000000;;				if !strings.Contains(result, m.Name) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: missing metrics for %s: \n%s", testCase.name, m.Name, result)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if testCase.listsNamespaces && !strings.Contains(result, m.Namespace) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: missing metrics for %s/%s: \n%s", testCase.name, m.Namespace, m.Name, result)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, name := range nonExpectedMetricsNames {
0000000000000000000000000000000000000000;;				if strings.Contains(result, name) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected metrics for %s: \n%s", testCase.name, name, result)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPodMetricsData() []metricsapi.PodMetrics {
0000000000000000000000000000000000000000;;		return []metricsapi.PodMetrics{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "pod1", Namespace: "test", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;				Window:     metav1.Duration{Duration: time.Minute},
0000000000000000000000000000000000000000;;				Containers: []metricsapi.ContainerMetrics{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "container1-1",
0000000000000000000000000000000000000000;;						Usage: clientv1.ResourceList{
0000000000000000000000000000000000000000;;							clientv1.ResourceCPU:     *resource.NewMilliQuantity(1, resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceMemory:  *resource.NewQuantity(2*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceStorage: *resource.NewQuantity(3*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "container1-2",
0000000000000000000000000000000000000000;;						Usage: clientv1.ResourceList{
0000000000000000000000000000000000000000;;							clientv1.ResourceCPU:     *resource.NewMilliQuantity(4, resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceMemory:  *resource.NewQuantity(5*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceStorage: *resource.NewQuantity(6*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "pod2", Namespace: "test", ResourceVersion: "11"},
0000000000000000000000000000000000000000;;				Window:     metav1.Duration{Duration: time.Minute},
0000000000000000000000000000000000000000;;				Containers: []metricsapi.ContainerMetrics{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "container2-1",
0000000000000000000000000000000000000000;;						Usage: clientv1.ResourceList{
0000000000000000000000000000000000000000;;							clientv1.ResourceCPU:     *resource.NewMilliQuantity(7, resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceMemory:  *resource.NewQuantity(8*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceStorage: *resource.NewQuantity(9*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "container2-2",
0000000000000000000000000000000000000000;;						Usage: clientv1.ResourceList{
0000000000000000000000000000000000000000;;							clientv1.ResourceCPU:     *resource.NewMilliQuantity(10, resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceMemory:  *resource.NewQuantity(11*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceStorage: *resource.NewQuantity(12*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "container2-3",
0000000000000000000000000000000000000000;;						Usage: clientv1.ResourceList{
0000000000000000000000000000000000000000;;							clientv1.ResourceCPU:     *resource.NewMilliQuantity(13, resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceMemory:  *resource.NewQuantity(14*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceStorage: *resource.NewQuantity(15*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "pod3", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;				Window:     metav1.Duration{Duration: time.Minute},
0000000000000000000000000000000000000000;;				Containers: []metricsapi.ContainerMetrics{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "container3-1",
0000000000000000000000000000000000000000;;						Usage: clientv1.ResourceList{
0000000000000000000000000000000000000000;;							clientv1.ResourceCPU:     *resource.NewMilliQuantity(7, resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceMemory:  *resource.NewQuantity(8*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;							clientv1.ResourceStorage: *resource.NewQuantity(9*(1024*1024), resource.DecimalSI),
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
