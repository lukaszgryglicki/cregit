0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2b934ba029573c39bdac328d720ca9bd8c22aa1e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		coreclient "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/metricsutil"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TopPodOptions struct {
0000000000000000000000000000000000000000;;		ResourceName    string
0000000000000000000000000000000000000000;;		Namespace       string
0000000000000000000000000000000000000000;;		Selector        string
0000000000000000000000000000000000000000;;		AllNamespaces   bool
0000000000000000000000000000000000000000;;		PrintContainers bool
0000000000000000000000000000000000000000;;		PodClient       coreclient.PodsGetter
0000000000000000000000000000000000000000;;		HeapsterOptions HeapsterTopOptions
0000000000000000000000000000000000000000;;		Client          *metricsutil.HeapsterMetricsClient
0000000000000000000000000000000000000000;;		Printer         *metricsutil.TopCmdPrinter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const metricsCreationDelay = 2 * time.Minute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		topPodLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			Display Resource (CPU/Memory/Storage) usage of pods.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			The 'top pod' command allows you to see the resource consumption of pods.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Due to the metrics pipeline delay, they may be unavailable for a few minutes
0000000000000000000000000000000000000000;;			since pod creation.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		topPodExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# Show metrics for all pods in the default namespace
0000000000000000000000000000000000000000;;			kubectl top pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Show metrics for all pods in the given namespace
0000000000000000000000000000000000000000;;			kubectl top pod --namespace=NAMESPACE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Show metrics for a given pod and its containers
0000000000000000000000000000000000000000;;			kubectl top pod POD_NAME --containers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# Show metrics for the pods defined by label name=myLabel
0000000000000000000000000000000000000000;;			kubectl top pod -l name=myLabel`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdTopPod(f cmdutil.Factory, out io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &TopPodOptions{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "pod [NAME | -l label]",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Display Resource (CPU/Memory/Storage) usage of pods"),
0000000000000000000000000000000000000000;;			Long:    topPodLong,
0000000000000000000000000000000000000000;;			Example: topPodExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				if err := options.Complete(f, cmd, args, out); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := options.Validate(); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(cmdutil.UsageErrorf(cmd, "%v", err))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := options.RunTopPod(); err != nil {
0000000000000000000000000000000000000000;;					cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Aliases: []string{"pods", "po"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Flags().StringVarP(&options.Selector, "selector", "l", "", "Selector (label query) to filter on, supports '=', '==', and '!='.")
0000000000000000000000000000000000000000;;		cmd.Flags().BoolVar(&options.PrintContainers, "containers", false, "If present, print usage of containers within a pod.")
0000000000000000000000000000000000000000;;		cmd.Flags().BoolVar(&options.AllNamespaces, "all-namespaces", false, "If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.")
0000000000000000000000000000000000000000;;		options.HeapsterOptions.Bind(cmd.Flags())
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *TopPodOptions) Complete(f cmdutil.Factory, cmd *cobra.Command, args []string, out io.Writer) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if len(args) == 1 {
0000000000000000000000000000000000000000;;			o.ResourceName = args[0]
0000000000000000000000000000000000000000;;		} else if len(args) > 1 {
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, "%s", cmd.Use)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.Namespace, _, err = f.DefaultNamespace()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clientset, err := f.ClientSet()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.PodClient = clientset.Core()
0000000000000000000000000000000000000000;;		o.Client = metricsutil.NewHeapsterMetricsClient(clientset.Core(), o.HeapsterOptions.Namespace, o.HeapsterOptions.Scheme, o.HeapsterOptions.Service, o.HeapsterOptions.Port)
0000000000000000000000000000000000000000;;		o.Printer = metricsutil.NewTopCmdPrinter(out)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *TopPodOptions) Validate() error {
0000000000000000000000000000000000000000;;		if len(o.ResourceName) > 0 && len(o.Selector) > 0 {
0000000000000000000000000000000000000000;;			return errors.New("only one of NAME or --selector can be provided")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o TopPodOptions) RunTopPod() error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		selector := labels.Everything()
0000000000000000000000000000000000000000;;		if len(o.Selector) > 0 {
0000000000000000000000000000000000000000;;			selector, err = labels.Parse(o.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		metrics, err := o.Client.GetPodMetrics(o.Namespace, o.ResourceName, o.AllNamespaces, selector)
0000000000000000000000000000000000000000;;		// TODO: Refactor this once Heapster becomes the API server.
0000000000000000000000000000000000000000;;		// First we check why no metrics have been received.
0000000000000000000000000000000000000000;;		if len(metrics) == 0 {
0000000000000000000000000000000000000000;;			// If the API server query is successful but all the pods are newly created,
0000000000000000000000000000000000000000;;			// the metrics are probably not ready yet, so we return the error here in the first place.
0000000000000000000000000000000000000000;;			e := verifyEmptyMetrics(o, selector)
0000000000000000000000000000000000000000;;			if e != nil {
0000000000000000000000000000000000000000;;				return e
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return o.Printer.PrintPodMetrics(metrics, o.PrintContainers, o.AllNamespaces)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyEmptyMetrics(o TopPodOptions, selector labels.Selector) error {
0000000000000000000000000000000000000000;;		if len(o.ResourceName) > 0 {
0000000000000000000000000000000000000000;;			pod, err := o.PodClient.Pods(o.Namespace).Get(o.ResourceName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := checkPodAge(pod); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			pods, err := o.PodClient.Pods(o.Namespace).List(metav1.ListOptions{
0000000000000000000000000000000000000000;;				LabelSelector: selector.String(),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(pods.Items) == 0 {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, pod := range pods.Items {
0000000000000000000000000000000000000000;;				if err := checkPodAge(&pod); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors.New("metrics not available yet")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkPodAge(pod *api.Pod) error {
0000000000000000000000000000000000000000;;		age := time.Since(pod.CreationTimestamp.Time)
0000000000000000000000000000000000000000;;		if age > metricsCreationDelay {
0000000000000000000000000000000000000000;;			message := fmt.Sprintf("Metrics not available for pod %s/%s, age: %s", pod.Namespace, pod.Name, age.String())
0000000000000000000000000000000000000000;;			glog.Warningf(message)
0000000000000000000000000000000000000000;;			return errors.New(message)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			glog.V(2).Infof("Metrics not yet available for pod %s/%s, age: %s", pod.Namespace, pod.Name, age.String())
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
