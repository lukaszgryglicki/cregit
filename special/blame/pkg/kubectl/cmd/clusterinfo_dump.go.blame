0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f2bdac03dccc79e299094e4482879c067812b4ba;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCmdCreateSecret groups subcommands to create various types of secrets
0000000000000000000000000000000000000000;;	func NewCmdClusterInfoDump(f cmdutil.Factory, cmdOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "dump",
0000000000000000000000000000000000000000;;			Short:   i18n.T("Dump lots of relevant info for debugging and diagnosis"),
0000000000000000000000000000000000000000;;			Long:    dumpLong,
0000000000000000000000000000000000000000;;			Example: dumpExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(dumpClusterInfo(f, cmd, cmdOut))
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Flags().String("output-directory", "", i18n.T("Where to output the files.  If empty or '-' uses stdout, otherwise creates a directory hierarchy in that directory"))
0000000000000000000000000000000000000000;;		cmd.Flags().StringSlice("namespaces", []string{}, "A comma separated list of namespaces to dump.")
0000000000000000000000000000000000000000;;		cmd.Flags().Bool("all-namespaces", false, "If true, dump all namespaces.  If true, --namespaces is ignored.")
0000000000000000000000000000000000000000;;		cmdutil.AddPodRunningTimeoutFlag(cmd, defaultPodLogsTimeout)
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		dumpLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;	    Dumps cluster info out suitable for debugging and diagnosing cluster problems.  By default, dumps everything to
0000000000000000000000000000000000000000;;	    stdout. You can optionally specify a directory with --output-directory.  If you specify a directory, kubernetes will
0000000000000000000000000000000000000000;;	    build a set of files in that directory.  By default only dumps things in the 'kube-system' namespace, but you can
0000000000000000000000000000000000000000;;	    switch to a different namespace with the --namespaces flag, or specify --all-namespaces to dump all namespaces.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    The command also dumps the logs of all of the pods in the cluster, these logs are dumped into different directories
0000000000000000000000000000000000000000;;	    based on namespace and pod name.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dumpExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;	    # Dump current cluster state to stdout
0000000000000000000000000000000000000000;;	    kubectl cluster-info dump
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Dump current cluster state to /path/to/cluster-state
0000000000000000000000000000000000000000;;	    kubectl cluster-info dump --output-directory=/path/to/cluster-state
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Dump all namespaces to stdout
0000000000000000000000000000000000000000;;	    kubectl cluster-info dump --all-namespaces
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Dump a set of namespaces to /path/to/cluster-state
0000000000000000000000000000000000000000;;	    kubectl cluster-info dump --namespaces default,kube-system --output-directory=/path/to/cluster-state`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setupOutputWriter(cmd *cobra.Command, defaultWriter io.Writer, filename string) io.Writer {
0000000000000000000000000000000000000000;;		dir := cmdutil.GetFlagString(cmd, "output-directory")
0000000000000000000000000000000000000000;;		if len(dir) == 0 || dir == "-" {
0000000000000000000000000000000000000000;;			return defaultWriter
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fullFile := path.Join(dir, filename)
0000000000000000000000000000000000000000;;		parent := path.Dir(fullFile)
0000000000000000000000000000000000000000;;		cmdutil.CheckErr(os.MkdirAll(parent, 0755))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		file, err := os.Create(path.Join(dir, filename))
0000000000000000000000000000000000000000;;		cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;		return file
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func dumpClusterInfo(f cmdutil.Factory, cmd *cobra.Command, out io.Writer) error {
0000000000000000000000000000000000000000;;		timeout, err := cmdutil.GetPodRunningTimeoutFlag(cmd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientset, err := f.ClientSet()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		printer := &printers.JSONPrinter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nodes, err := clientset.Core().Nodes().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := printer.PrintObj(nodes, setupOutputWriter(cmd, out, "nodes.json")); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var namespaces []string
0000000000000000000000000000000000000000;;		if cmdutil.GetFlagBool(cmd, "all-namespaces") {
0000000000000000000000000000000000000000;;			namespaceList, err := clientset.Core().Namespaces().List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for ix := range namespaceList.Items {
0000000000000000000000000000000000000000;;				namespaces = append(namespaces, namespaceList.Items[ix].Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			namespaces = cmdutil.GetFlagStringSlice(cmd, "namespaces")
0000000000000000000000000000000000000000;;			if len(namespaces) == 0 {
0000000000000000000000000000000000000000;;				cmdNamespace, _, err := f.DefaultNamespace()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				namespaces = []string{
0000000000000000000000000000000000000000;;					metav1.NamespaceSystem,
0000000000000000000000000000000000000000;;					cmdNamespace,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, namespace := range namespaces {
0000000000000000000000000000000000000000;;			// TODO: this is repetitive in the extreme.  Use reflection or
0000000000000000000000000000000000000000;;			// something to make this a for loop.
0000000000000000000000000000000000000000;;			events, err := clientset.Core().Events(namespace).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(events, setupOutputWriter(cmd, out, path.Join(namespace, "events.json"))); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			rcs, err := clientset.Core().ReplicationControllers(namespace).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(rcs, setupOutputWriter(cmd, out, path.Join(namespace, "replication-controllers.json"))); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			svcs, err := clientset.Core().Services(namespace).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(svcs, setupOutputWriter(cmd, out, path.Join(namespace, "services.json"))); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sets, err := clientset.Extensions().DaemonSets(namespace).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(sets, setupOutputWriter(cmd, out, path.Join(namespace, "daemonsets.json"))); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			deps, err := clientset.Extensions().Deployments(namespace).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(deps, setupOutputWriter(cmd, out, path.Join(namespace, "deployments.json"))); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			rps, err := clientset.Extensions().ReplicaSets(namespace).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(rps, setupOutputWriter(cmd, out, path.Join(namespace, "replicasets.json"))); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pods, err := clientset.Core().Pods(namespace).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := printer.PrintObj(pods, setupOutputWriter(cmd, out, path.Join(namespace, "pods.json"))); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			printContainer := func(writer io.Writer, container api.Container, pod *api.Pod) {
0000000000000000000000000000000000000000;;				writer.Write([]byte(fmt.Sprintf("==== START logs for container %s of pod %s/%s ====\n", container.Name, pod.Namespace, pod.Name)))
0000000000000000000000000000000000000000;;				defer writer.Write([]byte(fmt.Sprintf("==== END logs for container %s of pod %s/%s ====\n", container.Name, pod.Namespace, pod.Name)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				request, err := f.LogsForObject(pod, &api.PodLogOptions{Container: container.Name}, timeout)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					// Print error and return.
0000000000000000000000000000000000000000;;					writer.Write([]byte(fmt.Sprintf("Create log request error: %s\n", err.Error())))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				data, err := request.DoRaw()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					// Print error and return.
0000000000000000000000000000000000000000;;					writer.Write([]byte(fmt.Sprintf("Request log error: %s\n", err.Error())))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				writer.Write(data)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for ix := range pods.Items {
0000000000000000000000000000000000000000;;				pod := &pods.Items[ix]
0000000000000000000000000000000000000000;;				containers := pod.Spec.Containers
0000000000000000000000000000000000000000;;				writer := setupOutputWriter(cmd, out, path.Join(namespace, pod.Name, "logs.txt"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for i := range containers {
0000000000000000000000000000000000000000;;					printContainer(writer, containers[i], pod)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dir := cmdutil.GetFlagString(cmd, "output-directory")
0000000000000000000000000000000000000000;;		if len(dir) == 0 {
0000000000000000000000000000000000000000;;			dir = "standard output"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dir != "-" {
0000000000000000000000000000000000000000;;			fmt.Fprintf(out, "Cluster info dumped to %s\n", dir)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
