0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c2de101d0e15789ec3b8b98c2d2b34f2c4a0897c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmdtesting "k8s.io/kubernetes/pkg/kubectl/cmd/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateArgs(t *testing.T) {
0000000000000000000000000000000000000000;;		f, _, _, _ := cmdtesting.NewAPIFactory()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			testName  string
0000000000000000000000000000000000000000;;			flags     map[string]string
0000000000000000000000000000000000000000;;			filenames []string
0000000000000000000000000000000000000000;;			args      []string
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:  "nothing",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:  "no file, no image",
0000000000000000000000000000000000000000;;				flags:     map[string]string{},
0000000000000000000000000000000000000000;;				args:      []string{"foo"},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName:  "valid file example",
0000000000000000000000000000000000000000;;				filenames: []string{"bar.yaml"},
0000000000000000000000000000000000000000;;				args:      []string{"foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName: "missing second image name",
0000000000000000000000000000000000000000;;				flags: map[string]string{
0000000000000000000000000000000000000000;;					"image": "foo:v2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				args: []string{"foo"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName: "valid image example",
0000000000000000000000000000000000000000;;				flags: map[string]string{
0000000000000000000000000000000000000000;;					"image": "foo:v2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				args: []string{"foo", "foo-v2"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				testName: "both filename and image example",
0000000000000000000000000000000000000000;;				flags: map[string]string{
0000000000000000000000000000000000000000;;					"image": "foo:v2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				filenames: []string{"bar.yaml"},
0000000000000000000000000000000000000000;;				args:      []string{"foo", "foo-v2"},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			out := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			cmd := NewCmdRollingUpdate(f, out)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.flags != nil {
0000000000000000000000000000000000000000;;				for key, val := range test.flags {
0000000000000000000000000000000000000000;;					cmd.Flags().Set(key, val)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := validateArguments(cmd, test.filenames, test.args)
0000000000000000000000000000000000000000;;			if err != nil && !test.expectErr {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", test.testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && test.expectErr {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected non-error", test.testName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
