0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
9c568c4f0841f5adc1b61d72cb8aeca7a93e95ac;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/resource"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ViewLastAppliedOptions struct {
0000000000000000000000000000000000000000;;		FilenameOptions              resource.FilenameOptions
0000000000000000000000000000000000000000;;		Selector                     string
0000000000000000000000000000000000000000;;		LastAppliedConfigurationList []string
0000000000000000000000000000000000000000;;		OutputFormat                 string
0000000000000000000000000000000000000000;;		All                          bool
0000000000000000000000000000000000000000;;		Factory                      cmdutil.Factory
0000000000000000000000000000000000000000;;		Out                          io.Writer
0000000000000000000000000000000000000000;;		ErrOut                       io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		applyViewLastAppliedLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			View the latest last-applied-configuration annotations by type/name or file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			The default output will be printed to stdout in YAML format. One can use -o option
0000000000000000000000000000000000000000;;			to change output format.`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		applyViewLastAppliedExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			# View the last-applied-configuration annotations by type/name in YAML.
0000000000000000000000000000000000000000;;			kubectl apply view-last-applied deployment/nginx
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			# View the last-applied-configuration annotations by file in JSON
0000000000000000000000000000000000000000;;			kubectl apply view-last-applied -f deploy.yaml -o json`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCmdApplyViewLastApplied(f cmdutil.Factory, out, err io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		options := &ViewLastAppliedOptions{Out: out, ErrOut: err}
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "view-last-applied (TYPE [NAME | -l label] | TYPE/NAME | -f FILENAME)",
0000000000000000000000000000000000000000;;			Short:   i18n.T("View latest last-applied-configuration annotations of a resource/object"),
0000000000000000000000000000000000000000;;			Long:    applyViewLastAppliedLong,
0000000000000000000000000000000000000000;;			Example: applyViewLastAppliedExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(options.ValidateOutputArgs(cmd))
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(options.Complete(f, args))
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(options.Validate(cmd))
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(options.RunApplyViewLastApplied())
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Flags().StringP("output", "o", "", "Output format. Must be one of yaml|json")
0000000000000000000000000000000000000000;;		cmd.Flags().StringVarP(&options.Selector, "selector", "l", "", "Selector (label query) to filter on, supports '=', '==', and '!='.")
0000000000000000000000000000000000000000;;		cmd.Flags().BoolVar(&options.All, "all", false, "select all resources in the namespace of the specified resource types")
0000000000000000000000000000000000000000;;		usage := "that contains the last-applied-configuration annotations"
0000000000000000000000000000000000000000;;		cmdutil.AddFilenameOptionFlags(cmd, &options.FilenameOptions, usage)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ViewLastAppliedOptions) Complete(f cmdutil.Factory, args []string) error {
0000000000000000000000000000000000000000;;		cmdNamespace, enforceNamespace, err := f.DefaultNamespace()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		builder, err := f.NewUnstructuredBuilder(true)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r := builder.
0000000000000000000000000000000000000000;;			NamespaceParam(cmdNamespace).DefaultNamespace().
0000000000000000000000000000000000000000;;			FilenameParam(enforceNamespace, &o.FilenameOptions).
0000000000000000000000000000000000000000;;			ResourceTypeOrNameArgs(enforceNamespace, args...).
0000000000000000000000000000000000000000;;			SelectAllParam(o.All).
0000000000000000000000000000000000000000;;			SelectorParam(o.Selector).
0000000000000000000000000000000000000000;;			Latest().
0000000000000000000000000000000000000000;;			Flatten().
0000000000000000000000000000000000000000;;			Do()
0000000000000000000000000000000000000000;;		err = r.Err()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = r.Visit(func(info *resource.Info, err error) error {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			configString, err := kubectl.GetOriginalConfiguration(info.Mapping, info.Object)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if configString == nil {
0000000000000000000000000000000000000000;;				return cmdutil.AddSourceToErr(fmt.Sprintf("no last-applied-configuration annotation found on resource: %s\n", info.Name), info.Source, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			o.LastAppliedConfigurationList = append(o.LastAppliedConfigurationList, string(configString))
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ViewLastAppliedOptions) Validate(cmd *cobra.Command) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ViewLastAppliedOptions) RunApplyViewLastApplied() error {
0000000000000000000000000000000000000000;;		for _, str := range o.LastAppliedConfigurationList {
0000000000000000000000000000000000000000;;			switch o.OutputFormat {
0000000000000000000000000000000000000000;;			case "json":
0000000000000000000000000000000000000000;;				jsonBuffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;				err := json.Indent(jsonBuffer, []byte(str), "", "  ")
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				fmt.Fprint(o.Out, string(jsonBuffer.Bytes()))
0000000000000000000000000000000000000000;;			case "yaml":
0000000000000000000000000000000000000000;;				yamlOutput, err := yaml.JSONToYAML([]byte(str))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				fmt.Fprint(o.Out, string(yamlOutput))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ViewLastAppliedOptions) ValidateOutputArgs(cmd *cobra.Command) error {
0000000000000000000000000000000000000000;;		format := cmdutil.GetFlagString(cmd, "output")
0000000000000000000000000000000000000000;;		switch format {
0000000000000000000000000000000000000000;;		case "json":
0000000000000000000000000000000000000000;;			o.OutputFormat = "json"
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		// If flag -o is not specified, use yaml as default
0000000000000000000000000000000000000000;;		case "yaml", "":
0000000000000000000000000000000000000000;;			o.OutputFormat = "yaml"
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return cmdutil.UsageErrorf(cmd, "Unexpected -o output mode: %s, the flag 'output' must be one of yaml|json", format)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
