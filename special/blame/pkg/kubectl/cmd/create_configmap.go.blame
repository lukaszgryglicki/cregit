0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bb96a6bdcc1458e363cf890811c932c126cf0b96;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/cmd/templates"
0000000000000000000000000000000000000000;;		cmdutil "k8s.io/kubernetes/pkg/kubectl/cmd/util"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/i18n"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		configMapLong = templates.LongDesc(i18n.T(`
0000000000000000000000000000000000000000;;			Create a configmap based on a file, directory, or specified literal value.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			A single configmap may package one or more key/value pairs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			When creating a configmap based on a file, the key will default to the basename of the file, and the value will
0000000000000000000000000000000000000000;;			default to the file content.  If the basename is an invalid key, you may specify an alternate key.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			When creating a configmap based on a directory, each file whose basename is a valid key in the directory will be
0000000000000000000000000000000000000000;;			packaged into the configmap.  Any directory entries except regular files are ignored (e.g. subdirectories,
0000000000000000000000000000000000000000;;			symlinks, devices, pipes, etc).`))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		configMapExample = templates.Examples(i18n.T(`
0000000000000000000000000000000000000000;;			  # Create a new configmap named my-config based on folder bar
0000000000000000000000000000000000000000;;			  kubectl create configmap my-config --from-file=path/to/bar
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			  # Create a new configmap named my-config with specified keys instead of file basenames on disk
0000000000000000000000000000000000000000;;			  kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			  # Create a new configmap named my-config with key1=config1 and key2=config2
0000000000000000000000000000000000000000;;			  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			  # Create a new configmap named my-config from the key=value pairs in the file
0000000000000000000000000000000000000000;;			  kubectl create configmap my-config --from-file=path/to/bar
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			  # Create a new configmap named my-config from an env file
0000000000000000000000000000000000000000;;			  kubectl create configmap my-config --from-env-file=path/to/bar.env`))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfigMap is a command to ease creating ConfigMaps.
0000000000000000000000000000000000000000;;	func NewCmdCreateConfigMap(f cmdutil.Factory, cmdOut io.Writer) *cobra.Command {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Use:     "configmap NAME [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run]",
0000000000000000000000000000000000000000;;			Aliases: []string{"cm"},
0000000000000000000000000000000000000000;;			Short:   i18n.T("Create a configmap from a local file, directory or literal value"),
0000000000000000000000000000000000000000;;			Long:    configMapLong,
0000000000000000000000000000000000000000;;			Example: configMapExample,
0000000000000000000000000000000000000000;;			Run: func(cmd *cobra.Command, args []string) {
0000000000000000000000000000000000000000;;				err := CreateConfigMap(f, cmdOut, cmd, args)
0000000000000000000000000000000000000000;;				cmdutil.CheckErr(err)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdutil.AddApplyAnnotationFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddValidateFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddPrinterFlags(cmd)
0000000000000000000000000000000000000000;;		cmdutil.AddGeneratorFlags(cmd, cmdutil.ConfigMapV1GeneratorName)
0000000000000000000000000000000000000000;;		cmd.Flags().StringSlice("from-file", []string{}, "Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.")
0000000000000000000000000000000000000000;;		cmd.Flags().StringArray("from-literal", []string{}, "Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)")
0000000000000000000000000000000000000000;;		cmd.Flags().String("from-env-file", "", "Specify the path to a file to read lines of key=val pairs to create a configmap (i.e. a Docker .env file).")
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateConfigMap is the implementation of the create configmap command.
0000000000000000000000000000000000000000;;	func CreateConfigMap(f cmdutil.Factory, cmdOut io.Writer, cmd *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;		name, err := NameFromCommandArgs(cmd, args)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var generator kubectl.StructuredGenerator
0000000000000000000000000000000000000000;;		switch generatorName := cmdutil.GetFlagString(cmd, "generator"); generatorName {
0000000000000000000000000000000000000000;;		case cmdutil.ConfigMapV1GeneratorName:
0000000000000000000000000000000000000000;;			generator = &kubectl.ConfigMapGeneratorV1{
0000000000000000000000000000000000000000;;				Name:           name,
0000000000000000000000000000000000000000;;				FileSources:    cmdutil.GetFlagStringSlice(cmd, "from-file"),
0000000000000000000000000000000000000000;;				LiteralSources: cmdutil.GetFlagStringArray(cmd, "from-literal"),
0000000000000000000000000000000000000000;;				EnvFileSource:  cmdutil.GetFlagString(cmd, "from-env-file"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errUnsupportedGenerator(cmd, generatorName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return RunCreateSubcommand(f, cmd, cmdOut, &CreateSubcommandOptions{
0000000000000000000000000000000000000000;;			Name:                name,
0000000000000000000000000000000000000000;;			StructuredGenerator: generator,
0000000000000000000000000000000000000000;;			DryRun:              cmdutil.GetDryRunFlag(cmd),
0000000000000000000000000000000000000000;;			OutputFormat:        cmdutil.GetFlagString(cmd, "output"),
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
