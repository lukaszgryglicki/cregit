0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9b9941cb6bdb9b41a03ca8af4d70e7a5a199c7fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateService(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			generator Generator
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  api.Service
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "TCP",
0000000000000000000000000000000000000000;;					"container-port": "1234",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "TCP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(1234),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "UDP",
0000000000000000000000000000000000000000;;					"container-port": "foobar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "UDP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromString("foobar"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"labels":         "key1=value1,key2=value2",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "TCP",
0000000000000000000000000000000000000000;;					"container-port": "1234",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"key1": "value1",
0000000000000000000000000000000000000000;;							"key2": "value2",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "TCP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(1234),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "UDP",
0000000000000000000000000000000000000000;;					"container-port": "foobar",
0000000000000000000000000000000000000000;;					"external-ip":    "1.2.3.4",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "UDP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromString("foobar"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ExternalIPs: []string{"1.2.3.4"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "UDP",
0000000000000000000000000000000000000000;;					"container-port": "foobar",
0000000000000000000000000000000000000000;;					"external-ip":    "1.2.3.4",
0000000000000000000000000000000000000000;;					"type":           "LoadBalancer",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "UDP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromString("foobar"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type:        api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;						ExternalIPs: []string{"1.2.3.4"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "UDP",
0000000000000000000000000000000000000000;;					"container-port": "foobar",
0000000000000000000000000000000000000000;;					"type":           string(api.ServiceTypeNodePort),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "UDP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromString("foobar"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":                      "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":                          "test",
0000000000000000000000000000000000000000;;					"port":                          "80",
0000000000000000000000000000000000000000;;					"protocol":                      "UDP",
0000000000000000000000000000000000000000;;					"container-port":                "foobar",
0000000000000000000000000000000000000000;;					"create-external-load-balancer": "true", // ignored when type is present
0000000000000000000000000000000000000000;;					"type": string(api.ServiceTypeNodePort),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "UDP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromString("foobar"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Type: api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV1{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "TCP",
0000000000000000000000000000000000000000;;					"container-port": "1234",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "default",
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "TCP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(1234),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV1{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":         "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":             "test",
0000000000000000000000000000000000000000;;					"port":             "80",
0000000000000000000000000000000000000000;;					"protocol":         "TCP",
0000000000000000000000000000000000000000;;					"container-port":   "1234",
0000000000000000000000000000000000000000;;					"session-affinity": "ClientIP",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "default",
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "TCP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(1234),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						SessionAffinity: api.ServiceAffinityClientIP,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "TCP",
0000000000000000000000000000000000000000;;					"container-port": "1234",
0000000000000000000000000000000000000000;;					"cluster-ip":     "10.10.10.10",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "TCP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(1234),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP: "10.10.10.10",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"port":           "80",
0000000000000000000000000000000000000000;;					"protocol":       "TCP",
0000000000000000000000000000000000000000;;					"container-port": "1234",
0000000000000000000000000000000000000000;;					"cluster-ip":     "None",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   "TCP",
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(1234),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						ClusterIP: api.ClusterIPNone,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV1{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"ports":          "80,443",
0000000000000000000000000000000000000000;;					"protocol":       "TCP",
0000000000000000000000000000000000000000;;					"container-port": "foobar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-1",
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromString("foobar"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-2",
0000000000000000000000000000000000000000;;								Port:       443,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromString("foobar"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":    "foo=bar",
0000000000000000000000000000000000000000;;					"name":        "test",
0000000000000000000000000000000000000000;;					"ports":       "80,443",
0000000000000000000000000000000000000000;;					"protocol":    "UDP",
0000000000000000000000000000000000000000;;					"target-port": "1234",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-1",
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(1234),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-2",
0000000000000000000000000000000000000000;;								Port:       443,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(1234),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector": "foo=bar",
0000000000000000000000000000000000000000;;					"name":     "test",
0000000000000000000000000000000000000000;;					"ports":    "80,443",
0000000000000000000000000000000000000000;;					"protocol": "TCP",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-1",
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-2",
0000000000000000000000000000000000000000;;								Port:       443,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(443),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":  "foo=bar",
0000000000000000000000000000000000000000;;					"name":      "test",
0000000000000000000000000000000000000000;;					"ports":     "80,8080",
0000000000000000000000000000000000000000;;					"protocols": "8080/UDP",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-1",
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-2",
0000000000000000000000000000000000000000;;								Port:       8080,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(8080),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":  "foo=bar",
0000000000000000000000000000000000000000;;					"name":      "test",
0000000000000000000000000000000000000000;;					"ports":     "80,8080,8081",
0000000000000000000000000000000000000000;;					"protocols": "8080/UDP,8081/TCP",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-1",
0000000000000000000000000000000000000000;;								Port:       80,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(80),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-2",
0000000000000000000000000000000000000000;;								Port:       8080,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolUDP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(8080),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:       "port-3",
0000000000000000000000000000000000000000;;								Port:       8081,
0000000000000000000000000000000000000000;;								Protocol:   api.ProtocolTCP,
0000000000000000000000000000000000000000;;								TargetPort: intstr.FromInt(8081),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":       "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":           "test",
0000000000000000000000000000000000000000;;					"protocol":       "TCP",
0000000000000000000000000000000000000000;;					"container-port": "1234",
0000000000000000000000000000000000000000;;					"cluster-ip":     "None",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;							"baz": "blah",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports:     []api.ServicePort{},
0000000000000000000000000000000000000000;;						ClusterIP: api.ClusterIPNone,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				generator: ServiceGeneratorV2{},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"selector":   "foo=bar",
0000000000000000000000000000000000000000;;					"name":       "test",
0000000000000000000000000000000000000000;;					"cluster-ip": "None",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Ports:     []api.ServicePort{},
0000000000000000000000000000000000000000;;						ClusterIP: api.ClusterIPNone,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := test.generator.Generate(test.params)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj, &test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("expected:\n%#v\ngot\n%#v\n", &test.expected, obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
