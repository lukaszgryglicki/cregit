0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c42f1246a9a49cb796bfcb946f3811026d8a3070;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CategoryExpander interface {
0000000000000000000000000000000000000000;;		Expand(category string) ([]schema.GroupResource, bool)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SimpleCategoryExpander struct {
0000000000000000000000000000000000000000;;		Expansions map[string][]schema.GroupResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e SimpleCategoryExpander) Expand(category string) ([]schema.GroupResource, bool) {
0000000000000000000000000000000000000000;;		ret, ok := e.Expansions[category]
0000000000000000000000000000000000000000;;		return ret, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type discoveryFilteredExpander struct {
0000000000000000000000000000000000000000;;		delegate CategoryExpander
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		discoveryClient discovery.DiscoveryInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDiscoveryFilteredExpander returns a category expander that filters the returned groupresources by
0000000000000000000000000000000000000000;;	// what the server has available
0000000000000000000000000000000000000000;;	func NewDiscoveryFilteredExpander(delegate CategoryExpander, client discovery.DiscoveryInterface) (discoveryFilteredExpander, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return discoveryFilteredExpander{}, errors.New("Please provide discovery client to shortcut expander")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return discoveryFilteredExpander{delegate: delegate, discoveryClient: client}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e discoveryFilteredExpander) Expand(category string) ([]schema.GroupResource, bool) {
0000000000000000000000000000000000000000;;		delegateExpansion, ok := e.delegate.Expand(category)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check if we have access to server resources
0000000000000000000000000000000000000000;;		apiResources, err := e.discoveryClient.ServerResources()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return delegateExpansion, ok
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		availableResources, err := discovery.GroupVersionResources(apiResources)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return delegateExpansion, ok
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		available := []schema.GroupResource{}
0000000000000000000000000000000000000000;;		for _, requestedResource := range delegateExpansion {
0000000000000000000000000000000000000000;;			for availableResource := range availableResources {
0000000000000000000000000000000000000000;;				if requestedResource.Group == availableResource.Group &&
0000000000000000000000000000000000000000;;					requestedResource.Resource == availableResource.Resource {
0000000000000000000000000000000000000000;;					available = append(available, requestedResource)
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return available, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// legacyUserResources are the resource names that apply to the primary, user facing resources used by
0000000000000000000000000000000000000000;;	// client tools. They are in deletion-first order - dependent resources should be last.
0000000000000000000000000000000000000000;;	// Should remain exported in order to expose a current list of resources to downstream
0000000000000000000000000000000000000000;;	// composition that wants to build on the concept of 'all' for their CLIs.
0000000000000000000000000000000000000000;;	var legacyUserResources = []schema.GroupResource{
0000000000000000000000000000000000000000;;		{Group: "", Resource: "pods"},
0000000000000000000000000000000000000000;;		{Group: "", Resource: "replicationcontrollers"},
0000000000000000000000000000000000000000;;		{Group: "", Resource: "services"},
0000000000000000000000000000000000000000;;		{Group: "apps", Resource: "statefulsets"},
0000000000000000000000000000000000000000;;		{Group: "autoscaling", Resource: "horizontalpodautoscalers"},
0000000000000000000000000000000000000000;;		{Group: "batch", Resource: "jobs"},
0000000000000000000000000000000000000000;;		{Group: "extensions", Resource: "deployments"},
0000000000000000000000000000000000000000;;		{Group: "extensions", Resource: "replicasets"},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LegacyCategoryExpander is the old hardcoded expansion
0000000000000000000000000000000000000000;;	var LegacyCategoryExpander CategoryExpander = SimpleCategoryExpander{
0000000000000000000000000000000000000000;;		Expansions: map[string][]schema.GroupResource{
0000000000000000000000000000000000000000;;			"all": legacyUserResources,
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LegacyFederationCategoryExpander is the old hardcoded expansion for federation
0000000000000000000000000000000000000000;;	var LegacyFederationCategoryExpander CategoryExpander = SimpleCategoryExpander{
0000000000000000000000000000000000000000;;		Expansions: map[string][]schema.GroupResource{
0000000000000000000000000000000000000000;;			"all": {{Group: "", Resource: "services"}},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
