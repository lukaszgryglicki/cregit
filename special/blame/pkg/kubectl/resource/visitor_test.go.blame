0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9ba3a745a39daf396b9839a23eabaf68fbf7f280;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVisitorHttpGet(t *testing.T) {
0000000000000000000000000000000000000000;;		// Test retries on errors
0000000000000000000000000000000000000000;;		i := 0
0000000000000000000000000000000000000000;;		expectedErr := fmt.Errorf("Failed to get http")
0000000000000000000000000000000000000000;;		actualBytes, actualErr := readHttpWithRetries(func(url string) (int, string, io.ReadCloser, error) {
0000000000000000000000000000000000000000;;			assert.Equal(t, "hello", url)
0000000000000000000000000000000000000000;;			i++
0000000000000000000000000000000000000000;;			if i > 2 {
0000000000000000000000000000000000000000;;				return 0, "", nil, expectedErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0, "", nil, fmt.Errorf("Unexpected error")
0000000000000000000000000000000000000000;;		}, 0, "hello", 3)
0000000000000000000000000000000000000000;;		assert.Equal(t, expectedErr, actualErr)
0000000000000000000000000000000000000000;;		assert.Nil(t, actualBytes)
0000000000000000000000000000000000000000;;		assert.Equal(t, 3, i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test that 500s are retried.
0000000000000000000000000000000000000000;;		i = 0
0000000000000000000000000000000000000000;;		actualBytes, actualErr = readHttpWithRetries(func(url string) (int, string, io.ReadCloser, error) {
0000000000000000000000000000000000000000;;			assert.Equal(t, "hello", url)
0000000000000000000000000000000000000000;;			i++
0000000000000000000000000000000000000000;;			return 501, "Status", nil, nil
0000000000000000000000000000000000000000;;		}, 0, "hello", 3)
0000000000000000000000000000000000000000;;		assert.Error(t, actualErr)
0000000000000000000000000000000000000000;;		assert.Nil(t, actualBytes)
0000000000000000000000000000000000000000;;		assert.Equal(t, 3, i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test that 300s are not retried
0000000000000000000000000000000000000000;;		i = 0
0000000000000000000000000000000000000000;;		actualBytes, actualErr = readHttpWithRetries(func(url string) (int, string, io.ReadCloser, error) {
0000000000000000000000000000000000000000;;			assert.Equal(t, "hello", url)
0000000000000000000000000000000000000000;;			i++
0000000000000000000000000000000000000000;;			return 300, "Status", nil, nil
0000000000000000000000000000000000000000;;		}, 0, "hello", 3)
0000000000000000000000000000000000000000;;		assert.Error(t, actualErr)
0000000000000000000000000000000000000000;;		assert.Nil(t, actualBytes)
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test attempt count is respected
0000000000000000000000000000000000000000;;		i = 0
0000000000000000000000000000000000000000;;		actualBytes, actualErr = readHttpWithRetries(func(url string) (int, string, io.ReadCloser, error) {
0000000000000000000000000000000000000000;;			assert.Equal(t, "hello", url)
0000000000000000000000000000000000000000;;			i++
0000000000000000000000000000000000000000;;			return 501, "Status", nil, nil
0000000000000000000000000000000000000000;;		}, 0, "hello", 1)
0000000000000000000000000000000000000000;;		assert.Error(t, actualErr)
0000000000000000000000000000000000000000;;		assert.Nil(t, actualBytes)
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test attempts less than 1 results in an error
0000000000000000000000000000000000000000;;		i = 0
0000000000000000000000000000000000000000;;		b := bytes.Buffer{}
0000000000000000000000000000000000000000;;		actualBytes, actualErr = readHttpWithRetries(func(url string) (int, string, io.ReadCloser, error) {
0000000000000000000000000000000000000000;;			return 200, "Status", ioutil.NopCloser(&b), nil
0000000000000000000000000000000000000000;;		}, 0, "hello", 0)
0000000000000000000000000000000000000000;;		assert.Error(t, actualErr)
0000000000000000000000000000000000000000;;		assert.Nil(t, actualBytes)
0000000000000000000000000000000000000000;;		assert.Equal(t, 0, i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test Success
0000000000000000000000000000000000000000;;		i = 0
0000000000000000000000000000000000000000;;		b = bytes.Buffer{}
0000000000000000000000000000000000000000;;		actualBytes, actualErr = readHttpWithRetries(func(url string) (int, string, io.ReadCloser, error) {
0000000000000000000000000000000000000000;;			assert.Equal(t, "hello", url)
0000000000000000000000000000000000000000;;			i++
0000000000000000000000000000000000000000;;			if i > 1 {
0000000000000000000000000000000000000000;;				return 200, "Status", ioutil.NopCloser(&b), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 501, "Status", nil, nil
0000000000000000000000000000000000000000;;		}, 0, "hello", 3)
0000000000000000000000000000000000000000;;		assert.Nil(t, actualErr)
0000000000000000000000000000000000000000;;		assert.NotNil(t, actualBytes)
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, i)
0000000000000000000000000000000000000000;;	}
