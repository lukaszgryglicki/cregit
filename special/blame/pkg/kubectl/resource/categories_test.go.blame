0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c42f1246a9a49cb796bfcb946f3811026d8a3070;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCategoryExpansion(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			arg  string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expected   []schema.GroupResource
0000000000000000000000000000000000000000;;			expectedOk bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:     "no-replacement",
0000000000000000000000000000000000000000;;				arg:      "service",
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "all-replacement",
0000000000000000000000000000000000000000;;				arg:  "all",
0000000000000000000000000000000000000000;;				expected: []schema.GroupResource{
0000000000000000000000000000000000000000;;					{Resource: "pods"},
0000000000000000000000000000000000000000;;					{Resource: "replicationcontrollers"},
0000000000000000000000000000000000000000;;					{Resource: "services"},
0000000000000000000000000000000000000000;;					{Resource: "statefulsets", Group: "apps"},
0000000000000000000000000000000000000000;;					{Resource: "horizontalpodautoscalers", Group: "autoscaling"},
0000000000000000000000000000000000000000;;					{Resource: "jobs", Group: "batch"},
0000000000000000000000000000000000000000;;					{Resource: "deployments", Group: "extensions"},
0000000000000000000000000000000000000000;;					{Resource: "replicasets", Group: "extensions"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedOk: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			actual, actualOk := LegacyCategoryExpander.Expand(test.arg)
0000000000000000000000000000000000000000;;			if e, a := test.expected, actual; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("%s:  expected %s, got %s", test.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := test.expectedOk, actualOk; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%s:  expected %v, got %v", test.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
