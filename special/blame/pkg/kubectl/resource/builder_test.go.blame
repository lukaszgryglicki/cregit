0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0d9c8ae7da203d6d867cf33477074544b6d83448;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/streaming"
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		restclientwatch "k8s.io/client-go/rest/watch"
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringBody(body string) io.ReadCloser {
0000000000000000000000000000000000000000;;		return ioutil.NopCloser(bytes.NewReader([]byte(body)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func watchBody(events ...watch.Event) string {
0000000000000000000000000000000000000000;;		buf := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		codec := testapi.Default.Codec()
0000000000000000000000000000000000000000;;		enc := restclientwatch.NewEncoder(streaming.NewEncoder(buf, codec), codec)
0000000000000000000000000000000000000000;;		for _, e := range events {
0000000000000000000000000000000000000000;;			enc.Encode(&e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeClient() ClientMapper {
0000000000000000000000000000000000000000;;		return ClientMapperFunc(func(*meta.RESTMapping) (RESTClient, error) {
0000000000000000000000000000000000000000;;			return &fake.RESTClient{}, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fakeClientWith(testName string, t *testing.T, data map[string]string) ClientMapper {
0000000000000000000000000000000000000000;;		return ClientMapperFunc(func(*meta.RESTMapping) (RESTClient, error) {
0000000000000000000000000000000000000000;;			return &fake.RESTClient{
0000000000000000000000000000000000000000;;				APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;				NegotiatedSerializer: testapi.Default.NegotiatedSerializer(),
0000000000000000000000000000000000000000;;				Client: fake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;					p := req.URL.Path
0000000000000000000000000000000000000000;;					q := req.URL.RawQuery
0000000000000000000000000000000000000000;;					if len(q) != 0 {
0000000000000000000000000000000000000000;;						p = p + "?" + q
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					body, ok := data[p]
0000000000000000000000000000000000000000;;					if !ok {
0000000000000000000000000000000000000000;;						t.Fatalf("%s: unexpected request: %s (%s)\n%#v", testName, p, req.URL, req)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					header := http.Header{}
0000000000000000000000000000000000000000;;					header.Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;					return &http.Response{
0000000000000000000000000000000000000000;;						StatusCode: http.StatusOK,
0000000000000000000000000000000000000000;;						Header:     header,
0000000000000000000000000000000000000000;;						Body:       stringBody(body),
0000000000000000000000000000000000000000;;					}, nil
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testData() (*api.PodList, *api.ServiceList) {
0000000000000000000000000000000000000000;;		pods := &api.PodList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "15",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []api.Pod{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "test", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;					Spec:       apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "bar", Namespace: "test", ResourceVersion: "11"},
0000000000000000000000000000000000000000;;					Spec:       apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		svc := &api.ServiceList{
0000000000000000000000000000000000000000;;			ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;				ResourceVersion: "16",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Items: []api.Service{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "12"},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;						Type:            "ClusterIP",
0000000000000000000000000000000000000000;;						SessionAffinity: "None",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pods, svc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func streamTestData() (io.Reader, *api.PodList, *api.ServiceList) {
0000000000000000000000000000000000000000;;		pods, svc := testData()
0000000000000000000000000000000000000000;;		r, w := io.Pipe()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer w.Close()
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), pods)))
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), svc)))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return r, pods, svc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func JSONToYAMLOrDie(in []byte) []byte {
0000000000000000000000000000000000000000;;		data, err := yaml.JSONToYAML(in)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return data
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func streamYAMLTestData() (io.Reader, *api.PodList, *api.ServiceList) {
0000000000000000000000000000000000000000;;		pods, svc := testData()
0000000000000000000000000000000000000000;;		r, w := io.Pipe()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer w.Close()
0000000000000000000000000000000000000000;;			w.Write(JSONToYAMLOrDie([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), pods))))
0000000000000000000000000000000000000000;;			w.Write([]byte("\n---\n"))
0000000000000000000000000000000000000000;;			w.Write(JSONToYAMLOrDie([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), svc))))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return r, pods, svc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func streamTestObject(obj runtime.Object) io.Reader {
0000000000000000000000000000000000000000;;		r, w := io.Pipe()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer w.Close()
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), obj)))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testVisitor struct {
0000000000000000000000000000000000000000;;		InjectErr error
0000000000000000000000000000000000000000;;		Infos     []*Info
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *testVisitor) Handle(info *Info, err error) error {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v.Infos = append(v.Infos, info)
0000000000000000000000000000000000000000;;		return v.InjectErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *testVisitor) Objects() []runtime.Object {
0000000000000000000000000000000000000000;;		objects := []runtime.Object{}
0000000000000000000000000000000000000000;;		for i := range v.Infos {
0000000000000000000000000000000000000000;;			objects = append(objects, v.Infos[i].Object)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return objects
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var aPod string = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    "kind": "Pod",
0000000000000000000000000000000000000000;;			"apiVersion": "` + api.Registry.GroupOrDie(api.GroupName).GroupVersion.String() + `",
0000000000000000000000000000000000000000;;	    "metadata": {
0000000000000000000000000000000000000000;;	        "name": "busybox{id}",
0000000000000000000000000000000000000000;;	        "labels": {
0000000000000000000000000000000000000000;;	            "name": "busybox{id}"
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	    },
0000000000000000000000000000000000000000;;	    "spec": {
0000000000000000000000000000000000000000;;	        "containers": [
0000000000000000000000000000000000000000;;	            {
0000000000000000000000000000000000000000;;	                "name": "busybox",
0000000000000000000000000000000000000000;;	                "image": "busybox",
0000000000000000000000000000000000000000;;	                "command": [
0000000000000000000000000000000000000000;;	                    "sleep",
0000000000000000000000000000000000000000;;	                    "3600"
0000000000000000000000000000000000000000;;	                ],
0000000000000000000000000000000000000000;;	                "imagePullPolicy": "IfNotPresent"
0000000000000000000000000000000000000000;;	            }
0000000000000000000000000000000000000000;;	        ],
0000000000000000000000000000000000000000;;	        "restartPolicy": "Always"
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var aRC string = `
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	    "kind": "ReplicationController",
0000000000000000000000000000000000000000;;			"apiVersion": "` + api.Registry.GroupOrDie(api.GroupName).GroupVersion.String() + `",
0000000000000000000000000000000000000000;;	    "metadata": {
0000000000000000000000000000000000000000;;	        "name": "busybox{id}",
0000000000000000000000000000000000000000;;	        "labels": {
0000000000000000000000000000000000000000;;	            "app": "busybox"
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	    },
0000000000000000000000000000000000000000;;	    "spec": {
0000000000000000000000000000000000000000;;	        "replicas": 1,
0000000000000000000000000000000000000000;;	        "template": {
0000000000000000000000000000000000000000;;	            "metadata": {
0000000000000000000000000000000000000000;;	                "name": "busybox{id}",
0000000000000000000000000000000000000000;;	                "labels": {
0000000000000000000000000000000000000000;;	                    "app": "busybox{id}"
0000000000000000000000000000000000000000;;	                }
0000000000000000000000000000000000000000;;	            },
0000000000000000000000000000000000000000;;	            "spec": {
0000000000000000000000000000000000000000;;	                "containers": [
0000000000000000000000000000000000000000;;	                    {
0000000000000000000000000000000000000000;;	                        "name": "busybox",
0000000000000000000000000000000000000000;;	                        "image": "busybox",
0000000000000000000000000000000000000000;;	                        "command": [
0000000000000000000000000000000000000000;;	                            "sleep",
0000000000000000000000000000000000000000;;	                            "3600"
0000000000000000000000000000000000000000;;	                        ],
0000000000000000000000000000000000000000;;	                        "imagePullPolicy": "IfNotPresent"
0000000000000000000000000000000000000000;;	                    }
0000000000000000000000000000000000000000;;	                ],
0000000000000000000000000000000000000000;;	                "restartPolicy": "Always"
0000000000000000000000000000000000000000;;	            }
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPathBuilderAndVersionedObjectNotDefaulted(t *testing.T) {
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{"../../../test/fixtures/pkg/kubectl/builder/kitten-rc.yaml"}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || !singleItemImplied || len(test.Infos) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info := test.Infos[0]
0000000000000000000000000000000000000000;;		if info.Name != "update-demo-kitten" || info.Namespace != "" || info.Object == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected info: %#v", info)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		version, ok := info.VersionedObject.(*v1.ReplicationController)
0000000000000000000000000000000000000000;;		// versioned object does not have defaulting applied
0000000000000000000000000000000000000000;;		if info.VersionedObject == nil || !ok || version.Spec.Replicas != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected versioned object: %#v", info.VersionedObject)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNodeBuilder(t *testing.T) {
0000000000000000000000000000000000000000;;		node := &api.Node{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "node1", Namespace: "should-not-have", ResourceVersion: "10"},
0000000000000000000000000000000000000000;;			Spec:       api.NodeSpec{},
0000000000000000000000000000000000000000;;			Status: api.NodeStatus{
0000000000000000000000000000000000000000;;				Capacity: api.ResourceList{
0000000000000000000000000000000000000000;;					api.ResourceCPU:    resource.MustParse("1000m"),
0000000000000000000000000000000000000000;;					api.ResourceMemory: resource.MustParse("1Mi"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, w := io.Pipe()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer w.Close()
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), node)))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").Stream(r, "STDIN")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || len(test.Infos) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %#v", err, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		info := test.Infos[0]
0000000000000000000000000000000000000000;;		if info.Name != "node1" || info.Namespace != "" || info.Object == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected info: %#v", info)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createTestDir(t *testing.T, path string) {
0000000000000000000000000000000000000000;;		if err := os.MkdirAll(path, 0750); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating test dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeTestFile(t *testing.T, path string, contents string) {
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(path, []byte(contents), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating test file %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPathBuilderWithMultiple(t *testing.T) {
0000000000000000000000000000000000000000;;		// create test dirs
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("recursive_test_multiple")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		createTestDir(t, fmt.Sprintf("%s/%s", tmpDir, "recursive/pod/pod_1"))
0000000000000000000000000000000000000000;;		createTestDir(t, fmt.Sprintf("%s/%s", tmpDir, "recursive/rc/rc_1"))
0000000000000000000000000000000000000000;;		createTestDir(t, fmt.Sprintf("%s/%s", tmpDir, "inode/hardlink"))
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create test files
0000000000000000000000000000000000000000;;		writeTestFile(t, fmt.Sprintf("%s/recursive/pod/busybox.json", tmpDir), strings.Replace(aPod, "{id}", "0", -1))
0000000000000000000000000000000000000000;;		writeTestFile(t, fmt.Sprintf("%s/recursive/pod/pod_1/busybox.json", tmpDir), strings.Replace(aPod, "{id}", "1", -1))
0000000000000000000000000000000000000000;;		writeTestFile(t, fmt.Sprintf("%s/recursive/rc/busybox.json", tmpDir), strings.Replace(aRC, "{id}", "0", -1))
0000000000000000000000000000000000000000;;		writeTestFile(t, fmt.Sprintf("%s/recursive/rc/rc_1/busybox.json", tmpDir), strings.Replace(aRC, "{id}", "1", -1))
0000000000000000000000000000000000000000;;		writeTestFile(t, fmt.Sprintf("%s/inode/hardlink/busybox.json", tmpDir), strings.Replace(aPod, "{id}", "0", -1))
0000000000000000000000000000000000000000;;		if err := os.Link(fmt.Sprintf("%s/inode/hardlink/busybox.json", tmpDir), fmt.Sprintf("%s/inode/hardlink/busybox-link.json", tmpDir)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating test file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name          string
0000000000000000000000000000000000000000;;			object        runtime.Object
0000000000000000000000000000000000000000;;			recursive     bool
0000000000000000000000000000000000000000;;			directory     string
0000000000000000000000000000000000000000;;			expectedNames []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"pod", &api.Pod{}, false, "../../../examples/pod", []string{"nginx"}},
0000000000000000000000000000000000000000;;			{"recursive-pod", &api.Pod{}, true, fmt.Sprintf("%s/recursive/pod", tmpDir), []string{"busybox0", "busybox1"}},
0000000000000000000000000000000000000000;;			{"rc", &api.ReplicationController{}, false, "../../../examples/guestbook/legacy/redis-master-controller.yaml", []string{"redis-master"}},
0000000000000000000000000000000000000000;;			{"recursive-rc", &api.ReplicationController{}, true, fmt.Sprintf("%s/recursive/rc", tmpDir), []string{"busybox0", "busybox1"}},
0000000000000000000000000000000000000000;;			{"hardlink", &api.Pod{}, false, fmt.Sprintf("%s/inode/hardlink/busybox-link.json", tmpDir), []string{"busybox0"}},
0000000000000000000000000000000000000000;;			{"hardlink", &api.Pod{}, true, fmt.Sprintf("%s/inode/hardlink/busybox-link.json", tmpDir), []string{"busybox0"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;				FilenameParam(false, &FilenameOptions{Recursive: test.recursive, Filenames: []string{test.directory}}).
0000000000000000000000000000000000000000;;				NamespaceParam("test").DefaultNamespace()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			testVisitor := &testVisitor{}
0000000000000000000000000000000000000000;;			singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(testVisitor.Handle)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected response: %v %t %#v %s", err, singleItemImplied, testVisitor.Infos, test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			info := testVisitor.Infos
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i, v := range info {
0000000000000000000000000000000000000000;;				switch test.object.(type) {
0000000000000000000000000000000000000000;;				case *api.Pod:
0000000000000000000000000000000000000000;;					if _, ok := v.Object.(*api.Pod); !ok || v.Name != test.expectedNames[i] || v.Namespace != "test" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected info: %#v", v)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case *api.ReplicationController:
0000000000000000000000000000000000000000;;					if _, ok := v.Object.(*api.ReplicationController); !ok || v.Name != test.expectedNames[i] || v.Namespace != "test" {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected info: %#v", v)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPathBuilderWithMultipleInvalid(t *testing.T) {
0000000000000000000000000000000000000000;;		// create test dirs
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("recursive_test_multiple_invalid")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		createTestDir(t, fmt.Sprintf("%s/%s", tmpDir, "inode/symlink/pod"))
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create test files
0000000000000000000000000000000000000000;;		writeTestFile(t, fmt.Sprintf("%s/inode/symlink/pod/busybox.json", tmpDir), strings.Replace(aPod, "{id}", "0", -1))
0000000000000000000000000000000000000000;;		if err := os.Symlink(fmt.Sprintf("%s/inode/symlink/pod", tmpDir), fmt.Sprintf("%s/inode/symlink/pod-link", tmpDir)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating test file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := os.Symlink(fmt.Sprintf("%s/inode/symlink/loop", tmpDir), fmt.Sprintf("%s/inode/symlink/loop", tmpDir)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating test file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			recursive bool
0000000000000000000000000000000000000000;;			directory string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"symlink", false, fmt.Sprintf("%s/inode/symlink/pod-link", tmpDir)},
0000000000000000000000000000000000000000;;			{"symlink", true, fmt.Sprintf("%s/inode/symlink/pod-link", tmpDir)},
0000000000000000000000000000000000000000;;			{"loop", false, fmt.Sprintf("%s/inode/symlink/loop", tmpDir)},
0000000000000000000000000000000000000000;;			{"loop", true, fmt.Sprintf("%s/inode/symlink/loop", tmpDir)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;				FilenameParam(false, &FilenameOptions{Recursive: test.recursive, Filenames: []string{test.directory}}).
0000000000000000000000000000000000000000;;				NamespaceParam("test").DefaultNamespace()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			testVisitor := &testVisitor{}
0000000000000000000000000000000000000000;;			singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(testVisitor.Handle)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected response: %v %t %#v %s", err, singleItemImplied, testVisitor.Infos, test.name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDirectoryBuilder(t *testing.T) {
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{"../../../examples/guestbook/legacy"}}).
0000000000000000000000000000000000000000;;			NamespaceParam("test").DefaultNamespace()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || singleItemImplied || len(test.Infos) < 3 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		found := false
0000000000000000000000000000000000000000;;		for _, info := range test.Infos {
0000000000000000000000000000000000000000;;			if info.Name == "redis-master" && info.Namespace == "test" && info.Object != nil {
0000000000000000000000000000000000000000;;				found = true
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected responses: %#v", test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamespaceOverride(t *testing.T) {
0000000000000000000000000000000000000000;;		s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), &api.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: "foo", Name: "test"}})))
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer s.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{s.URL}}).
0000000000000000000000000000000000000000;;			NamespaceParam("test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || len(test.Infos) != 1 && test.Infos[0].Namespace != "foo" {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %#v", err, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b = NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			FilenameParam(true, &FilenameOptions{Recursive: false, Filenames: []string{s.URL}}).
0000000000000000000000000000000000000000;;			NamespaceParam("test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test = &testVisitor{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = b.Do().Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected namespace error. got: %#v", test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestURLBuilder(t *testing.T) {
0000000000000000000000000000000000000000;;		s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), &api.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: "foo", Name: "test"}})))
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), &api.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: "foo", Name: "test1"}})))
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer s.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{s.URL}}).
0000000000000000000000000000000000000000;;			NamespaceParam("foo")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || len(test.Infos) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %#v", err, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		info := test.Infos[0]
0000000000000000000000000000000000000000;;		if info.Name != "test" || info.Namespace != "foo" || info.Object == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected info: %#v", info)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info = test.Infos[1]
0000000000000000000000000000000000000000;;		if info.Name != "test1" || info.Namespace != "foo" || info.Object == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected info: %#v", info)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestURLBuilderRequireNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), &api.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: "foo", Name: "test"}})))
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer s.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{s.URL}}).
0000000000000000000000000000000000000000;;			NamespaceParam("test").RequireNamespace()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err == nil || !singleItemImplied || len(test.Infos) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceByName(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _ := testData()
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods/foo": runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[0]),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Do().Err() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ResourceTypeOrNameArgs(true, "pods", "foo")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || !singleItemImplied || len(test.Infos) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(&pods.Items[0], test.Objects()[0]) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object: %#v", test.Objects()[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapping, err := b.Do().ResourceMapping()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mapping.Resource != "pods" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected resource mapping: %#v", mapping)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMultipleResourceByTheSameName(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svcs := testData()
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods/foo":     runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[0]),
0000000000000000000000000000000000000000;;			"/namespaces/test/pods/baz":     runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[1]),
0000000000000000000000000000000000000000;;			"/namespaces/test/services/foo": runtime.EncodeOrDie(testapi.Default.Codec(), &svcs.Items[0]),
0000000000000000000000000000000000000000;;			"/namespaces/test/services/baz": runtime.EncodeOrDie(testapi.Default.Codec(), &svcs.Items[0]),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Do().Err() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ResourceTypeOrNameArgs(true, "pods,services", "foo", "baz")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || singleItemImplied || len(test.Infos) != 4 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepDerivative([]runtime.Object{&pods.Items[0], &pods.Items[1], &svcs.Items[0], &svcs.Items[0]}, test.Objects()) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected visited objects: %#v", test.Objects())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := b.Do().ResourceMapping(); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceNames(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svc := testData()
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods/foo":     runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[0]),
0000000000000000000000000000000000000000;;			"/namespaces/test/services/baz": runtime.EncodeOrDie(testapi.Default.Codec(), &svc.Items[0]),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Do().Err() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ResourceNames("pods", "foo", "services/baz")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || len(test.Infos) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %#v", err, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(&pods.Items[0], test.Objects()[0]) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object: \n%#v, expected: \n%#v", test.Objects()[0], &pods.Items[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(&svc.Items[0], test.Objects()[1]) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object: \n%#v, expected: \n%#v", test.Objects()[1], &svc.Items[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceNamesWithoutResource(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svc := testData()
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods/foo":     runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[0]),
0000000000000000000000000000000000000000;;			"/namespaces/test/services/baz": runtime.EncodeOrDie(testapi.Default.Codec(), &svc.Items[0]),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Do().Err() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ResourceNames("", "foo", "services/baz")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err == nil || !strings.Contains(err.Error(), "must be RESOURCE/NAME") {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceByNameWithoutRequireObject(t *testing.T) {
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Do().Err() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ResourceTypeOrNameArgs(true, "pods", "foo").RequireObject(false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || !singleItemImplied || len(test.Infos) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if test.Infos[0].Name != "foo" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected name: %#v", test.Infos[0].Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if test.Infos[0].Object != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object: %#v", test.Infos[0].Object)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapping, err := b.Do().ResourceMapping()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mapping.GroupVersionKind.Kind != "Pod" || mapping.Resource != "pods" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected resource mapping: %#v", mapping)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceByNameAndEmptySelector(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _ := testData()
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods/foo": runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[0]),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").
0000000000000000000000000000000000000000;;			SelectorParam("").
0000000000000000000000000000000000000000;;			ResourceTypeOrNameArgs(true, "pods", "foo")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;		infos, err := b.Do().IntoSingleItemImplied(&singleItemImplied).Infos()
0000000000000000000000000000000000000000;;		if err != nil || !singleItemImplied || len(infos) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(&pods.Items[0], infos[0].Object) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object: %#v", infos[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapping, err := b.Do().ResourceMapping()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mapping.Resource != "pods" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected resource mapping: %#v", mapping)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelector(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svc := testData()
0000000000000000000000000000000000000000;;		labelKey := metav1.LabelSelectorQueryParam(api.Registry.GroupOrDie(api.GroupName).GroupVersion.String())
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods?" + labelKey + "=a%3Db":     runtime.EncodeOrDie(testapi.Default.Codec(), pods),
0000000000000000000000000000000000000000;;			"/namespaces/test/services?" + labelKey + "=a%3Db": runtime.EncodeOrDie(testapi.Default.Codec(), svc),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			SelectorParam("a=b").
0000000000000000000000000000000000000000;;			NamespaceParam("test").
0000000000000000000000000000000000000000;;			Flatten()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Do().Err() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ResourceTypeOrNameArgs(true, "pods,service")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || singleItemImplied || len(test.Infos) != 3 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepDerivative([]runtime.Object{&pods.Items[0], &pods.Items[1], &svc.Items[0]}, test.Objects()) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected visited objects: %#v", test.Objects())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := b.Do().ResourceMapping(); err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectorRequiresKnownTypes(t *testing.T) {
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			SelectorParam("a=b").
0000000000000000000000000000000000000000;;			NamespaceParam("test").
0000000000000000000000000000000000000000;;			ResourceTypes("unknown")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Do().Err() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSingleResourceType(t *testing.T) {
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			SelectorParam("a=b").
0000000000000000000000000000000000000000;;			SingleResourceType().
0000000000000000000000000000000000000000;;			ResourceTypeOrNameArgs(true, "pods,services")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Do().Err() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResourceTuple(t *testing.T) {
0000000000000000000000000000000000000000;;		expectNoErr := func(err error) bool { return err == nil }
0000000000000000000000000000000000000000;;		expectErr := func(err error) bool { return err != nil }
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			args  []string
0000000000000000000000000000000000000000;;			errFn func(error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid": {
0000000000000000000000000000000000000000;;				args:  []string{"pods/foo"},
0000000000000000000000000000000000000000;;				errFn: expectNoErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid multiple with name indirection": {
0000000000000000000000000000000000000000;;				args:  []string{"pods/foo", "pod/bar"},
0000000000000000000000000000000000000000;;				errFn: expectNoErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid multiple with namespaced and non-namespaced types": {
0000000000000000000000000000000000000000;;				args:  []string{"nodes/foo", "pod/bar"},
0000000000000000000000000000000000000000;;				errFn: expectNoErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"mixed arg types": {
0000000000000000000000000000000000000000;;				args:  []string{"pods/foo", "bar"},
0000000000000000000000000000000000000000;;				errFn: expectErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			/*"missing resource": {
0000000000000000000000000000000000000000;;				args:  []string{"pods/foo2"},
0000000000000000000000000000000000000000;;				errFn: expectNoErr, // not an error because resources are lazily visited
0000000000000000000000000000000000000000;;			},*/
0000000000000000000000000000000000000000;;			"comma in resource": {
0000000000000000000000000000000000000000;;				args:  []string{",pods/foo"},
0000000000000000000000000000000000000000;;				errFn: expectErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multiple types in resource": {
0000000000000000000000000000000000000000;;				args:  []string{"pods,services/foo"},
0000000000000000000000000000000000000000;;				errFn: expectErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"unknown resource type": {
0000000000000000000000000000000000000000;;				args:  []string{"unknown/foo"},
0000000000000000000000000000000000000000;;				errFn: expectErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"leading slash": {
0000000000000000000000000000000000000000;;				args:  []string{"/bar"},
0000000000000000000000000000000000000000;;				errFn: expectErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"trailing slash": {
0000000000000000000000000000000000000000;;				args:  []string{"bar/"},
0000000000000000000000000000000000000000;;				errFn: expectErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, testCase := range testCases {
0000000000000000000000000000000000000000;;			for _, requireObject := range []bool{true, false} {
0000000000000000000000000000000000000000;;				expectedRequests := map[string]string{}
0000000000000000000000000000000000000000;;				if requireObject {
0000000000000000000000000000000000000000;;					pods, _ := testData()
0000000000000000000000000000000000000000;;					expectedRequests = map[string]string{
0000000000000000000000000000000000000000;;						"/namespaces/test/pods/foo": runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[0]),
0000000000000000000000000000000000000000;;						"/namespaces/test/pods/bar": runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[0]),
0000000000000000000000000000000000000000;;						"/nodes/foo":                runtime.EncodeOrDie(testapi.Default.Codec(), &api.Node{ObjectMeta: metav1.ObjectMeta{Name: "foo"}}),
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith(k, t, expectedRequests), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;					NamespaceParam("test").DefaultNamespace().
0000000000000000000000000000000000000000;;					ResourceTypeOrNameArgs(true, testCase.args...).RequireObject(requireObject)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				r := b.Do()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if !testCase.errFn(r.Err()) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected error: %v", k, r.Err())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if r.Err() != nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				switch {
0000000000000000000000000000000000000000;;				case (r.singleItemImplied && len(testCase.args) != 1),
0000000000000000000000000000000000000000;;					(!r.singleItemImplied && len(testCase.args) == 1):
0000000000000000000000000000000000000000;;					t.Errorf("%s: result had unexpected singleItemImplied value", k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				info, err := r.Infos()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					// test error
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(info) != len(testCase.args) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected number of infos returned: %#v", k, info)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStream(t *testing.T) {
0000000000000000000000000000000000000000;;		r, pods, rc := streamTestData()
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").Stream(r, "STDIN").Flatten()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || singleItemImplied || len(test.Infos) != 3 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepDerivative([]runtime.Object{&pods.Items[0], &pods.Items[1], &rc.Items[0]}, test.Objects()) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected visited objects: %#v", test.Objects())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestYAMLStream(t *testing.T) {
0000000000000000000000000000000000000000;;		r, pods, rc := streamYAMLTestData()
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").Stream(r, "STDIN").Flatten()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || singleItemImplied || len(test.Infos) != 3 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepDerivative([]runtime.Object{&pods.Items[0], &pods.Items[1], &rc.Items[0]}, test.Objects()) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected visited objects: %#v", test.Objects())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMultipleObject(t *testing.T) {
0000000000000000000000000000000000000000;;		r, pods, svc := streamTestData()
0000000000000000000000000000000000000000;;		obj, err := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").Stream(r, "STDIN").Flatten().
0000000000000000000000000000000000000000;;			Do().Object()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected := &api.List{
0000000000000000000000000000000000000000;;			Items: []runtime.Object{
0000000000000000000000000000000000000000;;				&pods.Items[0],
0000000000000000000000000000000000000000;;				&pods.Items[1],
0000000000000000000000000000000000000000;;				&svc.Items[0],
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepDerivative(expected, obj) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected visited objects: %#v", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestContinueOnErrorVisitor(t *testing.T) {
0000000000000000000000000000000000000000;;		r, _, _ := streamTestData()
0000000000000000000000000000000000000000;;		req := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			ContinueOnError().
0000000000000000000000000000000000000000;;			NamespaceParam("test").Stream(r, "STDIN").Flatten().
0000000000000000000000000000000000000000;;			Do()
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		testErr := fmt.Errorf("test error")
0000000000000000000000000000000000000000;;		err := req.Visit(func(_ *Info, _ error) error {
0000000000000000000000000000000000000000;;			count++
0000000000000000000000000000000000000000;;			if count > 1 {
0000000000000000000000000000000000000000;;				return testErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if count != 3 {
0000000000000000000000000000000000000000;;			t.Fatalf("did not visit all infos: %d", count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		agg, ok := err.(utilerrors.Aggregate)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(agg.Errors()) != 2 || agg.Errors()[0] != testErr || agg.Errors()[1] != testErr {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSingleItemImpliedObject(t *testing.T) {
0000000000000000000000000000000000000000;;		obj, err := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").DefaultNamespace().
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{"../../../examples/guestbook/legacy/redis-master-controller.yaml"}}).
0000000000000000000000000000000000000000;;			Flatten().
0000000000000000000000000000000000000000;;			Do().Object()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rc, ok := obj.(*api.ReplicationController)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected object: %#v", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if rc.Name != "redis-master" || rc.Namespace != "test" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected controller: %#v", rc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSingleItemImpliedObjectNoExtension(t *testing.T) {
0000000000000000000000000000000000000000;;		obj, err := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").DefaultNamespace().
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{"../../../examples/pod"}}).
0000000000000000000000000000000000000000;;			Flatten().
0000000000000000000000000000000000000000;;			Do().Object()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod, ok := obj.(*api.Pod)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected object: %#v", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod.Name != "nginx" || pod.Namespace != "test" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected pod: %#v", pod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSingleItemImpliedRootScopedObject(t *testing.T) {
0000000000000000000000000000000000000000;;		node := &api.Node{ObjectMeta: metav1.ObjectMeta{Name: "test"}, Spec: api.NodeSpec{ExternalID: "test"}}
0000000000000000000000000000000000000000;;		r := streamTestObject(node)
0000000000000000000000000000000000000000;;		infos, err := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").DefaultNamespace().
0000000000000000000000000000000000000000;;			Stream(r, "STDIN").
0000000000000000000000000000000000000000;;			Flatten().
0000000000000000000000000000000000000000;;			Do().Infos()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil || len(infos) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if infos[0].Namespace != "" {
0000000000000000000000000000000000000000;;			t.Errorf("namespace should be empty: %#v", infos[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n, ok := infos[0].Object.(*api.Node)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected object: %#v", infos[0].Object)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n.Name != "test" || n.Namespace != "" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object: %#v", n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestListObject(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, _ := testData()
0000000000000000000000000000000000000000;;		labelKey := metav1.LabelSelectorQueryParam(api.Registry.GroupOrDie(api.GroupName).GroupVersion.String())
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods?" + labelKey + "=a%3Db": runtime.EncodeOrDie(testapi.Default.Codec(), pods),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			SelectorParam("a=b").
0000000000000000000000000000000000000000;;			NamespaceParam("test").
0000000000000000000000000000000000000000;;			ResourceTypeOrNameArgs(true, "pods").
0000000000000000000000000000000000000000;;			Flatten()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := b.Do().Object()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list, ok := obj.(*api.List)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected object: %#v", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if list.ResourceVersion != pods.ResourceVersion || len(list.Items) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected list: %#v", list)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapping, err := b.Do().ResourceMapping()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mapping.Resource != "pods" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected resource mapping: %#v", mapping)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestListObjectWithDifferentVersions(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svc := testData()
0000000000000000000000000000000000000000;;		labelKey := metav1.LabelSelectorQueryParam(api.Registry.GroupOrDie(api.GroupName).GroupVersion.String())
0000000000000000000000000000000000000000;;		obj, err := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods?" + labelKey + "=a%3Db":     runtime.EncodeOrDie(testapi.Default.Codec(), pods),
0000000000000000000000000000000000000000;;			"/namespaces/test/services?" + labelKey + "=a%3Db": runtime.EncodeOrDie(testapi.Default.Codec(), svc),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			SelectorParam("a=b").
0000000000000000000000000000000000000000;;			NamespaceParam("test").
0000000000000000000000000000000000000000;;			ResourceTypeOrNameArgs(true, "pods,services").
0000000000000000000000000000000000000000;;			Flatten().
0000000000000000000000000000000000000000;;			Do().Object()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list, ok := obj.(*api.List)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected object: %#v", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// resource version differs between type lists, so it's not possible to get a single version.
0000000000000000000000000000000000000000;;		if list.ResourceVersion != "" || len(list.Items) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected list: %#v", list)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		_, svc := testData()
0000000000000000000000000000000000000000;;		w, err := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/services?fieldSelector=metadata.name%3Dredis-master&resourceVersion=12&watch=true": watchBody(watch.Event{
0000000000000000000000000000000000000000;;				Type:   watch.Added,
0000000000000000000000000000000000000000;;				Object: &svc.Items[0],
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").DefaultNamespace().
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{"../../../examples/guestbook/redis-master-service.yaml"}}).Flatten().
0000000000000000000000000000000000000000;;			Do().Watch("12")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer w.Stop()
0000000000000000000000000000000000000000;;		ch := w.ResultChan()
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case obj := <-ch:
0000000000000000000000000000000000000000;;			if obj.Type != watch.Added {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected watch event %#v", obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			service, ok := obj.Object.(*api.Service)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected object: %#v", obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if service.Name != "baz" || service.ResourceVersion != "12" {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected service: %#v", service)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatchMultipleError(t *testing.T) {
0000000000000000000000000000000000000000;;		_, err := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("test").DefaultNamespace().
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{"../../../examples/guestbook/legacy/redis-master-controller.yaml"}}).Flatten().
0000000000000000000000000000000000000000;;			FilenameParam(false, &FilenameOptions{Recursive: false, Filenames: []string{"../../../examples/guestbook/legacy/redis-master-controller.yaml"}}).Flatten().
0000000000000000000000000000000000000000;;			Do().Watch("")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLatest(t *testing.T) {
0000000000000000000000000000000000000000;;		r, _, _ := streamTestData()
0000000000000000000000000000000000000000;;		newPod := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo", Namespace: "test", ResourceVersion: "13"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newPod2 := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "bar", Namespace: "test", ResourceVersion: "14"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newSvc := &api.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "baz", Namespace: "test", ResourceVersion: "15"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClientWith("", t, map[string]string{
0000000000000000000000000000000000000000;;			"/namespaces/test/pods/foo":     runtime.EncodeOrDie(testapi.Default.Codec(), newPod),
0000000000000000000000000000000000000000;;			"/namespaces/test/pods/bar":     runtime.EncodeOrDie(testapi.Default.Codec(), newPod2),
0000000000000000000000000000000000000000;;			"/namespaces/test/services/baz": runtime.EncodeOrDie(testapi.Default.Codec(), newSvc),
0000000000000000000000000000000000000000;;		}), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			NamespaceParam("other").Stream(r, "STDIN").Flatten().Latest()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err != nil || singleItemImplied || len(test.Infos) != 3 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepDerivative([]runtime.Object{newPod, newPod2, newSvc}, test.Objects()) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected visited objects: %#v", test.Objects())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReceiveMultipleErrors(t *testing.T) {
0000000000000000000000000000000000000000;;		pods, svc := testData()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, w := io.Pipe()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer w.Close()
0000000000000000000000000000000000000000;;			w.Write([]byte(`{}`))
0000000000000000000000000000000000000000;;			w.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), &pods.Items[0])))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r2, w2 := io.Pipe()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer w2.Close()
0000000000000000000000000000000000000000;;			w2.Write([]byte(`{}`))
0000000000000000000000000000000000000000;;			w2.Write([]byte(runtime.EncodeOrDie(testapi.Default.Codec(), &svc.Items[0])))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := NewBuilder(testapi.Default.RESTMapper(), LegacyCategoryExpander, api.Scheme, fakeClient(), testapi.Default.Codec()).
0000000000000000000000000000000000000000;;			Stream(r, "1").Stream(r2, "2").
0000000000000000000000000000000000000000;;			ContinueOnError()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := &testVisitor{}
0000000000000000000000000000000000000000;;		singleItemImplied := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := b.Do().IntoSingleItemImplied(&singleItemImplied).Visit(test.Handle)
0000000000000000000000000000000000000000;;		if err == nil || singleItemImplied || len(test.Infos) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v %t %#v", err, singleItemImplied, test.Infos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errs, ok := err.(utilerrors.Aggregate)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", reflect.TypeOf(err))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(errs.Errors()) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected errors %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHasNames(t *testing.T) {
0000000000000000000000000000000000000000;;		basename := filepath.Base(os.Args[0])
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			args            []string
0000000000000000000000000000000000000000;;			expectedHasName bool
0000000000000000000000000000000000000000;;			expectedError   error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:            []string{""},
0000000000000000000000000000000000000000;;				expectedHasName: false,
0000000000000000000000000000000000000000;;				expectedError:   nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:            []string{"rc"},
0000000000000000000000000000000000000000;;				expectedHasName: false,
0000000000000000000000000000000000000000;;				expectedError:   nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:            []string{"rc,pod,svc"},
0000000000000000000000000000000000000000;;				expectedHasName: false,
0000000000000000000000000000000000000000;;				expectedError:   nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:            []string{"rc/foo"},
0000000000000000000000000000000000000000;;				expectedHasName: true,
0000000000000000000000000000000000000000;;				expectedError:   nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:            []string{"rc", "foo"},
0000000000000000000000000000000000000000;;				expectedHasName: true,
0000000000000000000000000000000000000000;;				expectedError:   nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:            []string{"rc,pod,svc", "foo"},
0000000000000000000000000000000000000000;;				expectedHasName: true,
0000000000000000000000000000000000000000;;				expectedError:   nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:            []string{"rc/foo", "rc/bar", "rc/zee"},
0000000000000000000000000000000000000000;;				expectedHasName: true,
0000000000000000000000000000000000000000;;				expectedError:   nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:            []string{"rc/foo", "bar"},
0000000000000000000000000000000000000000;;				expectedHasName: false,
0000000000000000000000000000000000000000;;				expectedError:   fmt.Errorf("there is no need to specify a resource type as a separate argument when passing arguments in resource/name form (e.g. '" + basename + " get resource/<resource_name>' instead of '" + basename + " get resource resource/<resource_name>'"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			hasNames, err := HasNames(test.args)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedError, err) {
0000000000000000000000000000000000000000;;				t.Errorf("expected HasName to error:\n%s\tgot:\n%s", test.expectedError, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if hasNames != test.expectedHasName {
0000000000000000000000000000000000000000;;				t.Errorf("expected HasName to return %v for %s", test.expectedHasName, test.args)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMultipleTypesRequested(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			args                  []string
0000000000000000000000000000000000000000;;			expectedMultipleTypes bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{""},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"all"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"rc"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"pod,all"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"all,rc,pod"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"rc,pod,svc"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"rc/foo"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"rc/foo", "rc/bar"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"rc", "foo"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"rc,pod,svc", "foo"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"rc,secrets"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"rc/foo", "rc/bar", "svc/svc"},
0000000000000000000000000000000000000000;;				expectedMultipleTypes: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			hasMultipleTypes := MultipleTypesRequested(test.args)
0000000000000000000000000000000000000000;;			if hasMultipleTypes != test.expectedMultipleTypes {
0000000000000000000000000000000000000000;;				t.Errorf("expected MultipleTypesRequested to return %v for %s", test.expectedMultipleTypes, test.args)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
