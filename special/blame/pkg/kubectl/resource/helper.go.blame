0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0d9c8ae7da203d6d867cf33477074544b6d83448;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Helper provides methods for retrieving or mutating a RESTful
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	type Helper struct {
0000000000000000000000000000000000000000;;		// The name of this resource as the server would recognize it
0000000000000000000000000000000000000000;;		Resource string
0000000000000000000000000000000000000000;;		// A RESTClient capable of mutating this resource.
0000000000000000000000000000000000000000;;		RESTClient RESTClient
0000000000000000000000000000000000000000;;		// An interface for reading or writing the resource version of this
0000000000000000000000000000000000000000;;		// type.
0000000000000000000000000000000000000000;;		Versioner runtime.ResourceVersioner
0000000000000000000000000000000000000000;;		// True if the resource type is scoped to namespaces
0000000000000000000000000000000000000000;;		NamespaceScoped bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewHelper creates a Helper from a ResourceMapping
0000000000000000000000000000000000000000;;	func NewHelper(client RESTClient, mapping *meta.RESTMapping) *Helper {
0000000000000000000000000000000000000000;;		return &Helper{
0000000000000000000000000000000000000000;;			Resource:        mapping.Resource,
0000000000000000000000000000000000000000;;			RESTClient:      client,
0000000000000000000000000000000000000000;;			Versioner:       mapping.MetadataAccessor,
0000000000000000000000000000000000000000;;			NamespaceScoped: mapping.Scope.Name() == meta.RESTScopeNameNamespace,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) Get(namespace, name string, export bool) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		req := m.RESTClient.Get().
0000000000000000000000000000000000000000;;			NamespaceIfScoped(namespace, m.NamespaceScoped).
0000000000000000000000000000000000000000;;			Resource(m.Resource).
0000000000000000000000000000000000000000;;			Name(name)
0000000000000000000000000000000000000000;;		if export {
0000000000000000000000000000000000000000;;			req.Param("export", strconv.FormatBool(export))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return req.Do().Get()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: add field selector
0000000000000000000000000000000000000000;;	func (m *Helper) List(namespace, apiVersion string, selector labels.Selector, export bool) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		req := m.RESTClient.Get().
0000000000000000000000000000000000000000;;			NamespaceIfScoped(namespace, m.NamespaceScoped).
0000000000000000000000000000000000000000;;			Resource(m.Resource).
0000000000000000000000000000000000000000;;			LabelsSelectorParam(selector)
0000000000000000000000000000000000000000;;		if export {
0000000000000000000000000000000000000000;;			req.Param("export", strconv.FormatBool(export))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return req.Do().Get()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) Watch(namespace, resourceVersion, apiVersion string, labelSelector labels.Selector) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return m.RESTClient.Get().
0000000000000000000000000000000000000000;;			NamespaceIfScoped(namespace, m.NamespaceScoped).
0000000000000000000000000000000000000000;;			Resource(m.Resource).
0000000000000000000000000000000000000000;;			Param("resourceVersion", resourceVersion).
0000000000000000000000000000000000000000;;			Param("watch", "true").
0000000000000000000000000000000000000000;;			LabelsSelectorParam(labelSelector).
0000000000000000000000000000000000000000;;			Watch()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) WatchSingle(namespace, name, resourceVersion string) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return m.RESTClient.Get().
0000000000000000000000000000000000000000;;			NamespaceIfScoped(namespace, m.NamespaceScoped).
0000000000000000000000000000000000000000;;			Resource(m.Resource).
0000000000000000000000000000000000000000;;			Param("resourceVersion", resourceVersion).
0000000000000000000000000000000000000000;;			Param("watch", "true").
0000000000000000000000000000000000000000;;			FieldsSelectorParam(fields.OneTermEqualSelector("metadata.name", name)).
0000000000000000000000000000000000000000;;			Watch()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) Delete(namespace, name string) error {
0000000000000000000000000000000000000000;;		return m.DeleteWithOptions(namespace, name, nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) DeleteWithOptions(namespace, name string, options *metav1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		return m.RESTClient.Delete().
0000000000000000000000000000000000000000;;			NamespaceIfScoped(namespace, m.NamespaceScoped).
0000000000000000000000000000000000000000;;			Resource(m.Resource).
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			Body(options).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) Create(namespace string, modify bool, obj runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		if modify {
0000000000000000000000000000000000000000;;			// Attempt to version the object based on client logic.
0000000000000000000000000000000000000000;;			version, err := m.Versioner.ResourceVersion(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				// We don't know how to clear the version on this object, so send it to the server as is
0000000000000000000000000000000000000000;;				return m.createResource(m.RESTClient, m.Resource, namespace, obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if version != "" {
0000000000000000000000000000000000000000;;				if err := m.Versioner.SetResourceVersion(obj, ""); err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return m.createResource(m.RESTClient, m.Resource, namespace, obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) createResource(c RESTClient, resource, namespace string, obj runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return c.Post().NamespaceIfScoped(namespace, m.NamespaceScoped).Resource(resource).Body(obj).Do().Get()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (m *Helper) Patch(namespace, name string, pt types.PatchType, data []byte) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return m.RESTClient.Patch(pt).
0000000000000000000000000000000000000000;;			NamespaceIfScoped(namespace, m.NamespaceScoped).
0000000000000000000000000000000000000000;;			Resource(m.Resource).
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			Body(data).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Get()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) Replace(namespace, name string, overwrite bool, obj runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		c := m.RESTClient
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Attempt to version the object based on client logic.
0000000000000000000000000000000000000000;;		version, err := m.Versioner.ResourceVersion(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// We don't know how to version this object, so send it to the server as is
0000000000000000000000000000000000000000;;			return m.replaceResource(c, m.Resource, namespace, name, obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if version == "" && overwrite {
0000000000000000000000000000000000000000;;			// Retrieve the current version of the object to overwrite the server object
0000000000000000000000000000000000000000;;			serverObj, err := c.Get().NamespaceIfScoped(namespace, m.NamespaceScoped).Resource(m.Resource).Name(name).Do().Get()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				// The object does not exist, but we want it to be created
0000000000000000000000000000000000000000;;				return m.replaceResource(c, m.Resource, namespace, name, obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			serverVersion, err := m.Versioner.ResourceVersion(serverObj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := m.Versioner.SetResourceVersion(obj, serverVersion); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return m.replaceResource(c, m.Resource, namespace, name, obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Helper) replaceResource(c RESTClient, resource, namespace, name string, obj runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return c.Put().NamespaceIfScoped(namespace, m.NamespaceScoped).Resource(resource).Name(name).Body(obj).Do().Get()
0000000000000000000000000000000000000000;;	}
