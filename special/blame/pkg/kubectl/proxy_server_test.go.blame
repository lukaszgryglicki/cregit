0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
109abe04daa011acab1be0d57acf1b4cc20aaf7d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAccept(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			acceptPaths   string
0000000000000000000000000000000000000000;;			rejectPaths   string
0000000000000000000000000000000000000000;;			acceptHosts   string
0000000000000000000000000000000000000000;;			rejectMethods string
0000000000000000000000000000000000000000;;			path          string
0000000000000000000000000000000000000000;;			host          string
0000000000000000000000000000000000000000;;			method        string
0000000000000000000000000000000000000000;;			expectAccept  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "",
0000000000000000000000000000000000000000;;				host:          "127.0.0.1",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/pods",
0000000000000000000000000000000000000000;;				host:          "127.0.0.1",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/pods",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/foo",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/attachfoo",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/execfoo",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/foo/exec",
0000000000000000000000000000000000000000;;				host:          "127.0.0.1",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/foo/attach",
0000000000000000000000000000000000000000;;				host:          "127.0.0.1",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/pods",
0000000000000000000000000000000000000000;;				host:          "evil.com",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/pods",
0000000000000000000000000000000000000000;;				host:          "localhost.evil.com",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/pods",
0000000000000000000000000000000000000000;;				host:          "127a0b0c1",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/ui",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/pods",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "POST",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/somepod",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "PUT",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: DefaultMethodRejectRE,
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/somepod",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "PATCH",
0000000000000000000000000000000000000000;;				expectAccept:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: "GET",
0000000000000000000000000000000000000000;;				path:          "/api/v1/pods",
0000000000000000000000000000000000000000;;				host:          "127.0.0.1",
0000000000000000000000000000000000000000;;				method:        "GET",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: "POST",
0000000000000000000000000000000000000000;;				path:          "/api/v1/pods",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "POST",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: "PUT",
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/somepod",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "PUT",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: "PATCH",
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/somepod",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "PATCH",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: "POST,PUT,PATCH",
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/somepod",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "PATCH",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				acceptPaths:   DefaultPathAcceptRE,
0000000000000000000000000000000000000000;;				rejectPaths:   DefaultPathRejectRE,
0000000000000000000000000000000000000000;;				acceptHosts:   DefaultHostAcceptRE,
0000000000000000000000000000000000000000;;				rejectMethods: "POST,PUT,PATCH",
0000000000000000000000000000000000000000;;				path:          "/api/v1/namespaces/default/pods/somepod",
0000000000000000000000000000000000000000;;				host:          "localhost",
0000000000000000000000000000000000000000;;				method:        "PUT",
0000000000000000000000000000000000000000;;				expectAccept:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			filter := &FilterServer{
0000000000000000000000000000000000000000;;				AcceptPaths:   MakeRegexpArrayOrDie(test.acceptPaths),
0000000000000000000000000000000000000000;;				RejectPaths:   MakeRegexpArrayOrDie(test.rejectPaths),
0000000000000000000000000000000000000000;;				AcceptHosts:   MakeRegexpArrayOrDie(test.acceptHosts),
0000000000000000000000000000000000000000;;				RejectMethods: MakeRegexpArrayOrDie(test.rejectMethods),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			accept := filter.accept(test.method, test.path, test.host)
0000000000000000000000000000000000000000;;			if accept != test.expectAccept {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %v, got %v for %#v", test.expectAccept, accept, test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRegexpMatch(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			str         string
0000000000000000000000000000000000000000;;			regexps     string
0000000000000000000000000000000000000000;;			expectMatch bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				str:         "foo",
0000000000000000000000000000000000000000;;				regexps:     "bar,.*",
0000000000000000000000000000000000000000;;				expectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				str:         "foo",
0000000000000000000000000000000000000000;;				regexps:     "bar,fo.*",
0000000000000000000000000000000000000000;;				expectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				str:         "bar",
0000000000000000000000000000000000000000;;				regexps:     "bar,fo.*",
0000000000000000000000000000000000000000;;				expectMatch: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				str:         "baz",
0000000000000000000000000000000000000000;;				regexps:     "bar,fo.*",
0000000000000000000000000000000000000000;;				expectMatch: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			match := matchesRegexp(test.str, MakeRegexpArrayOrDie(test.regexps))
0000000000000000000000000000000000000000;;			if test.expectMatch != match {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %v, found: %v, for %s and %v", test.expectMatch, match, test.str, test.regexps)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFileServing(t *testing.T) {
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			fname = "test.txt"
0000000000000000000000000000000000000000;;			data  = "This is test data"
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		dir, err := ioutil.TempDir("", "data")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating tmp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(dir)
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(filepath.Join(dir, fname), []byte(data), 0755); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error writing tmp file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const prefix = "/foo/"
0000000000000000000000000000000000000000;;		handler := newFileHandler(prefix, dir)
0000000000000000000000000000000000000000;;		server := httptest.NewServer(handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		url := server.URL + prefix + fname
0000000000000000000000000000000000000000;;		res, err := http.Get(url)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("http.Get(%q) error: %v", url, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if res.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			t.Errorf("res.StatusCode = %d; want %d", res.StatusCode, http.StatusOK)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadAll(res.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error reading resp body: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(b) != data {
0000000000000000000000000000000000000000;;			t.Errorf("have %q; want %q", string(b), data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAPIRequests(t *testing.T) {
0000000000000000000000000000000000000000;;		ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			b, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				http.Error(w, err.Error(), http.StatusInternalServerError)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(w, "%s %s %s", r.Method, r.RequestURI, string(b))
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer ts.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// httptest.NewServer should always generate a valid URL.
0000000000000000000000000000000000000000;;		target, _ := url.Parse(ts.URL)
0000000000000000000000000000000000000000;;		proxy := newProxy(target)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct{ method, body string }{
0000000000000000000000000000000000000000;;			{"GET", ""},
0000000000000000000000000000000000000000;;			{"DELETE", ""},
0000000000000000000000000000000000000000;;			{"POST", "test payload"},
0000000000000000000000000000000000000000;;			{"PUT", "test payload"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const path = "/api/test?fields=ID%3Dfoo&labels=key%3Dvalue"
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			r, err := http.NewRequest(tt.method, path, strings.NewReader(tt.body))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("error creating request: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;			proxy.ServeHTTP(w, r)
0000000000000000000000000000000000000000;;			if w.Code != http.StatusOK {
0000000000000000000000000000000000000000;;				t.Errorf("%d: proxy.ServeHTTP w.Code = %d; want %d", i, w.Code, http.StatusOK)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			want := strings.Join([]string{tt.method, path, tt.body}, " ")
0000000000000000000000000000000000000000;;			if w.Body.String() != want {
0000000000000000000000000000000000000000;;				t.Errorf("%d: response body = %q; want %q", i, w.Body.String(), want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPathHandling(t *testing.T) {
0000000000000000000000000000000000000000;;		ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			fmt.Fprint(w, r.URL.Path)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer ts.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			prefix     string
0000000000000000000000000000000000000000;;			reqPath    string
0000000000000000000000000000000000000000;;			expectPath string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"/api/", "/metrics", "404 page not found\n"},
0000000000000000000000000000000000000000;;			{"/api/", "/api/metrics", "/api/metrics"},
0000000000000000000000000000000000000000;;			{"/api/", "/api/v1/pods/", "/api/v1/pods/"},
0000000000000000000000000000000000000000;;			{"/", "/metrics", "/metrics"},
0000000000000000000000000000000000000000;;			{"/", "/api/v1/pods/", "/api/v1/pods/"},
0000000000000000000000000000000000000000;;			{"/custom/", "/metrics", "404 page not found\n"},
0000000000000000000000000000000000000000;;			{"/custom/", "/api/metrics", "404 page not found\n"},
0000000000000000000000000000000000000000;;			{"/custom/", "/api/v1/pods/", "404 page not found\n"},
0000000000000000000000000000000000000000;;			{"/custom/", "/custom/api/metrics", "/api/metrics"},
0000000000000000000000000000000000000000;;			{"/custom/", "/custom/api/v1/pods/", "/api/v1/pods/"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cc := &restclient.Config{
0000000000000000000000000000000000000000;;			Host: ts.URL,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, item := range table {
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				p, err := NewProxyServer("", item.prefix, "/not/used/for/this/test", nil, cc)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%#v: %v", item, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pts := httptest.NewServer(p.handler)
0000000000000000000000000000000000000000;;				defer pts.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				r, err := http.Get(pts.URL + item.reqPath)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%#v: %v", item, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				body, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;				r.Body.Close()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%#v: %v", item, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := item.expectPath, string(body); e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%#v: Wanted %q, got %q", item, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExtractHost(t *testing.T) {
0000000000000000000000000000000000000000;;		fixtures := map[string]string{
0000000000000000000000000000000000000000;;			"localhost:8085": "localhost",
0000000000000000000000000000000000000000;;			"marmalade":      "marmalade",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for header, expected := range fixtures {
0000000000000000000000000000000000000000;;			host := extractHost(header)
0000000000000000000000000000000000000000;;			if host != expected {
0000000000000000000000000000000000000000;;				t.Fatalf("%s != %s", host, expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
