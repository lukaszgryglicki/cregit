0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5e366781bd3ba22fc7655896bf595212f04fa312;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		api "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		internal "k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func encodeOrDie(obj runtime.Object) []byte {
0000000000000000000000000000000000000000;;		data, err := runtime.Encode(internal.Codecs.LegacyCodec(api.SchemeGroupVersion), obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return data
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSortingPrinter(t *testing.T) {
0000000000000000000000000000000000000000;;		intPtr := func(val int32) *int32 { return &val }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "a",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "b",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := &api.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "c",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			obj         runtime.Object
0000000000000000000000000000000000000000;;			sort        runtime.Object
0000000000000000000000000000000000000000;;			field       string
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			expectedErr string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "in-order-already",
0000000000000000000000000000000000000000;;				obj: &api.PodList{
0000000000000000000000000000000000000000;;					Items: []api.Pod{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "a",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "b",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "c",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				sort: &api.PodList{
0000000000000000000000000000000000000000;;					Items: []api.Pod{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "a",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "b",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "c",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field: "{.metadata.name}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "reverse-order",
0000000000000000000000000000000000000000;;				obj: &api.PodList{
0000000000000000000000000000000000000000;;					Items: []api.Pod{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "b",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "c",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "a",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				sort: &api.PodList{
0000000000000000000000000000000000000000;;					Items: []api.Pod{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "a",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "b",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Name: "c",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field: "{.metadata.name}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "random-order-timestamp",
0000000000000000000000000000000000000000;;				obj: &api.PodList{
0000000000000000000000000000000000000000;;					Items: []api.Pod{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								CreationTimestamp: metav1.Unix(300, 0),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								CreationTimestamp: metav1.Unix(100, 0),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								CreationTimestamp: metav1.Unix(200, 0),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				sort: &api.PodList{
0000000000000000000000000000000000000000;;					Items: []api.Pod{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								CreationTimestamp: metav1.Unix(100, 0),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								CreationTimestamp: metav1.Unix(200, 0),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								CreationTimestamp: metav1.Unix(300, 0),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field: "{.metadata.creationTimestamp}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "random-order-numbers",
0000000000000000000000000000000000000000;;				obj: &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;					Items: []api.ReplicationController{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;								Replicas: intPtr(5),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;								Replicas: intPtr(1),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;								Replicas: intPtr(9),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				sort: &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;					Items: []api.ReplicationController{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;								Replicas: intPtr(1),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;								Replicas: intPtr(5),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;								Replicas: intPtr(9),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field: "{.spec.replicas}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "v1.List in order",
0000000000000000000000000000000000000000;;				obj: &api.List{
0000000000000000000000000000000000000000;;					Items: []runtime.RawExtension{
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(a)},
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(b)},
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(c)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				sort: &api.List{
0000000000000000000000000000000000000000;;					Items: []runtime.RawExtension{
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(a)},
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(b)},
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(c)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field: "{.metadata.name}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "v1.List in reverse",
0000000000000000000000000000000000000000;;				obj: &api.List{
0000000000000000000000000000000000000000;;					Items: []runtime.RawExtension{
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(c)},
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(b)},
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(a)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				sort: &api.List{
0000000000000000000000000000000000000000;;					Items: []runtime.RawExtension{
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(a)},
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(b)},
0000000000000000000000000000000000000000;;						{Raw: encodeOrDie(c)},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field: "{.metadata.name}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "some-missing-fields",
0000000000000000000000000000000000000000;;				obj: &unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{
0000000000000000000000000000000000000000;;						"kind":       "List",
0000000000000000000000000000000000000000;;						"apiVersion": "v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Items: []unstructured.Unstructured{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"kind":       "ReplicationController",
0000000000000000000000000000000000000000;;								"apiVersion": "v1",
0000000000000000000000000000000000000000;;								"status": map[string]interface{}{
0000000000000000000000000000000000000000;;									"availableReplicas": 2,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"kind":       "ReplicationController",
0000000000000000000000000000000000000000;;								"apiVersion": "v1",
0000000000000000000000000000000000000000;;								"status":     map[string]interface{}{},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"kind":       "ReplicationController",
0000000000000000000000000000000000000000;;								"apiVersion": "v1",
0000000000000000000000000000000000000000;;								"status": map[string]interface{}{
0000000000000000000000000000000000000000;;									"availableReplicas": 1,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				sort: &unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{
0000000000000000000000000000000000000000;;						"kind":       "List",
0000000000000000000000000000000000000000;;						"apiVersion": "v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Items: []unstructured.Unstructured{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"kind":       "ReplicationController",
0000000000000000000000000000000000000000;;								"apiVersion": "v1",
0000000000000000000000000000000000000000;;								"status":     map[string]interface{}{},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"kind":       "ReplicationController",
0000000000000000000000000000000000000000;;								"apiVersion": "v1",
0000000000000000000000000000000000000000;;								"status": map[string]interface{}{
0000000000000000000000000000000000000000;;									"availableReplicas": 1,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"kind":       "ReplicationController",
0000000000000000000000000000000000000000;;								"apiVersion": "v1",
0000000000000000000000000000000000000000;;								"status": map[string]interface{}{
0000000000000000000000000000000000000000;;									"availableReplicas": 2,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field: "{.status.availableReplicas}",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "all-missing-fields",
0000000000000000000000000000000000000000;;				obj: &unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{
0000000000000000000000000000000000000000;;						"kind":       "List",
0000000000000000000000000000000000000000;;						"apiVersion": "v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Items: []unstructured.Unstructured{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"kind":       "ReplicationController",
0000000000000000000000000000000000000000;;								"apiVersion": "v1",
0000000000000000000000000000000000000000;;								"status": map[string]interface{}{
0000000000000000000000000000000000000000;;									"replicas": 0,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"kind":       "ReplicationController",
0000000000000000000000000000000000000000;;								"apiVersion": "v1",
0000000000000000000000000000000000000000;;								"status": map[string]interface{}{
0000000000000000000000000000000000000000;;									"replicas": 0,
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field:       "{.status.availableReplicas}",
0000000000000000000000000000000000000000;;				expectedErr: "couldn't find any field with path \"{.status.availableReplicas}\" in the list of objects",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "model-invalid-fields",
0000000000000000000000000000000000000000;;				obj: &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;					Items: []api.ReplicationController{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Status: api.ReplicationControllerStatus{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Status: api.ReplicationControllerStatus{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Status: api.ReplicationControllerStatus{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field:       "{.invalid}",
0000000000000000000000000000000000000000;;				expectedErr: "couldn't find any field with path \"{.invalid}\" in the list of objects",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			sort := &SortingPrinter{SortField: test.field, Decoder: internal.Codecs.UniversalDecoder()}
0000000000000000000000000000000000000000;;			err := sort.sortObj(test.obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if len(test.expectedErr) > 0 {
0000000000000000000000000000000000000000;;					if strings.Contains(err.Error(), test.expectedErr) {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					t.Fatalf("%s: expected error containing: %q, got: \"%v\"", test.name, test.expectedErr, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				t.Fatalf("%s: unexpected error: %v", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(test.expectedErr) > 0 {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: expected error containing: %q, got none", test.name, test.expectedErr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.obj, test.sort) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s]\nexpected:\n%v\nsaw:\n%v", test.name, test.sort, test.obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
