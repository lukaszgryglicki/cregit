0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
4e53908332947c95b29b43bc35aea7d2af0a84ca;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RoleBindingGeneratorV1 supports stable generation of a roleBinding.
0000000000000000000000000000000000000000;;	type RoleBindingGeneratorV1 struct {
0000000000000000000000000000000000000000;;		// Name of roleBinding (required)
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// ClusterRole for the roleBinding
0000000000000000000000000000000000000000;;		ClusterRole string
0000000000000000000000000000000000000000;;		// Role for the roleBinding
0000000000000000000000000000000000000000;;		Role string
0000000000000000000000000000000000000000;;		// Users to derive the roleBinding from (optional)
0000000000000000000000000000000000000000;;		Users []string
0000000000000000000000000000000000000000;;		// Groups to derive the roleBinding from (optional)
0000000000000000000000000000000000000000;;		Groups []string
0000000000000000000000000000000000000000;;		// ServiceAccounts to derive the roleBinding from in namespace:name format(optional)
0000000000000000000000000000000000000000;;		ServiceAccounts []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameter injection.
0000000000000000000000000000000000000000;;	var _ Generator = &RoleBindingGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameters specified during construction.
0000000000000000000000000000000000000000;;	var _ StructuredGenerator = &RoleBindingGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate returns a roleBinding using the specified parameters.
0000000000000000000000000000000000000000;;	func (s RoleBindingGeneratorV1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(s.ParamNames(), genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate := &RoleBindingGeneratorV1{}
0000000000000000000000000000000000000000;;		userStrings, found := genericParams["user"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			fromFileArray, isArray := userStrings.([]string)
0000000000000000000000000000000000000000;;			if !isArray {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected []string, found :%v", userStrings)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delegate.Users = fromFileArray
0000000000000000000000000000000000000000;;			delete(genericParams, "user")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		groupStrings, found := genericParams["group"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			fromLiteralArray, isArray := groupStrings.([]string)
0000000000000000000000000000000000000000;;			if !isArray {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected []string, found :%v", groupStrings)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delegate.Groups = fromLiteralArray
0000000000000000000000000000000000000000;;			delete(genericParams, "group")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		saStrings, found := genericParams["serviceaccount"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			fromLiteralArray, isArray := saStrings.([]string)
0000000000000000000000000000000000000000;;			if !isArray {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected []string, found :%v", saStrings)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delegate.ServiceAccounts = fromLiteralArray
0000000000000000000000000000000000000000;;			delete(genericParams, "serviceaccount")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		params := map[string]string{}
0000000000000000000000000000000000000000;;		for key, value := range genericParams {
0000000000000000000000000000000000000000;;			strVal, isString := value.(string)
0000000000000000000000000000000000000000;;			if !isString {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected string, saw %v for '%s'", value, key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			params[key] = strVal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate.Name = params["name"]
0000000000000000000000000000000000000000;;		delegate.ClusterRole = params["clusterrole"]
0000000000000000000000000000000000000000;;		delegate.Role = params["role"]
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParamNames returns the set of supported input parameters when using the parameter injection generator pattern.
0000000000000000000000000000000000000000;;	func (s RoleBindingGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"clusterrole", false},
0000000000000000000000000000000000000000;;			{"role", false},
0000000000000000000000000000000000000000;;			{"user", false},
0000000000000000000000000000000000000000;;			{"group", false},
0000000000000000000000000000000000000000;;			{"serviceaccount", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StructuredGenerate outputs a roleBinding object using the configured fields.
0000000000000000000000000000000000000000;;	func (s RoleBindingGeneratorV1) StructuredGenerate() (runtime.Object, error) {
0000000000000000000000000000000000000000;;		if err := s.validate(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		roleBinding := &rbac.RoleBinding{}
0000000000000000000000000000000000000000;;		roleBinding.Name = s.Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case len(s.Role) > 0:
0000000000000000000000000000000000000000;;			roleBinding.RoleRef = rbac.RoleRef{
0000000000000000000000000000000000000000;;				APIGroup: rbac.GroupName,
0000000000000000000000000000000000000000;;				Kind:     "Role",
0000000000000000000000000000000000000000;;				Name:     s.Role,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case len(s.ClusterRole) > 0:
0000000000000000000000000000000000000000;;			roleBinding.RoleRef = rbac.RoleRef{
0000000000000000000000000000000000000000;;				APIGroup: rbac.GroupName,
0000000000000000000000000000000000000000;;				Kind:     "ClusterRole",
0000000000000000000000000000000000000000;;				Name:     s.ClusterRole,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, user := range sets.NewString(s.Users...).List() {
0000000000000000000000000000000000000000;;			roleBinding.Subjects = append(roleBinding.Subjects, rbac.Subject{
0000000000000000000000000000000000000000;;				Kind:     rbac.UserKind,
0000000000000000000000000000000000000000;;				APIGroup: rbac.GroupName,
0000000000000000000000000000000000000000;;				Name:     user,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, group := range sets.NewString(s.Groups...).List() {
0000000000000000000000000000000000000000;;			roleBinding.Subjects = append(roleBinding.Subjects, rbac.Subject{
0000000000000000000000000000000000000000;;				Kind:     rbac.GroupKind,
0000000000000000000000000000000000000000;;				APIGroup: rbac.GroupName,
0000000000000000000000000000000000000000;;				Name:     group,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, sa := range sets.NewString(s.ServiceAccounts...).List() {
0000000000000000000000000000000000000000;;			tokens := strings.Split(sa, ":")
0000000000000000000000000000000000000000;;			if len(tokens) != 2 || tokens[1] == "" {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("serviceaccount must be <namespace>:<name>")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			roleBinding.Subjects = append(roleBinding.Subjects, rbac.Subject{
0000000000000000000000000000000000000000;;				Kind:      rbac.ServiceAccountKind,
0000000000000000000000000000000000000000;;				APIGroup:  "",
0000000000000000000000000000000000000000;;				Namespace: tokens[0],
0000000000000000000000000000000000000000;;				Name:      tokens[1],
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return roleBinding, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validate validates required fields are set to support structured generation.
0000000000000000000000000000000000000000;;	func (s RoleBindingGeneratorV1) validate() error {
0000000000000000000000000000000000000000;;		if len(s.Name) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("name must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if (len(s.ClusterRole) == 0) == (len(s.Role) == 0) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("exactly one of clusterrole or role must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
