0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
5e11ce1e39e77ed8b1e9b7646148b113ff13fc31;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/rbac"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRoleBindingGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			params        map[string]interface{}
0000000000000000000000000000000000000000;;			expectErrMsg  string
0000000000000000000000000000000000000000;;			expectBinding *rbac.RoleBinding
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"test-missing-name": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"role":           "fake-role",
0000000000000000000000000000000000000000;;					"groups":         []string{"fake-group"},
0000000000000000000000000000000000000000;;					"serviceaccount": []string{"fake-namespace:fake-account"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErrMsg: "Parameter: name is required",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-role-and-clusterrole": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "fake-binding",
0000000000000000000000000000000000000000;;					"group":          []string{"fake-group"},
0000000000000000000000000000000000000000;;					"serviceaccount": []string{"fake-namespace:fake-account"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErrMsg: "exactly one of clusterrole or role must be specified",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-both-role-and-clusterrole-provided": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "fake-binding",
0000000000000000000000000000000000000000;;					"role":           "fake-role",
0000000000000000000000000000000000000000;;					"clusterrole":    "fake-clusterrole",
0000000000000000000000000000000000000000;;					"group":          []string{"fake-group"},
0000000000000000000000000000000000000000;;					"serviceaccount": []string{"fake-namespace:fake-account"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErrMsg: "exactly one of clusterrole or role must be specified",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-invalid-parameter-type": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "fake-binding",
0000000000000000000000000000000000000000;;					"role":           []string{"fake-role"},
0000000000000000000000000000000000000000;;					"group":          []string{"fake-group"},
0000000000000000000000000000000000000000;;					"serviceaccount": []string{"fake-namespace:fake-account"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErrMsg: "expected string, saw [fake-role] for 'role'",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-invalid-serviceaccount": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "fake-binding",
0000000000000000000000000000000000000000;;					"role":           "fake-role",
0000000000000000000000000000000000000000;;					"group":          []string{"fake-group"},
0000000000000000000000000000000000000000;;					"serviceaccount": []string{"fake-account"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErrMsg: "serviceaccount must be <namespace>:<name>",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-case": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "fake-binding",
0000000000000000000000000000000000000000;;					"role":           "fake-role",
0000000000000000000000000000000000000000;;					"user":           []string{"fake-user"},
0000000000000000000000000000000000000000;;					"group":          []string{"fake-group"},
0000000000000000000000000000000000000000;;					"serviceaccount": []string{"fake-namespace:fake-account"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectBinding: &rbac.RoleBinding{
0000000000000000000000000000000000000000;;					ObjectMeta: v1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "fake-binding",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RoleRef: rbac.RoleRef{
0000000000000000000000000000000000000000;;						APIGroup: rbac.GroupName,
0000000000000000000000000000000000000000;;						Kind:     "Role",
0000000000000000000000000000000000000000;;						Name:     "fake-role",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Subjects: []rbac.Subject{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Kind:     rbac.UserKind,
0000000000000000000000000000000000000000;;							APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;							Name:     "fake-user",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Kind:     rbac.GroupKind,
0000000000000000000000000000000000000000;;							APIGroup: "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;							Name:     "fake-group",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Kind:      rbac.ServiceAccountKind,
0000000000000000000000000000000000000000;;							Namespace: "fake-namespace",
0000000000000000000000000000000000000000;;							Name:      "fake-account",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		generator := RoleBindingGeneratorV1{}
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case test.expectErrMsg != "" && err != nil:
0000000000000000000000000000000000000000;;				if err.Error() != test.expectErrMsg {
0000000000000000000000000000000000000000;;					t.Errorf("test '%s': expect error '%s', but saw '%s'", name, test.expectErrMsg, err.Error())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case test.expectErrMsg != "" && err == nil:
0000000000000000000000000000000000000000;;				t.Errorf("test '%s': expected error '%s' and didn't get one", name, test.expectErrMsg)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case test.expectErrMsg == "" && err != nil:
0000000000000000000000000000000000000000;;				t.Errorf("test '%s': unexpected error %s", name, err.Error())
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*rbac.RoleBinding), test.expectBinding) {
0000000000000000000000000000000000000000;;				t.Errorf("test '%s': expected:\n%#v\nsaw:\n%#v", name, test.expectBinding, obj.(*rbac.RoleBinding))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
