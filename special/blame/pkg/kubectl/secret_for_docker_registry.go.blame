0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f5c3f879514cf5b75e7d79535df3a924c9c4ae20;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/credentialprovider"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecretForDockerRegistryGeneratorV1 supports stable generation of a docker registry secret
0000000000000000000000000000000000000000;;	type SecretForDockerRegistryGeneratorV1 struct {
0000000000000000000000000000000000000000;;		// Name of secret (required)
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// Username for registry (required)
0000000000000000000000000000000000000000;;		Username string
0000000000000000000000000000000000000000;;		// Email for registry (optional)
0000000000000000000000000000000000000000;;		Email string
0000000000000000000000000000000000000000;;		// Password for registry (required)
0000000000000000000000000000000000000000;;		Password string
0000000000000000000000000000000000000000;;		// Server for registry (required)
0000000000000000000000000000000000000000;;		Server string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameter injection
0000000000000000000000000000000000000000;;	var _ Generator = &SecretForDockerRegistryGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameters specified during construction
0000000000000000000000000000000000000000;;	var _ StructuredGenerator = &SecretForDockerRegistryGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate returns a secret using the specified parameters
0000000000000000000000000000000000000000;;	func (s SecretForDockerRegistryGeneratorV1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(s.ParamNames(), genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		params := map[string]string{}
0000000000000000000000000000000000000000;;		for key, value := range genericParams {
0000000000000000000000000000000000000000;;			strVal, isString := value.(string)
0000000000000000000000000000000000000000;;			if !isString {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected string, saw %v for '%s'", value, key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			params[key] = strVal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate := &SecretForDockerRegistryGeneratorV1{
0000000000000000000000000000000000000000;;			Name:     params["name"],
0000000000000000000000000000000000000000;;			Username: params["docker-username"],
0000000000000000000000000000000000000000;;			Email:    params["docker-email"],
0000000000000000000000000000000000000000;;			Password: params["docker-password"],
0000000000000000000000000000000000000000;;			Server:   params["docker-server"],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StructuredGenerate outputs a secret object using the configured fields
0000000000000000000000000000000000000000;;	func (s SecretForDockerRegistryGeneratorV1) StructuredGenerate() (runtime.Object, error) {
0000000000000000000000000000000000000000;;		if err := s.validate(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dockercfgContent, err := handleDockercfgContent(s.Username, s.Password, s.Email, s.Server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		secret := &api.Secret{}
0000000000000000000000000000000000000000;;		secret.Name = s.Name
0000000000000000000000000000000000000000;;		secret.Type = api.SecretTypeDockercfg
0000000000000000000000000000000000000000;;		secret.Data = map[string][]byte{}
0000000000000000000000000000000000000000;;		secret.Data[api.DockerConfigKey] = dockercfgContent
0000000000000000000000000000000000000000;;		return secret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParamNames returns the set of supported input parameters when using the parameter injection generator pattern
0000000000000000000000000000000000000000;;	func (s SecretForDockerRegistryGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"docker-username", true},
0000000000000000000000000000000000000000;;			{"docker-email", false},
0000000000000000000000000000000000000000;;			{"docker-password", true},
0000000000000000000000000000000000000000;;			{"docker-server", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validate validates required fields are set to support structured generation
0000000000000000000000000000000000000000;;	func (s SecretForDockerRegistryGeneratorV1) validate() error {
0000000000000000000000000000000000000000;;		if len(s.Name) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("name must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.Username) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("username must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.Password) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("password must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.Server) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("server must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handleDockercfgContent serializes a dockercfg json file
0000000000000000000000000000000000000000;;	func handleDockercfgContent(username, password, email, server string) ([]byte, error) {
0000000000000000000000000000000000000000;;		dockercfgAuth := credentialprovider.DockerConfigEntry{
0000000000000000000000000000000000000000;;			Username: username,
0000000000000000000000000000000000000000;;			Password: password,
0000000000000000000000000000000000000000;;			Email:    email,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dockerCfg := map[string]credentialprovider.DockerConfigEntry{server: dockercfgAuth}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return json.Marshal(dockerCfg)
0000000000000000000000000000000000000000;;	}
