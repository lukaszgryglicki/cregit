0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
ef8e5afec995bf8d67dc35aa24a402758db1ff0c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestStruct struct {
0000000000000000000000000000000000000000;;		val int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsZero(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			val        interface{}
0000000000000000000000000000000000000000;;			expectZero bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", true},
0000000000000000000000000000000000000000;;			{nil, true},
0000000000000000000000000000000000000000;;			{0, true},
0000000000000000000000000000000000000000;;			{TestStruct{}, true},
0000000000000000000000000000000000000000;;			{"foo", false},
0000000000000000000000000000000000000000;;			{1, false},
0000000000000000000000000000000000000000;;			{TestStruct{val: 2}, false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			output := IsZero(test.val)
0000000000000000000000000000000000000000;;			if output != test.expectZero {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %v, saw %v", test.expectZero, output)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateParams(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			paramSpec []GeneratorParam
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			valid     bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				paramSpec: []GeneratorParam{},
0000000000000000000000000000000000000000;;				params:    map[string]interface{}{},
0000000000000000000000000000000000000000;;				valid:     true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				paramSpec: []GeneratorParam{
0000000000000000000000000000000000000000;;					{Name: "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{},
0000000000000000000000000000000000000000;;				valid:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				paramSpec: []GeneratorParam{
0000000000000000000000000000000000000000;;					{Name: "foo", Required: true},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				valid: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				paramSpec: []GeneratorParam{
0000000000000000000000000000000000000000;;					{Name: "foo", Required: true},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"baz": "blah",
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				valid: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				paramSpec: []GeneratorParam{
0000000000000000000000000000000000000000;;					{Name: "foo", Required: true},
0000000000000000000000000000000000000000;;					{Name: "baz", Required: true},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"baz": "blah",
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				valid: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				paramSpec: []GeneratorParam{
0000000000000000000000000000000000000000;;					{Name: "foo", Required: true},
0000000000000000000000000000000000000000;;					{Name: "baz", Required: true},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				valid: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := ValidateParams(test.paramSpec, test.params)
0000000000000000000000000000000000000000;;			if test.valid && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.valid && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMakeParams(t *testing.T) {
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{}
0000000000000000000000000000000000000000;;		cmd.Flags().String("foo", "bar", "")
0000000000000000000000000000000000000000;;		cmd.Flags().String("baz", "", "")
0000000000000000000000000000000000000000;;		cmd.Flags().Set("baz", "blah")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		paramSpec := []GeneratorParam{
0000000000000000000000000000000000000000;;			{Name: "foo", Required: true},
0000000000000000000000000000000000000000;;			{Name: "baz", Required: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected := map[string]interface{}{
0000000000000000000000000000000000000000;;			"foo": "bar",
0000000000000000000000000000000000000000;;			"baz": "blah",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		params := MakeParams(cmd, paramSpec)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(params, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("\nexpected:\n%v\nsaw:\n%v", expected, params)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
