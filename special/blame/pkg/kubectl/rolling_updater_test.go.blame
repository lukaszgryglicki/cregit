0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
fd833fbcbbd4c596f1cda70445f373eb91366319;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		manualfake "k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;		testcore "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/testapi"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/kubernetes/pkg/api/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubectl/util"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func oldRc(replicas int, original int) *api.ReplicationController {
0000000000000000000000000000000000000000;;		return &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:      "foo-v1",
0000000000000000000000000000000000000000;;				UID:       "7764ae47-9092-11e4-8393-42010af018ff",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					originalReplicasAnnotation: fmt.Sprintf("%d", original),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: int32(replicas),
0000000000000000000000000000000000000000;;				Selector: map[string]string{"version": "v1"},
0000000000000000000000000000000000000000;;				Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo-v1",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"version": "v1"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: api.ReplicationControllerStatus{
0000000000000000000000000000000000000000;;				Replicas: int32(replicas),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRc(replicas int, desired int) *api.ReplicationController {
0000000000000000000000000000000000000000;;		rc := oldRc(replicas, replicas)
0000000000000000000000000000000000000000;;		rc.Spec.Template = &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   "foo-v2",
0000000000000000000000000000000000000000;;				Labels: map[string]string{"version": "v2"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rc.Spec.Selector = map[string]string{"version": "v2"}
0000000000000000000000000000000000000000;;		rc.ObjectMeta = metav1.ObjectMeta{
0000000000000000000000000000000000000000;;			Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			Name:      "foo-v2",
0000000000000000000000000000000000000000;;			Annotations: map[string]string{
0000000000000000000000000000000000000000;;				desiredReplicasAnnotation: fmt.Sprintf("%d", desired),
0000000000000000000000000000000000000000;;				sourceIdAnnotation:        "foo-v1:7764ae47-9092-11e4-8393-42010af018ff",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestUpdate performs complex scenario testing for rolling updates. It
0000000000000000000000000000000000000000;;	// provides fine grained control over the states for each update interval to
0000000000000000000000000000000000000000;;	// allow the expression of as many edge cases as possible.
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		// up represents a simulated scale up event and expectation
0000000000000000000000000000000000000000;;		type up struct {
0000000000000000000000000000000000000000;;			// to is the expected replica count for a scale-up
0000000000000000000000000000000000000000;;			to int
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// down represents a simulated scale down event and expectation
0000000000000000000000000000000000000000;;		type down struct {
0000000000000000000000000000000000000000;;			// oldReady is the number of oldRc replicas which will be seen
0000000000000000000000000000000000000000;;			// as ready during the scale down attempt
0000000000000000000000000000000000000000;;			oldReady int
0000000000000000000000000000000000000000;;			// newReady is the number of newRc replicas which will be seen
0000000000000000000000000000000000000000;;			// as ready during the scale up attempt
0000000000000000000000000000000000000000;;			newReady int
0000000000000000000000000000000000000000;;			// to is the expected replica count for the scale down
0000000000000000000000000000000000000000;;			to int
0000000000000000000000000000000000000000;;			// noop and to are mutually exclusive; if noop is true, that means for
0000000000000000000000000000000000000000;;			// this down event, no scaling attempt should be made (for example, if
0000000000000000000000000000000000000000;;			// by scaling down, the readiness minimum would be crossed.)
0000000000000000000000000000000000000000;;			noop bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			// oldRc is the "from" deployment
0000000000000000000000000000000000000000;;			oldRc *api.ReplicationController
0000000000000000000000000000000000000000;;			// newRc is the "to" deployment
0000000000000000000000000000000000000000;;			newRc *api.ReplicationController
0000000000000000000000000000000000000000;;			// whether newRc existed (false means it was created)
0000000000000000000000000000000000000000;;			newRcExists bool
0000000000000000000000000000000000000000;;			maxUnavail  intstr.IntOrString
0000000000000000000000000000000000000000;;			maxSurge    intstr.IntOrString
0000000000000000000000000000000000000000;;			// expected is the sequence of up/down events that will be simulated and
0000000000000000000000000000000000000000;;			// verified
0000000000000000000000000000000000000000;;			expected []interface{}
0000000000000000000000000000000000000000;;			// output is the expected textual output written
0000000000000000000000000000000000000000;;			output string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "10->10 30/0 fast readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("30%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 0, to: 7},
0000000000000000000000000000000000000000;;					up{3},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 3, to: 4},
0000000000000000000000000000000000000000;;					up{6},
0000000000000000000000000000000000000000;;					down{oldReady: 4, newReady: 6, to: 1},
0000000000000000000000000000000000000000;;					up{9},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 9, to: 0},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 7 pods available, don't exceed 10 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 7
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 3
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 4
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 6
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 9
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "10->10 30/0 delayed readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("30%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 0, to: 7},
0000000000000000000000000000000000000000;;					up{3},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 0, noop: true},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 1, to: 6},
0000000000000000000000000000000000000000;;					up{4},
0000000000000000000000000000000000000000;;					down{oldReady: 6, newReady: 4, to: 3},
0000000000000000000000000000000000000000;;					up{7},
0000000000000000000000000000000000000000;;					down{oldReady: 3, newReady: 7, to: 0},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 7 pods available, don't exceed 10 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 7
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 3
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 6
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 4
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 3
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 7
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 30/0 fast readiness, continuation",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(7, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(3, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("30%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 3, to: 4},
0000000000000000000000000000000000000000;;					up{6},
0000000000000000000000000000000000000000;;					down{oldReady: 4, newReady: 6, to: 1},
0000000000000000000000000000000000000000;;					up{9},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 9, to: 0},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 3 to 10, scaling down foo-v1 from 7 to 0 (keep 7 pods available, don't exceed 10 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 4
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 6
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 9
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 30/0 fast readiness, continued after restart which prevented first scale-up",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(7, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("30%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 0, noop: true},
0000000000000000000000000000000000000000;;					up{3},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 3, to: 4},
0000000000000000000000000000000000000000;;					up{6},
0000000000000000000000000000000000000000;;					down{oldReady: 4, newReady: 6, to: 1},
0000000000000000000000000000000000000000;;					up{9},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 9, to: 0},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 7 to 0 (keep 7 pods available, don't exceed 10 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 3
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 4
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 6
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 9
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 0/30 fast readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("30%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{3},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 3, to: 7},
0000000000000000000000000000000000000000;;					up{6},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 6, to: 4},
0000000000000000000000000000000000000000;;					up{9},
0000000000000000000000000000000000000000;;					down{oldReady: 4, newReady: 9, to: 1},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 10, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 10 pods available, don't exceed 13 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 3
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 7
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 6
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 4
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 9
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 0/30 delayed readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("30%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{3},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 0, noop: true},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 1, to: 9},
0000000000000000000000000000000000000000;;					up{4},
0000000000000000000000000000000000000000;;					down{oldReady: 9, newReady: 3, to: 7},
0000000000000000000000000000000000000000;;					up{6},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 6, to: 4},
0000000000000000000000000000000000000000;;					up{9},
0000000000000000000000000000000000000000;;					down{oldReady: 4, newReady: 9, to: 1},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 9, noop: true},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 10, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 10 pods available, don't exceed 13 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 3
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 9
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 4
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 7
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 6
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 4
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 9
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 10/20 fast readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("20%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{2},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 2, to: 7},
0000000000000000000000000000000000000000;;					up{5},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 5, to: 4},
0000000000000000000000000000000000000000;;					up{8},
0000000000000000000000000000000000000000;;					down{oldReady: 4, newReady: 8, to: 1},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 10, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 9 pods available, don't exceed 12 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 2
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 7
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 5
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 4
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 8
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 10/20 delayed readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("20%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{2},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 2, to: 7},
0000000000000000000000000000000000000000;;					up{5},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 4, to: 5},
0000000000000000000000000000000000000000;;					up{7},
0000000000000000000000000000000000000000;;					down{oldReady: 5, newReady: 4, noop: true},
0000000000000000000000000000000000000000;;					down{oldReady: 5, newReady: 7, to: 2},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;					down{oldReady: 2, newReady: 9, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 9 pods available, don't exceed 12 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 2
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 7
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 5
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 5
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 7
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 2
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 10/20 fast readiness continued after restart which prevented first scale-down",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(2, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("20%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 2, to: 7},
0000000000000000000000000000000000000000;;					up{5},
0000000000000000000000000000000000000000;;					down{oldReady: 7, newReady: 5, to: 4},
0000000000000000000000000000000000000000;;					up{8},
0000000000000000000000000000000000000000;;					down{oldReady: 4, newReady: 8, to: 1},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 10, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 2 to 10, scaling down foo-v1 from 10 to 0 (keep 9 pods available, don't exceed 12 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 7
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 5
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 4
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 8
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 0/100 fast readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("100%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 10, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 10 pods available, don't exceed 20 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 0/100 delayed readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("100%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 0, noop: true},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 2, to: 8},
0000000000000000000000000000000000000000;;					down{oldReady: 8, newReady: 7, to: 3},
0000000000000000000000000000000000000000;;					down{oldReady: 3, newReady: 10, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 10 pods available, don't exceed 20 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 8
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 3
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 100/0 fast readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("100%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 0, to: 0},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 10, scaling down foo-v1 from 10 to 0 (keep 0 pods available, don't exceed 10 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "1->1 25/25 maintain minimum availability",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(1, 1),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 1),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("25%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("25%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 0, noop: true},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 1, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 1, scaling down foo-v1 from 1 to 0 (keep 1 pods available, don't exceed 2 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "1->1 0/10 delayed readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(1, 1),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 1),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 0, noop: true},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 1, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 1, scaling down foo-v1 from 1 to 0 (keep 1 pods available, don't exceed 2 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "1->1 10/10 delayed readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(1, 1),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 1),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 0, noop: true},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 1, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 1, scaling down foo-v1 from 1 to 0 (keep 1 pods available, don't exceed 2 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "3->3 1/1 fast readiness (absolute values)",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(3, 3),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 3),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromInt(0),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromInt(1),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 3, newReady: 1, to: 2},
0000000000000000000000000000000000000000;;					up{2},
0000000000000000000000000000000000000000;;					down{oldReady: 2, newReady: 2, to: 1},
0000000000000000000000000000000000000000;;					up{3},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 3, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 3, scaling down foo-v1 from 3 to 0 (keep 3 pods available, don't exceed 4 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 2
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 2
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 3
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->10 0/20 fast readiness, continued after restart which resulted in partial first scale-up",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(6, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(5, 10),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("20%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{6},
0000000000000000000000000000000000000000;;					down{oldReady: 6, newReady: 6, to: 4},
0000000000000000000000000000000000000000;;					up{8},
0000000000000000000000000000000000000000;;					down{oldReady: 4, newReady: 8, to: 2},
0000000000000000000000000000000000000000;;					up{10},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 10, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 5 to 10, scaling down foo-v1 from 6 to 0 (keep 10 pods available, don't exceed 12 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 6
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 4
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 8
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 2
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 10
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "10->20 0/300 fast readiness",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(10, 10),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 20),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("300%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{20},
0000000000000000000000000000000000000000;;					down{oldReady: 10, newReady: 20, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 20, scaling down foo-v1 from 10 to 0 (keep 20 pods available, don't exceed 80 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 20
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "1->1 0/1 scale down unavailable rc to a ready rc (rollback)",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(1, 1),
0000000000000000000000000000000000000000;;				newRc:       newRc(1, 1),
0000000000000000000000000000000000000000;;				newRcExists: true,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromInt(0),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromInt(1),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 0, newReady: 1, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Continuing update with existing controller foo-v2.
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 1 to 1, scaling down foo-v1 from 1 to 0 (keep 1 pods available, don't exceed 2 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "3->0 1/1 desired 0 (absolute values)",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(3, 3),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 0),
0000000000000000000000000000000000000000;;				newRcExists: true,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromInt(1),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromInt(1),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 3, newReady: 0, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Continuing update with existing controller foo-v2.
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 0, scaling down foo-v1 from 3 to 0 (keep 0 pods available, don't exceed 1 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "3->0 10/10 desired 0 (percentages)",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(3, 3),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 0),
0000000000000000000000000000000000000000;;				newRcExists: true,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 3, newReady: 0, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Continuing update with existing controller foo-v2.
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 0, scaling down foo-v1 from 3 to 0 (keep 0 pods available, don't exceed 0 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "3->0 10/10 desired 0 (create new RC)",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(3, 3),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 0),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("10%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 3, newReady: 0, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 0, scaling down foo-v1 from 3 to 0 (keep 0 pods available, don't exceed 0 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "0->0 1/1 desired 0 (absolute values)",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(0, 0),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 0),
0000000000000000000000000000000000000000;;				newRcExists: true,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromInt(1),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromInt(1),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 0, newReady: 0, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Continuing update with existing controller foo-v2.
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 0, scaling down foo-v1 from 0 to 0 (keep 0 pods available, don't exceed 1 pods)
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				name:        "30->2 50%/0",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(30, 30),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 2),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("50%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromInt(0),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 30, newReady: 0, to: 1},
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 2, to: 0},
0000000000000000000000000000000000000000;;					up{2},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 2, scaling down foo-v1 from 30 to 0 (keep 1 pods available, don't exceed 2 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 2
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "2->2 1/0 blocked oldRc",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(2, 2),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 2),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromInt(1),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromInt(0),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 0, to: 1},
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 1, to: 0},
0000000000000000000000000000000000000000;;					up{2},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 2, scaling down foo-v1 from 2 to 0 (keep 1 pods available, don't exceed 2 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 2
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "1->1 1/0 allow maxUnavailability",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(1, 1),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 1),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("1%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromInt(0),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 0, to: 0},
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 1, scaling down foo-v1 from 1 to 0 (keep 0 pods available, don't exceed 1 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "1->2 25/25 complex asymmetric deployment",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(1, 1),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 2),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("25%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("25%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{2},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 2, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 2, scaling down foo-v1 from 1 to 0 (keep 2 pods available, don't exceed 3 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 2
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "2->2 25/1 maxSurge trumps maxUnavailable",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(2, 2),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 2),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("25%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("1%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 2, newReady: 1, to: 1},
0000000000000000000000000000000000000000;;					up{2},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 2, to: 0},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 2, scaling down foo-v1 from 2 to 0 (keep 2 pods available, don't exceed 3 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 2
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "2->2 25/0 maxUnavailable resolves to zero, then one",
0000000000000000000000000000000000000000;;				oldRc:       oldRc(2, 2),
0000000000000000000000000000000000000000;;				newRc:       newRc(0, 2),
0000000000000000000000000000000000000000;;				newRcExists: false,
0000000000000000000000000000000000000000;;				maxUnavail:  intstr.FromString("25%"),
0000000000000000000000000000000000000000;;				maxSurge:    intstr.FromString("0%"),
0000000000000000000000000000000000000000;;				expected: []interface{}{
0000000000000000000000000000000000000000;;					down{oldReady: 2, newReady: 0, to: 1},
0000000000000000000000000000000000000000;;					up{1},
0000000000000000000000000000000000000000;;					down{oldReady: 1, newReady: 1, to: 0},
0000000000000000000000000000000000000000;;					up{2},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				output: `Created foo-v2
0000000000000000000000000000000000000000;;	Scaling up foo-v2 from 0 to 2, scaling down foo-v1 from 2 to 0 (keep 1 pods available, don't exceed 2 pods)
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 1
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 1
0000000000000000000000000000000000000000;;	Scaling foo-v1 down to 0
0000000000000000000000000000000000000000;;	Scaling foo-v2 up to 2
0000000000000000000000000000000000000000;;	`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			// Extract expectations into some makeshift FIFOs so they can be returned
0000000000000000000000000000000000000000;;			// in the correct order from the right places. This lets scale downs be
0000000000000000000000000000000000000000;;			// expressed a single event even though the data is used from multiple
0000000000000000000000000000000000000000;;			// interface calls.
0000000000000000000000000000000000000000;;			oldReady := []int{}
0000000000000000000000000000000000000000;;			newReady := []int{}
0000000000000000000000000000000000000000;;			upTo := []int{}
0000000000000000000000000000000000000000;;			downTo := []int{}
0000000000000000000000000000000000000000;;			for _, event := range test.expected {
0000000000000000000000000000000000000000;;				switch e := event.(type) {
0000000000000000000000000000000000000000;;				case down:
0000000000000000000000000000000000000000;;					oldReady = append(oldReady, e.oldReady)
0000000000000000000000000000000000000000;;					newReady = append(newReady, e.newReady)
0000000000000000000000000000000000000000;;					if !e.noop {
0000000000000000000000000000000000000000;;						downTo = append(downTo, e.to)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case up:
0000000000000000000000000000000000000000;;					upTo = append(upTo, e.to)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Make a way to get the next item from our FIFOs. Returns -1 if the array
0000000000000000000000000000000000000000;;			// is empty.
0000000000000000000000000000000000000000;;			next := func(s *[]int) int {
0000000000000000000000000000000000000000;;				slice := *s
0000000000000000000000000000000000000000;;				v := -1
0000000000000000000000000000000000000000;;				if len(slice) > 0 {
0000000000000000000000000000000000000000;;					v = slice[0]
0000000000000000000000000000000000000000;;					if len(slice) > 1 {
0000000000000000000000000000000000000000;;						*s = slice[1:]
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						*s = []int{}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Logf("running test %d (%s) (up: %v, down: %v, oldReady: %v, newReady: %v)", i, test.name, upTo, downTo, oldReady, newReady)
0000000000000000000000000000000000000000;;			updater := &RollingUpdater{
0000000000000000000000000000000000000000;;				ns: "default",
0000000000000000000000000000000000000000;;				scaleAndWait: func(rc *api.ReplicationController, retry *RetryParams, wait *RetryParams) (*api.ReplicationController, error) {
0000000000000000000000000000000000000000;;					// Return a scale up or scale down expectation depending on the rc,
0000000000000000000000000000000000000000;;					// and throw errors if there is no expectation expressed for this
0000000000000000000000000000000000000000;;					// call.
0000000000000000000000000000000000000000;;					expected := -1
0000000000000000000000000000000000000000;;					switch {
0000000000000000000000000000000000000000;;					case rc == test.newRc:
0000000000000000000000000000000000000000;;						t.Logf("scaling up %s to %d", rc.Name, rc.Spec.Replicas)
0000000000000000000000000000000000000000;;						expected = next(&upTo)
0000000000000000000000000000000000000000;;					case rc == test.oldRc:
0000000000000000000000000000000000000000;;						t.Logf("scaling down %s to %d", rc.Name, rc.Spec.Replicas)
0000000000000000000000000000000000000000;;						expected = next(&downTo)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if expected == -1 {
0000000000000000000000000000000000000000;;						t.Fatalf("unexpected scale of %s to %d", rc.Name, rc.Spec.Replicas)
0000000000000000000000000000000000000000;;					} else if e, a := expected, int(rc.Spec.Replicas); e != a {
0000000000000000000000000000000000000000;;						t.Fatalf("expected scale of %s to %d, got %d", rc.Name, e, a)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					// Simulate the scale.
0000000000000000000000000000000000000000;;					rc.Status.Replicas = rc.Spec.Replicas
0000000000000000000000000000000000000000;;					return rc, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				getOrCreateTargetController: func(controller *api.ReplicationController, sourceId string) (*api.ReplicationController, bool, error) {
0000000000000000000000000000000000000000;;					// Simulate a create vs. update of an existing controller.
0000000000000000000000000000000000000000;;					return test.newRc, test.newRcExists, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				cleanup: func(oldRc, newRc *api.ReplicationController, config *RollingUpdaterConfig) error {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Set up a mock readiness check which handles the test assertions.
0000000000000000000000000000000000000000;;			updater.getReadyPods = func(oldRc, newRc *api.ReplicationController, minReadySecondsDeadline int32) (int32, int32, error) {
0000000000000000000000000000000000000000;;				// Return simulated readiness, and throw an error if this call has no
0000000000000000000000000000000000000000;;				// expectations defined.
0000000000000000000000000000000000000000;;				oldReady := next(&oldReady)
0000000000000000000000000000000000000000;;				newReady := next(&newReady)
0000000000000000000000000000000000000000;;				if oldReady == -1 || newReady == -1 {
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected getReadyPods call for:\noldRc: %#v\nnewRc: %#v", oldRc, newRc)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return int32(oldReady), int32(newReady), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var buffer bytes.Buffer
0000000000000000000000000000000000000000;;			config := &RollingUpdaterConfig{
0000000000000000000000000000000000000000;;				Out:            &buffer,
0000000000000000000000000000000000000000;;				OldRc:          test.oldRc,
0000000000000000000000000000000000000000;;				NewRc:          test.newRc,
0000000000000000000000000000000000000000;;				UpdatePeriod:   0,
0000000000000000000000000000000000000000;;				Interval:       time.Millisecond,
0000000000000000000000000000000000000000;;				Timeout:        time.Millisecond,
0000000000000000000000000000000000000000;;				CleanupPolicy:  DeleteRollingUpdateCleanupPolicy,
0000000000000000000000000000000000000000;;				MaxUnavailable: test.maxUnavail,
0000000000000000000000000000000000000000;;				MaxSurge:       test.maxSurge,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := updater.Update(config)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buffer.String() != test.output {
0000000000000000000000000000000000000000;;				t.Errorf("Bad output. expected:\n%s\ngot:\n%s", test.output, buffer.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestUpdate_progressTimeout ensures that an update which isn't making any
0000000000000000000000000000000000000000;;	// progress will eventually time out with a specified error.
0000000000000000000000000000000000000000;;	func TestUpdate_progressTimeout(t *testing.T) {
0000000000000000000000000000000000000000;;		oldRc := oldRc(2, 2)
0000000000000000000000000000000000000000;;		newRc := newRc(0, 2)
0000000000000000000000000000000000000000;;		updater := &RollingUpdater{
0000000000000000000000000000000000000000;;			ns: "default",
0000000000000000000000000000000000000000;;			scaleAndWait: func(rc *api.ReplicationController, retry *RetryParams, wait *RetryParams) (*api.ReplicationController, error) {
0000000000000000000000000000000000000000;;				// Do nothing.
0000000000000000000000000000000000000000;;				return rc, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			getOrCreateTargetController: func(controller *api.ReplicationController, sourceId string) (*api.ReplicationController, bool, error) {
0000000000000000000000000000000000000000;;				return newRc, false, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			cleanup: func(oldRc, newRc *api.ReplicationController, config *RollingUpdaterConfig) error {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updater.getReadyPods = func(oldRc, newRc *api.ReplicationController, minReadySeconds int32) (int32, int32, error) {
0000000000000000000000000000000000000000;;			// Coerce a timeout by pods never becoming ready.
0000000000000000000000000000000000000000;;			return 0, 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var buffer bytes.Buffer
0000000000000000000000000000000000000000;;		config := &RollingUpdaterConfig{
0000000000000000000000000000000000000000;;			Out:            &buffer,
0000000000000000000000000000000000000000;;			OldRc:          oldRc,
0000000000000000000000000000000000000000;;			NewRc:          newRc,
0000000000000000000000000000000000000000;;			UpdatePeriod:   0,
0000000000000000000000000000000000000000;;			Interval:       time.Millisecond,
0000000000000000000000000000000000000000;;			Timeout:        time.Millisecond,
0000000000000000000000000000000000000000;;			CleanupPolicy:  DeleteRollingUpdateCleanupPolicy,
0000000000000000000000000000000000000000;;			MaxUnavailable: intstr.FromInt(0),
0000000000000000000000000000000000000000;;			MaxSurge:       intstr.FromInt(1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := updater.Update(config)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := "timed out waiting for any update progress to be made", err.Error(); e != a {
0000000000000000000000000000000000000000;;			t.Fatalf("expected error message: %s, got: %s", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate_assignOriginalAnnotation(t *testing.T) {
0000000000000000000000000000000000000000;;		oldRc := oldRc(1, 1)
0000000000000000000000000000000000000000;;		delete(oldRc.Annotations, originalReplicasAnnotation)
0000000000000000000000000000000000000000;;		newRc := newRc(1, 1)
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(oldRc)
0000000000000000000000000000000000000000;;		updater := &RollingUpdater{
0000000000000000000000000000000000000000;;			rcClient:  fake.Core(),
0000000000000000000000000000000000000000;;			podClient: fake.Core(),
0000000000000000000000000000000000000000;;			ns:        "default",
0000000000000000000000000000000000000000;;			scaleAndWait: func(rc *api.ReplicationController, retry *RetryParams, wait *RetryParams) (*api.ReplicationController, error) {
0000000000000000000000000000000000000000;;				return rc, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			getOrCreateTargetController: func(controller *api.ReplicationController, sourceId string) (*api.ReplicationController, bool, error) {
0000000000000000000000000000000000000000;;				return newRc, false, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			cleanup: func(oldRc, newRc *api.ReplicationController, config *RollingUpdaterConfig) error {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			getReadyPods: func(oldRc, newRc *api.ReplicationController, minReadySeconds int32) (int32, int32, error) {
0000000000000000000000000000000000000000;;				return 1, 1, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var buffer bytes.Buffer
0000000000000000000000000000000000000000;;		config := &RollingUpdaterConfig{
0000000000000000000000000000000000000000;;			Out:            &buffer,
0000000000000000000000000000000000000000;;			OldRc:          oldRc,
0000000000000000000000000000000000000000;;			NewRc:          newRc,
0000000000000000000000000000000000000000;;			UpdatePeriod:   0,
0000000000000000000000000000000000000000;;			Interval:       time.Millisecond,
0000000000000000000000000000000000000000;;			Timeout:        time.Millisecond,
0000000000000000000000000000000000000000;;			CleanupPolicy:  DeleteRollingUpdateCleanupPolicy,
0000000000000000000000000000000000000000;;			MaxUnavailable: intstr.FromString("100%"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := updater.Update(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		updateAction := fake.Actions()[1].(testcore.UpdateAction)
0000000000000000000000000000000000000000;;		if updateAction.GetResource().GroupResource() != api.Resource("replicationcontrollers") {
0000000000000000000000000000000000000000;;			t.Fatalf("expected rc to be updated: %#v", updateAction)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := "1", updateAction.GetObject().(*api.ReplicationController).Annotations[originalReplicasAnnotation]; e != a {
0000000000000000000000000000000000000000;;			t.Fatalf("expected annotation value %s, got %s", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRollingUpdater_multipleContainersInPod(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			oldRc *api.ReplicationController
0000000000000000000000000000000000000000;;			newRc *api.ReplicationController
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			container     string
0000000000000000000000000000000000000000;;			image         string
0000000000000000000000000000000000000000;;			deploymentKey string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRc: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Name:      "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"dk": "old",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"dk": "old",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "container1",
0000000000000000000000000000000000000000;;										Image: "image1",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "container2",
0000000000000000000000000000000000000000;;										Image: "image2",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newRc: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Name:      "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"dk": "old",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"dk": "old",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "container1",
0000000000000000000000000000000000000000;;										Image: "newimage",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "container2",
0000000000000000000000000000000000000000;;										Image: "image2",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				container:     "container1",
0000000000000000000000000000000000000000;;				image:         "newimage",
0000000000000000000000000000000000000000;;				deploymentKey: "dk",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRc: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"dk": "old",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"dk": "old",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "container1",
0000000000000000000000000000000000000000;;										Image: "image1",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newRc: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"dk": "old",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"dk": "old",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: api.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []api.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "container1",
0000000000000000000000000000000000000000;;										Image: "newimage",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				container:     "container1",
0000000000000000000000000000000000000000;;				image:         "newimage",
0000000000000000000000000000000000000000;;				deploymentKey: "dk",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fake := fake.NewSimpleClientset(test.oldRc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			codec := testapi.Default.Codec()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			deploymentHash, err := util.HashObject(test.newRc, codec)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			test.newRc.Spec.Selector[test.deploymentKey] = deploymentHash
0000000000000000000000000000000000000000;;			test.newRc.Spec.Template.Labels[test.deploymentKey] = deploymentHash
0000000000000000000000000000000000000000;;			test.newRc.Name = fmt.Sprintf("%s-%s", test.newRc.Name, deploymentHash)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			config := &NewControllerConfig{
0000000000000000000000000000000000000000;;				Namespace:     metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				OldName:       test.oldRc.ObjectMeta.Name,
0000000000000000000000000000000000000000;;				NewName:       test.newRc.ObjectMeta.Name,
0000000000000000000000000000000000000000;;				Image:         test.image,
0000000000000000000000000000000000000000;;				Container:     test.container,
0000000000000000000000000000000000000000;;				DeploymentKey: test.deploymentKey,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			updatedRc, err := CreateNewControllerFromCurrentController(fake.Core(), codec, config)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(updatedRc, test.newRc) {
0000000000000000000000000000000000000000;;				t.Errorf("expected:\n%#v\ngot:\n%#v\n", test.newRc, updatedRc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestRollingUpdater_cleanupWithClients ensures that the cleanup policy is
0000000000000000000000000000000000000000;;	// correctly implemented.
0000000000000000000000000000000000000000;;	func TestRollingUpdater_cleanupWithClients(t *testing.T) {
0000000000000000000000000000000000000000;;		rc := oldRc(2, 2)
0000000000000000000000000000000000000000;;		rcExisting := newRc(1, 3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			policy    RollingUpdaterCleanupPolicy
0000000000000000000000000000000000000000;;			responses []runtime.Object
0000000000000000000000000000000000000000;;			expected  []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "preserve",
0000000000000000000000000000000000000000;;				policy:    PreserveRollingUpdateCleanupPolicy,
0000000000000000000000000000000000000000;;				responses: []runtime.Object{rcExisting},
0000000000000000000000000000000000000000;;				expected: []string{
0000000000000000000000000000000000000000;;					"get",
0000000000000000000000000000000000000000;;					"update",
0000000000000000000000000000000000000000;;					"get",
0000000000000000000000000000000000000000;;					"get",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "delete",
0000000000000000000000000000000000000000;;				policy:    DeleteRollingUpdateCleanupPolicy,
0000000000000000000000000000000000000000;;				responses: []runtime.Object{rcExisting},
0000000000000000000000000000000000000000;;				expected: []string{
0000000000000000000000000000000000000000;;					"get",
0000000000000000000000000000000000000000;;					"update",
0000000000000000000000000000000000000000;;					"get",
0000000000000000000000000000000000000000;;					"get",
0000000000000000000000000000000000000000;;					"delete",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			//{
0000000000000000000000000000000000000000;;			// This cases is separated to a standalone
0000000000000000000000000000000000000000;;			// TestRollingUpdater_cleanupWithClients_Rename. We have to do this
0000000000000000000000000000000000000000;;			// because the unversioned fake client is unable to delete objects.
0000000000000000000000000000000000000000;;			// TODO: uncomment this case when the unversioned fake client uses
0000000000000000000000000000000000000000;;			// pkg/client/testing/core.
0000000000000000000000000000000000000000;;			//	{
0000000000000000000000000000000000000000;;			//		name:      "rename",
0000000000000000000000000000000000000000;;			//		policy:    RenameRollingUpdateCleanupPolicy,
0000000000000000000000000000000000000000;;			//		responses: []runtime.Object{rcExisting},
0000000000000000000000000000000000000000;;			//		expected: []string{
0000000000000000000000000000000000000000;;			//			"get",
0000000000000000000000000000000000000000;;			//			"update",
0000000000000000000000000000000000000000;;			//			"get",
0000000000000000000000000000000000000000;;			//			"get",
0000000000000000000000000000000000000000;;			//			"delete",
0000000000000000000000000000000000000000;;			//			"create",
0000000000000000000000000000000000000000;;			//			"delete",
0000000000000000000000000000000000000000;;			//		},
0000000000000000000000000000000000000000;;			//	},
0000000000000000000000000000000000000000;;			//},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			objs := []runtime.Object{rc}
0000000000000000000000000000000000000000;;			objs = append(objs, test.responses...)
0000000000000000000000000000000000000000;;			fake := fake.NewSimpleClientset(objs...)
0000000000000000000000000000000000000000;;			updater := &RollingUpdater{
0000000000000000000000000000000000000000;;				ns:        "default",
0000000000000000000000000000000000000000;;				rcClient:  fake.Core(),
0000000000000000000000000000000000000000;;				podClient: fake.Core(),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			config := &RollingUpdaterConfig{
0000000000000000000000000000000000000000;;				Out:           ioutil.Discard,
0000000000000000000000000000000000000000;;				OldRc:         rc,
0000000000000000000000000000000000000000;;				NewRc:         rcExisting,
0000000000000000000000000000000000000000;;				UpdatePeriod:  0,
0000000000000000000000000000000000000000;;				Interval:      time.Millisecond,
0000000000000000000000000000000000000000;;				Timeout:       time.Millisecond,
0000000000000000000000000000000000000000;;				CleanupPolicy: test.policy,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := updater.cleanupWithClients(rc, rcExisting, config)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(fake.Actions()) != len(test.expected) {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: unexpected actions: %v, expected %v", test.name, fake.Actions(), test.expected)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for j, action := range fake.Actions() {
0000000000000000000000000000000000000000;;				if e, a := test.expected[j], action.GetVerb(); e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected action: expected %s, got %s", test.name, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestRollingUpdater_cleanupWithClients_Rename tests the rename cleanup policy. It's separated to
0000000000000000000000000000000000000000;;	// a standalone test because the unversioned fake client is unable to delete
0000000000000000000000000000000000000000;;	// objects.
0000000000000000000000000000000000000000;;	// TODO: move this test back to TestRollingUpdater_cleanupWithClients
0000000000000000000000000000000000000000;;	// when the fake client uses pkg/client/testing/core in the future.
0000000000000000000000000000000000000000;;	func TestRollingUpdater_cleanupWithClients_Rename(t *testing.T) {
0000000000000000000000000000000000000000;;		rc := oldRc(2, 2)
0000000000000000000000000000000000000000;;		rcExisting := newRc(1, 3)
0000000000000000000000000000000000000000;;		expectedActions := []string{"delete", "get", "create"}
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		fake.AddReactor("*", "*", func(action testcore.Action) (handled bool, ret runtime.Object, err error) {
0000000000000000000000000000000000000000;;			switch action.(type) {
0000000000000000000000000000000000000000;;			case testcore.CreateAction:
0000000000000000000000000000000000000000;;				return true, nil, nil
0000000000000000000000000000000000000000;;			case testcore.GetAction:
0000000000000000000000000000000000000000;;				return true, nil, errors.NewNotFound(schema.GroupResource{}, "")
0000000000000000000000000000000000000000;;			case testcore.DeleteAction:
0000000000000000000000000000000000000000;;				return true, nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := Rename(fake.Core(), rcExisting, rc.Name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for j, action := range fake.Actions() {
0000000000000000000000000000000000000000;;			if e, a := expectedActions[j], action.GetVerb(); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected action: expected %s, got %s", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFindSourceController(t *testing.T) {
0000000000000000000000000000000000000000;;		ctrl1 := api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					sourceIdAnnotation: "bar:1234",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctrl2 := api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					sourceIdAnnotation: "foo:12345",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctrl3 := api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:      "baz",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					sourceIdAnnotation: "baz:45667",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			list               *api.ReplicationControllerList
0000000000000000000000000000000000000000;;			expectedController *api.ReplicationController
0000000000000000000000000000000000000000;;			err                error
0000000000000000000000000000000000000000;;			name               string
0000000000000000000000000000000000000000;;			expectError        bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				list:        &api.ReplicationControllerList{},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				list: &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;					Items: []api.ReplicationController{ctrl1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				name:        "foo",
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				list: &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;					Items: []api.ReplicationController{ctrl1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				name:               "bar",
0000000000000000000000000000000000000000;;				expectedController: &ctrl1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				list: &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;					Items: []api.ReplicationController{ctrl1, ctrl2},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				name:               "bar",
0000000000000000000000000000000000000000;;				expectedController: &ctrl1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				list: &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;					Items: []api.ReplicationController{ctrl1, ctrl2},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				name:               "foo",
0000000000000000000000000000000000000000;;				expectedController: &ctrl2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				list: &api.ReplicationControllerList{
0000000000000000000000000000000000000000;;					Items: []api.ReplicationController{ctrl1, ctrl2, ctrl3},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				name:               "baz",
0000000000000000000000000000000000000000;;				expectedController: &ctrl3,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset(test.list)
0000000000000000000000000000000000000000;;			ctrl, err := FindSourceController(fakeClient.Core(), "default", test.name)
0000000000000000000000000000000000000000;;			if test.expectError && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectError && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(ctrl, test.expectedController) {
0000000000000000000000000000000000000000;;				t.Errorf("expected:\n%v\ngot:\n%v\n", test.expectedController, ctrl)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateExistingReplicationController(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			rc              *api.ReplicationController
0000000000000000000000000000000000000000;;			name            string
0000000000000000000000000000000000000000;;			deploymentKey   string
0000000000000000000000000000000000000000;;			deploymentValue string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedRc *api.ReplicationController
0000000000000000000000000000000000000000;;			expectErr  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rc: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Name:      "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				name:            "foo",
0000000000000000000000000000000000000000;;				deploymentKey:   "dk",
0000000000000000000000000000000000000000;;				deploymentValue: "some-hash",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedRc: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Name:      "foo",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"kubectl.kubernetes.io/next-controller-id": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"dk": "some-hash",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"dk": "some-hash",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				rc: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Name:      "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"dk": "some-other-hash",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"dk": "some-other-hash",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				name:            "foo",
0000000000000000000000000000000000000000;;				deploymentKey:   "dk",
0000000000000000000000000000000000000000;;				deploymentValue: "some-hash",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedRc: &api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;						Name:      "foo",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							"kubectl.kubernetes.io/next-controller-id": "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Selector: map[string]string{
0000000000000000000000000000000000000000;;							"dk": "some-other-hash",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{
0000000000000000000000000000000000000000;;									"dk": "some-other-hash",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			buffer := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset(test.expectedRc)
0000000000000000000000000000000000000000;;			rc, err := UpdateExistingReplicationController(fakeClient.Core(), fakeClient.Core(), test.rc, "default", test.name, test.deploymentKey, test.deploymentValue, buffer)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(rc, test.expectedRc) {
0000000000000000000000000000000000000000;;				t.Errorf("expected:\n%#v\ngot:\n%#v\n", test.expectedRc, rc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected non-error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateRcWithRetries(t *testing.T) {
0000000000000000000000000000000000000000;;		codec := testapi.Default.Codec()
0000000000000000000000000000000000000000;;		rc := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "rc",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Selector: map[string]string{
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: apitesting.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test end to end updating of the rc with retries. Essentially make sure the update handler
0000000000000000000000000000000000000000;;		// sees the right updates, failures in update/get are handled properly, and that the updated
0000000000000000000000000000000000000000;;		// rc with new resource version is returned to the caller. Without any of these rollingupdate
0000000000000000000000000000000000000000;;		// will fail cryptically.
0000000000000000000000000000000000000000;;		newRc := *rc
0000000000000000000000000000000000000000;;		newRc.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		newRc.Spec.Selector["baz"] = "foobar"
0000000000000000000000000000000000000000;;		header := http.Header{}
0000000000000000000000000000000000000000;;		header.Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;		updates := []*http.Response{
0000000000000000000000000000000000000000;;			{StatusCode: 409, Header: header, Body: objBody(codec, &api.ReplicationController{})}, // conflict
0000000000000000000000000000000000000000;;			{StatusCode: 409, Header: header, Body: objBody(codec, &api.ReplicationController{})}, // conflict
0000000000000000000000000000000000000000;;			{StatusCode: 200, Header: header, Body: objBody(codec, &newRc)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gets := []*http.Response{
0000000000000000000000000000000000000000;;			{StatusCode: 500, Header: header, Body: objBody(codec, &api.ReplicationController{})},
0000000000000000000000000000000000000000;;			{StatusCode: 200, Header: header, Body: objBody(codec, rc)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeClient := &manualfake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: testapi.Default.NegotiatedSerializer(),
0000000000000000000000000000000000000000;;			Client: manualfake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == testapi.Default.ResourcePath("replicationcontrollers", "default", "rc") && m == "PUT":
0000000000000000000000000000000000000000;;					update := updates[0]
0000000000000000000000000000000000000000;;					updates = updates[1:]
0000000000000000000000000000000000000000;;					// We should always get an update with a valid rc even when the get fails. The rc should always
0000000000000000000000000000000000000000;;					// contain the update.
0000000000000000000000000000000000000000;;					if c, ok := readOrDie(t, req, codec).(*api.ReplicationController); !ok || !apiequality.Semantic.DeepEqual(rc, c) {
0000000000000000000000000000000000000000;;						t.Errorf("Unexpected update body, got %+v expected %+v", c, rc)
0000000000000000000000000000000000000000;;					} else if sel, ok := c.Spec.Selector["baz"]; !ok || sel != "foobar" {
0000000000000000000000000000000000000000;;						t.Errorf("Expected selector label update, got %+v", c.Spec.Selector)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						delete(c.Spec.Selector, "baz")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return update, nil
0000000000000000000000000000000000000000;;				case p == testapi.Default.ResourcePath("replicationcontrollers", "default", "rc") && m == "GET":
0000000000000000000000000000000000000000;;					get := gets[0]
0000000000000000000000000000000000000000;;					gets = gets[1:]
0000000000000000000000000000000000000000;;					return get, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clientConfig := &restclient.Config{APIPath: "/api", ContentConfig: restclient.ContentConfig{NegotiatedSerializer: api.Codecs, GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}}
0000000000000000000000000000000000000000;;		restClient, _ := restclient.RESTClientFor(clientConfig)
0000000000000000000000000000000000000000;;		restClient.Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset := internalclientset.New(restClient)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if rc, err := updateRcWithRetries(
0000000000000000000000000000000000000000;;			clientset, "default", rc, func(c *api.ReplicationController) {
0000000000000000000000000000000000000000;;				c.Spec.Selector["baz"] = "foobar"
0000000000000000000000000000000000000000;;			}); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		} else if sel, ok := rc.Spec.Selector["baz"]; !ok || sel != "foobar" || rc.ResourceVersion != "2" {
0000000000000000000000000000000000000000;;			t.Errorf("Expected updated rc, got %+v", rc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(updates) != 0 || len(gets) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Remaining updates %#v gets %#v", updates, gets)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readOrDie(t *testing.T, req *http.Request, codec runtime.Codec) runtime.Object {
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(req.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Error reading: %v", err)
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := runtime.Decode(codec, data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error decoding: %v", err)
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func objBody(codec runtime.Codec, obj runtime.Object) io.ReadCloser {
0000000000000000000000000000000000000000;;		return ioutil.NopCloser(bytes.NewReader([]byte(runtime.EncodeOrDie(codec, obj))))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddDeploymentHash(t *testing.T) {
0000000000000000000000000000000000000000;;		buf := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		codec := testapi.Default.Codec()
0000000000000000000000000000000000000000;;		rc := &api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "rc"},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Selector: map[string]string{
0000000000000000000000000000000000000000;;					"foo": "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Template: &api.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: map[string]string{
0000000000000000000000000000000000000000;;							"foo": "bar",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podList := &api.PodList{
0000000000000000000000000000000000000000;;			Items: []api.Pod{
0000000000000000000000000000000000000000;;				{ObjectMeta: metav1.ObjectMeta{Name: "foo"}},
0000000000000000000000000000000000000000;;				{ObjectMeta: metav1.ObjectMeta{Name: "bar"}},
0000000000000000000000000000000000000000;;				{ObjectMeta: metav1.ObjectMeta{Name: "baz"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		seen := sets.String{}
0000000000000000000000000000000000000000;;		updatedRc := false
0000000000000000000000000000000000000000;;		fakeClient := &manualfake.RESTClient{
0000000000000000000000000000000000000000;;			APIRegistry:          api.Registry,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: testapi.Default.NegotiatedSerializer(),
0000000000000000000000000000000000000000;;			Client: manualfake.CreateHTTPClient(func(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;				header := http.Header{}
0000000000000000000000000000000000000000;;				header.Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;				switch p, m := req.URL.Path, req.Method; {
0000000000000000000000000000000000000000;;				case p == testapi.Default.ResourcePath("pods", "default", "") && m == "GET":
0000000000000000000000000000000000000000;;					if req.URL.RawQuery != "labelSelector=foo%3Dbar" {
0000000000000000000000000000000000000000;;						t.Errorf("Unexpected query string: %s", req.URL.RawQuery)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: header, Body: objBody(codec, podList)}, nil
0000000000000000000000000000000000000000;;				case p == testapi.Default.ResourcePath("pods", "default", "foo") && m == "PUT":
0000000000000000000000000000000000000000;;					seen.Insert("foo")
0000000000000000000000000000000000000000;;					obj := readOrDie(t, req, codec)
0000000000000000000000000000000000000000;;					podList.Items[0] = *(obj.(*api.Pod))
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: header, Body: objBody(codec, &podList.Items[0])}, nil
0000000000000000000000000000000000000000;;				case p == testapi.Default.ResourcePath("pods", "default", "bar") && m == "PUT":
0000000000000000000000000000000000000000;;					seen.Insert("bar")
0000000000000000000000000000000000000000;;					obj := readOrDie(t, req, codec)
0000000000000000000000000000000000000000;;					podList.Items[1] = *(obj.(*api.Pod))
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: header, Body: objBody(codec, &podList.Items[1])}, nil
0000000000000000000000000000000000000000;;				case p == testapi.Default.ResourcePath("pods", "default", "baz") && m == "PUT":
0000000000000000000000000000000000000000;;					seen.Insert("baz")
0000000000000000000000000000000000000000;;					obj := readOrDie(t, req, codec)
0000000000000000000000000000000000000000;;					podList.Items[2] = *(obj.(*api.Pod))
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: header, Body: objBody(codec, &podList.Items[2])}, nil
0000000000000000000000000000000000000000;;				case p == testapi.Default.ResourcePath("replicationcontrollers", "default", "rc") && m == "PUT":
0000000000000000000000000000000000000000;;					updatedRc = true
0000000000000000000000000000000000000000;;					return &http.Response{StatusCode: 200, Header: header, Body: objBody(codec, rc)}, nil
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected request: %#v\n%#v", req.URL, req)
0000000000000000000000000000000000000000;;					return nil, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clientConfig := &restclient.Config{APIPath: "/api", ContentConfig: restclient.ContentConfig{NegotiatedSerializer: api.Codecs, GroupVersion: &api.Registry.GroupOrDie(api.GroupName).GroupVersion}}
0000000000000000000000000000000000000000;;		restClient, _ := restclient.RESTClientFor(clientConfig)
0000000000000000000000000000000000000000;;		restClient.Client = fakeClient.Client
0000000000000000000000000000000000000000;;		clientset := internalclientset.New(restClient)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := AddDeploymentKeyToReplicationController(rc, clientset.Core(), clientset.Core(), "dk", "hash", metav1.NamespaceDefault, buf); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, pod := range podList.Items {
0000000000000000000000000000000000000000;;			if !seen.Has(pod.Name) {
0000000000000000000000000000000000000000;;				t.Errorf("Missing update for pod: %s", pod.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !updatedRc {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to update replication controller with new labels")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRollingUpdater_readyPods(t *testing.T) {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		now := metav1.Date(2016, time.April, 1, 1, 0, 0, 0, time.UTC)
0000000000000000000000000000000000000000;;		mkpod := func(owner *api.ReplicationController, ready bool, readyTime metav1.Time) *api.Pod {
0000000000000000000000000000000000000000;;			count = count + 1
0000000000000000000000000000000000000000;;			labels := map[string]string{}
0000000000000000000000000000000000000000;;			for k, v := range owner.Spec.Selector {
0000000000000000000000000000000000000000;;				labels[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			status := api.ConditionTrue
0000000000000000000000000000000000000000;;			if !ready {
0000000000000000000000000000000000000000;;				status = api.ConditionFalse
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return &api.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;					Name:      fmt.Sprintf("pod-%d", count),
0000000000000000000000000000000000000000;;					Labels:    labels,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Status: api.PodStatus{
0000000000000000000000000000000000000000;;					Conditions: []api.PodCondition{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Type:               api.PodReady,
0000000000000000000000000000000000000000;;							Status:             status,
0000000000000000000000000000000000000000;;							LastTransitionTime: readyTime,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			oldRc *api.ReplicationController
0000000000000000000000000000000000000000;;			newRc *api.ReplicationController
0000000000000000000000000000000000000000;;			// expectated old/new ready counts
0000000000000000000000000000000000000000;;			oldReady int32
0000000000000000000000000000000000000000;;			newReady int32
0000000000000000000000000000000000000000;;			// pods owned by the rcs; indicate whether they're ready
0000000000000000000000000000000000000000;;			oldPods []bool
0000000000000000000000000000000000000000;;			newPods []bool
0000000000000000000000000000000000000000;;			// deletions - should be less then the size of the respective slice above
0000000000000000000000000000000000000000;;			// e.g. len(oldPods) > oldPodDeletions && len(newPods) > newPodDeletions
0000000000000000000000000000000000000000;;			oldPodDeletions int
0000000000000000000000000000000000000000;;			newPodDeletions int
0000000000000000000000000000000000000000;;			// specify additional time to wait for deployment to wait on top of the
0000000000000000000000000000000000000000;;			// pod ready time
0000000000000000000000000000000000000000;;			minReadySeconds int32
0000000000000000000000000000000000000000;;			podReadyTimeFn  func() metav1.Time
0000000000000000000000000000000000000000;;			nowFn           func() metav1.Time
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRc:    oldRc(4, 4),
0000000000000000000000000000000000000000;;				newRc:    newRc(4, 4),
0000000000000000000000000000000000000000;;				oldReady: 4,
0000000000000000000000000000000000000000;;				newReady: 2,
0000000000000000000000000000000000000000;;				oldPods: []bool{
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newPods: []bool{
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;					false,
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;					false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRc:    oldRc(4, 4),
0000000000000000000000000000000000000000;;				newRc:    newRc(4, 4),
0000000000000000000000000000000000000000;;				oldReady: 0,
0000000000000000000000000000000000000000;;				newReady: 1,
0000000000000000000000000000000000000000;;				oldPods: []bool{
0000000000000000000000000000000000000000;;					false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newPods: []bool{
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRc:    oldRc(4, 4),
0000000000000000000000000000000000000000;;				newRc:    newRc(4, 4),
0000000000000000000000000000000000000000;;				oldReady: 1,
0000000000000000000000000000000000000000;;				newReady: 0,
0000000000000000000000000000000000000000;;				oldPods: []bool{
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newPods: []bool{
0000000000000000000000000000000000000000;;					false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRc:    oldRc(4, 4),
0000000000000000000000000000000000000000;;				newRc:    newRc(4, 4),
0000000000000000000000000000000000000000;;				oldReady: 0,
0000000000000000000000000000000000000000;;				newReady: 0,
0000000000000000000000000000000000000000;;				oldPods: []bool{
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newPods: []bool{
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				minReadySeconds: 5,
0000000000000000000000000000000000000000;;				nowFn:           func() metav1.Time { return now },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRc:    oldRc(4, 4),
0000000000000000000000000000000000000000;;				newRc:    newRc(4, 4),
0000000000000000000000000000000000000000;;				oldReady: 1,
0000000000000000000000000000000000000000;;				newReady: 1,
0000000000000000000000000000000000000000;;				oldPods: []bool{
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				newPods: []bool{
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				minReadySeconds: 5,
0000000000000000000000000000000000000000;;				nowFn:           func() metav1.Time { return metav1.Time{Time: now.Add(time.Duration(6 * time.Second))} },
0000000000000000000000000000000000000000;;				podReadyTimeFn:  func() metav1.Time { return now },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				oldRc:    oldRc(4, 4),
0000000000000000000000000000000000000000;;				newRc:    newRc(4, 4),
0000000000000000000000000000000000000000;;				oldReady: 2,
0000000000000000000000000000000000000000;;				newReady: 0,
0000000000000000000000000000000000000000;;				oldPods: []bool{
0000000000000000000000000000000000000000;;					// All old pods are ready
0000000000000000000000000000000000000000;;					true, true, true, true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				// Two of them have been marked for deletion though
0000000000000000000000000000000000000000;;				oldPodDeletions: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("evaluating test %d", i)
0000000000000000000000000000000000000000;;			if test.nowFn == nil {
0000000000000000000000000000000000000000;;				test.nowFn = func() metav1.Time { return now }
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.podReadyTimeFn == nil {
0000000000000000000000000000000000000000;;				test.podReadyTimeFn = test.nowFn
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Populate the fake client with pods associated with their owners.
0000000000000000000000000000000000000000;;			pods := []runtime.Object{}
0000000000000000000000000000000000000000;;			for _, ready := range test.oldPods {
0000000000000000000000000000000000000000;;				pod := mkpod(test.oldRc, ready, test.podReadyTimeFn())
0000000000000000000000000000000000000000;;				if test.oldPodDeletions > 0 {
0000000000000000000000000000000000000000;;					now := metav1.Now()
0000000000000000000000000000000000000000;;					pod.DeletionTimestamp = &now
0000000000000000000000000000000000000000;;					test.oldPodDeletions--
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pods = append(pods, pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, ready := range test.newPods {
0000000000000000000000000000000000000000;;				pod := mkpod(test.newRc, ready, test.podReadyTimeFn())
0000000000000000000000000000000000000000;;				if test.newPodDeletions > 0 {
0000000000000000000000000000000000000000;;					now := metav1.Now()
0000000000000000000000000000000000000000;;					pod.DeletionTimestamp = &now
0000000000000000000000000000000000000000;;					test.newPodDeletions--
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pods = append(pods, pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			client := fake.NewSimpleClientset(pods...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			updater := &RollingUpdater{
0000000000000000000000000000000000000000;;				ns:        "default",
0000000000000000000000000000000000000000;;				rcClient:  client.Core(),
0000000000000000000000000000000000000000;;				podClient: client.Core(),
0000000000000000000000000000000000000000;;				nowFn:     test.nowFn,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			oldReady, newReady, err := updater.readyPods(test.oldRc, test.newRc, test.minReadySeconds)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := test.oldReady, oldReady; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected old ready %d, got %d", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := test.newReady, newReady; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected new ready %d, got %d", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
