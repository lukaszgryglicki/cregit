0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
190eee7359b576ce001a5fff90122a19e77f8834;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceQuotaGeneratorV1 supports stable generation of a resource quota
0000000000000000000000000000000000000000;;	type ResourceQuotaGeneratorV1 struct {
0000000000000000000000000000000000000000;;		// The name of a quota object.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hard resource limit string before parsing.
0000000000000000000000000000000000000000;;		Hard string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The scopes of a quota object before parsing.
0000000000000000000000000000000000000000;;		Scopes string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParamNames returns the set of supported input parameters when using the parameter injection generator pattern
0000000000000000000000000000000000000000;;	func (g ResourceQuotaGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"hard", true},
0000000000000000000000000000000000000000;;			{"scopes", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameter injection
0000000000000000000000000000000000000000;;	var _ Generator = &ResourceQuotaGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameters specified during construction
0000000000000000000000000000000000000000;;	var _ StructuredGenerator = &ResourceQuotaGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g ResourceQuotaGeneratorV1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(g.ParamNames(), genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params := map[string]string{}
0000000000000000000000000000000000000000;;		for key, value := range genericParams {
0000000000000000000000000000000000000000;;			strVal, isString := value.(string)
0000000000000000000000000000000000000000;;			if !isString {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected string, saw %v for '%s'", value, key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			params[key] = strVal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delegate := &ResourceQuotaGeneratorV1{}
0000000000000000000000000000000000000000;;		delegate.Name = params["name"]
0000000000000000000000000000000000000000;;		delegate.Hard = params["hard"]
0000000000000000000000000000000000000000;;		delegate.Scopes = params["scopes"]
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StructuredGenerate outputs a ResourceQuota object using the configured fields
0000000000000000000000000000000000000000;;	func (g *ResourceQuotaGeneratorV1) StructuredGenerate() (runtime.Object, error) {
0000000000000000000000000000000000000000;;		if err := g.validate(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceList, err := populateResourceList(g.Hard)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scopes, err := parseScopes(g.Scopes)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceQuota := &api.ResourceQuota{}
0000000000000000000000000000000000000000;;		resourceQuota.Name = g.Name
0000000000000000000000000000000000000000;;		resourceQuota.Spec.Hard = resourceList
0000000000000000000000000000000000000000;;		resourceQuota.Spec.Scopes = scopes
0000000000000000000000000000000000000000;;		return resourceQuota, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validate validates required fields are set to support structured generation
0000000000000000000000000000000000000000;;	func (r *ResourceQuotaGeneratorV1) validate() error {
0000000000000000000000000000000000000000;;		if len(r.Name) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("name must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseScopes(spec string) ([]api.ResourceQuotaScope, error) {
0000000000000000000000000000000000000000;;		// empty input gets a nil response to preserve generator test expected behaviors
0000000000000000000000000000000000000000;;		if spec == "" {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scopes := strings.Split(spec, ",")
0000000000000000000000000000000000000000;;		result := make([]api.ResourceQuotaScope, 0, len(scopes))
0000000000000000000000000000000000000000;;		for _, scope := range scopes {
0000000000000000000000000000000000000000;;			// intentionally do not verify the scope against the valid scope list. This is done by the apiserver anyway.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if scope == "" {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid resource quota scope \"\"")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result = append(result, api.ResourceQuotaScope(scope))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
