0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9da054200828f1b91f2249d5499a52c071916e83;pkg/kubectl/resize_test.go[pkg/kubectl/resize_test.go][pkg/kubectl/scale_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kerrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		testcore "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/batch"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/extensions"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		batchclient "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/batch/internalversion"
0000000000000000000000000000000000000000;;		coreclient "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/core/internalversion"
0000000000000000000000000000000000000000;;		extensionsclient "k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset/typed/extensions/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ErrorReplicationControllers struct {
0000000000000000000000000000000000000000;;		coreclient.ReplicationControllerInterface
0000000000000000000000000000000000000000;;		conflict bool
0000000000000000000000000000000000000000;;		invalid  bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ErrorReplicationControllers) Update(controller *api.ReplicationController) (*api.ReplicationController, error) {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case c.invalid:
0000000000000000000000000000000000000000;;			return nil, kerrors.NewInvalid(api.Kind(controller.Kind), controller.Name, nil)
0000000000000000000000000000000000000000;;		case c.conflict:
0000000000000000000000000000000000000000;;			return nil, kerrors.NewConflict(api.Resource(controller.Kind), controller.Name, nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.New("Replication controller update failure")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ErrorReplicationControllerClient struct {
0000000000000000000000000000000000000000;;		*fake.Clientset
0000000000000000000000000000000000000000;;		conflict bool
0000000000000000000000000000000000000000;;		invalid  bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ErrorReplicationControllerClient) ReplicationControllers(namespace string) coreclient.ReplicationControllerInterface {
0000000000000000000000000000000000000000;;		return &ErrorReplicationControllers{
0000000000000000000000000000000000000000;;			ReplicationControllerInterface: c.Clientset.Core().ReplicationControllers(namespace),
0000000000000000000000000000000000000000;;			conflict:                       c.conflict,
0000000000000000000000000000000000000000;;			invalid:                        c.invalid,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplicationControllerScaleRetry(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := &ErrorReplicationControllerClient{Clientset: fake.NewSimpleClientset(oldRc(0, 0)), conflict: true}
0000000000000000000000000000000000000000;;		scaler := ReplicationControllerScaler{fake}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo-v1"
0000000000000000000000000000000000000000;;		namespace := metav1.NamespaceDefault
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scaleFunc := ScaleCondition(&scaler, &preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err := scaleFunc()
0000000000000000000000000000000000000000;;		if pass {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an update failure to return pass = false, got pass = %v", pass)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Did not expect an error on update conflict failure, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		preconditions = ScalePrecondition{3, ""}
0000000000000000000000000000000000000000;;		scaleFunc = ScaleCondition(&scaler, &preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err = scaleFunc()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error on precondition failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplicationControllerScaleInvalid(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := &ErrorReplicationControllerClient{Clientset: fake.NewSimpleClientset(oldRc(0, 0)), invalid: true}
0000000000000000000000000000000000000000;;		scaler := ReplicationControllerScaler{fake}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo-v1"
0000000000000000000000000000000000000000;;		namespace := "default"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scaleFunc := ScaleCondition(&scaler, &preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err := scaleFunc()
0000000000000000000000000000000000000000;;		if pass {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an update failure to return pass = false, got pass = %v", pass)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e, ok := err.(ScaleError)
0000000000000000000000000000000000000000;;		if err == nil || !ok || e.FailureType != ScaleUpdateFailure {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error on invalid update failure, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplicationControllerScale(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(oldRc(0, 0))
0000000000000000000000000000000000000000;;		scaler := ReplicationControllerScaler{fake.Core()}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo-v1"
0000000000000000000000000000000000000000;;		scaler.Scale("default", name, count, &preconditions, nil, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actions := fake.Actions()
0000000000000000000000000000000000000000;;		if len(actions) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected actions: %v, expected 2 actions (get, update)", actions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[0].(testcore.GetAction); !ok || action.GetResource().GroupResource() != api.Resource("replicationcontrollers") || action.GetName() != name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action: %v, expected get-replicationController %s", actions[0], name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[1].(testcore.UpdateAction); !ok || action.GetResource().GroupResource() != api.Resource("replicationcontrollers") || action.GetObject().(*api.ReplicationController).Spec.Replicas != int32(count) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action %v, expected update-replicationController with replicas = %d", actions[1], count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplicationControllerScaleFailsPreconditions(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&api.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: metav1.NamespaceDefault, Name: "foo"},
0000000000000000000000000000000000000000;;			Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: 10,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		scaler := ReplicationControllerScaler{fake.Core()}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{2, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		scaler.Scale("default", name, count, &preconditions, nil, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actions := fake.Actions()
0000000000000000000000000000000000000000;;		if len(actions) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected actions: %v, expected 1 action (get)", actions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[0].(testcore.GetAction); !ok || action.GetResource().GroupResource() != api.Resource("replicationcontrollers") || action.GetName() != name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action: %v, expected get-replicationController %s", actions[0], name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateReplicationController(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			preconditions ScalePrecondition
0000000000000000000000000000000000000000;;			controller    api.ReplicationController
0000000000000000000000000000000000000000;;			expectError   bool
0000000000000000000000000000000000000000;;			test          string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, ""},
0000000000000000000000000000000000000000;;				expectError:   false,
0000000000000000000000000000000000000000;;				test:          "defaults",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, ""},
0000000000000000000000000000000000000000;;				controller: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 10,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "defaults 2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{0, ""},
0000000000000000000000000000000000000000;;				controller: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 0,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "size matches",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, "foo"},
0000000000000000000000000000000000000000;;				controller: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 10,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "resource version matches",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				controller: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 10,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "both match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				controller: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 20,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "size different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				controller: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 10,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "version different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				controller: api.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: 20,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "both different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := test.preconditions.ValidateReplicationController(&test.controller)
0000000000000000000000000000000000000000;;			if err != nil && !test.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v (%s)", err, test.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && test.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected non-error: %v (%s)", err, test.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ErrorJobs struct {
0000000000000000000000000000000000000000;;		batchclient.JobInterface
0000000000000000000000000000000000000000;;		conflict bool
0000000000000000000000000000000000000000;;		invalid  bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ErrorJobs) Update(job *batch.Job) (*batch.Job, error) {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case c.invalid:
0000000000000000000000000000000000000000;;			return nil, kerrors.NewInvalid(api.Kind(job.Kind), job.Name, nil)
0000000000000000000000000000000000000000;;		case c.conflict:
0000000000000000000000000000000000000000;;			return nil, kerrors.NewConflict(api.Resource(job.Kind), job.Name, nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.New("Job update failure")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ErrorJobs) Get(name string, options metav1.GetOptions) (*batch.Job, error) {
0000000000000000000000000000000000000000;;		zero := int32(0)
0000000000000000000000000000000000000000;;		return &batch.Job{
0000000000000000000000000000000000000000;;			Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;				Parallelism: &zero,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ErrorJobClient struct {
0000000000000000000000000000000000000000;;		batchclient.JobsGetter
0000000000000000000000000000000000000000;;		conflict bool
0000000000000000000000000000000000000000;;		invalid  bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ErrorJobClient) Jobs(namespace string) batchclient.JobInterface {
0000000000000000000000000000000000000000;;		return &ErrorJobs{
0000000000000000000000000000000000000000;;			JobInterface: c.JobsGetter.Jobs(namespace),
0000000000000000000000000000000000000000;;			conflict:     c.conflict,
0000000000000000000000000000000000000000;;			invalid:      c.invalid,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJobScaleRetry(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := &ErrorJobClient{JobsGetter: fake.NewSimpleClientset().Batch(), conflict: true}
0000000000000000000000000000000000000000;;		scaler := JobScaler{fake}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		namespace := "default"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scaleFunc := ScaleCondition(&scaler, &preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err := scaleFunc()
0000000000000000000000000000000000000000;;		if pass != false {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an update failure to return pass = false, got pass = %v", pass)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Did not expect an error on update failure, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		preconditions = ScalePrecondition{3, ""}
0000000000000000000000000000000000000000;;		scaleFunc = ScaleCondition(&scaler, &preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err = scaleFunc()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error on precondition failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func job() *batch.Job {
0000000000000000000000000000000000000000;;		return &batch.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJobScale(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeClientset := fake.NewSimpleClientset(job())
0000000000000000000000000000000000000000;;		scaler := JobScaler{fakeClientset.Batch()}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		scaler.Scale("default", name, count, &preconditions, nil, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actions := fakeClientset.Actions()
0000000000000000000000000000000000000000;;		if len(actions) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected actions: %v, expected 2 actions (get, update)", actions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[0].(testcore.GetAction); !ok || action.GetResource().GroupResource() != batch.Resource("jobs") || action.GetName() != name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action: %v, expected get-replicationController %s", actions[0], name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[1].(testcore.UpdateAction); !ok || action.GetResource().GroupResource() != batch.Resource("jobs") || *action.GetObject().(*batch.Job).Spec.Parallelism != int32(count) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action %v, expected update-job with parallelism = %d", actions[1], count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJobScaleInvalid(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := &ErrorJobClient{JobsGetter: fake.NewSimpleClientset().Batch(), invalid: true}
0000000000000000000000000000000000000000;;		scaler := JobScaler{fake}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		namespace := "default"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scaleFunc := ScaleCondition(&scaler, &preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err := scaleFunc()
0000000000000000000000000000000000000000;;		if pass {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an update failure to return pass = false, got pass = %v", pass)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e, ok := err.(ScaleError)
0000000000000000000000000000000000000000;;		if err == nil || !ok || e.FailureType != ScaleUpdateFailure {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error on invalid update failure, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJobScaleFailsPreconditions(t *testing.T) {
0000000000000000000000000000000000000000;;		ten := int32(10)
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&batch.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;				Parallelism: &ten,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		scaler := JobScaler{fake.Batch()}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{2, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		scaler.Scale("default", name, count, &preconditions, nil, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actions := fake.Actions()
0000000000000000000000000000000000000000;;		if len(actions) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected actions: %v, expected 1 actions (get)", actions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[0].(testcore.GetAction); !ok || action.GetResource().GroupResource() != batch.Resource("jobs") || action.GetName() != name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action: %v, expected get-job %s", actions[0], name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateJob(t *testing.T) {
0000000000000000000000000000000000000000;;		zero, ten, twenty := int32(0), int32(10), int32(20)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			preconditions ScalePrecondition
0000000000000000000000000000000000000000;;			job           batch.Job
0000000000000000000000000000000000000000;;			expectError   bool
0000000000000000000000000000000000000000;;			test          string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, ""},
0000000000000000000000000000000000000000;;				expectError:   false,
0000000000000000000000000000000000000000;;				test:          "defaults",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, ""},
0000000000000000000000000000000000000000;;				job: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: &ten,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "defaults 2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{0, ""},
0000000000000000000000000000000000000000;;				job: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: &zero,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "size matches",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, "foo"},
0000000000000000000000000000000000000000;;				job: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: &ten,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "resource version matches",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				job: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: &ten,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "both match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				job: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: &twenty,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "size different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				job: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "parallelism nil",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				job: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: &ten,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "version different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				job: batch.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batch.JobSpec{
0000000000000000000000000000000000000000;;						Parallelism: &twenty,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "both different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := test.preconditions.ValidateJob(&test.job)
0000000000000000000000000000000000000000;;			if err != nil && !test.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v (%s)", err, test.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && test.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected non-error: %v (%s)", err, test.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ErrorDeployments struct {
0000000000000000000000000000000000000000;;		extensionsclient.DeploymentInterface
0000000000000000000000000000000000000000;;		conflict bool
0000000000000000000000000000000000000000;;		invalid  bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ErrorDeployments) Update(deployment *extensions.Deployment) (*extensions.Deployment, error) {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case c.invalid:
0000000000000000000000000000000000000000;;			return nil, kerrors.NewInvalid(api.Kind(deployment.Kind), deployment.Name, nil)
0000000000000000000000000000000000000000;;		case c.conflict:
0000000000000000000000000000000000000000;;			return nil, kerrors.NewConflict(api.Resource(deployment.Kind), deployment.Name, nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.New("deployment update failure")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ErrorDeployments) Get(name string, options metav1.GetOptions) (*extensions.Deployment, error) {
0000000000000000000000000000000000000000;;		return &extensions.Deployment{
0000000000000000000000000000000000000000;;			Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ErrorDeploymentClient struct {
0000000000000000000000000000000000000000;;		extensionsclient.DeploymentsGetter
0000000000000000000000000000000000000000;;		conflict bool
0000000000000000000000000000000000000000;;		invalid  bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ErrorDeploymentClient) Deployments(namespace string) extensionsclient.DeploymentInterface {
0000000000000000000000000000000000000000;;		return &ErrorDeployments{
0000000000000000000000000000000000000000;;			DeploymentInterface: c.DeploymentsGetter.Deployments(namespace),
0000000000000000000000000000000000000000;;			invalid:             c.invalid,
0000000000000000000000000000000000000000;;			conflict:            c.conflict,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentScaleRetry(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := &ErrorDeploymentClient{DeploymentsGetter: fake.NewSimpleClientset().Extensions(), conflict: true}
0000000000000000000000000000000000000000;;		scaler := &DeploymentScaler{fake}
0000000000000000000000000000000000000000;;		preconditions := &ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		namespace := "default"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scaleFunc := ScaleCondition(scaler, preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err := scaleFunc()
0000000000000000000000000000000000000000;;		if pass != false {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an update failure to return pass = false, got pass = %v", pass)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Did not expect an error on update failure, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		preconditions = &ScalePrecondition{3, ""}
0000000000000000000000000000000000000000;;		scaleFunc = ScaleCondition(scaler, preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err = scaleFunc()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error on precondition failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func deployment() *extensions.Deployment {
0000000000000000000000000000000000000000;;		return &extensions.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentScale(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(deployment())
0000000000000000000000000000000000000000;;		scaler := DeploymentScaler{fake.Extensions()}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		scaler.Scale("default", name, count, &preconditions, nil, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actions := fake.Actions()
0000000000000000000000000000000000000000;;		if len(actions) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected actions: %v, expected 2 actions (get, update)", actions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[0].(testcore.GetAction); !ok || action.GetResource().GroupResource() != extensions.Resource("deployments") || action.GetName() != name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action: %v, expected get-replicationController %s", actions[0], name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[1].(testcore.UpdateAction); !ok || action.GetResource().GroupResource() != extensions.Resource("deployments") || action.GetObject().(*extensions.Deployment).Spec.Replicas != int32(count) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action %v, expected update-deployment with replicas = %d", actions[1], count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentScaleInvalid(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := &ErrorDeploymentClient{DeploymentsGetter: fake.NewSimpleClientset().Extensions(), invalid: true}
0000000000000000000000000000000000000000;;		scaler := DeploymentScaler{fake}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{-1, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		namespace := "default"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scaleFunc := ScaleCondition(&scaler, &preconditions, namespace, name, count, nil)
0000000000000000000000000000000000000000;;		pass, err := scaleFunc()
0000000000000000000000000000000000000000;;		if pass {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an update failure to return pass = false, got pass = %v", pass)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e, ok := err.(ScaleError)
0000000000000000000000000000000000000000;;		if err == nil || !ok || e.FailureType != ScaleUpdateFailure {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error on invalid update failure, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeploymentScaleFailsPreconditions(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := fake.NewSimpleClientset(&extensions.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace: metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;				Name:      "foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: 10,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		scaler := DeploymentScaler{fake.Extensions()}
0000000000000000000000000000000000000000;;		preconditions := ScalePrecondition{2, ""}
0000000000000000000000000000000000000000;;		count := uint(3)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		scaler.Scale("default", name, count, &preconditions, nil, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actions := fake.Actions()
0000000000000000000000000000000000000000;;		if len(actions) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected actions: %v, expected 1 actions (get)", actions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if action, ok := actions[0].(testcore.GetAction); !ok || action.GetResource().GroupResource() != extensions.Resource("deployments") || action.GetName() != name {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected action: %v, expected get-deployment %s", actions[0], name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		zero, ten, twenty := int32(0), int32(10), int32(20)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			preconditions ScalePrecondition
0000000000000000000000000000000000000000;;			deployment    extensions.Deployment
0000000000000000000000000000000000000000;;			expectError   bool
0000000000000000000000000000000000000000;;			test          string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, ""},
0000000000000000000000000000000000000000;;				expectError:   false,
0000000000000000000000000000000000000000;;				test:          "defaults",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, ""},
0000000000000000000000000000000000000000;;				deployment: extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: ten,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "defaults 2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{0, ""},
0000000000000000000000000000000000000000;;				deployment: extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: zero,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "size matches",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{-1, "foo"},
0000000000000000000000000000000000000000;;				deployment: extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: ten,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "resource version matches",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				deployment: extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: ten,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				test:        "both match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				deployment: extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: twenty,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "size different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				deployment: extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "no replicas",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				deployment: extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: ten,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "version different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				preconditions: ScalePrecondition{10, "foo"},
0000000000000000000000000000000000000000;;				deployment: extensions.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						ResourceVersion: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensions.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: twenty,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				test:        "both different",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := test.preconditions.ValidateDeployment(&test.deployment)
0000000000000000000000000000000000000000;;			if err != nil && !test.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v (%s)", err, test.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && test.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected non-error: %v (%s)", err, test.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
