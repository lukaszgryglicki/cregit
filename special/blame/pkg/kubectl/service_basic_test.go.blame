0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ff550bb0a95d44aa707dba31ea71b37001da9f5f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServiceBasicGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			serviceType api.ServiceType
0000000000000000000000000000000000000000;;			tcp         []string
0000000000000000000000000000000000000000;;			clusterip   string
0000000000000000000000000000000000000000;;			expected    *api.Service
0000000000000000000000000000000000000000;;			expectErr   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "clusterip-ok",
0000000000000000000000000000000000000000;;				tcp:         []string{"456", "321:908"},
0000000000000000000000000000000000000000;;				clusterip:   "",
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				expected: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "clusterip-ok",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"app": "clusterip-ok"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{Type: "ClusterIP",
0000000000000000000000000000000000000000;;						Ports: []api.ServicePort{{Name: "456", Protocol: "TCP", Port: 456, TargetPort: intstr.IntOrString{Type: 0, IntVal: 456, StrVal: ""}, NodePort: 0},
0000000000000000000000000000000000000000;;							{Name: "321-908", Protocol: "TCP", Port: 321, TargetPort: intstr.IntOrString{Type: 0, IntVal: 908, StrVal: ""}, NodePort: 0}},
0000000000000000000000000000000000000000;;						Selector:  map[string]string{"app": "clusterip-ok"},
0000000000000000000000000000000000000000;;						ClusterIP: "", ExternalIPs: []string(nil), LoadBalancerIP: ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "clusterip-missing",
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				expectErr:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "clusterip-none-wrong-type",
0000000000000000000000000000000000000000;;				tcp:         []string{},
0000000000000000000000000000000000000000;;				clusterip:   "None",
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;				expectErr:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "clusterip-none-ok",
0000000000000000000000000000000000000000;;				tcp:         []string{},
0000000000000000000000000000000000000000;;				clusterip:   "None",
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				expected: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "clusterip-none-ok",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"app": "clusterip-none-ok"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{Type: "ClusterIP",
0000000000000000000000000000000000000000;;						Ports:     []api.ServicePort{},
0000000000000000000000000000000000000000;;						Selector:  map[string]string{"app": "clusterip-none-ok"},
0000000000000000000000000000000000000000;;						ClusterIP: "None", ExternalIPs: []string(nil), LoadBalancerIP: ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "clusterip-none-and-port-mapping",
0000000000000000000000000000000000000000;;				tcp:         []string{"456:9898"},
0000000000000000000000000000000000000000;;				clusterip:   "None",
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;				expected: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "clusterip-none-and-port-mapping",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"app": "clusterip-none-and-port-mapping"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{Type: "ClusterIP",
0000000000000000000000000000000000000000;;						Ports:     []api.ServicePort{{Name: "456-9898", Protocol: "TCP", Port: 456, TargetPort: intstr.IntOrString{Type: 0, IntVal: 9898, StrVal: ""}, NodePort: 0}},
0000000000000000000000000000000000000000;;						Selector:  map[string]string{"app": "clusterip-none-and-port-mapping"},
0000000000000000000000000000000000000000;;						ClusterIP: "None", ExternalIPs: []string(nil), LoadBalancerIP: ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "loadbalancer-ok",
0000000000000000000000000000000000000000;;				tcp:         []string{"456:9898"},
0000000000000000000000000000000000000000;;				clusterip:   "",
0000000000000000000000000000000000000000;;				serviceType: api.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;				expected: &api.Service{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "loadbalancer-ok",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"app": "loadbalancer-ok"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: api.ServiceSpec{Type: "LoadBalancer",
0000000000000000000000000000000000000000;;						Ports:     []api.ServicePort{{Name: "456-9898", Protocol: "TCP", Port: 456, TargetPort: intstr.IntOrString{Type: 0, IntVal: 9898, StrVal: ""}, NodePort: 0}},
0000000000000000000000000000000000000000;;						Selector:  map[string]string{"app": "loadbalancer-ok"},
0000000000000000000000000000000000000000;;						ClusterIP: "", ExternalIPs: []string(nil), LoadBalancerIP: ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			generator := ServiceCommonGeneratorV1{
0000000000000000000000000000000000000000;;				Name:      test.name,
0000000000000000000000000000000000000000;;				TCP:       test.tcp,
0000000000000000000000000000000000000000;;				Type:      test.serviceType,
0000000000000000000000000000000000000000;;				ClusterIP: test.clusterip,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			obj, err := generator.StructuredGenerate()
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*api.Service), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("test: %v\nexpected:\n%#v\nsaw:\n%#v", test.name, test.expected, obj.(*api.Service))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
