0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ff550bb0a95d44aa707dba31ea71b37001da9f5f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceCommonGeneratorV1 struct {
0000000000000000000000000000000000000000;;		Name         string
0000000000000000000000000000000000000000;;		TCP          []string
0000000000000000000000000000000000000000;;		Type         api.ServiceType
0000000000000000000000000000000000000000;;		ClusterIP    string
0000000000000000000000000000000000000000;;		NodePort     int
0000000000000000000000000000000000000000;;		ExternalName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceClusterIPGeneratorV1 struct {
0000000000000000000000000000000000000000;;		ServiceCommonGeneratorV1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceNodePortGeneratorV1 struct {
0000000000000000000000000000000000000000;;		ServiceCommonGeneratorV1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLoadBalancerGeneratorV1 struct {
0000000000000000000000000000000000000000;;		ServiceCommonGeneratorV1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: is this really necessary?
0000000000000000000000000000000000000000;;	type ServiceExternalNameGeneratorV1 struct {
0000000000000000000000000000000000000000;;		ServiceCommonGeneratorV1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ServiceClusterIPGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"tcp", true},
0000000000000000000000000000000000000000;;			{"clusterip", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (ServiceNodePortGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"tcp", true},
0000000000000000000000000000000000000000;;			{"nodeport", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (ServiceLoadBalancerGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"tcp", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ServiceExternalNameGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"externalname", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parsePorts(portString string) (int32, intstr.IntOrString, error) {
0000000000000000000000000000000000000000;;		portStringSlice := strings.Split(portString, ":")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		port, err := strconv.Atoi(portStringSlice[0])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, intstr.FromInt(0), err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(portStringSlice) == 1 {
0000000000000000000000000000000000000000;;			return int32(port), intstr.FromInt(int(port)), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var targetPort intstr.IntOrString
0000000000000000000000000000000000000000;;		if portNum, err := strconv.Atoi(portStringSlice[1]); err != nil {
0000000000000000000000000000000000000000;;			targetPort = intstr.FromString(portStringSlice[1])
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			targetPort = intstr.FromInt(portNum)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int32(port), targetPort, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ServiceCommonGeneratorV1) GenerateCommon(params map[string]interface{}) error {
0000000000000000000000000000000000000000;;		name, isString := params["name"].(string)
0000000000000000000000000000000000000000;;		if !isString {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected string, saw %v for 'name'", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tcpStrings, isArray := params["tcp"].([]string)
0000000000000000000000000000000000000000;;		if !isArray {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected []string, found :%v", tcpStrings)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clusterip, isString := params["clusterip"].(string)
0000000000000000000000000000000000000000;;		if !isString {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected string, saw %v for 'clusterip'", clusterip)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		externalname, isString := params["externalname"].(string)
0000000000000000000000000000000000000000;;		if !isString {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected string, saw %v for 'externalname'", externalname)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Name = name
0000000000000000000000000000000000000000;;		s.TCP = tcpStrings
0000000000000000000000000000000000000000;;		s.ClusterIP = clusterip
0000000000000000000000000000000000000000;;		s.ExternalName = externalname
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ServiceLoadBalancerGeneratorV1) Generate(params map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(s.ParamNames(), params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate := &ServiceCommonGeneratorV1{Type: api.ServiceTypeLoadBalancer, ClusterIP: ""}
0000000000000000000000000000000000000000;;		err = delegate.GenerateCommon(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ServiceNodePortGeneratorV1) Generate(params map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(s.ParamNames(), params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate := &ServiceCommonGeneratorV1{Type: api.ServiceTypeNodePort, ClusterIP: ""}
0000000000000000000000000000000000000000;;		err = delegate.GenerateCommon(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ServiceClusterIPGeneratorV1) Generate(params map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(s.ParamNames(), params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate := &ServiceCommonGeneratorV1{Type: api.ServiceTypeClusterIP, ClusterIP: ""}
0000000000000000000000000000000000000000;;		err = delegate.GenerateCommon(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ServiceExternalNameGeneratorV1) Generate(params map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(s.ParamNames(), params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate := &ServiceCommonGeneratorV1{Type: api.ServiceTypeExternalName, ClusterIP: ""}
0000000000000000000000000000000000000000;;		err = delegate.GenerateCommon(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validate validates required fields are set to support structured generation
0000000000000000000000000000000000000000;;	// TODO(xiangpengzhao): validate ports are identity mapped for headless service when we enforce that in validation.validateServicePort.
0000000000000000000000000000000000000000;;	func (s ServiceCommonGeneratorV1) validate() error {
0000000000000000000000000000000000000000;;		if len(s.Name) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("name must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.Type) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("type must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ClusterIP == api.ClusterIPNone && s.Type != api.ServiceTypeClusterIP {
0000000000000000000000000000000000000000;;			return fmt.Errorf("ClusterIP=None can only be used with ClusterIP service type")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ClusterIP != api.ClusterIPNone && len(s.TCP) == 0 && s.Type != api.ServiceTypeExternalName {
0000000000000000000000000000000000000000;;			return fmt.Errorf("at least one tcp port specifier must be provided")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Type == api.ServiceTypeExternalName {
0000000000000000000000000000000000000000;;			if errs := validation.IsDNS1123Subdomain(s.ExternalName); len(errs) != 0 {
0000000000000000000000000000000000000000;;				return fmt.Errorf("invalid service external name %s", s.ExternalName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ServiceCommonGeneratorV1) StructuredGenerate() (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := s.validate()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ports := []api.ServicePort{}
0000000000000000000000000000000000000000;;		for _, tcpString := range s.TCP {
0000000000000000000000000000000000000000;;			port, targetPort, err := parsePorts(tcpString)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			portName := strings.Replace(tcpString, ":", "-", -1)
0000000000000000000000000000000000000000;;			ports = append(ports, api.ServicePort{
0000000000000000000000000000000000000000;;				Name:       portName,
0000000000000000000000000000000000000000;;				Port:       port,
0000000000000000000000000000000000000000;;				TargetPort: targetPort,
0000000000000000000000000000000000000000;;				Protocol:   api.Protocol("TCP"),
0000000000000000000000000000000000000000;;				NodePort:   int32(s.NodePort),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// setup default label and selector
0000000000000000000000000000000000000000;;		labels := map[string]string{}
0000000000000000000000000000000000000000;;		labels["app"] = s.Name
0000000000000000000000000000000000000000;;		selector := map[string]string{}
0000000000000000000000000000000000000000;;		selector["app"] = s.Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		service := api.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   s.Name,
0000000000000000000000000000000000000000;;				Labels: labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: api.ServiceSpec{
0000000000000000000000000000000000000000;;				Type:         api.ServiceType(s.Type),
0000000000000000000000000000000000000000;;				Selector:     selector,
0000000000000000000000000000000000000000;;				Ports:        ports,
0000000000000000000000000000000000000000;;				ExternalName: s.ExternalName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.ClusterIP) > 0 {
0000000000000000000000000000000000000000;;			service.Spec.ClusterIP = s.ClusterIP
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &service, nil
0000000000000000000000000000000000000000;;	}
