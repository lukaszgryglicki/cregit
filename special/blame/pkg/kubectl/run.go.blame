0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
13437107ffbfc37519a51223e14b0b2364aa0237;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		appsv1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		batchv2alpha1 "k8s.io/api/batch/v2alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeploymentV1Beta1 struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentV1Beta1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"labels", false},
0000000000000000000000000000000000000000;;			{"default-name", false},
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"replicas", true},
0000000000000000000000000000000000000000;;			{"image", true},
0000000000000000000000000000000000000000;;			{"image-pull-policy", false},
0000000000000000000000000000000000000000;;			{"port", false},
0000000000000000000000000000000000000000;;			{"hostport", false},
0000000000000000000000000000000000000000;;			{"stdin", false},
0000000000000000000000000000000000000000;;			{"tty", false},
0000000000000000000000000000000000000000;;			{"command", false},
0000000000000000000000000000000000000000;;			{"args", false},
0000000000000000000000000000000000000000;;			{"env", false},
0000000000000000000000000000000000000000;;			{"requests", false},
0000000000000000000000000000000000000000;;			{"limits", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentV1Beta1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		args, err := getArgs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		envs, err := getEnvs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params, err := getParams(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, err := getName(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels, err := getLabels(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		count, err := strconv.Atoi(params["replicas"])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podSpec, err := makePodSpec(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		imagePullPolicy := v1.PullPolicy(params["image-pull-policy"])
0000000000000000000000000000000000000000;;		if err = updatePodContainers(params, args, envs, imagePullPolicy, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := updatePodPorts(params, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: use versioned types for generators so that we don't need to
0000000000000000000000000000000000000000;;		// set default values manually (see issue #17384)
0000000000000000000000000000000000000000;;		count32 := int32(count)
0000000000000000000000000000000000000000;;		deployment := extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   name,
0000000000000000000000000000000000000000;;				Labels: labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: &count32,
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: labels},
0000000000000000000000000000000000000000;;				Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: labels,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: *podSpec,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &deployment, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeploymentAppsV1Beta1 struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentAppsV1Beta1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"labels", false},
0000000000000000000000000000000000000000;;			{"default-name", false},
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"replicas", true},
0000000000000000000000000000000000000000;;			{"image", true},
0000000000000000000000000000000000000000;;			{"image-pull-policy", false},
0000000000000000000000000000000000000000;;			{"port", false},
0000000000000000000000000000000000000000;;			{"hostport", false},
0000000000000000000000000000000000000000;;			{"stdin", false},
0000000000000000000000000000000000000000;;			{"tty", false},
0000000000000000000000000000000000000000;;			{"command", false},
0000000000000000000000000000000000000000;;			{"args", false},
0000000000000000000000000000000000000000;;			{"env", false},
0000000000000000000000000000000000000000;;			{"requests", false},
0000000000000000000000000000000000000000;;			{"limits", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentAppsV1Beta1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		args, err := getArgs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		envs, err := getEnvs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params, err := getParams(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, err := getName(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels, err := getLabels(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		count, err := strconv.Atoi(params["replicas"])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podSpec, err := makePodSpec(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		imagePullPolicy := v1.PullPolicy(params["image-pull-policy"])
0000000000000000000000000000000000000000;;		if err = updatePodContainers(params, args, envs, imagePullPolicy, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := updatePodPorts(params, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		count32 := int32(count)
0000000000000000000000000000000000000000;;		deployment := appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   name,
0000000000000000000000000000000000000000;;				Labels: labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;				Replicas: &count32,
0000000000000000000000000000000000000000;;				Selector: &metav1.LabelSelector{MatchLabels: labels},
0000000000000000000000000000000000000000;;				Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: labels,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: *podSpec,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &deployment, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getLabels returns map of labels.
0000000000000000000000000000000000000000;;	func getLabels(params map[string]string, name string) (map[string]string, error) {
0000000000000000000000000000000000000000;;		labelString, found := params["labels"]
0000000000000000000000000000000000000000;;		var labels map[string]string
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if found && len(labelString) > 0 {
0000000000000000000000000000000000000000;;			labels, err = ParseLabels(labelString)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			labels = map[string]string{
0000000000000000000000000000000000000000;;				"run": name,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labels, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getName returns the name of newly created resource.
0000000000000000000000000000000000000000;;	func getName(params map[string]string) (string, error) {
0000000000000000000000000000000000000000;;		name, found := params["name"]
0000000000000000000000000000000000000000;;		if !found || len(name) == 0 {
0000000000000000000000000000000000000000;;			name, found = params["default-name"]
0000000000000000000000000000000000000000;;			if !found || len(name) == 0 {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("'name' is a required parameter.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return name, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getParams returns map of generic parameters.
0000000000000000000000000000000000000000;;	func getParams(genericParams map[string]interface{}) (map[string]string, error) {
0000000000000000000000000000000000000000;;		params := map[string]string{}
0000000000000000000000000000000000000000;;		for key, value := range genericParams {
0000000000000000000000000000000000000000;;			strVal, isString := value.(string)
0000000000000000000000000000000000000000;;			if !isString {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected string, saw %v for '%s'", value, key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			params[key] = strVal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return params, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getArgs returns arguments for the container command.
0000000000000000000000000000000000000000;;	func getArgs(genericParams map[string]interface{}) ([]string, error) {
0000000000000000000000000000000000000000;;		args := []string{}
0000000000000000000000000000000000000000;;		val, found := genericParams["args"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			var isArray bool
0000000000000000000000000000000000000000;;			args, isArray = val.([]string)
0000000000000000000000000000000000000000;;			if !isArray {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected []string, found: %v", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delete(genericParams, "args")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return args, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getEnvs returns environment variables.
0000000000000000000000000000000000000000;;	func getEnvs(genericParams map[string]interface{}) ([]v1.EnvVar, error) {
0000000000000000000000000000000000000000;;		var envs []v1.EnvVar
0000000000000000000000000000000000000000;;		envStrings, found := genericParams["env"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			if envStringArray, isArray := envStrings.([]string); isArray {
0000000000000000000000000000000000000000;;				var err error
0000000000000000000000000000000000000000;;				envs, err = parseEnvs(envStringArray)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				delete(genericParams, "env")
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected []string, found: %v", envStrings)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return envs, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JobV1 struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (JobV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"labels", false},
0000000000000000000000000000000000000000;;			{"default-name", false},
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"image", true},
0000000000000000000000000000000000000000;;			{"image-pull-policy", false},
0000000000000000000000000000000000000000;;			{"port", false},
0000000000000000000000000000000000000000;;			{"hostport", false},
0000000000000000000000000000000000000000;;			{"stdin", false},
0000000000000000000000000000000000000000;;			{"leave-stdin-open", false},
0000000000000000000000000000000000000000;;			{"tty", false},
0000000000000000000000000000000000000000;;			{"command", false},
0000000000000000000000000000000000000000;;			{"args", false},
0000000000000000000000000000000000000000;;			{"env", false},
0000000000000000000000000000000000000000;;			{"requests", false},
0000000000000000000000000000000000000000;;			{"limits", false},
0000000000000000000000000000000000000000;;			{"restart", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (JobV1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		args, err := getArgs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		envs, err := getEnvs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params, err := getParams(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, err := getName(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels, err := getLabels(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podSpec, err := makePodSpec(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		imagePullPolicy := v1.PullPolicy(params["image-pull-policy"])
0000000000000000000000000000000000000000;;		if err = updatePodContainers(params, args, envs, imagePullPolicy, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		leaveStdinOpen, err := GetBool(params, "leave-stdin-open", false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podSpec.Containers[0].StdinOnce = !leaveStdinOpen && podSpec.Containers[0].Stdin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := updatePodPorts(params, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restartPolicy := v1.RestartPolicy(params["restart"])
0000000000000000000000000000000000000000;;		if len(restartPolicy) == 0 {
0000000000000000000000000000000000000000;;			restartPolicy = v1.RestartPolicyNever
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podSpec.RestartPolicy = restartPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		job := batchv1.Job{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   name,
0000000000000000000000000000000000000000;;				Labels: labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;				Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: labels,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: *podSpec,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &job, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CronJobV2Alpha1 struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CronJobV2Alpha1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"labels", false},
0000000000000000000000000000000000000000;;			{"default-name", false},
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"image", true},
0000000000000000000000000000000000000000;;			{"image-pull-policy", false},
0000000000000000000000000000000000000000;;			{"port", false},
0000000000000000000000000000000000000000;;			{"hostport", false},
0000000000000000000000000000000000000000;;			{"stdin", false},
0000000000000000000000000000000000000000;;			{"leave-stdin-open", false},
0000000000000000000000000000000000000000;;			{"tty", false},
0000000000000000000000000000000000000000;;			{"command", false},
0000000000000000000000000000000000000000;;			{"args", false},
0000000000000000000000000000000000000000;;			{"env", false},
0000000000000000000000000000000000000000;;			{"requests", false},
0000000000000000000000000000000000000000;;			{"limits", false},
0000000000000000000000000000000000000000;;			{"restart", false},
0000000000000000000000000000000000000000;;			{"schedule", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CronJobV2Alpha1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		args, err := getArgs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		envs, err := getEnvs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params, err := getParams(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, err := getName(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels, err := getLabels(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podSpec, err := makePodSpec(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		imagePullPolicy := v1.PullPolicy(params["image-pull-policy"])
0000000000000000000000000000000000000000;;		if err = updatePodContainers(params, args, envs, imagePullPolicy, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		leaveStdinOpen, err := GetBool(params, "leave-stdin-open", false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podSpec.Containers[0].StdinOnce = !leaveStdinOpen && podSpec.Containers[0].Stdin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := updatePodPorts(params, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restartPolicy := v1.RestartPolicy(params["restart"])
0000000000000000000000000000000000000000;;		if len(restartPolicy) == 0 {
0000000000000000000000000000000000000000;;			restartPolicy = v1.RestartPolicyNever
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podSpec.RestartPolicy = restartPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cronJob := batchv2alpha1.CronJob{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   name,
0000000000000000000000000000000000000000;;				Labels: labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: batchv2alpha1.CronJobSpec{
0000000000000000000000000000000000000000;;				Schedule:          params["schedule"],
0000000000000000000000000000000000000000;;				ConcurrencyPolicy: batchv2alpha1.AllowConcurrent,
0000000000000000000000000000000000000000;;				JobTemplate: batchv2alpha1.JobTemplateSpec{
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: labels,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: *podSpec,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &cronJob, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BasicReplicationController struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (BasicReplicationController) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"labels", false},
0000000000000000000000000000000000000000;;			{"default-name", false},
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"replicas", true},
0000000000000000000000000000000000000000;;			{"image", true},
0000000000000000000000000000000000000000;;			{"image-pull-policy", false},
0000000000000000000000000000000000000000;;			{"port", false},
0000000000000000000000000000000000000000;;			{"hostport", false},
0000000000000000000000000000000000000000;;			{"stdin", false},
0000000000000000000000000000000000000000;;			{"tty", false},
0000000000000000000000000000000000000000;;			{"command", false},
0000000000000000000000000000000000000000;;			{"args", false},
0000000000000000000000000000000000000000;;			{"env", false},
0000000000000000000000000000000000000000;;			{"requests", false},
0000000000000000000000000000000000000000;;			{"limits", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// populateResourceList takes strings of form <resourceName1>=<value1>,<resourceName1>=<value2>
0000000000000000000000000000000000000000;;	// and returns ResourceList.
0000000000000000000000000000000000000000;;	func populateResourceList(spec string) (api.ResourceList, error) {
0000000000000000000000000000000000000000;;		// empty input gets a nil response to preserve generator test expected behaviors
0000000000000000000000000000000000000000;;		if spec == "" {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := api.ResourceList{}
0000000000000000000000000000000000000000;;		resourceStatements := strings.Split(spec, ",")
0000000000000000000000000000000000000000;;		for _, resourceStatement := range resourceStatements {
0000000000000000000000000000000000000000;;			parts := strings.Split(resourceStatement, "=")
0000000000000000000000000000000000000000;;			if len(parts) != 2 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("Invalid argument syntax %v, expected <resource>=<value>", resourceStatement)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resourceName := api.ResourceName(parts[0])
0000000000000000000000000000000000000000;;			resourceQuantity, err := resource.ParseQuantity(parts[1])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result[resourceName] = resourceQuantity
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// populateResourceListV1 takes strings of form <resourceName1>=<value1>,<resourceName1>=<value2>
0000000000000000000000000000000000000000;;	// and returns ResourceList.
0000000000000000000000000000000000000000;;	func populateResourceListV1(spec string) (v1.ResourceList, error) {
0000000000000000000000000000000000000000;;		// empty input gets a nil response to preserve generator test expected behaviors
0000000000000000000000000000000000000000;;		if spec == "" {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result := v1.ResourceList{}
0000000000000000000000000000000000000000;;		resourceStatements := strings.Split(spec, ",")
0000000000000000000000000000000000000000;;		for _, resourceStatement := range resourceStatements {
0000000000000000000000000000000000000000;;			parts := strings.Split(resourceStatement, "=")
0000000000000000000000000000000000000000;;			if len(parts) != 2 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("Invalid argument syntax %v, expected <resource>=<value>", resourceStatement)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resourceName := v1.ResourceName(parts[0])
0000000000000000000000000000000000000000;;			resourceQuantity, err := resource.ParseQuantity(parts[1])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result[resourceName] = resourceQuantity
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleResourceRequirements parses the limits and requests parameters if specified
0000000000000000000000000000000000000000;;	// and returns ResourceRequirements.
0000000000000000000000000000000000000000;;	func HandleResourceRequirements(params map[string]string) (api.ResourceRequirements, error) {
0000000000000000000000000000000000000000;;		result := api.ResourceRequirements{}
0000000000000000000000000000000000000000;;		limits, err := populateResourceList(params["limits"])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result.Limits = limits
0000000000000000000000000000000000000000;;		requests, err := populateResourceList(params["requests"])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result.Requests = requests
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandleResourceRequirementsV1 parses the limits and requests parameters if specified
0000000000000000000000000000000000000000;;	// and returns ResourceRequirements.
0000000000000000000000000000000000000000;;	func HandleResourceRequirementsV1(params map[string]string) (v1.ResourceRequirements, error) {
0000000000000000000000000000000000000000;;		result := v1.ResourceRequirements{}
0000000000000000000000000000000000000000;;		limits, err := populateResourceListV1(params["limits"])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result.Limits = limits
0000000000000000000000000000000000000000;;		requests, err := populateResourceListV1(params["requests"])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result.Requests = requests
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// makePodSpec returns PodSpec filled with passed parameters.
0000000000000000000000000000000000000000;;	func makePodSpec(params map[string]string, name string) (*v1.PodSpec, error) {
0000000000000000000000000000000000000000;;		stdin, err := GetBool(params, "stdin", false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tty, err := GetBool(params, "tty", false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceRequirements, err := HandleResourceRequirementsV1(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spec := v1.PodSpec{
0000000000000000000000000000000000000000;;			Containers: []v1.Container{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name:      name,
0000000000000000000000000000000000000000;;					Image:     params["image"],
0000000000000000000000000000000000000000;;					Stdin:     stdin,
0000000000000000000000000000000000000000;;					TTY:       tty,
0000000000000000000000000000000000000000;;					Resources: resourceRequirements,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &spec, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (BasicReplicationController) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		args, err := getArgs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		envs, err := getEnvs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params, err := getParams(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, err := getName(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels, err := getLabels(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		count, err := strconv.Atoi(params["replicas"])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podSpec, err := makePodSpec(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		imagePullPolicy := v1.PullPolicy(params["image-pull-policy"])
0000000000000000000000000000000000000000;;		if err = updatePodContainers(params, args, envs, imagePullPolicy, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := updatePodPorts(params, podSpec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		count32 := int32(count)
0000000000000000000000000000000000000000;;		controller := v1.ReplicationController{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   name,
0000000000000000000000000000000000000000;;				Labels: labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;				Replicas: &count32,
0000000000000000000000000000000000000000;;				Selector: labels,
0000000000000000000000000000000000000000;;				Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Labels: labels,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: *podSpec,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &controller, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// updatePodContainers updates PodSpec.Containers with passed parameters.
0000000000000000000000000000000000000000;;	func updatePodContainers(params map[string]string, args []string, envs []v1.EnvVar, imagePullPolicy v1.PullPolicy, podSpec *v1.PodSpec) error {
0000000000000000000000000000000000000000;;		if len(args) > 0 {
0000000000000000000000000000000000000000;;			command, err := GetBool(params, "command", false)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if command {
0000000000000000000000000000000000000000;;				podSpec.Containers[0].Command = args
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				podSpec.Containers[0].Args = args
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(envs) > 0 {
0000000000000000000000000000000000000000;;			podSpec.Containers[0].Env = envs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(imagePullPolicy) > 0 {
0000000000000000000000000000000000000000;;			// imagePullPolicy should be valid here since we have verified it before.
0000000000000000000000000000000000000000;;			podSpec.Containers[0].ImagePullPolicy = imagePullPolicy
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// updatePodContainers updates PodSpec.Containers.Ports with passed parameters.
0000000000000000000000000000000000000000;;	func updatePodPorts(params map[string]string, podSpec *v1.PodSpec) (err error) {
0000000000000000000000000000000000000000;;		port := -1
0000000000000000000000000000000000000000;;		hostPort := -1
0000000000000000000000000000000000000000;;		if len(params["port"]) > 0 {
0000000000000000000000000000000000000000;;			port, err = strconv.Atoi(params["port"])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(params["hostport"]) > 0 {
0000000000000000000000000000000000000000;;			hostPort, err = strconv.Atoi(params["hostport"])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if hostPort > 0 && port < 0 {
0000000000000000000000000000000000000000;;				return fmt.Errorf("--hostport requires --port to be specified")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Don't include the port if it was not specified.
0000000000000000000000000000000000000000;;		if len(params["port"]) > 0 {
0000000000000000000000000000000000000000;;			podSpec.Containers[0].Ports = []v1.ContainerPort{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ContainerPort: int32(port),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if hostPort > 0 {
0000000000000000000000000000000000000000;;				podSpec.Containers[0].Ports[0].HostPort = int32(hostPort)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BasicPod struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (BasicPod) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"labels", false},
0000000000000000000000000000000000000000;;			{"default-name", false},
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"image", true},
0000000000000000000000000000000000000000;;			{"image-pull-policy", false},
0000000000000000000000000000000000000000;;			{"port", false},
0000000000000000000000000000000000000000;;			{"hostport", false},
0000000000000000000000000000000000000000;;			{"stdin", false},
0000000000000000000000000000000000000000;;			{"leave-stdin-open", false},
0000000000000000000000000000000000000000;;			{"tty", false},
0000000000000000000000000000000000000000;;			{"restart", false},
0000000000000000000000000000000000000000;;			{"command", false},
0000000000000000000000000000000000000000;;			{"args", false},
0000000000000000000000000000000000000000;;			{"env", false},
0000000000000000000000000000000000000000;;			{"requests", false},
0000000000000000000000000000000000000000;;			{"limits", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (BasicPod) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		args, err := getArgs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		envs, err := getEnvs(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params, err := getParams(genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, err := getName(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		labels, err := getLabels(params, name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stdin, err := GetBool(params, "stdin", false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		leaveStdinOpen, err := GetBool(params, "leave-stdin-open", false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tty, err := GetBool(params, "tty", false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceRequirements, err := HandleResourceRequirementsV1(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restartPolicy := v1.RestartPolicy(params["restart"])
0000000000000000000000000000000000000000;;		if len(restartPolicy) == 0 {
0000000000000000000000000000000000000000;;			restartPolicy = v1.RestartPolicyAlways
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: Figure out why we set ImagePullPolicy here, whether we can make it
0000000000000000000000000000000000000000;;		// consistent with the other places imagePullPolicy is set using flag.
0000000000000000000000000000000000000000;;		pod := v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:   name,
0000000000000000000000000000000000000000;;				Labels: labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            name,
0000000000000000000000000000000000000000;;						Image:           params["image"],
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						Stdin:           stdin,
0000000000000000000000000000000000000000;;						StdinOnce:       !leaveStdinOpen && stdin,
0000000000000000000000000000000000000000;;						TTY:             tty,
0000000000000000000000000000000000000000;;						Resources:       resourceRequirements,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				DNSPolicy:     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;				RestartPolicy: restartPolicy,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		imagePullPolicy := v1.PullPolicy(params["image-pull-policy"])
0000000000000000000000000000000000000000;;		if err = updatePodContainers(params, args, envs, imagePullPolicy, &pod.Spec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := updatePodPorts(params, &pod.Spec); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pod, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseEnvs converts string into EnvVar objects.
0000000000000000000000000000000000000000;;	func parseEnvs(envArray []string) ([]v1.EnvVar, error) {
0000000000000000000000000000000000000000;;		envs := make([]v1.EnvVar, 0, len(envArray))
0000000000000000000000000000000000000000;;		for _, env := range envArray {
0000000000000000000000000000000000000000;;			pos := strings.Index(env, "=")
0000000000000000000000000000000000000000;;			if pos == -1 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid env: %v", env)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			name := env[:pos]
0000000000000000000000000000000000000000;;			value := env[pos+1:]
0000000000000000000000000000000000000000;;			if len(name) == 0 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid env: %v", env)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(validation.IsCIdentifier(name)) != 0 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid env: %v", env)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			envVar := v1.EnvVar{Name: name, Value: value}
0000000000000000000000000000000000000000;;			envs = append(envs, envVar)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return envs, nil
0000000000000000000000000000000000000000;;	}
