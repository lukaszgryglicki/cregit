0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f5c3f879514cf5b75e7d79535df3a924c9c4ae20;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSecretForDockerRegistryGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		username, password, email, server := "test-user", "test-password", "test-user@example.org", "https://index.docker.io/v1/"
0000000000000000000000000000000000000000;;		secretData, err := handleDockercfgContent(username, password, email, server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		secretDataNoEmail, err := handleDockercfgContent(username, password, "", server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *api.Secret
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"test-valid-use": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":            "foo",
0000000000000000000000000000000000000000;;					"docker-server":   server,
0000000000000000000000000000000000000000;;					"docker-username": username,
0000000000000000000000000000000000000000;;					"docker-password": password,
0000000000000000000000000000000000000000;;					"docker-email":    email,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &api.Secret{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Data: map[string][]byte{
0000000000000000000000000000000000000000;;						api.DockerConfigKey: secretData,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Type: api.SecretTypeDockercfg,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-valid-use-no-email": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":            "foo",
0000000000000000000000000000000000000000;;					"docker-server":   server,
0000000000000000000000000000000000000000;;					"docker-username": username,
0000000000000000000000000000000000000000;;					"docker-password": password,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &api.Secret{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Data: map[string][]byte{
0000000000000000000000000000000000000000;;						api.DockerConfigKey: secretDataNoEmail,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Type: api.SecretTypeDockercfg,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"test-missing-required-param": {
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":            "foo",
0000000000000000000000000000000000000000;;					"docker-server":   server,
0000000000000000000000000000000000000000;;					"docker-password": password,
0000000000000000000000000000000000000000;;					"docker-email":    email,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		generator := SecretForDockerRegistryGeneratorV1{}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*api.Secret), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v", test.expected, obj.(*api.Secret))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
