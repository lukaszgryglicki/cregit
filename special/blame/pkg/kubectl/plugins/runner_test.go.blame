0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
44e20c6ab03d072b05da641781825ee8c6171a11;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package plugins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExecRunner(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			command     string
0000000000000000000000000000000000000000;;			expectedMsg string
0000000000000000000000000000000000000000;;			expectedErr string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "success",
0000000000000000000000000000000000000000;;				command:     "echo test ok",
0000000000000000000000000000000000000000;;				expectedMsg: "test ok\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "invalid",
0000000000000000000000000000000000000000;;				command:     "false",
0000000000000000000000000000000000000000;;				expectedErr: "exit status 1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "env",
0000000000000000000000000000000000000000;;				command:     "echo $KUBECTL_PLUGINS_TEST",
0000000000000000000000000000000000000000;;				expectedMsg: "ok\n",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		os.Setenv("KUBECTL_PLUGINS_TEST", "ok")
0000000000000000000000000000000000000000;;		defer os.Unsetenv("KUBECTL_PLUGINS_TEST")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			outBuf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			plugin := &Plugin{
0000000000000000000000000000000000000000;;				Description: Description{
0000000000000000000000000000000000000000;;					Name:      test.name,
0000000000000000000000000000000000000000;;					ShortDesc: "Test Runner Plugin",
0000000000000000000000000000000000000000;;					Command:   test.command,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ctx := RunningContext{
0000000000000000000000000000000000000000;;				Out:         outBuf,
0000000000000000000000000000000000000000;;				WorkingDir:  ".",
0000000000000000000000000000000000000000;;				EnvProvider: &EmptyEnvProvider{},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			runner := &ExecPluginRunner{}
0000000000000000000000000000000000000000;;			err := runner.Run(plugin, ctx)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if outBuf.String() != test.expectedMsg {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected output: %q", test.name, outBuf.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil && err.Error() != test.expectedErr {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected err output: %v", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
