0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
44e20c6ab03d072b05da641781825ee8c6171a11;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package plugins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSuccessfulDirectoryPluginLoader(t *testing.T) {
0000000000000000000000000000000000000000;;		tmp, err := setupValidPlugins(3, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loader := &DirectoryPluginLoader{
0000000000000000000000000000000000000000;;			Directory: tmp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		plugins, err := loader.Load()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error loading plugins: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if count := len(plugins); count != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected number of loaded plugins, wanted 3, got %d", count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, plugin := range plugins {
0000000000000000000000000000000000000000;;			if m, _ := regexp.MatchString("^plugin[123]$", plugin.Name); !m {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected plugin name %s", plugin.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if m, _ := regexp.MatchString("^The plugin[123] test plugin$", plugin.ShortDesc); !m {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected plugin short desc %s", plugin.ShortDesc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if m, _ := regexp.MatchString("^echo plugin[123]$", plugin.Command); !m {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected plugin command %s", plugin.Command)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if count := len(plugin.Tree); count != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected number of loaded child plugins, wanted 0, got %d", count)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmptyDirectoryPluginLoader(t *testing.T) {
0000000000000000000000000000000000000000;;		loader := &DirectoryPluginLoader{}
0000000000000000000000000000000000000000;;		_, err := loader.Load()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error, got none")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m, _ := regexp.MatchString("^directory not specified$", err.Error()); !m {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNotDirectoryPluginLoader(t *testing.T) {
0000000000000000000000000000000000000000;;		tmp, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected ioutil.TempDir error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		file := filepath.Join(tmp, "test.tmp")
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(file, []byte("test"), 644); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected ioutil.WriteFile error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loader := &DirectoryPluginLoader{
0000000000000000000000000000000000000000;;			Directory: file,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = loader.Load()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error, got none")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), "not a directory") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnexistentDirectoryPluginLoader(t *testing.T) {
0000000000000000000000000000000000000000;;		loader := &DirectoryPluginLoader{
0000000000000000000000000000000000000000;;			Directory: "/hopefully-does-not-exist",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err := loader.Load()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error, got none")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), "no such file or directory") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPluginsEnvVarPluginLoader(t *testing.T) {
0000000000000000000000000000000000000000;;		tmp, err := setupValidPlugins(1, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		env := "KUBECTL_PLUGINS_PATH"
0000000000000000000000000000000000000000;;		os.Setenv(env, tmp)
0000000000000000000000000000000000000000;;		defer os.Unsetenv(env)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loader := PluginsEnvVarPluginLoader()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugins, err := loader.Load()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error loading plugins: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if count := len(plugins); count != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected number of loaded plugins, wanted 1, got %d", count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plugin := plugins[0]
0000000000000000000000000000000000000000;;		if "plugin1" != plugin.Name {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected plugin name %s", plugin.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if "The plugin1 test plugin" != plugin.ShortDesc {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected plugin short desc %s", plugin.ShortDesc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if "echo plugin1" != plugin.Command {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected plugin command %s", plugin.Command)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIncompletePluginDescriptor(t *testing.T) {
0000000000000000000000000000000000000000;;		tmp, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected ioutil.TempDir error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		descriptor := `
0000000000000000000000000000000000000000;;	name: incomplete
0000000000000000000000000000000000000000;;	shortDesc: The incomplete test plugin`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := os.Mkdir(filepath.Join(tmp, "incomplete"), 0755); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected os.Mkdir error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(filepath.Join(tmp, "incomplete", "plugin.yaml"), []byte(descriptor), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected ioutil.WriteFile error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loader := &DirectoryPluginLoader{
0000000000000000000000000000000000000000;;			Directory: tmp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		plugins, err := loader.Load()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if count := len(plugins); count != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected number of loaded plugins, wanted 0, got %d", count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDirectoryTreePluginLoader(t *testing.T) {
0000000000000000000000000000000000000000;;		tmp, err := setupValidPlugins(1, 2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loader := &DirectoryPluginLoader{
0000000000000000000000000000000000000000;;			Directory: tmp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		plugins, err := loader.Load()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error loading plugins: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if count := len(plugins); count != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected number of loaded plugins, wanted 1, got %d", count)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, plugin := range plugins {
0000000000000000000000000000000000000000;;			if m, _ := regexp.MatchString("^plugin1$", plugin.Name); !m {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected plugin name %s", plugin.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if m, _ := regexp.MatchString("^The plugin1 test plugin$", plugin.ShortDesc); !m {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected plugin short desc %s", plugin.ShortDesc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if m, _ := regexp.MatchString("^echo plugin1$", plugin.Command); !m {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected plugin command %s", plugin.Command)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if count := len(plugin.Tree); count != 2 {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected number of loaded child plugins, wanted 2, got %d", count)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, child := range plugin.Tree {
0000000000000000000000000000000000000000;;				if m, _ := regexp.MatchString("^child[12]$", child.Name); !m {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected plugin child name %s", child.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if m, _ := regexp.MatchString("^The child[12] test plugin child of plugin1 of House Targaryen$", child.ShortDesc); !m {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected plugin child short desc %s", child.ShortDesc)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if m, _ := regexp.MatchString("^echo child[12]$", child.Command); !m {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected plugin child command %s", child.Command)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setupValidPlugins(nPlugins, nChildren int) (string, error) {
0000000000000000000000000000000000000000;;		tmp, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("unexpected ioutil.TempDir error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 1; i <= nPlugins; i++ {
0000000000000000000000000000000000000000;;			name := fmt.Sprintf("plugin%d", i)
0000000000000000000000000000000000000000;;			descriptor := fmt.Sprintf(`
0000000000000000000000000000000000000000;;	name: %[1]s
0000000000000000000000000000000000000000;;	shortDesc: The %[1]s test plugin
0000000000000000000000000000000000000000;;	command: echo %[1]s`, name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if nChildren > 0 {
0000000000000000000000000000000000000000;;				descriptor += `
0000000000000000000000000000000000000000;;	tree:`
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for j := 1; j <= nChildren; j++ {
0000000000000000000000000000000000000000;;				child := fmt.Sprintf("child%d", i)
0000000000000000000000000000000000000000;;				descriptor += fmt.Sprintf(`
0000000000000000000000000000000000000000;;	  - name: %[1]s
0000000000000000000000000000000000000000;;	    shortDesc: The %[1]s test plugin child of %[2]s of House Targaryen
0000000000000000000000000000000000000000;;	    command: echo %[1]s`, child, name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := os.Mkdir(filepath.Join(tmp, name), 0755); err != nil {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("unexpected os.Mkdir error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := ioutil.WriteFile(filepath.Join(tmp, name, "plugin.yaml"), []byte(descriptor), 0644); err != nil {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("unexpected ioutil.WriteFile error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return tmp, nil
0000000000000000000000000000000000000000;;	}
