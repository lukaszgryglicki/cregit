0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
44e20c6ab03d072b05da641781825ee8c6171a11;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package plugins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPlugin(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			plugin        Plugin
0000000000000000000000000000000000000000;;			expectedErr   string
0000000000000000000000000000000000000000;;			expectedValid bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				plugin: Plugin{
0000000000000000000000000000000000000000;;					Description: Description{
0000000000000000000000000000000000000000;;						Name:      "test",
0000000000000000000000000000000000000000;;						ShortDesc: "The test",
0000000000000000000000000000000000000000;;						Command:   "echo 1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedValid: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				plugin: Plugin{
0000000000000000000000000000000000000000;;					Description: Description{
0000000000000000000000000000000000000000;;						Name:      "test",
0000000000000000000000000000000000000000;;						ShortDesc: "The test",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedErr: "incomplete",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				plugin:      Plugin{},
0000000000000000000000000000000000000000;;				expectedErr: "incomplete",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			if is := test.plugin.IsValid(); test.expectedValid != is {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected valid=%v, got %v", test.plugin.Name, test.expectedValid, is)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := test.plugin.Validate()
0000000000000000000000000000000000000000;;			if len(test.expectedErr) > 0 {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected error, got none", test.plugin.Name)
0000000000000000000000000000000000000000;;				} else if !strings.Contains(err.Error(), test.expectedErr) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected error containing %q, got %v", test.plugin.Name, test.expectedErr, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected no error, got %v", test.plugin.Name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
