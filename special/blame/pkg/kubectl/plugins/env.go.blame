0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bad622afd7a256fdd0cb70dd847372c286079b67;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package plugins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Env represents an environment variable with its name and value
0000000000000000000000000000000000000000;;	type Env struct {
0000000000000000000000000000000000000000;;		N string
0000000000000000000000000000000000000000;;		V string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Env) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s=%s", e.N, e.V)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnvList is a list of Env
0000000000000000000000000000000000000000;;	type EnvList []Env
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e EnvList) Slice() []string {
0000000000000000000000000000000000000000;;		envs := []string{}
0000000000000000000000000000000000000000;;		for _, env := range e {
0000000000000000000000000000000000000000;;			envs = append(envs, env.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return envs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e EnvList) Merge(s ...string) EnvList {
0000000000000000000000000000000000000000;;		newList := e
0000000000000000000000000000000000000000;;		newList = append(newList, fromSlice(s)...)
0000000000000000000000000000000000000000;;		return newList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnvProvider provides the environment in which the plugin will run.
0000000000000000000000000000000000000000;;	type EnvProvider interface {
0000000000000000000000000000000000000000;;		Env() (EnvList, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MultiEnvProvider is an EnvProvider for multiple env providers, returns on first error.
0000000000000000000000000000000000000000;;	type MultiEnvProvider []EnvProvider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p MultiEnvProvider) Env() (EnvList, error) {
0000000000000000000000000000000000000000;;		env := EnvList{}
0000000000000000000000000000000000000000;;		for _, provider := range p {
0000000000000000000000000000000000000000;;			pEnv, err := provider.Env()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return EnvList{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			env = append(env, pEnv...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return env, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginCallerEnvProvider provides env with the path to the caller binary (usually full path to 'kubectl').
0000000000000000000000000000000000000000;;	type PluginCallerEnvProvider struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PluginCallerEnvProvider) Env() (EnvList, error) {
0000000000000000000000000000000000000000;;		caller, err := os.Executable()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return EnvList{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return EnvList{
0000000000000000000000000000000000000000;;			{"KUBECTL_PLUGINS_CALLER", caller},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginDescriptorEnvProvider provides env vars with information about the running plugin.
0000000000000000000000000000000000000000;;	type PluginDescriptorEnvProvider struct {
0000000000000000000000000000000000000000;;		Plugin *Plugin
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PluginDescriptorEnvProvider) Env() (EnvList, error) {
0000000000000000000000000000000000000000;;		if p.Plugin == nil {
0000000000000000000000000000000000000000;;			return []Env{}, fmt.Errorf("plugin not present to extract env")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		prefix := "KUBECTL_PLUGINS_DESCRIPTOR_"
0000000000000000000000000000000000000000;;		env := EnvList{
0000000000000000000000000000000000000000;;			{prefix + "NAME", p.Plugin.Name},
0000000000000000000000000000000000000000;;			{prefix + "SHORT_DESC", p.Plugin.ShortDesc},
0000000000000000000000000000000000000000;;			{prefix + "LONG_DESC", p.Plugin.LongDesc},
0000000000000000000000000000000000000000;;			{prefix + "EXAMPLE", p.Plugin.Example},
0000000000000000000000000000000000000000;;			{prefix + "COMMAND", p.Plugin.Command},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return env, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OSEnvProvider provides current environment from the operating system.
0000000000000000000000000000000000000000;;	type OSEnvProvider struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *OSEnvProvider) Env() (EnvList, error) {
0000000000000000000000000000000000000000;;		return fromSlice(os.Environ()), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EmptyEnvProvider struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *EmptyEnvProvider) Env() (EnvList, error) {
0000000000000000000000000000000000000000;;		return EnvList{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FlagToEnvName(flagName, prefix string) string {
0000000000000000000000000000000000000000;;		envName := strings.TrimPrefix(flagName, "--")
0000000000000000000000000000000000000000;;		envName = strings.ToUpper(envName)
0000000000000000000000000000000000000000;;		envName = strings.Replace(envName, "-", "_", -1)
0000000000000000000000000000000000000000;;		envName = prefix + envName
0000000000000000000000000000000000000000;;		return envName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FlagToEnv(flag *pflag.Flag, prefix string) Env {
0000000000000000000000000000000000000000;;		envName := FlagToEnvName(flag.Name, prefix)
0000000000000000000000000000000000000000;;		return Env{envName, flag.Value.String()}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fromSlice(envs []string) EnvList {
0000000000000000000000000000000000000000;;		list := EnvList{}
0000000000000000000000000000000000000000;;		for _, env := range envs {
0000000000000000000000000000000000000000;;			list = append(list, parseEnv(env))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return list
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseEnv(env string) Env {
0000000000000000000000000000000000000000;;		if !strings.Contains(env, "=") {
0000000000000000000000000000000000000000;;			env = env + "="
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parsed := strings.SplitN(env, "=", 2)
0000000000000000000000000000000000000000;;		return Env{parsed[0], parsed[1]}
0000000000000000000000000000000000000000;;	}
