0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
44e20c6ab03d072b05da641781825ee8c6171a11;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package plugins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginRunner is capable of running a plugin in a given running context.
0000000000000000000000000000000000000000;;	type PluginRunner interface {
0000000000000000000000000000000000000000;;		Run(plugin *Plugin, ctx RunningContext) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunningContext holds the context in which a given plugin is running - the
0000000000000000000000000000000000000000;;	// in, out, and err streams, arguments and environment passed to it, and the
0000000000000000000000000000000000000000;;	// working directory.
0000000000000000000000000000000000000000;;	type RunningContext struct {
0000000000000000000000000000000000000000;;		In          io.Reader
0000000000000000000000000000000000000000;;		Out         io.Writer
0000000000000000000000000000000000000000;;		ErrOut      io.Writer
0000000000000000000000000000000000000000;;		Args        []string
0000000000000000000000000000000000000000;;		EnvProvider EnvProvider
0000000000000000000000000000000000000000;;		WorkingDir  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExecPluginRunner is a PluginRunner that uses Go's os/exec to run plugins.
0000000000000000000000000000000000000000;;	type ExecPluginRunner struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run takes a given plugin and runs it in a given context using os/exec, returning
0000000000000000000000000000000000000000;;	// any error found while running.
0000000000000000000000000000000000000000;;	func (r *ExecPluginRunner) Run(plugin *Plugin, ctx RunningContext) error {
0000000000000000000000000000000000000000;;		command := strings.Split(os.ExpandEnv(plugin.Command), " ")
0000000000000000000000000000000000000000;;		base := command[0]
0000000000000000000000000000000000000000;;		args := []string{}
0000000000000000000000000000000000000000;;		if len(command) > 1 {
0000000000000000000000000000000000000000;;			args = command[1:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		args = append(args, ctx.Args...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := exec.Command(base, args...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd.Stdin = ctx.In
0000000000000000000000000000000000000000;;		cmd.Stdout = ctx.Out
0000000000000000000000000000000000000000;;		cmd.Stderr = ctx.ErrOut
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		env, err := ctx.EnvProvider.Env()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd.Env = env.Slice()
0000000000000000000000000000000000000000;;		cmd.Dir = ctx.WorkingDir
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(9).Infof("Running plugin %q as base command %q with args %v", plugin.Name, base, args)
0000000000000000000000000000000000000000;;		return cmd.Run()
0000000000000000000000000000000000000000;;	}
