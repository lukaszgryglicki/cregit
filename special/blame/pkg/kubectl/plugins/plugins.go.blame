0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
44e20c6ab03d072b05da641781825ee8c6171a11;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package plugins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Plugin is the representation of a CLI extension (plugin).
0000000000000000000000000000000000000000;;	type Plugin struct {
0000000000000000000000000000000000000000;;		Description
0000000000000000000000000000000000000000;;		Source
0000000000000000000000000000000000000000;;		Context RunningContext `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginDescription holds everything needed to register a
0000000000000000000000000000000000000000;;	// plugin as a command. Usually comes from a descriptor file.
0000000000000000000000000000000000000000;;	type Description struct {
0000000000000000000000000000000000000000;;		Name      string    `json:"name"`
0000000000000000000000000000000000000000;;		ShortDesc string    `json:"shortDesc"`
0000000000000000000000000000000000000000;;		LongDesc  string    `json:"longDesc,omitempty"`
0000000000000000000000000000000000000000;;		Example   string    `json:"example,omitempty"`
0000000000000000000000000000000000000000;;		Command   string    `json:"command"`
0000000000000000000000000000000000000000;;		Tree      []*Plugin `json:"tree,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginSource holds the location of a given plugin in the filesystem.
0000000000000000000000000000000000000000;;	type Source struct {
0000000000000000000000000000000000000000;;		Dir            string `json:"-"`
0000000000000000000000000000000000000000;;		DescriptorName string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		IncompleteError  = fmt.Errorf("incomplete plugin descriptor: name, shortDesc and command fields are required")
0000000000000000000000000000000000000000;;		InvalidNameError = fmt.Errorf("plugin name can't contain spaces")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Plugin) Validate() error {
0000000000000000000000000000000000000000;;		if len(p.Name) == 0 || len(p.ShortDesc) == 0 || (len(p.Command) == 0 && len(p.Tree) == 0) {
0000000000000000000000000000000000000000;;			return IncompleteError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if strings.Index(p.Name, " ") > -1 {
0000000000000000000000000000000000000000;;			return InvalidNameError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, child := range p.Tree {
0000000000000000000000000000000000000000;;			if err := child.Validate(); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Plugin) IsValid() bool {
0000000000000000000000000000000000000000;;		return p.Validate() == nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Plugins is a list of plugins.
0000000000000000000000000000000000000000;;	type Plugins []*Plugin
