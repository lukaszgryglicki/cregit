0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bad622afd7a256fdd0cb70dd847372c286079b67;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package plugins
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEnv(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			env      Env
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				env:      Env{"FOO", "BAR"},
0000000000000000000000000000000000000000;;				expected: "FOO=BAR",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				env:      Env{"FOO", "BAR="},
0000000000000000000000000000000000000000;;				expected: "FOO=BAR=",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				env:      Env{"FOO", ""},
0000000000000000000000000000000000000000;;				expected: "FOO=",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			if s := test.env.String(); s != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected string %q, got %q", test.env, test.expected, s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEnvListToSlice(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			env      EnvList
0000000000000000000000000000000000000000;;			expected []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				env: EnvList{
0000000000000000000000000000000000000000;;					{"FOO", "BAR"},
0000000000000000000000000000000000000000;;					{"ZEE", "YO"},
0000000000000000000000000000000000000000;;					{"ONE", "1"},
0000000000000000000000000000000000000000;;					{"EQUALS", "=="},
0000000000000000000000000000000000000000;;					{"EMPTY", ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []string{"FOO=BAR", "ZEE=YO", "ONE=1", "EQUALS===", "EMPTY="},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			if s := test.env.Slice(); !reflect.DeepEqual(test.expected, s) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", test.env, test.expected, s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddToEnvList(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			add      []string
0000000000000000000000000000000000000000;;			expected EnvList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				add: []string{"FOO=BAR", "EMPTY=", "EQUALS===", "JUSTNAME"},
0000000000000000000000000000000000000000;;				expected: EnvList{
0000000000000000000000000000000000000000;;					{"FOO", "BAR"},
0000000000000000000000000000000000000000;;					{"EMPTY", ""},
0000000000000000000000000000000000000000;;					{"EQUALS", "=="},
0000000000000000000000000000000000000000;;					{"JUSTNAME", ""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			env := EnvList{}.Merge(test.add...)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expected, env) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", test.add, test.expected, env)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFlagToEnv(t *testing.T) {
0000000000000000000000000000000000000000;;		flags := pflag.NewFlagSet("", pflag.ContinueOnError)
0000000000000000000000000000000000000000;;		flags.String("test", "ok", "")
0000000000000000000000000000000000000000;;		flags.String("kube-master", "http://something", "")
0000000000000000000000000000000000000000;;		flags.String("from-file", "default", "")
0000000000000000000000000000000000000000;;		flags.Parse([]string{"--from-file=nondefault"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			flag     *pflag.Flag
0000000000000000000000000000000000000000;;			prefix   string
0000000000000000000000000000000000000000;;			expected Env
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flag:     flags.Lookup("test"),
0000000000000000000000000000000000000000;;				expected: Env{"TEST", "ok"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				flag:     flags.Lookup("kube-master"),
0000000000000000000000000000000000000000;;				expected: Env{"KUBE_MASTER", "http://something"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				prefix:   "KUBECTL_",
0000000000000000000000000000000000000000;;				flag:     flags.Lookup("from-file"),
0000000000000000000000000000000000000000;;				expected: Env{"KUBECTL_FROM_FILE", "nondefault"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			if env := FlagToEnv(test.flag, test.prefix); !reflect.DeepEqual(test.expected, env) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", test.flag.Name, test.expected, env)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPluginDescriptorEnvProvider(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			plugin   *Plugin
0000000000000000000000000000000000000000;;			expected EnvList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				plugin: &Plugin{
0000000000000000000000000000000000000000;;					Description: Description{
0000000000000000000000000000000000000000;;						Name:      "test",
0000000000000000000000000000000000000000;;						ShortDesc: "Short Description",
0000000000000000000000000000000000000000;;						Command:   "foo --bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: EnvList{
0000000000000000000000000000000000000000;;					{"KUBECTL_PLUGINS_DESCRIPTOR_NAME", "test"},
0000000000000000000000000000000000000000;;					{"KUBECTL_PLUGINS_DESCRIPTOR_SHORT_DESC", "Short Description"},
0000000000000000000000000000000000000000;;					{"KUBECTL_PLUGINS_DESCRIPTOR_LONG_DESC", ""},
0000000000000000000000000000000000000000;;					{"KUBECTL_PLUGINS_DESCRIPTOR_EXAMPLE", ""},
0000000000000000000000000000000000000000;;					{"KUBECTL_PLUGINS_DESCRIPTOR_COMMAND", "foo --bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			provider := &PluginDescriptorEnvProvider{
0000000000000000000000000000000000000000;;				Plugin: test.plugin,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			env, _ := provider.Env()
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expected, env) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", test.plugin.Name, test.expected, env)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
