0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f9f64169c71db8d403202484105796bd740d77c3;pkg/util/crlf/crlf.go[pkg/util/crlf/crlf.go][pkg/kubectl/util/crlf/crlf.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package crlf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type crlfWriter struct {
0000000000000000000000000000000000000000;;		io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCRLFWriter implements a CR/LF line ending writer used for normalizing
0000000000000000000000000000000000000000;;	// text for Windows platforms.
0000000000000000000000000000000000000000;;	func NewCRLFWriter(w io.Writer) io.Writer {
0000000000000000000000000000000000000000;;		return crlfWriter{w}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w crlfWriter) Write(b []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		for i, written := 0, 0; ; {
0000000000000000000000000000000000000000;;			next := bytes.Index(b[i:], []byte("\n"))
0000000000000000000000000000000000000000;;			if next == -1 {
0000000000000000000000000000000000000000;;				n, err := w.Writer.Write(b[i:])
0000000000000000000000000000000000000000;;				return written + n, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			next = next + i
0000000000000000000000000000000000000000;;			n, err := w.Writer.Write(b[i:next])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return written + n, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			written += n
0000000000000000000000000000000000000000;;			n, err = w.Writer.Write([]byte("\r\n"))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if n > 1 {
0000000000000000000000000000000000000000;;					n = 1
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return written + n, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			written += 1
0000000000000000000000000000000000000000;;			i = next + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
