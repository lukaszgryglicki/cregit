0000000000000000000000000000000000000000;;	// +build !windows
edbadd9258d8cb5de86636f529b0e84620db633f;pkg/util/term/resizeevents.go[pkg/util/term/resizeevents.go][pkg/kubectl/util/term/resizeevents.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package term
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/signal"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/remotecommand"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// monitorResizeEvents spawns a goroutine that waits for SIGWINCH signals (these indicate the
0000000000000000000000000000000000000000;;	// terminal has resized). After receiving a SIGWINCH, this gets the terminal size and tries to send
0000000000000000000000000000000000000000;;	// it to the resizeEvents channel. The goroutine stops when the stop channel is closed.
0000000000000000000000000000000000000000;;	func monitorResizeEvents(fd uintptr, resizeEvents chan<- remotecommand.TerminalSize, stop chan struct{}) {
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer runtime.HandleCrash()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			winch := make(chan os.Signal, 1)
0000000000000000000000000000000000000000;;			signal.Notify(winch, syscall.SIGWINCH)
0000000000000000000000000000000000000000;;			defer signal.Stop(winch)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				select {
0000000000000000000000000000000000000000;;				case <-winch:
0000000000000000000000000000000000000000;;					size := GetSize(fd)
0000000000000000000000000000000000000000;;					if size == nil {
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// try to send size
0000000000000000000000000000000000000000;;					select {
0000000000000000000000000000000000000000;;					case resizeEvents <- *size:
0000000000000000000000000000000000000000;;						// success
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						// not sent
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case <-stop:
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
