0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ffa5adae4acbc3759de867023c7b222c6e07104b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		federationapi "k8s.io/kubernetes/federation/apis/federation/v1beta1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestClusterGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *federationapi.Cluster
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "foo",
0000000000000000000000000000000000000000;;					"client-cidr":    "0.0.0.0/0",
0000000000000000000000000000000000000000;;					"server-address": "10.20.30.40",
0000000000000000000000000000000000000000;;					"secret":         "foo-credentials",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &federationapi.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: federationapi.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federationapi.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;								ServerAddress: "10.20.30.40",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						SecretRef: &v1.LocalObjectReference{
0000000000000000000000000000000000000000;;							Name: "foo-credentials",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "foo",
0000000000000000000000000000000000000000;;					"client-cidr":    "10.20.30.40/16",
0000000000000000000000000000000000000000;;					"server-address": "https://foo.example.com",
0000000000000000000000000000000000000000;;					"secret":         "foo-credentials",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &federationapi.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: federationapi.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federationapi.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "10.20.30.40/16",
0000000000000000000000000000000000000000;;								ServerAddress: "https://foo.example.com",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						SecretRef: &v1.LocalObjectReference{
0000000000000000000000000000000000000000;;							Name: "foo-credentials",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "bar-cluster",
0000000000000000000000000000000000000000;;					"client-cidr":    "10.20.30.40/16",
0000000000000000000000000000000000000000;;					"server-address": "http://10.20.30.40",
0000000000000000000000000000000000000000;;					"secret":         "credentials",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &federationapi.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "bar-cluster",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: federationapi.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federationapi.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "10.20.30.40/16",
0000000000000000000000000000000000000000;;								ServerAddress: "http://10.20.30.40",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						SecretRef: &v1.LocalObjectReference{
0000000000000000000000000000000000000000;;							Name: "credentials",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":           "bar-cluster",
0000000000000000000000000000000000000000;;					"client-cidr":    "10.20.30.40/16",
0000000000000000000000000000000000000000;;					"server-address": "http://10.20.30.40",
0000000000000000000000000000000000000000;;					"secret":         "credentials",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &federationapi.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "bar-cluster",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: federationapi.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federationapi.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "10.20.30.40/16",
0000000000000000000000000000000000000000;;								ServerAddress: "http://10.20.30.40",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						SecretRef: &v1.LocalObjectReference{
0000000000000000000000000000000000000000;;							Name: "credentials",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":                 "bar-cluster",
0000000000000000000000000000000000000000;;					"client-cidr":          "10.20.30.40/16",
0000000000000000000000000000000000000000;;					"server-address":       "http://10.20.30.40",
0000000000000000000000000000000000000000;;					"secret":               "credentials",
0000000000000000000000000000000000000000;;					"service-account-name": "service-account",
0000000000000000000000000000000000000000;;					"cluster-role-name":    "cluster-role",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &federationapi.Cluster{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "bar-cluster",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							ServiceAccountNameAnnotation: "service-account",
0000000000000000000000000000000000000000;;							ClusterRoleNameAnnotation:    "cluster-role",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: federationapi.ClusterSpec{
0000000000000000000000000000000000000000;;						ServerAddressByClientCIDRs: []federationapi.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ClientCIDR:    "10.20.30.40/16",
0000000000000000000000000000000000000000;;								ServerAddress: "http://10.20.30.40",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						SecretRef: &v1.LocalObjectReference{
0000000000000000000000000000000000000000;;							Name: "credentials",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"server-address": "https://10.20.30.40",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"secret": "baz-credentials",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"server-address": "http://foo.example.com",
0000000000000000000000000000000000000000;;					"secret":         "foo-credentials",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":   "foo",
0000000000000000000000000000000000000000;;					"secret": "foo-credentials",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":        "foo",
0000000000000000000000000000000000000000;;					"client-cidr": "10.20.30.40/16",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":              "bar-cluster",
0000000000000000000000000000000000000000;;					"client-cidr":       "10.20.30.40/16",
0000000000000000000000000000000000000000;;					"server-address":    "http://10.20.30.40",
0000000000000000000000000000000000000000;;					"secret":            "credentials",
0000000000000000000000000000000000000000;;					"cluster-role-name": "cluster-role",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":                 "bar-cluster",
0000000000000000000000000000000000000000;;					"client-cidr":          "10.20.30.40/16",
0000000000000000000000000000000000000000;;					"server-address":       "http://10.20.30.40",
0000000000000000000000000000000000000000;;					"secret":               "credentials",
0000000000000000000000000000000000000000;;					"service-account-name": "service-account",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		generator := ClusterGeneratorV1Beta1{}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*federationapi.Cluster), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\n[%d] want:\n%#v\n[%d] got:\n%#v", i, test.expected, i, obj.(*federationapi.Cluster))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
