0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a8e72706e6122d9019ff1f9c436372978161fa16;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/printers"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FilterFunc is a function that knows how to filter a specific resource kind.
0000000000000000000000000000000000000000;;	// It receives a generic runtime.Object which must be type-checked by the function.
0000000000000000000000000000000000000000;;	// Returns a boolean value true if a resource is filtered, or false otherwise.
0000000000000000000000000000000000000000;;	type FilterFunc func(runtime.Object, printers.PrintOptions) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filters is a collection of filter funcs
0000000000000000000000000000000000000000;;	type Filters []FilterFunc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewResourceFilter() Filters {
0000000000000000000000000000000000000000;;		return []FilterFunc{
0000000000000000000000000000000000000000;;			filterPods,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// filterPods returns true if a pod should be skipped.
0000000000000000000000000000000000000000;;	// If show-all is true, the pod will be never be skipped (return false);
0000000000000000000000000000000000000000;;	// otherwise, skip terminated pod.
0000000000000000000000000000000000000000;;	func filterPods(obj runtime.Object, options printers.PrintOptions) bool {
0000000000000000000000000000000000000000;;		if options.ShowAll {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch p := obj.(type) {
0000000000000000000000000000000000000000;;		case *v1.Pod:
0000000000000000000000000000000000000000;;			return p.Status.Phase == v1.PodSucceeded || p.Status.Phase == v1.PodFailed
0000000000000000000000000000000000000000;;		case *api.Pod:
0000000000000000000000000000000000000000;;			return p.Status.Phase == api.PodSucceeded || p.Status.Phase == api.PodFailed
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter loops through a collection of FilterFuncs until it finds one that can filter the given resource
0000000000000000000000000000000000000000;;	func (f Filters) Filter(obj runtime.Object, opts *printers.PrintOptions) (bool, error) {
0000000000000000000000000000000000000000;;		// check if the object is unstructured. If so, let's attempt to convert it to a type we can understand
0000000000000000000000000000000000000000;;		// before apply filter func.
0000000000000000000000000000000000000000;;		obj, _ = DecodeUnknownObject(obj)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, filter := range f {
0000000000000000000000000000000000000000;;			if ok := filter(obj, *opts); ok {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// check if the object is unstructured. If so, let's attempt to convert it to a type we can understand.
0000000000000000000000000000000000000000;;	func DecodeUnknownObject(obj runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch obj.(type) {
0000000000000000000000000000000000000000;;		case runtime.Unstructured, *runtime.Unknown:
0000000000000000000000000000000000000000;;			if objBytes, err := runtime.Encode(api.Codecs.LegacyCodec(), obj); err == nil {
0000000000000000000000000000000000000000;;				if decodedObj, err := runtime.Decode(api.Codecs.UniversalDecoder(), objBytes); err == nil {
0000000000000000000000000000000000000000;;					obj = decodedObj
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return obj, err
0000000000000000000000000000000000000000;;	}
