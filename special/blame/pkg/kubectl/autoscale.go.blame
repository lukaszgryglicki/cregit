0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
1e19844ee8f7cad94a9707f17e45f0df7b1fbc01;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/apis/autoscaling"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HorizontalPodAutoscalerV1 struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HorizontalPodAutoscalerV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"default-name", true},
0000000000000000000000000000000000000000;;			{"name", false},
0000000000000000000000000000000000000000;;			{"scaleRef-kind", false},
0000000000000000000000000000000000000000;;			{"scaleRef-name", false},
0000000000000000000000000000000000000000;;			{"scaleRef-apiVersion", false},
0000000000000000000000000000000000000000;;			{"min", false},
0000000000000000000000000000000000000000;;			{"max", true},
0000000000000000000000000000000000000000;;			{"cpu-percent", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HorizontalPodAutoscalerV1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return generateHPA(genericParams)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateHPA(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		params := map[string]string{}
0000000000000000000000000000000000000000;;		for key, value := range genericParams {
0000000000000000000000000000000000000000;;			strVal, isString := value.(string)
0000000000000000000000000000000000000000;;			if !isString {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected string, saw %v for '%s'", value, key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			params[key] = strVal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		name, found := params["name"]
0000000000000000000000000000000000000000;;		if !found || len(name) == 0 {
0000000000000000000000000000000000000000;;			name, found = params["default-name"]
0000000000000000000000000000000000000000;;			if !found || len(name) == 0 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("'name' is a required parameter.")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		minString, found := params["min"]
0000000000000000000000000000000000000000;;		min := -1
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			if min, err = strconv.Atoi(minString); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		maxString, found := params["max"]
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("'max' is a required parameter.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		max, err := strconv.Atoi(maxString)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if min > max {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("'max' must be greater than or equal to 'min'.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cpuString, found := params["cpu-percent"]
0000000000000000000000000000000000000000;;		cpu := -1
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			if cpu, err = strconv.Atoi(cpuString); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scaler := autoscaling.HorizontalPodAutoscaler{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: autoscaling.HorizontalPodAutoscalerSpec{
0000000000000000000000000000000000000000;;				ScaleTargetRef: autoscaling.CrossVersionObjectReference{
0000000000000000000000000000000000000000;;					Kind:       params["scaleRef-kind"],
0000000000000000000000000000000000000000;;					Name:       params["scaleRef-name"],
0000000000000000000000000000000000000000;;					APIVersion: params["scaleRef-apiVersion"],
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				MaxReplicas: int32(max),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if min > 0 {
0000000000000000000000000000000000000000;;			v := int32(min)
0000000000000000000000000000000000000000;;			scaler.Spec.MinReplicas = &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cpu >= 0 {
0000000000000000000000000000000000000000;;			c := int32(cpu)
0000000000000000000000000000000000000000;;			scaler.Spec.Metrics = []autoscaling.MetricSpec{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Type: autoscaling.ResourceMetricSourceType,
0000000000000000000000000000000000000000;;					Resource: &autoscaling.ResourceMetricSource{
0000000000000000000000000000000000000000;;						Name: api.ResourceCPU,
0000000000000000000000000000000000000000;;						TargetAverageUtilization: &c,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &scaler, nil
0000000000000000000000000000000000000000;;	}
