0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f5c3f879514cf5b75e7d79535df3a924c9c4ae20;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecretGeneratorV1 supports stable generation of an opaque secret
0000000000000000000000000000000000000000;;	type SecretGeneratorV1 struct {
0000000000000000000000000000000000000000;;		// Name of secret (required)
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// Type of secret (optional)
0000000000000000000000000000000000000000;;		Type string
0000000000000000000000000000000000000000;;		// FileSources to derive the secret from (optional)
0000000000000000000000000000000000000000;;		FileSources []string
0000000000000000000000000000000000000000;;		// LiteralSources to derive the secret from (optional)
0000000000000000000000000000000000000000;;		LiteralSources []string
0000000000000000000000000000000000000000;;		// EnvFileSource to derive the secret from (optional)
0000000000000000000000000000000000000000;;		EnvFileSource string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameter injection
0000000000000000000000000000000000000000;;	var _ Generator = &SecretGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameters specified during construction
0000000000000000000000000000000000000000;;	var _ StructuredGenerator = &SecretGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate returns a secret using the specified parameters
0000000000000000000000000000000000000000;;	func (s SecretGeneratorV1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(s.ParamNames(), genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate := &SecretGeneratorV1{}
0000000000000000000000000000000000000000;;		fromFileStrings, found := genericParams["from-file"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			fromFileArray, isArray := fromFileStrings.([]string)
0000000000000000000000000000000000000000;;			if !isArray {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected []string, found :%v", fromFileStrings)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delegate.FileSources = fromFileArray
0000000000000000000000000000000000000000;;			delete(genericParams, "from-file")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fromLiteralStrings, found := genericParams["from-literal"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			fromLiteralArray, isArray := fromLiteralStrings.([]string)
0000000000000000000000000000000000000000;;			if !isArray {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected []string, found :%v", fromLiteralStrings)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delegate.LiteralSources = fromLiteralArray
0000000000000000000000000000000000000000;;			delete(genericParams, "from-literal")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fromEnvFileString, found := genericParams["from-env-file"]
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			fromEnvFile, isString := fromEnvFileString.(string)
0000000000000000000000000000000000000000;;			if !isString {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected string, found :%v", fromEnvFileString)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delegate.EnvFileSource = fromEnvFile
0000000000000000000000000000000000000000;;			delete(genericParams, "from-env-file")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		params := map[string]string{}
0000000000000000000000000000000000000000;;		for key, value := range genericParams {
0000000000000000000000000000000000000000;;			strVal, isString := value.(string)
0000000000000000000000000000000000000000;;			if !isString {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected string, saw %v for '%s'", value, key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			params[key] = strVal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate.Name = params["name"]
0000000000000000000000000000000000000000;;		delegate.Type = params["type"]
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParamNames returns the set of supported input parameters when using the parameter injection generator pattern
0000000000000000000000000000000000000000;;	func (s SecretGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"type", false},
0000000000000000000000000000000000000000;;			{"from-file", false},
0000000000000000000000000000000000000000;;			{"from-literal", false},
0000000000000000000000000000000000000000;;			{"from-env-file", false},
0000000000000000000000000000000000000000;;			{"force", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StructuredGenerate outputs a secret object using the configured fields
0000000000000000000000000000000000000000;;	func (s SecretGeneratorV1) StructuredGenerate() (runtime.Object, error) {
0000000000000000000000000000000000000000;;		if err := s.validate(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		secret := &api.Secret{}
0000000000000000000000000000000000000000;;		secret.Name = s.Name
0000000000000000000000000000000000000000;;		secret.Data = map[string][]byte{}
0000000000000000000000000000000000000000;;		if len(s.Type) > 0 {
0000000000000000000000000000000000000000;;			secret.Type = api.SecretType(s.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.FileSources) > 0 {
0000000000000000000000000000000000000000;;			if err := handleFromFileSources(secret, s.FileSources); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.LiteralSources) > 0 {
0000000000000000000000000000000000000000;;			if err := handleFromLiteralSources(secret, s.LiteralSources); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.EnvFileSource) > 0 {
0000000000000000000000000000000000000000;;			if err := handleFromEnvFileSource(secret, s.EnvFileSource); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return secret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validate validates required fields are set to support structured generation
0000000000000000000000000000000000000000;;	func (s SecretGeneratorV1) validate() error {
0000000000000000000000000000000000000000;;		if len(s.Name) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("name must be specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.EnvFileSource) > 0 && (len(s.FileSources) > 0 || len(s.LiteralSources) > 0) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("from-env-file cannot be combined with from-file or from-literal")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handleFromLiteralSources adds the specified literal source information into the provided secret
0000000000000000000000000000000000000000;;	func handleFromLiteralSources(secret *api.Secret, literalSources []string) error {
0000000000000000000000000000000000000000;;		for _, literalSource := range literalSources {
0000000000000000000000000000000000000000;;			keyName, value, err := parseLiteralSource(literalSource)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = addKeyFromLiteralToSecret(secret, keyName, []byte(value)); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handleFromFileSources adds the specified file source information into the provided secret
0000000000000000000000000000000000000000;;	func handleFromFileSources(secret *api.Secret, fileSources []string) error {
0000000000000000000000000000000000000000;;		for _, fileSource := range fileSources {
0000000000000000000000000000000000000000;;			keyName, filePath, err := parseFileSource(fileSource)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			info, err := os.Stat(filePath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				switch err := err.(type) {
0000000000000000000000000000000000000000;;				case *os.PathError:
0000000000000000000000000000000000000000;;					return fmt.Errorf("error reading %s: %v", filePath, err.Err)
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return fmt.Errorf("error reading %s: %v", filePath, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if info.IsDir() {
0000000000000000000000000000000000000000;;				if strings.Contains(fileSource, "=") {
0000000000000000000000000000000000000000;;					return fmt.Errorf("cannot give a key name for a directory path.")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				fileList, err := ioutil.ReadDir(filePath)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("error listing files in %s: %v", filePath, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for _, item := range fileList {
0000000000000000000000000000000000000000;;					itemPath := path.Join(filePath, item.Name())
0000000000000000000000000000000000000000;;					if item.Mode().IsRegular() {
0000000000000000000000000000000000000000;;						keyName = item.Name()
0000000000000000000000000000000000000000;;						if err = addKeyFromFileToSecret(secret, keyName, itemPath); err != nil {
0000000000000000000000000000000000000000;;							return err
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err := addKeyFromFileToSecret(secret, keyName, filePath); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handleFromEnvFileSource adds the specified env file source information
0000000000000000000000000000000000000000;;	// into the provided secret
0000000000000000000000000000000000000000;;	func handleFromEnvFileSource(secret *api.Secret, envFileSource string) error {
0000000000000000000000000000000000000000;;		info, err := os.Stat(envFileSource)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			switch err := err.(type) {
0000000000000000000000000000000000000000;;			case *os.PathError:
0000000000000000000000000000000000000000;;				return fmt.Errorf("error reading %s: %v", envFileSource, err.Err)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return fmt.Errorf("error reading %s: %v", envFileSource, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if info.IsDir() {
0000000000000000000000000000000000000000;;			return fmt.Errorf("env secret file cannot be a directory")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return addFromEnvFile(envFileSource, func(key, value string) error {
0000000000000000000000000000000000000000;;			return addKeyFromLiteralToSecret(secret, key, []byte(value))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addKeyFromFileToSecret(secret *api.Secret, keyName, filePath string) error {
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile(filePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return addKeyFromLiteralToSecret(secret, keyName, data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addKeyFromLiteralToSecret(secret *api.Secret, keyName string, data []byte) error {
0000000000000000000000000000000000000000;;		if errs := validation.IsConfigMapKey(keyName); len(errs) != 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%q is not a valid key name for a Secret: %s", keyName, strings.Join(errs, ";"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, entryExists := secret.Data[keyName]; entryExists {
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot add key %s, another key by that name already exists: %v.", keyName, secret.Data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		secret.Data[keyName] = data
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
