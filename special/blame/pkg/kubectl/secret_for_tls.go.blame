0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
2765956bf4f2c64a142bc6bacf90af9e21c26645;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecretForTLSGeneratorV1 supports stable generation of a TLS secret.
0000000000000000000000000000000000000000;;	type SecretForTLSGeneratorV1 struct {
0000000000000000000000000000000000000000;;		// Name is the name of this TLS secret.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// Key is the path to the user's private key.
0000000000000000000000000000000000000000;;		Key string
0000000000000000000000000000000000000000;;		// Cert is the path to the user's public key certificate.
0000000000000000000000000000000000000000;;		Cert string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameter injection
0000000000000000000000000000000000000000;;	var _ Generator = &SecretForTLSGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure it supports the generator pattern that uses parameters specified during construction
0000000000000000000000000000000000000000;;	var _ StructuredGenerator = &SecretForTLSGeneratorV1{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate returns a secret using the specified parameters
0000000000000000000000000000000000000000;;	func (s SecretForTLSGeneratorV1) Generate(genericParams map[string]interface{}) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		err := ValidateParams(s.ParamNames(), genericParams)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		params := map[string]string{}
0000000000000000000000000000000000000000;;		for key, value := range genericParams {
0000000000000000000000000000000000000000;;			strVal, isString := value.(string)
0000000000000000000000000000000000000000;;			if !isString {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("expected string, saw %v for '%s'", value, key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			params[key] = strVal
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegate := &SecretForTLSGeneratorV1{
0000000000000000000000000000000000000000;;			Name: params["name"],
0000000000000000000000000000000000000000;;			Key:  params["key"],
0000000000000000000000000000000000000000;;			Cert: params["cert"],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return delegate.StructuredGenerate()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StructuredGenerate outputs a secret object using the configured fields
0000000000000000000000000000000000000000;;	func (s SecretForTLSGeneratorV1) StructuredGenerate() (runtime.Object, error) {
0000000000000000000000000000000000000000;;		if err := s.validate(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tlsCrt, err := readFile(s.Cert)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tlsKey, err := readFile(s.Key)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		secret := &api.Secret{}
0000000000000000000000000000000000000000;;		secret.Name = s.Name
0000000000000000000000000000000000000000;;		secret.Type = api.SecretTypeTLS
0000000000000000000000000000000000000000;;		secret.Data = map[string][]byte{}
0000000000000000000000000000000000000000;;		secret.Data[api.TLSCertKey] = []byte(tlsCrt)
0000000000000000000000000000000000000000;;		secret.Data[api.TLSPrivateKeyKey] = []byte(tlsKey)
0000000000000000000000000000000000000000;;		return secret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// readFile just reads a file into a byte array.
0000000000000000000000000000000000000000;;	func readFile(file string) ([]byte, error) {
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadFile(file)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []byte{}, fmt.Errorf("Cannot read file %v, %v", file, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParamNames returns the set of supported input parameters when using the parameter injection generator pattern
0000000000000000000000000000000000000000;;	func (s SecretForTLSGeneratorV1) ParamNames() []GeneratorParam {
0000000000000000000000000000000000000000;;		return []GeneratorParam{
0000000000000000000000000000000000000000;;			{"name", true},
0000000000000000000000000000000000000000;;			{"key", true},
0000000000000000000000000000000000000000;;			{"cert", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validate validates required fields are set to support structured generation
0000000000000000000000000000000000000000;;	func (s SecretForTLSGeneratorV1) validate() error {
0000000000000000000000000000000000000000;;		// TODO: This is not strictly necessary. We can generate a self signed cert
0000000000000000000000000000000000000000;;		// if no key/cert is given. The only requiredment is that we either get both
0000000000000000000000000000000000000000;;		// or none. See test/e2e/ingress_utils for self signed cert generation.
0000000000000000000000000000000000000000;;		if len(s.Key) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("key must be specified.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(s.Cert) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("certificate must be specified.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := tls.LoadX509KeyPair(s.Cert, s.Key); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to load key pair %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: Add more validation.
0000000000000000000000000000000000000000;;		// 1. If the certificate contains intermediates, it is a valid chain.
0000000000000000000000000000000000000000;;		// 2. Format etc.
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
