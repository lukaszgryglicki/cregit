0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
ef8e5afec995bf8d67dc35aa24a402758db1ff0c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubectl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		appsv1beta1 "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		batchv2alpha1 "k8s.io/api/batch/v2alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerate(t *testing.T) {
0000000000000000000000000000000000000000;;		one := int32(1)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *v1.ReplicationController
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":              "foo",
0000000000000000000000000000000000000000;;					"image":             "someimage",
0000000000000000000000000000000000000000;;					"image-pull-policy": "Always",
0000000000000000000000000000000000000000;;					"replicas":          "1",
0000000000000000000000000000000000000000;;					"port":              "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: &one,
0000000000000000000000000000000000000000;;						Selector: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;						Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:            "foo",
0000000000000000000000000000000000000000;;										Image:           "someimage",
0000000000000000000000000000000000000000;;										ImagePullPolicy: v1.PullAlways,
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"port":     "",
0000000000000000000000000000000000000000;;					"env":      []string{"a=b", "c=d"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: &one,
0000000000000000000000000000000000000000;;						Selector: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;						Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "foo",
0000000000000000000000000000000000000000;;										Image: "someimage",
0000000000000000000000000000000000000000;;										Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:  "a",
0000000000000000000000000000000000000000;;												Value: "b",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:  "c",
0000000000000000000000000000000000000000;;												Value: "d",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":              "foo",
0000000000000000000000000000000000000000;;					"image":             "someimage",
0000000000000000000000000000000000000000;;					"image-pull-policy": "Never",
0000000000000000000000000000000000000000;;					"replicas":          "1",
0000000000000000000000000000000000000000;;					"port":              "",
0000000000000000000000000000000000000000;;					"args":              []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: &one,
0000000000000000000000000000000000000000;;						Selector: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;						Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:            "foo",
0000000000000000000000000000000000000000;;										Image:           "someimage",
0000000000000000000000000000000000000000;;										ImagePullPolicy: v1.PullNever,
0000000000000000000000000000000000000000;;										Args:            []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"port":     "",
0000000000000000000000000000000000000000;;					"args":     []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;					"command":  "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: &one,
0000000000000000000000000000000000000000;;						Selector: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;						Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:    "foo",
0000000000000000000000000000000000000000;;										Image:   "someimage",
0000000000000000000000000000000000000000;;										Command: []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"port":     "80",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: &one,
0000000000000000000000000000000000000000;;						Selector: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;						Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "foo",
0000000000000000000000000000000000000000;;										Image: "someimage",
0000000000000000000000000000000000000000;;										Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												ContainerPort: 80,
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":              "foo",
0000000000000000000000000000000000000000;;					"image":             "someimage",
0000000000000000000000000000000000000000;;					"image-pull-policy": "IfNotPresent",
0000000000000000000000000000000000000000;;					"replicas":          "1",
0000000000000000000000000000000000000000;;					"port":              "80",
0000000000000000000000000000000000000000;;					"hostport":          "80",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: &one,
0000000000000000000000000000000000000000;;						Selector: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;						Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:            "foo",
0000000000000000000000000000000000000000;;										Image:           "someimage",
0000000000000000000000000000000000000000;;										ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;										Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												ContainerPort: 80,
0000000000000000000000000000000000000000;;												HostPort:      80,
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"hostport": "80",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"labels":   "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: &one,
0000000000000000000000000000000000000000;;						Selector: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;						Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "foo",
0000000000000000000000000000000000000000;;										Image: "someimage",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"hostport": "80",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"labels":   "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"requests": "cpu100m,memory=100Mi",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"labels":   "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"requests": "cpu=100m&memory=100Mi",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"labels":   "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"requests": "cpu=",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"labels":   "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"requests": "cpu=100m,memory=100Mi",
0000000000000000000000000000000000000000;;					"limits":   "cpu=400m,memory=200Mi",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ReplicationController{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.ReplicationControllerSpec{
0000000000000000000000000000000000000000;;						Replicas: &one,
0000000000000000000000000000000000000000;;						Selector: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;						Template: &v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "foo",
0000000000000000000000000000000000000000;;										Image: "someimage",
0000000000000000000000000000000000000000;;										Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;											Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;												v1.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;												v1.ResourceMemory: resource.MustParse("100Mi"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;											Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;												v1.ResourceCPU:    resource.MustParse("400m"),
0000000000000000000000000000000000000000;;												v1.ResourceMemory: resource.MustParse("200Mi"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		generator := BasicReplicationController{}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			t.Logf("%d: %#v", i, obj)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*v1.ReplicationController).Spec.Template, test.expected.Spec.Template) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v", test.expected.Spec.Template, obj.(*v1.ReplicationController).Spec.Template)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGeneratePod(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *v1.Pod
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":  "foo",
0000000000000000000000000000000000000000;;					"image": "someimage",
0000000000000000000000000000000000000000;;					"port":  "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "foo",
0000000000000000000000000000000000000000;;								Image:           "someimage",
0000000000000000000000000000000000000000;;								ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						DNSPolicy:     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":  "foo",
0000000000000000000000000000000000000000;;					"image": "someimage",
0000000000000000000000000000000000000000;;					"env":   []string{"a", "c"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":              "foo",
0000000000000000000000000000000000000000;;					"image":             "someimage",
0000000000000000000000000000000000000000;;					"image-pull-policy": "Always",
0000000000000000000000000000000000000000;;					"env":               []string{"a=b", "c=d"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "foo",
0000000000000000000000000000000000000000;;								Image:           "someimage",
0000000000000000000000000000000000000000;;								ImagePullPolicy: v1.PullAlways,
0000000000000000000000000000000000000000;;								Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "a",
0000000000000000000000000000000000000000;;										Value: "b",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:  "c",
0000000000000000000000000000000000000000;;										Value: "d",
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						DNSPolicy:     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":  "foo",
0000000000000000000000000000000000000000;;					"image": "someimage",
0000000000000000000000000000000000000000;;					"port":  "80",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "foo",
0000000000000000000000000000000000000000;;								Image:           "someimage",
0000000000000000000000000000000000000000;;								ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;								Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										ContainerPort: 80,
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						DNSPolicy:     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"port":     "80",
0000000000000000000000000000000000000000;;					"hostport": "80",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"run": "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "foo",
0000000000000000000000000000000000000000;;								Image:           "someimage",
0000000000000000000000000000000000000000;;								ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;								Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										ContainerPort: 80,
0000000000000000000000000000000000000000;;										HostPort:      80,
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						DNSPolicy:     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"hostport": "80",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"labels":   "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "foo",
0000000000000000000000000000000000000000;;								Image:           "someimage",
0000000000000000000000000000000000000000;;								ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						DNSPolicy:     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":     "foo",
0000000000000000000000000000000000000000;;					"image":    "someimage",
0000000000000000000000000000000000000000;;					"replicas": "1",
0000000000000000000000000000000000000000;;					"labels":   "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"stdin":    "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "foo",
0000000000000000000000000000000000000000;;								Image:           "someimage",
0000000000000000000000000000000000000000;;								ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;								Stdin:           true,
0000000000000000000000000000000000000000;;								StdinOnce:       true,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						DNSPolicy:     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":             "foo",
0000000000000000000000000000000000000000;;					"image":            "someimage",
0000000000000000000000000000000000000000;;					"replicas":         "1",
0000000000000000000000000000000000000000;;					"labels":           "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"stdin":            "true",
0000000000000000000000000000000000000000;;					"leave-stdin-open": "true",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name:            "foo",
0000000000000000000000000000000000000000;;								Image:           "someimage",
0000000000000000000000000000000000000000;;								ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;								Stdin:           true,
0000000000000000000000000000000000000000;;								StdinOnce:       false,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						DNSPolicy:     v1.DNSClusterFirst,
0000000000000000000000000000000000000000;;						RestartPolicy: v1.RestartPolicyAlways,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		generator := BasicPod{}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*v1.Pod), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v", test.expected, obj.(*v1.Pod))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		three := int32(3)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *extensionsv1beta1.Deployment
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"labels":            "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":              "foo",
0000000000000000000000000000000000000000;;					"replicas":          "3",
0000000000000000000000000000000000000000;;					"image":             "someimage",
0000000000000000000000000000000000000000;;					"image-pull-policy": "Always",
0000000000000000000000000000000000000000;;					"port":              "80",
0000000000000000000000000000000000000000;;					"hostport":          "80",
0000000000000000000000000000000000000000;;					"stdin":             "true",
0000000000000000000000000000000000000000;;					"command":           "true",
0000000000000000000000000000000000000000;;					"args":              []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;					"env":               []string{"a=b", "c=d"},
0000000000000000000000000000000000000000;;					"requests":          "cpu=100m,memory=100Mi",
0000000000000000000000000000000000000000;;					"limits":            "cpu=400m,memory=200Mi",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &extensionsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: extensionsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: &three,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar", "baz": "blah"}},
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:            "foo",
0000000000000000000000000000000000000000;;										Image:           "someimage",
0000000000000000000000000000000000000000;;										ImagePullPolicy: v1.PullAlways,
0000000000000000000000000000000000000000;;										Stdin:           true,
0000000000000000000000000000000000000000;;										Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												ContainerPort: 80,
0000000000000000000000000000000000000000;;												HostPort:      80,
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Command: []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;										Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:  "a",
0000000000000000000000000000000000000000;;												Value: "b",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:  "c",
0000000000000000000000000000000000000000;;												Value: "d",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;											Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;												v1.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;												v1.ResourceMemory: resource.MustParse("100Mi"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;											Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;												v1.ResourceCPU:    resource.MustParse("400m"),
0000000000000000000000000000000000000000;;												v1.ResourceMemory: resource.MustParse("200Mi"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		generator := DeploymentV1Beta1{}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*extensionsv1beta1.Deployment), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v", test.expected, obj.(*extensionsv1beta1.Deployment))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateAppsDeployment(t *testing.T) {
0000000000000000000000000000000000000000;;		three := int32(3)
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *appsv1beta1.Deployment
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"labels":            "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":              "foo",
0000000000000000000000000000000000000000;;					"replicas":          "3",
0000000000000000000000000000000000000000;;					"image":             "someimage",
0000000000000000000000000000000000000000;;					"image-pull-policy": "Always",
0000000000000000000000000000000000000000;;					"port":              "80",
0000000000000000000000000000000000000000;;					"hostport":          "80",
0000000000000000000000000000000000000000;;					"stdin":             "true",
0000000000000000000000000000000000000000;;					"command":           "true",
0000000000000000000000000000000000000000;;					"args":              []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;					"env":               []string{"a=b", "c=d"},
0000000000000000000000000000000000000000;;					"requests":          "cpu=100m,memory=100Mi",
0000000000000000000000000000000000000000;;					"limits":            "cpu=400m,memory=200Mi",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &appsv1beta1.Deployment{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: appsv1beta1.DeploymentSpec{
0000000000000000000000000000000000000000;;						Replicas: &three,
0000000000000000000000000000000000000000;;						Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar", "baz": "blah"}},
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:            "foo",
0000000000000000000000000000000000000000;;										Image:           "someimage",
0000000000000000000000000000000000000000;;										ImagePullPolicy: v1.PullAlways,
0000000000000000000000000000000000000000;;										Stdin:           true,
0000000000000000000000000000000000000000;;										Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												ContainerPort: 80,
0000000000000000000000000000000000000000;;												HostPort:      80,
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Command: []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;										Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:  "a",
0000000000000000000000000000000000000000;;												Value: "b",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:  "c",
0000000000000000000000000000000000000000;;												Value: "d",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;											Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;												v1.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;												v1.ResourceMemory: resource.MustParse("100Mi"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;											Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;												v1.ResourceCPU:    resource.MustParse("400m"),
0000000000000000000000000000000000000000;;												v1.ResourceMemory: resource.MustParse("200Mi"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		generator := DeploymentAppsV1Beta1{}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*appsv1beta1.Deployment), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v", test.expected, obj.(*appsv1beta1.Deployment))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateJob(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *batchv1.Job
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"labels":           "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":             "foo",
0000000000000000000000000000000000000000;;					"image":            "someimage",
0000000000000000000000000000000000000000;;					"port":             "80",
0000000000000000000000000000000000000000;;					"hostport":         "80",
0000000000000000000000000000000000000000;;					"stdin":            "true",
0000000000000000000000000000000000000000;;					"leave-stdin-open": "true",
0000000000000000000000000000000000000000;;					"command":          "true",
0000000000000000000000000000000000000000;;					"args":             []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;					"env":              []string{"a=b", "c=d"},
0000000000000000000000000000000000000000;;					"requests":         "cpu=100m,memory=100Mi",
0000000000000000000000000000000000000000;;					"limits":           "cpu=400m,memory=200Mi",
0000000000000000000000000000000000000000;;					"restart":          "OnFailure",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv1.Job{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;						Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;								Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;								RestartPolicy: v1.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;								Containers: []v1.Container{
0000000000000000000000000000000000000000;;									{
0000000000000000000000000000000000000000;;										Name:      "foo",
0000000000000000000000000000000000000000;;										Image:     "someimage",
0000000000000000000000000000000000000000;;										Stdin:     true,
0000000000000000000000000000000000000000;;										StdinOnce: false,
0000000000000000000000000000000000000000;;										Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												ContainerPort: 80,
0000000000000000000000000000000000000000;;												HostPort:      80,
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Command: []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;										Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:  "a",
0000000000000000000000000000000000000000;;												Value: "b",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:  "c",
0000000000000000000000000000000000000000;;												Value: "d",
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;											Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;												v1.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;												v1.ResourceMemory: resource.MustParse("100Mi"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;											Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;												v1.ResourceCPU:    resource.MustParse("400m"),
0000000000000000000000000000000000000000;;												v1.ResourceMemory: resource.MustParse("200Mi"),
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		generator := JobV1{}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*batchv1.Job), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v", test.expected, obj.(*batchv1.Job))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateCronJob(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			params    map[string]interface{}
0000000000000000000000000000000000000000;;			expected  *batchv2alpha1.CronJob
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				params: map[string]interface{}{
0000000000000000000000000000000000000000;;					"labels":           "foo=bar,baz=blah",
0000000000000000000000000000000000000000;;					"name":             "foo",
0000000000000000000000000000000000000000;;					"image":            "someimage",
0000000000000000000000000000000000000000;;					"port":             "80",
0000000000000000000000000000000000000000;;					"hostport":         "80",
0000000000000000000000000000000000000000;;					"stdin":            "true",
0000000000000000000000000000000000000000;;					"leave-stdin-open": "true",
0000000000000000000000000000000000000000;;					"command":          "true",
0000000000000000000000000000000000000000;;					"args":             []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;					"env":              []string{"a=b", "c=d"},
0000000000000000000000000000000000000000;;					"requests":         "cpu=100m,memory=100Mi",
0000000000000000000000000000000000000000;;					"limits":           "cpu=400m,memory=200Mi",
0000000000000000000000000000000000000000;;					"restart":          "OnFailure",
0000000000000000000000000000000000000000;;					"schedule":         "0/5 * * * ?",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &batchv2alpha1.CronJob{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:   "foo",
0000000000000000000000000000000000000000;;						Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: batchv2alpha1.CronJobSpec{
0000000000000000000000000000000000000000;;						Schedule:          "0/5 * * * ?",
0000000000000000000000000000000000000000;;						ConcurrencyPolicy: batchv2alpha1.AllowConcurrent,
0000000000000000000000000000000000000000;;						JobTemplate: batchv2alpha1.JobTemplateSpec{
0000000000000000000000000000000000000000;;							Spec: batchv1.JobSpec{
0000000000000000000000000000000000000000;;								Template: v1.PodTemplateSpec{
0000000000000000000000000000000000000000;;									ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;										Labels: map[string]string{"foo": "bar", "baz": "blah"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;										RestartPolicy: v1.RestartPolicyOnFailure,
0000000000000000000000000000000000000000;;										Containers: []v1.Container{
0000000000000000000000000000000000000000;;											{
0000000000000000000000000000000000000000;;												Name:      "foo",
0000000000000000000000000000000000000000;;												Image:     "someimage",
0000000000000000000000000000000000000000;;												Stdin:     true,
0000000000000000000000000000000000000000;;												StdinOnce: false,
0000000000000000000000000000000000000000;;												Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;													{
0000000000000000000000000000000000000000;;														ContainerPort: 80,
0000000000000000000000000000000000000000;;														HostPort:      80,
0000000000000000000000000000000000000000;;													},
0000000000000000000000000000000000000000;;												},
0000000000000000000000000000000000000000;;												Command: []string{"bar", "baz", "blah"},
0000000000000000000000000000000000000000;;												Env: []v1.EnvVar{
0000000000000000000000000000000000000000;;													{
0000000000000000000000000000000000000000;;														Name:  "a",
0000000000000000000000000000000000000000;;														Value: "b",
0000000000000000000000000000000000000000;;													},
0000000000000000000000000000000000000000;;													{
0000000000000000000000000000000000000000;;														Name:  "c",
0000000000000000000000000000000000000000;;														Value: "d",
0000000000000000000000000000000000000000;;													},
0000000000000000000000000000000000000000;;												},
0000000000000000000000000000000000000000;;												Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;													Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;														v1.ResourceCPU:    resource.MustParse("100m"),
0000000000000000000000000000000000000000;;														v1.ResourceMemory: resource.MustParse("100Mi"),
0000000000000000000000000000000000000000;;													},
0000000000000000000000000000000000000000;;													Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;														v1.ResourceCPU:    resource.MustParse("400m"),
0000000000000000000000000000000000000000;;														v1.ResourceMemory: resource.MustParse("200Mi"),
0000000000000000000000000000000000000000;;													},
0000000000000000000000000000000000000000;;												},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		generator := CronJobV2Alpha1{}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			obj, err := generator.Generate(test.params)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.(*batchv2alpha1.CronJob), test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v", test.expected, obj.(*batchv2alpha1.CronJob))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseEnv(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			envArray  []string
0000000000000000000000000000000000000000;;			expected  []v1.EnvVar
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;			test      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				envArray: []string{
0000000000000000000000000000000000000000;;					"THIS_ENV=isOK",
0000000000000000000000000000000000000000;;					"HAS_COMMAS=foo,bar",
0000000000000000000000000000000000000000;;					"HAS_EQUALS=jJnro54iUu75xNy==",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []v1.EnvVar{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "THIS_ENV",
0000000000000000000000000000000000000000;;						Value: "isOK",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "HAS_COMMAS",
0000000000000000000000000000000000000000;;						Value: "foo,bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "HAS_EQUALS",
0000000000000000000000000000000000000000;;						Value: "jJnro54iUu75xNy==",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;				test:      "test case 1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				envArray: []string{
0000000000000000000000000000000000000000;;					"WITH_OUT_EQUALS",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  []v1.EnvVar{},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				test:      "test case 2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				envArray: []string{
0000000000000000000000000000000000000000;;					"WITH_OUT_VALUES=",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: []v1.EnvVar{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:  "WITH_OUT_VALUES",
0000000000000000000000000000000000000000;;						Value: "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;				test:      "test case 3",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				envArray: []string{
0000000000000000000000000000000000000000;;					"=WITH_OUT_NAME",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected:  []v1.EnvVar{},
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;				test:      "test case 4",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			envs, err := parseEnvs(test.envArray)
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v (%s)", err, test.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(envs, test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("\nexpected:\n%#v\nsaw:\n%#v (%s)", test.expected, envs, test.test)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
