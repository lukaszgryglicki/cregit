0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a413b1bdfe7c0e63bf277d9c78a0acea533656e7;pkg/version/flag/flag.go[pkg/version/flag/flag.go][pkg/version/verflag/verflag.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package verflag defines utility functions to handle command line flags
0000000000000000000000000000000000000000;;	// related to version of Kubernetes.
0000000000000000000000000000000000000000;;	package verflag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flag "github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/version"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type versionValue int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		VersionFalse versionValue = 0
0000000000000000000000000000000000000000;;		VersionTrue  versionValue = 1
0000000000000000000000000000000000000000;;		VersionRaw   versionValue = 2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const strRawVersion string = "raw"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *versionValue) IsBoolFlag() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *versionValue) Get() interface{} {
0000000000000000000000000000000000000000;;		return versionValue(*v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *versionValue) Set(s string) error {
0000000000000000000000000000000000000000;;		if s == strRawVersion {
0000000000000000000000000000000000000000;;			*v = VersionRaw
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		boolVal, err := strconv.ParseBool(s)
0000000000000000000000000000000000000000;;		if boolVal {
0000000000000000000000000000000000000000;;			*v = VersionTrue
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			*v = VersionFalse
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *versionValue) String() string {
0000000000000000000000000000000000000000;;		if *v == VersionRaw {
0000000000000000000000000000000000000000;;			return strRawVersion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%v", bool(*v == VersionTrue))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The type of the flag as required by the pflag.Value interface
0000000000000000000000000000000000000000;;	func (v *versionValue) Type() string {
0000000000000000000000000000000000000000;;		return "version"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func VersionVar(p *versionValue, name string, value versionValue, usage string) {
0000000000000000000000000000000000000000;;		*p = value
0000000000000000000000000000000000000000;;		flag.Var(p, name, usage)
0000000000000000000000000000000000000000;;		// "--version" will be treated as "--version=true"
0000000000000000000000000000000000000000;;		flag.Lookup(name).NoOptDefVal = "true"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Version(name string, value versionValue, usage string) *versionValue {
0000000000000000000000000000000000000000;;		p := new(versionValue)
0000000000000000000000000000000000000000;;		VersionVar(p, name, value, usage)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		versionFlag = Version("version", VersionFalse, "Print version information and quit")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrintAndExitIfRequested will check if the -version flag was passed
0000000000000000000000000000000000000000;;	// and, if so, print the version and exit.
0000000000000000000000000000000000000000;;	func PrintAndExitIfRequested() {
0000000000000000000000000000000000000000;;		if *versionFlag == VersionRaw {
0000000000000000000000000000000000000000;;			fmt.Printf("%#v\n", version.Get())
0000000000000000000000000000000000000000;;			os.Exit(0)
0000000000000000000000000000000000000000;;		} else if *versionFlag == VersionTrue {
0000000000000000000000000000000000000000;;			fmt.Printf("Kubernetes %s\n", version.Get())
0000000000000000000000000000000000000000;;			os.Exit(0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
