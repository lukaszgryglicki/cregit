0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
bbc91038166856bd4e45403fb7f5a2750dbfe17f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNetworkHostGetsPodNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		testKubelet := newTestKubelet(t, true)
0000000000000000000000000000000000000000;;		defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;		nh := networkHost{testKubelet.kubelet}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualPod, _ := nh.GetPodByName("", "")
0000000000000000000000000000000000000000;;		if actualPod != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Was expected nil, received %v instead", actualPod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNetworkHostGetsKubeClient(t *testing.T) {
0000000000000000000000000000000000000000;;		testKubelet := newTestKubelet(t, true)
0000000000000000000000000000000000000000;;		defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;		nh := networkHost{testKubelet.kubelet}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if nh.GetKubeClient() != testKubelet.fakeKubeClient {
0000000000000000000000000000000000000000;;			t.Fatalf("NetworkHost client does not match testKubelet's client")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNetworkHostGetsRuntime(t *testing.T) {
0000000000000000000000000000000000000000;;		testKubelet := newTestKubelet(t, true)
0000000000000000000000000000000000000000;;		defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;		nh := networkHost{testKubelet.kubelet}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if nh.GetRuntime() != testKubelet.fakeRuntime {
0000000000000000000000000000000000000000;;			t.Fatalf("NetworkHost runtime does not match testKubelet's runtime")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNetworkHostSupportsLegacyFeatures(t *testing.T) {
0000000000000000000000000000000000000000;;		testKubelet := newTestKubelet(t, true)
0000000000000000000000000000000000000000;;		defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;		nh := networkHost{testKubelet.kubelet}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if nh.SupportsLegacyFeatures() == false {
0000000000000000000000000000000000000000;;			t.Fatalf("SupportsLegacyFeatures should not be false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNoOpHostGetsName(t *testing.T) {
0000000000000000000000000000000000000000;;		nh := NoOpLegacyHost{}
0000000000000000000000000000000000000000;;		pod, err := nh.GetPodByName("", "")
0000000000000000000000000000000000000000;;		if pod != nil && err != true {
0000000000000000000000000000000000000000;;			t.Fatalf("noOpLegacyHost getpodbyname expected to be nil and true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNoOpHostGetsKubeClient(t *testing.T) {
0000000000000000000000000000000000000000;;		nh := NoOpLegacyHost{}
0000000000000000000000000000000000000000;;		if nh.GetKubeClient() != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("noOpLegacyHost client expected to be nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNoOpHostGetsRuntime(t *testing.T) {
0000000000000000000000000000000000000000;;		nh := NoOpLegacyHost{}
0000000000000000000000000000000000000000;;		if nh.GetRuntime() != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("noOpLegacyHost runtime expected to be nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNoOpHostSupportsLegacyFeatures(t *testing.T) {
0000000000000000000000000000000000000000;;		nh := NoOpLegacyHost{}
0000000000000000000000000000000000000000;;		if nh.SupportsLegacyFeatures() != false {
0000000000000000000000000000000000000000;;			t.Fatalf("noOpLegacyHost legacy features expected to be false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
