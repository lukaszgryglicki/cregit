0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e0dfc0cdb0946454b2379162a0ce543118a5e5cf;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package images
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// Container image pull failed, kubelet is backing off image pull
0000000000000000000000000000000000000000;;		ErrImagePullBackOff = errors.New("ImagePullBackOff")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unable to inspect image
0000000000000000000000000000000000000000;;		ErrImageInspect = errors.New("ImageInspectError")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// General image pull error
0000000000000000000000000000000000000000;;		ErrImagePull = errors.New("ErrImagePull")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Required Image is absent on host and PullPolicy is NeverPullImage
0000000000000000000000000000000000000000;;		ErrImageNeverPull = errors.New("ErrImageNeverPull")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get http error when pulling image from registry
0000000000000000000000000000000000000000;;		RegistryUnavailable = errors.New("RegistryUnavailable")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unable to parse the image name.
0000000000000000000000000000000000000000;;		ErrInvalidImageName = errors.New("InvalidImageName")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageManager provides an interface to manage the lifecycle of images.
0000000000000000000000000000000000000000;;	// Implementations of this interface are expected to deal with pulling (downloading),
0000000000000000000000000000000000000000;;	// managing, and deleting container images.
0000000000000000000000000000000000000000;;	// Implementations are expected to abstract the underlying runtimes.
0000000000000000000000000000000000000000;;	// Implementations are expected to be thread safe.
0000000000000000000000000000000000000000;;	type ImageManager interface {
0000000000000000000000000000000000000000;;		// EnsureImageExists ensures that image specified in `container` exists.
0000000000000000000000000000000000000000;;		EnsureImageExists(pod *v1.Pod, container *v1.Container, pullSecrets []v1.Secret) (string, string, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO(ronl): consolidating image managing and deleting operation in this interface
0000000000000000000000000000000000000000;;	}
