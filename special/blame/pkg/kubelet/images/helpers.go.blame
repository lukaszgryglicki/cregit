0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
03f92ecd4281d3993cb459fb41d40fba83f9bb31;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package images
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// throttleImagePulling wraps kubecontainer.ImageService to throttle image
0000000000000000000000000000000000000000;;	// pulling based on the given QPS and burst limits. If QPS is zero, defaults
0000000000000000000000000000000000000000;;	// to no throttling.
0000000000000000000000000000000000000000;;	func throttleImagePulling(imageService kubecontainer.ImageService, qps float32, burst int) kubecontainer.ImageService {
0000000000000000000000000000000000000000;;		if qps == 0.0 {
0000000000000000000000000000000000000000;;			return imageService
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &throttledImageService{
0000000000000000000000000000000000000000;;			ImageService: imageService,
0000000000000000000000000000000000000000;;			limiter:      flowcontrol.NewTokenBucketRateLimiter(qps, burst),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type throttledImageService struct {
0000000000000000000000000000000000000000;;		kubecontainer.ImageService
0000000000000000000000000000000000000000;;		limiter flowcontrol.RateLimiter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ts throttledImageService) PullImage(image kubecontainer.ImageSpec, secrets []v1.Secret) (string, error) {
0000000000000000000000000000000000000000;;		if ts.limiter.TryAccept() {
0000000000000000000000000000000000000000;;			return ts.ImageService.PullImage(image, secrets)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("pull QPS exceeded.")
0000000000000000000000000000000000000000;;	}
