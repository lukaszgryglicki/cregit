0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
229f3bb63358a042c389767308233047877a4547;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package images
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pullResult struct {
0000000000000000000000000000000000000000;;		imageRef string
0000000000000000000000000000000000000000;;		err      error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type imagePuller interface {
0000000000000000000000000000000000000000;;		pullImage(kubecontainer.ImageSpec, []v1.Secret, chan<- pullResult)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _, _ imagePuller = &parallelImagePuller{}, &serialImagePuller{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type parallelImagePuller struct {
0000000000000000000000000000000000000000;;		imageService kubecontainer.ImageService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newParallelImagePuller(imageService kubecontainer.ImageService) imagePuller {
0000000000000000000000000000000000000000;;		return &parallelImagePuller{imageService}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pip *parallelImagePuller) pullImage(spec kubecontainer.ImageSpec, pullSecrets []v1.Secret, pullChan chan<- pullResult) {
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			imageRef, err := pip.imageService.PullImage(spec, pullSecrets)
0000000000000000000000000000000000000000;;			pullChan <- pullResult{
0000000000000000000000000000000000000000;;				imageRef: imageRef,
0000000000000000000000000000000000000000;;				err:      err,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Maximum number of image pull requests than can be queued.
0000000000000000000000000000000000000000;;	const maxImagePullRequests = 10
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type serialImagePuller struct {
0000000000000000000000000000000000000000;;		imageService kubecontainer.ImageService
0000000000000000000000000000000000000000;;		pullRequests chan *imagePullRequest
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSerialImagePuller(imageService kubecontainer.ImageService) imagePuller {
0000000000000000000000000000000000000000;;		imagePuller := &serialImagePuller{imageService, make(chan *imagePullRequest, maxImagePullRequests)}
0000000000000000000000000000000000000000;;		go wait.Until(imagePuller.processImagePullRequests, time.Second, wait.NeverStop)
0000000000000000000000000000000000000000;;		return imagePuller
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type imagePullRequest struct {
0000000000000000000000000000000000000000;;		spec        kubecontainer.ImageSpec
0000000000000000000000000000000000000000;;		pullSecrets []v1.Secret
0000000000000000000000000000000000000000;;		pullChan    chan<- pullResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sip *serialImagePuller) pullImage(spec kubecontainer.ImageSpec, pullSecrets []v1.Secret, pullChan chan<- pullResult) {
0000000000000000000000000000000000000000;;		sip.pullRequests <- &imagePullRequest{
0000000000000000000000000000000000000000;;			spec:        spec,
0000000000000000000000000000000000000000;;			pullSecrets: pullSecrets,
0000000000000000000000000000000000000000;;			pullChan:    pullChan,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sip *serialImagePuller) processImagePullRequests() {
0000000000000000000000000000000000000000;;		for pullRequest := range sip.pullRequests {
0000000000000000000000000000000000000000;;			imageRef, err := sip.imageService.PullImage(pullRequest.spec, pullRequest.pullSecrets)
0000000000000000000000000000000000000000;;			pullRequest.pullChan <- pullResult{
0000000000000000000000000000000000000000;;				imageRef: imageRef,
0000000000000000000000000000000000000000;;				err:      err,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
