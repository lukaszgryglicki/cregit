0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
fff820f3e71ae96c5851642b149fefbb76e15935;pkg/kubelet/container/serialized_image_puller_test.go[pkg/kubelet/container/serialized_image_puller_test.go][pkg/kubelet/images/image_manager_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package images
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		ctest "k8s.io/kubernetes/pkg/kubelet/container/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pullerExpects struct {
0000000000000000000000000000000000000000;;		calls []string
0000000000000000000000000000000000000000;;		err   error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pullerTestCase struct {
0000000000000000000000000000000000000000;;		containerImage string
0000000000000000000000000000000000000000;;		policy         v1.PullPolicy
0000000000000000000000000000000000000000;;		inspectErr     error
0000000000000000000000000000000000000000;;		pullerErr      error
0000000000000000000000000000000000000000;;		expected       []pullerExpects
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pullerTestCases() []pullerTestCase {
0000000000000000000000000000000000000000;;		return []pullerTestCase{
0000000000000000000000000000000000000000;;			{ // pull missing image
0000000000000000000000000000000000000000;;				containerImage: "missing_image",
0000000000000000000000000000000000000000;;				policy:         v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;				inspectErr:     nil,
0000000000000000000000000000000000000000;;				pullerErr:      nil,
0000000000000000000000000000000000000000;;				expected: []pullerExpects{
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef", "PullImage"}, nil},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{ // image present, don't pull
0000000000000000000000000000000000000000;;				containerImage: "present_image",
0000000000000000000000000000000000000000;;				policy:         v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;				inspectErr:     nil,
0000000000000000000000000000000000000000;;				pullerErr:      nil,
0000000000000000000000000000000000000000;;				expected: []pullerExpects{
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, nil},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, nil},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, nil},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			// image present, pull it
0000000000000000000000000000000000000000;;			{containerImage: "present_image",
0000000000000000000000000000000000000000;;				policy:     v1.PullAlways,
0000000000000000000000000000000000000000;;				inspectErr: nil,
0000000000000000000000000000000000000000;;				pullerErr:  nil,
0000000000000000000000000000000000000000;;				expected: []pullerExpects{
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef", "PullImage"}, nil},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef", "PullImage"}, nil},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef", "PullImage"}, nil},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			// missing image, error PullNever
0000000000000000000000000000000000000000;;			{containerImage: "missing_image",
0000000000000000000000000000000000000000;;				policy:     v1.PullNever,
0000000000000000000000000000000000000000;;				inspectErr: nil,
0000000000000000000000000000000000000000;;				pullerErr:  nil,
0000000000000000000000000000000000000000;;				expected: []pullerExpects{
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImageNeverPull},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImageNeverPull},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImageNeverPull},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			// missing image, unable to inspect
0000000000000000000000000000000000000000;;			{containerImage: "missing_image",
0000000000000000000000000000000000000000;;				policy:     v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;				inspectErr: errors.New("unknown inspectError"),
0000000000000000000000000000000000000000;;				pullerErr:  nil,
0000000000000000000000000000000000000000;;				expected: []pullerExpects{
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImageInspect},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImageInspect},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImageInspect},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			// missing image, unable to fetch
0000000000000000000000000000000000000000;;			{containerImage: "typo_image",
0000000000000000000000000000000000000000;;				policy:     v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;				inspectErr: nil,
0000000000000000000000000000000000000000;;				pullerErr:  errors.New("404"),
0000000000000000000000000000000000000000;;				expected: []pullerExpects{
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef", "PullImage"}, ErrImagePull},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef", "PullImage"}, ErrImagePull},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImagePullBackOff},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef", "PullImage"}, ErrImagePull},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImagePullBackOff},
0000000000000000000000000000000000000000;;					{[]string{"GetImageRef"}, ErrImagePullBackOff},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pullerTestEnv(c pullerTestCase, serialized bool) (puller ImageManager, fakeClock *clock.FakeClock, fakeRuntime *ctest.FakeRuntime, container *v1.Container) {
0000000000000000000000000000000000000000;;		container = &v1.Container{
0000000000000000000000000000000000000000;;			Name:            "container_name",
0000000000000000000000000000000000000000;;			Image:           c.containerImage,
0000000000000000000000000000000000000000;;			ImagePullPolicy: c.policy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		backOff := flowcontrol.NewBackOff(time.Second, time.Minute)
0000000000000000000000000000000000000000;;		fakeClock = clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		backOff.Clock = fakeClock
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeRuntime = &ctest.FakeRuntime{}
0000000000000000000000000000000000000000;;		fakeRecorder := &record.FakeRecorder{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeRuntime.ImageList = []Image{{ID: "present_image:latest"}}
0000000000000000000000000000000000000000;;		fakeRuntime.Err = c.pullerErr
0000000000000000000000000000000000000000;;		fakeRuntime.InspectErr = c.inspectErr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		puller = NewImageManager(fakeRecorder, fakeRuntime, backOff, serialized, 0, 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParallelPuller(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "test_pod",
0000000000000000000000000000000000000000;;				Namespace:       "test-ns",
0000000000000000000000000000000000000000;;				UID:             "bar",
0000000000000000000000000000000000000000;;				ResourceVersion: "42",
0000000000000000000000000000000000000000;;				SelfLink:        "/api/v1/pods/foo",
0000000000000000000000000000000000000000;;			}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := pullerTestCases()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			puller, fakeClock, fakeRuntime, container := pullerTestEnv(c, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for tick, expected := range c.expected {
0000000000000000000000000000000000000000;;				fakeRuntime.CalledFunctions = nil
0000000000000000000000000000000000000000;;				fakeClock.Step(time.Second)
0000000000000000000000000000000000000000;;				_, _, err := puller.EnsureImageExists(pod, container, nil)
0000000000000000000000000000000000000000;;				assert.NoError(t, fakeRuntime.AssertCalls(expected.calls), "in test %d tick=%d", i, tick)
0000000000000000000000000000000000000000;;				assert.Equal(t, expected.err, err, "in test %d tick=%d", i, tick)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSerializedPuller(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:            "test_pod",
0000000000000000000000000000000000000000;;				Namespace:       "test-ns",
0000000000000000000000000000000000000000;;				UID:             "bar",
0000000000000000000000000000000000000000;;				ResourceVersion: "42",
0000000000000000000000000000000000000000;;				SelfLink:        "/api/v1/pods/foo",
0000000000000000000000000000000000000000;;			}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := pullerTestCases()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			puller, fakeClock, fakeRuntime, container := pullerTestEnv(c, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for tick, expected := range c.expected {
0000000000000000000000000000000000000000;;				fakeRuntime.CalledFunctions = nil
0000000000000000000000000000000000000000;;				fakeClock.Step(time.Second)
0000000000000000000000000000000000000000;;				_, _, err := puller.EnsureImageExists(pod, container, nil)
0000000000000000000000000000000000000000;;				assert.NoError(t, fakeRuntime.AssertCalls(expected.calls), "in test %d tick=%d", i, tick)
0000000000000000000000000000000000000000;;				assert.Equal(t, expected.err, err, "in test %d tick=%d", i, tick)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestApplyDefaultImageTag(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, testCase := range []struct {
0000000000000000000000000000000000000000;;			Input  string
0000000000000000000000000000000000000000;;			Output string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Input: "root", Output: "root:latest"},
0000000000000000000000000000000000000000;;			{Input: "root:tag", Output: "root:tag"},
0000000000000000000000000000000000000000;;			{Input: "root@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", Output: "root@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			image, err := applyDefaultImageTag(testCase.Input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("applyDefaultImageTag(%s) failed: %v", testCase.Input, err)
0000000000000000000000000000000000000000;;			} else if image != testCase.Output {
0000000000000000000000000000000000000000;;				t.Errorf("Expected image reference: %q, got %q", testCase.Output, image)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
