0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e7b9ca2dcaf51b3c0a9a07ec7d4165b7842c5b4b;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package nvidia
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/dockershim/libdocker"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testActivePodsLister struct {
0000000000000000000000000000000000000000;;		activePods []*v1.Pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tapl *testActivePodsLister) GetActivePods() []*v1.Pod {
0000000000000000000000000000000000000000;;		return tapl.activePods
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeTestPod(numContainers, gpusPerContainer int) *v1.Pod {
0000000000000000000000000000000000000000;;		quantity := resource.NewQuantity(int64(gpusPerContainer), resource.DecimalSI)
0000000000000000000000000000000000000000;;		resources := v1.ResourceRequirements{
0000000000000000000000000000000000000000;;			Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;				v1.ResourceNvidiaGPU: *quantity,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				UID: uuid.NewUUID(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for ; numContainers > 0; numContainers-- {
0000000000000000000000000000000000000000;;			pod.Spec.Containers = append(pod.Spec.Containers, v1.Container{
0000000000000000000000000000000000000000;;				Name:      string(uuid.NewUUID()),
0000000000000000000000000000000000000000;;				Resources: resources,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewNvidiaGPUManager(t *testing.T) {
0000000000000000000000000000000000000000;;		podLister := &testActivePodsLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expects nil GPUManager and an error with nil dockerClient.
0000000000000000000000000000000000000000;;		testGpuManager1, err := NewNvidiaGPUManager(podLister, nil)
0000000000000000000000000000000000000000;;		as := assert.New(t)
0000000000000000000000000000000000000000;;		as.Nil(testGpuManager1)
0000000000000000000000000000000000000000;;		as.NotNil(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expects a GPUManager to be created with non-nil dockerClient.
0000000000000000000000000000000000000000;;		fakeDocker := libdocker.NewFakeDockerClient()
0000000000000000000000000000000000000000;;		testGpuManager2, err := NewNvidiaGPUManager(podLister, fakeDocker)
0000000000000000000000000000000000000000;;		as.NotNil(testGpuManager2)
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expects zero capacity without any GPUs.
0000000000000000000000000000000000000000;;		gpuCapacity := testGpuManager2.Capacity()
0000000000000000000000000000000000000000;;		as.Equal(len(gpuCapacity), 1)
0000000000000000000000000000000000000000;;		rgpu := gpuCapacity[v1.ResourceNvidiaGPU]
0000000000000000000000000000000000000000;;		as.Equal(rgpu.Value(), int64(0))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err2 := testGpuManager2.Start()
0000000000000000000000000000000000000000;;		if !os.IsNotExist(err2) {
0000000000000000000000000000000000000000;;			gpus := reflect.ValueOf(testGpuManager2).Elem().FieldByName("allGPUs").Len()
0000000000000000000000000000000000000000;;			as.NotZero(gpus)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMultiContainerPodGPUAllocation(t *testing.T) {
0000000000000000000000000000000000000000;;		podLister := &testActivePodsLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testGpuManager := &nvidiaGPUManager{
0000000000000000000000000000000000000000;;			activePodsLister: podLister,
0000000000000000000000000000000000000000;;			allGPUs:          sets.NewString("/dev/nvidia0", "/dev/nvidia1"),
0000000000000000000000000000000000000000;;			allocated:        newPodGPUs(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expect that no devices are in use.
0000000000000000000000000000000000000000;;		gpusInUse := testGpuManager.gpusInUse()
0000000000000000000000000000000000000000;;		as := assert.New(t)
0000000000000000000000000000000000000000;;		as.Equal(len(gpusInUse.devices()), 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Allocated GPUs for a pod with two containers.
0000000000000000000000000000000000000000;;		pod := makeTestPod(2, 1)
0000000000000000000000000000000000000000;;		// Allocate for the first container.
0000000000000000000000000000000000000000;;		devices1, err := testGpuManager.AllocateGPU(pod, &pod.Spec.Containers[0])
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;		as.Equal(len(devices1), 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podLister.activePods = append(podLister.activePods, pod)
0000000000000000000000000000000000000000;;		// Allocate for the second container.
0000000000000000000000000000000000000000;;		devices2, err := testGpuManager.AllocateGPU(pod, &pod.Spec.Containers[1])
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;		as.Equal(len(devices2), 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		as.NotEqual(devices1, devices2, "expected containers to get different devices")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// further allocations should fail.
0000000000000000000000000000000000000000;;		newPod := makeTestPod(2, 1)
0000000000000000000000000000000000000000;;		devices1, err = testGpuManager.AllocateGPU(newPod, &newPod.Spec.Containers[0])
0000000000000000000000000000000000000000;;		as.NotNil(err, "expected gpu allocation to fail. got: %v", devices1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Now terminate the original pod and observe that GPU allocation for new pod succeeds.
0000000000000000000000000000000000000000;;		podLister.activePods = podLister.activePods[:0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		devices1, err = testGpuManager.AllocateGPU(newPod, &newPod.Spec.Containers[0])
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;		as.Equal(len(devices1), 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podLister.activePods = append(podLister.activePods, newPod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		devices2, err = testGpuManager.AllocateGPU(newPod, &newPod.Spec.Containers[1])
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;		as.Equal(len(devices2), 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		as.NotEqual(devices1, devices2, "expected containers to get different devices")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMultiPodGPUAllocation(t *testing.T) {
0000000000000000000000000000000000000000;;		podLister := &testActivePodsLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testGpuManager := &nvidiaGPUManager{
0000000000000000000000000000000000000000;;			activePodsLister: podLister,
0000000000000000000000000000000000000000;;			allGPUs:          sets.NewString("/dev/nvidia0", "/dev/nvidia1"),
0000000000000000000000000000000000000000;;			allocated:        newPodGPUs(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expect that no devices are in use.
0000000000000000000000000000000000000000;;		gpusInUse := testGpuManager.gpusInUse()
0000000000000000000000000000000000000000;;		as := assert.New(t)
0000000000000000000000000000000000000000;;		as.Equal(len(gpusInUse.devices()), 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Allocated GPUs for a pod with two containers.
0000000000000000000000000000000000000000;;		podA := makeTestPod(1, 1)
0000000000000000000000000000000000000000;;		// Allocate for the first container.
0000000000000000000000000000000000000000;;		devicesA, err := testGpuManager.AllocateGPU(podA, &podA.Spec.Containers[0])
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;		as.Equal(len(devicesA), 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podLister.activePods = append(podLister.activePods, podA)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// further allocations should fail.
0000000000000000000000000000000000000000;;		podB := makeTestPod(1, 1)
0000000000000000000000000000000000000000;;		// Allocate for the first container.
0000000000000000000000000000000000000000;;		devicesB, err := testGpuManager.AllocateGPU(podB, &podB.Spec.Containers[0])
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;		as.Equal(len(devicesB), 1)
0000000000000000000000000000000000000000;;		as.NotEqual(devicesA, devicesB, "expected pods to get different devices")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodContainerRestart(t *testing.T) {
0000000000000000000000000000000000000000;;		podLister := &testActivePodsLister{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testGpuManager := &nvidiaGPUManager{
0000000000000000000000000000000000000000;;			activePodsLister: podLister,
0000000000000000000000000000000000000000;;			allGPUs:          sets.NewString("/dev/nvidia0", "/dev/nvidia1"),
0000000000000000000000000000000000000000;;			allocated:        newPodGPUs(),
0000000000000000000000000000000000000000;;			defaultDevices:   []string{"/dev/nvidia-smi"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Expect that no devices are in use.
0000000000000000000000000000000000000000;;		gpusInUse := testGpuManager.gpusInUse()
0000000000000000000000000000000000000000;;		as := assert.New(t)
0000000000000000000000000000000000000000;;		as.Equal(len(gpusInUse.devices()), 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make a pod with one containers that requests two GPUs.
0000000000000000000000000000000000000000;;		podA := makeTestPod(1, 2)
0000000000000000000000000000000000000000;;		// Allocate GPUs
0000000000000000000000000000000000000000;;		devicesA, err := testGpuManager.AllocateGPU(podA, &podA.Spec.Containers[0])
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;		as.Equal(len(devicesA), 3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podLister.activePods = append(podLister.activePods, podA)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// further allocations should fail.
0000000000000000000000000000000000000000;;		podB := makeTestPod(1, 1)
0000000000000000000000000000000000000000;;		_, err = testGpuManager.AllocateGPU(podB, &podB.Spec.Containers[0])
0000000000000000000000000000000000000000;;		as.NotNil(err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Allcate GPU for existing Pod A.
0000000000000000000000000000000000000000;;		// The same gpus must be returned.
0000000000000000000000000000000000000000;;		devicesAretry, err := testGpuManager.AllocateGPU(podA, &podA.Spec.Containers[0])
0000000000000000000000000000000000000000;;		as.Nil(err)
0000000000000000000000000000000000000000;;		as.Equal(len(devicesA), 3)
0000000000000000000000000000000000000000;;		as.True(sets.NewString(devicesA...).Equal(sets.NewString(devicesAretry...)))
0000000000000000000000000000000000000000;;	}
