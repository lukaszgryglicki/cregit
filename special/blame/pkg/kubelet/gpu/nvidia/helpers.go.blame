0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
cbb0f53c1d06784cddbf1f23e0938cf3e579ef52;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package nvidia
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type containerToGPU map[string]sets.String
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// podGPUs represents a list of pod to GPU mappings.
0000000000000000000000000000000000000000;;	type podGPUs struct {
0000000000000000000000000000000000000000;;		podGPUMapping map[string]containerToGPU
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPodGPUs() *podGPUs {
0000000000000000000000000000000000000000;;		return &podGPUs{
0000000000000000000000000000000000000000;;			podGPUMapping: make(map[string]containerToGPU),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (pgpu *podGPUs) pods() sets.String {
0000000000000000000000000000000000000000;;		ret := sets.NewString()
0000000000000000000000000000000000000000;;		for k := range pgpu.podGPUMapping {
0000000000000000000000000000000000000000;;			ret.Insert(k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pgpu *podGPUs) insert(podUID, contName string, device string) {
0000000000000000000000000000000000000000;;		if _, exists := pgpu.podGPUMapping[podUID]; !exists {
0000000000000000000000000000000000000000;;			pgpu.podGPUMapping[podUID] = make(containerToGPU)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, exists := pgpu.podGPUMapping[podUID][contName]; !exists {
0000000000000000000000000000000000000000;;			pgpu.podGPUMapping[podUID][contName] = sets.NewString()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pgpu.podGPUMapping[podUID][contName].Insert(device)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pgpu *podGPUs) getGPUs(podUID, contName string) sets.String {
0000000000000000000000000000000000000000;;		containers, exists := pgpu.podGPUMapping[podUID]
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		devices, exists := containers[contName]
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return devices
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pgpu *podGPUs) delete(pods []string) {
0000000000000000000000000000000000000000;;		for _, uid := range pods {
0000000000000000000000000000000000000000;;			delete(pgpu.podGPUMapping, uid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (pgpu *podGPUs) devices() sets.String {
0000000000000000000000000000000000000000;;		ret := sets.NewString()
0000000000000000000000000000000000000000;;		for _, containerToGPU := range pgpu.podGPUMapping {
0000000000000000000000000000000000000000;;			for _, deviceSet := range containerToGPU {
0000000000000000000000000000000000000000;;				ret = ret.Union(deviceSet)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
