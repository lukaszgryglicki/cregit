0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
eb579981409449681fd95336da24d22dd3eb6cf0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cadvisor"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Manages policy for diskspace management for disks holding docker images and root fs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mb is used to easily convert an int to an mb
0000000000000000000000000000000000000000;;	const mb = 1024 * 1024
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implementation is thread-safe.
0000000000000000000000000000000000000000;;	type diskSpaceManager interface {
0000000000000000000000000000000000000000;;		// Checks the available disk space
0000000000000000000000000000000000000000;;		IsRootDiskSpaceAvailable() (bool, error)
0000000000000000000000000000000000000000;;		IsRuntimeDiskSpaceAvailable() (bool, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskSpacePolicy struct {
0000000000000000000000000000000000000000;;		// free disk space threshold for filesystem holding docker images.
0000000000000000000000000000000000000000;;		DockerFreeDiskMB int
0000000000000000000000000000000000000000;;		// free disk space threshold for root filesystem. Host volumes are created on root fs.
0000000000000000000000000000000000000000;;		RootFreeDiskMB int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fsInfo struct {
0000000000000000000000000000000000000000;;		Usage     int64
0000000000000000000000000000000000000000;;		Capacity  int64
0000000000000000000000000000000000000000;;		Available int64
0000000000000000000000000000000000000000;;		Timestamp time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type realDiskSpaceManager struct {
0000000000000000000000000000000000000000;;		cadvisor   cadvisor.Interface
0000000000000000000000000000000000000000;;		cachedInfo map[string]fsInfo // cache of filesystem info.
0000000000000000000000000000000000000000;;		lock       sync.Mutex        // protecting cachedInfo.
0000000000000000000000000000000000000000;;		policy     DiskSpacePolicy   // thresholds. Set at creation time.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (dm *realDiskSpaceManager) getFsInfo(fsType string, f func() (cadvisorapi.FsInfo, error)) (fsInfo, error) {
0000000000000000000000000000000000000000;;		dm.lock.Lock()
0000000000000000000000000000000000000000;;		defer dm.lock.Unlock()
0000000000000000000000000000000000000000;;		fsi := fsInfo{}
0000000000000000000000000000000000000000;;		if info, ok := dm.cachedInfo[fsType]; ok {
0000000000000000000000000000000000000000;;			timeLimit := time.Now().Add(-2 * time.Second)
0000000000000000000000000000000000000000;;			if info.Timestamp.After(timeLimit) {
0000000000000000000000000000000000000000;;				fsi = info
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fsi.Timestamp.IsZero() {
0000000000000000000000000000000000000000;;			fs, err := f()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fsInfo{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fsi.Timestamp = time.Now()
0000000000000000000000000000000000000000;;			fsi.Usage = int64(fs.Usage)
0000000000000000000000000000000000000000;;			fsi.Capacity = int64(fs.Capacity)
0000000000000000000000000000000000000000;;			fsi.Available = int64(fs.Available)
0000000000000000000000000000000000000000;;			dm.cachedInfo[fsType] = fsi
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fsi, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (dm *realDiskSpaceManager) IsRuntimeDiskSpaceAvailable() (bool, error) {
0000000000000000000000000000000000000000;;		return dm.isSpaceAvailable("runtime", dm.policy.DockerFreeDiskMB, dm.cadvisor.ImagesFsInfo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (dm *realDiskSpaceManager) IsRootDiskSpaceAvailable() (bool, error) {
0000000000000000000000000000000000000000;;		return dm.isSpaceAvailable("root", dm.policy.RootFreeDiskMB, dm.cadvisor.RootFsInfo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (dm *realDiskSpaceManager) isSpaceAvailable(fsType string, threshold int, f func() (cadvisorapi.FsInfo, error)) (bool, error) {
0000000000000000000000000000000000000000;;		fsInfo, err := dm.getFsInfo(fsType, f)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return true, fmt.Errorf("failed to get fs info for %q: %v", fsType, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fsInfo.Capacity == 0 {
0000000000000000000000000000000000000000;;			return true, fmt.Errorf("could not determine capacity for %q fs. Info: %+v", fsType, fsInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fsInfo.Available < 0 {
0000000000000000000000000000000000000000;;			return true, fmt.Errorf("wrong available space for %q: %+v", fsType, fsInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if fsInfo.Available < int64(threshold)*mb {
0000000000000000000000000000000000000000;;			glog.Infof("Running out of space on disk for %q: available %d MB, threshold %d MB", fsType, fsInfo.Available/mb, threshold)
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func validatePolicy(policy DiskSpacePolicy) error {
0000000000000000000000000000000000000000;;		if policy.DockerFreeDiskMB < 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("free disk space should be non-negative. Invalid value %d for docker disk space threshold.", policy.DockerFreeDiskMB)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if policy.RootFreeDiskMB < 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("free disk space should be non-negative. Invalid value %d for root disk space threshold.", policy.RootFreeDiskMB)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDiskSpaceManager(cadvisorInterface cadvisor.Interface, policy DiskSpacePolicy) (diskSpaceManager, error) {
0000000000000000000000000000000000000000;;		// validate policy
0000000000000000000000000000000000000000;;		err := validatePolicy(policy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dm := &realDiskSpaceManager{
0000000000000000000000000000000000000000;;			cadvisor:   cadvisorInterface,
0000000000000000000000000000000000000000;;			policy:     policy,
0000000000000000000000000000000000000000;;			cachedInfo: map[string]fsInfo{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return dm, nil
0000000000000000000000000000000000000000;;	}
