0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5ae93c8b9b8480297e8e5b4121994213a38f780e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package status
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGeneratePodReadyCondition(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			spec              *v1.PodSpec
0000000000000000000000000000000000000000;;			containerStatuses []v1.ContainerStatus
0000000000000000000000000000000000000000;;			podPhase          v1.PodPhase
0000000000000000000000000000000000000000;;			expected          v1.PodCondition
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:              nil,
0000000000000000000000000000000000000000;;				containerStatuses: nil,
0000000000000000000000000000000000000000;;				podPhase:          v1.PodRunning,
0000000000000000000000000000000000000000;;				expected:          getReadyCondition(false, UnknownContainerStatuses, ""),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:              &v1.PodSpec{},
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{},
0000000000000000000000000000000000000000;;				podPhase:          v1.PodRunning,
0000000000000000000000000000000000000000;;				expected:          getReadyCondition(true, "", ""),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: &v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{Name: "1234"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{},
0000000000000000000000000000000000000000;;				podPhase:          v1.PodRunning,
0000000000000000000000000000000000000000;;				expected:          getReadyCondition(false, ContainersNotReady, "containers with unknown status: [1234]"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: &v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{Name: "1234"},
0000000000000000000000000000000000000000;;						{Name: "5678"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{
0000000000000000000000000000000000000000;;					getReadyStatus("1234"),
0000000000000000000000000000000000000000;;					getReadyStatus("5678"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podPhase: v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: getReadyCondition(true, "", ""),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: &v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{Name: "1234"},
0000000000000000000000000000000000000000;;						{Name: "5678"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{
0000000000000000000000000000000000000000;;					getReadyStatus("1234"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podPhase: v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: getReadyCondition(false, ContainersNotReady, "containers with unknown status: [5678]"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: &v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{Name: "1234"},
0000000000000000000000000000000000000000;;						{Name: "5678"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{
0000000000000000000000000000000000000000;;					getReadyStatus("1234"),
0000000000000000000000000000000000000000;;					getNotReadyStatus("5678"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podPhase: v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: getReadyCondition(false, ContainersNotReady, "containers with unready status: [5678]"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: &v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{Name: "1234"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{
0000000000000000000000000000000000000000;;					getNotReadyStatus("1234"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podPhase: v1.PodSucceeded,
0000000000000000000000000000000000000000;;				expected: getReadyCondition(false, PodCompleted, ""),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			condition := GeneratePodReadyCondition(test.spec, test.containerStatuses, test.podPhase)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(condition, test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("On test case %v, expected:\n%+v\ngot\n%+v\n", i, test.expected, condition)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGeneratePodInitializedCondition(t *testing.T) {
0000000000000000000000000000000000000000;;		noInitContainer := &v1.PodSpec{}
0000000000000000000000000000000000000000;;		oneInitContainer := &v1.PodSpec{
0000000000000000000000000000000000000000;;			InitContainers: []v1.Container{
0000000000000000000000000000000000000000;;				{Name: "1234"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		twoInitContainer := &v1.PodSpec{
0000000000000000000000000000000000000000;;			InitContainers: []v1.Container{
0000000000000000000000000000000000000000;;				{Name: "1234"},
0000000000000000000000000000000000000000;;				{Name: "5678"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			spec              *v1.PodSpec
0000000000000000000000000000000000000000;;			containerStatuses []v1.ContainerStatus
0000000000000000000000000000000000000000;;			podPhase          v1.PodPhase
0000000000000000000000000000000000000000;;			expected          v1.PodCondition
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:              twoInitContainer,
0000000000000000000000000000000000000000;;				containerStatuses: nil,
0000000000000000000000000000000000000000;;				podPhase:          v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: v1.PodCondition{
0000000000000000000000000000000000000000;;					Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;					Reason: UnknownContainerStatuses,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:              noInitContainer,
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{},
0000000000000000000000000000000000000000;;				podPhase:          v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: v1.PodCondition{
0000000000000000000000000000000000000000;;					Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;					Reason: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec:              oneInitContainer,
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{},
0000000000000000000000000000000000000000;;				podPhase:          v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: v1.PodCondition{
0000000000000000000000000000000000000000;;					Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;					Reason: ContainersNotInitialized,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: twoInitContainer,
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{
0000000000000000000000000000000000000000;;					getReadyStatus("1234"),
0000000000000000000000000000000000000000;;					getReadyStatus("5678"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podPhase: v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: v1.PodCondition{
0000000000000000000000000000000000000000;;					Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;					Reason: "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: twoInitContainer,
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{
0000000000000000000000000000000000000000;;					getReadyStatus("1234"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podPhase: v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: v1.PodCondition{
0000000000000000000000000000000000000000;;					Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;					Reason: ContainersNotInitialized,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: twoInitContainer,
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{
0000000000000000000000000000000000000000;;					getReadyStatus("1234"),
0000000000000000000000000000000000000000;;					getNotReadyStatus("5678"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podPhase: v1.PodRunning,
0000000000000000000000000000000000000000;;				expected: v1.PodCondition{
0000000000000000000000000000000000000000;;					Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;					Reason: ContainersNotInitialized,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				spec: oneInitContainer,
0000000000000000000000000000000000000000;;				containerStatuses: []v1.ContainerStatus{
0000000000000000000000000000000000000000;;					getReadyStatus("1234"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podPhase: v1.PodSucceeded,
0000000000000000000000000000000000000000;;				expected: v1.PodCondition{
0000000000000000000000000000000000000000;;					Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;					Reason: PodCompleted,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			test.expected.Type = v1.PodInitialized
0000000000000000000000000000000000000000;;			condition := GeneratePodInitializedCondition(test.spec, test.containerStatuses, test.podPhase)
0000000000000000000000000000000000000000;;			assert.Equal(t, test.expected.Type, condition.Type)
0000000000000000000000000000000000000000;;			assert.Equal(t, test.expected.Status, condition.Status)
0000000000000000000000000000000000000000;;			assert.Equal(t, test.expected.Reason, condition.Reason)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getReadyCondition(ready bool, reason, message string) v1.PodCondition {
0000000000000000000000000000000000000000;;		status := v1.ConditionFalse
0000000000000000000000000000000000000000;;		if ready {
0000000000000000000000000000000000000000;;			status = v1.ConditionTrue
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v1.PodCondition{
0000000000000000000000000000000000000000;;			Type:    v1.PodReady,
0000000000000000000000000000000000000000;;			Status:  status,
0000000000000000000000000000000000000000;;			Reason:  reason,
0000000000000000000000000000000000000000;;			Message: message,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getReadyStatus(cName string) v1.ContainerStatus {
0000000000000000000000000000000000000000;;		return v1.ContainerStatus{
0000000000000000000000000000000000000000;;			Name:  cName,
0000000000000000000000000000000000000000;;			Ready: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getNotReadyStatus(cName string) v1.ContainerStatus {
0000000000000000000000000000000000000000;;		return v1.ContainerStatus{
0000000000000000000000000000000000000000;;			Name:  cName,
0000000000000000000000000000000000000000;;			Ready: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
