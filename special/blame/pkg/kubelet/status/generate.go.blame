0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5ae93c8b9b8480297e8e5b4121994213a38f780e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package status
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		podutil "k8s.io/kubernetes/pkg/api/v1/pod"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		UnknownContainerStatuses = "UnknownContainerStatuses"
0000000000000000000000000000000000000000;;		PodCompleted             = "PodCompleted"
0000000000000000000000000000000000000000;;		ContainersNotReady       = "ContainersNotReady"
0000000000000000000000000000000000000000;;		ContainersNotInitialized = "ContainersNotInitialized"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GeneratePodReadyCondition returns ready condition if all containers in a pod are ready, else it
0000000000000000000000000000000000000000;;	// returns an unready condition.
0000000000000000000000000000000000000000;;	func GeneratePodReadyCondition(spec *v1.PodSpec, containerStatuses []v1.ContainerStatus, podPhase v1.PodPhase) v1.PodCondition {
0000000000000000000000000000000000000000;;		// Find if all containers are ready or not.
0000000000000000000000000000000000000000;;		if containerStatuses == nil {
0000000000000000000000000000000000000000;;			return v1.PodCondition{
0000000000000000000000000000000000000000;;				Type:   v1.PodReady,
0000000000000000000000000000000000000000;;				Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;				Reason: UnknownContainerStatuses,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		unknownContainers := []string{}
0000000000000000000000000000000000000000;;		unreadyContainers := []string{}
0000000000000000000000000000000000000000;;		for _, container := range spec.Containers {
0000000000000000000000000000000000000000;;			if containerStatus, ok := podutil.GetContainerStatus(containerStatuses, container.Name); ok {
0000000000000000000000000000000000000000;;				if !containerStatus.Ready {
0000000000000000000000000000000000000000;;					unreadyContainers = append(unreadyContainers, container.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				unknownContainers = append(unknownContainers, container.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If all containers are known and succeeded, just return PodCompleted.
0000000000000000000000000000000000000000;;		if podPhase == v1.PodSucceeded && len(unknownContainers) == 0 {
0000000000000000000000000000000000000000;;			return v1.PodCondition{
0000000000000000000000000000000000000000;;				Type:   v1.PodReady,
0000000000000000000000000000000000000000;;				Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;				Reason: PodCompleted,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unreadyMessages := []string{}
0000000000000000000000000000000000000000;;		if len(unknownContainers) > 0 {
0000000000000000000000000000000000000000;;			unreadyMessages = append(unreadyMessages, fmt.Sprintf("containers with unknown status: %s", unknownContainers))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(unreadyContainers) > 0 {
0000000000000000000000000000000000000000;;			unreadyMessages = append(unreadyMessages, fmt.Sprintf("containers with unready status: %s", unreadyContainers))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		unreadyMessage := strings.Join(unreadyMessages, ", ")
0000000000000000000000000000000000000000;;		if unreadyMessage != "" {
0000000000000000000000000000000000000000;;			return v1.PodCondition{
0000000000000000000000000000000000000000;;				Type:    v1.PodReady,
0000000000000000000000000000000000000000;;				Status:  v1.ConditionFalse,
0000000000000000000000000000000000000000;;				Reason:  ContainersNotReady,
0000000000000000000000000000000000000000;;				Message: unreadyMessage,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return v1.PodCondition{
0000000000000000000000000000000000000000;;			Type:   v1.PodReady,
0000000000000000000000000000000000000000;;			Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GeneratePodInitializedCondition returns initialized condition if all init containers in a pod are ready, else it
0000000000000000000000000000000000000000;;	// returns an uninitialized condition.
0000000000000000000000000000000000000000;;	func GeneratePodInitializedCondition(spec *v1.PodSpec, containerStatuses []v1.ContainerStatus, podPhase v1.PodPhase) v1.PodCondition {
0000000000000000000000000000000000000000;;		// Find if all containers are ready or not.
0000000000000000000000000000000000000000;;		if containerStatuses == nil && len(spec.InitContainers) > 0 {
0000000000000000000000000000000000000000;;			return v1.PodCondition{
0000000000000000000000000000000000000000;;				Type:   v1.PodInitialized,
0000000000000000000000000000000000000000;;				Status: v1.ConditionFalse,
0000000000000000000000000000000000000000;;				Reason: UnknownContainerStatuses,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		unknownContainers := []string{}
0000000000000000000000000000000000000000;;		unreadyContainers := []string{}
0000000000000000000000000000000000000000;;		for _, container := range spec.InitContainers {
0000000000000000000000000000000000000000;;			if containerStatus, ok := podutil.GetContainerStatus(containerStatuses, container.Name); ok {
0000000000000000000000000000000000000000;;				if !containerStatus.Ready {
0000000000000000000000000000000000000000;;					unreadyContainers = append(unreadyContainers, container.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				unknownContainers = append(unknownContainers, container.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If all init containers are known and succeeded, just return PodCompleted.
0000000000000000000000000000000000000000;;		if podPhase == v1.PodSucceeded && len(unknownContainers) == 0 {
0000000000000000000000000000000000000000;;			return v1.PodCondition{
0000000000000000000000000000000000000000;;				Type:   v1.PodInitialized,
0000000000000000000000000000000000000000;;				Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;				Reason: PodCompleted,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unreadyMessages := []string{}
0000000000000000000000000000000000000000;;		if len(unknownContainers) > 0 {
0000000000000000000000000000000000000000;;			unreadyMessages = append(unreadyMessages, fmt.Sprintf("containers with unknown status: %s", unknownContainers))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(unreadyContainers) > 0 {
0000000000000000000000000000000000000000;;			unreadyMessages = append(unreadyMessages, fmt.Sprintf("containers with incomplete status: %s", unreadyContainers))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		unreadyMessage := strings.Join(unreadyMessages, ", ")
0000000000000000000000000000000000000000;;		if unreadyMessage != "" {
0000000000000000000000000000000000000000;;			return v1.PodCondition{
0000000000000000000000000000000000000000;;				Type:    v1.PodInitialized,
0000000000000000000000000000000000000000;;				Status:  v1.ConditionFalse,
0000000000000000000000000000000000000000;;				Reason:  ContainersNotInitialized,
0000000000000000000000000000000000000000;;				Message: unreadyMessage,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return v1.PodCondition{
0000000000000000000000000000000000000000;;			Type:   v1.PodInitialized,
0000000000000000000000000000000000000000;;			Status: v1.ConditionTrue,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
