0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8cbd509fa9e81a54c6d6023bfbd88bc3e817eea0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContainersToDeleteInPodWithFilter(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := kubecontainer.PodStatus{
0000000000000000000000000000000000000000;;			ContainerStatuses: []*kubecontainer.ContainerStatus{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "1"},
0000000000000000000000000000000000000000;;					Name:      "foo",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now(),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "2"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "3"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(2 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "4"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(3 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "5"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(4 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateRunning,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			containersToKeep           int
0000000000000000000000000000000000000000;;			expectedContainersToDelete containerStatusbyCreatedList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				0,
0000000000000000000000000000000000000000;;				[]*kubecontainer.ContainerStatus{pod.ContainerStatuses[3], pod.ContainerStatuses[2], pod.ContainerStatuses[1]},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				1,
0000000000000000000000000000000000000000;;				[]*kubecontainer.ContainerStatus{pod.ContainerStatuses[2], pod.ContainerStatuses[1]},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]*kubecontainer.ContainerStatus{pod.ContainerStatuses[1]},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			candidates := getContainersToDeleteInPod("4", &pod, test.containersToKeep)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(candidates, test.expectedContainersToDelete) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v got %v", test.expectedContainersToDelete, candidates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContainersToDeleteInPod(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := kubecontainer.PodStatus{
0000000000000000000000000000000000000000;;			ContainerStatuses: []*kubecontainer.ContainerStatus{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "1"},
0000000000000000000000000000000000000000;;					Name:      "foo",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now(),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "2"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "3"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(2 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "4"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(3 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "5"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(4 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateRunning,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			containersToKeep           int
0000000000000000000000000000000000000000;;			expectedContainersToDelete containerStatusbyCreatedList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				0,
0000000000000000000000000000000000000000;;				[]*kubecontainer.ContainerStatus{pod.ContainerStatuses[3], pod.ContainerStatuses[2], pod.ContainerStatuses[1], pod.ContainerStatuses[0]},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				1,
0000000000000000000000000000000000000000;;				[]*kubecontainer.ContainerStatus{pod.ContainerStatuses[2], pod.ContainerStatuses[1], pod.ContainerStatuses[0]},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]*kubecontainer.ContainerStatus{pod.ContainerStatuses[1], pod.ContainerStatuses[0]},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			candidates := getContainersToDeleteInPod("", &pod, test.containersToKeep)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(candidates, test.expectedContainersToDelete) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v got %v", test.expectedContainersToDelete, candidates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContainersToDeleteInPodWithNoMatch(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := kubecontainer.PodStatus{
0000000000000000000000000000000000000000;;			ContainerStatuses: []*kubecontainer.ContainerStatus{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "1"},
0000000000000000000000000000000000000000;;					Name:      "foo",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now(),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "2"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "3"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(2 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "4"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(3 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ID:        kubecontainer.ContainerID{Type: "test", ID: "5"},
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;					CreatedAt: time.Now().Add(4 * time.Second),
0000000000000000000000000000000000000000;;					State:     kubecontainer.ContainerStateRunning,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			filterId                   string
0000000000000000000000000000000000000000;;			expectedContainersToDelete containerStatusbyCreatedList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"abc",
0000000000000000000000000000000000000000;;				[]*kubecontainer.ContainerStatus{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			candidates := getContainersToDeleteInPod(test.filterId, &pod, len(pod.ContainerStatuses))
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(candidates, test.expectedContainersToDelete) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v got %v", test.expectedContainersToDelete, candidates)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
