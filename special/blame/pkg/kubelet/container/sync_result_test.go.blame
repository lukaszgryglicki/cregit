0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a5498c0b57edf31dedc9952565a20131a4b3a548;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodSyncResult(t *testing.T) {
0000000000000000000000000000000000000000;;		okResults := []*SyncResult{
0000000000000000000000000000000000000000;;			NewSyncResult(StartContainer, "container_0"),
0000000000000000000000000000000000000000;;			NewSyncResult(SetupNetwork, "pod"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errResults := []*SyncResult{
0000000000000000000000000000000000000000;;			NewSyncResult(KillContainer, "container_1"),
0000000000000000000000000000000000000000;;			NewSyncResult(TeardownNetwork, "pod"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errResults[0].Fail(errors.New("error_0"), "message_0")
0000000000000000000000000000000000000000;;		errResults[1].Fail(errors.New("error_1"), "message_1")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the PodSyncResult doesn't contain error result, it should not be error
0000000000000000000000000000000000000000;;		result := PodSyncResult{}
0000000000000000000000000000000000000000;;		result.AddSyncResult(okResults...)
0000000000000000000000000000000000000000;;		if result.Error() != nil {
0000000000000000000000000000000000000000;;			t.Errorf("PodSyncResult should not be error: %v", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the PodSyncResult contains error result, it should be error
0000000000000000000000000000000000000000;;		result = PodSyncResult{}
0000000000000000000000000000000000000000;;		result.AddSyncResult(okResults...)
0000000000000000000000000000000000000000;;		result.AddSyncResult(errResults...)
0000000000000000000000000000000000000000;;		if result.Error() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("PodSyncResult should be error: %q", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the PodSyncResult is failed, it should be error
0000000000000000000000000000000000000000;;		result = PodSyncResult{}
0000000000000000000000000000000000000000;;		result.AddSyncResult(okResults...)
0000000000000000000000000000000000000000;;		result.Fail(errors.New("error"))
0000000000000000000000000000000000000000;;		if result.Error() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("PodSyncResult should be error: %q", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the PodSyncResult is added an error PodSyncResult, it should be error
0000000000000000000000000000000000000000;;		errResult := PodSyncResult{}
0000000000000000000000000000000000000000;;		errResult.AddSyncResult(errResults...)
0000000000000000000000000000000000000000;;		result = PodSyncResult{}
0000000000000000000000000000000000000000;;		result.AddSyncResult(okResults...)
0000000000000000000000000000000000000000;;		result.AddPodSyncResult(errResult)
0000000000000000000000000000000000000000;;		if result.Error() == nil {
0000000000000000000000000000000000000000;;			t.Errorf("PodSyncResult should be error: %q", result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
