0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
21de329803cd27c1bec0caf492525c5c70aa5fa5;pkg/kubelet/prober/prober_fake.go[pkg/kubelet/prober/prober_fake.go][pkg/kubelet/container/runtime_cache_fake.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestRunTimeCache embeds runtimeCache with some additional methods for testing.
0000000000000000000000000000000000000000;;	// It must be declared in the container package to have visibility to runtimeCache.
0000000000000000000000000000000000000000;;	// It cannot be in a "..._test.go" file in order for runtime_cache_test.go to have cross-package visibility to it.
0000000000000000000000000000000000000000;;	// (cross-package declarations in test files cannot be used from dot imports if this package is vendored)
0000000000000000000000000000000000000000;;	type TestRuntimeCache struct {
0000000000000000000000000000000000000000;;		runtimeCache
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *TestRuntimeCache) UpdateCacheWithLock() error {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;		return r.updateCache()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *TestRuntimeCache) GetCachedPods() []*Pod {
0000000000000000000000000000000000000000;;		r.Lock()
0000000000000000000000000000000000000000;;		defer r.Unlock()
0000000000000000000000000000000000000000;;		return r.pods
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTestRuntimeCache(getter podsGetter) *TestRuntimeCache {
0000000000000000000000000000000000000000;;		return &TestRuntimeCache{
0000000000000000000000000000000000000000;;			runtimeCache: runtimeCache{
0000000000000000000000000000000000000000;;				getter: getter,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
