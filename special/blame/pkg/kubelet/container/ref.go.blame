0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b7f1cfb33939f7770a7897fe14111d7cae19e719;pkg/kubelet/container/container_reference_manager_test.go[pkg/kubelet/container/container_reference_manager_test.go][pkg/kubelet/container/ref.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/v1/ref"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var ImplicitContainerPrefix string = "implicitly required container "
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenerateContainerRef returns an *v1.ObjectReference which references the given container
0000000000000000000000000000000000000000;;	// within the given pod. Returns an error if the reference can't be constructed or the
0000000000000000000000000000000000000000;;	// container doesn't actually belong to the pod.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function will return an error if the provided Pod does not have a selfLink,
0000000000000000000000000000000000000000;;	// but we expect selfLink to be populated at all call sites for the function.
0000000000000000000000000000000000000000;;	func GenerateContainerRef(pod *v1.Pod, container *v1.Container) (*v1.ObjectReference, error) {
0000000000000000000000000000000000000000;;		fieldPath, err := fieldPath(pod, container)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// TODO: figure out intelligent way to refer to containers that we implicitly
0000000000000000000000000000000000000000;;			// start (like the pod infra container). This is not a good way, ugh.
0000000000000000000000000000000000000000;;			fieldPath = ImplicitContainerPrefix + container.Name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ref, err := ref.GetPartialReference(api.Scheme, pod, fieldPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ref, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fieldPath returns a fieldPath locating container within pod.
0000000000000000000000000000000000000000;;	// Returns an error if the container isn't part of the pod.
0000000000000000000000000000000000000000;;	func fieldPath(pod *v1.Pod, container *v1.Container) (string, error) {
0000000000000000000000000000000000000000;;		for i := range pod.Spec.Containers {
0000000000000000000000000000000000000000;;			here := &pod.Spec.Containers[i]
0000000000000000000000000000000000000000;;			if here.Name == container.Name {
0000000000000000000000000000000000000000;;				if here.Name == "" {
0000000000000000000000000000000000000000;;					return fmt.Sprintf("spec.containers[%d]", i), nil
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return fmt.Sprintf("spec.containers{%s}", here.Name), nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range pod.Spec.InitContainers {
0000000000000000000000000000000000000000;;			here := &pod.Spec.InitContainers[i]
0000000000000000000000000000000000000000;;			if here.Name == container.Name {
0000000000000000000000000000000000000000;;				if here.Name == "" {
0000000000000000000000000000000000000000;;					return fmt.Sprintf("spec.initContainers[%d]", i), nil
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return fmt.Sprintf("spec.initContainers{%s}", here.Name), nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("container %#v not found in pod %#v", container, pod)
0000000000000000000000000000000000000000;;	}
