0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f97269008144cfbaf583377097fcafcbb736f8ed;pkg/kubelet/container/fake_runtime.go[pkg/kubelet/container/fake_runtime.go][pkg/kubelet/container/testing/fake_runtime.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/remotecommand"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakePod struct {
0000000000000000000000000000000000000000;;		Pod       *Pod
0000000000000000000000000000000000000000;;		NetnsPath string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeRuntime is a fake container runtime for testing.
0000000000000000000000000000000000000000;;	type FakeRuntime struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;		CalledFunctions   []string
0000000000000000000000000000000000000000;;		PodList           []*FakePod
0000000000000000000000000000000000000000;;		AllPodList        []*FakePod
0000000000000000000000000000000000000000;;		ImageList         []Image
0000000000000000000000000000000000000000;;		APIPodStatus      v1.PodStatus
0000000000000000000000000000000000000000;;		PodStatus         PodStatus
0000000000000000000000000000000000000000;;		StartedPods       []string
0000000000000000000000000000000000000000;;		KilledPods        []string
0000000000000000000000000000000000000000;;		StartedContainers []string
0000000000000000000000000000000000000000;;		KilledContainers  []string
0000000000000000000000000000000000000000;;		RuntimeStatus     *RuntimeStatus
0000000000000000000000000000000000000000;;		VersionInfo       string
0000000000000000000000000000000000000000;;		APIVersionInfo    string
0000000000000000000000000000000000000000;;		RuntimeType       string
0000000000000000000000000000000000000000;;		Err               error
0000000000000000000000000000000000000000;;		InspectErr        error
0000000000000000000000000000000000000000;;		StatusErr         error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeDirectStreamingRuntime struct {
0000000000000000000000000000000000000000;;		*FakeRuntime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Arguments to streaming method calls.
0000000000000000000000000000000000000000;;		Args struct {
0000000000000000000000000000000000000000;;			// Attach / Exec args
0000000000000000000000000000000000000000;;			ContainerID ContainerID
0000000000000000000000000000000000000000;;			Cmd         []string
0000000000000000000000000000000000000000;;			Stdin       io.Reader
0000000000000000000000000000000000000000;;			Stdout      io.WriteCloser
0000000000000000000000000000000000000000;;			Stderr      io.WriteCloser
0000000000000000000000000000000000000000;;			TTY         bool
0000000000000000000000000000000000000000;;			// Port-forward args
0000000000000000000000000000000000000000;;			Pod    *Pod
0000000000000000000000000000000000000000;;			Port   int32
0000000000000000000000000000000000000000;;			Stream io.ReadWriteCloser
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ DirectStreamingRuntime = &FakeDirectStreamingRuntime{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const FakeHost = "localhost:12345"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeIndirectStreamingRuntime struct {
0000000000000000000000000000000000000000;;		*FakeRuntime
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ IndirectStreamingRuntime = &FakeIndirectStreamingRuntime{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeRuntime should implement Runtime.
0000000000000000000000000000000000000000;;	var _ Runtime = &FakeRuntime{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeVersion struct {
0000000000000000000000000000000000000000;;		Version string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fv *FakeVersion) String() string {
0000000000000000000000000000000000000000;;		return fv.Version
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fv *FakeVersion) Compare(other string) (int, error) {
0000000000000000000000000000000000000000;;		result := 0
0000000000000000000000000000000000000000;;		if fv.Version > other {
0000000000000000000000000000000000000000;;			result = 1
0000000000000000000000000000000000000000;;		} else if fv.Version < other {
0000000000000000000000000000000000000000;;			result = -1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type podsGetter interface {
0000000000000000000000000000000000000000;;		GetPods(bool) ([]*Pod, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeRuntimeCache struct {
0000000000000000000000000000000000000000;;		getter podsGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeRuntimeCache(getter podsGetter) RuntimeCache {
0000000000000000000000000000000000000000;;		return &FakeRuntimeCache{getter}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntimeCache) GetPods() ([]*Pod, error) {
0000000000000000000000000000000000000000;;		return f.getter.GetPods(false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntimeCache) ForceUpdateIfOlder(time.Time) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClearCalls resets the FakeRuntime to the initial state.
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) ClearCalls() {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = []string{}
0000000000000000000000000000000000000000;;		f.PodList = []*FakePod{}
0000000000000000000000000000000000000000;;		f.AllPodList = []*FakePod{}
0000000000000000000000000000000000000000;;		f.APIPodStatus = v1.PodStatus{}
0000000000000000000000000000000000000000;;		f.StartedPods = []string{}
0000000000000000000000000000000000000000;;		f.KilledPods = []string{}
0000000000000000000000000000000000000000;;		f.StartedContainers = []string{}
0000000000000000000000000000000000000000;;		f.KilledContainers = []string{}
0000000000000000000000000000000000000000;;		f.RuntimeStatus = nil
0000000000000000000000000000000000000000;;		f.VersionInfo = ""
0000000000000000000000000000000000000000;;		f.RuntimeType = ""
0000000000000000000000000000000000000000;;		f.Err = nil
0000000000000000000000000000000000000000;;		f.InspectErr = nil
0000000000000000000000000000000000000000;;		f.StatusErr = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdatePodCIDR fulfills the cri interface.
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) UpdatePodCIDR(c string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) assertList(expect []string, test []string) error {
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(expect, test) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected %#v, got %#v", expect, test)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssertCalls test if the invoked functions are as expected.
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) AssertCalls(calls []string) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		return f.assertList(calls, f.CalledFunctions)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) AssertStartedPods(pods []string) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		return f.assertList(pods, f.StartedPods)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) AssertKilledPods(pods []string) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		return f.assertList(pods, f.KilledPods)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) AssertStartedContainers(containers []string) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		return f.assertList(containers, f.StartedContainers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) AssertKilledContainers(containers []string) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		return f.assertList(containers, f.KilledContainers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) Type() string {
0000000000000000000000000000000000000000;;		return f.RuntimeType
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) Version() (Version, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "Version")
0000000000000000000000000000000000000000;;		return &FakeVersion{Version: f.VersionInfo}, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) APIVersion() (Version, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "APIVersion")
0000000000000000000000000000000000000000;;		return &FakeVersion{Version: f.APIVersionInfo}, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) Status() (*RuntimeStatus, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "Status")
0000000000000000000000000000000000000000;;		return f.RuntimeStatus, f.StatusErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) GetPods(all bool) ([]*Pod, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var pods []*Pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetPods")
0000000000000000000000000000000000000000;;		if all {
0000000000000000000000000000000000000000;;			for _, fakePod := range f.AllPodList {
0000000000000000000000000000000000000000;;				pods = append(pods, fakePod.Pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			for _, fakePod := range f.PodList {
0000000000000000000000000000000000000000;;				pods = append(pods, fakePod.Pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pods, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) SyncPod(pod *v1.Pod, _ v1.PodStatus, _ *PodStatus, _ []v1.Secret, backOff *flowcontrol.Backoff) (result PodSyncResult) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "SyncPod")
0000000000000000000000000000000000000000;;		f.StartedPods = append(f.StartedPods, string(pod.UID))
0000000000000000000000000000000000000000;;		for _, c := range pod.Spec.Containers {
0000000000000000000000000000000000000000;;			f.StartedContainers = append(f.StartedContainers, c.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO(random-liu): Add SyncResult for starting and killing containers
0000000000000000000000000000000000000000;;		if f.Err != nil {
0000000000000000000000000000000000000000;;			result.Fail(f.Err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) KillPod(pod *v1.Pod, runningPod Pod, gracePeriodOverride *int64) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "KillPod")
0000000000000000000000000000000000000000;;		f.KilledPods = append(f.KilledPods, string(runningPod.ID))
0000000000000000000000000000000000000000;;		for _, c := range runningPod.Containers {
0000000000000000000000000000000000000000;;			f.KilledContainers = append(f.KilledContainers, c.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) RunContainerInPod(container v1.Container, pod *v1.Pod, volumeMap map[string]volume.VolumePlugin) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "RunContainerInPod")
0000000000000000000000000000000000000000;;		f.StartedContainers = append(f.StartedContainers, container.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Spec.Containers = append(pod.Spec.Containers, container)
0000000000000000000000000000000000000000;;		for _, c := range pod.Spec.Containers {
0000000000000000000000000000000000000000;;			if c.Name == container.Name { // Container already in the pod.
0000000000000000000000000000000000000000;;				return f.Err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod.Spec.Containers = append(pod.Spec.Containers, container)
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) KillContainerInPod(container v1.Container, pod *v1.Pod) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "KillContainerInPod")
0000000000000000000000000000000000000000;;		f.KilledContainers = append(f.KilledContainers, container.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var containers []v1.Container
0000000000000000000000000000000000000000;;		for _, c := range pod.Spec.Containers {
0000000000000000000000000000000000000000;;			if c.Name == container.Name {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			containers = append(containers, c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) GetPodStatus(uid types.UID, name, namespace string) (*PodStatus, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetPodStatus")
0000000000000000000000000000000000000000;;		status := f.PodStatus
0000000000000000000000000000000000000000;;		return &status, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeDirectStreamingRuntime) ExecInContainer(containerID ContainerID, cmd []string, stdin io.Reader, stdout, stderr io.WriteCloser, tty bool, resize <-chan remotecommand.TerminalSize, timeout time.Duration) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "ExecInContainer")
0000000000000000000000000000000000000000;;		f.Args.ContainerID = containerID
0000000000000000000000000000000000000000;;		f.Args.Cmd = cmd
0000000000000000000000000000000000000000;;		f.Args.Stdin = stdin
0000000000000000000000000000000000000000;;		f.Args.Stdout = stdout
0000000000000000000000000000000000000000;;		f.Args.Stderr = stderr
0000000000000000000000000000000000000000;;		f.Args.TTY = tty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeDirectStreamingRuntime) AttachContainer(containerID ContainerID, stdin io.Reader, stdout, stderr io.WriteCloser, tty bool, resize <-chan remotecommand.TerminalSize) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "AttachContainer")
0000000000000000000000000000000000000000;;		f.Args.ContainerID = containerID
0000000000000000000000000000000000000000;;		f.Args.Stdin = stdin
0000000000000000000000000000000000000000;;		f.Args.Stdout = stdout
0000000000000000000000000000000000000000;;		f.Args.Stderr = stderr
0000000000000000000000000000000000000000;;		f.Args.TTY = tty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) GetContainerLogs(pod *v1.Pod, containerID ContainerID, logOptions *v1.PodLogOptions, stdout, stderr io.Writer) (err error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetContainerLogs")
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) PullImage(image ImageSpec, pullSecrets []v1.Secret) (string, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "PullImage")
0000000000000000000000000000000000000000;;		return image.Image, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) GetImageRef(image ImageSpec) (string, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetImageRef")
0000000000000000000000000000000000000000;;		for _, i := range f.ImageList {
0000000000000000000000000000000000000000;;			if i.ID == image.Image {
0000000000000000000000000000000000000000;;				return i.ID, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", f.InspectErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) ListImages() ([]Image, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "ListImages")
0000000000000000000000000000000000000000;;		return f.ImageList, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) RemoveImage(image ImageSpec) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "RemoveImage")
0000000000000000000000000000000000000000;;		index := 0
0000000000000000000000000000000000000000;;		for i := range f.ImageList {
0000000000000000000000000000000000000000;;			if f.ImageList[i].ID == image.Image {
0000000000000000000000000000000000000000;;				index = i
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.ImageList = append(f.ImageList[:index], f.ImageList[index+1:]...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeDirectStreamingRuntime) PortForward(pod *Pod, port int32, stream io.ReadWriteCloser) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "PortForward")
0000000000000000000000000000000000000000;;		f.Args.Pod = pod
0000000000000000000000000000000000000000;;		f.Args.Port = port
0000000000000000000000000000000000000000;;		f.Args.Stream = stream
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) GetNetNS(containerID ContainerID) (string, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetNetNS")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fp := range f.AllPodList {
0000000000000000000000000000000000000000;;			for _, c := range fp.Pod.Containers {
0000000000000000000000000000000000000000;;				if c.ID == containerID {
0000000000000000000000000000000000000000;;					return fp.NetnsPath, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) GetPodContainerID(pod *Pod) (ContainerID, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetPodContainerID")
0000000000000000000000000000000000000000;;		return ContainerID{}, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) GarbageCollect(gcPolicy ContainerGCPolicy, ready bool, evictNonDeletedPods bool) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GarbageCollect")
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) DeleteContainer(containerID ContainerID) error {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "DeleteContainer")
0000000000000000000000000000000000000000;;		return f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntime) ImageStats() (*ImageStats, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "ImageStats")
0000000000000000000000000000000000000000;;		return nil, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeIndirectStreamingRuntime) GetExec(id ContainerID, cmd []string, stdin, stdout, stderr, tty bool) (*url.URL, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetExec")
0000000000000000000000000000000000000000;;		return &url.URL{Host: FakeHost}, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeIndirectStreamingRuntime) GetAttach(id ContainerID, stdin, stdout, stderr, tty bool) (*url.URL, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetAttach")
0000000000000000000000000000000000000000;;		return &url.URL{Host: FakeHost}, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeIndirectStreamingRuntime) GetPortForward(podName, podNamespace string, podUID types.UID, ports []int32) (*url.URL, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.CalledFunctions = append(f.CalledFunctions, "GetPortForward")
0000000000000000000000000000000000000000;;		return &url.URL{Host: FakeHost}, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeContainerCommandRunner struct {
0000000000000000000000000000000000000000;;		// what to return
0000000000000000000000000000000000000000;;		Stdout string
0000000000000000000000000000000000000000;;		Err    error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// actual values when invoked
0000000000000000000000000000000000000000;;		ContainerID ContainerID
0000000000000000000000000000000000000000;;		Cmd         []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ContainerCommandRunner = &FakeContainerCommandRunner{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeContainerCommandRunner) RunInContainer(containerID ContainerID, cmd []string, timeout time.Duration) ([]byte, error) {
0000000000000000000000000000000000000000;;		// record invoked values
0000000000000000000000000000000000000000;;		f.ContainerID = containerID
0000000000000000000000000000000000000000;;		f.Cmd = cmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return []byte(f.Stdout), f.Err
0000000000000000000000000000000000000000;;	}
