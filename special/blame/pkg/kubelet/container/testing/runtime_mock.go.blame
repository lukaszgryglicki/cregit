0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b48c1c2701f0209ec8b00827a50cbd990ec11704;pkg/kubelet/container/runtime_mock.go[pkg/kubelet/container/runtime_mock.go][pkg/kubelet/container/testing/runtime_mock.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/mock"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/remotecommand"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Mock struct {
0000000000000000000000000000000000000000;;		mock.Mock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ Runtime = new(Mock)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) Start() error {
0000000000000000000000000000000000000000;;		args := r.Called()
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) Type() string {
0000000000000000000000000000000000000000;;		args := r.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) Version() (Version, error) {
0000000000000000000000000000000000000000;;		args := r.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(Version), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) APIVersion() (Version, error) {
0000000000000000000000000000000000000000;;		args := r.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(Version), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) Status() (*RuntimeStatus, error) {
0000000000000000000000000000000000000000;;		args := r.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(*RuntimeStatus), args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) GetPods(all bool) ([]*Pod, error) {
0000000000000000000000000000000000000000;;		args := r.Called(all)
0000000000000000000000000000000000000000;;		return args.Get(0).([]*Pod), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) SyncPod(pod *v1.Pod, apiStatus v1.PodStatus, status *PodStatus, secrets []v1.Secret, backOff *flowcontrol.Backoff) PodSyncResult {
0000000000000000000000000000000000000000;;		args := r.Called(pod, apiStatus, status, secrets, backOff)
0000000000000000000000000000000000000000;;		return args.Get(0).(PodSyncResult)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) KillPod(pod *v1.Pod, runningPod Pod, gracePeriodOverride *int64) error {
0000000000000000000000000000000000000000;;		args := r.Called(pod, runningPod, gracePeriodOverride)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) RunContainerInPod(container v1.Container, pod *v1.Pod, volumeMap map[string]volume.VolumePlugin) error {
0000000000000000000000000000000000000000;;		args := r.Called(pod, pod, volumeMap)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) KillContainerInPod(container v1.Container, pod *v1.Pod) error {
0000000000000000000000000000000000000000;;		args := r.Called(pod, pod)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) GetPodStatus(uid types.UID, name, namespace string) (*PodStatus, error) {
0000000000000000000000000000000000000000;;		args := r.Called(uid, name, namespace)
0000000000000000000000000000000000000000;;		return args.Get(0).(*PodStatus), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) ExecInContainer(containerID ContainerID, cmd []string, stdin io.Reader, stdout, stderr io.WriteCloser, tty bool, resize <-chan remotecommand.TerminalSize, timeout time.Duration) error {
0000000000000000000000000000000000000000;;		args := r.Called(containerID, cmd, stdin, stdout, stderr, tty)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) AttachContainer(containerID ContainerID, stdin io.Reader, stdout, stderr io.WriteCloser, tty bool, resize <-chan remotecommand.TerminalSize) error {
0000000000000000000000000000000000000000;;		args := r.Called(containerID, stdin, stdout, stderr, tty)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) GetContainerLogs(pod *v1.Pod, containerID ContainerID, logOptions *v1.PodLogOptions, stdout, stderr io.Writer) (err error) {
0000000000000000000000000000000000000000;;		args := r.Called(pod, containerID, logOptions, stdout, stderr)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) PullImage(image ImageSpec, pullSecrets []v1.Secret) (string, error) {
0000000000000000000000000000000000000000;;		args := r.Called(image, pullSecrets)
0000000000000000000000000000000000000000;;		return image.Image, args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) GetImageRef(image ImageSpec) (string, error) {
0000000000000000000000000000000000000000;;		args := r.Called(image)
0000000000000000000000000000000000000000;;		return args.Get(0).(string), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) ListImages() ([]Image, error) {
0000000000000000000000000000000000000000;;		args := r.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).([]Image), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) RemoveImage(image ImageSpec) error {
0000000000000000000000000000000000000000;;		args := r.Called(image)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) PortForward(pod *Pod, port uint16, stream io.ReadWriteCloser) error {
0000000000000000000000000000000000000000;;		args := r.Called(pod, port, stream)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) GetNetNS(containerID ContainerID) (string, error) {
0000000000000000000000000000000000000000;;		args := r.Called(containerID)
0000000000000000000000000000000000000000;;		return "", args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) GetPodContainerID(pod *Pod) (ContainerID, error) {
0000000000000000000000000000000000000000;;		args := r.Called(pod)
0000000000000000000000000000000000000000;;		return ContainerID{}, args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) GarbageCollect(gcPolicy ContainerGCPolicy, ready bool, evictNonDeletedPods bool) error {
0000000000000000000000000000000000000000;;		args := r.Called(gcPolicy, ready, evictNonDeletedPods)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) DeleteContainer(containerID ContainerID) error {
0000000000000000000000000000000000000000;;		args := r.Called(containerID)
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *Mock) ImageStats() (*ImageStats, error) {
0000000000000000000000000000000000000000;;		args := r.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(*ImageStats), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdatePodCIDR fulfills the cri interface.
0000000000000000000000000000000000000000;;	func (r *Mock) UpdatePodCIDR(c string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
