0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b94d3176f5d0fb8620c6cf697b7c9ea9d155f981;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeOS mocks out certain OS calls to avoid perturbing the filesystem
0000000000000000000000000000000000000000;;	// If a member of the form `*Fn` is set, that function will be called in place
0000000000000000000000000000000000000000;;	// of the real call.
0000000000000000000000000000000000000000;;	type FakeOS struct {
0000000000000000000000000000000000000000;;		StatFn     func(string) (os.FileInfo, error)
0000000000000000000000000000000000000000;;		ReadDirFn  func(string) ([]os.FileInfo, error)
0000000000000000000000000000000000000000;;		MkdirAllFn func(string, os.FileMode) error
0000000000000000000000000000000000000000;;		SymlinkFn  func(string, string) error
0000000000000000000000000000000000000000;;		HostName   string
0000000000000000000000000000000000000000;;		Removes    []string
0000000000000000000000000000000000000000;;		Files      map[string][]*os.FileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeOS() *FakeOS {
0000000000000000000000000000000000000000;;		return &FakeOS{
0000000000000000000000000000000000000000;;			Removes: []string{},
0000000000000000000000000000000000000000;;			Files:   make(map[string][]*os.FileInfo),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mkdir is a fake call that just returns nil.
0000000000000000000000000000000000000000;;	func (f *FakeOS) MkdirAll(path string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		if f.MkdirAllFn != nil {
0000000000000000000000000000000000000000;;			return f.MkdirAllFn(path, perm)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Symlink is a fake call that just returns nil.
0000000000000000000000000000000000000000;;	func (f *FakeOS) Symlink(oldname string, newname string) error {
0000000000000000000000000000000000000000;;		if f.SymlinkFn != nil {
0000000000000000000000000000000000000000;;			return f.SymlinkFn(oldname, newname)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stat is a fake that returns an error
0000000000000000000000000000000000000000;;	func (f FakeOS) Stat(path string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		if f.StatFn != nil {
0000000000000000000000000000000000000000;;			return f.StatFn(path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.New("unimplemented testing mock")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Remove is a fake call that returns nil.
0000000000000000000000000000000000000000;;	func (f *FakeOS) Remove(path string) error {
0000000000000000000000000000000000000000;;		f.Removes = append(f.Removes, path)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveAll is a fake call that just returns nil.
0000000000000000000000000000000000000000;;	func (f *FakeOS) RemoveAll(path string) error {
0000000000000000000000000000000000000000;;		f.Removes = append(f.Removes, path)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create is a fake call that returns nil.
0000000000000000000000000000000000000000;;	func (FakeOS) Create(path string) (*os.File, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Chmod is a fake call that returns nil.
0000000000000000000000000000000000000000;;	func (FakeOS) Chmod(path string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Hostname is a fake call that returns nil.
0000000000000000000000000000000000000000;;	func (f *FakeOS) Hostname() (name string, err error) {
0000000000000000000000000000000000000000;;		return f.HostName, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Chtimes is a fake call that returns nil.
0000000000000000000000000000000000000000;;	func (FakeOS) Chtimes(path string, atime time.Time, mtime time.Time) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pipe is a fake call that returns nil.
0000000000000000000000000000000000000000;;	func (FakeOS) Pipe() (r *os.File, w *os.File, err error) {
0000000000000000000000000000000000000000;;		return nil, nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadDir is a fake call that returns the files under the directory.
0000000000000000000000000000000000000000;;	func (f *FakeOS) ReadDir(dirname string) ([]os.FileInfo, error) {
0000000000000000000000000000000000000000;;		if f.ReadDirFn != nil {
0000000000000000000000000000000000000000;;			return f.ReadDirFn(dirname)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Glob is a fake call that returns nil.
0000000000000000000000000000000000000000;;	func (f *FakeOS) Glob(pattern string) ([]string, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
