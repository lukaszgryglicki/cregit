0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a8fc89d8279f8640721a0469fcaf7da2f6c795b7;pkg/kubelet/rkt/mock_os/mockfileinfo.go[pkg/kubelet/rkt/mock_os/mockfileinfo.go][pkg/kubelet/container/testing/mockfileinfo.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generated via: mockgen os FileInfo
0000000000000000000000000000000000000000;;	// Edited to include required boilerplate
0000000000000000000000000000000000000000;;	// Source: os (interfaces: FileInfo)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		os "os"
0000000000000000000000000000000000000000;;		time "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gomock "github.com/golang/mock/gomock"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mock of FileInfo interface
0000000000000000000000000000000000000000;;	type MockFileInfo struct {
0000000000000000000000000000000000000000;;		ctrl     *gomock.Controller
0000000000000000000000000000000000000000;;		recorder *_MockFileInfoRecorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Recorder for MockFileInfo (not exported)
0000000000000000000000000000000000000000;;	type _MockFileInfoRecorder struct {
0000000000000000000000000000000000000000;;		mock *MockFileInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMockFileInfo(ctrl *gomock.Controller) *MockFileInfo {
0000000000000000000000000000000000000000;;		mock := &MockFileInfo{ctrl: ctrl}
0000000000000000000000000000000000000000;;		mock.recorder = &_MockFileInfoRecorder{mock}
0000000000000000000000000000000000000000;;		return mock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockFileInfo) EXPECT() *_MockFileInfoRecorder {
0000000000000000000000000000000000000000;;		return _m.recorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockFileInfo) IsDir() bool {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "IsDir")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(bool)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockFileInfoRecorder) IsDir() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "IsDir")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockFileInfo) ModTime() time.Time {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "ModTime")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(time.Time)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockFileInfoRecorder) ModTime() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "ModTime")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockFileInfo) Mode() os.FileMode {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "Mode")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(os.FileMode)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockFileInfoRecorder) Mode() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Mode")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockFileInfo) Name() string {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "Name")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(string)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockFileInfoRecorder) Name() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockFileInfo) Size() int64 {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "Size")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(int64)
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockFileInfoRecorder) Size() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Size")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_m *MockFileInfo) Sys() interface{} {
0000000000000000000000000000000000000000;;		ret := _m.ctrl.Call(_m, "Sys")
0000000000000000000000000000000000000000;;		ret0, _ := ret[0].(interface{})
0000000000000000000000000000000000000000;;		return ret0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_mr *_MockFileInfoRecorder) Sys() *gomock.Call {
0000000000000000000000000000000000000000;;		return _mr.mock.ctrl.RecordCall(_mr.mock, "Sys")
0000000000000000000000000000000000000000;;	}
