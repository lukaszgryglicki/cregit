0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e0e1ccaef00b566348ae531eb97e21826ac2ab3e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeRuntimeHelper implements RuntimeHelper interfaces for testing purposes.
0000000000000000000000000000000000000000;;	type FakeRuntimeHelper struct {
0000000000000000000000000000000000000000;;		DNSServers      []string
0000000000000000000000000000000000000000;;		DNSSearches     []string
0000000000000000000000000000000000000000;;		HostName        string
0000000000000000000000000000000000000000;;		HostDomain      string
0000000000000000000000000000000000000000;;		PodContainerDir string
0000000000000000000000000000000000000000;;		Err             error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntimeHelper) GenerateRunContainerOptions(pod *v1.Pod, container *v1.Container, podIP string) (*kubecontainer.RunContainerOptions, bool, error) {
0000000000000000000000000000000000000000;;		var opts kubecontainer.RunContainerOptions
0000000000000000000000000000000000000000;;		if len(container.TerminationMessagePath) != 0 {
0000000000000000000000000000000000000000;;			opts.PodContainerDir = f.PodContainerDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &opts, false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntimeHelper) GetPodCgroupParent(pod *v1.Pod) string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntimeHelper) GetClusterDNS(pod *v1.Pod) ([]string, []string, bool, error) {
0000000000000000000000000000000000000000;;		return f.DNSServers, f.DNSSearches, false, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is not used by docker runtime.
0000000000000000000000000000000000000000;;	func (f *FakeRuntimeHelper) GeneratePodHostNameAndDomain(pod *v1.Pod) (string, string, error) {
0000000000000000000000000000000000000000;;		return f.HostName, f.HostDomain, f.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntimeHelper) GetPodDir(podUID kubetypes.UID) string {
0000000000000000000000000000000000000000;;		return "/poddir/" + string(podUID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRuntimeHelper) GetExtraSupplementalGroupsForPod(pod *v1.Pod) []int64 {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
