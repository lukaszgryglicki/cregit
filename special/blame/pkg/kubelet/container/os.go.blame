0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
09079b67b92ead29bf1d4f022fb59b0e7c22adb1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OSInterface collects system level operations that need to be mocked out
0000000000000000000000000000000000000000;;	// during tests.
0000000000000000000000000000000000000000;;	type OSInterface interface {
0000000000000000000000000000000000000000;;		MkdirAll(path string, perm os.FileMode) error
0000000000000000000000000000000000000000;;		Symlink(oldname string, newname string) error
0000000000000000000000000000000000000000;;		Stat(path string) (os.FileInfo, error)
0000000000000000000000000000000000000000;;		Remove(path string) error
0000000000000000000000000000000000000000;;		RemoveAll(path string) error
0000000000000000000000000000000000000000;;		Create(path string) (*os.File, error)
0000000000000000000000000000000000000000;;		Chmod(path string, perm os.FileMode) error
0000000000000000000000000000000000000000;;		Hostname() (name string, err error)
0000000000000000000000000000000000000000;;		Chtimes(path string, atime time.Time, mtime time.Time) error
0000000000000000000000000000000000000000;;		Pipe() (r *os.File, w *os.File, err error)
0000000000000000000000000000000000000000;;		ReadDir(dirname string) ([]os.FileInfo, error)
0000000000000000000000000000000000000000;;		Glob(pattern string) ([]string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RealOS is used to dispatch the real system level operations.
0000000000000000000000000000000000000000;;	type RealOS struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MkDir will will call os.Mkdir to create a directory.
0000000000000000000000000000000000000000;;	func (RealOS) MkdirAll(path string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		return os.MkdirAll(path, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Symlink will call os.Symlink to create a symbolic link.
0000000000000000000000000000000000000000;;	func (RealOS) Symlink(oldname string, newname string) error {
0000000000000000000000000000000000000000;;		return os.Symlink(oldname, newname)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stat will call os.Stat to get the FileInfo for a given path
0000000000000000000000000000000000000000;;	func (RealOS) Stat(path string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return os.Stat(path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Remove will call os.Remove to remove the path.
0000000000000000000000000000000000000000;;	func (RealOS) Remove(path string) error {
0000000000000000000000000000000000000000;;		return os.Remove(path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveAll will call os.RemoveAll to remove the path and its children.
0000000000000000000000000000000000000000;;	func (RealOS) RemoveAll(path string) error {
0000000000000000000000000000000000000000;;		return os.RemoveAll(path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create will call os.Create to create and return a file
0000000000000000000000000000000000000000;;	// at path.
0000000000000000000000000000000000000000;;	func (RealOS) Create(path string) (*os.File, error) {
0000000000000000000000000000000000000000;;		return os.Create(path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Chmod will change the permissions on the specified path or return
0000000000000000000000000000000000000000;;	// an error.
0000000000000000000000000000000000000000;;	func (RealOS) Chmod(path string, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		return os.Chmod(path, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Hostname will call os.Hostname to return the hostname.
0000000000000000000000000000000000000000;;	func (RealOS) Hostname() (name string, err error) {
0000000000000000000000000000000000000000;;		return os.Hostname()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Chtimes will call os.Chtimes to change the atime and mtime of the path
0000000000000000000000000000000000000000;;	func (RealOS) Chtimes(path string, atime time.Time, mtime time.Time) error {
0000000000000000000000000000000000000000;;		return os.Chtimes(path, atime, mtime)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pipe will call os.Pipe to return a connected pair of pipe.
0000000000000000000000000000000000000000;;	func (RealOS) Pipe() (r *os.File, w *os.File, err error) {
0000000000000000000000000000000000000000;;		return os.Pipe()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadDir will call ioutil.ReadDir to return the files under the directory.
0000000000000000000000000000000000000000;;	func (RealOS) ReadDir(dirname string) ([]os.FileInfo, error) {
0000000000000000000000000000000000000000;;		return ioutil.ReadDir(dirname)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Glob will call filepath.Glob to return the names of all files matching
0000000000000000000000000000000000000000;;	// pattern.
0000000000000000000000000000000000000000;;	func (RealOS) Glob(pattern string) ([]string, error) {
0000000000000000000000000000000000000000;;		return filepath.Glob(pattern)
0000000000000000000000000000000000000000;;	}
