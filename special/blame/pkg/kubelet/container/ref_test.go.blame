0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
142faf500dfee288a2eae8b175f6d235b6c6bf5d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFieldPath(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{Spec: v1.PodSpec{Containers: []v1.Container{
0000000000000000000000000000000000000000;;			{Name: "foo"},
0000000000000000000000000000000000000000;;			{Name: "bar"},
0000000000000000000000000000000000000000;;			{Name: ""},
0000000000000000000000000000000000000000;;			{Name: "baz"},
0000000000000000000000000000000000000000;;		}}}
0000000000000000000000000000000000000000;;		table := map[string]struct {
0000000000000000000000000000000000000000;;			pod       *v1.Pod
0000000000000000000000000000000000000000;;			container *v1.Container
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;			success   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"basic":            {pod, &v1.Container{Name: "foo"}, "spec.containers{foo}", true},
0000000000000000000000000000000000000000;;			"basic2":           {pod, &v1.Container{Name: "baz"}, "spec.containers{baz}", true},
0000000000000000000000000000000000000000;;			"emptyName":        {pod, &v1.Container{Name: ""}, "spec.containers[2]", true},
0000000000000000000000000000000000000000;;			"basicSamePointer": {pod, &pod.Spec.Containers[0], "spec.containers{foo}", true},
0000000000000000000000000000000000000000;;			"missing":          {pod, &v1.Container{Name: "qux"}, "", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, item := range table {
0000000000000000000000000000000000000000;;			res, err := fieldPath(item.pod, item.container)
0000000000000000000000000000000000000000;;			if item.success == false {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%v: unexpected non-error", name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected error: %v", name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := item.path, res; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: wanted %v, got %v", name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateContainerRef(t *testing.T) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			okPod = v1.Pod{
0000000000000000000000000000000000000000;;				TypeMeta: metav1.TypeMeta{
0000000000000000000000000000000000000000;;					Kind:       "Pod",
0000000000000000000000000000000000000000;;					APIVersion: api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:            "ok",
0000000000000000000000000000000000000000;;					Namespace:       "test-ns",
0000000000000000000000000000000000000000;;					UID:             "bar",
0000000000000000000000000000000000000000;;					ResourceVersion: "42",
0000000000000000000000000000000000000000;;					SelfLink:        "/api/" + api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String() + "/pods/foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;					Containers: []v1.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "by-name",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			noSelfLinkPod        = okPod
0000000000000000000000000000000000000000;;			defaultedSelfLinkPod = okPod
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		noSelfLinkPod.Kind = ""
0000000000000000000000000000000000000000;;		noSelfLinkPod.APIVersion = ""
0000000000000000000000000000000000000000;;		noSelfLinkPod.ObjectMeta.SelfLink = ""
0000000000000000000000000000000000000000;;		defaultedSelfLinkPod.ObjectMeta.SelfLink = "/api/" + api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String() + "/pods/ok"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			pod       *v1.Pod
0000000000000000000000000000000000000000;;			container *v1.Container
0000000000000000000000000000000000000000;;			expected  *v1.ObjectReference
0000000000000000000000000000000000000000;;			success   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "by-name",
0000000000000000000000000000000000000000;;				pod:  &okPod,
0000000000000000000000000000000000000000;;				container: &v1.Container{
0000000000000000000000000000000000000000;;					Name: "by-name",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ObjectReference{
0000000000000000000000000000000000000000;;					Kind:            "Pod",
0000000000000000000000000000000000000000;;					APIVersion:      api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;					Name:            "ok",
0000000000000000000000000000000000000000;;					Namespace:       "test-ns",
0000000000000000000000000000000000000000;;					UID:             "bar",
0000000000000000000000000000000000000000;;					ResourceVersion: "42",
0000000000000000000000000000000000000000;;					FieldPath:       ".spec.containers{by-name}",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "no-name",
0000000000000000000000000000000000000000;;				pod:       &okPod,
0000000000000000000000000000000000000000;;				container: &v1.Container{},
0000000000000000000000000000000000000000;;				expected: &v1.ObjectReference{
0000000000000000000000000000000000000000;;					Kind:            "Pod",
0000000000000000000000000000000000000000;;					APIVersion:      api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;					Name:            "ok",
0000000000000000000000000000000000000000;;					Namespace:       "test-ns",
0000000000000000000000000000000000000000;;					UID:             "bar",
0000000000000000000000000000000000000000;;					ResourceVersion: "42",
0000000000000000000000000000000000000000;;					FieldPath:       ".spec.containers[1]",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "no-selflink",
0000000000000000000000000000000000000000;;				pod:       &noSelfLinkPod,
0000000000000000000000000000000000000000;;				container: &v1.Container{},
0000000000000000000000000000000000000000;;				expected:  nil,
0000000000000000000000000000000000000000;;				success:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "defaulted-selflink",
0000000000000000000000000000000000000000;;				pod:  &defaultedSelfLinkPod,
0000000000000000000000000000000000000000;;				container: &v1.Container{
0000000000000000000000000000000000000000;;					Name: "by-name",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ObjectReference{
0000000000000000000000000000000000000000;;					Kind:            "Pod",
0000000000000000000000000000000000000000;;					APIVersion:      api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;					Name:            "ok",
0000000000000000000000000000000000000000;;					Namespace:       "test-ns",
0000000000000000000000000000000000000000;;					UID:             "bar",
0000000000000000000000000000000000000000;;					ResourceVersion: "42",
0000000000000000000000000000000000000000;;					FieldPath:       ".spec.containers{by-name}",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "implicitly-required",
0000000000000000000000000000000000000000;;				pod:  &okPod,
0000000000000000000000000000000000000000;;				container: &v1.Container{
0000000000000000000000000000000000000000;;					Name: "net",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &v1.ObjectReference{
0000000000000000000000000000000000000000;;					Kind:            "Pod",
0000000000000000000000000000000000000000;;					APIVersion:      api.Registry.GroupOrDie(v1.GroupName).GroupVersion.String(),
0000000000000000000000000000000000000000;;					Name:            "ok",
0000000000000000000000000000000000000000;;					Namespace:       "test-ns",
0000000000000000000000000000000000000000;;					UID:             "bar",
0000000000000000000000000000000000000000;;					ResourceVersion: "42",
0000000000000000000000000000000000000000;;					FieldPath:       "implicitly required container net",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				success: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			actual, err := GenerateContainerRef(tc.pod, tc.container)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if tc.success {
0000000000000000000000000000000000000000;;					t.Errorf("%v: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !tc.success {
0000000000000000000000000000000000000000;;				t.Errorf("%v: unexpected success", tc.name)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if e, a := tc.expected.Kind, actual.Kind; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: kind: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expected.APIVersion, actual.APIVersion; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: apiVersion: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expected.Name, actual.Name; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: name: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expected.Namespace, actual.Namespace; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: namespace: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expected.UID, actual.UID; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: uid: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expected.ResourceVersion, actual.ResourceVersion; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: kind: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
