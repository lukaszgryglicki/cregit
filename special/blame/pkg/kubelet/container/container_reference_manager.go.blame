0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
5017339b48d0d7bd4724cc7205af2403bbbfdc76;pkg/kubelet/container_reference_manager.go[pkg/kubelet/container_reference_manager.go][pkg/kubelet/container/container_reference_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RefManager manages the references for the containers.
0000000000000000000000000000000000000000;;	// The references are used for reporting events such as creation,
0000000000000000000000000000000000000000;;	// failure, etc. This manager is thread-safe, no locks are necessary
0000000000000000000000000000000000000000;;	// for the caller.
0000000000000000000000000000000000000000;;	type RefManager struct {
0000000000000000000000000000000000000000;;		sync.RWMutex
0000000000000000000000000000000000000000;;		containerIDToRef map[ContainerID]*v1.ObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRefManager creates and returns a container reference manager
0000000000000000000000000000000000000000;;	// with empty contents.
0000000000000000000000000000000000000000;;	func NewRefManager() *RefManager {
0000000000000000000000000000000000000000;;		return &RefManager{containerIDToRef: make(map[ContainerID]*v1.ObjectReference)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRef stores a reference to a pod's container, associating it with the given container ID.
0000000000000000000000000000000000000000;;	func (c *RefManager) SetRef(id ContainerID, ref *v1.ObjectReference) {
0000000000000000000000000000000000000000;;		c.Lock()
0000000000000000000000000000000000000000;;		defer c.Unlock()
0000000000000000000000000000000000000000;;		c.containerIDToRef[id] = ref
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClearRef forgets the given container id and its associated container reference.
0000000000000000000000000000000000000000;;	func (c *RefManager) ClearRef(id ContainerID) {
0000000000000000000000000000000000000000;;		c.Lock()
0000000000000000000000000000000000000000;;		defer c.Unlock()
0000000000000000000000000000000000000000;;		delete(c.containerIDToRef, id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetRef returns the container reference of the given ID, or (nil, false) if none is stored.
0000000000000000000000000000000000000000;;	func (c *RefManager) GetRef(id ContainerID) (ref *v1.ObjectReference, ok bool) {
0000000000000000000000000000000000000000;;		c.RLock()
0000000000000000000000000000000000000000;;		defer c.RUnlock()
0000000000000000000000000000000000000000;;		ref, ok = c.containerIDToRef[id]
0000000000000000000000000000000000000000;;		return ref, ok
0000000000000000000000000000000000000000;;	}
