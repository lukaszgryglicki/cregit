0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
26b7809da8de09f6f57e5876dcf9c28441b18f54;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		ctest "k8s.io/kubernetes/pkg/kubelet/container/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func comparePods(t *testing.T, expected []*ctest.FakePod, actual []*Pod) {
0000000000000000000000000000000000000000;;		if len(expected) != len(actual) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %d pods, got %d instead", len(expected), len(actual))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range expected {
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(expected[i].Pod, actual[i]) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %#v, got %#v", expected[i].Pod, actual[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPods(t *testing.T) {
0000000000000000000000000000000000000000;;		runtime := &ctest.FakeRuntime{}
0000000000000000000000000000000000000000;;		expected := []*ctest.FakePod{{Pod: &Pod{ID: "1111"}}, {Pod: &Pod{ID: "2222"}}, {Pod: &Pod{ID: "3333"}}}
0000000000000000000000000000000000000000;;		runtime.PodList = expected
0000000000000000000000000000000000000000;;		cache := NewTestRuntimeCache(runtime)
0000000000000000000000000000000000000000;;		actual, err := cache.GetPods()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		comparePods(t, expected, actual)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestForceUpdateIfOlder(t *testing.T) {
0000000000000000000000000000000000000000;;		runtime := &ctest.FakeRuntime{}
0000000000000000000000000000000000000000;;		cache := NewTestRuntimeCache(runtime)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Cache old pods.
0000000000000000000000000000000000000000;;		oldpods := []*ctest.FakePod{{Pod: &Pod{ID: "1111"}}}
0000000000000000000000000000000000000000;;		runtime.PodList = oldpods
0000000000000000000000000000000000000000;;		cache.UpdateCacheWithLock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update the runtime to new pods.
0000000000000000000000000000000000000000;;		newpods := []*ctest.FakePod{{Pod: &Pod{ID: "1111"}}, {Pod: &Pod{ID: "2222"}}, {Pod: &Pod{ID: "3333"}}}
0000000000000000000000000000000000000000;;		runtime.PodList = newpods
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An older timestamp should not force an update.
0000000000000000000000000000000000000000;;		cache.ForceUpdateIfOlder(time.Now().Add(-20 * time.Minute))
0000000000000000000000000000000000000000;;		actual := cache.GetCachedPods()
0000000000000000000000000000000000000000;;		comparePods(t, oldpods, actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A newer timestamp should force an update.
0000000000000000000000000000000000000000;;		cache.ForceUpdateIfOlder(time.Now().Add(20 * time.Second))
0000000000000000000000000000000000000000;;		actual = cache.GetCachedPods()
0000000000000000000000000000000000000000;;		comparePods(t, newpods, actual)
0000000000000000000000000000000000000000;;	}
