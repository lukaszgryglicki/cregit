0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
78e5b7b199f3b1ca3e809e76f790a13a3df41c14;pkg/kubelet/container_gc.go[pkg/kubelet/container_gc.go][pkg/kubelet/container/container_gc.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Specified a policy for garbage collecting containers.
0000000000000000000000000000000000000000;;	type ContainerGCPolicy struct {
0000000000000000000000000000000000000000;;		// Minimum age at which a container can be garbage collected, zero for no limit.
0000000000000000000000000000000000000000;;		MinAge time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Max number of dead containers any single pod (UID, container name) pair is
0000000000000000000000000000000000000000;;		// allowed to have, less than zero for no limit.
0000000000000000000000000000000000000000;;		MaxPerPodContainer int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Max number of total dead containers, less than zero for no limit.
0000000000000000000000000000000000000000;;		MaxContainers int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Manages garbage collection of dead containers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Implementation is thread-compatible.
0000000000000000000000000000000000000000;;	type ContainerGC interface {
0000000000000000000000000000000000000000;;		// Garbage collect containers.
0000000000000000000000000000000000000000;;		GarbageCollect() error
0000000000000000000000000000000000000000;;		// Deletes all unused containers, including containers belonging to pods that are terminated but not deleted
0000000000000000000000000000000000000000;;		DeleteAllUnusedContainers() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SourcesReadyProvider knows how to determine if configuration sources are ready
0000000000000000000000000000000000000000;;	type SourcesReadyProvider interface {
0000000000000000000000000000000000000000;;		// AllReady returns true if the currently configured sources have all been seen.
0000000000000000000000000000000000000000;;		AllReady() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(vmarmol): Preferentially remove pod infra containers.
0000000000000000000000000000000000000000;;	type realContainerGC struct {
0000000000000000000000000000000000000000;;		// Container runtime
0000000000000000000000000000000000000000;;		runtime Runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Policy for garbage collection.
0000000000000000000000000000000000000000;;		policy ContainerGCPolicy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sourcesReadyProvider provides the readyness of kubelet configuration sources.
0000000000000000000000000000000000000000;;		sourcesReadyProvider SourcesReadyProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New ContainerGC instance with the specified policy.
0000000000000000000000000000000000000000;;	func NewContainerGC(runtime Runtime, policy ContainerGCPolicy, sourcesReadyProvider SourcesReadyProvider) (ContainerGC, error) {
0000000000000000000000000000000000000000;;		if policy.MinAge < 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("invalid minimum garbage collection age: %v", policy.MinAge)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &realContainerGC{
0000000000000000000000000000000000000000;;			runtime:              runtime,
0000000000000000000000000000000000000000;;			policy:               policy,
0000000000000000000000000000000000000000;;			sourcesReadyProvider: sourcesReadyProvider,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cgc *realContainerGC) GarbageCollect() error {
0000000000000000000000000000000000000000;;		return cgc.runtime.GarbageCollect(cgc.policy, cgc.sourcesReadyProvider.AllReady(), false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cgc *realContainerGC) DeleteAllUnusedContainers() error {
0000000000000000000000000000000000000000;;		return cgc.runtime.GarbageCollect(cgc.policy, cgc.sourcesReadyProvider.AllReady(), true)
0000000000000000000000000000000000000000;;	}
