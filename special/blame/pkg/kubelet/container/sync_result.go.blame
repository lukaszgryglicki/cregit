0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
5cac670df1b6f6cbe7ba1d6e8423de7b03baad3d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package container
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(random-liu): We need to better organize runtime errors for introspection.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Container Terminated and Kubelet is backing off the restart
0000000000000000000000000000000000000000;;	var ErrCrashLoopBackOff = errors.New("CrashLoopBackOff")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrContainerNotFound returned when a container in the given pod with the
0000000000000000000000000000000000000000;;		// given container name was not found, amongst those managed by the kubelet.
0000000000000000000000000000000000000000;;		ErrContainerNotFound = errors.New("no matching container")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrRunContainer     = errors.New("RunContainerError")
0000000000000000000000000000000000000000;;		ErrKillContainer    = errors.New("KillContainerError")
0000000000000000000000000000000000000000;;		ErrVerifyNonRoot    = errors.New("VerifyNonRootError")
0000000000000000000000000000000000000000;;		ErrRunInitContainer = errors.New("RunInitContainerError")
0000000000000000000000000000000000000000;;		ErrCreatePodSandbox = errors.New("CreatePodSandboxError")
0000000000000000000000000000000000000000;;		ErrConfigPodSandbox = errors.New("ConfigPodSandboxError")
0000000000000000000000000000000000000000;;		ErrKillPodSandbox   = errors.New("KillPodSandboxError")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrSetupNetwork    = errors.New("SetupNetworkError")
0000000000000000000000000000000000000000;;		ErrTeardownNetwork = errors.New("TeardownNetworkError")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SyncAction indicates different kind of actions in SyncPod() and KillPod(). Now there are only actions
0000000000000000000000000000000000000000;;	// about start/kill container and setup/teardown network.
0000000000000000000000000000000000000000;;	type SyncAction string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		StartContainer   SyncAction = "StartContainer"
0000000000000000000000000000000000000000;;		KillContainer    SyncAction = "KillContainer"
0000000000000000000000000000000000000000;;		SetupNetwork     SyncAction = "SetupNetwork"
0000000000000000000000000000000000000000;;		TeardownNetwork  SyncAction = "TeardownNetwork"
0000000000000000000000000000000000000000;;		InitContainer    SyncAction = "InitContainer"
0000000000000000000000000000000000000000;;		CreatePodSandbox SyncAction = "CreatePodSandbox"
0000000000000000000000000000000000000000;;		ConfigPodSandbox SyncAction = "ConfigPodSandbox"
0000000000000000000000000000000000000000;;		KillPodSandbox   SyncAction = "KillPodSandbox"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SyncResult is the result of sync action.
0000000000000000000000000000000000000000;;	type SyncResult struct {
0000000000000000000000000000000000000000;;		// The associated action of the result
0000000000000000000000000000000000000000;;		Action SyncAction
0000000000000000000000000000000000000000;;		// The target of the action, now the target can only be:
0000000000000000000000000000000000000000;;		//  * Container: Target should be container name
0000000000000000000000000000000000000000;;		//  * Network: Target is useless now, we just set it as pod full name now
0000000000000000000000000000000000000000;;		Target interface{}
0000000000000000000000000000000000000000;;		// Brief error reason
0000000000000000000000000000000000000000;;		Error error
0000000000000000000000000000000000000000;;		// Human readable error reason
0000000000000000000000000000000000000000;;		Message string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSyncResult generates new SyncResult with specific Action and Target
0000000000000000000000000000000000000000;;	func NewSyncResult(action SyncAction, target interface{}) *SyncResult {
0000000000000000000000000000000000000000;;		return &SyncResult{Action: action, Target: target}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fail fails the SyncResult with specific error and message
0000000000000000000000000000000000000000;;	func (r *SyncResult) Fail(err error, msg string) {
0000000000000000000000000000000000000000;;		r.Error, r.Message = err, msg
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSyncResult is the summary result of SyncPod() and KillPod()
0000000000000000000000000000000000000000;;	type PodSyncResult struct {
0000000000000000000000000000000000000000;;		// Result of different sync actions
0000000000000000000000000000000000000000;;		SyncResults []*SyncResult
0000000000000000000000000000000000000000;;		// Error encountered in SyncPod() and KillPod() that is not already included in SyncResults
0000000000000000000000000000000000000000;;		SyncError error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddSyncResult adds multiple SyncResult to current PodSyncResult
0000000000000000000000000000000000000000;;	func (p *PodSyncResult) AddSyncResult(result ...*SyncResult) {
0000000000000000000000000000000000000000;;		p.SyncResults = append(p.SyncResults, result...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddPodSyncResult merges a PodSyncResult to current one
0000000000000000000000000000000000000000;;	func (p *PodSyncResult) AddPodSyncResult(result PodSyncResult) {
0000000000000000000000000000000000000000;;		p.AddSyncResult(result.SyncResults...)
0000000000000000000000000000000000000000;;		p.SyncError = result.SyncError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fail fails the PodSyncResult with an error occurred in SyncPod() and KillPod() itself
0000000000000000000000000000000000000000;;	func (p *PodSyncResult) Fail(err error) {
0000000000000000000000000000000000000000;;		p.SyncError = err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns an error summarizing all the errors in PodSyncResult
0000000000000000000000000000000000000000;;	func (p *PodSyncResult) Error() error {
0000000000000000000000000000000000000000;;		errlist := []error{}
0000000000000000000000000000000000000000;;		if p.SyncError != nil {
0000000000000000000000000000000000000000;;			errlist = append(errlist, fmt.Errorf("failed to SyncPod: %v\n", p.SyncError))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, result := range p.SyncResults {
0000000000000000000000000000000000000000;;			if result.Error != nil {
0000000000000000000000000000000000000000;;				errlist = append(errlist, fmt.Errorf("failed to %q for %q with %v: %q\n", result.Action, result.Target,
0000000000000000000000000000000000000000;;					result.Error, result.Message))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return utilerrors.NewAggregate(errlist)
0000000000000000000000000000000000000000;;	}
