0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
693697d3353ff9b752a15093b8e4ecdc34a27ffd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package sliceutils
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func StringInSlice(s string, list []string) bool {
0000000000000000000000000000000000000000;;		for _, v := range list {
0000000000000000000000000000000000000000;;			if v == s {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodsByCreationTime makes an array of pods sortable by their creation
0000000000000000000000000000000000000000;;	// timestamps in ascending order.
0000000000000000000000000000000000000000;;	type PodsByCreationTime []*v1.Pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s PodsByCreationTime) Len() int {
0000000000000000000000000000000000000000;;		return len(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s PodsByCreationTime) Swap(i, j int) {
0000000000000000000000000000000000000000;;		s[i], s[j] = s[j], s[i]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s PodsByCreationTime) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return s[i].CreationTimestamp.Before(s[j].CreationTimestamp)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByImageSize makes an array of images sortable by their size in descending
0000000000000000000000000000000000000000;;	// order.
0000000000000000000000000000000000000000;;	type ByImageSize []kubecontainer.Image
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ByImageSize) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return a[i].Size > a[j].Size
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (a ByImageSize) Len() int      { return len(a) }
0000000000000000000000000000000000000000;;	func (a ByImageSize) Swap(i, j int) { a[i], a[j] = a[j], a[i] }
