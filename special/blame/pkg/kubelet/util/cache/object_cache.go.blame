0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cfc2e54d3905ef0e2443988b27bac54ec2b6e1ea;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expirationcache "k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectCache is a simple wrapper of expiration cache that
0000000000000000000000000000000000000000;;	// 1. use string type key
0000000000000000000000000000000000000000;;	// 2. has an updater to get value directly if it is expired
0000000000000000000000000000000000000000;;	// 3. then update the cache
0000000000000000000000000000000000000000;;	type ObjectCache struct {
0000000000000000000000000000000000000000;;		cache   expirationcache.Store
0000000000000000000000000000000000000000;;		updater func() (interface{}, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// objectEntry is an object with string type key.
0000000000000000000000000000000000000000;;	type objectEntry struct {
0000000000000000000000000000000000000000;;		key string
0000000000000000000000000000000000000000;;		obj interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewObjectCache creates ObjectCache with an updater.
0000000000000000000000000000000000000000;;	// updater returns an object to cache.
0000000000000000000000000000000000000000;;	func NewObjectCache(f func() (interface{}, error), ttl time.Duration) *ObjectCache {
0000000000000000000000000000000000000000;;		return &ObjectCache{
0000000000000000000000000000000000000000;;			updater: f,
0000000000000000000000000000000000000000;;			cache:   expirationcache.NewTTLStore(stringKeyFunc, ttl),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stringKeyFunc is a string as cache key function
0000000000000000000000000000000000000000;;	func stringKeyFunc(obj interface{}) (string, error) {
0000000000000000000000000000000000000000;;		key := obj.(objectEntry).key
0000000000000000000000000000000000000000;;		return key, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get gets cached objectEntry by using a unique string as the key.
0000000000000000000000000000000000000000;;	func (c *ObjectCache) Get(key string) (interface{}, error) {
0000000000000000000000000000000000000000;;		value, ok, err := c.cache.Get(objectEntry{key: key})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			obj, err := c.updater()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err = c.cache.Add(objectEntry{
0000000000000000000000000000000000000000;;				key: key,
0000000000000000000000000000000000000000;;				obj: obj,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return obj, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return value.(objectEntry).obj, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ObjectCache) Add(key string, obj interface{}) error {
0000000000000000000000000000000000000000;;		err := c.cache.Add(objectEntry{key: key, obj: obj})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
