0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cfc2e54d3905ef0e2443988b27bac54ec2b6e1ea;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		expirationcache "k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testObject struct {
0000000000000000000000000000000000000000;;		key string
0000000000000000000000000000000000000000;;		val string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A fake objectCache for unit test.
0000000000000000000000000000000000000000;;	func NewFakeObjectCache(f func() (interface{}, error), ttl time.Duration, clock clock.Clock) *ObjectCache {
0000000000000000000000000000000000000000;;		ttlPolicy := &expirationcache.TTLPolicy{Ttl: ttl, Clock: clock}
0000000000000000000000000000000000000000;;		deleteChan := make(chan string, 1)
0000000000000000000000000000000000000000;;		return &ObjectCache{
0000000000000000000000000000000000000000;;			updater: f,
0000000000000000000000000000000000000000;;			cache:   expirationcache.NewFakeExpirationStore(stringKeyFunc, deleteChan, ttlPolicy, clock),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddAndGet(t *testing.T) {
0000000000000000000000000000000000000000;;		testObj := testObject{
0000000000000000000000000000000000000000;;			key: "foo",
0000000000000000000000000000000000000000;;			val: "bar",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		objectCache := NewFakeObjectCache(func() (interface{}, error) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Unexpected Error: updater should never be called in this test!")
0000000000000000000000000000000000000000;;		}, 1*time.Hour, clock.NewFakeClock(time.Now()))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := objectCache.Add(testObj.key, testObj.val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to add obj %#v by key: %s", testObj, testObj.key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		value, err := objectCache.Get(testObj.key)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to get obj %#v by key: %s", testObj, testObj.key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if value.(string) != testObj.val {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to get cached value: %#v, but got: %s", testObj.val, value.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExpirationBasic(t *testing.T) {
0000000000000000000000000000000000000000;;		unexpectedVal := "bar"
0000000000000000000000000000000000000000;;		expectedVal := "bar2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testObj := testObject{
0000000000000000000000000000000000000000;;			key: "foo",
0000000000000000000000000000000000000000;;			val: unexpectedVal,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		objectCache := NewFakeObjectCache(func() (interface{}, error) {
0000000000000000000000000000000000000000;;			return expectedVal, nil
0000000000000000000000000000000000000000;;		}, 1*time.Second, fakeClock)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := objectCache.Add(testObj.key, testObj.val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to add obj %#v by key: %s", testObj, testObj.key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sleep 2s so cache should be expired.
0000000000000000000000000000000000000000;;		fakeClock.Sleep(2 * time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		value, err := objectCache.Get(testObj.key)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to get obj %#v by key: %s", testObj, testObj.key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if value.(string) != expectedVal {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to get cached value: %#v, but got: %s", expectedVal, value.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
