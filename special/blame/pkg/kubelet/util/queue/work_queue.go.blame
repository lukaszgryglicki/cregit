0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
233e8ee43e98b845c8205ff55222aca457a8285f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package queue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WorkQueue allows queuing items with a timestamp. An item is
0000000000000000000000000000000000000000;;	// considered ready to process if the timestamp has expired.
0000000000000000000000000000000000000000;;	type WorkQueue interface {
0000000000000000000000000000000000000000;;		// GetWork dequeues and returns all ready items.
0000000000000000000000000000000000000000;;		GetWork() []types.UID
0000000000000000000000000000000000000000;;		// Enqueue inserts a new item or overwrites an existing item.
0000000000000000000000000000000000000000;;		Enqueue(item types.UID, delay time.Duration)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type basicWorkQueue struct {
0000000000000000000000000000000000000000;;		clock clock.Clock
0000000000000000000000000000000000000000;;		lock  sync.Mutex
0000000000000000000000000000000000000000;;		queue map[types.UID]time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ WorkQueue = &basicWorkQueue{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewBasicWorkQueue(clock clock.Clock) WorkQueue {
0000000000000000000000000000000000000000;;		queue := make(map[types.UID]time.Time)
0000000000000000000000000000000000000000;;		return &basicWorkQueue{queue: queue, clock: clock}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *basicWorkQueue) GetWork() []types.UID {
0000000000000000000000000000000000000000;;		q.lock.Lock()
0000000000000000000000000000000000000000;;		defer q.lock.Unlock()
0000000000000000000000000000000000000000;;		now := q.clock.Now()
0000000000000000000000000000000000000000;;		var items []types.UID
0000000000000000000000000000000000000000;;		for k, v := range q.queue {
0000000000000000000000000000000000000000;;			if v.Before(now) {
0000000000000000000000000000000000000000;;				items = append(items, k)
0000000000000000000000000000000000000000;;				delete(q.queue, k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return items
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *basicWorkQueue) Enqueue(item types.UID, delay time.Duration) {
0000000000000000000000000000000000000000;;		q.lock.Lock()
0000000000000000000000000000000000000000;;		defer q.lock.Unlock()
0000000000000000000000000000000000000000;;		q.queue[item] = q.clock.Now().Add(delay)
0000000000000000000000000000000000000000;;	}
