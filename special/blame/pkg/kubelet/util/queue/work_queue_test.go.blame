0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
233e8ee43e98b845c8205ff55222aca457a8285f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package queue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestBasicWorkQueue() (*basicWorkQueue, *clock.FakeClock) {
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		wq := &basicWorkQueue{
0000000000000000000000000000000000000000;;			clock: fakeClock,
0000000000000000000000000000000000000000;;			queue: make(map[types.UID]time.Time),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return wq, fakeClock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func compareResults(t *testing.T, expected, actual []types.UID) {
0000000000000000000000000000000000000000;;		expectedSet := sets.NewString()
0000000000000000000000000000000000000000;;		for _, u := range expected {
0000000000000000000000000000000000000000;;			expectedSet.Insert(string(u))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actualSet := sets.NewString()
0000000000000000000000000000000000000000;;		for _, u := range actual {
0000000000000000000000000000000000000000;;			actualSet.Insert(string(u))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !expectedSet.Equal(actualSet) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, got %#v", expectedSet.List(), actualSet.List())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetWork(t *testing.T) {
0000000000000000000000000000000000000000;;		q, clock := newTestBasicWorkQueue()
0000000000000000000000000000000000000000;;		q.Enqueue(types.UID("foo1"), -1*time.Minute)
0000000000000000000000000000000000000000;;		q.Enqueue(types.UID("foo2"), -1*time.Minute)
0000000000000000000000000000000000000000;;		q.Enqueue(types.UID("foo3"), 1*time.Minute)
0000000000000000000000000000000000000000;;		q.Enqueue(types.UID("foo4"), 1*time.Minute)
0000000000000000000000000000000000000000;;		expected := []types.UID{types.UID("foo1"), types.UID("foo2")}
0000000000000000000000000000000000000000;;		compareResults(t, expected, q.GetWork())
0000000000000000000000000000000000000000;;		compareResults(t, []types.UID{}, q.GetWork())
0000000000000000000000000000000000000000;;		// Dial the time to 1 hour ahead.
0000000000000000000000000000000000000000;;		clock.Step(time.Hour)
0000000000000000000000000000000000000000;;		expected = []types.UID{types.UID("foo3"), types.UID("foo4")}
0000000000000000000000000000000000000000;;		compareResults(t, expected, q.GetWork())
0000000000000000000000000000000000000000;;		compareResults(t, []types.UID{}, q.GetWork())
0000000000000000000000000000000000000000;;	}
