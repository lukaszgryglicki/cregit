0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4eddfd85e9a70a5fd68b303669a15113e4f5d3ab;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FromApiserverCache modifies <opts> so that the GET request will
0000000000000000000000000000000000000000;;	// be served from apiserver cache instead of from etcd.
0000000000000000000000000000000000000000;;	func FromApiserverCache(opts *metav1.GetOptions) {
0000000000000000000000000000000000000000;;		opts.ResourceVersion = "0"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseEndpoint(endpoint string) (string, string, error) {
0000000000000000000000000000000000000000;;		u, err := url.Parse(endpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if u.Scheme == "tcp" {
0000000000000000000000000000000000000000;;			return "tcp", u.Host, nil
0000000000000000000000000000000000000000;;		} else if u.Scheme == "unix" {
0000000000000000000000000000000000000000;;			return "unix", u.Path, nil
0000000000000000000000000000000000000000;;		} else if u.Scheme == "" {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("Using %q as endpoint is deprecated, please consider using full url format", endpoint)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return u.Scheme, "", fmt.Errorf("protocol %q not supported", u.Scheme)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
