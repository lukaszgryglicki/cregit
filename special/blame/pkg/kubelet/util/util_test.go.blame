0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
5c186f4b326b0c420fa66e505400f7d822a3a70e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseEndpoint(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			endpoint         string
0000000000000000000000000000000000000000;;			expectError      bool
0000000000000000000000000000000000000000;;			expectedProtocol string
0000000000000000000000000000000000000000;;			expectedAddr     string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				endpoint:         "unix:///tmp/s1.sock",
0000000000000000000000000000000000000000;;				expectedProtocol: "unix",
0000000000000000000000000000000000000000;;				expectedAddr:     "/tmp/s1.sock",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				endpoint:         "tcp://localhost:15880",
0000000000000000000000000000000000000000;;				expectedProtocol: "tcp",
0000000000000000000000000000000000000000;;				expectedAddr:     "localhost:15880",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				endpoint:         "tcp1://abc",
0000000000000000000000000000000000000000;;				expectedProtocol: "tcp1",
0000000000000000000000000000000000000000;;				expectError:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				endpoint:    "a b c",
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			protocol, addr, err := parseEndpoint(test.endpoint)
0000000000000000000000000000000000000000;;			assert.Equal(t, test.expectedProtocol, protocol)
0000000000000000000000000000000000000000;;			if test.expectError {
0000000000000000000000000000000000000000;;				assert.NotNil(t, err, "Expect error during parsing %q", test.endpoint)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			assert.Nil(t, err, "Expect no error during parsing %q", test.endpoint)
0000000000000000000000000000000000000000;;			assert.Equal(t, test.expectedAddr, addr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
