0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
43974cc0fbe947b6453b2fafa6e8efb85be07878;pkg/kubelet/util/format.go[pkg/kubelet/util/format.go][pkg/kubelet/util/format/pod.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package format
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type podHandler func(*v1.Pod) string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pod returns a string representing a pod in a consistent human readable format,
0000000000000000000000000000000000000000;;	// with pod UID as part of the string.
0000000000000000000000000000000000000000;;	func Pod(pod *v1.Pod) string {
0000000000000000000000000000000000000000;;		return PodDesc(pod.Name, pod.Namespace, pod.UID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodDesc returns a string representing a pod in a consistent human readable format,
0000000000000000000000000000000000000000;;	// with pod UID as part of the string.
0000000000000000000000000000000000000000;;	func PodDesc(podName, podNamespace string, podUID types.UID) string {
0000000000000000000000000000000000000000;;		// Use underscore as the delimiter because it is not allowed in pod name
0000000000000000000000000000000000000000;;		// (DNS subdomain format), while allowed in the container name format.
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s_%s(%s)", podName, podNamespace, podUID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodWithDeletionTimestamp is the same as Pod. In addition, it prints the
0000000000000000000000000000000000000000;;	// deletion timestamp of the pod if it's not nil.
0000000000000000000000000000000000000000;;	func PodWithDeletionTimestamp(pod *v1.Pod) string {
0000000000000000000000000000000000000000;;		var deletionTimestamp string
0000000000000000000000000000000000000000;;		if pod.DeletionTimestamp != nil {
0000000000000000000000000000000000000000;;			deletionTimestamp = ":DeletionTimestamp=" + pod.DeletionTimestamp.UTC().Format(time.RFC3339)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Pod(pod) + deletionTimestamp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pods returns a string representating a list of pods in a human
0000000000000000000000000000000000000000;;	// readable format.
0000000000000000000000000000000000000000;;	func Pods(pods []*v1.Pod) string {
0000000000000000000000000000000000000000;;		return aggregatePods(pods, Pod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodsWithDeletiontimestamps is the same as Pods. In addition, it prints the
0000000000000000000000000000000000000000;;	// deletion timestamps of the pods if they are not nil.
0000000000000000000000000000000000000000;;	func PodsWithDeletiontimestamps(pods []*v1.Pod) string {
0000000000000000000000000000000000000000;;		return aggregatePods(pods, PodWithDeletionTimestamp)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func aggregatePods(pods []*v1.Pod, handler podHandler) string {
0000000000000000000000000000000000000000;;		podStrings := make([]string, 0, len(pods))
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			podStrings = append(podStrings, handler(pod))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf(strings.Join(podStrings, ", "))
0000000000000000000000000000000000000000;;	}
