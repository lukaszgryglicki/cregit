0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
876f49e842afc754615b7329892fb39b41274a02;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestKubeletDirs(t *testing.T) {
0000000000000000000000000000000000000000;;		testKubelet := newTestKubelet(t, false /* controllerAttachDetachEnabled */)
0000000000000000000000000000000000000000;;		defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;		kubelet := testKubelet.kubelet
0000000000000000000000000000000000000000;;		root := kubelet.rootDirectory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var exp, got string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPodsDir()
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "pods")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPluginsDir()
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "plugins")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPluginDir("foobar")
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "plugins/foobar")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPodDir("abc123")
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "pods/abc123")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPodVolumesDir("abc123")
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "pods/abc123/volumes")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPodVolumeDir("abc123", "plugin", "foobar")
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "pods/abc123/volumes/plugin/foobar")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPodPluginsDir("abc123")
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "pods/abc123/plugins")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPodPluginDir("abc123", "foobar")
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "pods/abc123/plugins/foobar")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got = kubelet.getPodContainerDir("abc123", "def456")
0000000000000000000000000000000000000000;;		exp = filepath.Join(root, "pods/abc123/containers/def456")
0000000000000000000000000000000000000000;;		assert.Equal(t, exp, got)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestKubeletDirsCompat(t *testing.T) {
0000000000000000000000000000000000000000;;		testKubelet := newTestKubelet(t, false /* controllerAttachDetachEnabled */)
0000000000000000000000000000000000000000;;		defer testKubelet.Cleanup()
0000000000000000000000000000000000000000;;		kubelet := testKubelet.kubelet
0000000000000000000000000000000000000000;;		root := kubelet.rootDirectory
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(root, 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Old-style pod dir.
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(fmt.Sprintf("%s/oldpod", root), 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// New-style pod dir.
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(fmt.Sprintf("%s/pods/newpod", root), 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Both-style pod dir.
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(fmt.Sprintf("%s/bothpod", root), 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(fmt.Sprintf("%s/pods/bothpod", root), 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, filepath.Join(root, "oldpod"), kubelet.getPodDir("oldpod"))
0000000000000000000000000000000000000000;;		assert.Equal(t, filepath.Join(root, "pods/newpod"), kubelet.getPodDir("newpod"))
0000000000000000000000000000000000000000;;		assert.Equal(t, filepath.Join(root, "pods/bothpod"), kubelet.getPodDir("bothpod"))
0000000000000000000000000000000000000000;;		assert.Equal(t, filepath.Join(root, "pods/neitherpod"), kubelet.getPodDir("neitherpod"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		root = kubelet.getPodDir("newpod")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Old-style container dir.
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(fmt.Sprintf("%s/oldctr", root), 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// New-style container dir.
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(fmt.Sprintf("%s/containers/newctr", root), 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Both-style container dir.
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(fmt.Sprintf("%s/bothctr", root), 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;		require.NoError(t, os.MkdirAll(fmt.Sprintf("%s/containers/bothctr", root), 0750), "can't mkdir(%q)", root)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, filepath.Join(root, "oldctr"), kubelet.getPodContainerDir("newpod", "oldctr"))
0000000000000000000000000000000000000000;;		assert.Equal(t, filepath.Join(root, "containers/newctr"), kubelet.getPodContainerDir("newpod", "newctr"))
0000000000000000000000000000000000000000;;		assert.Equal(t, filepath.Join(root, "containers/bothctr"), kubelet.getPodContainerDir("newpod", "bothctr"))
0000000000000000000000000000000000000000;;		assert.Equal(t, filepath.Join(root, "containers/neitherctr"), kubelet.getPodContainerDir("newpod", "neitherctr"))
0000000000000000000000000000000000000000;;	}
