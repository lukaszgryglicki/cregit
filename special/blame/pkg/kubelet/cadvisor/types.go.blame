0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
9706d70cbcb87d3fc1030bac3fe9b5f2862bac1e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cadvisor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/events"
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		cadvisorapiv2 "github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface is an abstract interface for testability.  It abstracts the interface to cAdvisor.
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		Start() error
0000000000000000000000000000000000000000;;		DockerContainer(name string, req *cadvisorapi.ContainerInfoRequest) (cadvisorapi.ContainerInfo, error)
0000000000000000000000000000000000000000;;		ContainerInfo(name string, req *cadvisorapi.ContainerInfoRequest) (*cadvisorapi.ContainerInfo, error)
0000000000000000000000000000000000000000;;		ContainerInfoV2(name string, options cadvisorapiv2.RequestOptions) (map[string]cadvisorapiv2.ContainerInfo, error)
0000000000000000000000000000000000000000;;		SubcontainerInfo(name string, req *cadvisorapi.ContainerInfoRequest) (map[string]*cadvisorapi.ContainerInfo, error)
0000000000000000000000000000000000000000;;		MachineInfo() (*cadvisorapi.MachineInfo, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VersionInfo() (*cadvisorapi.VersionInfo, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns usage information about the filesystem holding Docker images.
0000000000000000000000000000000000000000;;		ImagesFsInfo() (cadvisorapiv2.FsInfo, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns usage information about the root filesystem.
0000000000000000000000000000000000000000;;		RootFsInfo() (cadvisorapiv2.FsInfo, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get events streamed through passedChannel that fit the request.
0000000000000000000000000000000000000000;;		WatchEvents(request *events.Request) (*events.EventChannel, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HasDedicatedImageFs returns true iff a dedicated image filesystem exists for storing images.
0000000000000000000000000000000000000000;;		HasDedicatedImageFs() (bool, error)
0000000000000000000000000000000000000000;;	}
