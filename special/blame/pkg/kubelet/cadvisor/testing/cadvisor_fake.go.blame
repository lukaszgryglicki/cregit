0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
76817aca76c0468bfa3f8fd8b5ae579776f60dae;pkg/kubelet/cadvisor/cadvisor_fake.go[pkg/kubelet/cadvisor/cadvisor_fake.go][pkg/kubelet/cadvisor/testing/cadvisor_fake.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/events"
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		cadvisorapiv2 "github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cadvisor"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fake cAdvisor implementation.
0000000000000000000000000000000000000000;;	type Fake struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ cadvisor.Interface = new(Fake)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) Start() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) ContainerInfo(name string, req *cadvisorapi.ContainerInfoRequest) (*cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		return new(cadvisorapi.ContainerInfo), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) ContainerInfoV2(name string, options cadvisorapiv2.RequestOptions) (map[string]cadvisorapiv2.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		return map[string]cadvisorapiv2.ContainerInfo{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) SubcontainerInfo(name string, req *cadvisorapi.ContainerInfoRequest) (map[string]*cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		return map[string]*cadvisorapi.ContainerInfo{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) DockerContainer(name string, req *cadvisorapi.ContainerInfoRequest) (cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		return cadvisorapi.ContainerInfo{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) MachineInfo() (*cadvisorapi.MachineInfo, error) {
0000000000000000000000000000000000000000;;		// Simulate a matchin with 1 core and 3.75GB of memory.
0000000000000000000000000000000000000000;;		// We set it to non-zero values to make non-zero-capacity machines in Kubemark.
0000000000000000000000000000000000000000;;		return &cadvisorapi.MachineInfo{
0000000000000000000000000000000000000000;;			NumCores:       1,
0000000000000000000000000000000000000000;;			MemoryCapacity: 4026531840,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) VersionInfo() (*cadvisorapi.VersionInfo, error) {
0000000000000000000000000000000000000000;;		return new(cadvisorapi.VersionInfo), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) ImagesFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		return cadvisorapiv2.FsInfo{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) RootFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		return cadvisorapiv2.FsInfo{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) WatchEvents(request *events.Request) (*events.EventChannel, error) {
0000000000000000000000000000000000000000;;		return new(events.EventChannel), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Fake) HasDedicatedImageFs() (bool, error) {
0000000000000000000000000000000000000000;;		return false, nil
0000000000000000000000000000000000000000;;	}
