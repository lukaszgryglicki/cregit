0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
9706d70cbcb87d3fc1030bac3fe9b5f2862bac1e;pkg/kubelet/cadvisor/cadvisor_mock.go[pkg/kubelet/cadvisor/cadvisor_mock.go][pkg/kubelet/cadvisor/testing/cadvisor_mock.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/events"
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		cadvisorapiv2 "github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/mock"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cadvisor"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Mock struct {
0000000000000000000000000000000000000000;;		mock.Mock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ cadvisor.Interface = new(Mock)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Mock) Start() error {
0000000000000000000000000000000000000000;;		args := c.Called()
0000000000000000000000000000000000000000;;		return args.Error(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerInfo is a mock implementation of Interface.ContainerInfo.
0000000000000000000000000000000000000000;;	func (c *Mock) ContainerInfo(name string, req *cadvisorapi.ContainerInfoRequest) (*cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		args := c.Called(name, req)
0000000000000000000000000000000000000000;;		return args.Get(0).(*cadvisorapi.ContainerInfo), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContainerInfoV2 is a mock implementation of Interface.ContainerInfoV2.
0000000000000000000000000000000000000000;;	func (c *Mock) ContainerInfoV2(name string, options cadvisorapiv2.RequestOptions) (map[string]cadvisorapiv2.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		args := c.Called(name, options)
0000000000000000000000000000000000000000;;		return args.Get(0).(map[string]cadvisorapiv2.ContainerInfo), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Mock) SubcontainerInfo(name string, req *cadvisorapi.ContainerInfoRequest) (map[string]*cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		args := c.Called(name, req)
0000000000000000000000000000000000000000;;		return args.Get(0).(map[string]*cadvisorapi.ContainerInfo), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DockerContainer is a mock implementation of Interface.DockerContainer.
0000000000000000000000000000000000000000;;	func (c *Mock) DockerContainer(name string, req *cadvisorapi.ContainerInfoRequest) (cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		args := c.Called(name, req)
0000000000000000000000000000000000000000;;		return args.Get(0).(cadvisorapi.ContainerInfo), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MachineInfo is a mock implementation of Interface.MachineInfo.
0000000000000000000000000000000000000000;;	func (c *Mock) MachineInfo() (*cadvisorapi.MachineInfo, error) {
0000000000000000000000000000000000000000;;		args := c.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(*cadvisorapi.MachineInfo), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Mock) VersionInfo() (*cadvisorapi.VersionInfo, error) {
0000000000000000000000000000000000000000;;		args := c.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(*cadvisorapi.VersionInfo), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Mock) ImagesFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		args := c.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(cadvisorapiv2.FsInfo), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Mock) RootFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		args := c.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(cadvisorapiv2.FsInfo), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Mock) WatchEvents(request *events.Request) (*events.EventChannel, error) {
0000000000000000000000000000000000000000;;		args := c.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(*events.EventChannel), args.Error(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Mock) HasDedicatedImageFs() (bool, error) {
0000000000000000000000000000000000000000;;		args := c.Called()
0000000000000000000000000000000000000000;;		return args.Get(0).(bool), args.Error(1)
0000000000000000000000000000000000000000;;	}
