0000000000000000000000000000000000000000;;	// +build cgo,linux
37df6953625e6eda6a0c5ab0f05d6efa5052b27a;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cadvisor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/metrics"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestContainerLabels(t *testing.T) {
0000000000000000000000000000000000000000;;		container := &info.ContainerInfo{
0000000000000000000000000000000000000000;;			ContainerReference: info.ContainerReference{
0000000000000000000000000000000000000000;;				Name:    "/docker/f81ad5335d390944e454ea19ab0924037d57337c19731524ad96eb26e74b6c6d",
0000000000000000000000000000000000000000;;				Aliases: []string{"k8s_POD.639b2af2_foo-web-315473031-e40e2_foobar_a369ace2-5fa9-11e6-b10f-c81f66e5e84d_851a97fd"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: info.ContainerSpec{
0000000000000000000000000000000000000000;;				Image: "qux/foo:latest",
0000000000000000000000000000000000000000;;				Labels: map[string]string{
0000000000000000000000000000000000000000;;					"io.kubernetes.container.hash":                   "639b2af2",
0000000000000000000000000000000000000000;;					types.KubernetesContainerNameLabel:               "POD",
0000000000000000000000000000000000000000;;					"io.kubernetes.container.restartCount":           "0",
0000000000000000000000000000000000000000;;					"io.kubernetes.container.terminationMessagePath": "",
0000000000000000000000000000000000000000;;					types.KubernetesPodNameLabel:                     "foo-web-315473031-e40e2",
0000000000000000000000000000000000000000;;					types.KubernetesPodNamespaceLabel:                "foobar",
0000000000000000000000000000000000000000;;					"io.kubernetes.pod.terminationGracePeriod":       "30",
0000000000000000000000000000000000000000;;					types.KubernetesPodUIDLabel:                      "a369ace2-5fa9-11e6-b10f-c81f66e5e84d",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Envs: map[string]string{
0000000000000000000000000000000000000000;;					"foo+env": "prod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		want := map[string]string{
0000000000000000000000000000000000000000;;			metrics.LabelID:    "/docker/f81ad5335d390944e454ea19ab0924037d57337c19731524ad96eb26e74b6c6d",
0000000000000000000000000000000000000000;;			metrics.LabelName:  "k8s_POD.639b2af2_foo-web-315473031-e40e2_foobar_a369ace2-5fa9-11e6-b10f-c81f66e5e84d_851a97fd",
0000000000000000000000000000000000000000;;			metrics.LabelImage: "qux/foo:latest",
0000000000000000000000000000000000000000;;			"namespace":        "foobar",
0000000000000000000000000000000000000000;;			"container_name":   "POD",
0000000000000000000000000000000000000000;;			"pod_name":         "foo-web-315473031-e40e2",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if have := containerLabels(container); !reflect.DeepEqual(want, have) {
0000000000000000000000000000000000000000;;			t.Errorf("want %v, have %v", want, have)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
