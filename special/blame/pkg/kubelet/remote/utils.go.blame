0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6222602de08f455c36a22178c5530a6b621b6d1c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package remote
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getContextWithTimeout returns a context with timeout.
0000000000000000000000000000000000000000;;	func getContextWithTimeout(timeout time.Duration) (context.Context, context.CancelFunc) {
0000000000000000000000000000000000000000;;		return context.WithTimeout(context.Background(), timeout)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getContextWithCancel returns a context with cancel.
0000000000000000000000000000000000000000;;	func getContextWithCancel() (context.Context, context.CancelFunc) {
0000000000000000000000000000000000000000;;		return context.WithCancel(context.Background())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// verifySandboxStatus verified whether all required fields are set in PodSandboxStatus.
0000000000000000000000000000000000000000;;	func verifySandboxStatus(status *runtimeapi.PodSandboxStatus) error {
0000000000000000000000000000000000000000;;		if status.Id == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Id is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if status.Metadata == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Metadata is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metadata := status.Metadata
0000000000000000000000000000000000000000;;		if metadata.Name == "" || metadata.Namespace == "" || metadata.Uid == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Name, Namespace or Uid is not in metadata %q", metadata)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if status.CreatedAt == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("CreatedAt is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// verifyContainerStatus verified whether all required fields are set in ContainerStatus.
0000000000000000000000000000000000000000;;	func verifyContainerStatus(status *runtimeapi.ContainerStatus) error {
0000000000000000000000000000000000000000;;		if status.Id == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Id is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if status.Metadata == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Metadata is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metadata := status.Metadata
0000000000000000000000000000000000000000;;		if metadata.Name == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Name is not in metadata %q", metadata)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if status.CreatedAt == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("CreatedAt is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if status.Image == nil || status.Image.Image == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Image is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if status.ImageRef == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("ImageRef is not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
