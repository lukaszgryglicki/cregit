0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
427a83cfa087b11ac9f61c05bba21ac73df9e109;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kubelet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/google/cadvisor/events"
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cadvisor"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OOMWatcher interface {
0000000000000000000000000000000000000000;;		Start(ref *v1.ObjectReference) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type realOOMWatcher struct {
0000000000000000000000000000000000000000;;		cadvisor cadvisor.Interface
0000000000000000000000000000000000000000;;		recorder record.EventRecorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewOOMWatcher(cadvisor cadvisor.Interface, recorder record.EventRecorder) OOMWatcher {
0000000000000000000000000000000000000000;;		return &realOOMWatcher{
0000000000000000000000000000000000000000;;			cadvisor: cadvisor,
0000000000000000000000000000000000000000;;			recorder: recorder,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const systemOOMEvent = "SystemOOM"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watches cadvisor for system oom's and records an event for every system oom encountered.
0000000000000000000000000000000000000000;;	func (ow *realOOMWatcher) Start(ref *v1.ObjectReference) error {
0000000000000000000000000000000000000000;;		request := events.Request{
0000000000000000000000000000000000000000;;			EventType: map[cadvisorapi.EventType]bool{
0000000000000000000000000000000000000000;;				cadvisorapi.EventOom: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ContainerName:        "/",
0000000000000000000000000000000000000000;;			IncludeSubcontainers: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		eventChannel, err := ow.cadvisor.WatchEvents(&request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer runtime.HandleCrash()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for event := range eventChannel.GetChannel() {
0000000000000000000000000000000000000000;;				glog.V(2).Infof("Got sys oom event from cadvisor: %v", event)
0000000000000000000000000000000000000000;;				ow.recorder.PastEventf(ref, metav1.Time{Time: event.Timestamp}, v1.EventTypeWarning, systemOOMEvent, "System OOM encountered")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			glog.Errorf("Unexpectedly stopped receiving OOM notifications from cAdvisor")
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
