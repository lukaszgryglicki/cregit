0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
11fe0d2921df0a90ecde224aad0db3ceed280ebb;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package stats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceAnalyzer provides statistics on node resource consumption
0000000000000000000000000000000000000000;;	type ResourceAnalyzer interface {
0000000000000000000000000000000000000000;;		Start()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsResourceAnalyzerInterface
0000000000000000000000000000000000000000;;		SummaryProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// resourceAnalyzer implements ResourceAnalyzer
0000000000000000000000000000000000000000;;	type resourceAnalyzer struct {
0000000000000000000000000000000000000000;;		*fsResourceAnalyzer
0000000000000000000000000000000000000000;;		SummaryProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ResourceAnalyzer = &resourceAnalyzer{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewResourceAnalyzer returns a new ResourceAnalyzer
0000000000000000000000000000000000000000;;	func NewResourceAnalyzer(statsProvider StatsProvider, calVolumeFrequency time.Duration, runtime container.Runtime) ResourceAnalyzer {
0000000000000000000000000000000000000000;;		fsAnalyzer := newFsResourceAnalyzer(statsProvider, calVolumeFrequency)
0000000000000000000000000000000000000000;;		summaryProvider := NewSummaryProvider(statsProvider, fsAnalyzer, runtime)
0000000000000000000000000000000000000000;;		return &resourceAnalyzer{fsAnalyzer, summaryProvider}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Start starts background functions necessary for the ResourceAnalyzer to function
0000000000000000000000000000000000000000;;	func (ra *resourceAnalyzer) Start() {
0000000000000000000000000000000000000000;;		ra.fsResourceAnalyzer.Start()
0000000000000000000000000000000000000000;;	}
