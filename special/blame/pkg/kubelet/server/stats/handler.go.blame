0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1d7d2b6536989e0943f086fed8011274a7959aba;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package stats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		cadvisorapiv2 "github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cm"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Host methods required by stats handlers.
0000000000000000000000000000000000000000;;	type StatsProvider interface {
0000000000000000000000000000000000000000;;		GetContainerInfo(podFullName string, uid types.UID, containerName string, req *cadvisorapi.ContainerInfoRequest) (*cadvisorapi.ContainerInfo, error)
0000000000000000000000000000000000000000;;		GetContainerInfoV2(name string, options cadvisorapiv2.RequestOptions) (map[string]cadvisorapiv2.ContainerInfo, error)
0000000000000000000000000000000000000000;;		GetRawContainerInfo(containerName string, req *cadvisorapi.ContainerInfoRequest, subcontainers bool) (map[string]*cadvisorapi.ContainerInfo, error)
0000000000000000000000000000000000000000;;		GetPodByName(namespace, name string) (*v1.Pod, bool)
0000000000000000000000000000000000000000;;		GetNode() (*v1.Node, error)
0000000000000000000000000000000000000000;;		GetNodeConfig() cm.NodeConfig
0000000000000000000000000000000000000000;;		ImagesFsInfo() (cadvisorapiv2.FsInfo, error)
0000000000000000000000000000000000000000;;		RootFsInfo() (cadvisorapiv2.FsInfo, error)
0000000000000000000000000000000000000000;;		ListVolumesForPod(podUID types.UID) (map[string]volume.Volume, bool)
0000000000000000000000000000000000000000;;		GetPods() []*v1.Pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type handler struct {
0000000000000000000000000000000000000000;;		provider        StatsProvider
0000000000000000000000000000000000000000;;		summaryProvider SummaryProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateHandlers(rootPath string, provider StatsProvider, summaryProvider SummaryProvider) *restful.WebService {
0000000000000000000000000000000000000000;;		h := &handler{provider, summaryProvider}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ws := &restful.WebService{}
0000000000000000000000000000000000000000;;		ws.Path(rootPath).
0000000000000000000000000000000000000000;;			Produces(restful.MIME_JSON)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoints := []struct {
0000000000000000000000000000000000000000;;			path    string
0000000000000000000000000000000000000000;;			handler restful.RouteFunction
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", h.handleStats},
0000000000000000000000000000000000000000;;			{"/summary", h.handleSummary},
0000000000000000000000000000000000000000;;			{"/container", h.handleSystemContainer},
0000000000000000000000000000000000000000;;			{"/{podName}/{containerName}", h.handlePodContainer},
0000000000000000000000000000000000000000;;			{"/{namespace}/{podName}/{uid}/{containerName}", h.handlePodContainer},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, e := range endpoints {
0000000000000000000000000000000000000000;;			for _, method := range []string{"GET", "POST"} {
0000000000000000000000000000000000000000;;				ws.Route(ws.
0000000000000000000000000000000000000000;;					Method(method).
0000000000000000000000000000000000000000;;					Path(e.path).
0000000000000000000000000000000000000000;;					To(e.handler))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ws
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StatsRequest struct {
0000000000000000000000000000000000000000;;		// The name of the container for which to request stats.
0000000000000000000000000000000000000000;;		// Default: /
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ContainerName string `json:"containerName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Max number of stats to return.
0000000000000000000000000000000000000000;;		// If start and end time are specified this limit is ignored.
0000000000000000000000000000000000000000;;		// Default: 60
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NumStats int `json:"num_stats,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start time for which to query information.
0000000000000000000000000000000000000000;;		// If omitted, the beginning of time is assumed.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Start time.Time `json:"start,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// End time for which to query information.
0000000000000000000000000000000000000000;;		// If omitted, current time is assumed.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		End time.Time `json:"end,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Whether to also include information from subcontainers.
0000000000000000000000000000000000000000;;		// Default: false.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Subcontainers bool `json:"subcontainers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *StatsRequest) cadvisorRequest() *cadvisorapi.ContainerInfoRequest {
0000000000000000000000000000000000000000;;		return &cadvisorapi.ContainerInfoRequest{
0000000000000000000000000000000000000000;;			NumStats: r.NumStats,
0000000000000000000000000000000000000000;;			Start:    r.Start,
0000000000000000000000000000000000000000;;			End:      r.End,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseStatsRequest(request *restful.Request) (StatsRequest, error) {
0000000000000000000000000000000000000000;;		// Default request.
0000000000000000000000000000000000000000;;		query := StatsRequest{
0000000000000000000000000000000000000000;;			NumStats: 60,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := json.NewDecoder(request.Request.Body).Decode(&query)
0000000000000000000000000000000000000000;;		if err != nil && err != io.EOF {
0000000000000000000000000000000000000000;;			return query, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return query, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handles root container stats requests to /stats
0000000000000000000000000000000000000000;;	func (h *handler) handleStats(request *restful.Request, response *restful.Response) {
0000000000000000000000000000000000000000;;		query, err := parseStatsRequest(request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			handleError(response, "/stats", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Root container stats.
0000000000000000000000000000000000000000;;		statsMap, err := h.provider.GetRawContainerInfo("/", query.cadvisorRequest(), false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			handleError(response, fmt.Sprintf("/stats %v", query), err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		writeResponse(response, statsMap["/"])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handles stats summary requests to /stats/summary
0000000000000000000000000000000000000000;;	func (h *handler) handleSummary(request *restful.Request, response *restful.Response) {
0000000000000000000000000000000000000000;;		summary, err := h.summaryProvider.Get()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			handleError(response, "/stats/summary", err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			writeResponse(response, summary)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handles non-kubernetes container stats requests to /stats/container/
0000000000000000000000000000000000000000;;	func (h *handler) handleSystemContainer(request *restful.Request, response *restful.Response) {
0000000000000000000000000000000000000000;;		query, err := parseStatsRequest(request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			handleError(response, "/stats/container", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Non-Kubernetes container stats.
0000000000000000000000000000000000000000;;		containerName := path.Join("/", query.ContainerName)
0000000000000000000000000000000000000000;;		stats, err := h.provider.GetRawContainerInfo(
0000000000000000000000000000000000000000;;			containerName, query.cadvisorRequest(), query.Subcontainers)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if _, ok := stats[containerName]; ok {
0000000000000000000000000000000000000000;;				// If the failure is partial, log it and return a best-effort response.
0000000000000000000000000000000000000000;;				glog.Errorf("Partial failure issuing GetRawContainerInfo(%v): %v", query, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				handleError(response, fmt.Sprintf("/stats/container %v", query), err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		writeResponse(response, stats)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handles kubernetes pod/container stats requests to:
0000000000000000000000000000000000000000;;	// /stats/<pod name>/<container name>
0000000000000000000000000000000000000000;;	// /stats/<namespace>/<pod name>/<uid>/<container name>
0000000000000000000000000000000000000000;;	func (h *handler) handlePodContainer(request *restful.Request, response *restful.Response) {
0000000000000000000000000000000000000000;;		query, err := parseStatsRequest(request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			handleError(response, request.Request.URL.String(), err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Default parameters.
0000000000000000000000000000000000000000;;		params := map[string]string{
0000000000000000000000000000000000000000;;			"namespace": metav1.NamespaceDefault,
0000000000000000000000000000000000000000;;			"uid":       "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range request.PathParameters() {
0000000000000000000000000000000000000000;;			params[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if params["podName"] == "" || params["containerName"] == "" {
0000000000000000000000000000000000000000;;			response.WriteErrorString(http.StatusBadRequest,
0000000000000000000000000000000000000000;;				fmt.Sprintf("Invalid pod container request: %v", params))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod, ok := h.provider.GetPodByName(params["namespace"], params["podName"])
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Container not found: %v", params)
0000000000000000000000000000000000000000;;			response.WriteError(http.StatusNotFound, kubecontainer.ErrContainerNotFound)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stats, err := h.provider.GetContainerInfo(
0000000000000000000000000000000000000000;;			kubecontainer.GetPodFullName(pod),
0000000000000000000000000000000000000000;;			types.UID(params["uid"]),
0000000000000000000000000000000000000000;;			params["containerName"],
0000000000000000000000000000000000000000;;			query.cadvisorRequest())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			handleError(response, fmt.Sprintf("%s %v", request.Request.URL.String(), query), err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		writeResponse(response, stats)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeResponse(response *restful.Response, stats interface{}) {
0000000000000000000000000000000000000000;;		if err := response.WriteAsJson(stats); err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("Error writing response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handleError serializes an error object into an HTTP response.
0000000000000000000000000000000000000000;;	// request is provided for logging.
0000000000000000000000000000000000000000;;	func handleError(response *restful.Response, request string, err error) {
0000000000000000000000000000000000000000;;		switch err {
0000000000000000000000000000000000000000;;		case kubecontainer.ErrContainerNotFound:
0000000000000000000000000000000000000000;;			response.WriteError(http.StatusNotFound, err)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			msg := fmt.Sprintf("Internal Error: %v", err)
0000000000000000000000000000000000000000;;			glog.Errorf("HTTP InternalServerError serving %s: %s", request, msg)
0000000000000000000000000000000000000000;;			response.WriteErrorString(http.StatusInternalServerError, msg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
