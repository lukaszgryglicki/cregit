0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
11fe0d2921df0a90ecde224aad0db3ceed280ebb;pkg/kubelet/server/stats/mock_stats_provider.go[pkg/kubelet/server/stats/mock_stats_provider.go][pkg/kubelet/server/stats/mocks_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package stats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		cadvisorapiv2 "github.com/google/cadvisor/info/v2"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/mock"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/cm"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DO NOT EDIT
0000000000000000000000000000000000000000;;	// GENERATED BY mockery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MockStatsProvider struct {
0000000000000000000000000000000000000000;;		mock.Mock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetContainerInfo provides a mock function with given fields: podFullName, uid, containerName, req
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) GetContainerInfo(podFullName string, uid types.UID, containerName string, req *cadvisorapi.ContainerInfoRequest) (*cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		ret := _m.Called(podFullName, uid, containerName, req)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 *cadvisorapi.ContainerInfo
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func(string, types.UID, string, *cadvisorapi.ContainerInfoRequest) *cadvisorapi.ContainerInfo); ok {
0000000000000000000000000000000000000000;;			r0 = rf(podFullName, uid, containerName, req)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if ret.Get(0) != nil {
0000000000000000000000000000000000000000;;				r0 = ret.Get(0).(*cadvisorapi.ContainerInfo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 error
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func(string, types.UID, string, *cadvisorapi.ContainerInfoRequest) error); ok {
0000000000000000000000000000000000000000;;			r1 = rf(podFullName, uid, containerName, req)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Error(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetContainerInfoV2 provides a mock function with given fields: name, options
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) GetContainerInfoV2(name string, options cadvisorapiv2.RequestOptions) (map[string]cadvisorapiv2.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		ret := _m.Called(name, options)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 map[string]cadvisorapiv2.ContainerInfo
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func(string, cadvisorapiv2.RequestOptions) map[string]cadvisorapiv2.ContainerInfo); ok {
0000000000000000000000000000000000000000;;			r0 = rf(name, options)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if ret.Get(0) != nil {
0000000000000000000000000000000000000000;;				r0 = ret.Get(0).(map[string]cadvisorapiv2.ContainerInfo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 error
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func(string, cadvisorapiv2.RequestOptions) error); ok {
0000000000000000000000000000000000000000;;			r1 = rf(name, options)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Error(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetRawContainerInfo provides a mock function with given fields: containerName, req, subcontainers
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) GetRawContainerInfo(containerName string, req *cadvisorapi.ContainerInfoRequest, subcontainers bool) (map[string]*cadvisorapi.ContainerInfo, error) {
0000000000000000000000000000000000000000;;		ret := _m.Called(containerName, req, subcontainers)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 map[string]*cadvisorapi.ContainerInfo
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func(string, *cadvisorapi.ContainerInfoRequest, bool) map[string]*cadvisorapi.ContainerInfo); ok {
0000000000000000000000000000000000000000;;			r0 = rf(containerName, req, subcontainers)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if ret.Get(0) != nil {
0000000000000000000000000000000000000000;;				r0 = ret.Get(0).(map[string]*cadvisorapi.ContainerInfo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 error
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func(string, *cadvisorapi.ContainerInfoRequest, bool) error); ok {
0000000000000000000000000000000000000000;;			r1 = rf(containerName, req, subcontainers)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Error(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodByName provides a mock function with given fields: namespace, name
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) GetPodByName(namespace string, name string) (*v1.Pod, bool) {
0000000000000000000000000000000000000000;;		ret := _m.Called(namespace, name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 *v1.Pod
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func(string, string) *v1.Pod); ok {
0000000000000000000000000000000000000000;;			r0 = rf(namespace, name)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if ret.Get(0) != nil {
0000000000000000000000000000000000000000;;				r0 = ret.Get(0).(*v1.Pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 bool
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func(string, string) bool); ok {
0000000000000000000000000000000000000000;;			r1 = rf(namespace, name)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Get(1).(bool)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetNode provides a mock function with given fields:
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) GetNode() (*v1.Node, error) {
0000000000000000000000000000000000000000;;		ret := _m.Called()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 *v1.Node
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func() *v1.Node); ok {
0000000000000000000000000000000000000000;;			r0 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if ret.Get(0) != nil {
0000000000000000000000000000000000000000;;				r0 = ret.Get(0).(*v1.Node)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 error
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func() error); ok {
0000000000000000000000000000000000000000;;			r1 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Error(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetNodeConfig provides a mock function with given fields:
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) GetNodeConfig() cm.NodeConfig {
0000000000000000000000000000000000000000;;		ret := _m.Called()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 cm.NodeConfig
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func() cm.NodeConfig); ok {
0000000000000000000000000000000000000000;;			r0 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r0 = ret.Get(0).(cm.NodeConfig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImagesFsInfo provides a mock function with given fields:
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) ImagesFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		ret := _m.Called()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 cadvisorapiv2.FsInfo
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func() cadvisorapiv2.FsInfo); ok {
0000000000000000000000000000000000000000;;			r0 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r0 = ret.Get(0).(cadvisorapiv2.FsInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 error
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func() error); ok {
0000000000000000000000000000000000000000;;			r1 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Error(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RootFsInfo provides a mock function with given fields:
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) RootFsInfo() (cadvisorapiv2.FsInfo, error) {
0000000000000000000000000000000000000000;;		ret := _m.Called()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 cadvisorapiv2.FsInfo
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func() cadvisorapiv2.FsInfo); ok {
0000000000000000000000000000000000000000;;			r0 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r0 = ret.Get(0).(cadvisorapiv2.FsInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 error
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func() error); ok {
0000000000000000000000000000000000000000;;			r1 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Error(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListVolumesForPod provides a mock function with given fields: podUID
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) ListVolumesForPod(podUID types.UID) (map[string]volume.Volume, bool) {
0000000000000000000000000000000000000000;;		ret := _m.Called(podUID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 map[string]volume.Volume
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func(types.UID) map[string]volume.Volume); ok {
0000000000000000000000000000000000000000;;			r0 = rf(podUID)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if ret.Get(0) != nil {
0000000000000000000000000000000000000000;;				r0 = ret.Get(0).(map[string]volume.Volume)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r1 bool
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(1).(func(types.UID) bool); ok {
0000000000000000000000000000000000000000;;			r1 = rf(podUID)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r1 = ret.Get(1).(bool)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0, r1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPods provides a mock function with given fields:
0000000000000000000000000000000000000000;;	func (_m *MockStatsProvider) GetPods() []*v1.Pod {
0000000000000000000000000000000000000000;;		ret := _m.Called()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r0 []*v1.Pod
0000000000000000000000000000000000000000;;		if rf, ok := ret.Get(0).(func() []*v1.Pod); ok {
0000000000000000000000000000000000000000;;			r0 = rf()
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if ret.Get(0) != nil {
0000000000000000000000000000000000000000;;				r0 = ret.Get(0).([]*v1.Pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r0
0000000000000000000000000000000000000000;;	}
