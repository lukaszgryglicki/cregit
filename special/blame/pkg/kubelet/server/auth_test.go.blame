0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
17bd98a01abc237f05e432a57a5dd9e8409f812a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsSubPath(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			subpath  string
0000000000000000000000000000000000000000;;			path     string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {subpath: "", path: "", expected: true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"match 1": {subpath: "foo", path: "foo", expected: true},
0000000000000000000000000000000000000000;;			"match 2": {subpath: "/foo", path: "/foo", expected: true},
0000000000000000000000000000000000000000;;			"match 3": {subpath: "/foo/", path: "/foo/", expected: true},
0000000000000000000000000000000000000000;;			"match 4": {subpath: "/foo/bar", path: "/foo/bar", expected: true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"subpath of root 1": {subpath: "/foo", path: "/", expected: true},
0000000000000000000000000000000000000000;;			"subpath of root 2": {subpath: "/foo/", path: "/", expected: true},
0000000000000000000000000000000000000000;;			"subpath of root 3": {subpath: "/foo/bar", path: "/", expected: true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"subpath of path 1": {subpath: "/foo", path: "/foo", expected: true},
0000000000000000000000000000000000000000;;			"subpath of path 2": {subpath: "/foo/", path: "/foo", expected: true},
0000000000000000000000000000000000000000;;			"subpath of path 3": {subpath: "/foo/bar", path: "/foo", expected: true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"mismatch 1": {subpath: "/foo", path: "/bar", expected: false},
0000000000000000000000000000000000000000;;			"mismatch 2": {subpath: "/foo", path: "/foobar", expected: false},
0000000000000000000000000000000000000000;;			"mismatch 3": {subpath: "/foobar", path: "/foo", expected: false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			result := isSubpath(tc.subpath, tc.path)
0000000000000000000000000000000000000000;;			if result != tc.expected {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", k, tc.expected, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
