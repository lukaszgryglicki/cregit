0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0f4bace93024473558f5dc726b9a870a42c52d19;pkg/kubelet/auth.go[pkg/kubelet/auth.go][pkg/kubelet/server/auth.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KubeletAuth implements AuthInterface
0000000000000000000000000000000000000000;;	type KubeletAuth struct {
0000000000000000000000000000000000000000;;		// authenticator identifies the user for requests to the Kubelet API
0000000000000000000000000000000000000000;;		authenticator.Request
0000000000000000000000000000000000000000;;		// authorizerAttributeGetter builds authorization.Attributes for a request to the Kubelet API
0000000000000000000000000000000000000000;;		authorizer.RequestAttributesGetter
0000000000000000000000000000000000000000;;		// authorizer determines whether a given authorization.Attributes is allowed
0000000000000000000000000000000000000000;;		authorizer.Authorizer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewKubeletAuth returns a kubelet.AuthInterface composed of the given authenticator, attribute getter, and authorizer
0000000000000000000000000000000000000000;;	func NewKubeletAuth(authenticator authenticator.Request, authorizerAttributeGetter authorizer.RequestAttributesGetter, authorizer authorizer.Authorizer) AuthInterface {
0000000000000000000000000000000000000000;;		return &KubeletAuth{authenticator, authorizerAttributeGetter, authorizer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNodeAuthorizerAttributesGetter(nodeName types.NodeName) authorizer.RequestAttributesGetter {
0000000000000000000000000000000000000000;;		return nodeAuthorizerAttributesGetter{nodeName: nodeName}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type nodeAuthorizerAttributesGetter struct {
0000000000000000000000000000000000000000;;		nodeName types.NodeName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isSubpath(subpath, path string) bool {
0000000000000000000000000000000000000000;;		path = strings.TrimSuffix(path, "/")
0000000000000000000000000000000000000000;;		return subpath == path || (strings.HasPrefix(subpath, path) && subpath[len(path)] == '/')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetRequestAttributes populates authorizer attributes for the requests to the kubelet API.
0000000000000000000000000000000000000000;;	// Default attributes are: {apiVersion=v1,verb=<http verb from request>,resource=nodes,name=<node name>,subresource=proxy}
0000000000000000000000000000000000000000;;	// More specific verb/resource is set for the following request patterns:
0000000000000000000000000000000000000000;;	//    /stats/*   => verb=<api verb from request>, resource=nodes, name=<node name>, subresource=stats
0000000000000000000000000000000000000000;;	//    /metrics/* => verb=<api verb from request>, resource=nodes, name=<node name>, subresource=metrics
0000000000000000000000000000000000000000;;	//    /logs/*    => verb=<api verb from request>, resource=nodes, name=<node name>, subresource=log
0000000000000000000000000000000000000000;;	//    /spec/*    => verb=<api verb from request>, resource=nodes, name=<node name>, subresource=spec
0000000000000000000000000000000000000000;;	func (n nodeAuthorizerAttributesGetter) GetRequestAttributes(u user.Info, r *http.Request) authorizer.Attributes {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiVerb := ""
0000000000000000000000000000000000000000;;		switch r.Method {
0000000000000000000000000000000000000000;;		case "POST":
0000000000000000000000000000000000000000;;			apiVerb = "create"
0000000000000000000000000000000000000000;;		case "GET":
0000000000000000000000000000000000000000;;			apiVerb = "get"
0000000000000000000000000000000000000000;;		case "PUT":
0000000000000000000000000000000000000000;;			apiVerb = "update"
0000000000000000000000000000000000000000;;		case "PATCH":
0000000000000000000000000000000000000000;;			apiVerb = "patch"
0000000000000000000000000000000000000000;;		case "DELETE":
0000000000000000000000000000000000000000;;			apiVerb = "delete"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requestPath := r.URL.Path
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Default attributes mirror the API attributes that would allow this access to the kubelet API
0000000000000000000000000000000000000000;;		attrs := authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;			User:            u,
0000000000000000000000000000000000000000;;			Verb:            apiVerb,
0000000000000000000000000000000000000000;;			Namespace:       "",
0000000000000000000000000000000000000000;;			APIGroup:        "",
0000000000000000000000000000000000000000;;			APIVersion:      "v1",
0000000000000000000000000000000000000000;;			Resource:        "nodes",
0000000000000000000000000000000000000000;;			Subresource:     "proxy",
0000000000000000000000000000000000000000;;			Name:            string(n.nodeName),
0000000000000000000000000000000000000000;;			ResourceRequest: true,
0000000000000000000000000000000000000000;;			Path:            requestPath,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Override subresource for specific paths
0000000000000000000000000000000000000000;;		// This allows subdividing access to the kubelet API
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case isSubpath(requestPath, statsPath):
0000000000000000000000000000000000000000;;			attrs.Subresource = "stats"
0000000000000000000000000000000000000000;;		case isSubpath(requestPath, metricsPath):
0000000000000000000000000000000000000000;;			attrs.Subresource = "metrics"
0000000000000000000000000000000000000000;;		case isSubpath(requestPath, logsPath):
0000000000000000000000000000000000000000;;			// "log" to match other log subresources (pods/log, etc)
0000000000000000000000000000000000000000;;			attrs.Subresource = "log"
0000000000000000000000000000000000000000;;		case isSubpath(requestPath, specPath):
0000000000000000000000000000000000000000;;			attrs.Subresource = "spec"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Node request attributes: attrs=%#v", attrs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return attrs
0000000000000000000000000000000000000000;;	}
