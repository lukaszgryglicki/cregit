0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
bf90bb1c3386a66f2e3e074ce6a23a4c22c45234;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package portforward
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestV4Options(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			url           string
0000000000000000000000000000000000000000;;			websocket     bool
0000000000000000000000000000000000000000;;			expectedOpts  *V4Options
0000000000000000000000000000000000000000;;			expectedError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"non-ws request": {
0000000000000000000000000000000000000000;;				url:          "http://example.com",
0000000000000000000000000000000000000000;;				expectedOpts: &V4Options{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"missing port": {
0000000000000000000000000000000000000000;;				url:           "http://example.com",
0000000000000000000000000000000000000000;;				websocket:     true,
0000000000000000000000000000000000000000;;				expectedError: `query parameter "port" is required`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"unable to parse port": {
0000000000000000000000000000000000000000;;				url:           "http://example.com?port=abc",
0000000000000000000000000000000000000000;;				websocket:     true,
0000000000000000000000000000000000000000;;				expectedError: `unable to parse "abc" as a port: strconv.ParseUint: parsing "abc": invalid syntax`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"negative port": {
0000000000000000000000000000000000000000;;				url:           "http://example.com?port=-1",
0000000000000000000000000000000000000000;;				websocket:     true,
0000000000000000000000000000000000000000;;				expectedError: `unable to parse "-1" as a port: strconv.ParseUint: parsing "-1": invalid syntax`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"one port": {
0000000000000000000000000000000000000000;;				url:       "http://example.com?port=80",
0000000000000000000000000000000000000000;;				websocket: true,
0000000000000000000000000000000000000000;;				expectedOpts: &V4Options{
0000000000000000000000000000000000000000;;					Ports: []int32{80},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multiple ports": {
0000000000000000000000000000000000000000;;				url:       "http://example.com?port=80,90,100",
0000000000000000000000000000000000000000;;				websocket: true,
0000000000000000000000000000000000000000;;				expectedOpts: &V4Options{
0000000000000000000000000000000000000000;;					Ports: []int32{80, 90, 100},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"multiple port": {
0000000000000000000000000000000000000000;;				url:       "http://example.com?port=80&port=90",
0000000000000000000000000000000000000000;;				websocket: true,
0000000000000000000000000000000000000000;;				expectedOpts: &V4Options{
0000000000000000000000000000000000000000;;					Ports: []int32{80, 90},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for name, test := range tests {
0000000000000000000000000000000000000000;;			req, err := http.NewRequest(http.MethodGet, test.url, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: invalid url %q err=%q", name, test.url, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.websocket {
0000000000000000000000000000000000000000;;				req.Header.Set("Connection", "Upgrade")
0000000000000000000000000000000000000000;;				req.Header.Set("Upgrade", "websocket")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			opts, err := NewV4Options(req)
0000000000000000000000000000000000000000;;			if len(test.expectedError) > 0 {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected err=%q, but it was nil", name, test.expectedError)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := test.expectedError, err.Error(); e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected err=%q, got %q", name, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error %v", name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedOpts, opts) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected options %#v, got %#v", name, test.expectedOpts, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
