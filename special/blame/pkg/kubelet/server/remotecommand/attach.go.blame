0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
da95e236fce3b98225926b2d9226bbdb6ec36842;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package remotecommand
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/remotecommand"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attacher knows how to attach to a running container in a pod.
0000000000000000000000000000000000000000;;	type Attacher interface {
0000000000000000000000000000000000000000;;		// AttachContainer attaches to the running container in the pod, copying data between in/out/err
0000000000000000000000000000000000000000;;		// and the container's stdin/stdout/stderr.
0000000000000000000000000000000000000000;;		AttachContainer(name string, uid types.UID, container string, in io.Reader, out, err io.WriteCloser, tty bool, resize <-chan remotecommand.TerminalSize) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServeAttach handles requests to attach to a container. After creating/receiving the required
0000000000000000000000000000000000000000;;	// streams, it delegates the actual attaching to attacher.
0000000000000000000000000000000000000000;;	func ServeAttach(w http.ResponseWriter, req *http.Request, attacher Attacher, podName string, uid types.UID, container string, streamOpts *Options, idleTimeout, streamCreationTimeout time.Duration, supportedProtocols []string) {
0000000000000000000000000000000000000000;;		ctx, ok := createStreams(req, w, streamOpts, supportedProtocols, idleTimeout, streamCreationTimeout)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			// error is handled by createStreams
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer ctx.conn.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := attacher.AttachContainer(podName, uid, container, ctx.stdinStream, ctx.stdoutStream, ctx.stderrStream, ctx.tty, ctx.resizeChan)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("error attaching to container: %v", err)
0000000000000000000000000000000000000000;;			runtime.HandleError(err)
0000000000000000000000000000000000000000;;			ctx.writeStatus(apierrors.NewInternalError(err))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			ctx.writeStatus(&apierrors.StatusError{ErrStatus: metav1.Status{
0000000000000000000000000000000000000000;;				Status: metav1.StatusSuccess,
0000000000000000000000000000000000000000;;			}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
