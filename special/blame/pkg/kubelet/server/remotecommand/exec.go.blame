0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
da95e236fce3b98225926b2d9226bbdb6ec36842;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package remotecommand
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		remotecommandconsts "k8s.io/apimachinery/pkg/util/remotecommand"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/remotecommand"
0000000000000000000000000000000000000000;;		utilexec "k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Executor knows how to execute a command in a container in a pod.
0000000000000000000000000000000000000000;;	type Executor interface {
0000000000000000000000000000000000000000;;		// ExecInContainer executes a command in a container in the pod, copying data
0000000000000000000000000000000000000000;;		// between in/out/err and the container's stdin/stdout/stderr.
0000000000000000000000000000000000000000;;		ExecInContainer(name string, uid types.UID, container string, cmd []string, in io.Reader, out, err io.WriteCloser, tty bool, resize <-chan remotecommand.TerminalSize, timeout time.Duration) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServeExec handles requests to execute a command in a container. After
0000000000000000000000000000000000000000;;	// creating/receiving the required streams, it delegates the actual execution
0000000000000000000000000000000000000000;;	// to the executor.
0000000000000000000000000000000000000000;;	func ServeExec(w http.ResponseWriter, req *http.Request, executor Executor, podName string, uid types.UID, container string, cmd []string, streamOpts *Options, idleTimeout, streamCreationTimeout time.Duration, supportedProtocols []string) {
0000000000000000000000000000000000000000;;		ctx, ok := createStreams(req, w, streamOpts, supportedProtocols, idleTimeout, streamCreationTimeout)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			// error is handled by createStreams
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer ctx.conn.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := executor.ExecInContainer(podName, uid, container, cmd, ctx.stdinStream, ctx.stdoutStream, ctx.stderrStream, ctx.tty, ctx.resizeChan, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if exitErr, ok := err.(utilexec.ExitError); ok && exitErr.Exited() {
0000000000000000000000000000000000000000;;				rc := exitErr.ExitStatus()
0000000000000000000000000000000000000000;;				ctx.writeStatus(&apierrors.StatusError{ErrStatus: metav1.Status{
0000000000000000000000000000000000000000;;					Status: metav1.StatusFailure,
0000000000000000000000000000000000000000;;					Reason: remotecommandconsts.NonZeroExitCodeReason,
0000000000000000000000000000000000000000;;					Details: &metav1.StatusDetails{
0000000000000000000000000000000000000000;;						Causes: []metav1.StatusCause{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Type:    remotecommandconsts.ExitCodeCauseType,
0000000000000000000000000000000000000000;;								Message: fmt.Sprintf("%d", rc),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Message: fmt.Sprintf("command terminated with non-zero exit code: %v", exitErr),
0000000000000000000000000000000000000000;;				}})
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = fmt.Errorf("error executing command in container: %v", err)
0000000000000000000000000000000000000000;;				runtime.HandleError(err)
0000000000000000000000000000000000000000;;				ctx.writeStatus(apierrors.NewInternalError(err))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			ctx.writeStatus(&apierrors.StatusError{ErrStatus: metav1.Status{
0000000000000000000000000000000000000000;;				Status: metav1.StatusSuccess,
0000000000000000000000000000000000000000;;			}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
