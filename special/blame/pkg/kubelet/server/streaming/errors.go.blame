0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
db66875dd516b53074d599d7c72cda0fd1794726;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package streaming
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/codes"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ErrorStreamingDisabled(method string) error {
0000000000000000000000000000000000000000;;		return grpc.Errorf(codes.NotFound, fmt.Sprintf("streaming method %s disabled", method))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The error returned when the maximum number of in-flight requests is exceeded.
0000000000000000000000000000000000000000;;	func ErrorTooManyInFlight() error {
0000000000000000000000000000000000000000;;		return grpc.Errorf(codes.ResourceExhausted, "maximum number of in-flight requests exceeded")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Translates a CRI streaming error into an appropriate HTTP response.
0000000000000000000000000000000000000000;;	func WriteError(err error, w http.ResponseWriter) error {
0000000000000000000000000000000000000000;;		var status int
0000000000000000000000000000000000000000;;		switch grpc.Code(err) {
0000000000000000000000000000000000000000;;		case codes.NotFound:
0000000000000000000000000000000000000000;;			status = http.StatusNotFound
0000000000000000000000000000000000000000;;		case codes.ResourceExhausted:
0000000000000000000000000000000000000000;;			// We only expect to hit this if there is a DoS, so we just wait the full TTL.
0000000000000000000000000000000000000000;;			// If this is ever hit in steady-state operations, consider increasing the MaxInFlight requests,
0000000000000000000000000000000000000000;;			// or plumbing through the time to next expiration.
0000000000000000000000000000000000000000;;			w.Header().Set("Retry-After", strconv.Itoa(int(CacheTTL.Seconds())))
0000000000000000000000000000000000000000;;			status = http.StatusTooManyRequests
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			status = http.StatusInternalServerError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.WriteHeader(status)
0000000000000000000000000000000000000000;;		_, writeErr := w.Write([]byte(err.Error()))
0000000000000000000000000000000000000000;;		return writeErr
0000000000000000000000000000000000000000;;	}
