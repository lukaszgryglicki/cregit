0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e1e40ce087a3b8f3a621a2a95fe2b0f3c0995846;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package streaming
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInsert(t *testing.T) {
0000000000000000000000000000000000000000;;		c, _ := newTestCache()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Insert normal
0000000000000000000000000000000000000000;;		oldestTok, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Len(t, oldestTok, TokenLen)
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Insert until full
0000000000000000000000000000000000000000;;		for i := 0; i < MaxInFlight-2; i++ {
0000000000000000000000000000000000000000;;			tok, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;			require.NoError(t, err)
0000000000000000000000000000000000000000;;			assert.Len(t, tok, TokenLen)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, MaxInFlight-1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newestReq := nextRequest()
0000000000000000000000000000000000000000;;		newestTok, err := c.Insert(newestReq)
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Len(t, newestTok, TokenLen)
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, MaxInFlight)
0000000000000000000000000000000000000000;;		require.Contains(t, c.tokens, oldestTok, "oldest request should still be cached")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Consume newest token.
0000000000000000000000000000000000000000;;		req, ok := c.Consume(newestTok)
0000000000000000000000000000000000000000;;		assert.True(t, ok, "newest request should still be cached")
0000000000000000000000000000000000000000;;		assert.Equal(t, newestReq, req)
0000000000000000000000000000000000000000;;		require.Contains(t, c.tokens, oldestTok, "oldest request should still be cached")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Insert again (still full)
0000000000000000000000000000000000000000;;		tok, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Len(t, tok, TokenLen)
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, MaxInFlight)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Insert again (should evict)
0000000000000000000000000000000000000000;;		_, err = c.Insert(nextRequest())
0000000000000000000000000000000000000000;;		assert.Error(t, err, "should reject further requests")
0000000000000000000000000000000000000000;;		errResponse := httptest.NewRecorder()
0000000000000000000000000000000000000000;;		require.NoError(t, WriteError(err, errResponse))
0000000000000000000000000000000000000000;;		assert.Equal(t, errResponse.Code, http.StatusTooManyRequests)
0000000000000000000000000000000000000000;;		assert.Equal(t, strconv.Itoa(int(CacheTTL.Seconds())), errResponse.HeaderMap.Get("Retry-After"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, MaxInFlight)
0000000000000000000000000000000000000000;;		_, ok = c.Consume(oldestTok)
0000000000000000000000000000000000000000;;		assert.True(t, ok, "oldest request should be valid")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConsume(t *testing.T) {
0000000000000000000000000000000000000000;;		c, clock := newTestCache()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{ // Insert & consume.
0000000000000000000000000000000000000000;;			req := nextRequest()
0000000000000000000000000000000000000000;;			tok, err := c.Insert(req)
0000000000000000000000000000000000000000;;			require.NoError(t, err)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cachedReq, ok := c.Consume(tok)
0000000000000000000000000000000000000000;;			assert.True(t, ok)
0000000000000000000000000000000000000000;;			assert.Equal(t, req, cachedReq)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{ // Insert & consume out of order
0000000000000000000000000000000000000000;;			req1 := nextRequest()
0000000000000000000000000000000000000000;;			tok1, err := c.Insert(req1)
0000000000000000000000000000000000000000;;			require.NoError(t, err)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req2 := nextRequest()
0000000000000000000000000000000000000000;;			tok2, err := c.Insert(req2)
0000000000000000000000000000000000000000;;			require.NoError(t, err)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cachedReq2, ok := c.Consume(tok2)
0000000000000000000000000000000000000000;;			assert.True(t, ok)
0000000000000000000000000000000000000000;;			assert.Equal(t, req2, cachedReq2)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cachedReq1, ok := c.Consume(tok1)
0000000000000000000000000000000000000000;;			assert.True(t, ok)
0000000000000000000000000000000000000000;;			assert.Equal(t, req1, cachedReq1)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{ // Consume a second time
0000000000000000000000000000000000000000;;			req := nextRequest()
0000000000000000000000000000000000000000;;			tok, err := c.Insert(req)
0000000000000000000000000000000000000000;;			require.NoError(t, err)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cachedReq, ok := c.Consume(tok)
0000000000000000000000000000000000000000;;			assert.True(t, ok)
0000000000000000000000000000000000000000;;			assert.Equal(t, req, cachedReq)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, ok = c.Consume(tok)
0000000000000000000000000000000000000000;;			assert.False(t, ok)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{ // Consume without insert
0000000000000000000000000000000000000000;;			_, ok := c.Consume("fooBAR")
0000000000000000000000000000000000000000;;			assert.False(t, ok)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{ // Consume expired
0000000000000000000000000000000000000000;;			tok, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;			require.NoError(t, err)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			clock.Step(2 * CacheTTL)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, ok := c.Consume(tok)
0000000000000000000000000000000000000000;;			assert.False(t, ok)
0000000000000000000000000000000000000000;;			assertCacheSize(t, c, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGC(t *testing.T) {
0000000000000000000000000000000000000000;;		c, clock := newTestCache()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When empty
0000000000000000000000000000000000000000;;		c.gc()
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tok1, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;		clock.Step(10 * time.Second)
0000000000000000000000000000000000000000;;		tok2, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, 2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// expired: tok1, tok2
0000000000000000000000000000000000000000;;		// non-expired: tok3, tok4
0000000000000000000000000000000000000000;;		clock.Step(2 * CacheTTL)
0000000000000000000000000000000000000000;;		tok3, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;		clock.Step(10 * time.Second)
0000000000000000000000000000000000000000;;		tok4, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, 2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok := c.Consume(tok1)
0000000000000000000000000000000000000000;;		assert.False(t, ok)
0000000000000000000000000000000000000000;;		_, ok = c.Consume(tok2)
0000000000000000000000000000000000000000;;		assert.False(t, ok)
0000000000000000000000000000000000000000;;		_, ok = c.Consume(tok3)
0000000000000000000000000000000000000000;;		assert.True(t, ok)
0000000000000000000000000000000000000000;;		_, ok = c.Consume(tok4)
0000000000000000000000000000000000000000;;		assert.True(t, ok)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When full, nothing is expired.
0000000000000000000000000000000000000000;;		for i := 0; i < MaxInFlight; i++ {
0000000000000000000000000000000000000000;;			_, err := c.Insert(nextRequest())
0000000000000000000000000000000000000000;;			require.NoError(t, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, MaxInFlight)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When everything is expired
0000000000000000000000000000000000000000;;		clock.Step(2 * CacheTTL)
0000000000000000000000000000000000000000;;		_, err = c.Insert(nextRequest())
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		assertCacheSize(t, c, 1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestCache() (*requestCache, *clock.FakeClock) {
0000000000000000000000000000000000000000;;		c := newRequestCache()
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		c.clock = fakeClock
0000000000000000000000000000000000000000;;		return c, fakeClock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertCacheSize(t *testing.T, cache *requestCache, expectedSize int) {
0000000000000000000000000000000000000000;;		tokenLen := len(cache.tokens)
0000000000000000000000000000000000000000;;		llLen := cache.ll.Len()
0000000000000000000000000000000000000000;;		assert.Equal(t, tokenLen, llLen, "inconsistent cache size! len(tokens)=%d; len(ll)=%d", tokenLen, llLen)
0000000000000000000000000000000000000000;;		assert.Equal(t, expectedSize, tokenLen, "unexpected cache size!")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var requestUID = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func nextRequest() interface{} {
0000000000000000000000000000000000000000;;		requestUID++
0000000000000000000000000000000000000000;;		return requestUID
0000000000000000000000000000000000000000;;	}
