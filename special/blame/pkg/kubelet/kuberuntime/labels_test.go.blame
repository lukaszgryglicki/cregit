0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
87f241273b941272e7eed736cc0b13bfcb14be8d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kuberuntime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestContainerLabels(t *testing.T) {
0000000000000000000000000000000000000000;;		deletionGracePeriod := int64(10)
0000000000000000000000000000000000000000;;		terminationGracePeriod := int64(10)
0000000000000000000000000000000000000000;;		lifecycle := &v1.Lifecycle{
0000000000000000000000000000000000000000;;			// Left PostStart as nil
0000000000000000000000000000000000000000;;			PreStop: &v1.Handler{
0000000000000000000000000000000000000000;;				Exec: &v1.ExecAction{
0000000000000000000000000000000000000000;;					Command: []string{"action1", "action2"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				HTTPGet: &v1.HTTPGetAction{
0000000000000000000000000000000000000000;;					Path:   "path",
0000000000000000000000000000000000000000;;					Host:   "host",
0000000000000000000000000000000000000000;;					Port:   intstr.FromInt(8080),
0000000000000000000000000000000000000000;;					Scheme: "scheme",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				TCPSocket: &v1.TCPSocketAction{
0000000000000000000000000000000000000000;;					Port: intstr.FromString("80"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		container := &v1.Container{
0000000000000000000000000000000000000000;;			Name: "test_container",
0000000000000000000000000000000000000000;;			TerminationMessagePath: "/somepath",
0000000000000000000000000000000000000000;;			Lifecycle:              lifecycle,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "test_pod",
0000000000000000000000000000000000000000;;				Namespace: "test_pod_namespace",
0000000000000000000000000000000000000000;;				UID:       "test_pod_uid",
0000000000000000000000000000000000000000;;				DeletionGracePeriodSeconds: &deletionGracePeriod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers:                    []v1.Container{*container},
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &terminationGracePeriod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected := &labeledContainerInfo{
0000000000000000000000000000000000000000;;			PodName:       pod.Name,
0000000000000000000000000000000000000000;;			PodNamespace:  pod.Namespace,
0000000000000000000000000000000000000000;;			PodUID:        pod.UID,
0000000000000000000000000000000000000000;;			ContainerName: container.Name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test whether we can get right information from label
0000000000000000000000000000000000000000;;		labels := newContainerLabels(container, pod)
0000000000000000000000000000000000000000;;		containerInfo := getContainerInfoFromLabels(labels)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(containerInfo, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", expected, containerInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestContainerAnnotations(t *testing.T) {
0000000000000000000000000000000000000000;;		restartCount := 5
0000000000000000000000000000000000000000;;		deletionGracePeriod := int64(10)
0000000000000000000000000000000000000000;;		terminationGracePeriod := int64(10)
0000000000000000000000000000000000000000;;		lifecycle := &v1.Lifecycle{
0000000000000000000000000000000000000000;;			// Left PostStart as nil
0000000000000000000000000000000000000000;;			PreStop: &v1.Handler{
0000000000000000000000000000000000000000;;				Exec: &v1.ExecAction{
0000000000000000000000000000000000000000;;					Command: []string{"action1", "action2"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				HTTPGet: &v1.HTTPGetAction{
0000000000000000000000000000000000000000;;					Path:   "path",
0000000000000000000000000000000000000000;;					Host:   "host",
0000000000000000000000000000000000000000;;					Port:   intstr.FromInt(8080),
0000000000000000000000000000000000000000;;					Scheme: "scheme",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				TCPSocket: &v1.TCPSocketAction{
0000000000000000000000000000000000000000;;					Port: intstr.FromString("80"),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		containerPorts := []v1.ContainerPort{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:          "http",
0000000000000000000000000000000000000000;;				HostPort:      80,
0000000000000000000000000000000000000000;;				ContainerPort: 8080,
0000000000000000000000000000000000000000;;				Protocol:      v1.ProtocolTCP,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Name:          "https",
0000000000000000000000000000000000000000;;				HostPort:      443,
0000000000000000000000000000000000000000;;				ContainerPort: 6443,
0000000000000000000000000000000000000000;;				Protocol:      v1.ProtocolTCP,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		container := &v1.Container{
0000000000000000000000000000000000000000;;			Name:  "test_container",
0000000000000000000000000000000000000000;;			Ports: containerPorts,
0000000000000000000000000000000000000000;;			TerminationMessagePath: "/somepath",
0000000000000000000000000000000000000000;;			Lifecycle:              lifecycle,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "test_pod",
0000000000000000000000000000000000000000;;				Namespace: "test_pod_namespace",
0000000000000000000000000000000000000000;;				UID:       "test_pod_uid",
0000000000000000000000000000000000000000;;				DeletionGracePeriodSeconds: &deletionGracePeriod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers:                    []v1.Container{*container},
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &terminationGracePeriod,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected := &annotatedContainerInfo{
0000000000000000000000000000000000000000;;			ContainerPorts:            containerPorts,
0000000000000000000000000000000000000000;;			PodDeletionGracePeriod:    pod.DeletionGracePeriodSeconds,
0000000000000000000000000000000000000000;;			PodTerminationGracePeriod: pod.Spec.TerminationGracePeriodSeconds,
0000000000000000000000000000000000000000;;			Hash:                   kubecontainer.HashContainer(container),
0000000000000000000000000000000000000000;;			RestartCount:           restartCount,
0000000000000000000000000000000000000000;;			TerminationMessagePath: container.TerminationMessagePath,
0000000000000000000000000000000000000000;;			PreStopHandler:         container.Lifecycle.PreStop,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test whether we can get right information from label
0000000000000000000000000000000000000000;;		annotations := newContainerAnnotations(container, pod, restartCount)
0000000000000000000000000000000000000000;;		containerInfo := getContainerInfoFromAnnotations(annotations)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(containerInfo, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", expected, containerInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test when DeletionGracePeriodSeconds, TerminationGracePeriodSeconds and Lifecycle are nil,
0000000000000000000000000000000000000000;;		// the information got from annotations should also be nil
0000000000000000000000000000000000000000;;		container.Lifecycle = nil
0000000000000000000000000000000000000000;;		pod.DeletionGracePeriodSeconds = nil
0000000000000000000000000000000000000000;;		pod.Spec.TerminationGracePeriodSeconds = nil
0000000000000000000000000000000000000000;;		expected.PodDeletionGracePeriod = nil
0000000000000000000000000000000000000000;;		expected.PodTerminationGracePeriod = nil
0000000000000000000000000000000000000000;;		expected.PreStopHandler = nil
0000000000000000000000000000000000000000;;		// Because container is changed, the Hash should be updated
0000000000000000000000000000000000000000;;		expected.Hash = kubecontainer.HashContainer(container)
0000000000000000000000000000000000000000;;		annotations = newContainerAnnotations(container, pod, restartCount)
0000000000000000000000000000000000000000;;		containerInfo = getContainerInfoFromAnnotations(annotations)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(containerInfo, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", expected, containerInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodLabels(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      "test_pod",
0000000000000000000000000000000000000000;;				Namespace: "test_pod_namespace",
0000000000000000000000000000000000000000;;				UID:       "test_pod_uid",
0000000000000000000000000000000000000000;;				Labels:    map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected := &labeledPodSandboxInfo{
0000000000000000000000000000000000000000;;			Labels:       pod.Labels,
0000000000000000000000000000000000000000;;			PodName:      pod.Name,
0000000000000000000000000000000000000000;;			PodNamespace: pod.Namespace,
0000000000000000000000000000000000000000;;			PodUID:       pod.UID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test whether we can get right information from label
0000000000000000000000000000000000000000;;		labels := newPodLabels(pod)
0000000000000000000000000000000000000000;;		podSandboxInfo := getPodSandboxInfoFromLabels(labels)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(podSandboxInfo, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", expected, podSandboxInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPodAnnotations(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:        "test_pod",
0000000000000000000000000000000000000000;;				Namespace:   "test_pod_namespace",
0000000000000000000000000000000000000000;;				UID:         "test_pod_uid",
0000000000000000000000000000000000000000;;				Annotations: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected := &annotatedPodSandboxInfo{
0000000000000000000000000000000000000000;;			Annotations: map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test whether we can get right information from annotations
0000000000000000000000000000000000000000;;		annotations := newPodAnnotations(pod)
0000000000000000000000000000000000000000;;		podSandboxInfo := getPodSandboxInfoFromAnnotations(annotations)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(podSandboxInfo, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", expected, podSandboxInfo)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
