0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
cf98f1fbd42b52ba070c61e04a2b912444322470;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kuberuntime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file implements the functions that are needed for backward
0000000000000000000000000000000000000000;;	// compatibility. Therefore, it imports various kubernetes packages
0000000000000000000000000000000000000000;;	// directly.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// legacyContainerLogsDir is the legacy location of container logs. It is the same with
0000000000000000000000000000000000000000;;		// kubelet.containerLogsDir.
0000000000000000000000000000000000000000;;		legacyContainerLogsDir = "/var/log/containers"
0000000000000000000000000000000000000000;;		// legacyLogSuffix is the legacy log suffix.
0000000000000000000000000000000000000000;;		legacyLogSuffix = "log"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ext4MaxFileNameLen = 255
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// legacyLogSymlink composes the legacy container log path. It is only used for legacy cluster
0000000000000000000000000000000000000000;;	// logging support.
0000000000000000000000000000000000000000;;	func legacyLogSymlink(containerID string, containerName, podName, podNamespace string) string {
0000000000000000000000000000000000000000;;		return logSymlink(legacyContainerLogsDir, kubecontainer.BuildPodFullName(podName, podNamespace),
0000000000000000000000000000000000000000;;			containerName, containerID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func logSymlink(containerLogsDir, podFullName, containerName, dockerId string) string {
0000000000000000000000000000000000000000;;		suffix := fmt.Sprintf(".%s", legacyLogSuffix)
0000000000000000000000000000000000000000;;		logPath := fmt.Sprintf("%s_%s-%s", podFullName, containerName, dockerId)
0000000000000000000000000000000000000000;;		// Length of a filename cannot exceed 255 characters in ext4 on Linux.
0000000000000000000000000000000000000000;;		if len(logPath) > ext4MaxFileNameLen-len(suffix) {
0000000000000000000000000000000000000000;;			logPath = logPath[:ext4MaxFileNameLen-len(suffix)]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return path.Join(containerLogsDir, logPath+suffix)
0000000000000000000000000000000000000000;;	}
