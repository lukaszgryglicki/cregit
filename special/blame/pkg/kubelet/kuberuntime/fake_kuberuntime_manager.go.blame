0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5464e5a5d7a8fd40e9826bae7a1dc78c936c2109;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kuberuntime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cadvisorapi "github.com/google/cadvisor/info/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/credentialprovider"
0000000000000000000000000000000000000000;;		internalapi "k8s.io/kubernetes/pkg/kubelet/apis/cri"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/images"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/lifecycle"
0000000000000000000000000000000000000000;;		proberesults "k8s.io/kubernetes/pkg/kubelet/prober/results"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeHTTP struct {
0000000000000000000000000000000000000000;;		url string
0000000000000000000000000000000000000000;;		err error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeHTTP) Get(url string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		f.url = url
0000000000000000000000000000000000000000;;		return nil, f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakePodGetter struct {
0000000000000000000000000000000000000000;;		pods map[types.UID]*v1.Pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakePodGetter() *fakePodGetter {
0000000000000000000000000000000000000000;;		return &fakePodGetter{make(map[types.UID]*v1.Pod)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakePodGetter) GetPodByUID(uid types.UID) (*v1.Pod, bool) {
0000000000000000000000000000000000000000;;		pod, found := f.pods[uid]
0000000000000000000000000000000000000000;;		return pod, found
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeKubeRuntimeManager(runtimeService internalapi.RuntimeService, imageService internalapi.ImageManagerService, machineInfo *cadvisorapi.MachineInfo, osInterface kubecontainer.OSInterface, runtimeHelper kubecontainer.RuntimeHelper, keyring credentialprovider.DockerKeyring) (*kubeGenericRuntimeManager, error) {
0000000000000000000000000000000000000000;;		recorder := &record.FakeRecorder{}
0000000000000000000000000000000000000000;;		kubeRuntimeManager := &kubeGenericRuntimeManager{
0000000000000000000000000000000000000000;;			recorder:            recorder,
0000000000000000000000000000000000000000;;			cpuCFSQuota:         false,
0000000000000000000000000000000000000000;;			livenessManager:     proberesults.NewManager(),
0000000000000000000000000000000000000000;;			containerRefManager: kubecontainer.NewRefManager(),
0000000000000000000000000000000000000000;;			machineInfo:         machineInfo,
0000000000000000000000000000000000000000;;			osInterface:         osInterface,
0000000000000000000000000000000000000000;;			runtimeHelper:       runtimeHelper,
0000000000000000000000000000000000000000;;			runtimeService:      runtimeService,
0000000000000000000000000000000000000000;;			imageService:        imageService,
0000000000000000000000000000000000000000;;			keyring:             keyring,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		typedVersion, err := runtimeService.Version(kubeRuntimeAPIVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubeRuntimeManager.containerGC = NewContainerGC(runtimeService, newFakePodGetter(), kubeRuntimeManager)
0000000000000000000000000000000000000000;;		kubeRuntimeManager.runtimeName = typedVersion.RuntimeName
0000000000000000000000000000000000000000;;		kubeRuntimeManager.imagePuller = images.NewImageManager(
0000000000000000000000000000000000000000;;			kubecontainer.FilterEventRecorder(recorder),
0000000000000000000000000000000000000000;;			kubeRuntimeManager,
0000000000000000000000000000000000000000;;			flowcontrol.NewBackOff(time.Second, 300*time.Second),
0000000000000000000000000000000000000000;;			false,
0000000000000000000000000000000000000000;;			0, // Disable image pull throttling by setting QPS to 0,
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		kubeRuntimeManager.runner = lifecycle.NewHandlerRunner(
0000000000000000000000000000000000000000;;			&fakeHTTP{},
0000000000000000000000000000000000000000;;			kubeRuntimeManager,
0000000000000000000000000000000000000000;;			kubeRuntimeManager)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return kubeRuntimeManager, nil
0000000000000000000000000000000000000000;;	}
