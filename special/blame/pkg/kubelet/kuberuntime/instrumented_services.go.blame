0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d7363a1ef10613ac00538e1592a13b5b12b369ad;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kuberuntime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		internalapi "k8s.io/kubernetes/pkg/kubelet/apis/cri"
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/metrics"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// instrumentedRuntimeService wraps the RuntimeService and records the operations
0000000000000000000000000000000000000000;;	// and errors metrics.
0000000000000000000000000000000000000000;;	type instrumentedRuntimeService struct {
0000000000000000000000000000000000000000;;		service internalapi.RuntimeService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates an instrumented RuntimeInterface from an existing RuntimeService.
0000000000000000000000000000000000000000;;	func newInstrumentedRuntimeService(service internalapi.RuntimeService) internalapi.RuntimeService {
0000000000000000000000000000000000000000;;		return &instrumentedRuntimeService{service: service}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// instrumentedImageManagerService wraps the ImageManagerService and records the operations
0000000000000000000000000000000000000000;;	// and errors metrics.
0000000000000000000000000000000000000000;;	type instrumentedImageManagerService struct {
0000000000000000000000000000000000000000;;		service internalapi.ImageManagerService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates an instrumented ImageManagerService from an existing ImageManagerService.
0000000000000000000000000000000000000000;;	func newInstrumentedImageManagerService(service internalapi.ImageManagerService) internalapi.ImageManagerService {
0000000000000000000000000000000000000000;;		return &instrumentedImageManagerService{service: service}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// recordOperation records the duration of the operation.
0000000000000000000000000000000000000000;;	func recordOperation(operation string, start time.Time) {
0000000000000000000000000000000000000000;;		metrics.RuntimeOperations.WithLabelValues(operation).Inc()
0000000000000000000000000000000000000000;;		metrics.RuntimeOperationsLatency.WithLabelValues(operation).Observe(metrics.SinceInMicroseconds(start))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// recordError records error for metric if an error occurred.
0000000000000000000000000000000000000000;;	func recordError(operation string, err error) {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			metrics.RuntimeOperationsErrors.WithLabelValues(operation).Inc()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) Version(apiVersion string) (*runtimeapi.VersionResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "version"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.Version(apiVersion)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) Status() (*runtimeapi.RuntimeStatus, error) {
0000000000000000000000000000000000000000;;		const operation = "status"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.Status()
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) CreateContainer(podSandboxID string, config *runtimeapi.ContainerConfig, sandboxConfig *runtimeapi.PodSandboxConfig) (string, error) {
0000000000000000000000000000000000000000;;		const operation = "create_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.CreateContainer(podSandboxID, config, sandboxConfig)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) StartContainer(containerID string) error {
0000000000000000000000000000000000000000;;		const operation = "start_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.service.StartContainer(containerID)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) StopContainer(containerID string, timeout int64) error {
0000000000000000000000000000000000000000;;		const operation = "stop_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.service.StopContainer(containerID, timeout)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) RemoveContainer(containerID string) error {
0000000000000000000000000000000000000000;;		const operation = "remove_container"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.service.RemoveContainer(containerID)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) ListContainers(filter *runtimeapi.ContainerFilter) ([]*runtimeapi.Container, error) {
0000000000000000000000000000000000000000;;		const operation = "list_containers"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.ListContainers(filter)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) ContainerStatus(containerID string) (*runtimeapi.ContainerStatus, error) {
0000000000000000000000000000000000000000;;		const operation = "container_status"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.ContainerStatus(containerID)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) ExecSync(containerID string, cmd []string, timeout time.Duration) ([]byte, []byte, error) {
0000000000000000000000000000000000000000;;		const operation = "exec_sync"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stdout, stderr, err := in.service.ExecSync(containerID, cmd, timeout)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return stdout, stderr, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) Exec(req *runtimeapi.ExecRequest) (*runtimeapi.ExecResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "exec"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := in.service.Exec(req)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) Attach(req *runtimeapi.AttachRequest) (*runtimeapi.AttachResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "attach"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := in.service.Attach(req)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) RunPodSandbox(config *runtimeapi.PodSandboxConfig) (string, error) {
0000000000000000000000000000000000000000;;		const operation = "run_podsandbox"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.RunPodSandbox(config)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) StopPodSandbox(podSandboxID string) error {
0000000000000000000000000000000000000000;;		const operation = "stop_podsandbox"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.service.StopPodSandbox(podSandboxID)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) RemovePodSandbox(podSandboxID string) error {
0000000000000000000000000000000000000000;;		const operation = "remove_podsandbox"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.service.RemovePodSandbox(podSandboxID)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) PodSandboxStatus(podSandboxID string) (*runtimeapi.PodSandboxStatus, error) {
0000000000000000000000000000000000000000;;		const operation = "podsandbox_status"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.PodSandboxStatus(podSandboxID)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) ListPodSandbox(filter *runtimeapi.PodSandboxFilter) ([]*runtimeapi.PodSandbox, error) {
0000000000000000000000000000000000000000;;		const operation = "list_podsandbox"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.ListPodSandbox(filter)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) ContainerStats(req *runtimeapi.ContainerStatsRequest) (*runtimeapi.ContainerStatsResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "container_stats"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.ContainerStats(req)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) ListContainerStats(req *runtimeapi.ListContainerStatsRequest) (*runtimeapi.ListContainerStatsResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "list_container_stats"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.ListContainerStats(req)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) PortForward(req *runtimeapi.PortForwardRequest) (*runtimeapi.PortForwardResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "port_forward"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := in.service.PortForward(req)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedRuntimeService) UpdateRuntimeConfig(runtimeConfig *runtimeapi.RuntimeConfig) error {
0000000000000000000000000000000000000000;;		const operation = "update_runtime_config"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.service.UpdateRuntimeConfig(runtimeConfig)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedImageManagerService) ListImages(filter *runtimeapi.ImageFilter) ([]*runtimeapi.Image, error) {
0000000000000000000000000000000000000000;;		const operation = "list_images"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.ListImages(filter)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedImageManagerService) ImageStatus(image *runtimeapi.ImageSpec) (*runtimeapi.Image, error) {
0000000000000000000000000000000000000000;;		const operation = "image_status"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := in.service.ImageStatus(image)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedImageManagerService) PullImage(image *runtimeapi.ImageSpec, auth *runtimeapi.AuthConfig) (string, error) {
0000000000000000000000000000000000000000;;		const operation = "pull_image"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		imageRef, err := in.service.PullImage(image, auth)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return imageRef, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedImageManagerService) RemoveImage(image *runtimeapi.ImageSpec) error {
0000000000000000000000000000000000000000;;		const operation = "remove_image"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := in.service.RemoveImage(image)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in instrumentedImageManagerService) ImageFsInfo(req *runtimeapi.ImageFsInfoRequest) (*runtimeapi.ImageFsInfoResponse, error) {
0000000000000000000000000000000000000000;;		const operation = "image_fs_info"
0000000000000000000000000000000000000000;;		defer recordOperation(operation, time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fsInfo, err := in.service.ImageFsInfo(req)
0000000000000000000000000000000000000000;;		recordError(operation, err)
0000000000000000000000000000000000000000;;		return fsInfo, nil
0000000000000000000000000000000000000000;;	}
