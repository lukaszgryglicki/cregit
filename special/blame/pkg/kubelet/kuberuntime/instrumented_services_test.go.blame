0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
860f5bc5ddc11a0758e01ea3b382efe157365c7f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kuberuntime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/metrics"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRecordOperation(t *testing.T) {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(metrics.RuntimeOperations)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(metrics.RuntimeOperationsLatency)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(metrics.RuntimeOperationsErrors)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		temporalServer := "127.0.0.1:1234"
0000000000000000000000000000000000000000;;		l, err := net.Listen("tcp", temporalServer)
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		defer l.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		prometheusUrl := "http://" + temporalServer + "/metrics"
0000000000000000000000000000000000000000;;		mux := http.NewServeMux()
0000000000000000000000000000000000000000;;		mux.Handle("/metrics", prometheus.Handler())
0000000000000000000000000000000000000000;;		server := &http.Server{
0000000000000000000000000000000000000000;;			Addr:    temporalServer,
0000000000000000000000000000000000000000;;			Handler: mux,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			server.Serve(l)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		recordOperation("create_container", time.Now())
0000000000000000000000000000000000000000;;		runtimeOperationsCounterExpected := "kubelet_runtime_operations{operation_type=\"create_container\"} 1"
0000000000000000000000000000000000000000;;		runtimeOperationsLatencyExpected := "kubelet_runtime_operations_latency_microseconds_count{operation_type=\"create_container\"} 1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.HTTPBodyContains(t, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			mux.ServeHTTP(w, r)
0000000000000000000000000000000000000000;;		}), "GET", prometheusUrl, nil, runtimeOperationsCounterExpected)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.HTTPBodyContains(t, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			mux.ServeHTTP(w, r)
0000000000000000000000000000000000000000;;		}), "GET", prometheusUrl, nil, runtimeOperationsLatencyExpected)
0000000000000000000000000000000000000000;;	}
