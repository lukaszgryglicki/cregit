0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
713c211068e5b936543d9b9f13c1933fb12baf6d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kuberuntime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		runtimeapi "k8s.io/kubernetes/pkg/kubelet/apis/cri/v1alpha1/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/security/apparmor"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/securitycontext"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// determineEffectiveSecurityContext gets container's security context from v1.Pod and v1.Container.
0000000000000000000000000000000000000000;;	func (m *kubeGenericRuntimeManager) determineEffectiveSecurityContext(pod *v1.Pod, container *v1.Container, uid *int64, username string) *runtimeapi.LinuxContainerSecurityContext {
0000000000000000000000000000000000000000;;		effectiveSc := securitycontext.DetermineEffectiveSecurityContext(pod, container)
0000000000000000000000000000000000000000;;		synthesized := convertToRuntimeSecurityContext(effectiveSc)
0000000000000000000000000000000000000000;;		if synthesized == nil {
0000000000000000000000000000000000000000;;			synthesized = &runtimeapi.LinuxContainerSecurityContext{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// set ApparmorProfile.
0000000000000000000000000000000000000000;;		synthesized.ApparmorProfile = apparmor.GetProfileNameFromPodAnnotations(pod.Annotations, container.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// set RunAsUser.
0000000000000000000000000000000000000000;;		if synthesized.RunAsUser == nil {
0000000000000000000000000000000000000000;;			if uid != nil {
0000000000000000000000000000000000000000;;				synthesized.RunAsUser = &runtimeapi.Int64Value{Value: *uid}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			synthesized.RunAsUsername = username
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// set namespace options and supplemental groups.
0000000000000000000000000000000000000000;;		synthesized.NamespaceOptions = &runtimeapi.NamespaceOption{
0000000000000000000000000000000000000000;;			HostNetwork: pod.Spec.HostNetwork,
0000000000000000000000000000000000000000;;			HostIpc:     pod.Spec.HostIPC,
0000000000000000000000000000000000000000;;			HostPid:     pod.Spec.HostPID,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		podSc := pod.Spec.SecurityContext
0000000000000000000000000000000000000000;;		if podSc != nil {
0000000000000000000000000000000000000000;;			if podSc.FSGroup != nil {
0000000000000000000000000000000000000000;;				synthesized.SupplementalGroups = append(synthesized.SupplementalGroups, int64(*podSc.FSGroup))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if podSc.SupplementalGroups != nil {
0000000000000000000000000000000000000000;;				for _, sg := range podSc.SupplementalGroups {
0000000000000000000000000000000000000000;;					synthesized.SupplementalGroups = append(synthesized.SupplementalGroups, int64(sg))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if groups := m.runtimeHelper.GetExtraSupplementalGroupsForPod(pod); len(groups) > 0 {
0000000000000000000000000000000000000000;;			synthesized.SupplementalGroups = append(synthesized.SupplementalGroups, groups...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return synthesized
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// verifyRunAsNonRoot verifies RunAsNonRoot.
0000000000000000000000000000000000000000;;	func verifyRunAsNonRoot(pod *v1.Pod, container *v1.Container, uid int64) error {
0000000000000000000000000000000000000000;;		effectiveSc := securitycontext.DetermineEffectiveSecurityContext(pod, container)
0000000000000000000000000000000000000000;;		// If the option is not set, or if running as root is allowed, return nil.
0000000000000000000000000000000000000000;;		if effectiveSc == nil || effectiveSc.RunAsNonRoot == nil || !*effectiveSc.RunAsNonRoot {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if effectiveSc.RunAsUser != nil {
0000000000000000000000000000000000000000;;			if *effectiveSc.RunAsUser == 0 {
0000000000000000000000000000000000000000;;				return fmt.Errorf("container's runAsUser breaks non-root policy")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if uid == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("container has runAsNonRoot and image will run as root")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// convertToRuntimeSecurityContext converts v1.SecurityContext to runtimeapi.SecurityContext.
0000000000000000000000000000000000000000;;	func convertToRuntimeSecurityContext(securityContext *v1.SecurityContext) *runtimeapi.LinuxContainerSecurityContext {
0000000000000000000000000000000000000000;;		if securityContext == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sc := &runtimeapi.LinuxContainerSecurityContext{
0000000000000000000000000000000000000000;;			Capabilities:   convertToRuntimeCapabilities(securityContext.Capabilities),
0000000000000000000000000000000000000000;;			SelinuxOptions: convertToRuntimeSELinuxOption(securityContext.SELinuxOptions),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if securityContext.RunAsUser != nil {
0000000000000000000000000000000000000000;;			sc.RunAsUser = &runtimeapi.Int64Value{Value: int64(*securityContext.RunAsUser)}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if securityContext.Privileged != nil {
0000000000000000000000000000000000000000;;			sc.Privileged = *securityContext.Privileged
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if securityContext.ReadOnlyRootFilesystem != nil {
0000000000000000000000000000000000000000;;			sc.ReadonlyRootfs = *securityContext.ReadOnlyRootFilesystem
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// convertToRuntimeSELinuxOption converts v1.SELinuxOptions to runtimeapi.SELinuxOption.
0000000000000000000000000000000000000000;;	func convertToRuntimeSELinuxOption(opts *v1.SELinuxOptions) *runtimeapi.SELinuxOption {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &runtimeapi.SELinuxOption{
0000000000000000000000000000000000000000;;			User:  opts.User,
0000000000000000000000000000000000000000;;			Role:  opts.Role,
0000000000000000000000000000000000000000;;			Type:  opts.Type,
0000000000000000000000000000000000000000;;			Level: opts.Level,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// convertToRuntimeCapabilities converts v1.Capabilities to runtimeapi.Capability.
0000000000000000000000000000000000000000;;	func convertToRuntimeCapabilities(opts *v1.Capabilities) *runtimeapi.Capability {
0000000000000000000000000000000000000000;;		if opts == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		capabilities := &runtimeapi.Capability{
0000000000000000000000000000000000000000;;			AddCapabilities:  make([]string, len(opts.Add)),
0000000000000000000000000000000000000000;;			DropCapabilities: make([]string, len(opts.Drop)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for index, value := range opts.Add {
0000000000000000000000000000000000000000;;			capabilities.AddCapabilities[index] = string(value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for index, value := range opts.Drop {
0000000000000000000000000000000000000000;;			capabilities.DropCapabilities[index] = string(value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return capabilities
0000000000000000000000000000000000000000;;	}
