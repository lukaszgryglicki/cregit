0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
860f5bc5ddc11a0758e01ea3b382efe157365c7f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package kuberuntime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVerifyRunAsNonRoot(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				UID:       "12345678",
0000000000000000000000000000000000000000;;				Name:      "bar",
0000000000000000000000000000000000000000;;				Namespace: "new",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:            "foo",
0000000000000000000000000000000000000000;;						Image:           "busybox",
0000000000000000000000000000000000000000;;						ImagePullPolicy: v1.PullIfNotPresent,
0000000000000000000000000000000000000000;;						Command:         []string{"testCommand"},
0000000000000000000000000000000000000000;;						WorkingDir:      "testWorkingDir",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rootUser := int64(0)
0000000000000000000000000000000000000000;;		runAsNonRootTrue := true
0000000000000000000000000000000000000000;;		runAsNonRootFalse := false
0000000000000000000000000000000000000000;;		imageRootUser := int64(0)
0000000000000000000000000000000000000000;;		imageNonRootUser := int64(123)
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			desc      string
0000000000000000000000000000000000000000;;			sc        *v1.SecurityContext
0000000000000000000000000000000000000000;;			imageUser int64
0000000000000000000000000000000000000000;;			fail      bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc:      "Pass if SecurityContext is not set",
0000000000000000000000000000000000000000;;				sc:        nil,
0000000000000000000000000000000000000000;;				imageUser: imageRootUser,
0000000000000000000000000000000000000000;;				fail:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "Pass if RunAsNonRoot is not set",
0000000000000000000000000000000000000000;;				sc: &v1.SecurityContext{
0000000000000000000000000000000000000000;;					RunAsUser: &rootUser,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				imageUser: imageRootUser,
0000000000000000000000000000000000000000;;				fail:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "Pass if RunAsNonRoot is false (image user is root)",
0000000000000000000000000000000000000000;;				sc: &v1.SecurityContext{
0000000000000000000000000000000000000000;;					RunAsNonRoot: &runAsNonRootFalse,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				imageUser: imageRootUser,
0000000000000000000000000000000000000000;;				fail:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "Pass if RunAsNonRoot is false (RunAsUser is root)",
0000000000000000000000000000000000000000;;				sc: &v1.SecurityContext{
0000000000000000000000000000000000000000;;					RunAsNonRoot: &runAsNonRootFalse,
0000000000000000000000000000000000000000;;					RunAsUser:    &rootUser,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				imageUser: imageNonRootUser,
0000000000000000000000000000000000000000;;				fail:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "Fail if container's RunAsUser is root and RunAsNonRoot is true",
0000000000000000000000000000000000000000;;				sc: &v1.SecurityContext{
0000000000000000000000000000000000000000;;					RunAsNonRoot: &runAsNonRootTrue,
0000000000000000000000000000000000000000;;					RunAsUser:    &rootUser,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				imageUser: imageNonRootUser,
0000000000000000000000000000000000000000;;				fail:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				desc: "Fail if image's user is root and RunAsNonRoot is true",
0000000000000000000000000000000000000000;;				sc: &v1.SecurityContext{
0000000000000000000000000000000000000000;;					RunAsNonRoot: &runAsNonRootTrue,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				imageUser: imageRootUser,
0000000000000000000000000000000000000000;;				fail:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			pod.Spec.Containers[0].SecurityContext = test.sc
0000000000000000000000000000000000000000;;			err := verifyRunAsNonRoot(pod, &pod.Spec.Containers[0], int64(0))
0000000000000000000000000000000000000000;;			if test.fail {
0000000000000000000000000000000000000000;;				assert.Error(t, err, test.desc)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				assert.NoError(t, err, test.desc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
