0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
93eddd3ee061725c4e64758c0cf8b24d25e877a0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package results
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCacheOperations(t *testing.T) {
0000000000000000000000000000000000000000;;		m := NewManager()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unsetID := kubecontainer.ContainerID{Type: "test", ID: "unset"}
0000000000000000000000000000000000000000;;		setID := kubecontainer.ContainerID{Type: "test", ID: "set"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, found := m.Get(unsetID)
0000000000000000000000000000000000000000;;		assert.False(t, found, "unset result found")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.Set(setID, Success, &v1.Pod{})
0000000000000000000000000000000000000000;;		result, found := m.Get(setID)
0000000000000000000000000000000000000000;;		assert.True(t, result == Success, "set result")
0000000000000000000000000000000000000000;;		assert.True(t, found, "set result found")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.Remove(setID)
0000000000000000000000000000000000000000;;		_, found = m.Get(setID)
0000000000000000000000000000000000000000;;		assert.False(t, found, "removed result found")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdates(t *testing.T) {
0000000000000000000000000000000000000000;;		m := NewManager()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "test-pod"}}
0000000000000000000000000000000000000000;;		fooID := kubecontainer.ContainerID{Type: "test", ID: "foo"}
0000000000000000000000000000000000000000;;		barID := kubecontainer.ContainerID{Type: "test", ID: "bar"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectUpdate := func(expected Update, msg string) {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case u := <-m.Updates():
0000000000000000000000000000000000000000;;				if expected != u {
0000000000000000000000000000000000000000;;					t.Errorf("Expected update %v, received %v: %s", expected, u, msg)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case <-time.After(wait.ForeverTestTimeout):
0000000000000000000000000000000000000000;;				t.Errorf("Timed out waiting for update %v: %s", expected, msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectNoUpdate := func(msg string) {
0000000000000000000000000000000000000000;;			// NOTE: Since updates are accumulated asynchronously, this method is not guaranteed to fail
0000000000000000000000000000000000000000;;			// when it should. In the event it misses a failure, the following calls to expectUpdate should
0000000000000000000000000000000000000000;;			// still fail.
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case u := <-m.Updates():
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected update %v: %s", u, msg)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				// Pass
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// New result should always push an update.
0000000000000000000000000000000000000000;;		m.Set(fooID, Success, pod)
0000000000000000000000000000000000000000;;		expectUpdate(Update{fooID, Success, pod.UID}, "new success")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.Set(barID, Failure, pod)
0000000000000000000000000000000000000000;;		expectUpdate(Update{barID, Failure, pod.UID}, "new failure")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unchanged results should not send an update.
0000000000000000000000000000000000000000;;		m.Set(fooID, Success, pod)
0000000000000000000000000000000000000000;;		expectNoUpdate("unchanged foo")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.Set(barID, Failure, pod)
0000000000000000000000000000000000000000;;		expectNoUpdate("unchanged bar")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Changed results should send an update.
0000000000000000000000000000000000000000;;		m.Set(fooID, Failure, pod)
0000000000000000000000000000000000000000;;		expectUpdate(Update{fooID, Failure, pod.UID}, "changed foo")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.Set(barID, Success, pod)
0000000000000000000000000000000000000000;;		expectUpdate(Update{barID, Success, pod.UID}, "changed bar")
0000000000000000000000000000000000000000;;	}
