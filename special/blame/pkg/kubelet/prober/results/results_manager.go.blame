0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
93eddd3ee061725c4e64758c0cf8b24d25e877a0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package results
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Manager provides a probe results cache and channel of updates.
0000000000000000000000000000000000000000;;	type Manager interface {
0000000000000000000000000000000000000000;;		// Get returns the cached result for the container with the given ID.
0000000000000000000000000000000000000000;;		Get(kubecontainer.ContainerID) (Result, bool)
0000000000000000000000000000000000000000;;		// Set sets the cached result for the container with the given ID.
0000000000000000000000000000000000000000;;		// The pod is only included to be sent with the update.
0000000000000000000000000000000000000000;;		Set(kubecontainer.ContainerID, Result, *v1.Pod)
0000000000000000000000000000000000000000;;		// Remove clears the cached result for the container with the given ID.
0000000000000000000000000000000000000000;;		Remove(kubecontainer.ContainerID)
0000000000000000000000000000000000000000;;		// Updates creates a channel that receives an Update whenever its result changes (but not
0000000000000000000000000000000000000000;;		// removed).
0000000000000000000000000000000000000000;;		// NOTE: The current implementation only supports a single updates channel.
0000000000000000000000000000000000000000;;		Updates() <-chan Update
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Result is the type for probe results.
0000000000000000000000000000000000000000;;	type Result bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Success Result = true
0000000000000000000000000000000000000000;;		Failure Result = false
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r Result) String() string {
0000000000000000000000000000000000000000;;		switch r {
0000000000000000000000000000000000000000;;		case Success:
0000000000000000000000000000000000000000;;			return "Success"
0000000000000000000000000000000000000000;;		case Failure:
0000000000000000000000000000000000000000;;			return "Failure"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "UNKNOWN"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update is an enum of the types of updates sent over the Updates channel.
0000000000000000000000000000000000000000;;	type Update struct {
0000000000000000000000000000000000000000;;		ContainerID kubecontainer.ContainerID
0000000000000000000000000000000000000000;;		Result      Result
0000000000000000000000000000000000000000;;		PodUID      types.UID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Manager implementation.
0000000000000000000000000000000000000000;;	type manager struct {
0000000000000000000000000000000000000000;;		// guards the cache
0000000000000000000000000000000000000000;;		sync.RWMutex
0000000000000000000000000000000000000000;;		// map of container ID -> probe Result
0000000000000000000000000000000000000000;;		cache map[kubecontainer.ContainerID]Result
0000000000000000000000000000000000000000;;		// channel of updates
0000000000000000000000000000000000000000;;		updates chan Update
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ Manager = &manager{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewManager creates ane returns an empty results manager.
0000000000000000000000000000000000000000;;	func NewManager() Manager {
0000000000000000000000000000000000000000;;		return &manager{
0000000000000000000000000000000000000000;;			cache:   make(map[kubecontainer.ContainerID]Result),
0000000000000000000000000000000000000000;;			updates: make(chan Update, 20),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *manager) Get(id kubecontainer.ContainerID) (Result, bool) {
0000000000000000000000000000000000000000;;		m.RLock()
0000000000000000000000000000000000000000;;		defer m.RUnlock()
0000000000000000000000000000000000000000;;		result, found := m.cache[id]
0000000000000000000000000000000000000000;;		return result, found
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *manager) Set(id kubecontainer.ContainerID, result Result, pod *v1.Pod) {
0000000000000000000000000000000000000000;;		if m.setInternal(id, result) {
0000000000000000000000000000000000000000;;			m.updates <- Update{id, result, pod.UID}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Internal helper for locked portion of set. Returns whether an update should be sent.
0000000000000000000000000000000000000000;;	func (m *manager) setInternal(id kubecontainer.ContainerID, result Result) bool {
0000000000000000000000000000000000000000;;		m.Lock()
0000000000000000000000000000000000000000;;		defer m.Unlock()
0000000000000000000000000000000000000000;;		prev, exists := m.cache[id]
0000000000000000000000000000000000000000;;		if !exists || prev != result {
0000000000000000000000000000000000000000;;			m.cache[id] = result
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *manager) Remove(id kubecontainer.ContainerID) {
0000000000000000000000000000000000000000;;		m.Lock()
0000000000000000000000000000000000000000;;		defer m.Unlock()
0000000000000000000000000000000000000000;;		delete(m.cache, id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *manager) Updates() <-chan Update {
0000000000000000000000000000000000000000;;		return m.updates
0000000000000000000000000000000000000000;;	}
