0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
cb7e0146fb2ea1e5e51762e0031530117051407d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package lifecycle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/plugin/pkg/scheduler/algorithm"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AdmissionFailureHandlerStub is an AdmissionFailureHandler that does not perform any handling of admission failure.
0000000000000000000000000000000000000000;;	// It simply passes the failure on.
0000000000000000000000000000000000000000;;	type AdmissionFailureHandlerStub struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ AdmissionFailureHandler = &AdmissionFailureHandlerStub{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAdmissionFailureHandlerStub() *AdmissionFailureHandlerStub {
0000000000000000000000000000000000000000;;		return &AdmissionFailureHandlerStub{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *AdmissionFailureHandlerStub) HandleAdmissionFailure(pod *v1.Pod, failureReasons []algorithm.PredicateFailureReason) (bool, []algorithm.PredicateFailureReason, error) {
0000000000000000000000000000000000000000;;		return false, failureReasons, nil
0000000000000000000000000000000000000000;;	}
