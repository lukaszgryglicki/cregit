0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
3eecfdcaed5f37711d161ab7ba1d65957a59ad1e;pkg/kubelet/handlers_test.go[pkg/kubelet/handlers_test.go][pkg/kubelet/lifecycle/handlers_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package lifecycle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResolvePortInt(t *testing.T) {
0000000000000000000000000000000000000000;;		expected := 80
0000000000000000000000000000000000000000;;		port, err := resolvePort(intstr.FromInt(expected), &v1.Container{})
0000000000000000000000000000000000000000;;		if port != expected {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %d, saw: %d", expected, port)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResolvePortString(t *testing.T) {
0000000000000000000000000000000000000000;;		expected := 80
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		container := &v1.Container{
0000000000000000000000000000000000000000;;			Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;				{Name: name, ContainerPort: int32(expected)},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		port, err := resolvePort(intstr.FromString(name), container)
0000000000000000000000000000000000000000;;		if port != expected {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %d, saw: %d", expected, port)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResolvePortStringUnknown(t *testing.T) {
0000000000000000000000000000000000000000;;		expected := int32(80)
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		container := &v1.Container{
0000000000000000000000000000000000000000;;			Ports: []v1.ContainerPort{
0000000000000000000000000000000000000000;;				{Name: "bar", ContainerPort: expected},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		port, err := resolvePort(intstr.FromString(name), container)
0000000000000000000000000000000000000000;;		if port != -1 {
0000000000000000000000000000000000000000;;			t.Errorf("expected: -1, saw: %d", port)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeContainerCommandRunner struct {
0000000000000000000000000000000000000000;;		Cmd []string
0000000000000000000000000000000000000000;;		ID  kubecontainer.ContainerID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeContainerCommandRunner) RunInContainer(id kubecontainer.ContainerID, cmd []string, timeout time.Duration) ([]byte, error) {
0000000000000000000000000000000000000000;;		f.Cmd = cmd
0000000000000000000000000000000000000000;;		f.ID = id
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunHandlerExec(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeCommandRunner := fakeContainerCommandRunner{}
0000000000000000000000000000000000000000;;		handlerRunner := NewHandlerRunner(&fakeHTTP{}, &fakeCommandRunner, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		containerID := kubecontainer.ContainerID{Type: "test", ID: "abc1234"}
0000000000000000000000000000000000000000;;		containerName := "containerFoo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		container := v1.Container{
0000000000000000000000000000000000000000;;			Name: containerName,
0000000000000000000000000000000000000000;;			Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;				PostStart: &v1.Handler{
0000000000000000000000000000000000000000;;					Exec: &v1.ExecAction{
0000000000000000000000000000000000000000;;						Command: []string{"ls", "-a"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := v1.Pod{}
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Name = "podFoo"
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Namespace = "nsFoo"
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []v1.Container{container}
0000000000000000000000000000000000000000;;		_, err := handlerRunner.Run(containerID, &pod, &container, container.Lifecycle.PostStart)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fakeCommandRunner.ID != containerID ||
0000000000000000000000000000000000000000;;			!reflect.DeepEqual(container.Lifecycle.PostStart.Exec.Command, fakeCommandRunner.Cmd) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected commands: %v", fakeCommandRunner)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeHTTP struct {
0000000000000000000000000000000000000000;;		url  string
0000000000000000000000000000000000000000;;		err  error
0000000000000000000000000000000000000000;;		resp *http.Response
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeHTTP) Get(url string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		f.url = url
0000000000000000000000000000000000000000;;		return f.resp, f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunHandlerHttp(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeHttp := fakeHTTP{}
0000000000000000000000000000000000000000;;		handlerRunner := NewHandlerRunner(&fakeHttp, &fakeContainerCommandRunner{}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		containerID := kubecontainer.ContainerID{Type: "test", ID: "abc1234"}
0000000000000000000000000000000000000000;;		containerName := "containerFoo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		container := v1.Container{
0000000000000000000000000000000000000000;;			Name: containerName,
0000000000000000000000000000000000000000;;			Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;				PostStart: &v1.Handler{
0000000000000000000000000000000000000000;;					HTTPGet: &v1.HTTPGetAction{
0000000000000000000000000000000000000000;;						Host: "foo",
0000000000000000000000000000000000000000;;						Port: intstr.FromInt(8080),
0000000000000000000000000000000000000000;;						Path: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := v1.Pod{}
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Name = "podFoo"
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Namespace = "nsFoo"
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []v1.Container{container}
0000000000000000000000000000000000000000;;		_, err := handlerRunner.Run(containerID, &pod, &container, container.Lifecycle.PostStart)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fakeHttp.url != "http://foo:8080/bar" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected url: %s", fakeHttp.url)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunHandlerNil(t *testing.T) {
0000000000000000000000000000000000000000;;		handlerRunner := NewHandlerRunner(&fakeHTTP{}, &fakeContainerCommandRunner{}, nil)
0000000000000000000000000000000000000000;;		containerID := kubecontainer.ContainerID{Type: "test", ID: "abc1234"}
0000000000000000000000000000000000000000;;		podName := "podFoo"
0000000000000000000000000000000000000000;;		podNamespace := "nsFoo"
0000000000000000000000000000000000000000;;		containerName := "containerFoo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		container := v1.Container{
0000000000000000000000000000000000000000;;			Name: containerName,
0000000000000000000000000000000000000000;;			Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;				PostStart: &v1.Handler{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := v1.Pod{}
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Name = podName
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Namespace = podNamespace
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []v1.Container{container}
0000000000000000000000000000000000000000;;		_, err := handlerRunner.Run(containerID, &pod, &container, container.Lifecycle.PostStart)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expect error, but got nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRunHandlerHttpFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		expectedErr := fmt.Errorf("fake http error")
0000000000000000000000000000000000000000;;		expectedResp := http.Response{
0000000000000000000000000000000000000000;;			Body: ioutil.NopCloser(strings.NewReader(expectedErr.Error())),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeHttp := fakeHTTP{err: expectedErr, resp: &expectedResp}
0000000000000000000000000000000000000000;;		handlerRunner := NewHandlerRunner(&fakeHttp, &fakeContainerCommandRunner{}, nil)
0000000000000000000000000000000000000000;;		containerName := "containerFoo"
0000000000000000000000000000000000000000;;		containerID := kubecontainer.ContainerID{Type: "test", ID: "abc1234"}
0000000000000000000000000000000000000000;;		container := v1.Container{
0000000000000000000000000000000000000000;;			Name: containerName,
0000000000000000000000000000000000000000;;			Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;				PostStart: &v1.Handler{
0000000000000000000000000000000000000000;;					HTTPGet: &v1.HTTPGetAction{
0000000000000000000000000000000000000000;;						Host: "foo",
0000000000000000000000000000000000000000;;						Port: intstr.FromInt(8080),
0000000000000000000000000000000000000000;;						Path: "bar",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod := v1.Pod{}
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Name = "podFoo"
0000000000000000000000000000000000000000;;		pod.ObjectMeta.Namespace = "nsFoo"
0000000000000000000000000000000000000000;;		pod.Spec.Containers = []v1.Container{container}
0000000000000000000000000000000000000000;;		msg, err := handlerRunner.Run(containerID, &pod, &container, container.Lifecycle.PostStart)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected error: %v", expectedErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if msg != expectedErr.Error() {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error message: %q; expected %q", msg, expectedErr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fakeHttp.url != "http://foo:8080/bar" {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected url: %s", fakeHttp.url)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
