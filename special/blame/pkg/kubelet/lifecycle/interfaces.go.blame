0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e28577132512298044cd0f52db9f084794eddf40;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package lifecycle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodAdmitAttributes is the context for a pod admission decision.
0000000000000000000000000000000000000000;;	// The member fields of this struct should never be mutated.
0000000000000000000000000000000000000000;;	type PodAdmitAttributes struct {
0000000000000000000000000000000000000000;;		// the pod to evaluate for admission
0000000000000000000000000000000000000000;;		Pod *v1.Pod
0000000000000000000000000000000000000000;;		// all pods bound to the kubelet excluding the pod being evaluated
0000000000000000000000000000000000000000;;		OtherPods []*v1.Pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodAdmitResult provides the result of a pod admission decision.
0000000000000000000000000000000000000000;;	type PodAdmitResult struct {
0000000000000000000000000000000000000000;;		// if true, the pod should be admitted.
0000000000000000000000000000000000000000;;		Admit bool
0000000000000000000000000000000000000000;;		// a brief single-word reason why the pod could not be admitted.
0000000000000000000000000000000000000000;;		Reason string
0000000000000000000000000000000000000000;;		// a brief message explaining why the pod could not be admitted.
0000000000000000000000000000000000000000;;		Message string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodAdmitHandler is notified during pod admission.
0000000000000000000000000000000000000000;;	type PodAdmitHandler interface {
0000000000000000000000000000000000000000;;		// Admit evaluates if a pod can be admitted.
0000000000000000000000000000000000000000;;		Admit(attrs *PodAdmitAttributes) PodAdmitResult
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodAdmitTarget maintains a list of handlers to invoke.
0000000000000000000000000000000000000000;;	type PodAdmitTarget interface {
0000000000000000000000000000000000000000;;		// AddPodAdmitHandler adds the specified handler.
0000000000000000000000000000000000000000;;		AddPodAdmitHandler(a PodAdmitHandler)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSyncLoopHandler is invoked during each sync loop iteration.
0000000000000000000000000000000000000000;;	type PodSyncLoopHandler interface {
0000000000000000000000000000000000000000;;		// ShouldSync returns true if the pod needs to be synced.
0000000000000000000000000000000000000000;;		// This operation must return immediately as its called for each pod.
0000000000000000000000000000000000000000;;		// The provided pod should never be modified.
0000000000000000000000000000000000000000;;		ShouldSync(pod *v1.Pod) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSyncLoopTarget maintains a list of handlers to pod sync loop.
0000000000000000000000000000000000000000;;	type PodSyncLoopTarget interface {
0000000000000000000000000000000000000000;;		// AddPodSyncLoopHandler adds the specified handler.
0000000000000000000000000000000000000000;;		AddPodSyncLoopHandler(a PodSyncLoopHandler)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShouldEvictResponse provides the result of a should evict request.
0000000000000000000000000000000000000000;;	type ShouldEvictResponse struct {
0000000000000000000000000000000000000000;;		// if true, the pod should be evicted.
0000000000000000000000000000000000000000;;		Evict bool
0000000000000000000000000000000000000000;;		// a brief CamelCase reason why the pod should be evicted.
0000000000000000000000000000000000000000;;		Reason string
0000000000000000000000000000000000000000;;		// a brief message why the pod should be evicted.
0000000000000000000000000000000000000000;;		Message string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSyncHandler is invoked during each sync pod operation.
0000000000000000000000000000000000000000;;	type PodSyncHandler interface {
0000000000000000000000000000000000000000;;		// ShouldEvict is invoked during each sync pod operation to determine
0000000000000000000000000000000000000000;;		// if the pod should be evicted from the kubelet.  If so, the pod status
0000000000000000000000000000000000000000;;		// is updated to mark its phase as failed with the provided reason and message,
0000000000000000000000000000000000000000;;		// and the pod is immediately killed.
0000000000000000000000000000000000000000;;		// This operation must return immediately as its called for each sync pod.
0000000000000000000000000000000000000000;;		// The provided pod should never be modified.
0000000000000000000000000000000000000000;;		ShouldEvict(pod *v1.Pod) ShouldEvictResponse
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSyncTarget maintains a list of handlers to pod sync.
0000000000000000000000000000000000000000;;	type PodSyncTarget interface {
0000000000000000000000000000000000000000;;		// AddPodSyncHandler adds the specified handler
0000000000000000000000000000000000000000;;		AddPodSyncHandler(a PodSyncHandler)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodLifecycleTarget groups a set of lifecycle interfaces for convenience.
0000000000000000000000000000000000000000;;	type PodLifecycleTarget interface {
0000000000000000000000000000000000000000;;		PodAdmitTarget
0000000000000000000000000000000000000000;;		PodSyncLoopTarget
0000000000000000000000000000000000000000;;		PodSyncTarget
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodAdmitHandlers maintains a list of handlers to pod admission.
0000000000000000000000000000000000000000;;	type PodAdmitHandlers []PodAdmitHandler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddPodAdmitHandler adds the specified observer.
0000000000000000000000000000000000000000;;	func (handlers *PodAdmitHandlers) AddPodAdmitHandler(a PodAdmitHandler) {
0000000000000000000000000000000000000000;;		*handlers = append(*handlers, a)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSyncLoopHandlers maintains a list of handlers to pod sync loop.
0000000000000000000000000000000000000000;;	type PodSyncLoopHandlers []PodSyncLoopHandler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddPodSyncLoopHandler adds the specified observer.
0000000000000000000000000000000000000000;;	func (handlers *PodSyncLoopHandlers) AddPodSyncLoopHandler(a PodSyncLoopHandler) {
0000000000000000000000000000000000000000;;		*handlers = append(*handlers, a)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodSyncHandlers maintains a list of handlers to pod sync.
0000000000000000000000000000000000000000;;	type PodSyncHandlers []PodSyncHandler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddPodSyncHandler adds the specified handler.
0000000000000000000000000000000000000000;;	func (handlers *PodSyncHandlers) AddPodSyncHandler(a PodSyncHandler) {
0000000000000000000000000000000000000000;;		*handlers = append(*handlers, a)
0000000000000000000000000000000000000000;;	}
