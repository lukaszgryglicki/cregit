0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
35756f57ec4d9cfdda50766d26bd8314872ef2eb;pkg/kubelet/container/event.go[pkg/kubelet/container/event.go][pkg/kubelet/events/event.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package events
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		clientv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Container event reason list
0000000000000000000000000000000000000000;;		CreatedContainer        = "Created"
0000000000000000000000000000000000000000;;		StartedContainer        = "Started"
0000000000000000000000000000000000000000;;		FailedToCreateContainer = "Failed"
0000000000000000000000000000000000000000;;		FailedToStartContainer  = "Failed"
0000000000000000000000000000000000000000;;		KillingContainer        = "Killing"
0000000000000000000000000000000000000000;;		PreemptContainer        = "Preempting"
0000000000000000000000000000000000000000;;		BackOffStartContainer   = "BackOff"
0000000000000000000000000000000000000000;;		ExceededGracePeriod     = "ExceededGracePeriod"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Image event reason list
0000000000000000000000000000000000000000;;		PullingImage            = "Pulling"
0000000000000000000000000000000000000000;;		PulledImage             = "Pulled"
0000000000000000000000000000000000000000;;		FailedToPullImage       = "Failed"
0000000000000000000000000000000000000000;;		FailedToInspectImage    = "InspectFailed"
0000000000000000000000000000000000000000;;		ErrImageNeverPullPolicy = "ErrImageNeverPull"
0000000000000000000000000000000000000000;;		BackOffPullImage        = "BackOff"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// kubelet event reason list
0000000000000000000000000000000000000000;;		NodeReady                            = "NodeReady"
0000000000000000000000000000000000000000;;		NodeNotReady                         = "NodeNotReady"
0000000000000000000000000000000000000000;;		NodeSchedulable                      = "NodeSchedulable"
0000000000000000000000000000000000000000;;		NodeNotSchedulable                   = "NodeNotSchedulable"
0000000000000000000000000000000000000000;;		StartingKubelet                      = "Starting"
0000000000000000000000000000000000000000;;		KubeletSetupFailed                   = "KubeletSetupFailed"
0000000000000000000000000000000000000000;;		FailedAttachVolume                   = "FailedAttachVolume"
0000000000000000000000000000000000000000;;		FailedDetachVolume                   = "FailedDetachVolume"
0000000000000000000000000000000000000000;;		FailedMountVolume                    = "FailedMount"
0000000000000000000000000000000000000000;;		FailedUnMountVolume                  = "FailedUnMount"
0000000000000000000000000000000000000000;;		SuccessfulDetachVolume               = "SuccessfulDetachVolume"
0000000000000000000000000000000000000000;;		SuccessfulMountVolume                = "SuccessfulMountVolume"
0000000000000000000000000000000000000000;;		SuccessfulUnMountVolume              = "SuccessfulUnMountVolume"
0000000000000000000000000000000000000000;;		HostPortConflict                     = "HostPortConflict"
0000000000000000000000000000000000000000;;		NodeSelectorMismatching              = "NodeSelectorMismatching"
0000000000000000000000000000000000000000;;		InsufficientFreeCPU                  = "InsufficientFreeCPU"
0000000000000000000000000000000000000000;;		InsufficientFreeMemory               = "InsufficientFreeMemory"
0000000000000000000000000000000000000000;;		OutOfDisk                            = "OutOfDisk"
0000000000000000000000000000000000000000;;		HostNetworkNotSupported              = "HostNetworkNotSupported"
0000000000000000000000000000000000000000;;		UndefinedShaper                      = "NilShaper"
0000000000000000000000000000000000000000;;		NodeRebooted                         = "Rebooted"
0000000000000000000000000000000000000000;;		ContainerGCFailed                    = "ContainerGCFailed"
0000000000000000000000000000000000000000;;		ImageGCFailed                        = "ImageGCFailed"
0000000000000000000000000000000000000000;;		FailedNodeAllocatableEnforcement     = "FailedNodeAllocatableEnforcement"
0000000000000000000000000000000000000000;;		SuccessfulNodeAllocatableEnforcement = "NodeAllocatableEnforced"
0000000000000000000000000000000000000000;;		UnsupportedMountOption               = "UnsupportedMountOption"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Image manager event reason list
0000000000000000000000000000000000000000;;		InvalidDiskCapacity = "InvalidDiskCapacity"
0000000000000000000000000000000000000000;;		FreeDiskSpaceFailed = "FreeDiskSpaceFailed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Probe event reason list
0000000000000000000000000000000000000000;;		ContainerUnhealthy = "Unhealthy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Pod worker event reason list
0000000000000000000000000000000000000000;;		FailedSync = "FailedSync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Config event reason list
0000000000000000000000000000000000000000;;		FailedValidation = "FailedValidation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Lifecycle hooks
0000000000000000000000000000000000000000;;		FailedPostStartHook   = "FailedPostStartHook"
0000000000000000000000000000000000000000;;		FailedPreStopHook     = "FailedPreStopHook"
0000000000000000000000000000000000000000;;		UnfinishedPreStopHook = "UnfinishedPreStopHook"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToObjectReference takes an old style object reference and converts it to a client-go one
0000000000000000000000000000000000000000;;	func ToObjectReference(ref *v1.ObjectReference) *clientv1.ObjectReference {
0000000000000000000000000000000000000000;;		if ref == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &clientv1.ObjectReference{
0000000000000000000000000000000000000000;;			Kind:            ref.Kind,
0000000000000000000000000000000000000000;;			Namespace:       ref.Namespace,
0000000000000000000000000000000000000000;;			Name:            ref.Name,
0000000000000000000000000000000000000000;;			UID:             ref.UID,
0000000000000000000000000000000000000000;;			APIVersion:      ref.APIVersion,
0000000000000000000000000000000000000000;;			ResourceVersion: ref.ResourceVersion,
0000000000000000000000000000000000000000;;			FieldPath:       ref.FieldPath,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
