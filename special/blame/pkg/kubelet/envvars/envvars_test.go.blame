0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c03c75daa5271286c496055e49df90f8cfdbcf2d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package envvars_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/envvars"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFromServices(t *testing.T) {
0000000000000000000000000000000000000000;;		sl := []*v1.Service{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "foo-bar"},
0000000000000000000000000000000000000000;;				Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;					Selector:  map[string]string{"bar": "baz"},
0000000000000000000000000000000000000000;;					ClusterIP: "1.2.3.4",
0000000000000000000000000000000000000000;;					Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;						{Port: 8080, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "abc-123"},
0000000000000000000000000000000000000000;;				Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;					Selector:  map[string]string{"bar": "baz"},
0000000000000000000000000000000000000000;;					ClusterIP: "5.6.7.8",
0000000000000000000000000000000000000000;;					Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;						{Name: "u-d-p", Port: 8081, Protocol: "UDP"},
0000000000000000000000000000000000000000;;						{Name: "t-c-p", Port: 8081, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "q-u-u-x"},
0000000000000000000000000000000000000000;;				Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;					Selector:  map[string]string{"bar": "baz"},
0000000000000000000000000000000000000000;;					ClusterIP: "9.8.7.6",
0000000000000000000000000000000000000000;;					Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;						{Port: 8082, Protocol: "TCP"},
0000000000000000000000000000000000000000;;						{Name: "8083", Port: 8083, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "svrc-clusterip-none"},
0000000000000000000000000000000000000000;;				Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;					Selector:  map[string]string{"bar": "baz"},
0000000000000000000000000000000000000000;;					ClusterIP: "None",
0000000000000000000000000000000000000000;;					Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;						{Port: 8082, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "svrc-clusterip-empty"},
0000000000000000000000000000000000000000;;				Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;					Selector:  map[string]string{"bar": "baz"},
0000000000000000000000000000000000000000;;					ClusterIP: "",
0000000000000000000000000000000000000000;;					Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;						{Port: 8082, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "super-ipv6"},
0000000000000000000000000000000000000000;;				Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;					Selector:  map[string]string{"bar": "baz"},
0000000000000000000000000000000000000000;;					ClusterIP: "2001:DB8::",
0000000000000000000000000000000000000000;;					Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;						{Name: "u-d-p", Port: 8084, Protocol: "UDP"},
0000000000000000000000000000000000000000;;						{Name: "t-c-p", Port: 8084, Protocol: "TCP"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		vars := envvars.FromServices(sl)
0000000000000000000000000000000000000000;;		expected := []v1.EnvVar{
0000000000000000000000000000000000000000;;			{Name: "FOO_BAR_SERVICE_HOST", Value: "1.2.3.4"},
0000000000000000000000000000000000000000;;			{Name: "FOO_BAR_SERVICE_PORT", Value: "8080"},
0000000000000000000000000000000000000000;;			{Name: "FOO_BAR_PORT", Value: "tcp://1.2.3.4:8080"},
0000000000000000000000000000000000000000;;			{Name: "FOO_BAR_PORT_8080_TCP", Value: "tcp://1.2.3.4:8080"},
0000000000000000000000000000000000000000;;			{Name: "FOO_BAR_PORT_8080_TCP_PROTO", Value: "tcp"},
0000000000000000000000000000000000000000;;			{Name: "FOO_BAR_PORT_8080_TCP_PORT", Value: "8080"},
0000000000000000000000000000000000000000;;			{Name: "FOO_BAR_PORT_8080_TCP_ADDR", Value: "1.2.3.4"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_SERVICE_HOST", Value: "5.6.7.8"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_SERVICE_PORT", Value: "8081"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_SERVICE_PORT_U_D_P", Value: "8081"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_SERVICE_PORT_T_C_P", Value: "8081"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT", Value: "udp://5.6.7.8:8081"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT_8081_UDP", Value: "udp://5.6.7.8:8081"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT_8081_UDP_PROTO", Value: "udp"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT_8081_UDP_PORT", Value: "8081"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT_8081_UDP_ADDR", Value: "5.6.7.8"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT_8081_TCP", Value: "tcp://5.6.7.8:8081"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT_8081_TCP_PROTO", Value: "tcp"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT_8081_TCP_PORT", Value: "8081"},
0000000000000000000000000000000000000000;;			{Name: "ABC_123_PORT_8081_TCP_ADDR", Value: "5.6.7.8"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_SERVICE_HOST", Value: "9.8.7.6"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_SERVICE_PORT", Value: "8082"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_SERVICE_PORT_8083", Value: "8083"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT", Value: "tcp://9.8.7.6:8082"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT_8082_TCP", Value: "tcp://9.8.7.6:8082"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT_8082_TCP_PROTO", Value: "tcp"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT_8082_TCP_PORT", Value: "8082"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT_8082_TCP_ADDR", Value: "9.8.7.6"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT_8083_TCP", Value: "tcp://9.8.7.6:8083"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT_8083_TCP_PROTO", Value: "tcp"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT_8083_TCP_PORT", Value: "8083"},
0000000000000000000000000000000000000000;;			{Name: "Q_U_U_X_PORT_8083_TCP_ADDR", Value: "9.8.7.6"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_SERVICE_HOST", Value: "2001:DB8::"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_SERVICE_PORT", Value: "8084"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_SERVICE_PORT_U_D_P", Value: "8084"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_SERVICE_PORT_T_C_P", Value: "8084"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT", Value: "udp://[2001:DB8::]:8084"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT_8084_UDP", Value: "udp://[2001:DB8::]:8084"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT_8084_UDP_PROTO", Value: "udp"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT_8084_UDP_PORT", Value: "8084"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT_8084_UDP_ADDR", Value: "2001:DB8::"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT_8084_TCP", Value: "tcp://[2001:DB8::]:8084"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT_8084_TCP_PROTO", Value: "tcp"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT_8084_TCP_PORT", Value: "8084"},
0000000000000000000000000000000000000000;;			{Name: "SUPER_IPV6_PORT_8084_TCP_ADDR", Value: "2001:DB8::"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(vars) != len(expected) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %d env vars, got: %+v", len(expected), vars)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range expected {
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(vars[i], expected[i]) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %#v, got %#v", vars[i], expected[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
