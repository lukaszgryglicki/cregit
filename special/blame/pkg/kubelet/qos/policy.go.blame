0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
fac416a30a84b2bc2cbb41881ca3672da7ee6e7d;pkg/kubelet/qos/memory_policy.go[pkg/kubelet/qos/memory_policy.go][pkg/kubelet/qos/policy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package qos
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		v1qos "k8s.io/kubernetes/pkg/api/v1/helper/qos"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PodInfraOOMAdj is very docker specific. For arbitrary runtime, it may not make
0000000000000000000000000000000000000000;;		// sense to set sandbox level oom score, e.g. a sandbox could only be a namespace
0000000000000000000000000000000000000000;;		// without a process.
0000000000000000000000000000000000000000;;		// TODO: Handle infra container oom score adj in a runtime agnostic way.
0000000000000000000000000000000000000000;;		PodInfraOOMAdj        int = -998
0000000000000000000000000000000000000000;;		KubeletOOMScoreAdj    int = -999
0000000000000000000000000000000000000000;;		DockerOOMScoreAdj     int = -999
0000000000000000000000000000000000000000;;		KubeProxyOOMScoreAdj  int = -999
0000000000000000000000000000000000000000;;		guaranteedOOMScoreAdj int = -998
0000000000000000000000000000000000000000;;		besteffortOOMScoreAdj int = 1000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetContainerOOMAdjust returns the amount by which the OOM score of all processes in the
0000000000000000000000000000000000000000;;	// container should be adjusted.
0000000000000000000000000000000000000000;;	// The OOM score of a process is the percentage of memory it consumes
0000000000000000000000000000000000000000;;	// multiplied by 10 (barring exceptional cases) + a configurable quantity which is between -1000
0000000000000000000000000000000000000000;;	// and 1000. Containers with higher OOM scores are killed if the system runs out of memory.
0000000000000000000000000000000000000000;;	// See https://lwn.net/Articles/391222/ for more information.
0000000000000000000000000000000000000000;;	func GetContainerOOMScoreAdjust(pod *v1.Pod, container *v1.Container, memoryCapacity int64) int {
0000000000000000000000000000000000000000;;		switch v1qos.GetPodQOS(pod) {
0000000000000000000000000000000000000000;;		case v1.PodQOSGuaranteed:
0000000000000000000000000000000000000000;;			// Guaranteed containers should be the last to get killed.
0000000000000000000000000000000000000000;;			return guaranteedOOMScoreAdj
0000000000000000000000000000000000000000;;		case v1.PodQOSBestEffort:
0000000000000000000000000000000000000000;;			return besteffortOOMScoreAdj
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Burstable containers are a middle tier, between Guaranteed and Best-Effort. Ideally,
0000000000000000000000000000000000000000;;		// we want to protect Burstable containers that consume less memory than requested.
0000000000000000000000000000000000000000;;		// The formula below is a heuristic. A container requesting for 10% of a system's
0000000000000000000000000000000000000000;;		// memory will have an OOM score adjust of 900. If a process in container Y
0000000000000000000000000000000000000000;;		// uses over 10% of memory, its OOM score will be 1000. The idea is that containers
0000000000000000000000000000000000000000;;		// which use more than their request will have an OOM score of 1000 and will be prime
0000000000000000000000000000000000000000;;		// targets for OOM kills.
0000000000000000000000000000000000000000;;		// Note that this is a heuristic, it won't work if a container has many small processes.
0000000000000000000000000000000000000000;;		memoryRequest := container.Resources.Requests.Memory().Value()
0000000000000000000000000000000000000000;;		oomScoreAdjust := 1000 - (1000*memoryRequest)/memoryCapacity
0000000000000000000000000000000000000000;;		// A guaranteed pod using 100% of memory can have an OOM score of 10. Ensure
0000000000000000000000000000000000000000;;		// that burstable pods have a higher OOM score adjustment.
0000000000000000000000000000000000000000;;		if int(oomScoreAdjust) < (1000 + guaranteedOOMScoreAdj) {
0000000000000000000000000000000000000000;;			return (1000 + guaranteedOOMScoreAdj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Give burstable pods a higher chance of survival over besteffort pods.
0000000000000000000000000000000000000000;;		if int(oomScoreAdjust) == besteffortOOMScoreAdj {
0000000000000000000000000000000000000000;;			return int(oomScoreAdjust - 1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(oomScoreAdjust)
0000000000000000000000000000000000000000;;	}
