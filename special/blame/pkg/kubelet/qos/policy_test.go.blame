0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
fac416a30a84b2bc2cbb41881ca3672da7ee6e7d;pkg/kubelet/qos/memory_policy_test.go[pkg/kubelet/qos/memory_policy_test.go][pkg/kubelet/qos/policy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package qos
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		standardMemoryAmount = 8000000000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		cpuLimit = v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceCPU): resource.MustParse("10"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		memoryLimitCPURequest = v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceCPU): resource.MustParse("0"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		zeroMemoryLimit = v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceMemory): resource.MustParse("0"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noRequestLimit = v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		equalRequestLimitCPUMemory = v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceCPU):    resource.MustParse("5m"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceCPU):    resource.MustParse("5m"),
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cpuUnlimitedMemoryLimitedWithRequests = v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceMemory): resource.MustParse(strconv.Itoa(standardMemoryAmount / 2)),
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceCPU):    resource.MustParse("5m"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Limits: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceMemory): resource.MustParse("10G"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requestNoLimit = v1.Pod{
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Containers: []v1.Container{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;							Requests: v1.ResourceList{
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceMemory): resource.MustParse(strconv.Itoa(standardMemoryAmount - 1)),
0000000000000000000000000000000000000000;;								v1.ResourceName(v1.ResourceCPU):    resource.MustParse("5m"),
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type oomTest struct {
0000000000000000000000000000000000000000;;		pod             *v1.Pod
0000000000000000000000000000000000000000;;		memoryCapacity  int64
0000000000000000000000000000000000000000;;		lowOOMScoreAdj  int // The max oom_score_adj score the container should be assigned.
0000000000000000000000000000000000000000;;		highOOMScoreAdj int // The min oom_score_adj score the container should be assigned.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetContainerOOMScoreAdjust(t *testing.T) {
0000000000000000000000000000000000000000;;		oomTests := []oomTest{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             &cpuLimit,
0000000000000000000000000000000000000000;;				memoryCapacity:  4000000000,
0000000000000000000000000000000000000000;;				lowOOMScoreAdj:  999,
0000000000000000000000000000000000000000;;				highOOMScoreAdj: 999,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             &memoryLimitCPURequest,
0000000000000000000000000000000000000000;;				memoryCapacity:  8000000000,
0000000000000000000000000000000000000000;;				lowOOMScoreAdj:  999,
0000000000000000000000000000000000000000;;				highOOMScoreAdj: 999,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             &zeroMemoryLimit,
0000000000000000000000000000000000000000;;				memoryCapacity:  7230457451,
0000000000000000000000000000000000000000;;				lowOOMScoreAdj:  1000,
0000000000000000000000000000000000000000;;				highOOMScoreAdj: 1000,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             &noRequestLimit,
0000000000000000000000000000000000000000;;				memoryCapacity:  4000000000,
0000000000000000000000000000000000000000;;				lowOOMScoreAdj:  1000,
0000000000000000000000000000000000000000;;				highOOMScoreAdj: 1000,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             &equalRequestLimitCPUMemory,
0000000000000000000000000000000000000000;;				memoryCapacity:  123456789,
0000000000000000000000000000000000000000;;				lowOOMScoreAdj:  -998,
0000000000000000000000000000000000000000;;				highOOMScoreAdj: -998,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             &cpuUnlimitedMemoryLimitedWithRequests,
0000000000000000000000000000000000000000;;				memoryCapacity:  standardMemoryAmount,
0000000000000000000000000000000000000000;;				lowOOMScoreAdj:  495,
0000000000000000000000000000000000000000;;				highOOMScoreAdj: 505,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				pod:             &requestNoLimit,
0000000000000000000000000000000000000000;;				memoryCapacity:  standardMemoryAmount,
0000000000000000000000000000000000000000;;				lowOOMScoreAdj:  2,
0000000000000000000000000000000000000000;;				highOOMScoreAdj: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range oomTests {
0000000000000000000000000000000000000000;;			oomScoreAdj := GetContainerOOMScoreAdjust(test.pod, &test.pod.Spec.Containers[0], test.memoryCapacity)
0000000000000000000000000000000000000000;;			if oomScoreAdj < test.lowOOMScoreAdj || oomScoreAdj > test.highOOMScoreAdj {
0000000000000000000000000000000000000000;;				t.Errorf("oom_score_adj should be between %d and %d, but was %d", test.lowOOMScoreAdj, test.highOOMScoreAdj, oomScoreAdj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
