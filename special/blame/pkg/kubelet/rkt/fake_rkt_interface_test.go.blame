0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
037e4f9dc0020835ed002f06e3d3c381009429b9;pkg/kubelet/rkt/fake_rkt_interface.go[pkg/kubelet/rkt/fake_rkt_interface.go][pkg/kubelet/rkt/fake_rkt_interface_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rkt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/go-systemd/dbus"
0000000000000000000000000000000000000000;;		rktapi "github.com/coreos/rkt/api/v1alpha"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fakeRktInterface mocks the rktapi.PublicAPIClient interface for testing purpose.
0000000000000000000000000000000000000000;;	type fakeRktInterface struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;		info       rktapi.Info
0000000000000000000000000000000000000000;;		images     []*rktapi.Image
0000000000000000000000000000000000000000;;		podFilters []*rktapi.PodFilter
0000000000000000000000000000000000000000;;		pods       []*rktapi.Pod
0000000000000000000000000000000000000000;;		called     []string
0000000000000000000000000000000000000000;;		err        error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeRktInterface() *fakeRktInterface {
0000000000000000000000000000000000000000;;		return &fakeRktInterface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktInterface) CleanCalls() {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		f.called = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktInterface) GetInfo(ctx context.Context, in *rktapi.GetInfoRequest, opts ...grpc.CallOption) (*rktapi.GetInfoResponse, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.called = append(f.called, "GetInfo")
0000000000000000000000000000000000000000;;		return &rktapi.GetInfoResponse{Info: &f.info}, f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktInterface) ListPods(ctx context.Context, in *rktapi.ListPodsRequest, opts ...grpc.CallOption) (*rktapi.ListPodsResponse, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.called = append(f.called, "ListPods")
0000000000000000000000000000000000000000;;		f.podFilters = in.Filters
0000000000000000000000000000000000000000;;		return &rktapi.ListPodsResponse{Pods: f.pods}, f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktInterface) InspectPod(ctx context.Context, in *rktapi.InspectPodRequest, opts ...grpc.CallOption) (*rktapi.InspectPodResponse, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.called = append(f.called, "InspectPod")
0000000000000000000000000000000000000000;;		for _, pod := range f.pods {
0000000000000000000000000000000000000000;;			if pod.Id == in.Id {
0000000000000000000000000000000000000000;;				return &rktapi.InspectPodResponse{Pod: pod}, f.err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &rktapi.InspectPodResponse{}, fmt.Errorf("pod %q not found", in.Id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktInterface) ListImages(ctx context.Context, in *rktapi.ListImagesRequest, opts ...grpc.CallOption) (*rktapi.ListImagesResponse, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.called = append(f.called, "ListImages")
0000000000000000000000000000000000000000;;		return &rktapi.ListImagesResponse{Images: f.images}, f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktInterface) InspectImage(ctx context.Context, in *rktapi.InspectImageRequest, opts ...grpc.CallOption) (*rktapi.InspectImageResponse, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktInterface) ListenEvents(ctx context.Context, in *rktapi.ListenEventsRequest, opts ...grpc.CallOption) (rktapi.PublicAPI_ListenEventsClient, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktInterface) GetLogs(ctx context.Context, in *rktapi.GetLogsRequest, opts ...grpc.CallOption) (rktapi.PublicAPI_GetLogsClient, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fakeSystemd mocks the systemdInterface for testing purpose.
0000000000000000000000000000000000000000;;	// TODO(yifan): Remove this once we have a package for launching rkt pods.
0000000000000000000000000000000000000000;;	// See https://github.com/coreos/rkt/issues/1769.
0000000000000000000000000000000000000000;;	type fakeSystemd struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;		called           []string
0000000000000000000000000000000000000000;;		resetFailedUnits []string
0000000000000000000000000000000000000000;;		version          string
0000000000000000000000000000000000000000;;		err              error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeSystemd() *fakeSystemd {
0000000000000000000000000000000000000000;;		return &fakeSystemd{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSystemd) CleanCalls() {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		f.called = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSystemd) Version() (systemdVersion, error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.called = append(f.called, "Version")
0000000000000000000000000000000000000000;;		v, _ := strconv.Atoi(f.version)
0000000000000000000000000000000000000000;;		return systemdVersion(v), f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSystemd) ListUnits() ([]dbus.UnitStatus, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSystemd) StopUnit(name string, mode string, ch chan<- string) (int, error) {
0000000000000000000000000000000000000000;;		return 0, fmt.Errorf("Not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSystemd) RestartUnit(name string, mode string, ch chan<- string) (int, error) {
0000000000000000000000000000000000000000;;		return 0, fmt.Errorf("Not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeSystemd) ResetFailedUnit(name string) error {
0000000000000000000000000000000000000000;;		f.called = append(f.called, "ResetFailedUnit")
0000000000000000000000000000000000000000;;		f.resetFailedUnits = append(f.resetFailedUnits, name)
0000000000000000000000000000000000000000;;		return f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeRktCli struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;		cmds   []string
0000000000000000000000000000000000000000;;		result []string
0000000000000000000000000000000000000000;;		err    error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakeRktCli() *fakeRktCli {
0000000000000000000000000000000000000000;;		return &fakeRktCli{
0000000000000000000000000000000000000000;;			cmds:   []string{},
0000000000000000000000000000000000000000;;			result: []string{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktCli) RunCommand(config *Config, args ...string) (result []string, err error) {
0000000000000000000000000000000000000000;;		f.Lock()
0000000000000000000000000000000000000000;;		defer f.Unlock()
0000000000000000000000000000000000000000;;		cmd := append([]string{"rkt"}, args...)
0000000000000000000000000000000000000000;;		f.cmds = append(f.cmds, strings.Join(cmd, " "))
0000000000000000000000000000000000000000;;		return f.result, f.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeRktCli) Reset() {
0000000000000000000000000000000000000000;;		f.cmds = []string{}
0000000000000000000000000000000000000000;;		f.result = []string{}
0000000000000000000000000000000000000000;;		f.err = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakePodGetter struct {
0000000000000000000000000000000000000000;;		pods map[types.UID]*v1.Pod
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newFakePodGetter() *fakePodGetter {
0000000000000000000000000000000000000000;;		return &fakePodGetter{pods: make(map[types.UID]*v1.Pod)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f fakePodGetter) GetPodByUID(uid types.UID) (*v1.Pod, bool) {
0000000000000000000000000000000000000000;;		p, found := f.pods[uid]
0000000000000000000000000000000000000000;;		return p, found
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeUnitGetter struct {
0000000000000000000000000000000000000000;;		networkNamespace kubecontainer.ContainerID
0000000000000000000000000000000000000000;;		callServices     []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newfakeUnitGetter() *fakeUnitGetter {
0000000000000000000000000000000000000000;;		return &fakeUnitGetter{
0000000000000000000000000000000000000000;;			networkNamespace: kubecontainer.ContainerID{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeUnitGetter) getNetworkNamespace(uid kubetypes.UID, latestPod *rktapi.Pod) (kubecontainer.ContainerID, error) {
0000000000000000000000000000000000000000;;		return kubecontainer.ContainerID{ID: "42"}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeUnitGetter) getKubernetesDirective(serviceFilePath string) (podServiceDirective, error) {
0000000000000000000000000000000000000000;;		podService := podServiceDirective{
0000000000000000000000000000000000000000;;			id:               "fake",
0000000000000000000000000000000000000000;;			name:             "fake",
0000000000000000000000000000000000000000;;			namespace:        "fake",
0000000000000000000000000000000000000000;;			hostNetwork:      true,
0000000000000000000000000000000000000000;;			networkNamespace: kubecontainer.ContainerID{ID: "42"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return podService, nil
0000000000000000000000000000000000000000;;	}
