0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
974eaa39f875c0ea70c00c9b661e4d27757911d8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rkt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// containerID defines the ID of rkt containers, it will
0000000000000000000000000000000000000000;;	// be returned to kubelet, and kubelet will use this for
0000000000000000000000000000000000000000;;	// container level operations.
0000000000000000000000000000000000000000;;	type containerID struct {
0000000000000000000000000000000000000000;;		uuid    string // rkt uuid of the pod.
0000000000000000000000000000000000000000;;		appName string // Name of the app in that pod.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// buildContainerID constructs the containers's ID using containerID,
0000000000000000000000000000000000000000;;	// which consists of the pod uuid and the container name.
0000000000000000000000000000000000000000;;	// The result can be used to uniquely identify a container.
0000000000000000000000000000000000000000;;	func buildContainerID(c *containerID) kubecontainer.ContainerID {
0000000000000000000000000000000000000000;;		return kubecontainer.ContainerID{
0000000000000000000000000000000000000000;;			Type: RktType,
0000000000000000000000000000000000000000;;			ID:   fmt.Sprintf("%s:%s", c.uuid, c.appName),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseContainerID parses the containerID into pod uuid and the container name. The
0000000000000000000000000000000000000000;;	// results can be used to get more information of the container.
0000000000000000000000000000000000000000;;	func parseContainerID(id kubecontainer.ContainerID) (*containerID, error) {
0000000000000000000000000000000000000000;;		tuples := strings.Split(id.ID, ":")
0000000000000000000000000000000000000000;;		if len(tuples) != 2 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("rkt: cannot parse container ID for: %q, required format is [UUID:APPNAME]", id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &containerID{
0000000000000000000000000000000000000000;;			uuid:    tuples[0],
0000000000000000000000000000000000000000;;			appName: tuples[1],
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
