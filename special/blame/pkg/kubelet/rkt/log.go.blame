0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a4ca18fb1b200af6aafa45bb2057c6b55997c141;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rkt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rktapi "github.com/coreos/rkt/api/v1alpha"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/util/format"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		journalTimestampLayout = "2006-01-02 15:04:05 -0700 MST"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// processLines write the lines into stdout in the required format.
0000000000000000000000000000000000000000;;	func processLines(lines []string, logOptions *v1.PodLogOptions, stdout, stderr io.Writer) {
0000000000000000000000000000000000000000;;		msgKey := "MESSAGE="
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, line := range lines {
0000000000000000000000000000000000000000;;			msgStart := strings.Index(line, msgKey)
0000000000000000000000000000000000000000;;			if msgStart < 0 {
0000000000000000000000000000000000000000;;				glog.Warningf("rkt: Invalid log line %q, missing %q", line, msgKey)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			tss := strings.TrimSpace(line[:msgStart])
0000000000000000000000000000000000000000;;			msg := strings.TrimPrefix(line[msgStart:], msgKey)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			t, err := time.Parse(journalTimestampLayout, tss)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Warningf("rkt: Failed to parse the timestamp %q: %v", tss, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var result string
0000000000000000000000000000000000000000;;			if logOptions.Timestamps {
0000000000000000000000000000000000000000;;				result = fmt.Sprintf("%s %s\n", t.Format(time.RFC3339), msg)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				result = fmt.Sprintf("%s\n", msg)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := io.WriteString(stdout, result); err != nil {
0000000000000000000000000000000000000000;;				glog.Warningf("rkt: Cannot write log line %q to output: %v", result, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetContainerLogs uses rkt's GetLogs API to get the logs of the container.
0000000000000000000000000000000000000000;;	// By default, it returns a snapshot of the container log. Set |follow| to true to
0000000000000000000000000000000000000000;;	// stream the log. Set |follow| to false and specify the number of lines (e.g.
0000000000000000000000000000000000000000;;	// "100" or "all") to tail the log.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODO(yifan): This doesn't work with lkvm stage1 yet.
0000000000000000000000000000000000000000;;	func (r *Runtime) GetContainerLogs(pod *v1.Pod, containerID kubecontainer.ContainerID, logOptions *v1.PodLogOptions, stdout, stderr io.Writer) error {
0000000000000000000000000000000000000000;;		id, err := parseContainerID(containerID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var since int64
0000000000000000000000000000000000000000;;		if logOptions.SinceSeconds != nil {
0000000000000000000000000000000000000000;;			t := metav1.Now().Add(-time.Duration(*logOptions.SinceSeconds) * time.Second)
0000000000000000000000000000000000000000;;			since = t.Unix()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if logOptions.SinceTime != nil {
0000000000000000000000000000000000000000;;			since = logOptions.SinceTime.Unix()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		getLogsRequest := &rktapi.GetLogsRequest{
0000000000000000000000000000000000000000;;			PodId:     id.uuid,
0000000000000000000000000000000000000000;;			AppName:   id.appName,
0000000000000000000000000000000000000000;;			Follow:    logOptions.Follow,
0000000000000000000000000000000000000000;;			SinceTime: since,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if logOptions.TailLines != nil {
0000000000000000000000000000000000000000;;			getLogsRequest.Lines = int32(*logOptions.TailLines)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stream, err := r.apisvc.GetLogs(context.Background(), getLogsRequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("rkt: Failed to create log stream for pod %q: %v", format.Pod(pod), err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			log, err := stream.Recv()
0000000000000000000000000000000000000000;;			if err == io.EOF {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("rkt: Failed to receive log for pod %q: %v", format.Pod(pod), err)
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			processLines(log.Lines, logOptions, stdout, stderr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
