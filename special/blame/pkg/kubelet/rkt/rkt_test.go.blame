0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
037e4f9dc0020835ed002f06e3d3c381009429b9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rkt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		appcschema "github.com/appc/spec/schema"
0000000000000000000000000000000000000000;;		appctypes "github.com/appc/spec/schema/types"
0000000000000000000000000000000000000000;;		"github.com/coreos/go-systemd/unit"
0000000000000000000000000000000000000000;;		rktapi "github.com/coreos/rkt/api/v1alpha"
0000000000000000000000000000000000000000;;		"github.com/golang/mock/gomock"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		utiltesting "k8s.io/client-go/util/testing"
0000000000000000000000000000000000000000;;		kubecontainer "k8s.io/kubernetes/pkg/kubelet/container"
0000000000000000000000000000000000000000;;		containertesting "k8s.io/kubernetes/pkg/kubelet/container/testing"
0000000000000000000000000000000000000000;;		kubetesting "k8s.io/kubernetes/pkg/kubelet/container/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/lifecycle"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/network"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/network/kubenet"
0000000000000000000000000000000000000000;;		nettest "k8s.io/kubernetes/pkg/kubelet/network/testing"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/kubelet/types"
0000000000000000000000000000000000000000;;		utilexec "k8s.io/kubernetes/pkg/util/exec"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mustMarshalPodManifest(man *appcschema.PodManifest) []byte {
0000000000000000000000000000000000000000;;		manblob, err := json.Marshal(man)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return manblob
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mustMarshalImageManifest(man *appcschema.ImageManifest) []byte {
0000000000000000000000000000000000000000;;		manblob, err := json.Marshal(man)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return manblob
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mustRktHash(hash string) *appctypes.Hash {
0000000000000000000000000000000000000000;;		h, err := appctypes.NewHash(hash)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeRktPod(rktPodState rktapi.PodState,
0000000000000000000000000000000000000000;;		rktPodID, podUID, podName, podNamespace string, podCreatedAt, podStartedAt int64,
0000000000000000000000000000000000000000;;		podRestartCount string, appNames, imgIDs, imgNames,
0000000000000000000000000000000000000000;;		containerHashes []string, appStates []rktapi.AppState,
0000000000000000000000000000000000000000;;		exitcodes []int32, ips map[string]string) *rktapi.Pod {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		podManifest := &appcschema.PodManifest{
0000000000000000000000000000000000000000;;			ACKind:    appcschema.PodManifestKind,
0000000000000000000000000000000000000000;;			ACVersion: appcschema.AppContainerVersion,
0000000000000000000000000000000000000000;;			Annotations: appctypes.Annotations{
0000000000000000000000000000000000000000;;				appctypes.Annotation{
0000000000000000000000000000000000000000;;					Name:  *appctypes.MustACIdentifier(k8sRktKubeletAnno),
0000000000000000000000000000000000000000;;					Value: k8sRktKubeletAnnoValue,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				appctypes.Annotation{
0000000000000000000000000000000000000000;;					Name:  *appctypes.MustACIdentifier(types.KubernetesPodUIDLabel),
0000000000000000000000000000000000000000;;					Value: podUID,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				appctypes.Annotation{
0000000000000000000000000000000000000000;;					Name:  *appctypes.MustACIdentifier(types.KubernetesPodNameLabel),
0000000000000000000000000000000000000000;;					Value: podName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				appctypes.Annotation{
0000000000000000000000000000000000000000;;					Name:  *appctypes.MustACIdentifier(types.KubernetesPodNamespaceLabel),
0000000000000000000000000000000000000000;;					Value: podNamespace,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				appctypes.Annotation{
0000000000000000000000000000000000000000;;					Name:  *appctypes.MustACIdentifier(k8sRktRestartCountAnno),
0000000000000000000000000000000000000000;;					Value: podRestartCount,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		appNum := len(appNames)
0000000000000000000000000000000000000000;;		if appNum != len(imgNames) ||
0000000000000000000000000000000000000000;;			appNum != len(imgIDs) ||
0000000000000000000000000000000000000000;;			appNum != len(containerHashes) ||
0000000000000000000000000000000000000000;;			appNum != len(appStates) {
0000000000000000000000000000000000000000;;			panic("inconsistent app number")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps := make([]*rktapi.App, appNum)
0000000000000000000000000000000000000000;;		for i := range appNames {
0000000000000000000000000000000000000000;;			apps[i] = &rktapi.App{
0000000000000000000000000000000000000000;;				Name:  appNames[i],
0000000000000000000000000000000000000000;;				State: appStates[i],
0000000000000000000000000000000000000000;;				Image: &rktapi.Image{
0000000000000000000000000000000000000000;;					Id:      imgIDs[i],
0000000000000000000000000000000000000000;;					Name:    imgNames[i],
0000000000000000000000000000000000000000;;					Version: "latest",
0000000000000000000000000000000000000000;;					Manifest: mustMarshalImageManifest(
0000000000000000000000000000000000000000;;						&appcschema.ImageManifest{
0000000000000000000000000000000000000000;;							ACKind:    appcschema.ImageManifestKind,
0000000000000000000000000000000000000000;;							ACVersion: appcschema.AppContainerVersion,
0000000000000000000000000000000000000000;;							Name:      *appctypes.MustACIdentifier(imgNames[i]),
0000000000000000000000000000000000000000;;							Annotations: appctypes.Annotations{
0000000000000000000000000000000000000000;;								appctypes.Annotation{
0000000000000000000000000000000000000000;;									Name:  *appctypes.MustACIdentifier(k8sRktContainerHashAnno),
0000000000000000000000000000000000000000;;									Value: containerHashes[i],
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExitCode: exitcodes[i],
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			podManifest.Apps = append(podManifest.Apps, appcschema.RuntimeApp{
0000000000000000000000000000000000000000;;				Name:  *appctypes.MustACName(appNames[i]),
0000000000000000000000000000000000000000;;				Image: appcschema.RuntimeImage{ID: *mustRktHash("sha512-foo")},
0000000000000000000000000000000000000000;;				Annotations: appctypes.Annotations{
0000000000000000000000000000000000000000;;					appctypes.Annotation{
0000000000000000000000000000000000000000;;						Name:  *appctypes.MustACIdentifier(k8sRktContainerHashAnno),
0000000000000000000000000000000000000000;;						Value: containerHashes[i],
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var networks []*rktapi.Network
0000000000000000000000000000000000000000;;		for name, ip := range ips {
0000000000000000000000000000000000000000;;			networks = append(networks, &rktapi.Network{Name: name, Ipv4: ip})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &rktapi.Pod{
0000000000000000000000000000000000000000;;			Id:        rktPodID,
0000000000000000000000000000000000000000;;			State:     rktPodState,
0000000000000000000000000000000000000000;;			Apps:      apps,
0000000000000000000000000000000000000000;;			Manifest:  mustMarshalPodManifest(podManifest),
0000000000000000000000000000000000000000;;			StartedAt: podStartedAt,
0000000000000000000000000000000000000000;;			CreatedAt: podCreatedAt,
0000000000000000000000000000000000000000;;			Networks:  networks,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCheckVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		fs := newFakeSystemd()
0000000000000000000000000000000000000000;;		r := &Runtime{apisvc: fr, systemd: fs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fr.info = rktapi.Info{
0000000000000000000000000000000000000000;;			RktVersion:  "1.2.3+git",
0000000000000000000000000000000000000000;;			AppcVersion: "1.2.4+git",
0000000000000000000000000000000000000000;;			ApiVersion:  "1.2.6-alpha",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fs.version = "100"
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			minimumRktBinVersion  string
0000000000000000000000000000000000000000;;			minimumRktApiVersion  string
0000000000000000000000000000000000000000;;			minimumSystemdVersion string
0000000000000000000000000000000000000000;;			err                   error
0000000000000000000000000000000000000000;;			calledGetInfo         bool
0000000000000000000000000000000000000000;;			calledSystemVersion   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Good versions.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"1.2.3",
0000000000000000000000000000000000000000;;				"1.2.5",
0000000000000000000000000000000000000000;;				"99",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Good versions.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"1.2.3+git",
0000000000000000000000000000000000000000;;				"1.2.6-alpha",
0000000000000000000000000000000000000000;;				"100",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Requires greater binary version.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"1.2.4",
0000000000000000000000000000000000000000;;				"1.2.6-alpha",
0000000000000000000000000000000000000000;;				"100",
0000000000000000000000000000000000000000;;				fmt.Errorf("rkt: binary version is too old(%v), requires at least %v", fr.info.RktVersion, "1.2.4"),
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Requires greater API version.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"1.2.3",
0000000000000000000000000000000000000000;;				"1.2.6",
0000000000000000000000000000000000000000;;				"100",
0000000000000000000000000000000000000000;;				fmt.Errorf("rkt: API version is too old(%v), requires at least %v", fr.info.ApiVersion, "1.2.6"),
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Requires greater API version.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"1.2.3",
0000000000000000000000000000000000000000;;				"1.2.7",
0000000000000000000000000000000000000000;;				"100",
0000000000000000000000000000000000000000;;				fmt.Errorf("rkt: API version is too old(%v), requires at least %v", fr.info.ApiVersion, "1.2.7"),
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Requires greater systemd version.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"1.2.3",
0000000000000000000000000000000000000000;;				"1.2.7",
0000000000000000000000000000000000000000;;				"101",
0000000000000000000000000000000000000000;;				fmt.Errorf("rkt: systemd version(%v) is too old, requires at least %v", fs.version, "101"),
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			testCaseHint := fmt.Sprintf("test case #%d", i)
0000000000000000000000000000000000000000;;			err := r.checkVersion(tt.minimumRktBinVersion, tt.minimumRktApiVersion, tt.minimumSystemdVersion)
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.err, err, testCaseHint)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tt.calledGetInfo {
0000000000000000000000000000000000000000;;				assert.Equal(t, fr.called, []string{"GetInfo"}, testCaseHint)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tt.calledSystemVersion {
0000000000000000000000000000000000000000;;				assert.Equal(t, fs.called, []string{"Version"}, testCaseHint)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				assert.Equal(t, fr.info.RktVersion, r.versions.binVersion.String(), testCaseHint)
0000000000000000000000000000000000000000;;				assert.Equal(t, fr.info.ApiVersion, r.versions.apiVersion.String(), testCaseHint)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fr.CleanCalls()
0000000000000000000000000000000000000000;;			fs.CleanCalls()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestListImages(t *testing.T) {
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		fs := newFakeSystemd()
0000000000000000000000000000000000000000;;		r := &Runtime{apisvc: fr, systemd: fs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			images   []*rktapi.Image
0000000000000000000000000000000000000000;;			expected []kubecontainer.Image
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{nil, []kubecontainer.Image{}},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]*rktapi.Image{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:      "sha512-a2fb8f390702",
0000000000000000000000000000000000000000;;						Name:    "quay.io/coreos/alpine-sh",
0000000000000000000000000000000000000000;;						Version: "latest",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]kubecontainer.Image{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ID:       "sha512-a2fb8f390702",
0000000000000000000000000000000000000000;;						RepoTags: []string{"quay.io/coreos/alpine-sh:latest"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]*rktapi.Image{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:      "sha512-a2fb8f390702",
0000000000000000000000000000000000000000;;						Name:    "quay.io/coreos/alpine-sh",
0000000000000000000000000000000000000000;;						Version: "latest",
0000000000000000000000000000000000000000;;						Size:    400,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:      "sha512-c6b597f42816",
0000000000000000000000000000000000000000;;						Name:    "coreos.com/rkt/stage1-coreos",
0000000000000000000000000000000000000000;;						Version: "0.10.0",
0000000000000000000000000000000000000000;;						Size:    400,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]kubecontainer.Image{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ID:       "sha512-a2fb8f390702",
0000000000000000000000000000000000000000;;						RepoTags: []string{"quay.io/coreos/alpine-sh:latest"},
0000000000000000000000000000000000000000;;						Size:     400,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ID:       "sha512-c6b597f42816",
0000000000000000000000000000000000000000;;						RepoTags: []string{"coreos.com/rkt/stage1-coreos:0.10.0"},
0000000000000000000000000000000000000000;;						Size:     400,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]*rktapi.Image{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:      "sha512-a2fb8f390702",
0000000000000000000000000000000000000000;;						Name:    "quay.io_443/coreos/alpine-sh",
0000000000000000000000000000000000000000;;						Version: "latest",
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   appcDockerRegistryURL,
0000000000000000000000000000000000000000;;								Value: "quay.io:443",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   appcDockerRepository,
0000000000000000000000000000000000000000;;								Value: "coreos/alpine-sh",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Size: 400,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]kubecontainer.Image{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ID:       "sha512-a2fb8f390702",
0000000000000000000000000000000000000000;;						RepoTags: []string{"quay.io:443/coreos/alpine-sh:latest"},
0000000000000000000000000000000000000000;;						Size:     400,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			fr.images = tt.images
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			images, err := r.ListImages()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.expected, images)
0000000000000000000000000000000000000000;;			assert.Equal(t, fr.called, []string{"ListImages"}, fmt.Sprintf("test case %d: unexpected called list", i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fr.CleanCalls()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPods(t *testing.T) {
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		fs := newFakeSystemd()
0000000000000000000000000000000000000000;;		r := &Runtime{apisvc: fr, systemd: fs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := func(seconds int64) int64 {
0000000000000000000000000000000000000000;;			return seconds * 1e9
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pods   []*rktapi.Pod
0000000000000000000000000000000000000000;;			result []*kubecontainer.Pod
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// No pods.
0000000000000000000000000000000000000000;;			{},
0000000000000000000000000000000000000000;;			// One pod.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]*rktapi.Pod{
0000000000000000000000000000000000000000;;					makeRktPod(rktapi.PodState_POD_STATE_RUNNING,
0000000000000000000000000000000000000000;;						"uuid-4002", "42", "guestbook", "default",
0000000000000000000000000000000000000000;;						ns(10), ns(10), "7",
0000000000000000000000000000000000000000;;						[]string{"app-1", "app-2"},
0000000000000000000000000000000000000000;;						[]string{"img-id-1", "img-id-2"},
0000000000000000000000000000000000000000;;						[]string{"img-name-1", "img-name-2"},
0000000000000000000000000000000000000000;;						[]string{"1001", "1002"},
0000000000000000000000000000000000000000;;						[]rktapi.AppState{rktapi.AppState_APP_STATE_RUNNING, rktapi.AppState_APP_STATE_EXITED},
0000000000000000000000000000000000000000;;						[]int32{0, 0},
0000000000000000000000000000000000000000;;						nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*kubecontainer.Pod{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ID:        "42",
0000000000000000000000000000000000000000;;						Name:      "guestbook",
0000000000000000000000000000000000000000;;						Namespace: "default",
0000000000000000000000000000000000000000;;						Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ID:      kubecontainer.BuildContainerID("rkt", "uuid-4002:app-1"),
0000000000000000000000000000000000000000;;								Name:    "app-1",
0000000000000000000000000000000000000000;;								Image:   "img-name-1:latest",
0000000000000000000000000000000000000000;;								ImageID: "img-id-1",
0000000000000000000000000000000000000000;;								Hash:    1001,
0000000000000000000000000000000000000000;;								State:   "running",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ID:      kubecontainer.BuildContainerID("rkt", "uuid-4002:app-2"),
0000000000000000000000000000000000000000;;								Name:    "app-2",
0000000000000000000000000000000000000000;;								Image:   "img-name-2:latest",
0000000000000000000000000000000000000000;;								ImageID: "img-id-2",
0000000000000000000000000000000000000000;;								Hash:    1002,
0000000000000000000000000000000000000000;;								State:   "exited",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Multiple pods.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]*rktapi.Pod{
0000000000000000000000000000000000000000;;					makeRktPod(rktapi.PodState_POD_STATE_RUNNING,
0000000000000000000000000000000000000000;;						"uuid-4002", "42", "guestbook", "default",
0000000000000000000000000000000000000000;;						ns(10), ns(20), "7",
0000000000000000000000000000000000000000;;						[]string{"app-1", "app-2"},
0000000000000000000000000000000000000000;;						[]string{"img-id-1", "img-id-2"},
0000000000000000000000000000000000000000;;						[]string{"img-name-1", "img-name-2"},
0000000000000000000000000000000000000000;;						[]string{"1001", "1002"},
0000000000000000000000000000000000000000;;						[]rktapi.AppState{rktapi.AppState_APP_STATE_RUNNING, rktapi.AppState_APP_STATE_EXITED},
0000000000000000000000000000000000000000;;						[]int32{0, 0},
0000000000000000000000000000000000000000;;						nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					makeRktPod(rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						"uuid-4003", "43", "guestbook", "default",
0000000000000000000000000000000000000000;;						ns(30), ns(40), "7",
0000000000000000000000000000000000000000;;						[]string{"app-11", "app-22"},
0000000000000000000000000000000000000000;;						[]string{"img-id-11", "img-id-22"},
0000000000000000000000000000000000000000;;						[]string{"img-name-11", "img-name-22"},
0000000000000000000000000000000000000000;;						[]string{"10011", "10022"},
0000000000000000000000000000000000000000;;						[]rktapi.AppState{rktapi.AppState_APP_STATE_EXITED, rktapi.AppState_APP_STATE_EXITED},
0000000000000000000000000000000000000000;;						[]int32{0, 0},
0000000000000000000000000000000000000000;;						nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					makeRktPod(rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						"uuid-4004", "43", "guestbook", "default",
0000000000000000000000000000000000000000;;						ns(50), ns(60), "8",
0000000000000000000000000000000000000000;;						[]string{"app-11", "app-22"},
0000000000000000000000000000000000000000;;						[]string{"img-id-11", "img-id-22"},
0000000000000000000000000000000000000000;;						[]string{"img-name-11", "img-name-22"},
0000000000000000000000000000000000000000;;						[]string{"10011", "10022"},
0000000000000000000000000000000000000000;;						[]rktapi.AppState{rktapi.AppState_APP_STATE_RUNNING, rktapi.AppState_APP_STATE_RUNNING},
0000000000000000000000000000000000000000;;						[]int32{0, 0},
0000000000000000000000000000000000000000;;						nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*kubecontainer.Pod{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ID:        "42",
0000000000000000000000000000000000000000;;						Name:      "guestbook",
0000000000000000000000000000000000000000;;						Namespace: "default",
0000000000000000000000000000000000000000;;						Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ID:      kubecontainer.BuildContainerID("rkt", "uuid-4002:app-1"),
0000000000000000000000000000000000000000;;								Name:    "app-1",
0000000000000000000000000000000000000000;;								Image:   "img-name-1:latest",
0000000000000000000000000000000000000000;;								ImageID: "img-id-1",
0000000000000000000000000000000000000000;;								Hash:    1001,
0000000000000000000000000000000000000000;;								State:   "running",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ID:      kubecontainer.BuildContainerID("rkt", "uuid-4002:app-2"),
0000000000000000000000000000000000000000;;								Name:    "app-2",
0000000000000000000000000000000000000000;;								Image:   "img-name-2:latest",
0000000000000000000000000000000000000000;;								ImageID: "img-id-2",
0000000000000000000000000000000000000000;;								Hash:    1002,
0000000000000000000000000000000000000000;;								State:   "exited",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ID:        "43",
0000000000000000000000000000000000000000;;						Name:      "guestbook",
0000000000000000000000000000000000000000;;						Namespace: "default",
0000000000000000000000000000000000000000;;						Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ID:      kubecontainer.BuildContainerID("rkt", "uuid-4003:app-11"),
0000000000000000000000000000000000000000;;								Name:    "app-11",
0000000000000000000000000000000000000000;;								Image:   "img-name-11:latest",
0000000000000000000000000000000000000000;;								ImageID: "img-id-11",
0000000000000000000000000000000000000000;;								Hash:    10011,
0000000000000000000000000000000000000000;;								State:   "exited",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ID:      kubecontainer.BuildContainerID("rkt", "uuid-4003:app-22"),
0000000000000000000000000000000000000000;;								Name:    "app-22",
0000000000000000000000000000000000000000;;								Image:   "img-name-22:latest",
0000000000000000000000000000000000000000;;								ImageID: "img-id-22",
0000000000000000000000000000000000000000;;								Hash:    10022,
0000000000000000000000000000000000000000;;								State:   "exited",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ID:      kubecontainer.BuildContainerID("rkt", "uuid-4004:app-11"),
0000000000000000000000000000000000000000;;								Name:    "app-11",
0000000000000000000000000000000000000000;;								Image:   "img-name-11:latest",
0000000000000000000000000000000000000000;;								ImageID: "img-id-11",
0000000000000000000000000000000000000000;;								Hash:    10011,
0000000000000000000000000000000000000000;;								State:   "running",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								ID:      kubecontainer.BuildContainerID("rkt", "uuid-4004:app-22"),
0000000000000000000000000000000000000000;;								Name:    "app-22",
0000000000000000000000000000000000000000;;								Image:   "img-name-22:latest",
0000000000000000000000000000000000000000;;								ImageID: "img-id-22",
0000000000000000000000000000000000000000;;								Hash:    10022,
0000000000000000000000000000000000000000;;								State:   "running",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			testCaseHint := fmt.Sprintf("test case #%d", i)
0000000000000000000000000000000000000000;;			fr.pods = tt.pods
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pods, err := r.GetPods(true)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("test case #%d: unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.result, pods, testCaseHint)
0000000000000000000000000000000000000000;;			assert.Equal(t, []string{"ListPods"}, fr.called, fmt.Sprintf("test case %d: unexpected called list", i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fr.CleanCalls()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodsFilters(t *testing.T) {
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		fs := newFakeSystemd()
0000000000000000000000000000000000000000;;		r := &Runtime{apisvc: fr, systemd: fs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			All             bool
0000000000000000000000000000000000000000;;			ExpectedFilters []*rktapi.PodFilter
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				[]*rktapi.PodFilter{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   k8sRktKubeletAnno,
0000000000000000000000000000000000000000;;								Value: k8sRktKubeletAnnoValue,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;				[]*rktapi.PodFilter{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						States: []rktapi.PodState{rktapi.PodState_POD_STATE_RUNNING},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   k8sRktKubeletAnno,
0000000000000000000000000000000000000000;;								Value: k8sRktKubeletAnnoValue,
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			_, err := r.GetPods(test.All)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			assert.Equal(t, test.ExpectedFilters, fr.podFilters, "filters didn't match when all=%b", test.All)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		ctrl := gomock.NewController(t)
0000000000000000000000000000000000000000;;		defer ctrl.Finish()
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		fs := newFakeSystemd()
0000000000000000000000000000000000000000;;		fug := newfakeUnitGetter()
0000000000000000000000000000000000000000;;		fnp := nettest.NewMockNetworkPlugin(ctrl)
0000000000000000000000000000000000000000;;		fos := &containertesting.FakeOS{}
0000000000000000000000000000000000000000;;		frh := &containertesting.FakeRuntimeHelper{}
0000000000000000000000000000000000000000;;		r := &Runtime{
0000000000000000000000000000000000000000;;			apisvc:        fr,
0000000000000000000000000000000000000000;;			systemd:       fs,
0000000000000000000000000000000000000000;;			runtimeHelper: frh,
0000000000000000000000000000000000000000;;			os:            fos,
0000000000000000000000000000000000000000;;			network:       network.NewPluginManager(fnp),
0000000000000000000000000000000000000000;;			unitGetter:    fug,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := func(seconds int64) int64 {
0000000000000000000000000000000000000000;;			return seconds * 1e9
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			networkPluginName string
0000000000000000000000000000000000000000;;			pods              []*rktapi.Pod
0000000000000000000000000000000000000000;;			result            *kubecontainer.PodStatus
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// # case 0, No pods.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.KubenetPluginName,
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				&kubecontainer.PodStatus{ID: "42", Name: "guestbook", Namespace: "default"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// # case 1, One pod.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.KubenetPluginName,
0000000000000000000000000000000000000000;;				[]*rktapi.Pod{
0000000000000000000000000000000000000000;;					makeRktPod(rktapi.PodState_POD_STATE_RUNNING,
0000000000000000000000000000000000000000;;						"uuid-4002", "42", "guestbook", "default",
0000000000000000000000000000000000000000;;						ns(10), ns(20), "7",
0000000000000000000000000000000000000000;;						[]string{"app-1", "app-2"},
0000000000000000000000000000000000000000;;						[]string{"img-id-1", "img-id-2"},
0000000000000000000000000000000000000000;;						[]string{"img-name-1", "img-name-2"},
0000000000000000000000000000000000000000;;						[]string{"1001", "1002"},
0000000000000000000000000000000000000000;;						[]rktapi.AppState{rktapi.AppState_APP_STATE_RUNNING, rktapi.AppState_APP_STATE_EXITED},
0000000000000000000000000000000000000000;;						[]int32{0, 0},
0000000000000000000000000000000000000000;;						nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&kubecontainer.PodStatus{
0000000000000000000000000000000000000000;;					ID:        "42",
0000000000000000000000000000000000000000;;					Name:      "guestbook",
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;					IP:        "10.10.10.42",
0000000000000000000000000000000000000000;;					ContainerStatuses: []*kubecontainer.ContainerStatus{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:           kubecontainer.BuildContainerID("rkt", "uuid-4002:app-1"),
0000000000000000000000000000000000000000;;							Name:         "app-1",
0000000000000000000000000000000000000000;;							State:        kubecontainer.ContainerStateRunning,
0000000000000000000000000000000000000000;;							CreatedAt:    time.Unix(10, 0),
0000000000000000000000000000000000000000;;							StartedAt:    time.Unix(20, 0),
0000000000000000000000000000000000000000;;							FinishedAt:   time.Unix(0, 30),
0000000000000000000000000000000000000000;;							Image:        "img-name-1:latest",
0000000000000000000000000000000000000000;;							ImageID:      "rkt://img-id-1",
0000000000000000000000000000000000000000;;							Hash:         1001,
0000000000000000000000000000000000000000;;							RestartCount: 7,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:           kubecontainer.BuildContainerID("rkt", "uuid-4002:app-2"),
0000000000000000000000000000000000000000;;							Name:         "app-2",
0000000000000000000000000000000000000000;;							State:        kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;							CreatedAt:    time.Unix(10, 0),
0000000000000000000000000000000000000000;;							StartedAt:    time.Unix(20, 0),
0000000000000000000000000000000000000000;;							FinishedAt:   time.Unix(0, 30),
0000000000000000000000000000000000000000;;							Image:        "img-name-2:latest",
0000000000000000000000000000000000000000;;							ImageID:      "rkt://img-id-2",
0000000000000000000000000000000000000000;;							Hash:         1002,
0000000000000000000000000000000000000000;;							RestartCount: 7,
0000000000000000000000000000000000000000;;							Reason:       "Completed",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// # case 2, One pod with no-op network plugin name.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				network.DefaultPluginName,
0000000000000000000000000000000000000000;;				[]*rktapi.Pod{
0000000000000000000000000000000000000000;;					makeRktPod(rktapi.PodState_POD_STATE_RUNNING,
0000000000000000000000000000000000000000;;						"uuid-4002", "42", "guestbook", "default",
0000000000000000000000000000000000000000;;						ns(10), ns(20), "7",
0000000000000000000000000000000000000000;;						[]string{"app-1", "app-2"},
0000000000000000000000000000000000000000;;						[]string{"img-id-1", "img-id-2"},
0000000000000000000000000000000000000000;;						[]string{"img-name-1", "img-name-2"},
0000000000000000000000000000000000000000;;						[]string{"1001", "1002"},
0000000000000000000000000000000000000000;;						[]rktapi.AppState{rktapi.AppState_APP_STATE_RUNNING, rktapi.AppState_APP_STATE_EXITED},
0000000000000000000000000000000000000000;;						[]int32{0, 0},
0000000000000000000000000000000000000000;;						map[string]string{defaultNetworkName: "10.10.10.22"},
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&kubecontainer.PodStatus{
0000000000000000000000000000000000000000;;					ID:        "42",
0000000000000000000000000000000000000000;;					Name:      "guestbook",
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;					IP:        "10.10.10.22",
0000000000000000000000000000000000000000;;					ContainerStatuses: []*kubecontainer.ContainerStatus{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:           kubecontainer.BuildContainerID("rkt", "uuid-4002:app-1"),
0000000000000000000000000000000000000000;;							Name:         "app-1",
0000000000000000000000000000000000000000;;							State:        kubecontainer.ContainerStateRunning,
0000000000000000000000000000000000000000;;							CreatedAt:    time.Unix(10, 0),
0000000000000000000000000000000000000000;;							StartedAt:    time.Unix(20, 0),
0000000000000000000000000000000000000000;;							FinishedAt:   time.Unix(0, 30),
0000000000000000000000000000000000000000;;							Image:        "img-name-1:latest",
0000000000000000000000000000000000000000;;							ImageID:      "rkt://img-id-1",
0000000000000000000000000000000000000000;;							Hash:         1001,
0000000000000000000000000000000000000000;;							RestartCount: 7,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:           kubecontainer.BuildContainerID("rkt", "uuid-4002:app-2"),
0000000000000000000000000000000000000000;;							Name:         "app-2",
0000000000000000000000000000000000000000;;							State:        kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;							CreatedAt:    time.Unix(10, 0),
0000000000000000000000000000000000000000;;							StartedAt:    time.Unix(20, 0),
0000000000000000000000000000000000000000;;							FinishedAt:   time.Unix(0, 30),
0000000000000000000000000000000000000000;;							Image:        "img-name-2:latest",
0000000000000000000000000000000000000000;;							ImageID:      "rkt://img-id-2",
0000000000000000000000000000000000000000;;							Hash:         1002,
0000000000000000000000000000000000000000;;							RestartCount: 7,
0000000000000000000000000000000000000000;;							Reason:       "Completed",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// # case 3, Multiple pods.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.KubenetPluginName,
0000000000000000000000000000000000000000;;				[]*rktapi.Pod{
0000000000000000000000000000000000000000;;					makeRktPod(rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						"uuid-4002", "42", "guestbook", "default",
0000000000000000000000000000000000000000;;						ns(10), ns(20), "7",
0000000000000000000000000000000000000000;;						[]string{"app-1", "app-2"},
0000000000000000000000000000000000000000;;						[]string{"img-id-1", "img-id-2"},
0000000000000000000000000000000000000000;;						[]string{"img-name-1", "img-name-2"},
0000000000000000000000000000000000000000;;						[]string{"1001", "1002"},
0000000000000000000000000000000000000000;;						[]rktapi.AppState{rktapi.AppState_APP_STATE_RUNNING, rktapi.AppState_APP_STATE_EXITED},
0000000000000000000000000000000000000000;;						[]int32{0, 0},
0000000000000000000000000000000000000000;;						nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;					makeRktPod(rktapi.PodState_POD_STATE_RUNNING, // The latest pod is running.
0000000000000000000000000000000000000000;;						"uuid-4003", "42", "guestbook", "default",
0000000000000000000000000000000000000000;;						ns(10), ns(20), "10",
0000000000000000000000000000000000000000;;						[]string{"app-1", "app-2"},
0000000000000000000000000000000000000000;;						[]string{"img-id-1", "img-id-2"},
0000000000000000000000000000000000000000;;						[]string{"img-name-1", "img-name-2"},
0000000000000000000000000000000000000000;;						[]string{"1001", "1002"},
0000000000000000000000000000000000000000;;						[]rktapi.AppState{rktapi.AppState_APP_STATE_RUNNING, rktapi.AppState_APP_STATE_EXITED},
0000000000000000000000000000000000000000;;						[]int32{0, 1},
0000000000000000000000000000000000000000;;						nil,
0000000000000000000000000000000000000000;;					),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&kubecontainer.PodStatus{
0000000000000000000000000000000000000000;;					ID:        "42",
0000000000000000000000000000000000000000;;					Name:      "guestbook",
0000000000000000000000000000000000000000;;					Namespace: "default",
0000000000000000000000000000000000000000;;					IP:        "10.10.10.42",
0000000000000000000000000000000000000000;;					// Result should contain all containers.
0000000000000000000000000000000000000000;;					ContainerStatuses: []*kubecontainer.ContainerStatus{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:           kubecontainer.BuildContainerID("rkt", "uuid-4002:app-1"),
0000000000000000000000000000000000000000;;							Name:         "app-1",
0000000000000000000000000000000000000000;;							State:        kubecontainer.ContainerStateRunning,
0000000000000000000000000000000000000000;;							CreatedAt:    time.Unix(10, 0),
0000000000000000000000000000000000000000;;							StartedAt:    time.Unix(20, 0),
0000000000000000000000000000000000000000;;							FinishedAt:   time.Unix(0, 30),
0000000000000000000000000000000000000000;;							Image:        "img-name-1:latest",
0000000000000000000000000000000000000000;;							ImageID:      "rkt://img-id-1",
0000000000000000000000000000000000000000;;							Hash:         1001,
0000000000000000000000000000000000000000;;							RestartCount: 7,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:           kubecontainer.BuildContainerID("rkt", "uuid-4002:app-2"),
0000000000000000000000000000000000000000;;							Name:         "app-2",
0000000000000000000000000000000000000000;;							State:        kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;							CreatedAt:    time.Unix(10, 0),
0000000000000000000000000000000000000000;;							StartedAt:    time.Unix(20, 0),
0000000000000000000000000000000000000000;;							FinishedAt:   time.Unix(0, 30),
0000000000000000000000000000000000000000;;							Image:        "img-name-2:latest",
0000000000000000000000000000000000000000;;							ImageID:      "rkt://img-id-2",
0000000000000000000000000000000000000000;;							Hash:         1002,
0000000000000000000000000000000000000000;;							RestartCount: 7,
0000000000000000000000000000000000000000;;							Reason:       "Completed",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:           kubecontainer.BuildContainerID("rkt", "uuid-4003:app-1"),
0000000000000000000000000000000000000000;;							Name:         "app-1",
0000000000000000000000000000000000000000;;							State:        kubecontainer.ContainerStateRunning,
0000000000000000000000000000000000000000;;							CreatedAt:    time.Unix(10, 0),
0000000000000000000000000000000000000000;;							StartedAt:    time.Unix(20, 0),
0000000000000000000000000000000000000000;;							FinishedAt:   time.Unix(0, 30),
0000000000000000000000000000000000000000;;							Image:        "img-name-1:latest",
0000000000000000000000000000000000000000;;							ImageID:      "rkt://img-id-1",
0000000000000000000000000000000000000000;;							Hash:         1001,
0000000000000000000000000000000000000000;;							RestartCount: 10,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:           kubecontainer.BuildContainerID("rkt", "uuid-4003:app-2"),
0000000000000000000000000000000000000000;;							Name:         "app-2",
0000000000000000000000000000000000000000;;							State:        kubecontainer.ContainerStateExited,
0000000000000000000000000000000000000000;;							CreatedAt:    time.Unix(10, 0),
0000000000000000000000000000000000000000;;							StartedAt:    time.Unix(20, 0),
0000000000000000000000000000000000000000;;							FinishedAt:   time.Unix(0, 30),
0000000000000000000000000000000000000000;;							Image:        "img-name-2:latest",
0000000000000000000000000000000000000000;;							ImageID:      "rkt://img-id-2",
0000000000000000000000000000000000000000;;							Hash:         1002,
0000000000000000000000000000000000000000;;							RestartCount: 10,
0000000000000000000000000000000000000000;;							ExitCode:     1,
0000000000000000000000000000000000000000;;							Reason:       "Error",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			testCaseHint := fmt.Sprintf("test case #%d", i)
0000000000000000000000000000000000000000;;			fr.pods = tt.pods
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			podTimes := map[string]time.Time{}
0000000000000000000000000000000000000000;;			for _, pod := range tt.pods {
0000000000000000000000000000000000000000;;				podTimes[podFinishedMarkerPath(r.runtimeHelper.GetPodDir(tt.result.ID), pod.Id)] = tt.result.ContainerStatuses[0].FinishedAt
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ctrl := gomock.NewController(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			r.os.(*containertesting.FakeOS).StatFn = func(name string) (os.FileInfo, error) {
0000000000000000000000000000000000000000;;				podTime, ok := podTimes[name]
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					t.Errorf("osStat called with %v, but only knew about %#v", name, podTimes)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				mockFI := containertesting.NewMockFileInfo(ctrl)
0000000000000000000000000000000000000000;;				mockFI.EXPECT().ModTime().Return(podTime)
0000000000000000000000000000000000000000;;				return mockFI, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tt.networkPluginName == network.DefaultPluginName {
0000000000000000000000000000000000000000;;				fnp.EXPECT().Name().Return(tt.networkPluginName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tt.pods != nil && tt.networkPluginName == kubenet.KubenetPluginName {
0000000000000000000000000000000000000000;;				fnp.EXPECT().Name().Return(tt.networkPluginName)
0000000000000000000000000000000000000000;;				if tt.result.IP != "" {
0000000000000000000000000000000000000000;;					fnp.EXPECT().GetPodNetworkStatus("default", "guestbook", kubecontainer.ContainerID{ID: "42"}).
0000000000000000000000000000000000000000;;						Return(&network.PodNetworkStatus{IP: net.ParseIP(tt.result.IP)}, nil)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					fnp.EXPECT().GetPodNetworkStatus("default", "guestbook", kubecontainer.ContainerID{ID: "42"}).
0000000000000000000000000000000000000000;;						Return(nil, fmt.Errorf("no such network"))
0000000000000000000000000000000000000000;;					// Plugin name only requested again in error case
0000000000000000000000000000000000000000;;					fnp.EXPECT().Name().Return(tt.networkPluginName)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			status, err := r.GetPodStatus("42", "guestbook", "default")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("test case #%d: unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.result, status, testCaseHint)
0000000000000000000000000000000000000000;;			assert.Equal(t, []string{"ListPods"}, fr.called, testCaseHint)
0000000000000000000000000000000000000000;;			fug.networkNamespace = kubecontainer.ContainerID{}
0000000000000000000000000000000000000000;;			fr.CleanCalls()
0000000000000000000000000000000000000000;;			ctrl.Finish()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateCapRetainIsolator(t *testing.T, caps ...string) appctypes.Isolator {
0000000000000000000000000000000000000000;;		retain, err := appctypes.NewLinuxCapabilitiesRetainSet(caps...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error generating cap retain isolator: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		isolator, err := retain.AsIsolator()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error generating cap retain isolator: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *isolator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateCapRevokeIsolator(t *testing.T, caps ...string) appctypes.Isolator {
0000000000000000000000000000000000000000;;		revoke, err := appctypes.NewLinuxCapabilitiesRevokeSet(caps...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error generating cap revoke isolator: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		isolator, err := revoke.AsIsolator()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error generating cap revoke isolator: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *isolator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateCPUIsolator(t *testing.T, request, limit string) appctypes.Isolator {
0000000000000000000000000000000000000000;;		cpu, err := appctypes.NewResourceCPUIsolator(request, limit)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error generating cpu resource isolator: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cpu.AsIsolator()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateMemoryIsolator(t *testing.T, request, limit string) appctypes.Isolator {
0000000000000000000000000000000000000000;;		memory, err := appctypes.NewResourceMemoryIsolator(request, limit)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error generating memory resource isolator: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return memory.AsIsolator()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func baseApp(t *testing.T) *appctypes.App {
0000000000000000000000000000000000000000;;		return &appctypes.App{
0000000000000000000000000000000000000000;;			User:              "0",
0000000000000000000000000000000000000000;;			Group:             "0",
0000000000000000000000000000000000000000;;			Exec:              appctypes.Exec{"/bin/foo", "bar"},
0000000000000000000000000000000000000000;;			SupplementaryGIDs: []int{4, 5, 6},
0000000000000000000000000000000000000000;;			WorkingDirectory:  "/foo",
0000000000000000000000000000000000000000;;			Environment: []appctypes.EnvironmentVariable{
0000000000000000000000000000000000000000;;				{Name: "env-foo", Value: "bar"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			MountPoints: []appctypes.MountPoint{
0000000000000000000000000000000000000000;;				{Name: *appctypes.MustACName("mnt-foo"), Path: "/mnt-foo", ReadOnly: false},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Ports: []appctypes.Port{
0000000000000000000000000000000000000000;;				{Name: *appctypes.MustACName("port-foo"), Protocol: "TCP", Port: 4242},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Isolators: []appctypes.Isolator{
0000000000000000000000000000000000000000;;				generateCapRetainIsolator(t, "CAP_SYS_ADMIN"),
0000000000000000000000000000000000000000;;				generateCapRevokeIsolator(t, "CAP_NET_ADMIN"),
0000000000000000000000000000000000000000;;				generateCPUIsolator(t, "100m", "200m"),
0000000000000000000000000000000000000000;;				generateMemoryIsolator(t, "10M", "20M"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func baseImageManifest(t *testing.T) *appcschema.ImageManifest {
0000000000000000000000000000000000000000;;		img := &appcschema.ImageManifest{App: baseApp(t)}
0000000000000000000000000000000000000000;;		entrypoint, err := json.Marshal([]string{"/bin/foo"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmd, err := json.Marshal([]string{"bar"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		img.Annotations.Set(*appctypes.MustACIdentifier(appcDockerEntrypoint), string(entrypoint))
0000000000000000000000000000000000000000;;		img.Annotations.Set(*appctypes.MustACIdentifier(appcDockerCmd), string(cmd))
0000000000000000000000000000000000000000;;		return img
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func baseAppWithRootUserGroup(t *testing.T) *appctypes.App {
0000000000000000000000000000000000000000;;		app := baseApp(t)
0000000000000000000000000000000000000000;;		app.User, app.Group = "0", "0"
0000000000000000000000000000000000000000;;		return app
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type envByName []appctypes.EnvironmentVariable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s envByName) Len() int           { return len(s) }
0000000000000000000000000000000000000000;;	func (s envByName) Less(i, j int) bool { return s[i].Name < s[j].Name }
0000000000000000000000000000000000000000;;	func (s envByName) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mountsByName []appctypes.MountPoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s mountsByName) Len() int           { return len(s) }
0000000000000000000000000000000000000000;;	func (s mountsByName) Less(i, j int) bool { return s[i].Name < s[j].Name }
0000000000000000000000000000000000000000;;	func (s mountsByName) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type portsByName []appctypes.Port
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s portsByName) Len() int           { return len(s) }
0000000000000000000000000000000000000000;;	func (s portsByName) Less(i, j int) bool { return s[i].Name < s[j].Name }
0000000000000000000000000000000000000000;;	func (s portsByName) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type isolatorsByName []appctypes.Isolator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s isolatorsByName) Len() int           { return len(s) }
0000000000000000000000000000000000000000;;	func (s isolatorsByName) Less(i, j int) bool { return s[i].Name < s[j].Name }
0000000000000000000000000000000000000000;;	func (s isolatorsByName) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sortAppFields(app *appctypes.App) {
0000000000000000000000000000000000000000;;		sort.Sort(envByName(app.Environment))
0000000000000000000000000000000000000000;;		sort.Sort(mountsByName(app.MountPoints))
0000000000000000000000000000000000000000;;		sort.Sort(portsByName(app.Ports))
0000000000000000000000000000000000000000;;		sort.Sort(isolatorsByName(app.Isolators))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sortedStringList []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s sortedStringList) Len() int           { return len(s) }
0000000000000000000000000000000000000000;;	func (s sortedStringList) Less(i, j int) bool { return s[i] < s[j] }
0000000000000000000000000000000000000000;;	func (s sortedStringList) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetApp(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpDir, err := utiltesting.MkTmpdir("rkt_test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error creating temp dir: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpDir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rootUser := int64(0)
0000000000000000000000000000000000000000;;		nonRootUser := int64(42)
0000000000000000000000000000000000000000;;		runAsNonRootTrue := true
0000000000000000000000000000000000000000;;		fsgid := int64(3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			container        *v1.Container
0000000000000000000000000000000000000000;;			mountPoints      []appctypes.MountPoint
0000000000000000000000000000000000000000;;			containerPorts   []appctypes.Port
0000000000000000000000000000000000000000;;			envs             []kubecontainer.EnvVar
0000000000000000000000000000000000000000;;			ctx              *v1.SecurityContext
0000000000000000000000000000000000000000;;			podCtx           *v1.PodSecurityContext
0000000000000000000000000000000000000000;;			supplementalGids []int64
0000000000000000000000000000000000000000;;			expect           *appctypes.App
0000000000000000000000000000000000000000;;			err              error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Nothing should change, but the "User" and "Group" should be filled.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container:        &v1.Container{},
0000000000000000000000000000000000000000;;				mountPoints:      []appctypes.MountPoint{},
0000000000000000000000000000000000000000;;				containerPorts:   []appctypes.Port{},
0000000000000000000000000000000000000000;;				envs:             []kubecontainer.EnvVar{},
0000000000000000000000000000000000000000;;				ctx:              nil,
0000000000000000000000000000000000000000;;				podCtx:           nil,
0000000000000000000000000000000000000000;;				supplementalGids: nil,
0000000000000000000000000000000000000000;;				expect:           baseAppWithRootUserGroup(t),
0000000000000000000000000000000000000000;;				err:              nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// error verifying non-root.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container:      &v1.Container{},
0000000000000000000000000000000000000000;;				mountPoints:    []appctypes.MountPoint{},
0000000000000000000000000000000000000000;;				containerPorts: []appctypes.Port{},
0000000000000000000000000000000000000000;;				envs:           []kubecontainer.EnvVar{},
0000000000000000000000000000000000000000;;				ctx: &v1.SecurityContext{
0000000000000000000000000000000000000000;;					RunAsNonRoot: &runAsNonRootTrue,
0000000000000000000000000000000000000000;;					RunAsUser:    &rootUser,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podCtx:           nil,
0000000000000000000000000000000000000000;;				supplementalGids: nil,
0000000000000000000000000000000000000000;;				expect:           nil,
0000000000000000000000000000000000000000;;				err:              fmt.Errorf("container has no runAsUser and image will run as root"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// app's args should be changed.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: &v1.Container{
0000000000000000000000000000000000000000;;					Args: []string{"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mountPoints:      []appctypes.MountPoint{},
0000000000000000000000000000000000000000;;				containerPorts:   []appctypes.Port{},
0000000000000000000000000000000000000000;;				envs:             []kubecontainer.EnvVar{},
0000000000000000000000000000000000000000;;				ctx:              nil,
0000000000000000000000000000000000000000;;				podCtx:           nil,
0000000000000000000000000000000000000000;;				supplementalGids: nil,
0000000000000000000000000000000000000000;;				expect: &appctypes.App{
0000000000000000000000000000000000000000;;					Exec:              appctypes.Exec{"/bin/foo", "foo"},
0000000000000000000000000000000000000000;;					User:              "0",
0000000000000000000000000000000000000000;;					Group:             "0",
0000000000000000000000000000000000000000;;					SupplementaryGIDs: []int{4, 5, 6},
0000000000000000000000000000000000000000;;					WorkingDirectory:  "/foo",
0000000000000000000000000000000000000000;;					Environment: []appctypes.EnvironmentVariable{
0000000000000000000000000000000000000000;;						{Name: "env-foo", Value: "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MountPoints: []appctypes.MountPoint{
0000000000000000000000000000000000000000;;						{Name: *appctypes.MustACName("mnt-foo"), Path: "/mnt-foo", ReadOnly: false},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ports: []appctypes.Port{
0000000000000000000000000000000000000000;;						{Name: *appctypes.MustACName("port-foo"), Protocol: "TCP", Port: 4242},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Isolators: []appctypes.Isolator{
0000000000000000000000000000000000000000;;						generateCapRetainIsolator(t, "CAP_SYS_ADMIN"),
0000000000000000000000000000000000000000;;						generateCapRevokeIsolator(t, "CAP_NET_ADMIN"),
0000000000000000000000000000000000000000;;						generateCPUIsolator(t, "100m", "200m"),
0000000000000000000000000000000000000000;;						generateMemoryIsolator(t, "10M", "20M"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				err: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// app should be changed.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: &v1.Container{
0000000000000000000000000000000000000000;;					Command:    []string{"/bin/bar", "$(env-bar)"},
0000000000000000000000000000000000000000;;					WorkingDir: tmpDir,
0000000000000000000000000000000000000000;;					Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;						Limits:   v1.ResourceList{"cpu": resource.MustParse("50m"), "memory": resource.MustParse("50M")},
0000000000000000000000000000000000000000;;						Requests: v1.ResourceList{"cpu": resource.MustParse("5m"), "memory": resource.MustParse("5M")},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mountPoints: []appctypes.MountPoint{
0000000000000000000000000000000000000000;;					{Name: *appctypes.MustACName("mnt-bar"), Path: "/mnt-bar", ReadOnly: true},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerPorts: []appctypes.Port{
0000000000000000000000000000000000000000;;					{Name: *appctypes.MustACName("port-bar"), Protocol: "TCP", Port: 1234},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				envs: []kubecontainer.EnvVar{
0000000000000000000000000000000000000000;;					{Name: "env-bar", Value: "foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ctx: &v1.SecurityContext{
0000000000000000000000000000000000000000;;					Capabilities: &v1.Capabilities{
0000000000000000000000000000000000000000;;						Add:  []v1.Capability{"CAP_SYS_CHROOT", "CAP_SYS_BOOT"},
0000000000000000000000000000000000000000;;						Drop: []v1.Capability{"CAP_SETUID", "CAP_SETGID"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RunAsUser:    &nonRootUser,
0000000000000000000000000000000000000000;;					RunAsNonRoot: &runAsNonRootTrue,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podCtx: &v1.PodSecurityContext{
0000000000000000000000000000000000000000;;					SupplementalGroups: []int64{
0000000000000000000000000000000000000000;;						int64(1),
0000000000000000000000000000000000000000;;						int64(2),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					FSGroup: &fsgid,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				supplementalGids: []int64{4},
0000000000000000000000000000000000000000;;				expect: &appctypes.App{
0000000000000000000000000000000000000000;;					Exec:              appctypes.Exec{"/bin/bar", "foo"},
0000000000000000000000000000000000000000;;					User:              "42",
0000000000000000000000000000000000000000;;					Group:             "0",
0000000000000000000000000000000000000000;;					SupplementaryGIDs: []int{1, 2, 3, 4},
0000000000000000000000000000000000000000;;					WorkingDirectory:  tmpDir,
0000000000000000000000000000000000000000;;					Environment: []appctypes.EnvironmentVariable{
0000000000000000000000000000000000000000;;						{Name: "env-foo", Value: "bar"},
0000000000000000000000000000000000000000;;						{Name: "env-bar", Value: "foo"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MountPoints: []appctypes.MountPoint{
0000000000000000000000000000000000000000;;						{Name: *appctypes.MustACName("mnt-foo"), Path: "/mnt-foo", ReadOnly: false},
0000000000000000000000000000000000000000;;						{Name: *appctypes.MustACName("mnt-bar"), Path: "/mnt-bar", ReadOnly: true},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ports: []appctypes.Port{
0000000000000000000000000000000000000000;;						{Name: *appctypes.MustACName("port-foo"), Protocol: "TCP", Port: 4242},
0000000000000000000000000000000000000000;;						{Name: *appctypes.MustACName("port-bar"), Protocol: "TCP", Port: 1234},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Isolators: []appctypes.Isolator{
0000000000000000000000000000000000000000;;						generateCapRetainIsolator(t, "CAP_SYS_CHROOT", "CAP_SYS_BOOT"),
0000000000000000000000000000000000000000;;						generateCapRevokeIsolator(t, "CAP_SETUID", "CAP_SETGID"),
0000000000000000000000000000000000000000;;						generateCPUIsolator(t, "5m", "50m"),
0000000000000000000000000000000000000000;;						generateMemoryIsolator(t, "5M", "50M"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// app should be changed. (env, mounts, ports, are overrided).
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				container: &v1.Container{
0000000000000000000000000000000000000000;;					Name:       "hello-world",
0000000000000000000000000000000000000000;;					Command:    []string{"/bin/hello", "$(env-foo)"},
0000000000000000000000000000000000000000;;					Args:       []string{"hello", "world", "$(env-bar)"},
0000000000000000000000000000000000000000;;					WorkingDir: tmpDir,
0000000000000000000000000000000000000000;;					Resources: v1.ResourceRequirements{
0000000000000000000000000000000000000000;;						Limits:   v1.ResourceList{"cpu": resource.MustParse("50m")},
0000000000000000000000000000000000000000;;						Requests: v1.ResourceList{"memory": resource.MustParse("5M")},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				mountPoints: []appctypes.MountPoint{
0000000000000000000000000000000000000000;;					{Name: *appctypes.MustACName("mnt-foo"), Path: "/mnt-foo", ReadOnly: true},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				containerPorts: []appctypes.Port{
0000000000000000000000000000000000000000;;					{Name: *appctypes.MustACName("port-foo"), Protocol: "TCP", Port: 1234},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				envs: []kubecontainer.EnvVar{
0000000000000000000000000000000000000000;;					{Name: "env-foo", Value: "foo"},
0000000000000000000000000000000000000000;;					{Name: "env-bar", Value: "bar"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ctx: &v1.SecurityContext{
0000000000000000000000000000000000000000;;					Capabilities: &v1.Capabilities{
0000000000000000000000000000000000000000;;						Add:  []v1.Capability{"CAP_SYS_CHROOT", "CAP_SYS_BOOT"},
0000000000000000000000000000000000000000;;						Drop: []v1.Capability{"CAP_SETUID", "CAP_SETGID"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					RunAsUser:    &nonRootUser,
0000000000000000000000000000000000000000;;					RunAsNonRoot: &runAsNonRootTrue,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				podCtx: &v1.PodSecurityContext{
0000000000000000000000000000000000000000;;					SupplementalGroups: []int64{
0000000000000000000000000000000000000000;;						int64(1),
0000000000000000000000000000000000000000;;						int64(2),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					FSGroup: &fsgid,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				supplementalGids: []int64{4},
0000000000000000000000000000000000000000;;				expect: &appctypes.App{
0000000000000000000000000000000000000000;;					Exec:              appctypes.Exec{"/bin/hello", "foo", "hello", "world", "bar"},
0000000000000000000000000000000000000000;;					User:              "42",
0000000000000000000000000000000000000000;;					Group:             "0",
0000000000000000000000000000000000000000;;					SupplementaryGIDs: []int{1, 2, 3, 4},
0000000000000000000000000000000000000000;;					WorkingDirectory:  tmpDir,
0000000000000000000000000000000000000000;;					Environment: []appctypes.EnvironmentVariable{
0000000000000000000000000000000000000000;;						{Name: "env-foo", Value: "foo"},
0000000000000000000000000000000000000000;;						{Name: "env-bar", Value: "bar"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					MountPoints: []appctypes.MountPoint{
0000000000000000000000000000000000000000;;						{Name: *appctypes.MustACName("mnt-foo"), Path: "/mnt-foo", ReadOnly: true},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Ports: []appctypes.Port{
0000000000000000000000000000000000000000;;						{Name: *appctypes.MustACName("port-foo"), Protocol: "TCP", Port: 1234},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Isolators: []appctypes.Isolator{
0000000000000000000000000000000000000000;;						generateCapRetainIsolator(t, "CAP_SYS_CHROOT", "CAP_SYS_BOOT"),
0000000000000000000000000000000000000000;;						generateCapRevokeIsolator(t, "CAP_SETUID", "CAP_SETGID"),
0000000000000000000000000000000000000000;;						generateCPUIsolator(t, "50m", "50m"),
0000000000000000000000000000000000000000;;						generateMemoryIsolator(t, "5M", "5M"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			testCaseHint := fmt.Sprintf("test case #%d", i)
0000000000000000000000000000000000000000;;			img := baseImageManifest(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := setApp(img, tt.container,
0000000000000000000000000000000000000000;;				tt.mountPoints, tt.containerPorts, tt.envs,
0000000000000000000000000000000000000000;;				tt.ctx, tt.podCtx, tt.supplementalGids)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err == nil && tt.err != nil || err != nil && tt.err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expect %v, saw %v", testCaseHint, tt.err, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				sortAppFields(tt.expect)
0000000000000000000000000000000000000000;;				sortAppFields(img.App)
0000000000000000000000000000000000000000;;				assert.Equal(t, tt.expect, img.App, testCaseHint)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenerateRunCommand(t *testing.T) {
0000000000000000000000000000000000000000;;		hostName := "test-hostname"
0000000000000000000000000000000000000000;;		boolTrue := true
0000000000000000000000000000000000000000;;		boolFalse := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			networkPlugin network.NetworkPlugin
0000000000000000000000000000000000000000;;			pod           *v1.Pod
0000000000000000000000000000000000000000;;			uuid          string
0000000000000000000000000000000000000000;;			netnsName     string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			dnsServers  []string
0000000000000000000000000000000000000000;;			dnsSearches []string
0000000000000000000000000000000000000000;;			hostName    string
0000000000000000000000000000000000000000;;			err         error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expect string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Case #0, returns error.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.NewPlugin("/tmp"),
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "pod-name-foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{{Name: "container-foo"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"rkt-uuid-foo",
0000000000000000000000000000000000000000;;				"default",
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				fmt.Errorf("failed to get cluster dns"),
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Case #1, returns no dns, with private-net.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.NewPlugin("/tmp"),
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "pod-name-foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{{Name: "container-foo"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"rkt-uuid-foo",
0000000000000000000000000000000000000000;;				"default",
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				"pod-hostname-foo",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				"/usr/bin/nsenter --net=/var/run/netns/default -- /bin/rkt/rkt --insecure-options=image,ondisk --local-config=/var/rkt/local/data --dir=/var/data run-prepared --net=host --hostname=pod-hostname-foo rkt-uuid-foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Case #2, returns no dns, with host-net.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.NewPlugin("/tmp"),
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "pod-name-foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						HostNetwork: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						Containers: []v1.Container{{Name: "container-foo"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"rkt-uuid-foo",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				fmt.Sprintf("/bin/rkt/rkt --insecure-options=image,ondisk --local-config=/var/rkt/local/data --dir=/var/data run-prepared --net=host --hostname=%s rkt-uuid-foo", hostName),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Case #3, returns dns, dns searches, with private-net.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.NewPlugin("/tmp"),
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "pod-name-foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						HostNetwork: false,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						Containers: []v1.Container{{Name: "container-foo"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"rkt-uuid-foo",
0000000000000000000000000000000000000000;;				"default",
0000000000000000000000000000000000000000;;				[]string{"127.0.0.1"},
0000000000000000000000000000000000000000;;				[]string{"."},
0000000000000000000000000000000000000000;;				"pod-hostname-foo",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				"/usr/bin/nsenter --net=/var/run/netns/default -- /bin/rkt/rkt --insecure-options=image,ondisk --local-config=/var/rkt/local/data --dir=/var/data run-prepared --net=host --dns=127.0.0.1 --dns-search=. --dns-opt=ndots:5 --hostname=pod-hostname-foo rkt-uuid-foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Case #4, returns no dns, dns searches, with host-network.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.NewPlugin("/tmp"),
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "pod-name-foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						HostNetwork: true,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;						Containers: []v1.Container{{Name: "container-foo"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"rkt-uuid-foo",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				[]string{"127.0.0.1"},
0000000000000000000000000000000000000000;;				[]string{"."},
0000000000000000000000000000000000000000;;				"pod-hostname-foo",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				fmt.Sprintf("/bin/rkt/rkt --insecure-options=image,ondisk --local-config=/var/rkt/local/data --dir=/var/data run-prepared --net=host --hostname=%s rkt-uuid-foo", hostName),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Case #5, with no-op plugin, returns --net=rkt.kubernetes.io, with dns and dns search.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				&network.NoopNetworkPlugin{},
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "pod-name-foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{{Name: "container-foo"}},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"rkt-uuid-foo",
0000000000000000000000000000000000000000;;				"default",
0000000000000000000000000000000000000000;;				[]string{"127.0.0.1"},
0000000000000000000000000000000000000000;;				[]string{"."},
0000000000000000000000000000000000000000;;				"pod-hostname-foo",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				"/bin/rkt/rkt --insecure-options=image,ondisk --local-config=/var/rkt/local/data --dir=/var/data run-prepared --net=rkt.kubernetes.io --dns=127.0.0.1 --dns-search=. --dns-opt=ndots:5 --hostname=pod-hostname-foo rkt-uuid-foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Case #6, if all containers are privileged, the result should have 'insecure-options=all-run'
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.NewPlugin("/tmp"),
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "pod-name-foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{Name: "container-foo", SecurityContext: &v1.SecurityContext{Privileged: &boolTrue}},
0000000000000000000000000000000000000000;;							{Name: "container-bar", SecurityContext: &v1.SecurityContext{Privileged: &boolTrue}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"rkt-uuid-foo",
0000000000000000000000000000000000000000;;				"default",
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				"pod-hostname-foo",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				"/usr/bin/nsenter --net=/var/run/netns/default -- /bin/rkt/rkt --insecure-options=image,ondisk,all-run --local-config=/var/rkt/local/data --dir=/var/data run-prepared --net=host --hostname=pod-hostname-foo rkt-uuid-foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Case #7, if not all containers are privileged, the result should not have 'insecure-options=all-run'
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubenet.NewPlugin("/tmp"),
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name: "pod-name-foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{Name: "container-foo", SecurityContext: &v1.SecurityContext{Privileged: &boolTrue}},
0000000000000000000000000000000000000000;;							{Name: "container-bar", SecurityContext: &v1.SecurityContext{Privileged: &boolFalse}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"rkt-uuid-foo",
0000000000000000000000000000000000000000;;				"default",
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				"pod-hostname-foo",
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;				"/usr/bin/nsenter --net=/var/run/netns/default -- /bin/rkt/rkt --insecure-options=image,ondisk --local-config=/var/rkt/local/data --dir=/var/data run-prepared --net=host --hostname=pod-hostname-foo rkt-uuid-foo",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rkt := &Runtime{
0000000000000000000000000000000000000000;;			nsenterPath: "/usr/bin/nsenter",
0000000000000000000000000000000000000000;;			os:          &kubetesting.FakeOS{HostName: hostName},
0000000000000000000000000000000000000000;;			config: &Config{
0000000000000000000000000000000000000000;;				Path:            "/bin/rkt/rkt",
0000000000000000000000000000000000000000;;				Stage1Image:     "/bin/rkt/stage1-coreos.aci",
0000000000000000000000000000000000000000;;				Dir:             "/var/data",
0000000000000000000000000000000000000000;;				InsecureOptions: "image,ondisk",
0000000000000000000000000000000000000000;;				LocalConfigDir:  "/var/rkt/local/data",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			testCaseHint := fmt.Sprintf("test case #%d", i)
0000000000000000000000000000000000000000;;			rkt.network = network.NewPluginManager(tt.networkPlugin)
0000000000000000000000000000000000000000;;			rkt.runtimeHelper = &containertesting.FakeRuntimeHelper{
0000000000000000000000000000000000000000;;				DNSServers:  tt.dnsServers,
0000000000000000000000000000000000000000;;				DNSSearches: tt.dnsSearches,
0000000000000000000000000000000000000000;;				HostName:    tt.hostName,
0000000000000000000000000000000000000000;;				Err:         tt.err,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rkt.execer = &utilexec.FakeExec{CommandScript: []utilexec.FakeCommandAction{func(cmd string, args ...string) utilexec.Cmd {
0000000000000000000000000000000000000000;;				return utilexec.InitFakeCmd(&utilexec.FakeCmd{}, cmd, args...)
0000000000000000000000000000000000000000;;			}}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// a command should be created of this form, but the returned command shouldn't be called (asserted by having no expectations on it)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err := rkt.generateRunCommand(tt.pod, tt.uuid, tt.netnsName)
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.err, err, testCaseHint)
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.expect, result, testCaseHint)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLifeCycleHooks(t *testing.T) {
0000000000000000000000000000000000000000;;		runner := lifecycle.NewFakeHandlerRunner()
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		fs := newFakeSystemd()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rkt := &Runtime{
0000000000000000000000000000000000000000;;			runner:              runner,
0000000000000000000000000000000000000000;;			apisvc:              fr,
0000000000000000000000000000000000000000;;			systemd:             fs,
0000000000000000000000000000000000000000;;			containerRefManager: kubecontainer.NewRefManager(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			pod           *v1.Pod
0000000000000000000000000000000000000000;;			runtimePod    *kubecontainer.Pod
0000000000000000000000000000000000000000;;			postStartRuns []string
0000000000000000000000000000000000000000;;			preStopRuns   []string
0000000000000000000000000000000000000000;;			err           error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Case 0, container without any hooks.
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "pod-1",
0000000000000000000000000000000000000000;;						Namespace: "ns-1",
0000000000000000000000000000000000000000;;						UID:       "uid-1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{Name: "container-name-1"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&kubecontainer.Pod{
0000000000000000000000000000000000000000;;					Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;						{ID: kubecontainer.BuildContainerID("rkt", "id-1")},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Case 1, containers with post-start and pre-stop hooks.
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "pod-1",
0000000000000000000000000000000000000000;;						Namespace: "ns-1",
0000000000000000000000000000000000000000;;						UID:       "uid-1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "container-name-1",
0000000000000000000000000000000000000000;;								Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;									PostStart: &v1.Handler{
0000000000000000000000000000000000000000;;										Exec: &v1.ExecAction{},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "container-name-2",
0000000000000000000000000000000000000000;;								Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;									PostStart: &v1.Handler{
0000000000000000000000000000000000000000;;										HTTPGet: &v1.HTTPGetAction{},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "container-name-3",
0000000000000000000000000000000000000000;;								Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;									PreStop: &v1.Handler{
0000000000000000000000000000000000000000;;										Exec: &v1.ExecAction{},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "container-name-4",
0000000000000000000000000000000000000000;;								Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;									PreStop: &v1.Handler{
0000000000000000000000000000000000000000;;										HTTPGet: &v1.HTTPGetAction{},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&kubecontainer.Pod{
0000000000000000000000000000000000000000;;					Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:   kubecontainer.ParseContainerID("rkt://uuid:container-name-4"),
0000000000000000000000000000000000000000;;							Name: "container-name-4",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:   kubecontainer.ParseContainerID("rkt://uuid:container-name-3"),
0000000000000000000000000000000000000000;;							Name: "container-name-3",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:   kubecontainer.ParseContainerID("rkt://uuid:container-name-2"),
0000000000000000000000000000000000000000;;							Name: "container-name-2",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:   kubecontainer.ParseContainerID("rkt://uuid:container-name-1"),
0000000000000000000000000000000000000000;;							Name: "container-name-1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					"exec on pod: pod-1_ns-1(uid-1), container: container-name-1: rkt://uuid:container-name-1",
0000000000000000000000000000000000000000;;					"http-get on pod: pod-1_ns-1(uid-1), container: container-name-2: rkt://uuid:container-name-2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					"exec on pod: pod-1_ns-1(uid-1), container: container-name-3: rkt://uuid:container-name-3",
0000000000000000000000000000000000000000;;					"http-get on pod: pod-1_ns-1(uid-1), container: container-name-4: rkt://uuid:container-name-4",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Case 2, one container with invalid hooks.
0000000000000000000000000000000000000000;;				&v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:      "pod-1",
0000000000000000000000000000000000000000;;						Namespace: "ns-1",
0000000000000000000000000000000000000000;;						UID:       "uid-1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;						Containers: []v1.Container{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "container-name-1",
0000000000000000000000000000000000000000;;								Lifecycle: &v1.Lifecycle{
0000000000000000000000000000000000000000;;									PostStart: &v1.Handler{},
0000000000000000000000000000000000000000;;									PreStop:   &v1.Handler{},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&kubecontainer.Pod{
0000000000000000000000000000000000000000;;					Containers: []*kubecontainer.Container{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ID:   kubecontainer.ParseContainerID("rkt://uuid:container-name-1"),
0000000000000000000000000000000000000000;;							Name: "container-name-1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;				errors.NewAggregate([]error{fmt.Errorf("Invalid handler: %v", &v1.Handler{})}),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			testCaseHint := fmt.Sprintf("test case #%d", i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			pod := &rktapi.Pod{Id: "uuid"}
0000000000000000000000000000000000000000;;			for _, c := range tt.runtimePod.Containers {
0000000000000000000000000000000000000000;;				pod.Apps = append(pod.Apps, &rktapi.App{
0000000000000000000000000000000000000000;;					Name:  c.Name,
0000000000000000000000000000000000000000;;					State: rktapi.AppState_APP_STATE_RUNNING,
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fr.pods = []*rktapi.Pod{pod}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Run post-start hooks
0000000000000000000000000000000000000000;;			err := rkt.runLifecycleHooks(tt.pod, tt.runtimePod, lifecyclePostStartHook)
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.err, err, testCaseHint)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(tt.postStartRuns))
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(runner.HandlerRuns))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.postStartRuns, runner.HandlerRuns, testCaseHint)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			runner.Reset()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Run pre-stop hooks.
0000000000000000000000000000000000000000;;			err = rkt.runLifecycleHooks(tt.pod, tt.runtimePod, lifecyclePreStopHook)
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.err, err, testCaseHint)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(tt.preStopRuns))
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(runner.HandlerRuns))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.preStopRuns, runner.HandlerRuns, testCaseHint)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			runner.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestImageStats(t *testing.T) {
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		rkt := &Runtime{apisvc: fr}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fr.images = []*rktapi.Image{
0000000000000000000000000000000000000000;;			{Size: 100},
0000000000000000000000000000000000000000;;			{Size: 200},
0000000000000000000000000000000000000000;;			{Size: 300},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err := rkt.ImageStats()
0000000000000000000000000000000000000000;;		assert.NoError(t, err)
0000000000000000000000000000000000000000;;		assert.Equal(t, result, &kubecontainer.ImageStats{TotalStorageBytes: 600})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGarbageCollect(t *testing.T) {
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		fs := newFakeSystemd()
0000000000000000000000000000000000000000;;		cli := newFakeRktCli()
0000000000000000000000000000000000000000;;		fakeOS := kubetesting.NewFakeOS()
0000000000000000000000000000000000000000;;		getter := newFakePodGetter()
0000000000000000000000000000000000000000;;		fug := newfakeUnitGetter()
0000000000000000000000000000000000000000;;		frh := &containertesting.FakeRuntimeHelper{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rkt := &Runtime{
0000000000000000000000000000000000000000;;			os:                  fakeOS,
0000000000000000000000000000000000000000;;			cli:                 cli,
0000000000000000000000000000000000000000;;			apisvc:              fr,
0000000000000000000000000000000000000000;;			podGetter:           getter,
0000000000000000000000000000000000000000;;			systemd:             fs,
0000000000000000000000000000000000000000;;			containerRefManager: kubecontainer.NewRefManager(),
0000000000000000000000000000000000000000;;			unitGetter:          fug,
0000000000000000000000000000000000000000;;			runtimeHelper:       frh,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeApp := &rktapi.App{Name: "app-foo"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			gcPolicy             kubecontainer.ContainerGCPolicy
0000000000000000000000000000000000000000;;			apiPods              []*v1.Pod
0000000000000000000000000000000000000000;;			pods                 []*rktapi.Pod
0000000000000000000000000000000000000000;;			serviceFilesOnDisk   []string
0000000000000000000000000000000000000000;;			expectedCommands     []string
0000000000000000000000000000000000000000;;			expectedDeletedFiles []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// All running pods, should not be gc'd.
0000000000000000000000000000000000000000;;			// Dead, new pods should not be gc'd.
0000000000000000000000000000000000000000;;			// Dead, old pods should be gc'd.
0000000000000000000000000000000000000000;;			// Deleted pods should be gc'd.
0000000000000000000000000000000000000000;;			// Service files without corresponded pods should be removed.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubecontainer.ContainerGCPolicy{
0000000000000000000000000000000000000000;;					MinAge:        0,
0000000000000000000000000000000000000000;;					MaxContainers: 0,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.Pod{
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{UID: "pod-uid-1"}},
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{UID: "pod-uid-2"}},
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{UID: "pod-uid-3"}},
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{UID: "pod-uid-4"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*rktapi.Pod{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:        "deleted-foo",
0000000000000000000000000000000000000000;;						State:     rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						CreatedAt: time.Now().Add(time.Hour).UnixNano(),
0000000000000000000000000000000000000000;;						StartedAt: time.Now().Add(time.Hour).UnixNano(),
0000000000000000000000000000000000000000;;						Apps:      []*rktapi.App{fakeApp},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   types.KubernetesPodUIDLabel,
0000000000000000000000000000000000000000;;								Value: "pod-uid-0",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:        "running-foo",
0000000000000000000000000000000000000000;;						State:     rktapi.PodState_POD_STATE_RUNNING,
0000000000000000000000000000000000000000;;						CreatedAt: 0,
0000000000000000000000000000000000000000;;						StartedAt: 0,
0000000000000000000000000000000000000000;;						Apps:      []*rktapi.App{fakeApp},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   types.KubernetesPodUIDLabel,
0000000000000000000000000000000000000000;;								Value: "pod-uid-1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:        "running-bar",
0000000000000000000000000000000000000000;;						State:     rktapi.PodState_POD_STATE_RUNNING,
0000000000000000000000000000000000000000;;						CreatedAt: 0,
0000000000000000000000000000000000000000;;						StartedAt: 0,
0000000000000000000000000000000000000000;;						Apps:      []*rktapi.App{fakeApp},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   types.KubernetesPodUIDLabel,
0000000000000000000000000000000000000000;;								Value: "pod-uid-2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:        "dead-old",
0000000000000000000000000000000000000000;;						State:     rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						CreatedAt: 0,
0000000000000000000000000000000000000000;;						StartedAt: 0,
0000000000000000000000000000000000000000;;						Apps:      []*rktapi.App{fakeApp},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   types.KubernetesPodUIDLabel,
0000000000000000000000000000000000000000;;								Value: "pod-uid-3",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:        "dead-new",
0000000000000000000000000000000000000000;;						State:     rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						CreatedAt: time.Now().Add(time.Hour).UnixNano(),
0000000000000000000000000000000000000000;;						StartedAt: time.Now().Add(time.Hour).UnixNano(),
0000000000000000000000000000000000000000;;						Apps:      []*rktapi.App{fakeApp},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   types.KubernetesPodUIDLabel,
0000000000000000000000000000000000000000;;								Value: "pod-uid-4",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{"k8s_dead-old.service", "k8s_deleted-foo.service", "k8s_non-existing-bar.service"},
0000000000000000000000000000000000000000;;				[]string{"rkt rm dead-old", "rkt rm deleted-foo"},
0000000000000000000000000000000000000000;;				[]string{"/poddir/fake/finished-dead-old", "/poddir/fake/finished-deleted-foo", "/poddir/fake/finished-non-existing-bar", "/run/systemd/system/k8s_dead-old.service", "/run/systemd/system/k8s_deleted-foo.service", "/run/systemd/system/k8s_non-existing-bar.service"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// gcPolicy.MaxContainers should be enforced.
0000000000000000000000000000000000000000;;			// Oldest ones are removed first.
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				kubecontainer.ContainerGCPolicy{
0000000000000000000000000000000000000000;;					MinAge:        0,
0000000000000000000000000000000000000000;;					MaxContainers: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*v1.Pod{
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{UID: "pod-uid-0"}},
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{UID: "pod-uid-1"}},
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{UID: "pod-uid-2"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]*rktapi.Pod{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:        "dead-2",
0000000000000000000000000000000000000000;;						State:     rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						CreatedAt: 2,
0000000000000000000000000000000000000000;;						StartedAt: 2,
0000000000000000000000000000000000000000;;						Apps:      []*rktapi.App{fakeApp},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   types.KubernetesPodUIDLabel,
0000000000000000000000000000000000000000;;								Value: "pod-uid-2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:        "dead-1",
0000000000000000000000000000000000000000;;						State:     rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						CreatedAt: 1,
0000000000000000000000000000000000000000;;						StartedAt: 1,
0000000000000000000000000000000000000000;;						Apps:      []*rktapi.App{fakeApp},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   types.KubernetesPodUIDLabel,
0000000000000000000000000000000000000000;;								Value: "pod-uid-1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Id:        "dead-0",
0000000000000000000000000000000000000000;;						State:     rktapi.PodState_POD_STATE_EXITED,
0000000000000000000000000000000000000000;;						CreatedAt: 0,
0000000000000000000000000000000000000000;;						StartedAt: 0,
0000000000000000000000000000000000000000;;						Apps:      []*rktapi.App{fakeApp},
0000000000000000000000000000000000000000;;						Annotations: []*rktapi.KeyValue{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Key:   types.KubernetesPodUIDLabel,
0000000000000000000000000000000000000000;;								Value: "pod-uid-0",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{"k8s_dead-0.service", "k8s_dead-1.service", "k8s_dead-2.service"},
0000000000000000000000000000000000000000;;				[]string{"rkt rm dead-0", "rkt rm dead-1"},
0000000000000000000000000000000000000000;;				[]string{"/poddir/fake/finished-dead-0", "/poddir/fake/finished-dead-1", "/run/systemd/system/k8s_dead-0.service", "/run/systemd/system/k8s_dead-1.service"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range tests {
0000000000000000000000000000000000000000;;			testCaseHint := fmt.Sprintf("test case #%d", i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ctrl := gomock.NewController(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fakeOS.ReadDirFn = func(dirname string) ([]os.FileInfo, error) {
0000000000000000000000000000000000000000;;				serviceFileNames := tt.serviceFilesOnDisk
0000000000000000000000000000000000000000;;				var fileInfos []os.FileInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for _, name := range serviceFileNames {
0000000000000000000000000000000000000000;;					mockFI := containertesting.NewMockFileInfo(ctrl)
0000000000000000000000000000000000000000;;					// we need to specify two calls
0000000000000000000000000000000000000000;;					// first: get all systemd units
0000000000000000000000000000000000000000;;					// second: filter only the files with a k8s_ prefix
0000000000000000000000000000000000000000;;					mockFI.EXPECT().Name().Return(name)
0000000000000000000000000000000000000000;;					mockFI.EXPECT().Name().Return(name)
0000000000000000000000000000000000000000;;					fileInfos = append(fileInfos, mockFI)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return fileInfos, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fr.pods = tt.pods
0000000000000000000000000000000000000000;;			for _, p := range tt.apiPods {
0000000000000000000000000000000000000000;;				getter.pods[p.UID] = p
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			allSourcesReady := true
0000000000000000000000000000000000000000;;			evictNonDeletedPods := false
0000000000000000000000000000000000000000;;			err := rkt.GarbageCollect(tt.gcPolicy, allSourcesReady, evictNonDeletedPods)
0000000000000000000000000000000000000000;;			assert.NoError(t, err, testCaseHint)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(tt.expectedCommands))
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(cli.cmds))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.expectedCommands, cli.cmds, testCaseHint)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(tt.expectedDeletedFiles))
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(fakeOS.Removes))
0000000000000000000000000000000000000000;;			sort.Sort(sortedStringList(fs.resetFailedUnits))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.expectedDeletedFiles, fakeOS.Removes, testCaseHint)
0000000000000000000000000000000000000000;;			var expectedService []string
0000000000000000000000000000000000000000;;			for _, f := range tt.expectedDeletedFiles {
0000000000000000000000000000000000000000;;				unit := filepath.Base(f)
0000000000000000000000000000000000000000;;				if strings.HasSuffix(unit, ".service") && strings.HasPrefix(unit, kubernetesUnitPrefix) {
0000000000000000000000000000000000000000;;					expectedService = append(expectedService, unit)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			assert.Equal(t, expectedService, fs.resetFailedUnits, testCaseHint)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Cleanup after each test.
0000000000000000000000000000000000000000;;			cli.Reset()
0000000000000000000000000000000000000000;;			ctrl.Finish()
0000000000000000000000000000000000000000;;			fakeOS.Removes = []string{}
0000000000000000000000000000000000000000;;			fs.resetFailedUnits = []string{}
0000000000000000000000000000000000000000;;			getter.pods = make(map[kubetypes.UID]*v1.Pod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type annotationsByName []appctypes.Annotation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a annotationsByName) Len() int           { return len(a) }
0000000000000000000000000000000000000000;;	func (a annotationsByName) Less(x, y int) bool { return a[x].Name < a[y].Name }
0000000000000000000000000000000000000000;;	func (a annotationsByName) Swap(x, y int)      { a[x], a[y] = a[y], a[x] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMakePodManifestAnnotations(t *testing.T) {
0000000000000000000000000000000000000000;;		ctrl := gomock.NewController(t)
0000000000000000000000000000000000000000;;		defer ctrl.Finish()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fr := newFakeRktInterface()
0000000000000000000000000000000000000000;;		fs := newFakeSystemd()
0000000000000000000000000000000000000000;;		r := &Runtime{apisvc: fr, systemd: fs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			in     *v1.Pod
0000000000000000000000000000000000000000;;			out    *appcschema.PodManifest
0000000000000000000000000000000000000000;;			outerr error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in: &v1.Pod{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						UID:       "uid-1",
0000000000000000000000000000000000000000;;						Name:      "name-1",
0000000000000000000000000000000000000000;;						Namespace: "namespace-1",
0000000000000000000000000000000000000000;;						Annotations: map[string]string{
0000000000000000000000000000000000000000;;							k8sRktStage1NameAnno: "stage1-override-img",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				out: &appcschema.PodManifest{
0000000000000000000000000000000000000000;;					Annotations: []appctypes.Annotation{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  "io.kubernetes.container.name",
0000000000000000000000000000000000000000;;							Value: "POD",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  appctypes.ACIdentifier(k8sRktStage1NameAnno),
0000000000000000000000000000000000000000;;							Value: "stage1-override-img",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  appctypes.ACIdentifier(types.KubernetesPodUIDLabel),
0000000000000000000000000000000000000000;;							Value: "uid-1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  appctypes.ACIdentifier(types.KubernetesPodNameLabel),
0000000000000000000000000000000000000000;;							Value: "name-1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  appctypes.ACIdentifier(k8sRktKubeletAnno),
0000000000000000000000000000000000000000;;							Value: "true",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  appctypes.ACIdentifier(types.KubernetesPodNamespaceLabel),
0000000000000000000000000000000000000000;;							Value: "namespace-1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  appctypes.ACIdentifier(k8sRktRestartCountAnno),
0000000000000000000000000000000000000000;;							Value: "0",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			hint := fmt.Sprintf("case #%d", i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err := r.makePodManifest(testCase.in, "", []v1.Secret{})
0000000000000000000000000000000000000000;;			assert.Equal(t, testCase.outerr, err, hint)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				sort.Sort(annotationsByName(result.Annotations))
0000000000000000000000000000000000000000;;				sort.Sort(annotationsByName(testCase.out.Annotations))
0000000000000000000000000000000000000000;;				assert.Equal(t, testCase.out.Annotations, result.Annotations, hint)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPreparePodArgs(t *testing.T) {
0000000000000000000000000000000000000000;;		r := &Runtime{
0000000000000000000000000000000000000000;;			config: &Config{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			manifest     appcschema.PodManifest
0000000000000000000000000000000000000000;;			stage1Config string
0000000000000000000000000000000000000000;;			cmd          []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				appcschema.PodManifest{
0000000000000000000000000000000000000000;;					Annotations: appctypes.Annotations{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  k8sRktStage1NameAnno,
0000000000000000000000000000000000000000;;							Value: "stage1-image",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				[]string{"prepare", "--quiet", "--pod-manifest", "file", "--stage1-name=stage1-image"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				appcschema.PodManifest{
0000000000000000000000000000000000000000;;					Annotations: appctypes.Annotations{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  k8sRktStage1NameAnno,
0000000000000000000000000000000000000000;;							Value: "stage1-image",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"stage1-image0",
0000000000000000000000000000000000000000;;				[]string{"prepare", "--quiet", "--pod-manifest", "file", "--stage1-name=stage1-image"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				appcschema.PodManifest{
0000000000000000000000000000000000000000;;					Annotations: appctypes.Annotations{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"stage1-image0",
0000000000000000000000000000000000000000;;				[]string{"prepare", "--quiet", "--pod-manifest", "file", "--stage1-name=stage1-image0"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				appcschema.PodManifest{
0000000000000000000000000000000000000000;;					Annotations: appctypes.Annotations{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				[]string{"prepare", "--quiet", "--pod-manifest", "file"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			r.config.Stage1Image = testCase.stage1Config
0000000000000000000000000000000000000000;;			cmd := r.preparePodArgs(&testCase.manifest, "file")
0000000000000000000000000000000000000000;;			assert.Equal(t, testCase.cmd, cmd, fmt.Sprintf("Test case #%d", i))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConstructSyslogIdentifier(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			podName         string
0000000000000000000000000000000000000000;;			podGenerateName string
0000000000000000000000000000000000000000;;			identifier      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"prometheus-node-exporter-rv90m",
0000000000000000000000000000000000000000;;				"prometheus-node-exporter-",
0000000000000000000000000000000000000000;;				"prometheus-node-exporter",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"simplepod",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"simplepod",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"p",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				"p",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			identifier := constructSyslogIdentifier(testCase.podGenerateName, testCase.podName)
0000000000000000000000000000000000000000;;			assert.Equal(t, testCase.identifier, identifier, fmt.Sprintf("Test case #%d", i))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetPodSystemdServiceFiles(t *testing.T) {
0000000000000000000000000000000000000000;;		fs := kubetesting.NewFakeOS()
0000000000000000000000000000000000000000;;		r := &Runtime{os: fs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			serviceFilesOnDisk []string
0000000000000000000000000000000000000000;;			expected           []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"one.service", "two.service", "k8s_513ce947-8f6e-4d27-8c03-99f97b78d680.service", "k8s_184482df-8630-4d41-b84f-302684871758.service", "k8s_f4a244d8-5ec2-4f59-b7dd-c9e130d6e7a3.service", "k8s_f5aad446-5598-488f-93a4-5a27e03e7fcb.service"},
0000000000000000000000000000000000000000;;				[]string{"k8s_513ce947-8f6e-4d27-8c03-99f97b78d680.service", "k8s_184482df-8630-4d41-b84f-302684871758.service", "k8s_f4a244d8-5ec2-4f59-b7dd-c9e130d6e7a3.service", "k8s_f5aad446-5598-488f-93a4-5a27e03e7fcb.service"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"one.service", "two.service"},
0000000000000000000000000000000000000000;;				[]string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]string{"one.service", "k8s_513ce947-8f6e-4d27-8c03-99f97b78d680.service"},
0000000000000000000000000000000000000000;;				[]string{"k8s_513ce947-8f6e-4d27-8c03-99f97b78d680.service"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tt := range testCases {
0000000000000000000000000000000000000000;;			ctrl := gomock.NewController(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			fs.ReadDirFn = func(dirname string) ([]os.FileInfo, error) {
0000000000000000000000000000000000000000;;				serviceFileNames := tt.serviceFilesOnDisk
0000000000000000000000000000000000000000;;				var fileInfos []os.FileInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for _, name := range serviceFileNames {
0000000000000000000000000000000000000000;;					mockFI := containertesting.NewMockFileInfo(ctrl)
0000000000000000000000000000000000000000;;					// we need to specify two calls
0000000000000000000000000000000000000000;;					// first: get all systemd units
0000000000000000000000000000000000000000;;					// second: filter only the files with a k8s_ prefix
0000000000000000000000000000000000000000;;					mockFI.EXPECT().Name().Return(name)
0000000000000000000000000000000000000000;;					mockFI.EXPECT().Name().Return(name)
0000000000000000000000000000000000000000;;					fileInfos = append(fileInfos, mockFI)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return fileInfos, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			serviceFiles, err := r.getPodSystemdServiceFiles()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, f := range serviceFiles {
0000000000000000000000000000000000000000;;				assert.Contains(t, tt.expected, f.Name(), fmt.Sprintf("Test case #%d", i))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetupSystemdCustomFields(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			unitOpts       []*unit.UnitOption
0000000000000000000000000000000000000000;;			podAnnotations map[string]string
0000000000000000000000000000000000000000;;			expectedValues []string
0000000000000000000000000000000000000000;;			raiseErr       bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// without annotation
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]*unit.UnitOption{
0000000000000000000000000000000000000000;;					{Section: "Service", Name: "ExecStart", Value: "/bin/true"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				map[string]string{},
0000000000000000000000000000000000000000;;				[]string{"/bin/true"},
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// with valid annotation for LimitNOFile
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]*unit.UnitOption{
0000000000000000000000000000000000000000;;					{Section: "Service", Name: "ExecStart", Value: "/bin/true"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				map[string]string{k8sRktLimitNoFileAnno: "1024"},
0000000000000000000000000000000000000000;;				[]string{"/bin/true", "1024"},
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// with invalid annotation for LimitNOFile
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				[]*unit.UnitOption{
0000000000000000000000000000000000000000;;					{Section: "Service", Name: "ExecStart", Value: "/bin/true"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				map[string]string{k8sRktLimitNoFileAnno: "-1"},
0000000000000000000000000000000000000000;;				[]string{"/bin/true"},
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tt := range testCases {
0000000000000000000000000000000000000000;;			raiseErr := false
0000000000000000000000000000000000000000;;			newUnitsOpts, err := setupSystemdCustomFields(tt.podAnnotations, tt.unitOpts)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				raiseErr = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			assert.Equal(t, tt.raiseErr, raiseErr, fmt.Sprintf("Test case #%d", i))
0000000000000000000000000000000000000000;;			for _, opt := range newUnitsOpts {
0000000000000000000000000000000000000000;;				assert.Equal(t, "Service", opt.Section, fmt.Sprintf("Test case #%d", i))
0000000000000000000000000000000000000000;;				assert.Contains(t, tt.expectedValues, opt.Value, fmt.Sprintf("Test case #%d", i))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
