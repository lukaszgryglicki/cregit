0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
037e4f9dc0020835ed002f06e3d3c381009429b9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rkt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/go-systemd/dbus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// systemdVersion is a type wraps the int to implement kubecontainer.Version interface.
0000000000000000000000000000000000000000;;	type systemdVersion int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s systemdVersion) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d", s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s systemdVersion) Compare(other string) (int, error) {
0000000000000000000000000000000000000000;;		v, err := strconv.Atoi(other)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if int(s) < v {
0000000000000000000000000000000000000000;;			return -1, nil
0000000000000000000000000000000000000000;;		} else if int(s) > v {
0000000000000000000000000000000000000000;;			return 1, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// systemdInterface is an abstraction of the go-systemd/dbus to make
0000000000000000000000000000000000000000;;	// it mockable for testing.
0000000000000000000000000000000000000000;;	// TODO(yifan): Eventually we should move these functionalities to:
0000000000000000000000000000000000000000;;	// 1. a package for launching/stopping rkt pods.
0000000000000000000000000000000000000000;;	// 2. rkt api-service interface for listing pods.
0000000000000000000000000000000000000000;;	// See https://github.com/coreos/rkt/issues/1769.
0000000000000000000000000000000000000000;;	type systemdInterface interface {
0000000000000000000000000000000000000000;;		// Version returns the version of the systemd.
0000000000000000000000000000000000000000;;		Version() (systemdVersion, error)
0000000000000000000000000000000000000000;;		// ListUnits lists all the loaded units.
0000000000000000000000000000000000000000;;		ListUnits() ([]dbus.UnitStatus, error)
0000000000000000000000000000000000000000;;		// StopUnits stops the unit with the given name.
0000000000000000000000000000000000000000;;		StopUnit(name string, mode string, ch chan<- string) (int, error)
0000000000000000000000000000000000000000;;		// RestartUnit restarts the unit with the given name.
0000000000000000000000000000000000000000;;		RestartUnit(name string, mode string, ch chan<- string) (int, error)
0000000000000000000000000000000000000000;;		// ResetFailedUnit resets the "failed" state of a specific unit.
0000000000000000000000000000000000000000;;		ResetFailedUnit(name string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// systemd implements the systemdInterface using dbus and systemctl.
0000000000000000000000000000000000000000;;	// All the functions other then Version() are already implemented by go-systemd/dbus.
0000000000000000000000000000000000000000;;	type systemd struct {
0000000000000000000000000000000000000000;;		*dbus.Conn
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newSystemd creates a systemd object that implements systemdInterface.
0000000000000000000000000000000000000000;;	func newSystemd() (*systemd, error) {
0000000000000000000000000000000000000000;;		dbusConn, err := dbus.New()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &systemd{dbusConn}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Version returns the version of the systemd.
0000000000000000000000000000000000000000;;	func (s *systemd) Version() (systemdVersion, error) {
0000000000000000000000000000000000000000;;		versionStr, err := s.Conn.GetManagerProperty("Version")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result, err := strconv.Atoi(strings.Trim(versionStr, "\""))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return systemdVersion(result), nil
0000000000000000000000000000000000000000;;	}
