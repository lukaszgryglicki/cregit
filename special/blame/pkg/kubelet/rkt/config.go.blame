0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
09b65755e0f47b4458a86fda51603b2414965cf1;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rkt
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rktapi "github.com/coreos/rkt/api/v1alpha"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Config stores the global configuration for the rkt runtime.
0000000000000000000000000000000000000000;;	// Detailed documents can be found at:
0000000000000000000000000000000000000000;;	// https://github.com/coreos/rkt/blob/master/Documentation/commands.md#global-options
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		// The absolute path to the binary, or leave empty to find it in $PATH.
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;		// The rkt data directory.
0000000000000000000000000000000000000000;;		Dir string
0000000000000000000000000000000000000000;;		// The image to use as stage1.
0000000000000000000000000000000000000000;;		Stage1Image string
0000000000000000000000000000000000000000;;		// The debug flag for rkt.
0000000000000000000000000000000000000000;;		Debug bool
0000000000000000000000000000000000000000;;		// Comma-separated list of security features to disable.
0000000000000000000000000000000000000000;;		// Allowed values: "none", "image", "tls", "ondisk", "http", "all".
0000000000000000000000000000000000000000;;		InsecureOptions string
0000000000000000000000000000000000000000;;		// The local config directory.
0000000000000000000000000000000000000000;;		LocalConfigDir string
0000000000000000000000000000000000000000;;		// The user config directory.
0000000000000000000000000000000000000000;;		UserConfigDir string
0000000000000000000000000000000000000000;;		// The system config directory.
0000000000000000000000000000000000000000;;		SystemConfigDir string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// buildGlobalOptions returns an array of global command line options.
0000000000000000000000000000000000000000;;	func (c *Config) buildGlobalOptions() []string {
0000000000000000000000000000000000000000;;		var result []string
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return result
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if c.Debug {
0000000000000000000000000000000000000000;;			result = append(result, "--debug=true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.InsecureOptions != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--insecure-options=%s", c.InsecureOptions))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.LocalConfigDir != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--local-config=%s", c.LocalConfigDir))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.UserConfigDir != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--user-config=%s", c.UserConfigDir))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.SystemConfigDir != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--system-config=%s", c.SystemConfigDir))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.Dir != "" {
0000000000000000000000000000000000000000;;			result = append(result, fmt.Sprintf("--dir=%s", c.Dir))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getConfig gets configurations from the rkt API service
0000000000000000000000000000000000000000;;	// and merge it with the existing config. The merge rule is
0000000000000000000000000000000000000000;;	// that the fields in the provided config will override the
0000000000000000000000000000000000000000;;	// result that get from the rkt api service.
0000000000000000000000000000000000000000;;	func (r *Runtime) getConfig(cfg *Config) (*Config, error) {
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithTimeout(context.Background(), r.requestTimeout)
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;		resp, err := r.apisvc.GetInfo(ctx, &rktapi.GetInfoRequest{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flags := resp.Info.GlobalFlags
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if flags.Dir != "" {
0000000000000000000000000000000000000000;;			cfg.Dir = flags.Dir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags.LocalConfigDir != "" {
0000000000000000000000000000000000000000;;			cfg.LocalConfigDir = flags.LocalConfigDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags.UserConfigDir != "" {
0000000000000000000000000000000000000000;;			cfg.UserConfigDir = flags.UserConfigDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags.SystemConfigDir != "" {
0000000000000000000000000000000000000000;;			cfg.SystemConfigDir = flags.SystemConfigDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flags.InsecureFlags != "" {
0000000000000000000000000000000000000000;;			cfg.InsecureOptions = fmt.Sprintf("%s,%s", cfg.InsecureOptions, flags.InsecureFlags)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cfg, nil
0000000000000000000000000000000000000000;;	}
