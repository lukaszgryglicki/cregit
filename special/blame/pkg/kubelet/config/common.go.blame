0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
251e6a369696ff59ca855e3ec14d66995faccc8e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Common logic used by both http and file channels.
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/md5"
0000000000000000000000000000000000000000;;		"encoding/hex"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		utilyaml "k8s.io/apimachinery/pkg/util/yaml"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/helper"
0000000000000000000000000000000000000000;;		k8s_api_v1 "k8s.io/kubernetes/pkg/api/v1"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api/validation"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/kubernetes/pkg/kubelet/types"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/util/hash"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generate a pod name that is unique among nodes by appending the nodeName.
0000000000000000000000000000000000000000;;	func generatePodName(name string, nodeName types.NodeName) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s-%s", name, nodeName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func applyDefaults(pod *api.Pod, source string, isFile bool, nodeName types.NodeName) error {
0000000000000000000000000000000000000000;;		if len(pod.UID) == 0 {
0000000000000000000000000000000000000000;;			hasher := md5.New()
0000000000000000000000000000000000000000;;			if isFile {
0000000000000000000000000000000000000000;;				fmt.Fprintf(hasher, "host:%s", nodeName)
0000000000000000000000000000000000000000;;				fmt.Fprintf(hasher, "file:%s", source)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fmt.Fprintf(hasher, "url:%s", source)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			hash.DeepHashObject(hasher, pod)
0000000000000000000000000000000000000000;;			pod.UID = types.UID(hex.EncodeToString(hasher.Sum(nil)[0:]))
0000000000000000000000000000000000000000;;			glog.V(5).Infof("Generated UID %q pod %q from %s", pod.UID, pod.Name, source)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.Name = generatePodName(pod.Name, nodeName)
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Generated Name %q for UID %q from URL %s", pod.Name, pod.UID, source)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if pod.Namespace == "" {
0000000000000000000000000000000000000000;;			pod.Namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(5).Infof("Using namespace %q for pod %q from %s", pod.Namespace, pod.Name, source)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set the Host field to indicate this pod is scheduled on the current node.
0000000000000000000000000000000000000000;;		pod.Spec.NodeName = string(nodeName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod.ObjectMeta.SelfLink = getSelfLink(pod.Name, pod.Namespace)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if pod.Annotations == nil {
0000000000000000000000000000000000000000;;			pod.Annotations = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// The generated UID is the hash of the file.
0000000000000000000000000000000000000000;;		pod.Annotations[kubetypes.ConfigHashAnnotationKey] = string(pod.UID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isFile {
0000000000000000000000000000000000000000;;			// Applying the default Taint tolerations to static pods,
0000000000000000000000000000000000000000;;			// so they are not evicted when there are node problems.
0000000000000000000000000000000000000000;;			helper.AddOrUpdateTolerationInPod(pod, &api.Toleration{
0000000000000000000000000000000000000000;;				Operator: "Exists",
0000000000000000000000000000000000000000;;				Effect:   api.TaintEffectNoExecute,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set the default status to pending.
0000000000000000000000000000000000000000;;		pod.Status.Phase = api.PodPending
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getSelfLink(name, namespace string) string {
0000000000000000000000000000000000000000;;		var selfLink string
0000000000000000000000000000000000000000;;		if len(namespace) == 0 {
0000000000000000000000000000000000000000;;			namespace = metav1.NamespaceDefault
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		selfLink = fmt.Sprintf("/api/"+api.Registry.GroupOrDie(api.GroupName).GroupVersion.Version+"/namespaces/%s/pods/%s", namespace, name)
0000000000000000000000000000000000000000;;		return selfLink
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type defaultFunc func(pod *api.Pod) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func tryDecodeSinglePod(data []byte, defaultFn defaultFunc) (parsed bool, pod *v1.Pod, err error) {
0000000000000000000000000000000000000000;;		// JSON is valid YAML, so this should work for everything.
0000000000000000000000000000000000000000;;		json, err := utilyaml.ToJSON(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj, err := runtime.Decode(api.Codecs.UniversalDecoder(), json)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, pod, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newPod, ok := obj.(*api.Pod)
0000000000000000000000000000000000000000;;		// Check whether the object could be converted to single pod.
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("invalid pod: %#v", obj)
0000000000000000000000000000000000000000;;			return false, pod, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Apply default values and validate the pod.
0000000000000000000000000000000000000000;;		if err = defaultFn(newPod); err != nil {
0000000000000000000000000000000000000000;;			return true, pod, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := validation.ValidatePod(newPod); len(errs) > 0 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("invalid pod: %v", errs)
0000000000000000000000000000000000000000;;			return true, pod, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v1Pod := &v1.Pod{}
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_api_Pod_To_v1_Pod(newPod, v1Pod, nil); err != nil {
0000000000000000000000000000000000000000;;			return true, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, v1Pod, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func tryDecodePodList(data []byte, defaultFn defaultFunc) (parsed bool, pods v1.PodList, err error) {
0000000000000000000000000000000000000000;;		obj, err := runtime.Decode(api.Codecs.UniversalDecoder(), data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, pods, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newPods, ok := obj.(*api.PodList)
0000000000000000000000000000000000000000;;		// Check whether the object could be converted to list of pods.
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("invalid pods list: %#v", obj)
0000000000000000000000000000000000000000;;			return false, pods, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Apply default values and validate pods.
0000000000000000000000000000000000000000;;		for i := range newPods.Items {
0000000000000000000000000000000000000000;;			newPod := &newPods.Items[i]
0000000000000000000000000000000000000000;;			if err = defaultFn(newPod); err != nil {
0000000000000000000000000000000000000000;;				return true, pods, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errs := validation.ValidatePod(newPod); len(errs) > 0 {
0000000000000000000000000000000000000000;;				err = fmt.Errorf("invalid pod: %v", errs)
0000000000000000000000000000000000000000;;				return true, pods, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v1Pods := &v1.PodList{}
0000000000000000000000000000000000000000;;		if err := k8s_api_v1.Convert_api_PodList_To_v1_PodList(newPods, v1Pods, nil); err != nil {
0000000000000000000000000000000000000000;;			return true, pods, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, *v1Pods, err
0000000000000000000000000000000000000000;;	}
