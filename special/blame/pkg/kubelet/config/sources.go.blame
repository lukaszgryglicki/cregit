0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a0538f93fd3b2eefbb720aff1f594d6a6a7fa666;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package config implements the pod configuration readers.
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SourcesReadyFn is function that returns true if the specified sources have been seen.
0000000000000000000000000000000000000000;;	type SourcesReadyFn func(sourcesSeen sets.String) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SourcesReady tracks the set of configured sources seen by the kubelet.
0000000000000000000000000000000000000000;;	type SourcesReady interface {
0000000000000000000000000000000000000000;;		// AddSource adds the specified source to the set of sources managed.
0000000000000000000000000000000000000000;;		AddSource(source string)
0000000000000000000000000000000000000000;;		// AllReady returns true if the currently configured sources have all been seen.
0000000000000000000000000000000000000000;;		AllReady() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSourcesReady returns a SourcesReady with the specified function.
0000000000000000000000000000000000000000;;	func NewSourcesReady(sourcesReadyFn SourcesReadyFn) SourcesReady {
0000000000000000000000000000000000000000;;		return &sourcesImpl{
0000000000000000000000000000000000000000;;			sourcesSeen:    sets.NewString(),
0000000000000000000000000000000000000000;;			sourcesReadyFn: sourcesReadyFn,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sourcesImpl implements SourcesReady.  It is thread-safe.
0000000000000000000000000000000000000000;;	type sourcesImpl struct {
0000000000000000000000000000000000000000;;		// lock protects access to sources seen.
0000000000000000000000000000000000000000;;		lock sync.RWMutex
0000000000000000000000000000000000000000;;		// set of sources seen.
0000000000000000000000000000000000000000;;		sourcesSeen sets.String
0000000000000000000000000000000000000000;;		// sourcesReady is a function that evaluates if the sources are ready.
0000000000000000000000000000000000000000;;		sourcesReadyFn SourcesReadyFn
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add adds the specified source to the set of sources managed.
0000000000000000000000000000000000000000;;	func (s *sourcesImpl) AddSource(source string) {
0000000000000000000000000000000000000000;;		s.lock.Lock()
0000000000000000000000000000000000000000;;		defer s.lock.Unlock()
0000000000000000000000000000000000000000;;		s.sourcesSeen.Insert(source)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllReady returns true if each configured source is ready.
0000000000000000000000000000000000000000;;	func (s *sourcesImpl) AllReady() bool {
0000000000000000000000000000000000000000;;		s.lock.RLock()
0000000000000000000000000000000000000000;;		defer s.lock.RUnlock()
0000000000000000000000000000000000000000;;		return s.sourcesReadyFn(s.sourcesSeen)
0000000000000000000000000000000000000000;;	}
