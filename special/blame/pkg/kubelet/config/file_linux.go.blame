0000000000000000000000000000000000000000;;	// +build linux
c854f6ad1fdaf846f54ba81d7af8c30505dadd0d;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reads the pod configuration from file or a directory of files.
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"golang.org/x/exp/inotify"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/kubernetes/pkg/kubelet/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type podEventType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		podAdd podEventType = iota
0000000000000000000000000000000000000000;;		podModify
0000000000000000000000000000000000000000;;		podDelete
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *sourceFile) watch() error {
0000000000000000000000000000000000000000;;		_, err := os.Stat(s.path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Emit an update with an empty PodList to allow FileSource to be marked as seen
0000000000000000000000000000000000000000;;			s.updates <- kubetypes.PodUpdate{Pods: []*v1.Pod{}, Op: kubetypes.SET, Source: kubetypes.FileSource}
0000000000000000000000000000000000000000;;			return fmt.Errorf("path does not exist, ignoring")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w, err := inotify.NewWatcher()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unable to create inotify: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer w.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = w.AddWatch(s.path, inotify.IN_DELETE_SELF|inotify.IN_CREATE|inotify.IN_MOVED_TO|inotify.IN_MODIFY|inotify.IN_MOVED_FROM|inotify.IN_DELETE)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unable to create inotify for path %q: %v", s.path, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reset store with config files already existing when starting
0000000000000000000000000000000000000000;;		if err := s.resetStoreFromPath(); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unable to read config path %q: %v", s.path, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case event := <-w.Event:
0000000000000000000000000000000000000000;;				err = s.processEvent(event)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("error while processing event (%+v): %v", event, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case err = <-w.Error:
0000000000000000000000000000000000000000;;				return fmt.Errorf("error while watching %q: %v", s.path, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *sourceFile) processEvent(e *inotify.Event) error {
0000000000000000000000000000000000000000;;		// Ignore file start with dots
0000000000000000000000000000000000000000;;		if strings.HasPrefix(filepath.Base(e.Name), ".") {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Ignored pod manifest: %s, because it starts with dots", e.Name)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var eventType podEventType
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case (e.Mask & inotify.IN_ISDIR) > 0:
0000000000000000000000000000000000000000;;			glog.V(1).Infof("Not recursing into config path %q", s.path)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case (e.Mask & inotify.IN_CREATE) > 0:
0000000000000000000000000000000000000000;;			eventType = podAdd
0000000000000000000000000000000000000000;;		case (e.Mask & inotify.IN_MOVED_TO) > 0:
0000000000000000000000000000000000000000;;			eventType = podAdd
0000000000000000000000000000000000000000;;		case (e.Mask & inotify.IN_MODIFY) > 0:
0000000000000000000000000000000000000000;;			eventType = podModify
0000000000000000000000000000000000000000;;		case (e.Mask & inotify.IN_DELETE) > 0:
0000000000000000000000000000000000000000;;			eventType = podDelete
0000000000000000000000000000000000000000;;		case (e.Mask & inotify.IN_MOVED_FROM) > 0:
0000000000000000000000000000000000000000;;			eventType = podDelete
0000000000000000000000000000000000000000;;		case (e.Mask & inotify.IN_DELETE_SELF) > 0:
0000000000000000000000000000000000000000;;			return fmt.Errorf("the watched path is deleted")
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// Ignore rest events
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch eventType {
0000000000000000000000000000000000000000;;		case podAdd, podModify:
0000000000000000000000000000000000000000;;			if pod, err := s.extractFromFile(e.Name); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("can't process config file %q: %v", e.Name, err)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return s.store.Add(pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case podDelete:
0000000000000000000000000000000000000000;;			if objKey, keyExist := s.fileKeyMapping[e.Name]; keyExist {
0000000000000000000000000000000000000000;;				pod, podExist, err := s.store.GetByKey(objKey)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				} else if !podExist {
0000000000000000000000000000000000000000;;					return fmt.Errorf("the pod with key %s doesn't exist in cache", objKey)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return s.store.Delete(pod)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
