0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f37e8d7605f26ab00dd5d58e7b1225475d7a741a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reads the pod configuration from file or a directory of files.
0000000000000000000000000000000000000000;;	package config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kubernetes/pkg/api"
0000000000000000000000000000000000000000;;		kubetypes "k8s.io/kubernetes/pkg/kubelet/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type sourceFile struct {
0000000000000000000000000000000000000000;;		path           string
0000000000000000000000000000000000000000;;		nodeName       types.NodeName
0000000000000000000000000000000000000000;;		store          cache.Store
0000000000000000000000000000000000000000;;		fileKeyMapping map[string]string
0000000000000000000000000000000000000000;;		updates        chan<- interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSourceFile(path string, nodeName types.NodeName, period time.Duration, updates chan<- interface{}) {
0000000000000000000000000000000000000000;;		// "golang.org/x/exp/inotify" requires a path without trailing "/"
0000000000000000000000000000000000000000;;		path = strings.TrimRight(path, string(os.PathSeparator))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := new(path, nodeName, period, updates)
0000000000000000000000000000000000000000;;		glog.V(1).Infof("Watching path %q", path)
0000000000000000000000000000000000000000;;		go wait.Forever(config.run, period)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func new(path string, nodeName types.NodeName, period time.Duration, updates chan<- interface{}) *sourceFile {
0000000000000000000000000000000000000000;;		send := func(objs []interface{}) {
0000000000000000000000000000000000000000;;			var pods []*v1.Pod
0000000000000000000000000000000000000000;;			for _, o := range objs {
0000000000000000000000000000000000000000;;				pods = append(pods, o.(*v1.Pod))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			updates <- kubetypes.PodUpdate{Pods: pods, Op: kubetypes.SET, Source: kubetypes.FileSource}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		store := cache.NewUndeltaStore(send, cache.MetaNamespaceKeyFunc)
0000000000000000000000000000000000000000;;		return &sourceFile{
0000000000000000000000000000000000000000;;			path:           path,
0000000000000000000000000000000000000000;;			nodeName:       nodeName,
0000000000000000000000000000000000000000;;			store:          store,
0000000000000000000000000000000000000000;;			fileKeyMapping: map[string]string{},
0000000000000000000000000000000000000000;;			updates:        updates,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *sourceFile) run() {
0000000000000000000000000000000000000000;;		if err := s.watch(); err != nil {
0000000000000000000000000000000000000000;;			glog.Errorf("unable to read config path %q: %v", s.path, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *sourceFile) applyDefaults(pod *api.Pod, source string) error {
0000000000000000000000000000000000000000;;		return applyDefaults(pod, source, true, s.nodeName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *sourceFile) resetStoreFromPath() error {
0000000000000000000000000000000000000000;;		path := s.path
0000000000000000000000000000000000000000;;		statInfo, err := os.Stat(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Emit an update with an empty PodList to allow FileSource to be marked as seen
0000000000000000000000000000000000000000;;			s.updates <- kubetypes.PodUpdate{Pods: []*v1.Pod{}, Op: kubetypes.SET, Source: kubetypes.FileSource}
0000000000000000000000000000000000000000;;			return fmt.Errorf("path does not exist, ignoring")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case statInfo.Mode().IsDir():
0000000000000000000000000000000000000000;;			pods, err := s.extractFromDir(path)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(pods) == 0 {
0000000000000000000000000000000000000000;;				// Emit an update with an empty PodList to allow FileSource to be marked as seen
0000000000000000000000000000000000000000;;				s.updates <- kubetypes.PodUpdate{Pods: pods, Op: kubetypes.SET, Source: kubetypes.FileSource}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return s.replaceStore(pods...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case statInfo.Mode().IsRegular():
0000000000000000000000000000000000000000;;			pod, err := s.extractFromFile(path)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return s.replaceStore(pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("path is not a directory or file")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get as many pod configs as we can from a directory. Return an error if and only if something
0000000000000000000000000000000000000000;;	// prevented us from reading anything at all. Do not return an error if only some files
0000000000000000000000000000000000000000;;	// were problematic.
0000000000000000000000000000000000000000;;	func (s *sourceFile) extractFromDir(name string) ([]*v1.Pod, error) {
0000000000000000000000000000000000000000;;		dirents, err := filepath.Glob(filepath.Join(name, "[^.]*"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("glob failed: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pods := make([]*v1.Pod, 0)
0000000000000000000000000000000000000000;;		if len(dirents) == 0 {
0000000000000000000000000000000000000000;;			return pods, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sort.Strings(dirents)
0000000000000000000000000000000000000000;;		for _, path := range dirents {
0000000000000000000000000000000000000000;;			statInfo, err := os.Stat(path)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.V(1).Infof("Can't get metadata for %q: %v", path, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case statInfo.Mode().IsDir():
0000000000000000000000000000000000000000;;				glog.V(1).Infof("Not recursing into config path %q", path)
0000000000000000000000000000000000000000;;			case statInfo.Mode().IsRegular():
0000000000000000000000000000000000000000;;				pod, err := s.extractFromFile(path)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					glog.V(1).Infof("Can't process config file %q: %v", path, err)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					pods = append(pods, pod)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				glog.V(1).Infof("Config path %q is not a directory or file: %v", path, statInfo.Mode())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pods, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *sourceFile) extractFromFile(filename string) (pod *v1.Pod, err error) {
0000000000000000000000000000000000000000;;		glog.V(3).Infof("Reading config file %q", filename)
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err == nil && pod != nil {
0000000000000000000000000000000000000000;;				objKey, keyErr := cache.MetaNamespaceKeyFunc(pod)
0000000000000000000000000000000000000000;;				if keyErr != nil {
0000000000000000000000000000000000000000;;					err = keyErr
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				s.fileKeyMapping[filename] = objKey
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		file, err := os.Open(filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pod, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(file)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return pod, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultFn := func(pod *api.Pod) error {
0000000000000000000000000000000000000000;;			return s.applyDefaults(pod, filename)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parsed, pod, podErr := tryDecodeSinglePod(data, defaultFn)
0000000000000000000000000000000000000000;;		if parsed {
0000000000000000000000000000000000000000;;			if podErr != nil {
0000000000000000000000000000000000000000;;				return pod, podErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return pod, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pod, fmt.Errorf("%v: couldn't parse as pod(%v), please check config file.\n", filename, podErr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *sourceFile) replaceStore(pods ...*v1.Pod) (err error) {
0000000000000000000000000000000000000000;;		objs := []interface{}{}
0000000000000000000000000000000000000000;;		for _, pod := range pods {
0000000000000000000000000000000000000000;;			objs = append(objs, pod)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.store.Replace(objs, "")
0000000000000000000000000000000000000000;;	}
